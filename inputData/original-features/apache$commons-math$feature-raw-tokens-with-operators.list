org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getFreeParameters:null#[return, compiler, getFreeParameters]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getOrder:null#[return, compiler, getOrder]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:createConstant:double#[return, new, DerivativeStructure, getFreeParameters, getOrder, c]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getReal:null#[return, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getValue:null#[return, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getPartialDerivative:int...#[return, data, compiler, getPartialDerivativeIndex, orders]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getAllDerivatives:null#[return, data, clone]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:add:double#[final, DerivativeStructure, ds, new, DerivativeStructure, this, +=, ds.data, 0, a, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:add:DerivativeStructure#[compiler, checkCompatibility, a.compiler, final, DerivativeStructure, ds, new, DerivativeStructure, this, compiler, add, data, 0, a.data, 0, ds.data, 0, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:subtract:double#[return, add, -, a]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:subtract:DerivativeStructure#[compiler, checkCompatibility, a.compiler, final, DerivativeStructure, ds, new, DerivativeStructure, this, compiler, subtract, data, 0, a.data, 0, ds.data, 0, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:multiply:int#[return, multiply, double, n]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:multiply:double#[final, DerivativeStructure, ds, new, DerivativeStructure, this, for, int, i, 0, <, i, ds.data.length, ++, i, *=, ds.data, i, a, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:multiply:DerivativeStructure#[compiler, checkCompatibility, a.compiler, final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, multiply, data, 0, a.data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:divide:double#[final, DerivativeStructure, ds, new, DerivativeStructure, this, for, int, i, 0, <, i, ds.data.length, ++, i, /=, ds.data, i, a, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:divide:DerivativeStructure#[compiler, checkCompatibility, a.compiler, final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, divide, data, 0, a.data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:remainder:double#[final, DerivativeStructure, ds, new, DerivativeStructure, this, =, ds.data, 0, FastMath, IEEEremainder, ds.data, 0, a, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:remainder:DerivativeStructure#[compiler, checkCompatibility, a.compiler, final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, remainder, data, 0, a.data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:negate:null#[final, DerivativeStructure, ds, new, DerivativeStructure, compiler, for, int, i, 0, <, i, ds.data.length, ++, i, =, ds.data, i, -, data, i, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:abs:null#[if, <, Double, doubleToLongBits, data, 0, 0, return, negate, return, this]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:ceil:null#[return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, ceil, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:floor:null#[return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, floor, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:rint:null#[return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, rint, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:round:null#[return, FastMath, round, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:signum:null#[return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, signum, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:copySign:DerivativeStructure#[long, m, Double, doubleToLongBits, data, 0, long, s, Double, doubleToLongBits, sign.data, 0, if, ||, &&, >=, m, 0, >=, s, 0, &&, <, m, 0, <, s, 0, return, this, return, negate]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:copySign:double#[long, m, Double, doubleToLongBits, data, 0, long, s, Double, doubleToLongBits, sign, if, ||, &&, >=, m, 0, >=, s, 0, &&, <, m, 0, <, s, 0, return, this, return, negate]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getExponent:null#[return, FastMath, getExponent, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:scalb:int#[final, DerivativeStructure, ds, new, DerivativeStructure, compiler, for, int, i, 0, <, i, ds.data.length, ++, i, =, ds.data, i, FastMath, scalb, data, i, n, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:hypot:DerivativeStructure#[compiler, checkCompatibility, y.compiler, if, ||, Double, isInfinite, data, 0, Double, isInfinite, y.data, 0, return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getFreeParameters, Double.POSITIVE_INFINITY, if, ||, Double, isNaN, data, 0, Double, isNaN, y.data, 0, return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getFreeParameters, Double.NaN, final, int, expX, getExponent, final, int, expY, y, getExponent, if, >, expX, +, expY, 27, return, abs, if, >, expY, +, expX, 27, return, y, abs, final, int, middleExp, /, +, expX, expY, 2, final, DerivativeStructure, scaledX, scalb, -, middleExp, final, DerivativeStructure, scaledY, y, scalb, -, middleExp, final, DerivativeStructure, scaledH, scaledX, multiply, scaledX, add, scaledY, multiply, scaledY, sqrt, return, scaledH, scalb, middleExp]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:hypot:DerivativeStructure+DerivativeStructure#[return, x, hypot, y]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:compose:double...#[if, !=, f.length, +, getOrder, 1, throw, new, DimensionMismatchException, f.length, +, getOrder, 1, final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, compose, data, 0, f, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:reciprocal:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, pow, data, 0, -, 1, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:sqrt:null#[return, rootN, 2]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:cbrt:null#[return, rootN, 3]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:rootN:int#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, rootN, data, 0, n, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getField:null#[return, new, Field, DerivativeStructure, Override, public, DerivativeStructure, getZero, return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, 0.0, Override, public, DerivativeStructure, getOne, return, new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, 1.0, Override, public, Class, FieldElement, DerivativeStructure, getRuntimeClass, return, DerivativeStructure]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:double+DerivativeStructure#[final, DerivativeStructure, result, new, DerivativeStructure, x.compiler, x.compiler, pow, a, x.data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:double#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, pow, data, 0, p, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:int#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, pow, data, 0, n, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:DerivativeStructure#[compiler, checkCompatibility, e.compiler, final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, pow, data, 0, e.data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:exp:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, exp, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:expm1:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, expm1, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:log:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, log, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:log1p:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, log1p, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:log10:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, log10, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:cos:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, cos, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:sin:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, sin, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:tan:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, tan, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:acos:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, acos, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:asin:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, asin, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atan:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, atan, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atan2:DerivativeStructure#[compiler, checkCompatibility, x.compiler, final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, atan2, data, 0, x.data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atan2:DerivativeStructure+DerivativeStructure#[return, y, atan2, x]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:cosh:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, cosh, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:sinh:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, sinh, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:tanh:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, tanh, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:acosh:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, acosh, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:asinh:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, asinh, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atanh:null#[final, DerivativeStructure, result, new, DerivativeStructure, compiler, compiler, atanh, data, 0, result.data, 0, return, result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:toDegrees:null#[final, DerivativeStructure, ds, new, DerivativeStructure, compiler, for, int, i, 0, <, i, ds.data.length, ++, i, =, ds.data, i, FastMath, toDegrees, data, i, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:toRadians:null#[final, DerivativeStructure, ds, new, DerivativeStructure, compiler, for, int, i, 0, <, i, ds.data.length, ++, i, =, ds.data, i, FastMath, toRadians, data, i, return, ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:taylor:double...#[return, compiler, taylor, data, 0, delta]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure[]+DerivativeStructure[]#[final, double, aDouble, double, a.length, for, int, i, 0, <, i, a.length, ++, i, =, aDouble, i, a, i, getValue, final, double, bDouble, double, b.length, for, int, i, 0, <, i, b.length, ++, i, =, bDouble, i, b, i, getValue, final, double, accurateValue, MathArrays, linearCombination, aDouble, bDouble, DerivativeStructure, simpleValue, a, 0, getField, getZero, for, int, i, 0, <, i, a.length, ++, i, =, simpleValue, simpleValue, add, a, i, multiply, b, i, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, simpleValue, getFreeParameters, simpleValue, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double[]+DerivativeStructure[]#[final, double, bDouble, double, b.length, for, int, i, 0, <, i, b.length, ++, i, =, bDouble, i, b, i, getValue, final, double, accurateValue, MathArrays, linearCombination, a, bDouble, DerivativeStructure, simpleValue, b, 0, getField, getZero, for, int, i, 0, <, i, a.length, ++, i, =, simpleValue, simpleValue, add, b, i, multiply, a, i, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, simpleValue, getFreeParameters, simpleValue, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure#[final, double, accurateValue, MathArrays, linearCombination, a1, getValue, b1, getValue, a2, getValue, b2, getValue, final, DerivativeStructure, simpleValue, a1, multiply, b1, add, a2, multiply, b2, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double+DerivativeStructure+double+DerivativeStructure#[final, double, accurateValue, MathArrays, linearCombination, a1, b1, getValue, a2, b2, getValue, final, DerivativeStructure, simpleValue, b1, multiply, a1, add, b2, multiply, a2, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure#[final, double, accurateValue, MathArrays, linearCombination, a1, getValue, b1, getValue, a2, getValue, b2, getValue, a3, getValue, b3, getValue, final, DerivativeStructure, simpleValue, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double+DerivativeStructure+double+DerivativeStructure+double+DerivativeStructure#[final, double, accurateValue, MathArrays, linearCombination, a1, b1, getValue, a2, b2, getValue, a3, b3, getValue, final, DerivativeStructure, simpleValue, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure#[final, double, accurateValue, MathArrays, linearCombination, a1, getValue, b1, getValue, a2, getValue, b2, getValue, a3, getValue, b3, getValue, a4, getValue, b4, getValue, final, DerivativeStructure, simpleValue, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, add, a4, multiply, b4, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double+DerivativeStructure+double+DerivativeStructure+double+DerivativeStructure+double+DerivativeStructure#[final, double, accurateValue, MathArrays, linearCombination, a1, b1, getValue, a2, b2, getValue, a3, b3, getValue, a4, b4, getValue, final, DerivativeStructure, simpleValue, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, add, b4, multiply, a4, final, double, all, simpleValue, getAllDerivatives, =, all, 0, accurateValue, return, new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, DerivativeStructure, final, DerivativeStructure, rhs, DerivativeStructure, other, return, &&, ==, getFreeParameters, rhs, getFreeParameters, ==, getOrder, rhs, getOrder, MathArrays, equals, data, rhs.data, return, false]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:hashCode:null#[return, +, +, +, 227, *, 229, getFreeParameters, *, 233, getOrder, *, 239, MathUtils, hash, data]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:writeReplace:null#[return, new, DataTransferObject, compiler, getFreeParameters, compiler, getOrder, data]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getCompiler:int+int#[final, DSCompiler, cache, compilers, get, if, &&, &&, &&, !=, cache, null, >, cache.length, parameters, >, cache, parameters, length, order, !=, cache, parameters, order, null, return, cache, parameters, order, final, int, maxParameters, FastMath, max, parameters, ==, cache, null, 0, cache.length, final, int, maxOrder, FastMath, max, order, ==, cache, null, 0, cache, 0, length, final, DSCompiler, newCache, DSCompiler, +, maxParameters, 1, +, maxOrder, 1, if, !=, cache, null, for, int, i, 0, <, i, cache.length, ++, i, System, arraycopy, cache, i, 0, newCache, i, 0, cache, i, length, for, int, diag, 0, <=, diag, +, parameters, order, ++, diag, for, int, o, FastMath, max, 0, -, diag, parameters, <=, o, FastMath, min, order, diag, ++, o, final, int, p, -, diag, o, if, ==, newCache, p, o, null, final, DSCompiler, valueCompiler, ==, p, 0, null, newCache, -, p, 1, o, final, DSCompiler, derivativeCompiler, ==, o, 0, null, newCache, p, -, o, 1, =, newCache, p, o, new, DSCompiler, p, o, valueCompiler, derivativeCompiler, compilers, compareAndSet, cache, newCache, return, newCache, parameters, order]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileSizes:int+int+DSCompiler#[final, int, sizes, int, +, parameters, 1, +, order, 1, if, ==, parameters, 0, Arrays, fill, sizes, 0, 1, System, arraycopy, valueCompiler.sizes, 0, sizes, 0, parameters, =, sizes, parameters, 0, 1, for, int, i, 0, <, i, order, ++, i, =, sizes, parameters, +, i, 1, +, sizes, parameters, i, sizes, -, parameters, 1, +, i, 1, return, sizes]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileDerivativesIndirection:int+int+DSCompiler+DSCompiler#[if, ||, ==, parameters, 0, ==, order, 0, return, int, 1, parameters, final, int, vSize, valueCompiler.derivativesIndirection.length, final, int, dSize, derivativeCompiler.derivativesIndirection.length, final, int, derivativesIndirection, int, +, vSize, dSize, parameters, for, int, i, 0, <, i, vSize, ++, i, System, arraycopy, valueCompiler.derivativesIndirection, i, 0, derivativesIndirection, i, 0, -, parameters, 1, for, int, i, 0, <, i, dSize, ++, i, System, arraycopy, derivativeCompiler.derivativesIndirection, i, 0, derivativesIndirection, +, vSize, i, 0, parameters, ++, derivativesIndirection, +, vSize, i, -, parameters, 1, return, derivativesIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileLowerIndirection:int+int+DSCompiler+DSCompiler#[if, ||, ==, parameters, 0, <=, order, 1, return, int, 0, final, int, vSize, valueCompiler.lowerIndirection.length, final, int, dSize, derivativeCompiler.lowerIndirection.length, final, int, lowerIndirection, int, +, vSize, dSize, System, arraycopy, valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize, for, int, i, 0, <, i, dSize, ++, i, =, lowerIndirection, +, vSize, i, +, valueCompiler, getSize, derivativeCompiler.lowerIndirection, i, return, lowerIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileMultiplicationIndirection:int+int+DSCompiler+DSCompiler+int[]#[if, ||, ==, parameters, 0, ==, order, 0, return, int, 1, 0, 0, final, int, vSize, valueCompiler.multIndirection.length, final, int, dSize, derivativeCompiler.multIndirection.length, final, int, multIndirection, int, +, vSize, dSize, System, arraycopy, valueCompiler.multIndirection, 0, multIndirection, 0, vSize, for, int, i, 0, <, i, dSize, ++, i, final, int, dRow, derivativeCompiler.multIndirection, i, List, int, row, new, ArrayList, int, *, dRow.length, 2, for, int, j, 0, <, j, dRow.length, ++, j, row, add, int, dRow, j, 0, lowerIndirection, dRow, j, 1, +, vSize, dRow, j, 2, row, add, int, dRow, j, 0, +, vSize, dRow, j, 1, lowerIndirection, dRow, j, 2, final, List, int, combined, new, ArrayList, int, row, size, for, int, j, 0, <, j, row, size, ++, j, final, int, termJ, row, get, j, if, >, termJ, 0, 0, for, int, k, +, j, 1, <, k, row, size, ++, k, final, int, termK, row, get, k, if, &&, ==, termJ, 1, termK, 1, ==, termJ, 2, termK, 2, +=, termJ, 0, termK, 0, =, termK, 0, 0, combined, add, termJ, =, multIndirection, +, vSize, i, combined, toArray, int, combined, size, return, multIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileCompositionIndirection:int+int+DSCompiler+DSCompiler+int[][]+int[][]#[if, ||, ==, parameters, 0, ==, order, 0, return, int, 1, 0, final, int, vSize, valueCompiler.compIndirection.length, final, int, dSize, derivativeCompiler.compIndirection.length, final, int, compIndirection, int, +, vSize, dSize, System, arraycopy, valueCompiler.compIndirection, 0, compIndirection, 0, vSize, for, int, i, 0, <, i, dSize, ++, i, List, int, row, new, ArrayList, int, for, int, term, derivativeCompiler.compIndirection, i, int, derivedTermF, int, +, term.length, 1, =, derivedTermF, 0, term, 0, =, derivedTermF, 1, +, term, 1, 1, int, orders, int, parameters, =, orders, -, parameters, 1, 1, =, derivedTermF, term.length, getPartialDerivativeIndex, parameters, order, sizes, orders, for, int, j, 2, <, j, term.length, ++, j, =, derivedTermF, j, convertIndex, term, j, parameters, derivativeCompiler.derivativesIndirection, parameters, order, sizes, Arrays, sort, derivedTermF, 2, derivedTermF.length, row, add, derivedTermF, for, int, l, 2, <, l, term.length, ++, l, int, derivedTermG, int, term.length, =, derivedTermG, 0, term, 0, =, derivedTermG, 1, term, 1, for, int, j, 2, <, j, term.length, ++, j, =, derivedTermG, j, convertIndex, term, j, parameters, derivativeCompiler.derivativesIndirection, parameters, order, sizes, if, ==, j, l, System, arraycopy, derivativesIndirection, derivedTermG, j, 0, orders, 0, parameters, ++, orders, -, parameters, 1, =, derivedTermG, j, getPartialDerivativeIndex, parameters, order, sizes, orders, Arrays, sort, derivedTermG, 2, derivedTermG.length, row, add, derivedTermG, final, List, int, combined, new, ArrayList, int, row, size, for, int, j, 0, <, j, row, size, ++, j, final, int, termJ, row, get, j, if, >, termJ, 0, 0, for, int, k, +, j, 1, <, k, row, size, ++, k, final, int, termK, row, get, k, boolean, equals, ==, termJ.length, termK.length, for, int, l, 1, &&, equals, <, l, termJ.length, ++, l, &=, equals, ==, termJ, l, termK, l, if, equals, +=, termJ, 0, termK, 0, =, termK, 0, 0, combined, add, termJ, =, compIndirection, +, vSize, i, combined, toArray, int, combined, size, return, compIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getPartialDerivativeIndex:int...#[if, !=, orders.length, getFreeParameters, throw, new, DimensionMismatchException, orders.length, getFreeParameters, return, getPartialDerivativeIndex, parameters, order, sizes, orders]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getPartialDerivativeIndex:int+int+int[][]+int...#[int, index, 0, int, m, order, int, ordersSum, 0, for, int, i, -, parameters, 1, >=, i, 0, --, i, int, derivativeOrder, orders, i, +=, ordersSum, derivativeOrder, if, >, ordersSum, order, throw, new, NumberIsTooLargeException, ordersSum, order, true, while, >, --, derivativeOrder, 0, +=, index, sizes, i, --, m, return, index]
org.apache.commons.math4.analysis.differentiation:DSCompiler:convertIndex:int+int+int[][]+int+int+int[][]#[int, orders, int, destP, System, arraycopy, srcDerivativesIndirection, index, 0, orders, 0, FastMath, min, srcP, destP, return, getPartialDerivativeIndex, destP, destO, destSizes, orders]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getPartialDerivativeOrders:int#[return, derivativesIndirection, index]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getFreeParameters:null#[return, parameters]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getOrder:null#[return, order]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getSize:null#[return, sizes, parameters, order]
org.apache.commons.math4.analysis.differentiation:DSCompiler:linearCombination:double+double[]+int+double+double[]+int+double[]+int#[for, int, i, 0, <, i, getSize, ++, i, =, result, +, resultOffset, i, MathArrays, linearCombination, a1, c1, +, offset1, i, a2, c2, +, offset2, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:linearCombination:double+double[]+int+double+double[]+int+double+double[]+int+double[]+int#[for, int, i, 0, <, i, getSize, ++, i, =, result, +, resultOffset, i, MathArrays, linearCombination, a1, c1, +, offset1, i, a2, c2, +, offset2, i, a3, c3, +, offset3, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:linearCombination:double+double[]+int+double+double[]+int+double+double[]+int+double+double[]+int+double[]+int#[for, int, i, 0, <, i, getSize, ++, i, =, result, +, resultOffset, i, MathArrays, linearCombination, a1, c1, +, offset1, i, a2, c2, +, offset2, i, a3, c3, +, offset3, i, a4, c4, +, offset4, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:add:double[]+int+double[]+int+double[]+int#[for, int, i, 0, <, i, getSize, ++, i, =, result, +, resultOffset, i, +, lhs, +, lhsOffset, i, rhs, +, rhsOffset, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:subtract:double[]+int+double[]+int+double[]+int#[for, int, i, 0, <, i, getSize, ++, i, =, result, +, resultOffset, i, -, lhs, +, lhsOffset, i, rhs, +, rhsOffset, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:multiply:double[]+int+double[]+int+double[]+int#[for, int, i, 0, <, i, multIndirection.length, ++, i, final, int, mappingI, multIndirection, i, double, r, 0, for, int, j, 0, <, j, mappingI.length, ++, j, +=, r, *, mappingI, j, 0, lhs, +, lhsOffset, mappingI, j, 1, rhs, +, rhsOffset, mappingI, j, 2, =, result, +, resultOffset, i, r]
org.apache.commons.math4.analysis.differentiation:DSCompiler:divide:double[]+int+double[]+int+double[]+int#[final, double, reciprocal, double, getSize, pow, rhs, lhsOffset, -, 1, reciprocal, 0, multiply, lhs, lhsOffset, reciprocal, 0, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:remainder:double[]+int+double[]+int+double[]+int#[final, double, rem, FastMath, IEEEremainder, lhs, lhsOffset, rhs, rhsOffset, final, double, k, FastMath, rint, /, -, lhs, lhsOffset, rem, rhs, rhsOffset, =, result, resultOffset, rem, for, int, i, 1, <, i, getSize, ++, i, =, result, +, resultOffset, i, -, lhs, +, lhsOffset, i, *, k, rhs, +, rhsOffset, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double+double[]+int+double[]+int#[final, double, function, double, +, 1, order, if, ==, a, 0, if, ==, operand, operandOffset, 0, =, function, 0, 1, double, infinity, Double.POSITIVE_INFINITY, for, int, i, 1, <, i, function.length, ++, i, =, infinity, -, infinity, =, function, i, infinity, if, <, operand, operandOffset, 0, Arrays, fill, function, Double.NaN, =, function, 0, FastMath, pow, a, operand, operandOffset, final, double, lnA, FastMath, log, a, for, int, i, 1, <, i, function.length, ++, i, =, function, i, *, lnA, function, -, i, 1, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double[]+int+double+double[]+int#[double, function, double, +, 1, order, double, xk, FastMath, pow, operand, operandOffset, -, p, order, for, int, i, order, >, i, 0, --, i, =, function, i, xk, *=, xk, operand, operandOffset, =, function, 0, xk, double, coefficient, p, for, int, i, 1, <=, i, order, ++, i, *=, function, i, coefficient, *=, coefficient, -, p, i, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double[]+int+int+double[]+int#[if, ==, n, 0, =, result, resultOffset, 1.0, Arrays, fill, result, +, resultOffset, 1, +, resultOffset, getSize, 0, return, double, function, double, +, 1, order, if, >, n, 0, final, int, maxOrder, FastMath, min, order, n, double, xk, FastMath, pow, operand, operandOffset, -, n, maxOrder, for, int, i, maxOrder, >, i, 0, --, i, =, function, i, xk, *=, xk, operand, operandOffset, =, function, 0, xk, final, double, inv, /, 1.0, operand, operandOffset, double, xk, FastMath, pow, inv, -, n, for, int, i, 0, <=, i, order, ++, i, =, function, i, xk, *=, xk, inv, double, coefficient, n, for, int, i, 1, <=, i, order, ++, i, *=, function, i, coefficient, *=, coefficient, -, n, i, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double[]+int+double[]+int+double[]+int#[final, double, logX, double, getSize, log, x, xOffset, logX, 0, final, double, yLogX, double, getSize, multiply, logX, 0, y, yOffset, yLogX, 0, exp, yLogX, 0, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:rootN:double[]+int+int+double[]+int#[double, function, double, +, 1, order, double, xk, if, ==, n, 2, =, function, 0, FastMath, sqrt, operand, operandOffset, =, xk, /, 0.5, function, 0, if, ==, n, 3, =, function, 0, FastMath, cbrt, operand, operandOffset, =, xk, /, 1.0, *, 3.0, function, 0, function, 0, =, function, 0, FastMath, pow, operand, operandOffset, /, 1.0, n, =, xk, /, 1.0, *, n, FastMath, pow, function, 0, -, n, 1, final, double, nReciprocal, /, 1.0, n, final, double, xReciprocal, /, 1.0, operand, operandOffset, for, int, i, 1, <=, i, order, ++, i, =, function, i, xk, *=, xk, *, xReciprocal, -, nReciprocal, i, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:exp:double[]+int+double[]+int#[double, function, double, +, 1, order, Arrays, fill, function, FastMath, exp, operand, operandOffset, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:expm1:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, expm1, operand, operandOffset, Arrays, fill, function, 1, +, 1, order, FastMath, exp, operand, operandOffset, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:log:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, log, operand, operandOffset, if, >, order, 0, double, inv, /, 1.0, operand, operandOffset, double, xk, inv, for, int, i, 1, <=, i, order, ++, i, =, function, i, xk, *=, xk, *, -, i, inv, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:log1p:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, log1p, operand, operandOffset, if, >, order, 0, double, inv, /, 1.0, +, 1.0, operand, operandOffset, double, xk, inv, for, int, i, 1, <=, i, order, ++, i, =, function, i, xk, *=, xk, *, -, i, inv, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:log10:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, log10, operand, operandOffset, if, >, order, 0, double, inv, /, 1.0, operand, operandOffset, double, xk, /, inv, FastMath, log, 10.0, for, int, i, 1, <=, i, order, ++, i, =, function, i, xk, *=, xk, *, -, i, inv, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:cos:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, cos, operand, operandOffset, if, >, order, 0, =, function, 1, -, FastMath, sin, operand, operandOffset, for, int, i, 2, <=, i, order, ++, i, =, function, i, -, function, -, i, 2, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:sin:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, sin, operand, operandOffset, if, >, order, 0, =, function, 1, FastMath, cos, operand, operandOffset, for, int, i, 2, <=, i, order, ++, i, =, function, i, -, function, -, i, 2, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:tan:double[]+int+double[]+int#[final, double, function, double, +, 1, order, final, double, t, FastMath, tan, operand, operandOffset, =, function, 0, t, if, >, order, 0, final, double, p, double, +, order, 2, =, p, 1, 1, final, double, t2, *, t, t, for, int, n, 1, <=, n, order, ++, n, double, v, 0, =, p, +, n, 1, *, n, p, n, for, int, k, +, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, t2, p, k, if, >, k, 2, =, p, -, k, 2, +, *, -, k, 1, p, -, k, 1, *, -, k, 3, p, -, k, 3, if, ==, k, 2, =, p, 0, p, 1, if, ==, &, n, 0x1, 0, *=, v, t, =, function, n, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:acos:double[]+int+double[]+int#[double, function, double, +, 1, order, final, double, x, operand, operandOffset, =, function, 0, FastMath, acos, x, if, >, order, 0, final, double, p, double, order, =, p, 0, -, 1, final, double, x2, *, x, x, final, double, f, /, 1.0, -, 1, x2, double, coeff, FastMath, sqrt, f, =, function, 1, *, coeff, p, 0, for, int, n, 2, <=, n, order, ++, n, double, v, 0, =, p, -, n, 1, *, -, n, 1, p, -, n, 2, for, int, k, -, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, x2, p, k, if, >, k, 2, =, p, -, k, 2, +, *, -, k, 1, p, -, k, 1, *, -, *, 2, n, k, p, -, k, 3, if, ==, k, 2, =, p, 0, p, 1, if, ==, &, n, 0x1, 0, *=, v, x, *=, coeff, f, =, function, n, *, coeff, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:asin:double[]+int+double[]+int#[double, function, double, +, 1, order, final, double, x, operand, operandOffset, =, function, 0, FastMath, asin, x, if, >, order, 0, final, double, p, double, order, =, p, 0, 1, final, double, x2, *, x, x, final, double, f, /, 1.0, -, 1, x2, double, coeff, FastMath, sqrt, f, =, function, 1, *, coeff, p, 0, for, int, n, 2, <=, n, order, ++, n, double, v, 0, =, p, -, n, 1, *, -, n, 1, p, -, n, 2, for, int, k, -, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, x2, p, k, if, >, k, 2, =, p, -, k, 2, +, *, -, k, 1, p, -, k, 1, *, -, *, 2, n, k, p, -, k, 3, if, ==, k, 2, =, p, 0, p, 1, if, ==, &, n, 0x1, 0, *=, v, x, *=, coeff, f, =, function, n, *, coeff, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:atan:double[]+int+double[]+int#[double, function, double, +, 1, order, final, double, x, operand, operandOffset, =, function, 0, FastMath, atan, x, if, >, order, 0, final, double, q, double, order, =, q, 0, 1, final, double, x2, *, x, x, final, double, f, /, 1.0, +, 1, x2, double, coeff, f, =, function, 1, *, coeff, q, 0, for, int, n, 2, <=, n, order, ++, n, double, v, 0, =, q, -, n, 1, *, -, n, q, -, n, 2, for, int, k, -, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, x2, q, k, if, >, k, 2, =, q, -, k, 2, +, *, -, k, 1, q, -, k, 1, *, -, k, 1, *, 2, n, q, -, k, 3, if, ==, k, 2, =, q, 0, q, 1, if, ==, &, n, 0x1, 0, *=, v, x, *=, coeff, f, =, function, n, *, coeff, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:atan2:double[]+int+double[]+int+double[]+int#[double, tmp1, double, getSize, multiply, x, xOffset, x, xOffset, tmp1, 0, double, tmp2, double, getSize, multiply, y, yOffset, y, yOffset, tmp2, 0, add, tmp1, 0, tmp2, 0, tmp2, 0, rootN, tmp2, 0, 2, tmp1, 0, if, >=, x, xOffset, 0, add, tmp1, 0, x, xOffset, tmp2, 0, divide, y, yOffset, tmp2, 0, tmp1, 0, atan, tmp1, 0, tmp2, 0, for, int, i, 0, <, i, tmp2.length, ++, i, =, result, +, resultOffset, i, *, 2, tmp2, i, subtract, tmp1, 0, x, xOffset, tmp2, 0, divide, y, yOffset, tmp2, 0, tmp1, 0, atan, tmp1, 0, tmp2, 0, =, result, resultOffset, -, <=, tmp2, 0, 0, -, FastMath.PI, FastMath.PI, *, 2, tmp2, 0, for, int, i, 1, <, i, tmp2.length, ++, i, =, result, +, resultOffset, i, *, -, 2, tmp2, i, =, result, resultOffset, FastMath, atan2, y, yOffset, x, xOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:cosh:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, cosh, operand, operandOffset, if, >, order, 0, =, function, 1, FastMath, sinh, operand, operandOffset, for, int, i, 2, <=, i, order, ++, i, =, function, i, function, -, i, 2, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:sinh:double[]+int+double[]+int#[double, function, double, +, 1, order, =, function, 0, FastMath, sinh, operand, operandOffset, if, >, order, 0, =, function, 1, FastMath, cosh, operand, operandOffset, for, int, i, 2, <=, i, order, ++, i, =, function, i, function, -, i, 2, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:tanh:double[]+int+double[]+int#[final, double, function, double, +, 1, order, final, double, t, FastMath, tanh, operand, operandOffset, =, function, 0, t, if, >, order, 0, final, double, p, double, +, order, 2, =, p, 1, 1, final, double, t2, *, t, t, for, int, n, 1, <=, n, order, ++, n, double, v, 0, =, p, +, n, 1, *, -, n, p, n, for, int, k, +, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, t2, p, k, if, >, k, 2, =, p, -, k, 2, -, *, -, k, 1, p, -, k, 1, *, -, k, 3, p, -, k, 3, if, ==, k, 2, =, p, 0, p, 1, if, ==, &, n, 0x1, 0, *=, v, t, =, function, n, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:acosh:double[]+int+double[]+int#[double, function, double, +, 1, order, final, double, x, operand, operandOffset, =, function, 0, FastMath, acosh, x, if, >, order, 0, final, double, p, double, order, =, p, 0, 1, final, double, x2, *, x, x, final, double, f, /, 1.0, -, x2, 1, double, coeff, FastMath, sqrt, f, =, function, 1, *, coeff, p, 0, for, int, n, 2, <=, n, order, ++, n, double, v, 0, =, p, -, n, 1, *, -, 1, n, p, -, n, 2, for, int, k, -, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, x2, p, k, if, >, k, 2, =, p, -, k, 2, +, *, -, 1, k, p, -, k, 1, *, -, k, *, 2, n, p, -, k, 3, if, ==, k, 2, =, p, 0, -, p, 1, if, ==, &, n, 0x1, 0, *=, v, x, *=, coeff, f, =, function, n, *, coeff, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:asinh:double[]+int+double[]+int#[double, function, double, +, 1, order, final, double, x, operand, operandOffset, =, function, 0, FastMath, asinh, x, if, >, order, 0, final, double, p, double, order, =, p, 0, 1, final, double, x2, *, x, x, final, double, f, /, 1.0, +, 1, x2, double, coeff, FastMath, sqrt, f, =, function, 1, *, coeff, p, 0, for, int, n, 2, <=, n, order, ++, n, double, v, 0, =, p, -, n, 1, *, -, 1, n, p, -, n, 2, for, int, k, -, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, x2, p, k, if, >, k, 2, =, p, -, k, 2, +, *, -, k, 1, p, -, k, 1, *, -, k, *, 2, n, p, -, k, 3, if, ==, k, 2, =, p, 0, p, 1, if, ==, &, n, 0x1, 0, *=, v, x, *=, coeff, f, =, function, n, *, coeff, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:atanh:double[]+int+double[]+int#[double, function, double, +, 1, order, final, double, x, operand, operandOffset, =, function, 0, FastMath, atanh, x, if, >, order, 0, final, double, q, double, order, =, q, 0, 1, final, double, x2, *, x, x, final, double, f, /, 1.0, -, 1, x2, double, coeff, f, =, function, 1, *, coeff, q, 0, for, int, n, 2, <=, n, order, ++, n, double, v, 0, =, q, -, n, 1, *, n, q, -, n, 2, for, int, k, -, n, 1, >=, k, 0, -=, k, 2, =, v, +, *, v, x2, q, k, if, >, k, 2, =, q, -, k, 2, +, *, -, k, 1, q, -, k, 1, *, +, -, *, 2, n, k, 1, q, -, k, 3, if, ==, k, 2, =, q, 0, q, 1, if, ==, &, n, 0x1, 0, *=, v, x, *=, coeff, f, =, function, n, *, coeff, v, compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compose:double[]+int+double[]+double[]+int#[for, int, i, 0, <, i, compIndirection.length, ++, i, final, int, mappingI, compIndirection, i, double, r, 0, for, int, j, 0, <, j, mappingI.length, ++, j, final, int, mappingIJ, mappingI, j, double, product, *, mappingIJ, 0, f, mappingIJ, 1, for, int, k, 2, <, k, mappingIJ.length, ++, k, *=, product, operand, +, operandOffset, mappingIJ, k, +=, r, product, =, result, +, resultOffset, i, r]
org.apache.commons.math4.analysis.differentiation:DSCompiler:taylor:double[]+int+double...#[double, value, 0, for, int, i, -, getSize, 1, >=, i, 0, --, i, final, int, orders, getPartialDerivativeOrders, i, double, term, ds, +, dsOffset, i, for, int, k, 0, <, k, orders.length, ++, k, if, >, orders, k, 0, try, *=, term, /, FastMath, pow, delta, k, orders, k, CombinatoricsUtils, factorial, orders, k, catch, NotPositiveException, e, throw, new, MathInternalError, e, +=, value, term, return, value]
org.apache.commons.math4.analysis.differentiation:DSCompiler:checkCompatibility:DSCompiler#[if, !=, parameters, compiler.parameters, throw, new, DimensionMismatchException, parameters, compiler.parameters, if, !=, order, compiler.order, throw, new, DimensionMismatchException, order, compiler.order]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:getNbPoints:null#[return, nbPoints]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:getStepSize:null#[return, stepSize]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:evaluate:DerivativeStructure+double+double[]#[final, double, top, double, nbPoints, final, double, bottom, double, nbPoints, for, int, i, 0, <, i, nbPoints, ++, i, =, bottom, i, y, i, for, int, j, 1, <=, j, i, ++, j, =, bottom, -, i, j, /, -, bottom, +, -, i, j, 1, bottom, -, i, j, *, j, stepSize, =, top, i, bottom, 0, final, int, order, t, getOrder, final, int, parameters, t, getFreeParameters, final, double, derivatives, t, getAllDerivatives, final, double, dt0, -, t, getValue, t0, DerivativeStructure, interpolation, new, DerivativeStructure, parameters, order, 0.0, DerivativeStructure, monomial, null, for, int, i, 0, <, i, nbPoints, ++, i, if, ==, i, 0, =, monomial, new, DerivativeStructure, parameters, order, 1.0, =, derivatives, 0, -, dt0, *, -, i, 1, stepSize, final, DerivativeStructure, deltaX, new, DerivativeStructure, parameters, order, derivatives, =, monomial, monomial, multiply, deltaX, =, interpolation, interpolation, add, monomial, multiply, top, i, return, interpolation]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:differentiate:UnivariateFunction#[return, new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, return, function, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, MathIllegalArgumentException, if, >=, t, getOrder, nbPoints, throw, new, NumberIsTooLargeException, t, getOrder, nbPoints, false, final, double, t0, -, FastMath, max, FastMath, min, t, getValue, tMax, tMin, halfSampleSpan, final, double, y, double, nbPoints, for, int, i, 0, <, i, nbPoints, ++, i, =, y, i, function, value, +, t0, *, i, stepSize, return, evaluate, t, t0, y]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:differentiate:UnivariateVectorFunction#[return, new, UnivariateDifferentiableVectorFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, return, function, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, MathIllegalArgumentException, if, >=, t, getOrder, nbPoints, throw, new, NumberIsTooLargeException, t, getOrder, nbPoints, false, final, double, t0, -, FastMath, max, FastMath, min, t, getValue, tMax, tMin, halfSampleSpan, double, y, null, for, int, i, 0, <, i, nbPoints, ++, i, final, double, v, function, value, +, t0, *, i, stepSize, if, ==, i, 0, =, y, double, v.length, nbPoints, for, int, j, 0, <, j, v.length, ++, j, =, y, j, i, v, j, final, DerivativeStructure, value, DerivativeStructure, y.length, for, int, j, 0, <, j, value.length, ++, j, =, value, j, evaluate, t, t0, y, j, return, value]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:differentiate:UnivariateMatrixFunction#[return, new, UnivariateDifferentiableMatrixFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, return, function, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, MathIllegalArgumentException, if, >=, t, getOrder, nbPoints, throw, new, NumberIsTooLargeException, t, getOrder, nbPoints, false, final, double, t0, -, FastMath, max, FastMath, min, t, getValue, tMax, tMin, halfSampleSpan, double, y, null, for, int, i, 0, <, i, nbPoints, ++, i, final, double, v, function, value, +, t0, *, i, stepSize, if, ==, i, 0, =, y, double, v.length, v, 0, length, nbPoints, for, int, j, 0, <, j, v.length, ++, j, for, int, k, 0, <, k, v, j, length, ++, k, =, y, j, k, i, v, j, k, final, DerivativeStructure, value, DerivativeStructure, y.length, y, 0, length, for, int, j, 0, <, j, value.length, ++, j, for, int, k, 0, <, k, y, j, length, ++, k, =, value, j, k, evaluate, t, t0, y, j, k, return, value]
org.apache.commons.math4.analysis.differentiation:GradientFunction:value:double[]#[final, DerivativeStructure, dsX, DerivativeStructure, point.length, for, int, i, 0, <, i, point.length, ++, i, =, dsX, i, new, DerivativeStructure, point.length, 1, i, point, i, final, DerivativeStructure, dsY, f, value, dsX, final, double, y, double, point.length, final, int, orders, int, point.length, for, int, i, 0, <, i, point.length, ++, i, =, orders, i, 1, =, y, i, dsY, getPartialDerivative, orders, =, orders, i, 0, return, y]
org.apache.commons.math4.analysis.differentiation:JacobianFunction:value:double[]#[final, DerivativeStructure, dsX, DerivativeStructure, point.length, for, int, i, 0, <, i, point.length, ++, i, =, dsX, i, new, DerivativeStructure, point.length, 1, i, point, i, final, DerivativeStructure, dsY, f, value, dsX, final, double, y, double, dsY.length, point.length, final, int, orders, int, point.length, for, int, i, 0, <, i, dsY.length, ++, i, for, int, j, 0, <, j, point.length, ++, j, =, orders, j, 1, =, y, i, j, dsY, i, getPartialDerivative, orders, =, orders, j, 0, return, y]
org.apache.commons.math4.analysis.differentiation:SparseGradient:createConstant:double#[return, new, SparseGradient, value, Collections, Integer, Double, emptyMap]
org.apache.commons.math4.analysis.differentiation:SparseGradient:createVariable:int+double#[return, new, SparseGradient, value, Collections, singletonMap, idx, 1.0]
org.apache.commons.math4.analysis.differentiation:SparseGradient:numVars:null#[return, derivatives, size]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getDerivative:int#[final, Double, out, derivatives, get, index, return, ==, out, null, 0.0, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getValue:null#[return, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getReal:null#[return, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:add:SparseGradient#[final, SparseGradient, out, new, SparseGradient, +, value, a.value, derivatives, for, Map.Entry, Integer, Double, entry, a.derivatives, entrySet, final, int, id, entry, getKey, final, Double, old, out.derivatives, get, id, if, ==, old, null, out.derivatives, put, id, entry, getValue, out.derivatives, put, id, +, old, entry, getValue, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:addInPlace:SparseGradient#[+=, value, a.value, for, final, Map.Entry, Integer, Double, entry, a.derivatives, entrySet, final, int, id, entry, getKey, final, Double, old, derivatives, get, id, if, ==, old, null, derivatives, put, id, entry, getValue, derivatives, put, id, +, old, entry, getValue]
org.apache.commons.math4.analysis.differentiation:SparseGradient:add:double#[final, SparseGradient, out, new, SparseGradient, +, value, c, derivatives, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:subtract:SparseGradient#[final, SparseGradient, out, new, SparseGradient, -, value, a.value, derivatives, for, Map.Entry, Integer, Double, entry, a.derivatives, entrySet, final, int, id, entry, getKey, final, Double, old, out.derivatives, get, id, if, ==, old, null, out.derivatives, put, id, -, entry, getValue, out.derivatives, put, id, -, old, entry, getValue, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:subtract:double#[return, new, SparseGradient, -, value, c, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiply:SparseGradient#[final, SparseGradient, out, new, SparseGradient, *, value, a.value, Collections, Integer, Double, emptyMap, for, Map.Entry, Integer, Double, entry, derivatives, entrySet, out.derivatives, put, entry, getKey, *, a.value, entry, getValue, for, Map.Entry, Integer, Double, entry, a.derivatives, entrySet, final, int, id, entry, getKey, final, Double, old, out.derivatives, get, id, if, ==, old, null, out.derivatives, put, id, *, value, entry, getValue, out.derivatives, put, id, +, old, *, value, entry, getValue, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiplyInPlace:SparseGradient#[for, Map.Entry, Integer, Double, entry, derivatives, entrySet, derivatives, put, entry, getKey, *, a.value, entry, getValue, for, Map.Entry, Integer, Double, entry, a.derivatives, entrySet, final, int, id, entry, getKey, final, Double, old, derivatives, get, id, if, ==, old, null, derivatives, put, id, *, value, entry, getValue, derivatives, put, id, +, old, *, value, entry, getValue, *=, value, a.value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiply:double#[return, new, SparseGradient, *, value, c, c, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiply:int#[return, new, SparseGradient, *, value, n, n, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:divide:SparseGradient#[final, SparseGradient, out, new, SparseGradient, /, value, a.value, Collections, Integer, Double, emptyMap, for, Map.Entry, Integer, Double, entry, derivatives, entrySet, out.derivatives, put, entry, getKey, /, entry, getValue, a.value, for, Map.Entry, Integer, Double, entry, a.derivatives, entrySet, final, int, id, entry, getKey, final, Double, old, out.derivatives, get, id, if, ==, old, null, out.derivatives, put, id, *, /, -, out.value, a.value, entry, getValue, out.derivatives, put, id, -, old, *, /, out.value, a.value, entry, getValue, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:divide:double#[return, new, SparseGradient, /, value, c, /, 1.0, c, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:negate:null#[return, new, SparseGradient, -, value, -, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getField:null#[return, new, Field, SparseGradient, Override, public, SparseGradient, getZero, return, createConstant, 0, Override, public, SparseGradient, getOne, return, createConstant, 1, Override, public, Class, FieldElement, SparseGradient, getRuntimeClass, return, SparseGradient]
org.apache.commons.math4.analysis.differentiation:SparseGradient:remainder:double#[return, new, SparseGradient, FastMath, IEEEremainder, value, a, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:remainder:SparseGradient#[final, double, rem, FastMath, IEEEremainder, value, a.value, final, double, k, FastMath, rint, /, -, value, rem, a.value, return, subtract, a, multiply, k]
org.apache.commons.math4.analysis.differentiation:SparseGradient:abs:null#[if, <, Double, doubleToLongBits, value, 0, return, negate, return, this]
org.apache.commons.math4.analysis.differentiation:SparseGradient:ceil:null#[return, createConstant, FastMath, ceil, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:floor:null#[return, createConstant, FastMath, floor, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:rint:null#[return, createConstant, FastMath, rint, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:round:null#[return, FastMath, round, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:signum:null#[return, createConstant, FastMath, signum, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:copySign:SparseGradient#[final, long, m, Double, doubleToLongBits, value, final, long, s, Double, doubleToLongBits, sign.value, if, ||, &&, >=, m, 0, >=, s, 0, &&, <, m, 0, <, s, 0, return, this, return, negate]
org.apache.commons.math4.analysis.differentiation:SparseGradient:copySign:double#[final, long, m, Double, doubleToLongBits, value, final, long, s, Double, doubleToLongBits, sign, if, ||, &&, >=, m, 0, >=, s, 0, &&, <, m, 0, <, s, 0, return, this, return, negate]
org.apache.commons.math4.analysis.differentiation:SparseGradient:scalb:int#[final, SparseGradient, out, new, SparseGradient, FastMath, scalb, value, n, Collections, Integer, Double, emptyMap, for, Map.Entry, Integer, Double, entry, derivatives, entrySet, out.derivatives, put, entry, getKey, FastMath, scalb, entry, getValue, n, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:hypot:SparseGradient#[if, ||, Double, isInfinite, value, Double, isInfinite, y.value, return, createConstant, Double.POSITIVE_INFINITY, if, ||, Double, isNaN, value, Double, isNaN, y.value, return, createConstant, Double.NaN, final, int, expX, FastMath, getExponent, value, final, int, expY, FastMath, getExponent, y.value, if, >, expX, +, expY, 27, return, abs, if, >, expY, +, expX, 27, return, y, abs, final, int, middleExp, /, +, expX, expY, 2, final, SparseGradient, scaledX, scalb, -, middleExp, final, SparseGradient, scaledY, y, scalb, -, middleExp, final, SparseGradient, scaledH, scaledX, multiply, scaledX, add, scaledY, multiply, scaledY, sqrt, return, scaledH, scalb, middleExp]
org.apache.commons.math4.analysis.differentiation:SparseGradient:hypot:SparseGradient+SparseGradient#[return, x, hypot, y]
org.apache.commons.math4.analysis.differentiation:SparseGradient:reciprocal:null#[return, new, SparseGradient, /, 1.0, value, /, -, 1.0, *, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:sqrt:null#[final, double, sqrt, FastMath, sqrt, value, return, new, SparseGradient, sqrt, /, 0.5, sqrt, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:cbrt:null#[final, double, cbrt, FastMath, cbrt, value, return, new, SparseGradient, cbrt, /, 1.0, *, 3, cbrt, cbrt, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:rootN:int#[if, ==, n, 2, return, sqrt, if, ==, n, 3, return, cbrt, final, double, root, FastMath, pow, value, /, 1.0, n, return, new, SparseGradient, root, /, 1.0, *, n, FastMath, pow, root, -, n, 1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:double#[return, new, SparseGradient, FastMath, pow, value, p, *, p, FastMath, pow, value, -, p, 1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:int#[if, ==, n, 0, return, getField, getOne, final, double, valueNm1, FastMath, pow, value, -, n, 1, return, new, SparseGradient, *, value, valueNm1, *, n, valueNm1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:SparseGradient#[return, log, multiply, e, exp]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:double+SparseGradient#[if, ==, a, 0, if, ==, x.value, 0, return, x, compose, 1.0, Double.NEGATIVE_INFINITY, if, <, x.value, 0, return, x, compose, Double.NaN, Double.NaN, return, x, getField, getZero, final, double, ax, FastMath, pow, a, x.value, return, new, SparseGradient, ax, *, ax, FastMath, log, a, x.derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:exp:null#[final, double, e, FastMath, exp, value, return, new, SparseGradient, e, e, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:expm1:null#[return, new, SparseGradient, FastMath, expm1, value, FastMath, exp, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:log:null#[return, new, SparseGradient, FastMath, log, value, /, 1.0, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:log10:null#[return, new, SparseGradient, FastMath, log10, value, /, 1.0, *, FastMath, log, 10.0, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:log1p:null#[return, new, SparseGradient, FastMath, log1p, value, /, 1.0, +, 1.0, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:cos:null#[return, new, SparseGradient, FastMath, cos, value, -, FastMath, sin, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:sin:null#[return, new, SparseGradient, FastMath, sin, value, FastMath, cos, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:tan:null#[final, double, t, FastMath, tan, value, return, new, SparseGradient, t, +, 1, *, t, t, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:acos:null#[return, new, SparseGradient, FastMath, acos, value, /, -, 1.0, FastMath, sqrt, -, 1, *, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:asin:null#[return, new, SparseGradient, FastMath, asin, value, /, 1.0, FastMath, sqrt, -, 1, *, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atan:null#[return, new, SparseGradient, FastMath, atan, value, /, 1.0, +, 1, *, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atan2:SparseGradient#[final, SparseGradient, r, multiply, this, add, x, multiply, x, sqrt, final, SparseGradient, a, if, >=, x.value, 0, =, a, divide, r, add, x, atan, multiply, 2, final, SparseGradient, tmp, divide, r, subtract, x, atan, multiply, -, 2, =, a, tmp, add, <=, tmp.value, 0, -, FastMath.PI, FastMath.PI, =, a.value, FastMath, atan2, value, x.value, return, a]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atan2:SparseGradient+SparseGradient#[return, y, atan2, x]
org.apache.commons.math4.analysis.differentiation:SparseGradient:cosh:null#[return, new, SparseGradient, FastMath, cosh, value, FastMath, sinh, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:sinh:null#[return, new, SparseGradient, FastMath, sinh, value, FastMath, cosh, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:tanh:null#[final, double, t, FastMath, tanh, value, return, new, SparseGradient, t, -, 1, *, t, t, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:acosh:null#[return, new, SparseGradient, FastMath, acosh, value, /, 1.0, FastMath, sqrt, -, *, value, value, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:asinh:null#[return, new, SparseGradient, FastMath, asinh, value, /, 1.0, FastMath, sqrt, +, *, value, value, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atanh:null#[return, new, SparseGradient, FastMath, atanh, value, /, 1.0, -, 1.0, *, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:toDegrees:null#[return, new, SparseGradient, FastMath, toDegrees, value, FastMath, toDegrees, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:toRadians:null#[return, new, SparseGradient, FastMath, toRadians, value, FastMath, toRadians, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:taylor:double...#[double, y, value, for, int, i, 0, <, i, delta.length, ++, i, +=, y, *, delta, i, getDerivative, i, return, y]
org.apache.commons.math4.analysis.differentiation:SparseGradient:compose:double+double#[return, new, SparseGradient, f0, f1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient[]+SparseGradient[]#[SparseGradient, out, a, 0, getField, getZero, for, int, i, 0, <, i, a.length, ++, i, =, out, out, add, a, i, multiply, b, i, final, double, aDouble, double, a.length, for, int, i, 0, <, i, a.length, ++, i, =, aDouble, i, a, i, getValue, final, double, bDouble, double, b.length, for, int, i, 0, <, i, b.length, ++, i, =, bDouble, i, b, i, getValue, =, out.value, MathArrays, linearCombination, aDouble, bDouble, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double[]+SparseGradient[]#[SparseGradient, out, b, 0, getField, getZero, for, int, i, 0, <, i, a.length, ++, i, =, out, out, add, b, i, multiply, a, i, final, double, bDouble, double, b.length, for, int, i, 0, <, i, b.length, ++, i, =, bDouble, i, b, i, getValue, =, out.value, MathArrays, linearCombination, a, bDouble, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient+SparseGradient+SparseGradient+SparseGradient#[SparseGradient, out, a1, multiply, b1, add, a2, multiply, b2, =, out.value, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double+SparseGradient+double+SparseGradient#[SparseGradient, out, b1, multiply, a1, add, b2, multiply, a2, =, out.value, MathArrays, linearCombination, a1, b1.value, a2, b2.value, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient#[SparseGradient, out, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, =, out.value, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double+SparseGradient+double+SparseGradient+double+SparseGradient#[SparseGradient, out, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, =, out.value, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient#[SparseGradient, out, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, add, a4, multiply, b4, =, out.value, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value, a4.value, b4.value, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double+SparseGradient+double+SparseGradient+double+SparseGradient+double+SparseGradient#[SparseGradient, out, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, add, b4, multiply, a4, =, out.value, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value, a4, b4.value, return, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, SparseGradient, final, SparseGradient, rhs, SparseGradient, other, if, !, Precision, equals, value, rhs.value, 1, return, false, if, !=, derivatives, size, rhs.derivatives, size, return, false, for, final, Map.Entry, Integer, Double, entry, derivatives, entrySet, if, !, rhs.derivatives, containsKey, entry, getKey, return, false, if, !, Precision, equals, entry, getValue, rhs.derivatives, get, entry, getKey, 1, return, false, return, true, return, false]
org.apache.commons.math4.analysis.differentiation:SparseGradient:hashCode:null#[return, +, +, 743, *, 809, MathUtils, hash, value, *, 167, derivatives, hashCode]
org.apache.commons.math4.analysis.function:Abs:value:double#[return, FastMath, abs, x]
org.apache.commons.math4.analysis.function:Acos:value:double#[return, FastMath, acos, x]
org.apache.commons.math4.analysis.function:Acos:value:DerivativeStructure#[return, t, acos]
org.apache.commons.math4.analysis.function:Acosh:value:double#[return, FastMath, acosh, x]
org.apache.commons.math4.analysis.function:Acosh:value:DerivativeStructure#[return, t, acosh]
org.apache.commons.math4.analysis.function:Add:value:double+double#[return, +, x, y]
org.apache.commons.math4.analysis.function:Asin:value:double#[return, FastMath, asin, x]
org.apache.commons.math4.analysis.function:Asin:value:DerivativeStructure#[return, t, asin]
org.apache.commons.math4.analysis.function:Asinh:value:double#[return, FastMath, asinh, x]
org.apache.commons.math4.analysis.function:Asinh:value:DerivativeStructure#[return, t, asinh]
org.apache.commons.math4.analysis.function:Atan:value:double#[return, FastMath, atan, x]
org.apache.commons.math4.analysis.function:Atan:value:DerivativeStructure#[return, t, atan]
org.apache.commons.math4.analysis.function:Atan2:value:double+double#[return, FastMath, atan2, x, y]
org.apache.commons.math4.analysis.function:Atanh:value:double#[return, FastMath, atanh, x]
org.apache.commons.math4.analysis.function:Atanh:value:DerivativeStructure#[return, t, atanh]
org.apache.commons.math4.analysis.function:Cbrt:value:double#[return, FastMath, cbrt, x]
org.apache.commons.math4.analysis.function:Cbrt:value:DerivativeStructure#[return, t, cbrt]
org.apache.commons.math4.analysis.function:Ceil:value:double#[return, FastMath, ceil, x]
org.apache.commons.math4.analysis.function:Constant:value:double#[return, c]
org.apache.commons.math4.analysis.function:Constant:value:DerivativeStructure#[return, new, DerivativeStructure, t, getFreeParameters, t, getOrder, c]
org.apache.commons.math4.analysis.function:Cos:value:double#[return, FastMath, cos, x]
org.apache.commons.math4.analysis.function:Cos:value:DerivativeStructure#[return, t, cos]
org.apache.commons.math4.analysis.function:Cosh:value:double#[return, FastMath, cosh, x]
org.apache.commons.math4.analysis.function:Cosh:value:DerivativeStructure#[return, t, cosh]
org.apache.commons.math4.analysis.function:Divide:value:double+double#[return, /, x, y]
org.apache.commons.math4.analysis.function:Exp:value:double#[return, FastMath, exp, x]
org.apache.commons.math4.analysis.function:Exp:value:DerivativeStructure#[return, t, exp]
org.apache.commons.math4.analysis.function:Expm1:value:double#[return, FastMath, expm1, x]
org.apache.commons.math4.analysis.function:Expm1:value:DerivativeStructure#[return, t, expm1]
org.apache.commons.math4.analysis.function:Floor:value:double#[return, FastMath, floor, x]
org.apache.commons.math4.analysis.function:Gaussian:value:double#[return, value, -, x, mean, norm, i2s2]
org.apache.commons.math4.analysis.function:Gaussian:value:double+double+double#[return, *, norm, FastMath, exp, *, -, xMinusMean, xMinusMean, i2s2]
org.apache.commons.math4.analysis.function:Gaussian:value:DerivativeStructure#[final, double, u, *, is, -, t, getValue, mean, double, f, double, +, t, getOrder, 1, final, double, p, double, f.length, =, p, 0, 1, final, double, u2, *, u, u, double, coeff, *, norm, FastMath, exp, *, -, 0.5, u2, if, <=, coeff, Precision.SAFE_MIN, Arrays, fill, f, 0.0, =, f, 0, coeff, for, int, n, 1, <, n, f.length, ++, n, double, v, 0, =, p, n, -, p, -, n, 1, for, int, k, n, >=, k, 0, -=, k, 2, =, v, +, *, v, u2, p, k, if, >, k, 2, =, p, -, k, 2, -, *, -, k, 1, p, -, k, 1, p, -, k, 3, if, ==, k, 2, =, p, 0, p, 1, if, ==, &, n, 0x1, 1, *=, v, u, *=, coeff, is, =, f, n, *, coeff, v, return, t, compose, f]
org.apache.commons.math4.analysis.function:HarmonicOscillator:value:double#[return, value, +, *, omega, x, phase, amplitude]
org.apache.commons.math4.analysis.function:HarmonicOscillator:value:double+double#[return, *, amplitude, FastMath, cos, xTimesOmegaPlusPhase]
org.apache.commons.math4.analysis.function:HarmonicOscillator:value:DerivativeStructure#[final, double, x, t, getValue, double, f, double, +, t, getOrder, 1, final, double, alpha, +, *, omega, x, phase, =, f, 0, *, amplitude, FastMath, cos, alpha, if, >, f.length, 1, =, f, 1, *, -, amplitude, omega, FastMath, sin, alpha, final, double, mo2, *, -, omega, omega, for, int, i, 2, <, i, f.length, ++, i, =, f, i, *, mo2, f, -, i, 2, return, t, compose, f]
org.apache.commons.math4.analysis.function:Identity:value:double#[return, x]
org.apache.commons.math4.analysis.function:Identity:value:DerivativeStructure#[return, t]
org.apache.commons.math4.analysis.function:Inverse:value:double#[return, /, 1, x]
org.apache.commons.math4.analysis.function:Inverse:value:DerivativeStructure#[return, t, reciprocal]
org.apache.commons.math4.analysis.function:Log:value:double#[return, FastMath, log, x]
org.apache.commons.math4.analysis.function:Log:value:DerivativeStructure#[return, t, log]
org.apache.commons.math4.analysis.function:Log10:value:double#[return, FastMath, log10, x]
org.apache.commons.math4.analysis.function:Log10:value:DerivativeStructure#[return, t, log10]
org.apache.commons.math4.analysis.function:Log1p:value:double#[return, FastMath, log1p, x]
org.apache.commons.math4.analysis.function:Log1p:value:DerivativeStructure#[return, t, log1p]
org.apache.commons.math4.analysis.function:Logistic:value:double#[return, value, -, m, x, k, b, q, a, oneOverN]
org.apache.commons.math4.analysis.function:Logistic:value:double+double+double+double+double+double#[return, +, a, /, -, k, a, FastMath, pow, +, 1, *, q, FastMath, exp, *, b, mMinusX, oneOverN]
org.apache.commons.math4.analysis.function:Logistic:value:DerivativeStructure#[return, t, negate, add, m, multiply, b, exp, multiply, q, add, 1, pow, oneOverN, reciprocal, multiply, -, k, a, add, a]
org.apache.commons.math4.analysis.function:Logit:value:double#[return, value, x, lo, hi]
org.apache.commons.math4.analysis.function:Logit:value:double+double+double#[if, ||, <, x, lo, >, x, hi, throw, new, OutOfRangeException, x, lo, hi, return, FastMath, log, /, -, x, lo, -, hi, x]
org.apache.commons.math4.analysis.function:Logit:value:DerivativeStructure#[final, double, x, t, getValue, if, ||, <, x, lo, >, x, hi, throw, new, OutOfRangeException, x, lo, hi, double, f, double, +, t, getOrder, 1, =, f, 0, FastMath, log, /, -, x, lo, -, hi, x, if, Double, isInfinite, f, 0, if, >, f.length, 1, =, f, 1, Double.POSITIVE_INFINITY, for, int, i, 2, <, i, f.length, ++, i, =, f, i, f, -, i, 2, final, double, invL, /, 1.0, -, x, lo, double, xL, invL, final, double, invH, /, 1.0, -, hi, x, double, xH, invH, for, int, i, 1, <, i, f.length, ++, i, =, f, i, +, xL, xH, *=, xL, *, -, i, invL, *=, xH, *, i, invH, return, t, compose, f]
org.apache.commons.math4.analysis.function:Max:value:double+double#[return, FastMath, max, x, y]
org.apache.commons.math4.analysis.function:Min:value:double+double#[return, FastMath, min, x, y]
org.apache.commons.math4.analysis.function:Minus:value:double#[return, -, x]
org.apache.commons.math4.analysis.function:Minus:value:DerivativeStructure#[return, t, negate]
org.apache.commons.math4.analysis.function:Multiply:value:double+double#[return, *, x, y]
org.apache.commons.math4.analysis.function:Pow:value:double+double#[return, FastMath, pow, x, y]
org.apache.commons.math4.analysis.function:Power:value:double#[return, FastMath, pow, x, p]
org.apache.commons.math4.analysis.function:Power:value:DerivativeStructure#[return, t, pow, p]
org.apache.commons.math4.analysis.function:Rint:value:double#[return, FastMath, rint, x]
org.apache.commons.math4.analysis.function:Sigmoid:value:double#[return, value, x, lo, hi]
org.apache.commons.math4.analysis.function:Sigmoid:value:double+double+double#[return, +, lo, /, -, hi, lo, +, 1, FastMath, exp, -, x]
org.apache.commons.math4.analysis.function:Sigmoid:value:DerivativeStructure#[double, f, double, +, t, getOrder, 1, final, double, exp, FastMath, exp, -, t, getValue, if, Double, isInfinite, exp, =, f, 0, lo, Arrays, fill, f, 1, f.length, 0.0, final, double, p, double, f.length, final, double, inv, /, 1, +, 1, exp, double, coeff, -, hi, lo, for, int, n, 0, <, n, f.length, ++, n, double, v, 0, =, p, n, 1, for, int, k, n, >=, k, 0, --, k, =, v, +, *, v, exp, p, k, if, >, k, 1, =, p, -, k, 1, -, *, +, -, n, k, 2, p, -, k, 2, *, -, k, 1, p, -, k, 1, =, p, 0, 0, *=, coeff, inv, =, f, n, *, coeff, v, +=, f, 0, lo, return, t, compose, f]
org.apache.commons.math4.analysis.function:Signum:value:double#[return, FastMath, signum, x]
org.apache.commons.math4.analysis.function:Sin:value:double#[return, FastMath, sin, x]
org.apache.commons.math4.analysis.function:Sin:value:DerivativeStructure#[return, t, sin]
org.apache.commons.math4.analysis.function:Sinc:value:double#[final, double, scaledX, normalized, *, FastMath.PI, x, x, if, <=, FastMath, abs, scaledX, SHORTCUT, final, double, scaledX2, *, scaledX, scaledX, return, /, +, *, -, scaledX2, 20, scaledX2, 120, 120, return, /, FastMath, sin, scaledX, scaledX]
org.apache.commons.math4.analysis.function:Sinc:value:DerivativeStructure#[final, double, scaledX, *, normalized, FastMath.PI, 1, t, getValue, final, double, scaledX2, *, scaledX, scaledX, double, f, double, +, t, getOrder, 1, if, <=, FastMath, abs, scaledX, SHORTCUT, for, int, i, 0, <, i, f.length, ++, i, final, int, k, /, i, 2, if, ==, &, i, 0x1, 0, =, f, i, *, ==, &, k, 0x1, 0, 1, -, 1, -, /, 1.0, +, i, 1, *, scaledX2, -, /, 1.0, +, *, 2, i, 6, /, scaledX2, +, *, 24, i, 120, =, f, i, *, ==, &, k, 0x1, 0, -, scaledX, scaledX, -, /, 1.0, +, i, 2, *, scaledX2, -, /, 1.0, +, *, 6, i, 24, /, scaledX2, +, *, 120, i, 720, final, double, inv, /, 1, scaledX, final, double, cos, FastMath, cos, scaledX, final, double, sin, FastMath, sin, scaledX, =, f, 0, *, inv, sin, final, double, sc, double, f.length, =, sc, 0, 1, double, coeff, inv, for, int, n, 1, <, n, f.length, ++, n, double, s, 0, double, c, 0, final, int, kStart, if, ==, &, n, 0x1, 0, =, sc, n, 0, =, kStart, n, =, sc, n, sc, -, n, 1, =, c, sc, n, =, kStart, -, n, 1, for, int, k, kStart, >, k, 1, -=, k, 2, =, sc, k, -, *, -, k, n, sc, k, sc, -, k, 1, =, s, +, *, s, scaledX2, sc, k, =, sc, -, k, 1, +, *, -, k, 1, n, sc, -, k, 1, sc, -, k, 2, =, c, +, *, c, scaledX2, sc, -, k, 1, *=, sc, 0, -, n, =, s, +, *, s, scaledX2, sc, 0, *=, coeff, inv, =, f, n, *, coeff, +, *, s, sin, *, c, scaledX, cos, if, normalized, double, scale, FastMath.PI, for, int, i, 1, <, i, f.length, ++, i, *=, f, i, scale, *=, scale, FastMath.PI, return, t, compose, f]
org.apache.commons.math4.analysis.function:Sinh:value:double#[return, FastMath, sinh, x]
org.apache.commons.math4.analysis.function:Sinh:value:DerivativeStructure#[return, t, sinh]
org.apache.commons.math4.analysis.function:Sqrt:value:double#[return, FastMath, sqrt, x]
org.apache.commons.math4.analysis.function:Sqrt:value:DerivativeStructure#[return, t, sqrt]
org.apache.commons.math4.analysis.function:StepFunction:value:double#[int, index, Arrays, binarySearch, abscissa, x, double, fx, 0, if, <, index, -, 1, =, fx, ordinate, -, -, index, 2, if, >=, index, 0, =, fx, ordinate, index, =, fx, ordinate, 0, return, fx]
org.apache.commons.math4.analysis.function:Subtract:value:double+double#[return, -, x, y]
org.apache.commons.math4.analysis.function:Tan:value:double#[return, FastMath, tan, x]
org.apache.commons.math4.analysis.function:Tan:value:DerivativeStructure#[return, t, tan]
org.apache.commons.math4.analysis.function:Tanh:value:double#[return, FastMath, tanh, x]
org.apache.commons.math4.analysis.function:Tanh:value:DerivativeStructure#[return, t, tanh]
org.apache.commons.math4.analysis.function:Ulp:value:double#[return, FastMath, ulp, x]
org.apache.commons.math4.analysis:FunctionUtils:compose:UnivariateFunction...#[return, new, UnivariateFunction, Override, public, double, value, double, x, double, r, x, for, int, i, -, f.length, 1, >=, i, 0, --, i, =, r, f, i, value, r, return, r]
org.apache.commons.math4.analysis:FunctionUtils:compose:UnivariateDifferentiableFunction...#[return, new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, t, double, r, t, for, int, i, -, f.length, 1, >=, i, 0, --, i, =, r, f, i, value, r, return, r, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, DerivativeStructure, r, t, for, int, i, -, f.length, 1, >=, i, 0, --, i, =, r, f, i, value, r, return, r]
org.apache.commons.math4.analysis:FunctionUtils:add:UnivariateFunction...#[return, new, UnivariateFunction, Override, public, double, value, double, x, double, r, f, 0, value, x, for, int, i, 1, <, i, f.length, ++, i, +=, r, f, i, value, x, return, r]
org.apache.commons.math4.analysis:FunctionUtils:add:UnivariateDifferentiableFunction...#[return, new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, t, double, r, f, 0, value, t, for, int, i, 1, <, i, f.length, ++, i, +=, r, f, i, value, t, return, r, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, DimensionMismatchException, DerivativeStructure, r, f, 0, value, t, for, int, i, 1, <, i, f.length, ++, i, =, r, r, add, f, i, value, t, return, r]
org.apache.commons.math4.analysis:FunctionUtils:multiply:UnivariateFunction...#[return, new, UnivariateFunction, Override, public, double, value, double, x, double, r, f, 0, value, x, for, int, i, 1, <, i, f.length, ++, i, *=, r, f, i, value, x, return, r]
org.apache.commons.math4.analysis:FunctionUtils:multiply:UnivariateDifferentiableFunction...#[return, new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, t, double, r, f, 0, value, t, for, int, i, 1, <, i, f.length, ++, i, *=, r, f, i, value, t, return, r, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, DerivativeStructure, r, f, 0, value, t, for, int, i, 1, <, i, f.length, ++, i, =, r, r, multiply, f, i, value, t, return, r]
org.apache.commons.math4.analysis:FunctionUtils:combine:BivariateFunction+UnivariateFunction+UnivariateFunction#[return, new, UnivariateFunction, Override, public, double, value, double, x, return, combiner, value, f, value, x, g, value, x]
org.apache.commons.math4.analysis:FunctionUtils:collector:BivariateFunction+UnivariateFunction+double#[return, new, MultivariateFunction, Override, public, double, value, double, point, double, result, combiner, value, initialValue, f, value, point, 0, for, int, i, 1, <, i, point.length, ++, i, =, result, combiner, value, result, f, value, point, i, return, result]
org.apache.commons.math4.analysis:FunctionUtils:collector:BivariateFunction+double#[return, collector, combiner, new, Identity, initialValue]
org.apache.commons.math4.analysis:FunctionUtils:fix1stArgument:BivariateFunction+double#[return, new, UnivariateFunction, Override, public, double, value, double, x, return, f, value, fixed, x]
org.apache.commons.math4.analysis:FunctionUtils:fix2ndArgument:BivariateFunction+double#[return, new, UnivariateFunction, Override, public, double, value, double, x, return, f, value, x, fixed]
org.apache.commons.math4.analysis:FunctionUtils:sample:UnivariateFunction+double+double+int#[if, <=, n, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, Integer, valueOf, n, if, >=, min, max, throw, new, NumberIsTooLargeException, min, max, false, final, double, s, double, n, final, double, h, /, -, max, min, n, for, int, i, 0, <, i, n, ++, i, =, s, i, f, value, +, min, *, i, h, return, s]
org.apache.commons.math4.analysis:FunctionUtils:toDifferentiable:UnivariateFunction+UnivariateFunction...#[return, new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, x, return, f, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, x, if, >, x, getOrder, derivatives.length, throw, new, NumberIsTooLargeException, x, getOrder, derivatives.length, true, final, double, packed, double, +, x, getOrder, 1, =, packed, 0, f, value, x, getValue, for, int, i, 0, <, i, x, getOrder, ++, i, =, packed, +, i, 1, derivatives, i, value, x, getValue, return, x, compose, packed]
org.apache.commons.math4.analysis:FunctionUtils:toDifferentiable:MultivariateFunction+MultivariateVectorFunction#[return, new, MultivariateDifferentiableFunction, Override, public, double, value, final, double, point, return, f, value, point, Override, public, DerivativeStructure, value, final, DerivativeStructure, point, final, double, dPoint, double, point.length, for, int, i, 0, <, i, point.length, ++, i, =, dPoint, i, point, i, getValue, if, >, point, i, getOrder, 1, throw, new, NumberIsTooLargeException, point, i, getOrder, 1, true, final, double, v, f, value, dPoint, final, double, dv, gradient, value, dPoint, if, !=, dv.length, point.length, throw, new, DimensionMismatchException, dv.length, point.length, final, int, parameters, point, 0, getFreeParameters, final, double, partials, double, point.length, final, double, packed, double, +, parameters, 1, =, packed, 0, v, final, int, orders, int, parameters, for, int, i, 0, <, i, parameters, ++, i, =, orders, i, 1, for, int, j, 0, <, j, point.length, ++, j, =, partials, j, point, j, getPartialDerivative, orders, =, orders, i, 0, =, packed, +, i, 1, MathArrays, linearCombination, dv, partials, return, new, DerivativeStructure, parameters, 1, packed]
org.apache.commons.math4.analysis:FunctionUtils:derivative:UnivariateDifferentiableFunction+int#[return, new, UnivariateFunction, Override, public, double, value, final, double, x, final, DerivativeStructure, dsX, new, DerivativeStructure, 1, order, 0, x, return, f, value, dsX, getPartialDerivative, order]
org.apache.commons.math4.analysis:FunctionUtils:derivative:MultivariateDifferentiableFunction+int[]#[return, new, MultivariateFunction, Override, public, double, value, final, double, point, int, sumOrders, 0, for, final, int, order, orders, +=, sumOrders, order, final, DerivativeStructure, dsPoint, DerivativeStructure, point.length, for, int, i, 0, <, i, point.length, ++, i, =, dsPoint, i, new, DerivativeStructure, point.length, sumOrders, i, point, i, return, f, value, dsPoint, getPartialDerivative, orders]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getRelativeAccuracy:null#[return, relativeAccuracy]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getAbsoluteAccuracy:null#[return, absoluteAccuracy]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMinimalIterationCount:null#[return, minimalIterationCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMaximalIterationCount:null#[return, iterations, getMaximalCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getEvaluations:null#[return, evaluations, getCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getIterations:null#[return, iterations, getCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMin:null#[return, min]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMax:null#[return, max]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:computeObjectiveValue:double#[try, evaluations, incrementCount, catch, MaxCountExceededException, e, throw, new, TooManyEvaluationsException, e, getMax, return, function, value, point]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:setup:int+UnivariateFunction+double+double#[MathUtils, checkNotNull, f, UnivariateSolverUtils, verifyInterval, lower, upper, =, min, lower, =, max, upper, =, function, f, evaluations, setMaximalCount, maxEval, evaluations, resetCount, iterations, resetCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:integrate:int+UnivariateFunction+double+double#[setup, maxEval, f, lower, upper, return, doIntegrate]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:getRule:int#[if, <=, numberOfPoints, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_POINTS, numberOfPoints, Pair, double, double, cached, pointsAndWeightsDouble, get, numberOfPoints, if, ==, cached, null, final, Pair, T, T, rule, getRuleInternal, numberOfPoints, =, cached, convertToDouble, rule, pointsAndWeightsDouble, put, numberOfPoints, cached, return, new, Pair, double, double, cached, getFirst, clone, cached, getSecond, clone]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:getRuleInternal:int#[final, Pair, T, T, rule, pointsAndWeights, get, numberOfPoints, if, ==, rule, null, addRule, computeRule, numberOfPoints, return, getRuleInternal, numberOfPoints, return, rule]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:addRule:Pair<T[],T[]>#[if, !=, rule, getFirst, length, rule, getSecond, length, throw, new, DimensionMismatchException, rule, getFirst, length, rule, getSecond, length, pointsAndWeights, put, rule, getFirst, length, rule]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:convertToDouble:Pair<T[],T[]>#[final, T, pT, rule, getFirst, final, T, wT, rule, getSecond, final, int, len, pT.length, final, double, pD, double, len, final, double, wD, double, len, for, int, i, 0, <, i, len, ++, i, =, pD, i, pT, i, doubleValue, =, wD, i, wT, i, doubleValue, return, new, Pair, double, double, pD, wD]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:integrate:UnivariateFunction#[double, s, 0, double, c, 0, for, int, i, 0, <, i, points.length, ++, i, final, double, x, points, i, final, double, w, weights, i, final, double, y, -, *, w, f, value, x, c, final, double, t, +, s, y, =, c, -, -, t, s, y, =, s, t, return, s]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:getNumberOfPoints:null#[return, points.length]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:getPoint:int#[return, points, index]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:getWeight:int#[return, weights, index]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendre:int#[return, new, GaussIntegrator, getRule, legendre, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendre:int+double+double#[return, new, GaussIntegrator, transform, getRule, legendre, numberOfPoints, lowerBound, upperBound]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendreHighPrecision:int#[return, new, GaussIntegrator, getRule, legendreHighPrecision, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendreHighPrecision:int+double+double#[return, new, GaussIntegrator, transform, getRule, legendreHighPrecision, numberOfPoints, lowerBound, upperBound]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:hermite:int#[return, new, SymmetricGaussIntegrator, getRule, hermite, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:getRule:Number>+int#[return, factory, getRule, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:transform:Pair<double[],double[]>+double+double#[final, double, points, rule, getFirst, final, double, weights, rule, getSecond, final, double, scale, /, -, b, a, 2, final, double, shift, +, a, scale, for, int, i, 0, <, i, points.length, ++, i, =, points, i, +, *, points, i, scale, shift, *=, weights, i, scale, return, new, Pair, double, double, points, weights]
org.apache.commons.math4.analysis.integration.gauss:HermiteRuleFactory:computeRule:int#[if, ==, numberOfPoints, 1, return, new, Pair, Double, Double, Double, 0d, Double, SQRT_PI, final, int, lastNumPoints, -, numberOfPoints, 1, final, Double, previousPoints, getRuleInternal, lastNumPoints, getFirst, final, Double, points, Double, numberOfPoints, final, Double, weights, Double, numberOfPoints, final, double, sqrtTwoTimesLastNumPoints, FastMath, sqrt, *, 2, lastNumPoints, final, double, sqrtTwoTimesNumPoints, FastMath, sqrt, *, 2, numberOfPoints, final, int, iMax, /, numberOfPoints, 2, for, int, i, 0, <, i, iMax, ++, i, double, a, ==, i, 0, -, sqrtTwoTimesLastNumPoints, previousPoints, -, i, 1, doubleValue, double, b, ==, iMax, 1, -, 0.5, previousPoints, i, doubleValue, double, hma, H0, double, ha, *, H1, a, double, hmb, H0, double, hb, *, H1, b, for, int, j, 1, <, j, numberOfPoints, ++, j, final, double, jp1, +, j, 1, final, double, s, FastMath, sqrt, /, 2, jp1, final, double, sm, FastMath, sqrt, /, j, jp1, final, double, hpa, -, *, s, a, ha, *, sm, hma, final, double, hpb, -, *, s, b, hb, *, sm, hmb, =, hma, ha, =, ha, hpa, =, hmb, hb, =, hb, hpb, double, c, *, 0.5, +, a, b, double, hmc, H0, double, hc, *, H1, c, boolean, done, false, while, !, done, =, done, <=, -, b, a, Math, ulp, c, =, hmc, H0, =, hc, *, H1, c, for, int, j, 1, <, j, numberOfPoints, ++, j, final, double, jp1, +, j, 1, final, double, s, FastMath, sqrt, /, 2, jp1, final, double, sm, FastMath, sqrt, /, j, jp1, final, double, hpc, -, *, s, c, hc, *, sm, hmc, =, hmc, hc, =, hc, hpc, if, !, done, if, <, *, ha, hc, 0, =, b, c, =, hmb, hmc, =, hb, hc, =, a, c, =, hma, hmc, =, ha, hc, =, c, *, 0.5, +, a, b, final, double, d, *, sqrtTwoTimesNumPoints, hmc, final, double, w, /, 2, *, d, d, =, points, i, c, =, weights, i, w, final, int, idx, -, lastNumPoints, i, =, points, idx, -, c, =, weights, idx, w, if, !=, %, numberOfPoints, 2, 0, double, hm, H0, for, int, j, 1, <, j, numberOfPoints, +=, j, 2, final, double, jp1, +, j, 1, =, hm, *, -, FastMath, sqrt, /, j, jp1, hm, final, double, d, *, sqrtTwoTimesNumPoints, hm, final, double, w, /, 2, *, d, d, =, points, iMax, 0d, =, weights, iMax, w, return, new, Pair, Double, Double, points, weights]
org.apache.commons.math4.analysis.integration.gauss:LegendreHighPrecisionRuleFactory:computeRule:int#[if, ==, numberOfPoints, 1, return, new, Pair, BigDecimal, BigDecimal, BigDecimal, BigDecimal.ZERO, BigDecimal, two, final, BigDecimal, previousPoints, getRuleInternal, -, numberOfPoints, 1, getFirst, final, BigDecimal, points, BigDecimal, numberOfPoints, final, BigDecimal, weights, BigDecimal, numberOfPoints, final, int, iMax, /, numberOfPoints, 2, for, int, i, 0, <, i, iMax, ++, i, BigDecimal, a, ==, i, 0, minusOne, previousPoints, -, i, 1, BigDecimal, b, ==, iMax, 1, BigDecimal.ONE, previousPoints, i, BigDecimal, pma, BigDecimal.ONE, BigDecimal, pa, a, BigDecimal, pmb, BigDecimal.ONE, BigDecimal, pb, b, for, int, j, 1, <, j, numberOfPoints, ++, j, final, BigDecimal, b_two_j_p_1, new, BigDecimal, +, *, 2, j, 1, mContext, final, BigDecimal, b_j, new, BigDecimal, j, mContext, final, BigDecimal, b_j_p_1, new, BigDecimal, +, j, 1, mContext, BigDecimal, tmp1, a, multiply, b_two_j_p_1, mContext, =, tmp1, pa, multiply, tmp1, mContext, BigDecimal, tmp2, pma, multiply, b_j, mContext, BigDecimal, ppa, tmp1, subtract, tmp2, mContext, =, ppa, ppa, divide, b_j_p_1, mContext, =, tmp1, b, multiply, b_two_j_p_1, mContext, =, tmp1, pb, multiply, tmp1, mContext, =, tmp2, pmb, multiply, b_j, mContext, BigDecimal, ppb, tmp1, subtract, tmp2, mContext, =, ppb, ppb, divide, b_j_p_1, mContext, =, pma, pa, =, pa, ppa, =, pmb, pb, =, pb, ppb, BigDecimal, c, a, add, b, mContext, multiply, oneHalf, mContext, BigDecimal, pmc, BigDecimal.ONE, BigDecimal, pc, c, boolean, done, false, while, !, done, BigDecimal, tmp1, b, subtract, a, mContext, BigDecimal, tmp2, c, ulp, multiply, BigDecimal.TEN, mContext, =, done, <=, tmp1, compareTo, tmp2, 0, =, pmc, BigDecimal.ONE, =, pc, c, for, int, j, 1, <, j, numberOfPoints, ++, j, final, BigDecimal, b_two_j_p_1, new, BigDecimal, +, *, 2, j, 1, mContext, final, BigDecimal, b_j, new, BigDecimal, j, mContext, final, BigDecimal, b_j_p_1, new, BigDecimal, +, j, 1, mContext, =, tmp1, c, multiply, b_two_j_p_1, mContext, =, tmp1, pc, multiply, tmp1, mContext, =, tmp2, pmc, multiply, b_j, mContext, BigDecimal, ppc, tmp1, subtract, tmp2, mContext, =, ppc, ppc, divide, b_j_p_1, mContext, =, pmc, pc, =, pc, ppc, if, !, done, if, <=, *, pa, signum, pc, signum, 0, =, b, c, =, pmb, pmc, =, pb, pc, =, a, c, =, pma, pmc, =, pa, pc, =, c, a, add, b, mContext, multiply, oneHalf, mContext, final, BigDecimal, nP, new, BigDecimal, numberOfPoints, mContext, BigDecimal, tmp1, pmc, subtract, c, multiply, pc, mContext, mContext, =, tmp1, tmp1, multiply, nP, =, tmp1, tmp1, pow, 2, mContext, BigDecimal, tmp2, c, pow, 2, mContext, =, tmp2, BigDecimal.ONE, subtract, tmp2, mContext, =, tmp2, tmp2, multiply, two, mContext, =, tmp2, tmp2, divide, tmp1, mContext, =, points, i, c, =, weights, i, tmp2, final, int, idx, -, numberOfPoints, i, 1, =, points, idx, c, negate, mContext, =, weights, idx, tmp2, if, !=, %, numberOfPoints, 2, 0, BigDecimal, pmc, BigDecimal.ONE, for, int, j, 1, <, j, numberOfPoints, +=, j, 2, final, BigDecimal, b_j, new, BigDecimal, j, mContext, final, BigDecimal, b_j_p_1, new, BigDecimal, +, j, 1, mContext, =, pmc, pmc, multiply, b_j, mContext, =, pmc, pmc, divide, b_j_p_1, mContext, =, pmc, pmc, negate, mContext, final, BigDecimal, nP, new, BigDecimal, numberOfPoints, mContext, BigDecimal, tmp1, pmc, multiply, nP, mContext, =, tmp1, tmp1, pow, 2, mContext, BigDecimal, tmp2, two, divide, tmp1, mContext, =, points, iMax, BigDecimal.ZERO, =, weights, iMax, tmp2, return, new, Pair, BigDecimal, BigDecimal, points, weights]
org.apache.commons.math4.analysis.integration.gauss:LegendreRuleFactory:computeRule:int#[if, ==, numberOfPoints, 1, return, new, Pair, Double, Double, Double, 0d, Double, 2d, final, Double, previousPoints, getRuleInternal, -, numberOfPoints, 1, getFirst, final, Double, points, Double, numberOfPoints, final, Double, weights, Double, numberOfPoints, final, int, iMax, /, numberOfPoints, 2, for, int, i, 0, <, i, iMax, ++, i, double, a, ==, i, 0, -, 1, previousPoints, -, i, 1, doubleValue, double, b, ==, iMax, 1, 1, previousPoints, i, doubleValue, double, pma, 1, double, pa, a, double, pmb, 1, double, pb, b, for, int, j, 1, <, j, numberOfPoints, ++, j, final, int, two_j_p_1, +, *, 2, j, 1, final, int, j_p_1, +, j, 1, final, double, ppa, /, -, *, two_j_p_1, a, pa, *, j, pma, j_p_1, final, double, ppb, /, -, *, two_j_p_1, b, pb, *, j, pmb, j_p_1, =, pma, pa, =, pa, ppa, =, pmb, pb, =, pb, ppb, double, c, *, 0.5, +, a, b, double, pmc, 1, double, pc, c, boolean, done, false, while, !, done, =, done, <=, -, b, a, Math, ulp, c, =, pmc, 1, =, pc, c, for, int, j, 1, <, j, numberOfPoints, ++, j, final, double, ppc, /, -, *, +, *, 2, j, 1, c, pc, *, j, pmc, +, j, 1, =, pmc, pc, =, pc, ppc, if, !, done, if, <=, *, pa, pc, 0, =, b, c, =, pmb, pmc, =, pb, pc, =, a, c, =, pma, pmc, =, pa, pc, =, c, *, 0.5, +, a, b, final, double, d, *, numberOfPoints, -, pmc, *, c, pc, final, double, w, /, *, 2, -, 1, *, c, c, *, d, d, =, points, i, c, =, weights, i, w, final, int, idx, -, numberOfPoints, i, 1, =, points, idx, -, c, =, weights, idx, w, if, !=, %, numberOfPoints, 2, 0, double, pmc, 1, for, int, j, 1, <, j, numberOfPoints, +=, j, 2, =, pmc, /, *, -, j, pmc, +, j, 1, final, double, d, *, numberOfPoints, pmc, final, double, w, /, 2, *, d, d, =, points, iMax, 0d, =, weights, iMax, w, return, new, Pair, Double, Double, points, weights]
org.apache.commons.math4.analysis.integration.gauss:SymmetricGaussIntegrator:integrate:UnivariateFunction#[final, int, ruleLength, getNumberOfPoints, if, ==, ruleLength, 1, return, *, getWeight, 0, f, value, 0d, final, int, iMax, /, ruleLength, 2, double, s, 0, double, c, 0, for, int, i, 0, <, i, iMax, ++, i, final, double, p, getPoint, i, final, double, w, getWeight, i, final, double, f1, f, value, p, final, double, f2, f, value, -, p, final, double, y, -, *, w, +, f1, f2, c, final, double, t, +, s, y, =, c, -, -, t, s, y, =, s, t, if, !=, %, ruleLength, 2, 0, final, double, w, getWeight, iMax, final, double, y, -, *, w, f, value, 0d, c, final, double, t, +, s, y, =, s, t, return, s]
org.apache.commons.math4.analysis.integration:IterativeLegendreGaussIntegrator:doIntegrate:null#[double, oldt, stage, 1, int, n, 2, while, true, final, double, t, stage, n, final, double, delta, FastMath, abs, -, t, oldt, final, double, limit, FastMath, max, getAbsoluteAccuracy, *, getRelativeAccuracy, +, FastMath, abs, oldt, FastMath, abs, t, 0.5, if, &&, >=, +, iterations, getCount, 1, getMinimalIterationCount, <=, delta, limit, return, t, final, double, ratio, FastMath, min, 4, FastMath, pow, /, delta, limit, /, 0.5, numberOfPoints, =, n, FastMath, max, int, *, ratio, n, +, n, 1, =, oldt, t, iterations, incrementCount]
org.apache.commons.math4.analysis.integration:IterativeLegendreGaussIntegrator:stage:int#[final, UnivariateFunction, f, new, UnivariateFunction, Override, public, double, value, double, x, MathIllegalArgumentException, TooManyEvaluationsException, return, computeObjectiveValue, x, final, double, min, getMin, final, double, max, getMax, final, double, step, /, -, max, min, n, double, sum, 0, for, int, i, 0, <, i, n, ++, i, final, double, a, +, min, *, i, step, final, double, b, +, a, step, final, GaussIntegrator, g, FACTORY, legendreHighPrecision, numberOfPoints, a, b, +=, sum, g, integrate, f, return, sum]
org.apache.commons.math4.analysis.integration:MidPointIntegrator:stage:int+double+double+double#[final, long, np, <<, 1L, -, n, 1, double, sum, 0, final, double, spacing, /, diffMaxMin, np, double, x, +, min, *, 0.5, spacing, for, long, i, 0, <, i, np, ++, i, +=, sum, computeObjectiveValue, x, +=, x, spacing, return, *, 0.5, +, previousStageResult, *, sum, spacing]
org.apache.commons.math4.analysis.integration:MidPointIntegrator:doIntegrate:null#[final, double, min, getMin, final, double, diff, -, getMax, min, final, double, midPoint, +, min, *, 0.5, diff, double, oldt, *, diff, computeObjectiveValue, midPoint, while, true, iterations, incrementCount, final, int, i, iterations, getCount, final, double, t, stage, i, oldt, min, diff, if, >=, i, getMinimalIterationCount, final, double, delta, FastMath, abs, -, t, oldt, final, double, rLimit, *, getRelativeAccuracy, +, FastMath, abs, oldt, FastMath, abs, t, 0.5, if, ||, <=, delta, rLimit, <=, delta, getAbsoluteAccuracy, return, t, =, oldt, t]
org.apache.commons.math4.analysis.integration:RombergIntegrator:doIntegrate:null#[final, int, m, +, iterations, getMaximalCount, 1, double, previousRow, double, m, double, currentRow, double, m, TrapezoidIntegrator, qtrap, new, TrapezoidIntegrator, =, currentRow, 0, qtrap, stage, this, 0, iterations, incrementCount, double, olds, currentRow, 0, while, true, final, int, i, iterations, getCount, final, double, tmpRow, previousRow, =, previousRow, currentRow, =, currentRow, tmpRow, =, currentRow, 0, qtrap, stage, this, i, iterations, incrementCount, for, int, j, 1, <=, j, i, ++, j, final, double, r, -, <<, 1L, *, 2, j, 1, final, double, tIJm1, currentRow, -, j, 1, =, currentRow, j, +, tIJm1, /, -, tIJm1, previousRow, -, j, 1, r, final, double, s, currentRow, i, if, >=, i, getMinimalIterationCount, final, double, delta, FastMath, abs, -, s, olds, final, double, rLimit, *, getRelativeAccuracy, +, FastMath, abs, olds, FastMath, abs, s, 0.5, if, ||, <=, delta, rLimit, <=, delta, getAbsoluteAccuracy, return, s, =, olds, s]
org.apache.commons.math4.analysis.integration:SimpsonIntegrator:doIntegrate:null#[TrapezoidIntegrator, qtrap, new, TrapezoidIntegrator, if, ==, getMinimalIterationCount, 1, return, /, -, *, 4, qtrap, stage, this, 1, qtrap, stage, this, 0, 3.0, double, olds, 0, double, oldt, qtrap, stage, this, 0, while, true, final, double, t, qtrap, stage, this, iterations, getCount, iterations, incrementCount, final, double, s, /, -, *, 4, t, oldt, 3.0, if, >=, iterations, getCount, getMinimalIterationCount, final, double, delta, FastMath, abs, -, s, olds, final, double, rLimit, *, getRelativeAccuracy, +, FastMath, abs, olds, FastMath, abs, s, 0.5, if, ||, <=, delta, rLimit, <=, delta, getAbsoluteAccuracy, return, s, =, olds, s, =, oldt, t]
org.apache.commons.math4.analysis.integration:TrapezoidIntegrator:stage:BaseAbstractUnivariateIntegrator+int#[if, ==, n, 0, final, double, max, baseIntegrator, getMax, final, double, min, baseIntegrator, getMin, =, s, *, 0.5, -, max, min, +, baseIntegrator, computeObjectiveValue, min, baseIntegrator, computeObjectiveValue, max, return, s, final, long, np, <<, 1L, -, n, 1, double, sum, 0, final, double, max, baseIntegrator, getMax, final, double, min, baseIntegrator, getMin, final, double, spacing, /, -, max, min, np, double, x, +, min, *, 0.5, spacing, for, long, i, 0, <, i, np, ++, i, +=, sum, baseIntegrator, computeObjectiveValue, x, +=, x, spacing, =, s, *, 0.5, +, s, *, sum, spacing, return, s]
org.apache.commons.math4.analysis.integration:TrapezoidIntegrator:doIntegrate:null#[double, oldt, stage, this, 0, iterations, incrementCount, while, true, final, int, i, iterations, getCount, final, double, t, stage, this, i, if, >=, i, getMinimalIterationCount, final, double, delta, FastMath, abs, -, t, oldt, final, double, rLimit, *, getRelativeAccuracy, +, FastMath, abs, oldt, FastMath, abs, t, 0.5, if, ||, <=, delta, rLimit, <=, delta, getAbsoluteAccuracy, return, t, =, oldt, t, iterations, incrementCount]
org.apache.commons.math4.analysis.interpolation:AkimaSplineInterpolator:interpolate:double[]+double[]#[if, ||, ==, xvals, null, ==, yvals, null, throw, new, NullArgumentException, if, !=, xvals.length, yvals.length, throw, new, DimensionMismatchException, xvals.length, yvals.length, if, <, xvals.length, MINIMUM_NUMBER_POINTS, throw, new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, xvals.length, MINIMUM_NUMBER_POINTS, true, MathArrays, checkOrder, xvals, final, int, numberOfDiffAndWeightElements, -, xvals.length, 1, final, double, differences, double, numberOfDiffAndWeightElements, final, double, weights, double, numberOfDiffAndWeightElements, for, int, i, 0, <, i, differences.length, ++, i, =, differences, i, /, -, yvals, +, i, 1, yvals, i, -, xvals, +, i, 1, xvals, i, for, int, i, 1, <, i, weights.length, ++, i, =, weights, i, FastMath, abs, -, differences, i, differences, -, i, 1, final, double, firstDerivatives, double, xvals.length, for, int, i, 2, <, i, -, firstDerivatives.length, 2, ++, i, final, double, wP, weights, +, i, 1, final, double, wM, weights, -, i, 1, if, &&, Precision, equals, wP, 0.0, Precision, equals, wM, 0.0, final, double, xv, xvals, i, final, double, xvP, xvals, +, i, 1, final, double, xvM, xvals, -, i, 1, =, firstDerivatives, i, /, +, *, -, xvP, xv, differences, -, i, 1, *, -, xv, xvM, differences, i, -, xvP, xvM, =, firstDerivatives, i, /, +, *, wP, differences, -, i, 1, *, wM, differences, i, +, wP, wM, =, firstDerivatives, 0, differentiateThreePoint, xvals, yvals, 0, 0, 1, 2, =, firstDerivatives, 1, differentiateThreePoint, xvals, yvals, 1, 0, 1, 2, =, firstDerivatives, -, xvals.length, 2, differentiateThreePoint, xvals, yvals, -, xvals.length, 2, -, xvals.length, 3, -, xvals.length, 2, -, xvals.length, 1, =, firstDerivatives, -, xvals.length, 1, differentiateThreePoint, xvals, yvals, -, xvals.length, 1, -, xvals.length, 3, -, xvals.length, 2, -, xvals.length, 1, return, interpolateHermiteSorted, xvals, yvals, firstDerivatives]
org.apache.commons.math4.analysis.interpolation:AkimaSplineInterpolator:differentiateThreePoint:double[]+double[]+int+int+int+int#[final, double, x0, yvals, indexOfFirstSample, final, double, x1, yvals, indexOfSecondsample, final, double, x2, yvals, indexOfThirdSample, final, double, t, -, xvals, indexOfDifferentiation, xvals, indexOfFirstSample, final, double, t1, -, xvals, indexOfSecondsample, xvals, indexOfFirstSample, final, double, t2, -, xvals, indexOfThirdSample, xvals, indexOfFirstSample, final, double, a, /, -, x2, x0, *, /, t2, t1, -, x1, x0, -, *, t2, t2, *, t1, t2, final, double, b, /, -, x1, x0, *, a, t1, t1, t1, return, +, *, 2, a, t, b]
org.apache.commons.math4.analysis.interpolation:AkimaSplineInterpolator:interpolateHermiteSorted:double[]+double[]+double[]#[if, !=, xvals.length, yvals.length, throw, new, DimensionMismatchException, xvals.length, yvals.length, if, !=, xvals.length, firstDerivatives.length, throw, new, DimensionMismatchException, xvals.length, firstDerivatives.length, final, int, minimumLength, 2, if, <, xvals.length, minimumLength, throw, new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, xvals.length, minimumLength, true, final, int, size, -, xvals.length, 1, final, PolynomialFunction, polynomials, PolynomialFunction, size, final, double, coefficients, double, 4, for, int, i, 0, <, i, polynomials.length, ++, i, final, double, w, -, xvals, +, i, 1, xvals, i, final, double, w2, *, w, w, final, double, yv, yvals, i, final, double, yvP, yvals, +, i, 1, final, double, fd, firstDerivatives, i, final, double, fdP, firstDerivatives, +, i, 1, =, coefficients, 0, yv, =, coefficients, 1, firstDerivatives, i, =, coefficients, 2, /, -, -, /, *, 3, -, yvP, yv, w, *, 2, fd, fdP, w, =, coefficients, 3, /, +, +, /, *, 2, -, yv, yvP, w, fd, fdP, w2, =, polynomials, i, new, PolynomialFunction, coefficients, return, new, PolynomialSplineFunction, xvals, polynomials]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:value:double+double#[final, int, i, searchIndex, x, xval, final, int, j, searchIndex, y, yval, final, double, xN, /, -, x, xval, i, -, xval, +, i, 1, xval, i, final, double, yN, /, -, y, yval, j, -, yval, +, j, 1, yval, j, return, splines, i, j, value, xN, yN]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:isValidPoint:double+double#[if, ||, ||, ||, <, x, xval, 0, >, x, xval, -, xval.length, 1, <, y, yval, 0, >, y, yval, -, yval.length, 1, return, false, return, true]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:searchIndex:double+double[]#[final, int, r, Arrays, binarySearch, val, c, if, ||, ==, r, -, 1, ==, r, -, -, val.length, 1, throw, new, OutOfRangeException, c, val, 0, val, -, val.length, 1, if, <, r, 0, return, -, -, r, 2, final, int, last, -, val.length, 1, if, ==, r, last, return, -, last, 1, return, r]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:computeSplineCoefficients:double[]#[final, double, a, double, NUM_COEFF, for, int, i, 0, <, i, NUM_COEFF, ++, i, double, result, 0, final, double, row, AINV, i, for, int, j, 0, <, j, NUM_COEFF, ++, j, +=, result, *, row, j, beta, j, =, a, i, result, return, a]
org.apache.commons.math4.analysis.interpolation:BicubicFunction:value:double+double#[if, ||, <, x, 0, >, x, 1, throw, new, OutOfRangeException, x, 0, 1, if, ||, <, y, 0, >, y, 1, throw, new, OutOfRangeException, y, 0, 1, final, double, x2, *, x, x, final, double, x3, *, x2, x, final, double, pX, 1, x, x2, x3, final, double, y2, *, y, y, final, double, y3, *, y2, y, final, double, pY, 1, y, y2, y3, return, apply, pX, pY, a]
org.apache.commons.math4.analysis.interpolation:BicubicFunction:apply:double[]+double[]+double[][]#[double, result, 0, for, int, i, 0, <, i, N, ++, i, final, double, r, MathArrays, linearCombination, coeff, i, pY, +=, result, *, r, pX, i, return, result]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolator:interpolate:double[]+double[]+double[][]#[if, ||, ||, ==, xval.length, 0, ==, yval.length, 0, ==, fval.length, 0, throw, new, NoDataException, if, !=, xval.length, fval.length, throw, new, DimensionMismatchException, xval.length, fval.length, MathArrays, checkOrder, xval, MathArrays, checkOrder, yval, final, int, xLen, xval.length, final, int, yLen, yval.length, final, double, dFdX, double, xLen, yLen, final, double, dFdY, double, xLen, yLen, final, double, d2FdXdY, double, xLen, yLen, for, int, i, 1, <, i, -, xLen, 1, ++, i, final, int, nI, +, i, 1, final, int, pI, -, i, 1, final, double, nX, xval, nI, final, double, pX, xval, pI, final, double, deltaX, -, nX, pX, for, int, j, 1, <, j, -, yLen, 1, ++, j, final, int, nJ, +, j, 1, final, int, pJ, -, j, 1, final, double, nY, yval, nJ, final, double, pY, yval, pJ, final, double, deltaY, -, nY, pY, =, dFdX, i, j, /, -, fval, nI, j, fval, pI, j, deltaX, =, dFdY, i, j, /, -, fval, i, nJ, fval, i, pJ, deltaY, final, double, deltaXY, *, deltaX, deltaY, =, d2FdXdY, i, j, /, +, -, fval, nI, nJ, fval, nI, pJ, fval, pI, nJ, fval, pI, pJ, deltaXY, return, new, BicubicInterpolatingFunction, xval, yval, fval, dFdX, dFdY, d2FdXdY, Override, public, boolean, isValidPoint, double, x, double, y, if, ||, ||, ||, <, x, xval, 1, >, x, xval, -, xval.length, 2, <, y, yval, 1, >, y, yval, -, yval.length, 2, return, false, return, true]
org.apache.commons.math4.analysis.interpolation:DividedDifferenceInterpolator:interpolate:double+double#[PolynomialFunctionLagrangeForm, verifyInterpolationArray, x, y, true, final, double, c, double, -, x.length, 1, System, arraycopy, x, 0, c, 0, c.length, final, double, a, computeDividedDifference, x, y, return, new, PolynomialFunctionNewtonForm, a, c]
org.apache.commons.math4.analysis.interpolation:DividedDifferenceInterpolator:computeDividedDifference:double+double#[PolynomialFunctionLagrangeForm, verifyInterpolationArray, x, y, true, final, double, divdiff, y, clone, final, int, n, x.length, final, double, a, double, n, =, a, 0, divdiff, 0, for, int, i, 1, <, i, n, ++, i, for, int, j, 0, <, j, -, n, i, ++, j, final, double, denominator, -, x, +, j, i, x, j, =, divdiff, j, /, -, divdiff, +, j, 1, divdiff, j, denominator, =, a, i, divdiff, 0, return, a]
org.apache.commons.math4.analysis.interpolation:FieldHermiteInterpolator:addSamplePoint:T+T[]...#[MathUtils, checkNotNull, x, T, factorial, x, getField, getOne, for, int, i, 0, <, i, value.length, ++, i, final, T, y, value, i, clone, if, >, i, 1, =, factorial, factorial, multiply, i, final, T, inv, factorial, reciprocal, for, int, j, 0, <, j, y.length, ++, j, =, y, j, y, j, multiply, inv, final, int, n, abscissae, size, bottomDiagonal, add, -, n, i, y, T, bottom0, y, for, int, j, i, <, j, n, ++, j, final, T, bottom1, bottomDiagonal, get, -, n, +, j, 1, if, x, equals, abscissae, get, -, n, +, j, 1, throw, new, ZeroException, LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x, final, T, inv, x, subtract, abscissae, get, -, n, +, j, 1, reciprocal, for, int, k, 0, <, k, y.length, ++, k, =, bottom1, k, inv, multiply, bottom0, k, subtract, bottom1, k, =, bottom0, bottom1, topDiagonal, add, bottom0, clone, abscissae, add, x]
org.apache.commons.math4.analysis.interpolation:FieldHermiteInterpolator:value:T#[MathUtils, checkNotNull, x, if, abscissae, isEmpty, throw, new, NoDataException, LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE, final, T, value, MathArrays, buildArray, x, getField, topDiagonal, get, 0, length, T, valueCoeff, x, getField, getOne, for, int, i, 0, <, i, topDiagonal, size, ++, i, T, dividedDifference, topDiagonal, get, i, for, int, k, 0, <, k, value.length, ++, k, =, value, k, value, k, add, dividedDifference, k, multiply, valueCoeff, final, T, deltaX, x, subtract, abscissae, get, i, =, valueCoeff, valueCoeff, multiply, deltaX, return, value]
org.apache.commons.math4.analysis.interpolation:FieldHermiteInterpolator:derivatives:T+int#[MathUtils, checkNotNull, x, if, abscissae, isEmpty, throw, new, NoDataException, LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE, final, T, zero, x, getField, getZero, final, T, one, x, getField, getOne, final, T, tj, MathArrays, buildArray, x, getField, +, order, 1, =, tj, 0, zero, for, int, i, 0, <, i, order, ++, i, =, tj, +, i, 1, tj, i, add, one, final, T, derivatives, MathArrays, buildArray, x, getField, +, order, 1, topDiagonal, get, 0, length, final, T, valueCoeff, MathArrays, buildArray, x, getField, +, order, 1, =, valueCoeff, 0, x, getField, getOne, for, int, i, 0, <, i, topDiagonal, size, ++, i, T, dividedDifference, topDiagonal, get, i, final, T, deltaX, x, subtract, abscissae, get, i, for, int, j, order, >=, j, 0, --, j, for, int, k, 0, <, k, derivatives, j, length, ++, k, =, derivatives, j, k, derivatives, j, k, add, dividedDifference, k, multiply, valueCoeff, j, =, valueCoeff, j, valueCoeff, j, multiply, deltaX, if, >, j, 0, =, valueCoeff, j, valueCoeff, j, add, tj, j, multiply, valueCoeff, -, j, 1, return, derivatives]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:addSamplePoint:double+double[]...#[for, int, i, 0, <, i, value.length, ++, i, final, double, y, value, i, clone, if, >, i, 1, double, inv, /, 1.0, CombinatoricsUtils, factorial, i, for, int, j, 0, <, j, y.length, ++, j, *=, y, j, inv, final, int, n, abscissae, size, bottomDiagonal, add, -, n, i, y, double, bottom0, y, for, int, j, i, <, j, n, ++, j, final, double, bottom1, bottomDiagonal, get, -, n, +, j, 1, final, double, inv, /, 1.0, -, x, abscissae, get, -, n, +, j, 1, if, Double, isInfinite, inv, throw, new, ZeroException, LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x, for, int, k, 0, <, k, y.length, ++, k, =, bottom1, k, *, inv, -, bottom0, k, bottom1, k, =, bottom0, bottom1, topDiagonal, add, bottom0, clone, abscissae, add, x]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:getPolynomials:null#[checkInterpolation, final, PolynomialFunction, zero, polynomial, 0, PolynomialFunction, polynomials, PolynomialFunction, topDiagonal, get, 0, length, for, int, i, 0, <, i, polynomials.length, ++, i, =, polynomials, i, zero, PolynomialFunction, coeff, polynomial, 1, for, int, i, 0, <, i, topDiagonal, size, ++, i, double, tdi, topDiagonal, get, i, for, int, k, 0, <, k, polynomials.length, ++, k, =, polynomials, k, polynomials, k, add, coeff, multiply, polynomial, tdi, k, =, coeff, coeff, multiply, polynomial, -, abscissae, get, i, 1.0, return, polynomials]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:value:double#[checkInterpolation, final, double, value, double, topDiagonal, get, 0, length, double, valueCoeff, 1, for, int, i, 0, <, i, topDiagonal, size, ++, i, double, dividedDifference, topDiagonal, get, i, for, int, k, 0, <, k, value.length, ++, k, +=, value, k, *, dividedDifference, k, valueCoeff, final, double, deltaX, -, x, abscissae, get, i, *=, valueCoeff, deltaX, return, value]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:value:DerivativeStructure#[checkInterpolation, final, DerivativeStructure, value, DerivativeStructure, topDiagonal, get, 0, length, Arrays, fill, value, x, getField, getZero, DerivativeStructure, valueCoeff, x, getField, getOne, for, int, i, 0, <, i, topDiagonal, size, ++, i, double, dividedDifference, topDiagonal, get, i, for, int, k, 0, <, k, value.length, ++, k, =, value, k, value, k, add, valueCoeff, multiply, dividedDifference, k, final, DerivativeStructure, deltaX, x, subtract, abscissae, get, i, =, valueCoeff, valueCoeff, multiply, deltaX, return, value]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:checkInterpolation:null#[if, abscissae, isEmpty, throw, new, NoDataException, LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:polynomial:double...#[return, new, PolynomialFunction, c]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:copy:null#[return, new, InterpolatingMicrosphere, this]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:getDimension:null#[return, dimension]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:getSize:null#[return, size]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:value:double[]+double[][]+double[]+double+double#[if, <, exponent, 0, throw, new, NotPositiveException, exponent, clear, final, int, numSamples, samplePoints.length, for, int, i, 0, <, i, numSamples, ++, i, final, double, diff, MathArrays, ebeSubtract, samplePoints, i, point, final, double, diffNorm, MathArrays, safeNorm, diff, if, <, FastMath, abs, diffNorm, noInterpolationTolerance, return, sampleValues, i, final, double, weight, FastMath, pow, diffNorm, -, exponent, illuminate, diff, sampleValues, i, weight, return, interpolate]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:add:double[]+boolean#[if, >=, microsphere, size, size, throw, new, MaxCountExceededException, size, if, >, normal.length, dimension, throw, new, DimensionMismatchException, normal.length, dimension, microsphere, add, new, Facet, copy, normal, clone, normal, microsphereData, add, new, FacetData, 0d, 0d]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:interpolate:null#[int, darkCount, 0, double, value, 0, double, totalWeight, 0, for, FacetData, fd, microsphereData, final, double, iV, fd, illumination, if, !=, iV, 0d, +=, value, *, iV, fd, sample, +=, totalWeight, iV, ++, darkCount, final, double, darkFraction, /, darkCount, double, size, return, <=, darkFraction, maxDarkFraction, /, value, totalWeight, background]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:illuminate:double[]+double+double#[for, int, i, 0, <, i, size, ++, i, final, double, n, microsphere, get, i, getNormal, final, double, cos, MathArrays, cosAngle, n, sampleDirection, if, >, cos, 0, final, double, illumination, *, cos, weight, if, &&, >, illumination, darkThreshold, >, illumination, microsphereData, get, i, illumination, microsphereData, set, i, new, FacetData, illumination, sampleValue]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:clear:null#[for, int, i, 0, <, i, size, ++, i, microsphereData, set, i, new, FacetData, 0d, 0d]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere2D:copy:null#[return, new, InterpolatingMicrosphere2D, this]
org.apache.commons.math4.analysis.interpolation:LinearInterpolator:interpolate:double+double#[if, !=, x.length, y.length, throw, new, DimensionMismatchException, x.length, y.length, if, <, x.length, 2, throw, new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, x.length, 2, true, int, n, -, x.length, 1, MathArrays, checkOrder, x, final, double, m, double, n, for, int, i, 0, <, i, n, ++, i, =, m, i, /, -, y, +, i, 1, y, i, -, x, +, i, 1, x, i, final, PolynomialFunction, polynomials, PolynomialFunction, n, final, double, coefficients, double, 2, for, int, i, 0, <, i, n, ++, i, =, coefficients, 0, y, i, =, coefficients, 1, m, i, =, polynomials, i, new, PolynomialFunction, coefficients, return, new, PolynomialSplineFunction, x, polynomials]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:interpolate:double[]+double[]#[return, new, SplineInterpolator, interpolate, xval, smooth, xval, yval]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:smooth:double[]+double[]+double[]#[if, !=, xval.length, yval.length, throw, new, DimensionMismatchException, xval.length, yval.length, final, int, n, xval.length, if, ==, n, 0, throw, new, NoDataException, checkAllFiniteReal, xval, checkAllFiniteReal, yval, checkAllFiniteReal, weights, MathArrays, checkOrder, xval, if, ==, n, 1, return, double, yval, 0, if, ==, n, 2, return, double, yval, 0, yval, 1, int, bandwidthInPoints, int, *, bandwidth, n, if, <, bandwidthInPoints, 2, throw, new, NumberIsTooSmallException, LocalizedFormats.BANDWIDTH, bandwidthInPoints, 2, true, final, double, res, double, n, final, double, residuals, double, n, final, double, sortedResiduals, double, n, final, double, robustnessWeights, double, n, Arrays, fill, robustnessWeights, 1, for, int, iter, 0, <=, iter, robustnessIters, ++, iter, final, int, bandwidthInterval, 0, -, bandwidthInPoints, 1, for, int, i, 0, <, i, n, ++, i, final, double, x, xval, i, if, >, i, 0, updateBandwidthInterval, xval, weights, i, bandwidthInterval, final, int, ileft, bandwidthInterval, 0, final, int, iright, bandwidthInterval, 1, final, int, edge, if, >, -, xval, i, xval, ileft, -, xval, iright, xval, i, =, edge, ileft, =, edge, iright, double, sumWeights, 0, double, sumX, 0, double, sumXSquared, 0, double, sumY, 0, double, sumXY, 0, double, denom, FastMath, abs, /, 1.0, -, xval, edge, x, for, int, k, ileft, <=, k, iright, ++, k, final, double, xk, xval, k, final, double, yk, yval, k, final, double, dist, <, k, i, -, x, xk, -, xk, x, final, double, w, *, tricube, *, dist, denom, robustnessWeights, k, weights, k, final, double, xkw, *, xk, w, +=, sumWeights, w, +=, sumX, xkw, +=, sumXSquared, *, xk, xkw, +=, sumY, *, yk, w, +=, sumXY, *, yk, xkw, final, double, meanX, /, sumX, sumWeights, final, double, meanY, /, sumY, sumWeights, final, double, meanXY, /, sumXY, sumWeights, final, double, meanXSquared, /, sumXSquared, sumWeights, final, double, beta, if, <, FastMath, sqrt, FastMath, abs, -, meanXSquared, *, meanX, meanX, accuracy, =, beta, 0, =, beta, /, -, meanXY, *, meanX, meanY, -, meanXSquared, *, meanX, meanX, final, double, alpha, -, meanY, *, beta, meanX, =, res, i, +, *, beta, x, alpha, =, residuals, i, FastMath, abs, -, yval, i, res, i, if, ==, iter, robustnessIters, break, System, arraycopy, residuals, 0, sortedResiduals, 0, n, Arrays, sort, sortedResiduals, final, double, medianResidual, sortedResiduals, /, n, 2, if, <, FastMath, abs, medianResidual, accuracy, break, for, int, i, 0, <, i, n, ++, i, final, double, arg, /, residuals, i, *, 6, medianResidual, if, >=, arg, 1, =, robustnessWeights, i, 0, final, double, w, -, 1, *, arg, arg, =, robustnessWeights, i, *, w, w, return, res]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:smooth:double[]+double[]#[if, !=, xval.length, yval.length, throw, new, DimensionMismatchException, xval.length, yval.length, final, double, unitWeights, double, xval.length, Arrays, fill, unitWeights, 1.0, return, smooth, xval, yval, unitWeights]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:updateBandwidthInterval:double[]+double[]+int+int[]#[final, int, left, bandwidthInterval, 0, final, int, right, bandwidthInterval, 1, int, nextRight, nextNonzero, weights, right, if, &&, <, nextRight, xval.length, <, -, xval, nextRight, xval, i, -, xval, i, xval, left, int, nextLeft, nextNonzero, weights, bandwidthInterval, 0, =, bandwidthInterval, 0, nextLeft, =, bandwidthInterval, 1, nextRight]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:nextNonzero:double[]+int#[int, j, +, i, 1, while, &&, <, j, weights.length, ==, weights, j, 0, ++, j, return, j]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:tricube:double#[final, double, absX, FastMath, abs, x, if, >=, absX, 1.0, return, 0.0, final, double, tmp, -, 1, *, absX, absX, absX, return, *, tmp, tmp, tmp]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:checkAllFiniteReal:double[]#[for, int, i, 0, <, i, values.length, ++, i, MathUtils, checkFinite, values, i]
org.apache.commons.math4.analysis.interpolation:MicrosphereProjectionInterpolator:interpolate:double[][]+double[]#[if, ||, ==, xval, null, ==, yval, null, throw, new, NullArgumentException, if, ==, xval.length, 0, throw, new, NoDataException, if, !=, xval.length, yval.length, throw, new, DimensionMismatchException, xval.length, yval.length, if, ==, xval, 0, null, throw, new, NullArgumentException, final, int, dimension, microsphere, getDimension, if, !=, dimension, xval, 0, length, throw, new, DimensionMismatchException, xval, 0, length, dimension, final, InterpolatingMicrosphere, m, sharedSphere, microsphere, microsphere, copy, return, new, MultivariateFunction, Override, public, double, value, double, point, return, m, value, point, xval, yval, exponent, noInterpolationTolerance]
org.apache.commons.math4.analysis.interpolation:NevilleInterpolator:interpolate:double+double#[return, new, PolynomialFunctionLagrangeForm, x, y]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolatingFunction:value:double+double#[final, AkimaSplineInterpolator, interpolator, new, AkimaSplineInterpolator, final, int, offset, 2, final, int, count, +, offset, 3, final, int, i, searchIndex, x, xval, offset, count, final, int, j, searchIndex, y, yval, offset, count, final, double, xArray, double, count, final, double, yArray, double, count, final, double, zArray, double, count, final, double, interpArray, double, count, for, int, index, 0, <, index, count, ++, index, =, xArray, index, xval, +, i, index, =, yArray, index, yval, +, j, index, for, int, zIndex, 0, <, zIndex, count, ++, zIndex, for, int, index, 0, <, index, count, ++, index, =, zArray, index, fval, +, i, index, +, j, zIndex, final, PolynomialSplineFunction, spline, interpolator, interpolate, xArray, zArray, =, interpArray, zIndex, spline, value, x, final, PolynomialSplineFunction, spline, interpolator, interpolate, yArray, interpArray, double, returnValue, spline, value, y, return, returnValue]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolatingFunction:isValidPoint:double+double#[if, ||, ||, ||, <, x, xval, 0, >, x, xval, -, xval.length, 1, <, y, yval, 0, >, y, yval, -, yval.length, 1, return, false, return, true]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolatingFunction:searchIndex:double+double[]+int+int#[int, r, Arrays, binarySearch, val, c, if, ||, ==, r, -, 1, ==, r, -, -, val.length, 1, throw, new, OutOfRangeException, c, val, 0, val, -, val.length, 1, if, <, r, 0, =, r, -, -, r, offset, 1, -=, r, offset, if, <, r, 0, =, r, 0, if, >=, +, r, count, val.length, =, r, -, val.length, count, return, r]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolator:interpolate:double[]+double[]+double[][]#[if, ||, ||, ||, ==, xval, null, ==, yval, null, ==, fval, null, ==, fval, 0, null, throw, new, NullArgumentException, if, ||, ||, ==, xval.length, 0, ==, yval.length, 0, ==, fval.length, 0, throw, new, NoDataException, MathArrays, checkOrder, xval, MathArrays, checkOrder, yval, return, new, PiecewiseBicubicSplineInterpolatingFunction, xval, yval, fval]
org.apache.commons.math4.analysis.interpolation:SplineInterpolator:interpolate:double+double#[if, !=, x.length, y.length, throw, new, DimensionMismatchException, x.length, y.length, if, <, x.length, 3, throw, new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, x.length, 3, true, final, int, n, -, x.length, 1, MathArrays, checkOrder, x, final, double, h, double, n, for, int, i, 0, <, i, n, ++, i, =, h, i, -, x, +, i, 1, x, i, final, double, mu, double, n, final, double, z, double, +, n, 1, =, mu, 0, 0d, =, z, 0, 0d, double, g, 0, for, int, i, 1, <, i, n, ++, i, =, g, -, *, 2d, -, x, +, i, 1, x, -, i, 1, *, h, -, i, 1, mu, -, i, 1, =, mu, i, /, h, i, g, =, z, i, /, -, /, *, 3d, +, -, *, y, +, i, 1, h, -, i, 1, *, y, i, -, x, +, i, 1, x, -, i, 1, *, y, -, i, 1, h, i, *, h, -, i, 1, h, i, *, h, -, i, 1, z, -, i, 1, g, final, double, b, double, n, final, double, c, double, +, n, 1, final, double, d, double, n, =, z, n, 0d, =, c, n, 0d, for, int, j, -, n, 1, >=, j, 0, --, j, =, c, j, -, z, j, *, mu, j, c, +, j, 1, =, b, j, -, /, -, y, +, j, 1, y, j, h, j, /, *, h, j, +, c, +, j, 1, *, 2d, c, j, 3d, =, d, j, /, -, c, +, j, 1, c, j, *, 3d, h, j, final, PolynomialFunction, polynomials, PolynomialFunction, n, final, double, coefficients, double, 4, for, int, i, 0, <, i, n, ++, i, =, coefficients, 0, y, i, =, coefficients, 1, b, i, =, coefficients, 2, c, i, =, coefficients, 3, d, i, =, polynomials, i, new, PolynomialFunction, coefficients, return, new, PolynomialSplineFunction, x, polynomials]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:value:double+double+double#[final, int, i, searchIndex, x, xval, if, ==, i, -, 1, throw, new, OutOfRangeException, x, xval, 0, xval, -, xval.length, 1, final, int, j, searchIndex, y, yval, if, ==, j, -, 1, throw, new, OutOfRangeException, y, yval, 0, yval, -, yval.length, 1, final, int, k, searchIndex, z, zval, if, ==, k, -, 1, throw, new, OutOfRangeException, z, zval, 0, zval, -, zval.length, 1, final, double, xN, /, -, x, xval, i, -, xval, +, i, 1, xval, i, final, double, yN, /, -, y, yval, j, -, yval, +, j, 1, yval, j, final, double, zN, /, -, z, zval, k, -, zval, +, k, 1, zval, k, return, splines, i, j, k, value, xN, yN, zN]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:isValidPoint:double+double+double#[if, ||, ||, ||, ||, ||, <, x, xval, 0, >, x, xval, -, xval.length, 1, <, y, yval, 0, >, y, yval, -, yval.length, 1, <, z, zval, 0, >, z, zval, -, zval.length, 1, return, false, return, true]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:searchIndex:double+double[]#[if, <, c, val, 0, return, -, 1, final, int, max, val.length, for, int, i, 1, <, i, max, ++, i, if, <=, c, val, i, return, -, i, 1, return, -, 1]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:computeCoefficients:double[]#[final, int, sz, 64, final, double, a, double, sz, for, int, i, 0, <, i, sz, ++, i, double, result, 0, final, double, row, AINV, i, for, int, j, 0, <, j, sz, ++, j, +=, result, *, row, j, beta, j, =, a, i, result, return, a]
org.apache.commons.math4.analysis.interpolation:TricubicFunction:value:double+double+double#[if, ||, <, x, 0, >, x, 1, throw, new, OutOfRangeException, x, 0, 1, if, ||, <, y, 0, >, y, 1, throw, new, OutOfRangeException, y, 0, 1, if, ||, <, z, 0, >, z, 1, throw, new, OutOfRangeException, z, 0, 1, final, double, x2, *, x, x, final, double, x3, *, x2, x, final, double, pX, 1, x, x2, x3, final, double, y2, *, y, y, final, double, y3, *, y2, y, final, double, pY, 1, y, y2, y3, final, double, z2, *, z, z, final, double, z3, *, z2, z, final, double, pZ, 1, z, z2, z3, double, result, 0, for, int, i, 0, <, i, N, ++, i, for, int, j, 0, <, j, N, ++, j, for, int, k, 0, <, k, N, ++, k, +=, result, *, a, i, j, k, pX, i, pY, j, pZ, k, return, result]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolator:interpolate:double[]+double[]+double[]+double[][][]#[if, ||, ||, ||, ==, xval.length, 0, ==, yval.length, 0, ==, zval.length, 0, ==, fval.length, 0, throw, new, NoDataException, if, !=, xval.length, fval.length, throw, new, DimensionMismatchException, xval.length, fval.length, MathArrays, checkOrder, xval, MathArrays, checkOrder, yval, MathArrays, checkOrder, zval, final, int, xLen, xval.length, final, int, yLen, yval.length, final, int, zLen, zval.length, final, double, dFdX, double, xLen, yLen, zLen, final, double, dFdY, double, xLen, yLen, zLen, final, double, dFdZ, double, xLen, yLen, zLen, final, double, d2FdXdY, double, xLen, yLen, zLen, final, double, d2FdXdZ, double, xLen, yLen, zLen, final, double, d2FdYdZ, double, xLen, yLen, zLen, final, double, d3FdXdYdZ, double, xLen, yLen, zLen, for, int, i, 1, <, i, -, xLen, 1, ++, i, if, !=, yval.length, fval, i, length, throw, new, DimensionMismatchException, yval.length, fval, i, length, final, int, nI, +, i, 1, final, int, pI, -, i, 1, final, double, nX, xval, nI, final, double, pX, xval, pI, final, double, deltaX, -, nX, pX, for, int, j, 1, <, j, -, yLen, 1, ++, j, if, !=, zval.length, fval, i, j, length, throw, new, DimensionMismatchException, zval.length, fval, i, j, length, final, int, nJ, +, j, 1, final, int, pJ, -, j, 1, final, double, nY, yval, nJ, final, double, pY, yval, pJ, final, double, deltaY, -, nY, pY, final, double, deltaXY, *, deltaX, deltaY, for, int, k, 1, <, k, -, zLen, 1, ++, k, final, int, nK, +, k, 1, final, int, pK, -, k, 1, final, double, nZ, zval, nK, final, double, pZ, zval, pK, final, double, deltaZ, -, nZ, pZ, =, dFdX, i, j, k, /, -, fval, nI, j, k, fval, pI, j, k, deltaX, =, dFdY, i, j, k, /, -, fval, i, nJ, k, fval, i, pJ, k, deltaY, =, dFdZ, i, j, k, /, -, fval, i, j, nK, fval, i, j, pK, deltaZ, final, double, deltaXZ, *, deltaX, deltaZ, final, double, deltaYZ, *, deltaY, deltaZ, =, d2FdXdY, i, j, k, /, +, -, fval, nI, nJ, k, fval, nI, pJ, k, fval, pI, nJ, k, fval, pI, pJ, k, deltaXY, =, d2FdXdZ, i, j, k, /, +, -, fval, nI, j, nK, fval, nI, j, pK, fval, pI, j, nK, fval, pI, j, pK, deltaXZ, =, d2FdYdZ, i, j, k, /, +, -, fval, i, nJ, nK, fval, i, nJ, pK, fval, i, pJ, nK, fval, i, pJ, pK, deltaYZ, final, double, deltaXYZ, *, deltaXY, deltaZ, =, d3FdXdYdZ, i, j, k, /, -, +, +, -, +, -, fval, nI, nJ, nK, fval, nI, pJ, nK, fval, pI, nJ, nK, fval, pI, pJ, nK, fval, nI, nJ, pK, fval, nI, pJ, pK, fval, pI, nJ, pK, fval, pI, pJ, pK, deltaXYZ, return, new, TricubicInterpolatingFunction, xval, yval, zval, fval, dFdX, dFdY, dFdZ, d2FdXdY, d2FdXdZ, d2FdYdZ, d3FdXdYdZ, Override, public, boolean, isValidPoint, double, x, double, y, double, z, if, ||, ||, ||, ||, ||, <, x, xval, 1, >, x, xval, -, xval.length, 2, <, y, yval, 1, >, y, yval, -, yval.length, 2, <, z, zval, 1, >, z, zval, -, zval.length, 2, return, false, return, true]
org.apache.commons.math4.analysis.interpolation:UnivariatePeriodicInterpolator:interpolate:double[]+double[]#[if, <, xval.length, extend, throw, new, NumberIsTooSmallException, xval.length, extend, true, MathArrays, checkOrder, xval, final, double, offset, xval, 0, final, int, len, +, xval.length, *, extend, 2, final, double, x, double, len, final, double, y, double, len, for, int, i, 0, <, i, xval.length, ++, i, final, int, index, +, i, extend, =, x, index, MathUtils, reduce, xval, i, period, offset, =, y, index, yval, i, for, int, i, 0, <, i, extend, ++, i, int, index, +, -, xval.length, extend, i, =, x, i, -, MathUtils, reduce, xval, index, period, offset, period, =, y, i, yval, index, =, index, +, -, len, extend, i, =, x, index, +, MathUtils, reduce, xval, i, period, offset, period, =, y, index, yval, i, MathArrays, sortInPlace, x, y, final, UnivariateFunction, f, interpolator, interpolate, x, y, return, new, UnivariateFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, return, f, value, MathUtils, reduce, x, period, offset]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:value:double#[return, evaluate, coefficients, x]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:degree:null#[return, -, coefficients.length, 1]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:getCoefficients:null#[return, coefficients, clone]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:evaluate:double[]+double#[MathUtils, checkNotNull, coefficients, int, n, coefficients.length, if, ==, n, 0, throw, new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, double, result, coefficients, -, n, 1, for, int, j, -, n, 2, >=, j, 0, --, j, =, result, +, *, argument, result, coefficients, j, return, result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:value:DerivativeStructure#[MathUtils, checkNotNull, coefficients, int, n, coefficients.length, if, ==, n, 0, throw, new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, DerivativeStructure, result, new, DerivativeStructure, t, getFreeParameters, t, getOrder, coefficients, -, n, 1, for, int, j, -, n, 2, >=, j, 0, --, j, =, result, result, multiply, t, add, coefficients, j, return, result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:add:PolynomialFunction#[final, int, lowLength, FastMath, min, coefficients.length, p.coefficients.length, final, int, highLength, FastMath, max, coefficients.length, p.coefficients.length, double, newCoefficients, double, highLength, for, int, i, 0, <, i, lowLength, ++, i, =, newCoefficients, i, +, coefficients, i, p.coefficients, i, System, arraycopy, <, coefficients.length, p.coefficients.length, p.coefficients, coefficients, lowLength, newCoefficients, lowLength, -, highLength, lowLength, return, new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:subtract:PolynomialFunction#[int, lowLength, FastMath, min, coefficients.length, p.coefficients.length, int, highLength, FastMath, max, coefficients.length, p.coefficients.length, double, newCoefficients, double, highLength, for, int, i, 0, <, i, lowLength, ++, i, =, newCoefficients, i, -, coefficients, i, p.coefficients, i, if, <, coefficients.length, p.coefficients.length, for, int, i, lowLength, <, i, highLength, ++, i, =, newCoefficients, i, -, p.coefficients, i, System, arraycopy, coefficients, lowLength, newCoefficients, lowLength, -, highLength, lowLength, return, new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:negate:null#[double, newCoefficients, double, coefficients.length, for, int, i, 0, <, i, coefficients.length, ++, i, =, newCoefficients, i, -, coefficients, i, return, new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:multiply:PolynomialFunction#[double, newCoefficients, double, -, +, coefficients.length, p.coefficients.length, 1, for, int, i, 0, <, i, newCoefficients.length, ++, i, =, newCoefficients, i, 0.0, for, int, j, FastMath, max, 0, -, +, i, 1, p.coefficients.length, <, j, FastMath, min, coefficients.length, +, i, 1, ++, j, +=, newCoefficients, i, *, coefficients, j, p.coefficients, -, i, j, return, new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:differentiate:double[]#[MathUtils, checkNotNull, coefficients, int, n, coefficients.length, if, ==, n, 0, throw, new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, if, ==, n, 1, return, double, 0, double, result, double, -, n, 1, for, int, i, -, n, 1, >, i, 0, --, i, =, result, -, i, 1, *, i, coefficients, i, return, result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:polynomialDerivative:null#[return, new, PolynomialFunction, differentiate, coefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:toString:null#[StringBuilder, s, new, StringBuilder, if, ==, coefficients, 0, 0.0, if, ==, coefficients.length, 1, return, "0", s, append, toString, coefficients, 0, for, int, i, 1, <, i, coefficients.length, ++, i, if, !=, coefficients, i, 0, if, >, s, length, 0, if, <, coefficients, i, 0, s, append, " - ", s, append, " + ", if, <, coefficients, i, 0, s, append, "-", double, absAi, FastMath, abs, coefficients, i, if, !=, -, absAi, 1, 0, s, append, toString, absAi, s, append, ' ', s, append, "x", if, >, i, 1, s, append, '^', s, append, Integer, toString, i, return, s, toString]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:toString:double#[final, String, c, Double, toString, coeff, if, c, endsWith, ".0", return, c, substring, 0, -, c, length, 2, return, c]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:hashCode:null#[final, int, prime, 31, int, result, 1, =, result, +, *, prime, result, Arrays, hashCode, coefficients, return, result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:equals:Object#[if, ==, this, obj, return, true, if, !, instanceof, obj, PolynomialFunction, return, false, PolynomialFunction, other, PolynomialFunction, obj, if, !, Arrays, equals, coefficients, other.coefficients, return, false, return, true]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:value:double#[return, evaluateInternal, x, y, z]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:degree:null#[return, -, x.length, 1]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:getInterpolatingPoints:null#[double, out, double, x.length, System, arraycopy, x, 0, out, 0, x.length, return, out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:getInterpolatingValues:null#[double, out, double, y.length, System, arraycopy, y, 0, out, 0, y.length, return, out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:getCoefficients:null#[if, !, coefficientsComputed, computeCoefficients, double, out, double, coefficients.length, System, arraycopy, coefficients, 0, out, 0, coefficients.length, return, out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:evaluate:double+double+double#[if, verifyInterpolationArray, x, y, false, return, evaluateInternal, x, y, z, final, double, xNew, double, x.length, final, double, yNew, double, y.length, System, arraycopy, x, 0, xNew, 0, x.length, System, arraycopy, y, 0, yNew, 0, y.length, MathArrays, sortInPlace, xNew, yNew, verifyInterpolationArray, xNew, yNew, true, return, evaluateInternal, xNew, yNew, z]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:evaluateInternal:double+double+double#[int, nearest, 0, final, int, n, x.length, final, double, c, double, n, final, double, d, double, n, double, min_dist, Double.POSITIVE_INFINITY, for, int, i, 0, <, i, n, ++, i, =, c, i, y, i, =, d, i, y, i, final, double, dist, FastMath, abs, -, z, x, i, if, <, dist, min_dist, =, nearest, i, =, min_dist, dist, double, value, y, nearest, for, int, i, 1, <, i, n, ++, i, for, int, j, 0, <, j, -, n, i, ++, j, final, double, tc, -, x, j, z, final, double, td, -, x, +, i, j, z, final, double, divider, -, x, j, x, +, i, j, final, double, w, /, -, c, +, j, 1, d, j, divider, =, c, j, *, tc, w, =, d, j, *, td, w, if, <, nearest, *, 0.5, +, -, n, i, 1, +=, value, c, nearest, --, nearest, +=, value, d, nearest, return, value]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:computeCoefficients:null#[final, int, n, +, degree, 1, =, coefficients, double, n, for, int, i, 0, <, i, n, ++, i, =, coefficients, i, 0.0, final, double, c, double, +, n, 1, =, c, 0, 1.0, for, int, i, 0, <, i, n, ++, i, for, int, j, i, >, j, 0, --, j, =, c, j, -, c, -, j, 1, *, c, j, x, i, *=, c, 0, -, x, i, =, c, +, i, 1, 1, final, double, tc, double, n, for, int, i, 0, <, i, n, ++, i, double, d, 1, for, int, j, 0, <, j, n, ++, j, if, !=, i, j, *=, d, -, x, i, x, j, final, double, t, /, y, i, d, =, tc, -, n, 1, c, n, +=, coefficients, -, n, 1, *, t, tc, -, n, 1, for, int, j, -, n, 2, >=, j, 0, --, j, =, tc, j, +, c, +, j, 1, *, tc, +, j, 1, x, i, +=, coefficients, j, *, t, tc, j, =, coefficientsComputed, true]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:verifyInterpolationArray:double+double+boolean#[if, !=, x.length, y.length, throw, new, DimensionMismatchException, x.length, y.length, if, <, x.length, 2, throw, new, NumberIsTooSmallException, LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length, true, return, MathArrays, checkOrder, x, MathArrays.OrderDirection.INCREASING, true, abort]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:value:double#[return, evaluate, a, c, z]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:value:DerivativeStructure#[verifyInputArray, a, c, final, int, n, c.length, DerivativeStructure, value, new, DerivativeStructure, t, getFreeParameters, t, getOrder, a, n, for, int, i, -, n, 1, >=, i, 0, --, i, =, value, t, subtract, c, i, multiply, value, add, a, i, return, value]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:degree:null#[return, c.length]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:getNewtonCoefficients:null#[double, out, double, a.length, System, arraycopy, a, 0, out, 0, a.length, return, out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:getCenters:null#[double, out, double, c.length, System, arraycopy, c, 0, out, 0, c.length, return, out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:getCoefficients:null#[if, !, coefficientsComputed, computeCoefficients, double, out, double, coefficients.length, System, arraycopy, coefficients, 0, out, 0, coefficients.length, return, out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:evaluate:double+double+double#[verifyInputArray, a, c, final, int, n, c.length, double, value, a, n, for, int, i, -, n, 1, >=, i, 0, --, i, =, value, +, a, i, *, -, z, c, i, value, return, value]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:computeCoefficients:null#[final, int, n, degree, =, coefficients, double, +, n, 1, for, int, i, 0, <=, i, n, ++, i, =, coefficients, i, 0.0, =, coefficients, 0, a, n, for, int, i, -, n, 1, >=, i, 0, --, i, for, int, j, -, n, i, >, j, 0, --, j, =, coefficients, j, -, coefficients, -, j, 1, *, c, i, coefficients, j, =, coefficients, 0, -, a, i, *, c, i, coefficients, 0, =, coefficientsComputed, true]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:verifyInputArray:double+double#[MathUtils, checkNotNull, a, MathUtils, checkNotNull, c, if, ||, ==, a.length, 0, ==, c.length, 0, throw, new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, if, !=, a.length, +, c.length, 1, throw, new, DimensionMismatchException, LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, a.length, c.length]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:value:double#[if, ||, <, v, knots, 0, >, v, knots, n, throw, new, OutOfRangeException, v, knots, 0, knots, n, int, i, Arrays, binarySearch, knots, v, if, <, i, 0, =, i, -, -, i, 2, if, >=, i, polynomials.length, --, i, return, polynomials, i, value, -, v, knots, i]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:polynomialSplineDerivative:null#[PolynomialFunction, derivativePolynomials, PolynomialFunction, n, for, int, i, 0, <, i, n, ++, i, =, derivativePolynomials, i, polynomials, i, polynomialDerivative, return, new, PolynomialSplineFunction, knots, derivativePolynomials]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:value:DerivativeStructure#[final, double, t0, t, getValue, if, ||, <, t0, knots, 0, >, t0, knots, n, throw, new, OutOfRangeException, t0, knots, 0, knots, n, int, i, Arrays, binarySearch, knots, t0, if, <, i, 0, =, i, -, -, i, 2, if, >=, i, polynomials.length, --, i, return, polynomials, i, value, t, subtract, knots, i]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:getN:null#[return, n]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:getPolynomials:null#[PolynomialFunction, p, PolynomialFunction, n, System, arraycopy, polynomials, 0, p, 0, n, return, p]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:getKnots:null#[double, out, double, +, n, 1, System, arraycopy, knots, 0, out, 0, +, n, 1, return, out]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:isValidPoint:double#[if, ||, <, x, knots, 0, >, x, knots, n, return, false, return, true]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createChebyshevPolynomial:int#[return, buildPolynomial, degree, CHEBYSHEV_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, private, final, BigFraction, coeffs, BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE, Override, public, BigFraction, generate, int, k, return, coeffs]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createHermitePolynomial:int#[return, buildPolynomial, degree, HERMITE_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, return, BigFraction, BigFraction.ZERO, BigFraction.TWO, new, BigFraction, *, 2, k]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createLaguerrePolynomial:int#[return, buildPolynomial, degree, LAGUERRE_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, final, int, kP1, +, k, 1, return, BigFraction, new, BigFraction, +, *, 2, k, 1, kP1, new, BigFraction, -, 1, kP1, new, BigFraction, k, kP1]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createLegendrePolynomial:int#[return, buildPolynomial, degree, LEGENDRE_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, final, int, kP1, +, k, 1, return, BigFraction, BigFraction.ZERO, new, BigFraction, +, k, kP1, kP1, new, BigFraction, k, kP1]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createJacobiPolynomial:int+int+int#[final, JacobiKey, key, new, JacobiKey, v, w, if, !, JACOBI_COEFFICIENTS, containsKey, key, final, List, BigFraction, list, new, ArrayList, BigFraction, JACOBI_COEFFICIENTS, put, key, list, list, add, BigFraction.ONE, list, add, new, BigFraction, -, v, w, 2, list, add, new, BigFraction, +, 2, v, w, 2, return, buildPolynomial, degree, JACOBI_COEFFICIENTS, get, key, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, ++, k, final, int, kvw, +, k, v, w, final, int, twoKvw, +, kvw, k, final, int, twoKvwM1, -, twoKvw, 1, final, int, twoKvwM2, -, twoKvw, 2, final, int, den, *, 2, k, kvw, twoKvwM2, return, BigFraction, new, BigFraction, *, twoKvwM1, -, *, v, v, *, w, w, den, new, BigFraction, *, twoKvwM1, twoKvw, twoKvwM2, den, new, BigFraction, *, 2, -, +, k, v, 1, -, +, k, w, 1, twoKvw, den]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:shift:double[]+double#[final, int, dp1, coefficients.length, final, double, newCoefficients, double, dp1, final, int, coeff, int, dp1, dp1, for, int, i, 0, <, i, dp1, ++, i, for, int, j, 0, <=, j, i, ++, j, =, coeff, i, j, int, CombinatoricsUtils, binomialCoefficient, i, j, for, int, i, 0, <, i, dp1, ++, i, +=, newCoefficients, 0, *, coefficients, i, FastMath, pow, shift, i, final, int, d, -, dp1, 1, for, int, i, 0, <, i, d, ++, i, for, int, j, i, <, j, d, ++, j, +=, newCoefficients, +, i, 1, *, coeff, +, j, 1, -, j, i, coefficients, +, j, 1, FastMath, pow, shift, -, j, i, return, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:buildPolynomial:int+List<BigFraction>+RecurrenceCoefficientsGenerator#[coefficients, final, int, maxDegree, -, int, FastMath, floor, FastMath, sqrt, *, 2, coefficients, size, 1, if, >, degree, maxDegree, computeUpToDegree, degree, maxDegree, generator, coefficients, final, int, start, /, *, degree, +, degree, 1, 2, final, double, a, double, +, degree, 1, for, int, i, 0, <=, i, degree, ++, i, =, a, i, coefficients, get, +, start, i, doubleValue, return, new, PolynomialFunction, a]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:computeUpToDegree:int+int+RecurrenceCoefficientsGenerator+List<BigFraction>#[int, startK, /, *, -, maxDegree, 1, maxDegree, 2, for, int, k, maxDegree, <, k, degree, ++, k, int, startKm1, startK, +=, startK, k, BigFraction, ai, generator, generate, k, BigFraction, ck, coefficients, get, startK, BigFraction, ckm1, coefficients, get, startKm1, coefficients, add, ck, multiply, ai, 0, subtract, ckm1, multiply, ai, 2, for, int, i, 1, <, i, k, ++, i, final, BigFraction, ckPrev, ck, =, ck, coefficients, get, +, startK, i, =, ckm1, coefficients, get, +, startKm1, i, coefficients, add, ck, multiply, ai, 0, add, ckPrev, multiply, ai, 1, subtract, ckm1, multiply, ai, 2, final, BigFraction, ckPrev, ck, =, ck, coefficients, get, +, startK, k, coefficients, add, ck, multiply, ai, 0, add, ckPrev, multiply, ai, 1, coefficients, add, ck, multiply, ai, 1]
org.apache.commons.math4.analysis.solvers:AbstractPolynomialSolver:setup:int+PolynomialFunction+double+double+double#[super, setup, maxEval, f, min, max, startValue, =, polynomialFunction, f]
org.apache.commons.math4.analysis.solvers:AbstractPolynomialSolver:getCoefficients:null#[return, polynomialFunction, getCoefficients]
org.apache.commons.math4.analysis.solvers:AbstractUnivariateDifferentiableSolver:computeObjectiveValueAndDerivative:double#[incrementEvaluationCount, return, function, value, new, DerivativeStructure, 1, 1, 0, point]
org.apache.commons.math4.analysis.solvers:AbstractUnivariateDifferentiableSolver:setup:int+UnivariateDifferentiableFunction+double+double+double#[super, setup, maxEval, f, min, max, startValue, =, function, f]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getMaxEvaluations:null#[return, evaluations, getMaximalCount]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getEvaluations:null#[return, evaluations, getCount]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getMin:null#[return, searchMin]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getMax:null#[return, searchMax]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getStartValue:null#[return, searchStart]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getAbsoluteAccuracy:null#[return, absoluteAccuracy]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getRelativeAccuracy:null#[return, relativeAccuracy]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getFunctionValueAccuracy:null#[return, functionValueAccuracy]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:computeObjectiveValue:double#[incrementEvaluationCount, return, function, value, point]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:setup:int+FUNC+double+double+double#[MathUtils, checkNotNull, f, =, searchMin, min, =, searchMax, max, =, searchStart, startValue, =, function, f, evaluations, setMaximalCount, maxEval, evaluations, resetCount]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:solve:int+FUNC+double+double+double#[setup, maxEval, f, min, max, startValue, return, doSolve]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:solve:int+FUNC+double+double#[return, solve, maxEval, f, min, max, +, min, *, 0.5, -, max, min]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:solve:int+FUNC+double#[return, solve, maxEval, f, Double.NaN, Double.NaN, startValue]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:isBracketing:double+double#[return, UnivariateSolverUtils, isBracketing, function, lower, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:isSequence:double+double+double#[return, UnivariateSolverUtils, isSequence, start, mid, end]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:verifyInterval:double+double#[UnivariateSolverUtils, verifyInterval, lower, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:verifySequence:double+double+double#[UnivariateSolverUtils, verifySequence, lower, initial, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:verifyBracketing:double+double#[UnivariateSolverUtils, verifyBracketing, function, lower, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:incrementEvaluationCount:null#[try, evaluations, incrementCount, catch, MaxCountExceededException, e, throw, new, TooManyEvaluationsException, e, getMax]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:solve:int+UnivariateFunction+double+double+AllowedSolution#[return, solve, maxEval, f, min, max, +, min, *, 0.5, -, max, min, allowedSolution]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:solve:int+UnivariateFunction+double+double+double+AllowedSolution#[=, this, allowed, allowedSolution, return, super, solve, maxEval, f, min, max, startValue]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:solve:int+UnivariateFunction+double+double+double#[return, solve, maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:doSolve:null#[double, x0, getMin, double, x1, getMax, double, f0, computeObjectiveValue, x0, double, f1, computeObjectiveValue, x1, if, ==, f0, 0.0, return, x0, if, ==, f1, 0.0, return, x1, verifyBracketing, x0, x1, final, double, ftol, getFunctionValueAccuracy, final, double, atol, getAbsoluteAccuracy, final, double, rtol, getRelativeAccuracy, boolean, inverted, false, while, true, final, double, x, -, x1, /, *, f1, -, x1, x0, -, f1, f0, final, double, fx, computeObjectiveValue, x, if, ==, fx, 0.0, return, x, if, <, *, f1, fx, 0, =, x0, x1, =, f0, f1, =, inverted, !, inverted, switch, method, case, ILLINOIS, *=, f0, 0.5, break, case, PEGASUS, *=, f0, /, f1, +, f1, fx, break, case, REGULA_FALSI, if, ==, x, x1, throw, new, ConvergenceException, break, default, throw, new, MathInternalError, =, x1, x, =, f1, fx, if, <=, FastMath, abs, f1, ftol, switch, allowed, case, ANY_SIDE, return, x1, case, LEFT_SIDE, if, inverted, return, x1, break, case, RIGHT_SIDE, if, !, inverted, return, x1, break, case, BELOW_SIDE, if, <=, f1, 0, return, x1, break, case, ABOVE_SIDE, if, >=, f1, 0, return, x1, break, default, throw, new, MathInternalError, if, <, FastMath, abs, -, x1, x0, FastMath, max, *, rtol, FastMath, abs, x1, atol, switch, allowed, case, ANY_SIDE, return, x1, case, LEFT_SIDE, return, inverted, x1, x0, case, RIGHT_SIDE, return, inverted, x0, x1, case, BELOW_SIDE, return, <=, f1, 0, x1, x0, case, ABOVE_SIDE, return, >=, f1, 0, x1, x0, default, throw, new, MathInternalError]
org.apache.commons.math4.analysis.solvers:BisectionSolver:doSolve:null#[double, min, getMin, double, max, getMax, verifyInterval, min, max, final, double, absoluteAccuracy, getAbsoluteAccuracy, double, m, double, fm, double, fmin, while, true, =, m, UnivariateSolverUtils, midpoint, min, max, =, fmin, computeObjectiveValue, min, =, fm, computeObjectiveValue, m, if, >, *, fm, fmin, 0, =, min, m, =, max, m, if, <=, FastMath, abs, -, max, min, absoluteAccuracy, =, m, UnivariateSolverUtils, midpoint, min, max, return, m]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:getMaximalOrder:null#[return, maximalOrder]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:doSolve:null#[final, double, x, double, +, maximalOrder, 1, final, double, y, double, +, maximalOrder, 1, =, x, 0, getMin, =, x, 1, getStartValue, =, x, 2, getMax, verifySequence, x, 0, x, 1, x, 2, =, y, 1, computeObjectiveValue, x, 1, if, Precision, equals, y, 1, 0.0, 1, return, x, 1, =, y, 0, computeObjectiveValue, x, 0, if, Precision, equals, y, 0, 0.0, 1, return, x, 0, int, nbPoints, int, signChangeIndex, if, <, *, y, 0, y, 1, 0, =, nbPoints, 2, =, signChangeIndex, 1, =, y, 2, computeObjectiveValue, x, 2, if, Precision, equals, y, 2, 0.0, 1, return, x, 2, if, <, *, y, 1, y, 2, 0, =, nbPoints, 3, =, signChangeIndex, 2, throw, new, NoBracketingException, x, 0, x, 2, y, 0, y, 2, final, double, tmpX, double, x.length, double, xA, x, -, signChangeIndex, 1, double, yA, y, -, signChangeIndex, 1, double, absYA, FastMath, abs, yA, int, agingA, 0, double, xB, x, signChangeIndex, double, yB, y, signChangeIndex, double, absYB, FastMath, abs, yB, int, agingB, 0, while, true, final, double, xTol, +, getAbsoluteAccuracy, *, getRelativeAccuracy, FastMath, max, FastMath, abs, xA, FastMath, abs, xB, if, ||, <=, -, xB, xA, xTol, <, FastMath, max, absYA, absYB, getFunctionValueAccuracy, switch, allowed, case, ANY_SIDE, return, <, absYA, absYB, xA, xB, case, LEFT_SIDE, return, xA, case, RIGHT_SIDE, return, xB, case, BELOW_SIDE, return, <=, yA, 0, xA, xB, case, ABOVE_SIDE, return, <, yA, 0, xB, xA, default, throw, new, MathInternalError, double, targetY, if, >=, agingA, MAXIMAL_AGING, final, int, p, -, agingA, MAXIMAL_AGING, final, double, weightA, -, <<, 1, p, 1, final, double, weightB, +, p, 1, =, targetY, /, -, *, weightA, yA, *, weightB, REDUCTION_FACTOR, yB, +, weightA, weightB, if, >=, agingB, MAXIMAL_AGING, final, int, p, -, agingB, MAXIMAL_AGING, final, double, weightA, +, p, 1, final, double, weightB, -, <<, 1, p, 1, =, targetY, /, -, *, weightB, yB, *, weightA, REDUCTION_FACTOR, yA, +, weightA, weightB, =, targetY, 0, double, nextX, int, start, 0, int, end, nbPoints, do, System, arraycopy, x, start, tmpX, start, -, end, start, =, nextX, guessX, targetY, tmpX, y, start, end, if, !, &&, >, nextX, xA, <, nextX, xB, if, >=, -, signChangeIndex, start, -, end, signChangeIndex, ++, start, --, end, =, nextX, Double.NaN, &&, Double, isNaN, nextX, >, -, end, start, 1, if, Double, isNaN, nextX, =, nextX, +, xA, *, 0.5, -, xB, xA, =, start, -, signChangeIndex, 1, =, end, signChangeIndex, final, double, nextY, computeObjectiveValue, nextX, if, Precision, equals, nextY, 0.0, 1, return, nextX, if, &&, >, nbPoints, 2, !=, -, end, start, nbPoints, =, nbPoints, -, end, start, System, arraycopy, x, start, x, 0, nbPoints, System, arraycopy, y, start, y, 0, nbPoints, -=, signChangeIndex, start, if, ==, nbPoints, x.length, --, nbPoints, if, >=, signChangeIndex, /, +, x.length, 1, 2, System, arraycopy, x, 1, x, 0, nbPoints, System, arraycopy, y, 1, y, 0, nbPoints, --, signChangeIndex, System, arraycopy, x, signChangeIndex, x, +, signChangeIndex, 1, -, nbPoints, signChangeIndex, =, x, signChangeIndex, nextX, System, arraycopy, y, signChangeIndex, y, +, signChangeIndex, 1, -, nbPoints, signChangeIndex, =, y, signChangeIndex, nextY, ++, nbPoints, if, <=, *, nextY, yA, 0, =, xB, nextX, =, yB, nextY, =, absYB, FastMath, abs, yB, ++, agingA, =, agingB, 0, =, xA, nextX, =, yA, nextY, =, absYA, FastMath, abs, yA, =, agingA, 0, ++, agingB, ++, signChangeIndex]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:guessX:double+double[]+double[]+int+int#[for, int, i, start, <, i, -, end, 1, ++, i, final, int, delta, -, +, i, 1, start, for, int, j, -, end, 1, >, j, i, --, j, =, x, j, /, -, x, j, x, -, j, 1, -, y, j, y, -, j, delta, double, x0, 0, for, int, j, -, end, 1, >=, j, start, --, j, =, x0, +, x, j, *, x0, -, targetY, y, j, return, x0]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:solve:int+UnivariateFunction+double+double+AllowedSolution#[=, this, allowed, allowedSolution, return, super, solve, maxEval, f, min, max]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:solve:int+UnivariateFunction+double+double+double+AllowedSolution#[=, this, allowed, allowedSolution, return, super, solve, maxEval, f, min, max, startValue]
org.apache.commons.math4.analysis.solvers:BrentSolver:doSolve:null#[double, min, getMin, double, max, getMax, final, double, initial, getStartValue, final, double, functionValueAccuracy, getFunctionValueAccuracy, verifySequence, min, initial, max, double, yInitial, computeObjectiveValue, initial, if, <=, FastMath, abs, yInitial, functionValueAccuracy, return, initial, double, yMin, computeObjectiveValue, min, if, <=, FastMath, abs, yMin, functionValueAccuracy, return, min, if, <, *, yInitial, yMin, 0, return, brent, min, initial, yMin, yInitial, double, yMax, computeObjectiveValue, max, if, <=, FastMath, abs, yMax, functionValueAccuracy, return, max, if, <, *, yInitial, yMax, 0, return, brent, initial, max, yInitial, yMax, throw, new, NoBracketingException, min, max, yMin, yMax]
org.apache.commons.math4.analysis.solvers:BrentSolver:brent:double+double+double+double#[double, a, lo, double, fa, fLo, double, b, hi, double, fb, fHi, double, c, a, double, fc, fa, double, d, -, b, a, double, e, d, final, double, t, getAbsoluteAccuracy, final, double, eps, getRelativeAccuracy, while, true, if, <, FastMath, abs, fc, FastMath, abs, fb, =, a, b, =, b, c, =, c, a, =, fa, fb, =, fb, fc, =, fc, fa, final, double, tol, +, *, 2, eps, FastMath, abs, b, t, final, double, m, *, 0.5, -, c, b, if, ||, <=, FastMath, abs, m, tol, Precision, equals, fb, 0, return, b, if, ||, <, FastMath, abs, e, tol, <=, FastMath, abs, fa, FastMath, abs, fb, =, d, m, =, e, d, double, s, /, fb, fa, double, p, double, q, if, ==, a, c, =, p, *, 2, m, s, =, q, -, 1, s, =, q, /, fa, fc, final, double, r, /, fb, fc, =, p, *, s, -, *, 2, m, q, -, q, r, *, -, b, a, -, r, 1, =, q, *, -, q, 1, -, r, 1, -, s, 1, if, >, p, 0, =, q, -, q, =, p, -, p, =, s, e, =, e, d, if, ||, >=, p, -, *, 1.5, m, q, FastMath, abs, *, tol, q, >=, p, FastMath, abs, *, 0.5, s, q, =, d, m, =, e, d, =, d, /, p, q, =, a, b, =, fa, fb, if, >, FastMath, abs, d, tol, +=, b, d, if, >, m, 0, +=, b, tol, -=, b, tol, =, fb, computeObjectiveValue, b, if, ||, &&, >, fb, 0, >, fc, 0, &&, <=, fb, 0, <=, fc, 0, =, c, a, =, fc, fa, =, d, -, b, a, =, e, d]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getMaximalOrder:null#[return, maximalOrder]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getMaxEvaluations:null#[return, evaluations, getMaximalCount]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getEvaluations:null#[return, evaluations, getCount]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getAbsoluteAccuracy:null#[return, absoluteAccuracy]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getRelativeAccuracy:null#[return, relativeAccuracy]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getFunctionValueAccuracy:null#[return, functionValueAccuracy]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:solve:int+RealFieldUnivariateFunction<T>+T+T+AllowedSolution#[return, solve, maxEval, f, min, max, min, add, max, divide, 2, allowedSolution]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:solve:int+RealFieldUnivariateFunction<T>+T+T+T+AllowedSolution#[MathUtils, checkNotNull, f, =, evaluations, evaluations, withMaximalCount, maxEval, withStart, 0, T, zero, field, getZero, T, nan, zero, add, Double.NaN, final, T, x, MathArrays, buildArray, field, +, maximalOrder, 1, final, T, y, MathArrays, buildArray, field, +, maximalOrder, 1, =, x, 0, min, =, x, 1, startValue, =, x, 2, max, evaluations, increment, =, y, 1, f, value, x, 1, if, Precision, equals, y, 1, getReal, 0.0, 1, return, x, 1, evaluations, increment, =, y, 0, f, value, x, 0, if, Precision, equals, y, 0, getReal, 0.0, 1, return, x, 0, int, nbPoints, int, signChangeIndex, if, <, y, 0, multiply, y, 1, getReal, 0, =, nbPoints, 2, =, signChangeIndex, 1, evaluations, increment, =, y, 2, f, value, x, 2, if, Precision, equals, y, 2, getReal, 0.0, 1, return, x, 2, if, <, y, 1, multiply, y, 2, getReal, 0, =, nbPoints, 3, =, signChangeIndex, 2, throw, new, NoBracketingException, x, 0, getReal, x, 2, getReal, y, 0, getReal, y, 2, getReal, final, T, tmpX, MathArrays, buildArray, field, x.length, T, xA, x, -, signChangeIndex, 1, T, yA, y, -, signChangeIndex, 1, T, absXA, xA, abs, T, absYA, yA, abs, int, agingA, 0, T, xB, x, signChangeIndex, T, yB, y, signChangeIndex, T, absXB, xB, abs, T, absYB, yB, abs, int, agingB, 0, while, true, T, maxX, <, absXA, subtract, absXB, getReal, 0, absXB, absXA, T, maxY, <, absYA, subtract, absYB, getReal, 0, absYB, absYA, final, T, xTol, absoluteAccuracy, add, relativeAccuracy, multiply, maxX, if, ||, <=, xB, subtract, xA, subtract, xTol, getReal, 0, <, maxY, subtract, functionValueAccuracy, getReal, 0, switch, allowedSolution, case, ANY_SIDE, return, <, absYA, subtract, absYB, getReal, 0, xA, xB, case, LEFT_SIDE, return, xA, case, RIGHT_SIDE, return, xB, case, BELOW_SIDE, return, <=, yA, getReal, 0, xA, xB, case, ABOVE_SIDE, return, <, yA, getReal, 0, xB, xA, default, throw, new, MathInternalError, null, T, targetY, if, >=, agingA, MAXIMAL_AGING, =, targetY, yB, divide, 16, negate, if, >=, agingB, MAXIMAL_AGING, =, targetY, yA, divide, 16, negate, =, targetY, zero, T, nextX, int, start, 0, int, end, nbPoints, do, System, arraycopy, x, start, tmpX, start, -, end, start, =, nextX, guessX, targetY, tmpX, y, start, end, if, !, &&, >, nextX, subtract, xA, getReal, 0, <, nextX, subtract, xB, getReal, 0, if, >=, -, signChangeIndex, start, -, end, signChangeIndex, ++, start, --, end, =, nextX, nan, &&, Double, isNaN, nextX, getReal, >, -, end, start, 1, if, Double, isNaN, nextX, getReal, =, nextX, xA, add, xB, subtract, xA, divide, 2, =, start, -, signChangeIndex, 1, =, end, signChangeIndex, evaluations, increment, final, T, nextY, f, value, nextX, if, Precision, equals, nextY, getReal, 0.0, 1, return, nextX, if, &&, >, nbPoints, 2, !=, -, end, start, nbPoints, =, nbPoints, -, end, start, System, arraycopy, x, start, x, 0, nbPoints, System, arraycopy, y, start, y, 0, nbPoints, -=, signChangeIndex, start, if, ==, nbPoints, x.length, --, nbPoints, if, >=, signChangeIndex, /, +, x.length, 1, 2, System, arraycopy, x, 1, x, 0, nbPoints, System, arraycopy, y, 1, y, 0, nbPoints, --, signChangeIndex, System, arraycopy, x, signChangeIndex, x, +, signChangeIndex, 1, -, nbPoints, signChangeIndex, =, x, signChangeIndex, nextX, System, arraycopy, y, signChangeIndex, y, +, signChangeIndex, 1, -, nbPoints, signChangeIndex, =, y, signChangeIndex, nextY, ++, nbPoints, if, <=, nextY, multiply, yA, getReal, 0, =, xB, nextX, =, yB, nextY, =, absYB, yB, abs, ++, agingA, =, agingB, 0, =, xA, nextX, =, yA, nextY, =, absYA, yA, abs, =, agingA, 0, ++, agingB, ++, signChangeIndex]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:guessX:T+T[]+T[]+int+int#[for, int, i, start, <, i, -, end, 1, ++, i, final, int, delta, -, +, i, 1, start, for, int, j, -, end, 1, >, j, i, --, j, =, x, j, x, j, subtract, x, -, j, 1, divide, y, j, subtract, y, -, j, delta, T, x0, field, getZero, for, int, j, -, end, 1, >=, j, start, --, j, =, x0, x, j, add, x0, multiply, targetY, subtract, y, j, return, x0]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:doSolve:null#[final, double, min, getMin, final, double, max, getMax, final, double, initial, getStartValue, final, double, functionValueAccuracy, getFunctionValueAccuracy, verifySequence, min, initial, max, final, double, yInitial, computeObjectiveValue, initial, if, <=, FastMath, abs, yInitial, functionValueAccuracy, return, initial, final, double, yMin, computeObjectiveValue, min, if, <=, FastMath, abs, yMin, functionValueAccuracy, return, min, if, <, *, yInitial, yMin, 0, return, laguerre, min, initial, final, double, yMax, computeObjectiveValue, max, if, <=, FastMath, abs, yMax, functionValueAccuracy, return, max, if, <, *, yInitial, yMax, 0, return, laguerre, initial, max, throw, new, NoBracketingException, min, max, yMin, yMax]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:laguerre:double+double#[final, Complex, c, ComplexUtils, convertToComplex, getCoefficients, final, Complex, initial, new, Complex, *, 0.5, +, lo, hi, 0, final, Complex, z, complexSolver, solve, c, initial, if, complexSolver, isRoot, lo, hi, z, return, z, getReal, double, r, Double.NaN, Complex, root, complexSolver, solveAll, c, initial, for, int, i, 0, <, i, root.length, ++, i, if, complexSolver, isRoot, lo, hi, root, i, =, r, root, i, getReal, break, return, r]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:solveAllComplex:double[]+double#[setup, Integer.MAX_VALUE, new, PolynomialFunction, coefficients, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, initial, return, complexSolver, solveAll, ComplexUtils, convertToComplex, coefficients, new, Complex, initial, 0d]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:solveComplex:double[]+double#[setup, Integer.MAX_VALUE, new, PolynomialFunction, coefficients, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, initial, return, complexSolver, solve, ComplexUtils, convertToComplex, coefficients, new, Complex, initial, 0d]
org.apache.commons.math4.analysis.solvers:MullerSolver:doSolve:null#[final, double, min, getMin, final, double, max, getMax, final, double, initial, getStartValue, final, double, functionValueAccuracy, getFunctionValueAccuracy, verifySequence, min, initial, max, final, double, fMin, computeObjectiveValue, min, if, <, FastMath, abs, fMin, functionValueAccuracy, return, min, final, double, fMax, computeObjectiveValue, max, if, <, FastMath, abs, fMax, functionValueAccuracy, return, max, final, double, fInitial, computeObjectiveValue, initial, if, <, FastMath, abs, fInitial, functionValueAccuracy, return, initial, verifyBracketing, min, max, if, isBracketing, min, initial, return, solve, min, initial, fMin, fInitial, return, solve, initial, max, fInitial, fMax]
org.apache.commons.math4.analysis.solvers:MullerSolver:solve:double+double+double+double#[final, double, relativeAccuracy, getRelativeAccuracy, final, double, absoluteAccuracy, getAbsoluteAccuracy, final, double, functionValueAccuracy, getFunctionValueAccuracy, double, x0, min, double, y0, fMin, double, x2, max, double, y2, fMax, double, x1, *, 0.5, +, x0, x2, double, y1, computeObjectiveValue, x1, double, oldx, Double.POSITIVE_INFINITY, while, true, final, double, d01, /, -, y1, y0, -, x1, x0, final, double, d12, /, -, y2, y1, -, x2, x1, final, double, d012, /, -, d12, d01, -, x2, x0, final, double, c1, +, d01, *, -, x1, x0, d012, final, double, delta, -, *, c1, c1, *, 4, y1, d012, final, double, xplus, +, x1, /, *, -, 2.0, y1, +, c1, FastMath, sqrt, delta, final, double, xminus, +, x1, /, *, -, 2.0, y1, -, c1, FastMath, sqrt, delta, final, double, x, isSequence, x0, xplus, x2, xplus, xminus, final, double, y, computeObjectiveValue, x, final, double, tolerance, FastMath, max, *, relativeAccuracy, FastMath, abs, x, absoluteAccuracy, if, ||, <=, FastMath, abs, -, x, oldx, tolerance, <=, FastMath, abs, y, functionValueAccuracy, return, x, boolean, bisect, ||, &&, <, x, x1, >, -, x1, x0, *, 0.95, -, x2, x0, &&, >, x, x1, >, -, x2, x1, *, 0.95, -, x2, x0, ==, x, x1, if, !, bisect, =, x0, <, x, x1, x0, x1, =, y0, <, x, x1, y0, y1, =, x2, >, x, x1, x2, x1, =, y2, >, x, x1, y2, y1, =, x1, x, =, y1, y, =, oldx, x, double, xm, *, 0.5, +, x0, x2, double, ym, computeObjectiveValue, xm, if, ==, +, FastMath, signum, y0, FastMath, signum, ym, 0.0, =, x2, xm, =, y2, ym, =, x0, xm, =, y0, ym, =, x1, *, 0.5, +, x0, x2, =, y1, computeObjectiveValue, x1, =, oldx, Double.POSITIVE_INFINITY]
org.apache.commons.math4.analysis.solvers:MullerSolver2:doSolve:null#[final, double, min, getMin, final, double, max, getMax, verifyInterval, min, max, final, double, relativeAccuracy, getRelativeAccuracy, final, double, absoluteAccuracy, getAbsoluteAccuracy, final, double, functionValueAccuracy, getFunctionValueAccuracy, double, x0, min, double, y0, computeObjectiveValue, x0, if, <, FastMath, abs, y0, functionValueAccuracy, return, x0, double, x1, max, double, y1, computeObjectiveValue, x1, if, <, FastMath, abs, y1, functionValueAccuracy, return, x1, if, >, *, y0, y1, 0, throw, new, NoBracketingException, x0, x1, y0, y1, double, x2, *, 0.5, +, x0, x1, double, y2, computeObjectiveValue, x2, double, oldx, Double.POSITIVE_INFINITY, while, true, final, double, q, /, -, x2, x1, -, x1, x0, final, double, a, *, q, +, -, y2, *, +, 1, q, y1, *, q, y0, final, double, b, +, -, *, +, *, 2, q, 1, y2, *, +, 1, q, +, 1, q, y1, *, q, q, y0, final, double, c, *, +, 1, q, y2, final, double, delta, -, *, b, b, *, 4, a, c, double, x, final, double, denominator, if, >=, delta, 0.0, double, dplus, +, b, FastMath, sqrt, delta, double, dminus, -, b, FastMath, sqrt, delta, =, denominator, >, FastMath, abs, dplus, FastMath, abs, dminus, dplus, dminus, =, denominator, FastMath, sqrt, -, *, b, b, delta, if, !=, denominator, 0, =, x, -, x2, /, *, 2.0, c, -, x2, x1, denominator, while, ||, ==, x, x1, ==, x, x2, +=, x, absoluteAccuracy, =, x, +, min, *, FastMath, random, -, max, min, =, oldx, Double.POSITIVE_INFINITY, final, double, y, computeObjectiveValue, x, final, double, tolerance, FastMath, max, *, relativeAccuracy, FastMath, abs, x, absoluteAccuracy, if, ||, <=, FastMath, abs, -, x, oldx, tolerance, <=, FastMath, abs, y, functionValueAccuracy, return, x, =, x0, x1, =, y0, y1, =, x1, x2, =, y1, y2, =, x2, x, =, y2, y, =, oldx, x]
org.apache.commons.math4.analysis.solvers:NewtonRaphsonSolver:solve:int+UnivariateDifferentiableFunction+double+double#[return, super, solve, maxEval, f, UnivariateSolverUtils, midpoint, min, max]
org.apache.commons.math4.analysis.solvers:NewtonRaphsonSolver:doSolve:null#[final, double, startValue, getStartValue, final, double, absoluteAccuracy, getAbsoluteAccuracy, double, x0, startValue, double, x1, while, true, final, DerivativeStructure, y0, computeObjectiveValueAndDerivative, x0, =, x1, -, x0, /, y0, getValue, y0, getPartialDerivative, 1, if, <=, FastMath, abs, -, x1, x0, absoluteAccuracy, return, x1, =, x0, x1]
org.apache.commons.math4.analysis.solvers:RiddersSolver:doSolve:null#[double, min, getMin, double, max, getMax, double, x1, min, double, y1, computeObjectiveValue, x1, double, x2, max, double, y2, computeObjectiveValue, x2, if, ==, y1, 0, return, min, if, ==, y2, 0, return, max, verifyBracketing, min, max, final, double, absoluteAccuracy, getAbsoluteAccuracy, final, double, functionValueAccuracy, getFunctionValueAccuracy, final, double, relativeAccuracy, getRelativeAccuracy, double, oldx, Double.POSITIVE_INFINITY, while, true, final, double, x3, *, 0.5, +, x1, x2, final, double, y3, computeObjectiveValue, x3, if, <=, FastMath, abs, y3, functionValueAccuracy, return, x3, final, double, delta, -, 1, /, *, y1, y2, *, y3, y3, final, double, correction, /, *, *, FastMath, signum, y2, FastMath, signum, y3, -, x3, x1, FastMath, sqrt, delta, final, double, x, -, x3, correction, final, double, y, computeObjectiveValue, x, final, double, tolerance, FastMath, max, *, relativeAccuracy, FastMath, abs, x, absoluteAccuracy, if, <=, FastMath, abs, -, x, oldx, tolerance, return, x, if, <=, FastMath, abs, y, functionValueAccuracy, return, x, if, >, correction, 0.0, if, ==, +, FastMath, signum, y1, FastMath, signum, y, 0.0, =, x2, x, =, y2, y, =, x1, x, =, x2, x3, =, y1, y, =, y2, y3, if, ==, +, FastMath, signum, y2, FastMath, signum, y, 0.0, =, x1, x, =, y1, y, =, x1, x3, =, x2, x, =, y1, y3, =, y2, y, =, oldx, x]
org.apache.commons.math4.analysis.solvers:SecantSolver:doSolve:null#[double, x0, getMin, double, x1, getMax, double, f0, computeObjectiveValue, x0, double, f1, computeObjectiveValue, x1, if, ==, f0, 0.0, return, x0, if, ==, f1, 0.0, return, x1, verifyBracketing, x0, x1, final, double, ftol, getFunctionValueAccuracy, final, double, atol, getAbsoluteAccuracy, final, double, rtol, getRelativeAccuracy, while, true, final, double, x, -, x1, /, *, f1, -, x1, x0, -, f1, f0, final, double, fx, computeObjectiveValue, x, if, ==, fx, 0.0, return, x, =, x0, x1, =, f0, f1, =, x1, x, =, f1, fx, if, <=, FastMath, abs, f1, ftol, return, x1, if, <, FastMath, abs, -, x1, x0, FastMath, max, *, rtol, FastMath, abs, x1, atol, return, x1]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:solve:UnivariateFunction+double+double#[if, ==, function, null, throw, new, NullArgumentException, LocalizedFormats.FUNCTION, final, UnivariateSolver, solver, new, BrentSolver, return, solver, solve, Integer.MAX_VALUE, function, x0, x1]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:solve:UnivariateFunction+double+double+double#[if, ==, function, null, throw, new, NullArgumentException, LocalizedFormats.FUNCTION, final, UnivariateSolver, solver, new, BrentSolver, absoluteAccuracy, return, solver, solve, Integer.MAX_VALUE, function, x0, x1]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:forceSide:int+UnivariateFunction+BracketedUnivariateSolver<UnivariateFunction>+double+double+double+AllowedSolution#[if, ==, allowedSolution, AllowedSolution.ANY_SIDE, return, baseRoot, final, double, step, FastMath, max, bracketing, getAbsoluteAccuracy, FastMath, abs, *, baseRoot, bracketing, getRelativeAccuracy, double, xLo, FastMath, max, min, -, baseRoot, step, double, fLo, f, value, xLo, double, xHi, FastMath, min, max, +, baseRoot, step, double, fHi, f, value, xHi, int, remainingEval, -, maxEval, 2, while, >, remainingEval, 0, if, ||, &&, >=, fLo, 0, <=, fHi, 0, &&, <=, fLo, 0, >=, fHi, 0, return, bracketing, solve, remainingEval, f, xLo, xHi, baseRoot, allowedSolution, boolean, changeLo, false, boolean, changeHi, false, if, <, fLo, fHi, if, >=, fLo, 0, =, changeLo, true, =, changeHi, true, if, >, fLo, fHi, if, <=, fLo, 0, =, changeLo, true, =, changeHi, true, =, changeLo, true, =, changeHi, true, if, changeLo, =, xLo, FastMath, max, min, -, xLo, step, =, fLo, f, value, xLo, --, remainingEval, if, changeHi, =, xHi, FastMath, min, max, +, xHi, step, =, fHi, f, value, xHi, --, remainingEval, throw, new, NoBracketingException, LocalizedFormats.FAILED_BRACKETING, xLo, xHi, fLo, fHi, -, maxEval, remainingEval, maxEval, baseRoot, min, max]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:bracket:UnivariateFunction+double+double+double#[return, bracket, function, initial, lowerBound, upperBound, 1.0, 1.0, Integer.MAX_VALUE]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:bracket:UnivariateFunction+double+double+double+int#[return, bracket, function, initial, lowerBound, upperBound, 1.0, 1.0, maximumIterations]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:bracket:UnivariateFunction+double+double+double+double+double+int#[if, ==, function, null, throw, new, NullArgumentException, LocalizedFormats.FUNCTION, if, <=, q, 0, throw, new, NotStrictlyPositiveException, q, if, <=, maximumIterations, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations, verifySequence, lowerBound, initial, upperBound, double, a, initial, double, b, initial, double, fa, Double.NaN, double, fb, Double.NaN, double, delta, 0, for, int, numIterations, 0, &&, <, numIterations, maximumIterations, ||, >, a, lowerBound, <, b, upperBound, ++, numIterations, final, double, previousA, a, final, double, previousFa, fa, final, double, previousB, b, final, double, previousFb, fb, =, delta, +, *, r, delta, q, =, a, FastMath, max, -, initial, delta, lowerBound, =, b, FastMath, min, +, initial, delta, upperBound, =, fa, function, value, a, =, fb, function, value, b, if, ==, numIterations, 0, if, <=, *, fa, fb, 0, return, double, a, b, if, <=, *, fa, previousFa, 0, return, double, a, previousA, if, <=, *, fb, previousFb, 0, return, double, previousB, b, throw, new, NoBracketingException, a, b, fa, fb]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:midpoint:double+double#[return, *, +, a, b, 0.5]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:isBracketing:UnivariateFunction+double+double#[if, ==, function, null, throw, new, NullArgumentException, LocalizedFormats.FUNCTION, final, double, fLo, function, value, lower, final, double, fHi, function, value, upper, return, ||, &&, >=, fLo, 0, <=, fHi, 0, &&, <=, fLo, 0, >=, fHi, 0]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:isSequence:double+double+double#[return, &&, <, start, mid, <, mid, end]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:verifyInterval:double+double#[if, >=, lower, upper, throw, new, NumberIsTooLargeException, LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper, false]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:verifySequence:double+double+double#[verifyInterval, lower, initial, verifyInterval, initial, upper]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:verifyBracketing:UnivariateFunction+double+double#[if, ==, function, null, throw, new, NullArgumentException, LocalizedFormats.FUNCTION, verifyInterval, lower, upper, if, !, isBracketing, function, lower, upper, throw, new, NoBracketingException, lower, upper, function, value, lower, function, value, upper]
org.apache.commons.math4.complex:Complex:abs:null#[if, isNaN, return, Double.NaN, if, isInfinite, return, Double.POSITIVE_INFINITY, if, <, FastMath, abs, real, FastMath, abs, imaginary, if, ==, imaginary, 0.0, return, FastMath, abs, real, double, q, /, real, imaginary, return, *, FastMath, abs, imaginary, FastMath, sqrt, +, 1, *, q, q, if, ==, real, 0.0, return, FastMath, abs, imaginary, double, q, /, imaginary, real, return, *, FastMath, abs, real, FastMath, sqrt, +, 1, *, q, q]
org.apache.commons.math4.complex:Complex:add:Complex#[MathUtils, checkNotNull, addend, if, ||, isNaN, addend.isNaN, return, NaN, return, createComplex, +, real, addend, getReal, +, imaginary, addend, getImaginary]
org.apache.commons.math4.complex:Complex:add:double#[if, ||, isNaN, Double, isNaN, addend, return, NaN, return, createComplex, +, real, addend, imaginary]
org.apache.commons.math4.complex:Complex:conjugate:null#[if, isNaN, return, NaN, return, createComplex, real, -, imaginary]
org.apache.commons.math4.complex:Complex:divide:Complex#[MathUtils, checkNotNull, divisor, if, ||, isNaN, divisor.isNaN, return, NaN, final, double, c, divisor, getReal, final, double, d, divisor, getImaginary, if, &&, ==, c, 0.0, ==, d, 0.0, return, NaN, if, &&, divisor, isInfinite, !, isInfinite, return, ZERO, if, <, FastMath, abs, c, FastMath, abs, d, double, q, /, c, d, double, denominator, +, *, c, q, d, return, createComplex, /, +, *, real, q, imaginary, denominator, /, -, *, imaginary, q, real, denominator, double, q, /, d, c, double, denominator, +, *, d, q, c, return, createComplex, /, +, *, imaginary, q, real, denominator, /, -, imaginary, *, real, q, denominator]
org.apache.commons.math4.complex:Complex:divide:double#[if, ||, isNaN, Double, isNaN, divisor, return, NaN, if, ==, divisor, 0d, return, NaN, if, Double, isInfinite, divisor, return, !, isInfinite, ZERO, NaN, return, createComplex, /, real, divisor, /, imaginary, divisor]
org.apache.commons.math4.complex:Complex:reciprocal:null#[if, isNaN, return, NaN, if, &&, ==, real, 0.0, ==, imaginary, 0.0, return, INF, if, isInfinite, return, ZERO, if, <, FastMath, abs, real, FastMath, abs, imaginary, double, q, /, real, imaginary, double, scale, /, 1., +, *, real, q, imaginary, return, createComplex, *, scale, q, -, scale, double, q, /, imaginary, real, double, scale, /, 1., +, *, imaginary, q, real, return, createComplex, scale, *, -, scale, q]
org.apache.commons.math4.complex:Complex:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, Complex, Complex, c, Complex, other, if, c.isNaN, return, isNaN, return, &&, MathUtils, equals, real, c.real, MathUtils, equals, imaginary, c.imaginary, return, false]
org.apache.commons.math4.complex:Complex:equals:Complex+Complex+int#[return, &&, Precision, equals, x.real, y.real, maxUlps, Precision, equals, x.imaginary, y.imaginary, maxUlps]
org.apache.commons.math4.complex:Complex:equals:Complex+Complex#[return, equals, x, y, 1]
org.apache.commons.math4.complex:Complex:equals:Complex+Complex+double#[return, &&, Precision, equals, x.real, y.real, eps, Precision, equals, x.imaginary, y.imaginary, eps]
org.apache.commons.math4.complex:Complex:equalsWithRelativeTolerance:Complex+Complex+double#[return, &&, Precision, equalsWithRelativeTolerance, x.real, y.real, eps, Precision, equalsWithRelativeTolerance, x.imaginary, y.imaginary, eps]
org.apache.commons.math4.complex:Complex:hashCode:null#[if, isNaN, return, 7, return, *, 37, +, *, 17, MathUtils, hash, imaginary, MathUtils, hash, real]
org.apache.commons.math4.complex:Complex:getImaginary:null#[return, imaginary]
org.apache.commons.math4.complex:Complex:getReal:null#[return, real]
org.apache.commons.math4.complex:Complex:isNaN:null#[return, isNaN]
org.apache.commons.math4.complex:Complex:isInfinite:null#[return, isInfinite]
org.apache.commons.math4.complex:Complex:multiply:Complex#[MathUtils, checkNotNull, factor, if, ||, isNaN, factor.isNaN, return, NaN, if, ||, Double, isInfinite, real, Double, isInfinite, imaginary, Double, isInfinite, factor.real, Double, isInfinite, factor.imaginary, return, INF, return, createComplex, -, *, real, factor.real, *, imaginary, factor.imaginary, +, *, real, factor.imaginary, *, imaginary, factor.real]
org.apache.commons.math4.complex:Complex:multiply:int#[if, isNaN, return, NaN, if, ||, Double, isInfinite, real, Double, isInfinite, imaginary, return, INF, return, createComplex, *, real, factor, *, imaginary, factor]
org.apache.commons.math4.complex:Complex:multiply:double#[if, ||, isNaN, Double, isNaN, factor, return, NaN, if, ||, Double, isInfinite, real, Double, isInfinite, imaginary, Double, isInfinite, factor, return, INF, return, createComplex, *, real, factor, *, imaginary, factor]
org.apache.commons.math4.complex:Complex:negate:null#[if, isNaN, return, NaN, return, createComplex, -, real, -, imaginary]
org.apache.commons.math4.complex:Complex:subtract:Complex#[MathUtils, checkNotNull, subtrahend, if, ||, isNaN, subtrahend.isNaN, return, NaN, return, createComplex, -, real, subtrahend, getReal, -, imaginary, subtrahend, getImaginary]
org.apache.commons.math4.complex:Complex:subtract:double#[if, ||, isNaN, Double, isNaN, subtrahend, return, NaN, return, createComplex, -, real, subtrahend, imaginary]
org.apache.commons.math4.complex:Complex:acos:null#[if, isNaN, return, NaN, return, this, add, this, sqrt1z, multiply, I, log, multiply, I, negate]
org.apache.commons.math4.complex:Complex:asin:null#[if, isNaN, return, NaN, return, sqrt1z, add, this, multiply, I, log, multiply, I, negate]
org.apache.commons.math4.complex:Complex:atan:null#[if, isNaN, return, NaN, return, this, add, I, divide, I, subtract, this, log, multiply, I, divide, createComplex, 2.0, 0.0]
org.apache.commons.math4.complex:Complex:cos:null#[if, isNaN, return, NaN, return, createComplex, *, FastMath, cos, real, FastMath, cosh, imaginary, *, -, FastMath, sin, real, FastMath, sinh, imaginary]
org.apache.commons.math4.complex:Complex:cosh:null#[if, isNaN, return, NaN, return, createComplex, *, FastMath, cosh, real, FastMath, cos, imaginary, *, FastMath, sinh, real, FastMath, sin, imaginary]
org.apache.commons.math4.complex:Complex:exp:null#[if, isNaN, return, NaN, double, expReal, FastMath, exp, real, return, createComplex, *, expReal, FastMath, cos, imaginary, *, expReal, FastMath, sin, imaginary]
org.apache.commons.math4.complex:Complex:log:null#[if, isNaN, return, NaN, return, createComplex, FastMath, log, abs, FastMath, atan2, imaginary, real]
org.apache.commons.math4.complex:Complex:pow:Complex#[MathUtils, checkNotNull, x, return, this, log, multiply, x, exp]
org.apache.commons.math4.complex:Complex:pow:double#[return, this, log, multiply, x, exp]
org.apache.commons.math4.complex:Complex:sin:null#[if, isNaN, return, NaN, return, createComplex, *, FastMath, sin, real, FastMath, cosh, imaginary, *, FastMath, cos, real, FastMath, sinh, imaginary]
org.apache.commons.math4.complex:Complex:sinh:null#[if, isNaN, return, NaN, return, createComplex, *, FastMath, sinh, real, FastMath, cos, imaginary, *, FastMath, cosh, real, FastMath, sin, imaginary]
org.apache.commons.math4.complex:Complex:sqrt:null#[if, isNaN, return, NaN, if, &&, ==, real, 0.0, ==, imaginary, 0.0, return, createComplex, 0.0, 0.0, double, t, FastMath, sqrt, /, +, FastMath, abs, real, abs, 2.0, if, >=, real, 0.0, return, createComplex, t, /, imaginary, *, 2.0, t, return, createComplex, /, FastMath, abs, imaginary, *, 2.0, t, *, FastMath, copySign, 1d, imaginary, t]
org.apache.commons.math4.complex:Complex:sqrt1z:null#[return, createComplex, 1.0, 0.0, subtract, this, multiply, this, sqrt]
org.apache.commons.math4.complex:Complex:tan:null#[if, ||, isNaN, Double, isInfinite, real, return, NaN, if, >, imaginary, 20.0, return, createComplex, 0.0, 1.0, if, <, imaginary, -, 20.0, return, createComplex, 0.0, -, 1.0, double, real2, *, 2.0, real, double, imaginary2, *, 2.0, imaginary, double, d, +, FastMath, cos, real2, FastMath, cosh, imaginary2, return, createComplex, /, FastMath, sin, real2, d, /, FastMath, sinh, imaginary2, d]
org.apache.commons.math4.complex:Complex:tanh:null#[if, ||, isNaN, Double, isInfinite, imaginary, return, NaN, if, >, real, 20.0, return, createComplex, 1.0, 0.0, if, <, real, -, 20.0, return, createComplex, -, 1.0, 0.0, double, real2, *, 2.0, real, double, imaginary2, *, 2.0, imaginary, double, d, +, FastMath, cosh, real2, FastMath, cos, imaginary2, return, createComplex, /, FastMath, sinh, real2, d, /, FastMath, sin, imaginary2, d]
org.apache.commons.math4.complex:Complex:getArgument:null#[return, FastMath, atan2, getImaginary, getReal]
org.apache.commons.math4.complex:Complex:nthRoot:int#[if, <=, n, 0, throw, new, NotPositiveException, LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n, final, List, Complex, result, new, ArrayList, Complex, if, isNaN, result, add, NaN, return, result, if, isInfinite, result, add, INF, return, result, final, double, nthRootOfAbs, FastMath, pow, abs, /, 1.0, n, final, double, nthPhi, /, getArgument, n, final, double, slice, /, *, 2, FastMath.PI, n, double, innerPart, nthPhi, for, int, k, 0, <, k, n, ++, k, final, double, realPart, *, nthRootOfAbs, FastMath, cos, innerPart, final, double, imaginaryPart, *, nthRootOfAbs, FastMath, sin, innerPart, result, add, createComplex, realPart, imaginaryPart, +=, innerPart, slice, return, result]
org.apache.commons.math4.complex:Complex:createComplex:double+double#[return, new, Complex, realPart, imaginaryPart]
org.apache.commons.math4.complex:Complex:valueOf:double+double#[if, ||, Double, isNaN, realPart, Double, isNaN, imaginaryPart, return, NaN, return, new, Complex, realPart, imaginaryPart]
org.apache.commons.math4.complex:Complex:valueOf:double#[if, Double, isNaN, realPart, return, NaN, return, new, Complex, realPart]
org.apache.commons.math4.complex:Complex:readResolve:null#[return, createComplex, real, imaginary]
org.apache.commons.math4.complex:Complex:getField:null#[return, ComplexField, getInstance]
org.apache.commons.math4.complex:Complex:toString:null#[return, +, "(", real, ", ", imaginary, ")"]
org.apache.commons.math4.complex:ComplexField:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.complex:ComplexField:getOne:null#[return, Complex.ONE]
org.apache.commons.math4.complex:ComplexField:getZero:null#[return, Complex.ZERO]
org.apache.commons.math4.complex:ComplexField:getRuntimeClass:null#[return, Complex]
org.apache.commons.math4.complex:ComplexField:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.complex:ComplexFormat:getAvailableLocales:null#[return, NumberFormat, getAvailableLocales]
org.apache.commons.math4.complex:ComplexFormat:format:Complex#[return, format, c, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.complex:ComplexFormat:format:Double#[return, format, new, Complex, c, 0, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.complex:ComplexFormat:format:Complex+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, double, re, complex, getReal, CompositeFormat, formatDouble, re, getRealFormat, toAppendTo, pos, double, im, complex, getImaginary, StringBuffer, imAppendTo, if, <, im, 0.0, toAppendTo, append, " - ", =, imAppendTo, formatImaginary, -, im, new, StringBuffer, pos, toAppendTo, append, imAppendTo, toAppendTo, append, getImaginaryCharacter, if, ||, >, im, 0.0, Double, isNaN, im, toAppendTo, append, " + ", =, imAppendTo, formatImaginary, im, new, StringBuffer, pos, toAppendTo, append, imAppendTo, toAppendTo, append, getImaginaryCharacter, return, toAppendTo]
org.apache.commons.math4.complex:ComplexFormat:formatImaginary:double+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, CompositeFormat, formatDouble, absIm, getImaginaryFormat, toAppendTo, pos, if, toAppendTo, toString, equals, "1", toAppendTo, setLength, 0, return, toAppendTo]
org.apache.commons.math4.complex:ComplexFormat:format:Object+StringBuffer+FieldPosition#[StringBuffer, ret, null, if, instanceof, obj, Complex, =, ret, format, Complex, obj, toAppendTo, pos, if, instanceof, obj, Number, =, ret, format, new, Complex, Number, obj, doubleValue, 0.0, toAppendTo, pos, throw, new, MathIllegalArgumentException, LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX, obj, getClass, getName, return, ret]
org.apache.commons.math4.complex:ComplexFormat:getImaginaryCharacter:null#[return, imaginaryCharacter]
org.apache.commons.math4.complex:ComplexFormat:getImaginaryFormat:null#[return, imaginaryFormat]
org.apache.commons.math4.complex:ComplexFormat:getInstance:null#[return, getInstance, Locale, getDefault]
org.apache.commons.math4.complex:ComplexFormat:getInstance:Locale#[NumberFormat, f, CompositeFormat, getDefaultNumberFormat, locale, return, new, ComplexFormat, f]
org.apache.commons.math4.complex:ComplexFormat:getInstance:String+Locale#[NumberFormat, f, CompositeFormat, getDefaultNumberFormat, locale, return, new, ComplexFormat, imaginaryCharacter, f]
org.apache.commons.math4.complex:ComplexFormat:getRealFormat:null#[return, realFormat]
org.apache.commons.math4.complex:ComplexFormat:parse:String#[ParsePosition, parsePosition, new, ParsePosition, 0, Complex, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, Complex, return, result]
org.apache.commons.math4.complex:ComplexFormat:parse:String+ParsePosition#[int, initialIndex, pos, getIndex, CompositeFormat, parseAndIgnoreWhitespace, source, pos, Number, re, CompositeFormat, parseNumber, source, getRealFormat, pos, if, ==, re, null, pos, setIndex, initialIndex, return, null, int, startIndex, pos, getIndex, char, c, CompositeFormat, parseNextCharacter, source, pos, int, sign, 0, switch, c, case, 0, return, new, Complex, re, doubleValue, 0.0, case, '-', =, sign, -, 1, break, case, '+', =, sign, 1, break, default, pos, setIndex, initialIndex, pos, setErrorIndex, startIndex, return, null, CompositeFormat, parseAndIgnoreWhitespace, source, pos, Number, im, CompositeFormat, parseNumber, source, getRealFormat, pos, if, ==, im, null, pos, setIndex, initialIndex, return, null, if, !, CompositeFormat, parseFixedstring, source, getImaginaryCharacter, pos, return, null, return, new, Complex, re, doubleValue, *, im, doubleValue, sign]
org.apache.commons.math4.complex:ComplexUtils:polar2Complex:double+double#[if, <, r, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.NEGATIVE_COMPLEX_MODULE, r, return, new, Complex, *, r, FastMath, cos, theta, *, r, FastMath, sin, theta]
org.apache.commons.math4.complex:ComplexUtils:convertToComplex:double[]#[final, Complex, c, Complex, real.length, for, int, i, 0, <, i, real.length, ++, i, =, c, i, new, Complex, real, i, 0, return, c]
org.apache.commons.math4.complex:Quaternion:getConjugate:null#[return, new, Quaternion, q0, -, q1, -, q2, -, q3]
org.apache.commons.math4.complex:Quaternion:multiply:Quaternion+Quaternion#[final, double, q1a, q1, getQ0, final, double, q1b, q1, getQ1, final, double, q1c, q1, getQ2, final, double, q1d, q1, getQ3, final, double, q2a, q2, getQ0, final, double, q2b, q2, getQ1, final, double, q2c, q2, getQ2, final, double, q2d, q2, getQ3, final, double, w, -, -, -, *, q1a, q2a, *, q1b, q2b, *, q1c, q2c, *, q1d, q2d, final, double, x, -, +, +, *, q1a, q2b, *, q1b, q2a, *, q1c, q2d, *, q1d, q2c, final, double, y, +, +, -, *, q1a, q2c, *, q1b, q2d, *, q1c, q2a, *, q1d, q2b, final, double, z, +, -, +, *, q1a, q2d, *, q1b, q2c, *, q1c, q2b, *, q1d, q2a, return, new, Quaternion, w, x, y, z]
org.apache.commons.math4.complex:Quaternion:multiply:Quaternion#[return, multiply, this, q]
org.apache.commons.math4.complex:Quaternion:add:Quaternion+Quaternion#[return, new, Quaternion, +, q1, getQ0, q2, getQ0, +, q1, getQ1, q2, getQ1, +, q1, getQ2, q2, getQ2, +, q1, getQ3, q2, getQ3]
org.apache.commons.math4.complex:Quaternion:add:Quaternion#[return, add, this, q]
org.apache.commons.math4.complex:Quaternion:subtract:Quaternion+Quaternion#[return, new, Quaternion, -, q1, getQ0, q2, getQ0, -, q1, getQ1, q2, getQ1, -, q1, getQ2, q2, getQ2, -, q1, getQ3, q2, getQ3]
org.apache.commons.math4.complex:Quaternion:subtract:Quaternion#[return, subtract, this, q]
org.apache.commons.math4.complex:Quaternion:dotProduct:Quaternion+Quaternion#[return, +, +, +, *, q1, getQ0, q2, getQ0, *, q1, getQ1, q2, getQ1, *, q1, getQ2, q2, getQ2, *, q1, getQ3, q2, getQ3]
org.apache.commons.math4.complex:Quaternion:dotProduct:Quaternion#[return, dotProduct, this, q]
org.apache.commons.math4.complex:Quaternion:getNorm:null#[return, FastMath, sqrt, +, +, +, *, q0, q0, *, q1, q1, *, q2, q2, *, q3, q3]
org.apache.commons.math4.complex:Quaternion:normalize:null#[final, double, norm, getNorm, if, <, norm, Precision.SAFE_MIN, throw, new, ZeroException, LocalizedFormats.NORM, norm, return, new, Quaternion, /, q0, norm, /, q1, norm, /, q2, norm, /, q3, norm]
org.apache.commons.math4.complex:Quaternion:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, Quaternion, final, Quaternion, q, Quaternion, other, return, &&, &&, &&, ==, q0, q, getQ0, ==, q1, q, getQ1, ==, q2, q, getQ2, ==, q3, q, getQ3, return, false]
org.apache.commons.math4.complex:Quaternion:hashCode:null#[int, result, 17, for, double, comp, double, q0, q1, q2, q3, final, int, c, MathUtils, hash, comp, =, result, +, *, 31, result, c, return, result]
org.apache.commons.math4.complex:Quaternion:equals:Quaternion+double#[return, &&, Precision, equals, q0, q, getQ0, eps, Precision, equals, q1, q, getQ1, eps, Precision, equals, q2, q, getQ2, eps, Precision, equals, q3, q, getQ3, eps]
org.apache.commons.math4.complex:Quaternion:isUnitQuaternion:double#[return, Precision, equals, getNorm, 1d, eps]
org.apache.commons.math4.complex:Quaternion:isPureQuaternion:double#[return, <=, FastMath, abs, getQ0, eps]
org.apache.commons.math4.complex:Quaternion:getPositivePolarForm:null#[if, <, getQ0, 0, final, Quaternion, unitQ, normalize, return, new, Quaternion, -, unitQ, getQ0, -, unitQ, getQ1, -, unitQ, getQ2, -, unitQ, getQ3, return, this, normalize]
org.apache.commons.math4.complex:Quaternion:getInverse:null#[final, double, squareNorm, +, +, +, *, q0, q0, *, q1, q1, *, q2, q2, *, q3, q3, if, <, squareNorm, Precision.SAFE_MIN, throw, new, ZeroException, LocalizedFormats.NORM, squareNorm, return, new, Quaternion, /, q0, squareNorm, /, -, q1, squareNorm, /, -, q2, squareNorm, /, -, q3, squareNorm]
org.apache.commons.math4.complex:Quaternion:getQ0:null#[return, q0]
org.apache.commons.math4.complex:Quaternion:getQ1:null#[return, q1]
org.apache.commons.math4.complex:Quaternion:getQ2:null#[return, q2]
org.apache.commons.math4.complex:Quaternion:getQ3:null#[return, q3]
org.apache.commons.math4.complex:Quaternion:getScalarPart:null#[return, getQ0]
org.apache.commons.math4.complex:Quaternion:getVectorPart:null#[return, double, getQ1, getQ2, getQ3]
org.apache.commons.math4.complex:Quaternion:multiply:double#[return, new, Quaternion, *, alpha, q0, *, alpha, q1, *, alpha, q2, *, alpha, q3]
org.apache.commons.math4.complex:Quaternion:toString:null#[final, String, sp, " ", final, StringBuilder, s, new, StringBuilder, s, append, "[", append, q0, append, sp, append, q1, append, sp, append, q2, append, sp, append, q3, append, "]", return, s, toString]
org.apache.commons.math4.complex:RootsOfUnity:isCounterClockWise:null#[if, ==, omegaCount, 0, throw, new, MathIllegalStateException, LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, return, isCounterClockWise]
org.apache.commons.math4.complex:RootsOfUnity:computeRoots:int#[if, ==, n, 0, throw, new, ZeroException, LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, =, isCounterClockWise, >, n, 0, final, int, absN, FastMath, abs, n, if, ==, absN, omegaCount, return, final, double, t, /, *, 2.0, FastMath.PI, absN, final, double, cosT, FastMath, cos, t, final, double, sinT, FastMath, sin, t, =, omegaReal, double, absN, =, omegaImaginaryCounterClockwise, double, absN, =, omegaImaginaryClockwise, double, absN, =, omegaReal, 0, 1.0, =, omegaImaginaryCounterClockwise, 0, 0.0, =, omegaImaginaryClockwise, 0, 0.0, for, int, i, 1, <, i, absN, ++, i, =, omegaReal, i, -, *, omegaReal, -, i, 1, cosT, *, omegaImaginaryCounterClockwise, -, i, 1, sinT, =, omegaImaginaryCounterClockwise, i, +, *, omegaReal, -, i, 1, sinT, *, omegaImaginaryCounterClockwise, -, i, 1, cosT, =, omegaImaginaryClockwise, i, -, omegaImaginaryCounterClockwise, i, =, omegaCount, absN]
org.apache.commons.math4.complex:RootsOfUnity:getReal:int#[if, ==, omegaCount, 0, throw, new, MathIllegalStateException, LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, if, ||, <, k, 0, >=, k, omegaCount, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer, valueOf, k, Integer, valueOf, 0, Integer, valueOf, -, omegaCount, 1, return, omegaReal, k]
org.apache.commons.math4.complex:RootsOfUnity:getImaginary:int#[if, ==, omegaCount, 0, throw, new, MathIllegalStateException, LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, if, ||, <, k, 0, >=, k, omegaCount, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer, valueOf, k, Integer, valueOf, 0, Integer, valueOf, -, omegaCount, 1, return, isCounterClockWise, omegaImaginaryCounterClockwise, k, omegaImaginaryClockwise, k]
org.apache.commons.math4.complex:RootsOfUnity:getNumberOfRoots:null#[return, omegaCount]
org.apache.commons.math4.dfp:Dfp:newInstance:null#[return, new, Dfp, getField]
org.apache.commons.math4.dfp:Dfp:newInstance:byte#[return, new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:int#[return, new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:long#[return, new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:double#[return, new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:Dfp#[if, !=, field, getRadixDigits, d.field, getRadixDigits, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, return, dotrap, DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result, return, new, Dfp, d]
org.apache.commons.math4.dfp:Dfp:newInstance:String#[return, new, Dfp, field, s]
org.apache.commons.math4.dfp:Dfp:newInstance:byte+byte#[return, field, newDfp, sig, code]
org.apache.commons.math4.dfp:Dfp:getField:null#[return, field]
org.apache.commons.math4.dfp:Dfp:getRadixDigits:null#[return, field, getRadixDigits]
org.apache.commons.math4.dfp:Dfp:getZero:null#[return, field, getZero]
org.apache.commons.math4.dfp:Dfp:getOne:null#[return, field, getOne]
org.apache.commons.math4.dfp:Dfp:getTwo:null#[return, field, getTwo]
org.apache.commons.math4.dfp:Dfp:shiftLeft:null#[for, int, i, -, mant.length, 1, >, i, 0, --, i, =, mant, i, mant, -, i, 1, =, mant, 0, 0, --, exp]
org.apache.commons.math4.dfp:Dfp:shiftRight:null#[for, int, i, 0, <, i, -, mant.length, 1, ++, i, =, mant, i, mant, +, i, 1, =, mant, -, mant.length, 1, 0, ++, exp]
org.apache.commons.math4.dfp:Dfp:align:int#[int, lostdigit, 0, boolean, inexact, false, int, diff, -, exp, e, int, adiff, diff, if, <, adiff, 0, =, adiff, -, adiff, if, ==, diff, 0, return, 0, if, >, adiff, +, mant.length, 1, Arrays, fill, mant, 0, =, exp, e, field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, dotrap, DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this, return, 0, for, int, i, 0, <, i, adiff, ++, i, if, <, diff, 0, if, !=, lostdigit, 0, =, inexact, true, =, lostdigit, mant, 0, shiftRight, shiftLeft, if, inexact, field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, dotrap, DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this, return, lostdigit]
org.apache.commons.math4.dfp:Dfp:lessThan:Dfp#[if, !=, field, getRadixDigits, x.field, getRadixDigits, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result, return, false, if, ||, isNaN, x, isNaN, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance, getZero, return, false, return, <, compare, this, x, 0]
org.apache.commons.math4.dfp:Dfp:greaterThan:Dfp#[if, !=, field, getRadixDigits, x.field, getRadixDigits, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, dotrap, DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result, return, false, if, ||, isNaN, x, isNaN, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, dotrap, DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance, getZero, return, false, return, >, compare, this, x, 0]
org.apache.commons.math4.dfp:Dfp:negativeOrNull:null#[if, isNaN, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, return, false, return, ||, <, sign, 0, &&, ==, mant, -, mant.length, 1, 0, !, isInfinite]
org.apache.commons.math4.dfp:Dfp:strictlyNegative:null#[if, isNaN, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, return, false, return, &&, <, sign, 0, ||, !=, mant, -, mant.length, 1, 0, isInfinite]
org.apache.commons.math4.dfp:Dfp:positiveOrNull:null#[if, isNaN, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, return, false, return, ||, >, sign, 0, &&, ==, mant, -, mant.length, 1, 0, !, isInfinite]
org.apache.commons.math4.dfp:Dfp:strictlyPositive:null#[if, isNaN, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, return, false, return, &&, >, sign, 0, ||, !=, mant, -, mant.length, 1, 0, isInfinite]
org.apache.commons.math4.dfp:Dfp:abs:null#[Dfp, result, newInstance, this, =, result.sign, 1, return, result]
org.apache.commons.math4.dfp:Dfp:isInfinite:null#[return, ==, nans, INFINITE]
org.apache.commons.math4.dfp:Dfp:isNaN:null#[return, ||, ==, nans, QNAN, ==, nans, SNAN]
org.apache.commons.math4.dfp:Dfp:isZero:null#[if, isNaN, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, return, false, return, &&, ==, mant, -, mant.length, 1, 0, !, isInfinite]
org.apache.commons.math4.dfp:Dfp:equals:Object#[if, instanceof, other, Dfp, final, Dfp, x, Dfp, other, if, ||, isNaN, x, isNaN, !=, field, getRadixDigits, x.field, getRadixDigits, return, false, return, ==, compare, this, x, 0, return, false]
org.apache.commons.math4.dfp:Dfp:hashCode:null#[return, +, 17, isZero, 0, <<, sign, 8, <<, nans, 16, exp, Arrays, hashCode, mant]
org.apache.commons.math4.dfp:Dfp:unequal:Dfp#[if, ||, isNaN, x, isNaN, !=, field, getRadixDigits, x.field, getRadixDigits, return, false, return, ||, greaterThan, x, lessThan, x]
org.apache.commons.math4.dfp:Dfp:compare:Dfp+Dfp#[if, &&, &&, &&, ==, a.mant, -, a.mant.length, 1, 0, ==, b.mant, -, b.mant.length, 1, 0, ==, a.nans, FINITE, ==, b.nans, FINITE, return, 0, if, !=, a.sign, b.sign, if, ==, a.sign, -, 1, return, -, 1, return, 1, if, &&, ==, a.nans, INFINITE, ==, b.nans, FINITE, return, a.sign, if, &&, ==, a.nans, FINITE, ==, b.nans, INFINITE, return, -, b.sign, if, &&, ==, a.nans, INFINITE, ==, b.nans, INFINITE, return, 0, if, &&, !=, b.mant, -, b.mant.length, 1, 0, !=, a.mant, -, b.mant.length, 1, 0, if, <, a.exp, b.exp, return, -, a.sign, if, >, a.exp, b.exp, return, a.sign, for, int, i, -, a.mant.length, 1, >=, i, 0, --, i, if, >, a.mant, i, b.mant, i, return, a.sign, if, <, a.mant, i, b.mant, i, return, -, a.sign, return, 0]
org.apache.commons.math4.dfp:Dfp:rint:null#[return, trunc, DfpField.RoundingMode.ROUND_HALF_EVEN]
org.apache.commons.math4.dfp:Dfp:floor:null#[return, trunc, DfpField.RoundingMode.ROUND_FLOOR]
org.apache.commons.math4.dfp:Dfp:ceil:null#[return, trunc, DfpField.RoundingMode.ROUND_CEIL]
org.apache.commons.math4.dfp:Dfp:remainder:Dfp#[final, Dfp, result, this, subtract, this, divide, d, rint, multiply, d, if, ==, result.mant, -, mant.length, 1, 0, =, result.sign, sign, return, result]
org.apache.commons.math4.dfp:Dfp:trunc:DfpField.RoundingMode#[boolean, changed, false, if, isNaN, return, newInstance, this, if, ==, nans, INFINITE, return, newInstance, this, if, ==, mant, -, mant.length, 1, 0, return, newInstance, this, if, <, exp, 0, field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, Dfp, result, newInstance, getZero, =, result, dotrap, DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result, return, result, if, >=, exp, mant.length, return, newInstance, this, Dfp, result, newInstance, this, for, int, i, 0, <, i, -, mant.length, result.exp, ++, i, |=, changed, !=, result.mant, i, 0, =, result.mant, i, 0, if, changed, switch, rmode, case, ROUND_FLOOR, if, ==, result.sign, -, 1, =, result, result, add, newInstance, -, 1, break, case, ROUND_CEIL, if, ==, result.sign, 1, =, result, result, add, getOne, break, case, ROUND_HALF_EVEN, default, final, Dfp, half, newInstance, "0.5", Dfp, a, subtract, result, =, a.sign, 1, if, a, greaterThan, half, =, a, newInstance, getOne, =, a.sign, sign, =, result, result, add, a, if, &&, &&, a, equals, half, >, result.exp, 0, !=, &, result.mant, -, mant.length, result.exp, 1, 0, =, a, newInstance, getOne, =, a.sign, sign, =, result, result, add, a, break, field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, =, result, dotrap, DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result, return, result, return, result]
org.apache.commons.math4.dfp:Dfp:intValue:null#[Dfp, rounded, int, result, 0, =, rounded, rint, if, rounded, greaterThan, newInstance, 2147483647, return, 2147483647, if, rounded, lessThan, newInstance, -2147483648, return, -2147483648, for, int, i, -, mant.length, 1, >=, i, -, mant.length, rounded.exp, --, i, =, result, +, *, result, RADIX, rounded.mant, i, if, ==, rounded.sign, -, 1, =, result, -, result, return, result]
org.apache.commons.math4.dfp:Dfp:log10K:null#[return, -, exp, 1]
org.apache.commons.math4.dfp:Dfp:power10K:int#[Dfp, d, newInstance, getOne, =, d.exp, +, e, 1, return, d]
org.apache.commons.math4.dfp:Dfp:intLog10:null#[if, >, mant, -, mant.length, 1, 1000, return, -, *, exp, 4, 1, if, >, mant, -, mant.length, 1, 100, return, -, *, exp, 4, 2, if, >, mant, -, mant.length, 1, 10, return, -, *, exp, 4, 3, return, -, *, exp, 4, 4]
org.apache.commons.math4.dfp:Dfp:power10:int#[Dfp, d, newInstance, getOne, if, >=, e, 0, =, d.exp, +, /, e, 4, 1, =, d.exp, /, +, e, 1, 4, switch, %, +, %, e, 4, 4, 4, case, 0, break, case, 1, =, d, d, multiply, 10, break, case, 2, =, d, d, multiply, 100, break, default, =, d, d, multiply, 1000, return, d]
org.apache.commons.math4.dfp:Dfp:complement:int#[=, extra, -, RADIX, extra, for, int, i, 0, <, i, mant.length, ++, i, =, mant, i, -, RADIX, mant, i, 1, int, rh, /, extra, RADIX, -=, extra, *, rh, RADIX, for, int, i, 0, <, i, mant.length, ++, i, final, int, r, +, mant, i, rh, =, rh, /, r, RADIX, =, mant, i, -, r, *, rh, RADIX, return, extra]
org.apache.commons.math4.dfp:Dfp:add:Dfp#[if, !=, field, getRadixDigits, x.field, getRadixDigits, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, return, dotrap, DfpField.FLAG_INVALID, ADD_TRAP, x, result, if, ||, !=, nans, FINITE, !=, x.nans, FINITE, if, isNaN, return, this, if, x, isNaN, return, x, if, &&, ==, nans, INFINITE, ==, x.nans, FINITE, return, this, if, &&, ==, x.nans, INFINITE, ==, nans, FINITE, return, x, if, &&, &&, ==, x.nans, INFINITE, ==, nans, INFINITE, ==, sign, x.sign, return, x, if, &&, &&, ==, x.nans, INFINITE, ==, nans, INFINITE, !=, sign, x.sign, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, Dfp, result, newInstance, getZero, =, result.nans, QNAN, =, result, dotrap, DfpField.FLAG_INVALID, ADD_TRAP, x, result, return, result, Dfp, a, newInstance, this, Dfp, b, newInstance, x, Dfp, result, newInstance, getZero, final, byte, asign, a.sign, final, byte, bsign, b.sign, =, a.sign, 1, =, b.sign, 1, byte, rsign, bsign, if, >, compare, a, b, 0, =, rsign, asign, if, ==, b.mant, -, mant.length, 1, 0, =, b.exp, a.exp, if, ==, a.mant, -, mant.length, 1, 0, =, a.exp, b.exp, int, aextradigit, 0, int, bextradigit, 0, if, <, a.exp, b.exp, =, aextradigit, a, align, b.exp, =, bextradigit, b, align, a.exp, if, !=, asign, bsign, if, ==, asign, rsign, =, bextradigit, b, complement, bextradigit, =, aextradigit, a, complement, aextradigit, int, rh, 0, for, int, i, 0, <, i, mant.length, ++, i, final, int, r, +, a.mant, i, b.mant, i, rh, =, rh, /, r, RADIX, =, result.mant, i, -, r, *, rh, RADIX, =, result.exp, a.exp, =, result.sign, rsign, if, &&, !=, rh, 0, ==, asign, bsign, final, int, lostdigit, result.mant, 0, result, shiftRight, =, result.mant, -, mant.length, 1, rh, final, int, excp, result, round, lostdigit, if, !=, excp, 0, =, result, dotrap, excp, ADD_TRAP, x, result, for, int, i, 0, <, i, mant.length, ++, i, if, !=, result.mant, -, mant.length, 1, 0, break, result, shiftLeft, if, ==, i, 0, =, result.mant, 0, +, aextradigit, bextradigit, =, aextradigit, 0, =, bextradigit, 0, if, ==, result.mant, -, mant.length, 1, 0, =, result.exp, 0, if, !=, asign, bsign, =, result.sign, 1, final, int, excp, result, round, +, aextradigit, bextradigit, if, !=, excp, 0, =, result, dotrap, excp, ADD_TRAP, x, result, return, result]
org.apache.commons.math4.dfp:Dfp:negate:null#[Dfp, result, newInstance, this, =, result.sign, byte, -, result.sign, return, result]
org.apache.commons.math4.dfp:Dfp:subtract:Dfp#[return, add, x, negate]
org.apache.commons.math4.dfp:Dfp:round:int#[boolean, inc, false, switch, field, getRoundingMode, case, ROUND_DOWN, =, inc, false, break, case, ROUND_UP, =, inc, !=, n, 0, break, case, ROUND_HALF_UP, =, inc, >=, n, 5000, break, case, ROUND_HALF_DOWN, =, inc, >, n, 5000, break, case, ROUND_HALF_EVEN, =, inc, ||, >, n, 5000, &&, ==, n, 5000, ==, &, mant, 0, 1, 1, break, case, ROUND_HALF_ODD, =, inc, ||, >, n, 5000, &&, ==, n, 5000, ==, &, mant, 0, 1, 0, break, case, ROUND_CEIL, =, inc, &&, ==, sign, 1, !=, n, 0, break, case, ROUND_FLOOR, default, =, inc, &&, ==, sign, -, 1, !=, n, 0, break, if, inc, int, rh, 1, for, int, i, 0, <, i, mant.length, ++, i, final, int, r, +, mant, i, rh, =, rh, /, r, RADIX, =, mant, i, -, r, *, rh, RADIX, if, !=, rh, 0, shiftRight, =, mant, -, mant.length, 1, rh, if, <, exp, MIN_EXP, field, setIEEEFlagsBits, DfpField.FLAG_UNDERFLOW, return, DfpField.FLAG_UNDERFLOW, if, >, exp, MAX_EXP, field, setIEEEFlagsBits, DfpField.FLAG_OVERFLOW, return, DfpField.FLAG_OVERFLOW, if, !=, n, 0, field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, return, DfpField.FLAG_INEXACT, return, 0]
org.apache.commons.math4.dfp:Dfp:multiply:Dfp#[if, !=, field, getRadixDigits, x.field, getRadixDigits, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, return, dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result, Dfp, result, newInstance, getZero, if, ||, !=, nans, FINITE, !=, x.nans, FINITE, if, isNaN, return, this, if, x, isNaN, return, x, if, &&, &&, ==, nans, INFINITE, ==, x.nans, FINITE, !=, x.mant, -, mant.length, 1, 0, =, result, newInstance, this, =, result.sign, byte, *, sign, x.sign, return, result, if, &&, &&, ==, x.nans, INFINITE, ==, nans, FINITE, !=, mant, -, mant.length, 1, 0, =, result, newInstance, x, =, result.sign, byte, *, sign, x.sign, return, result, if, &&, ==, x.nans, INFINITE, ==, nans, INFINITE, =, result, newInstance, this, =, result.sign, byte, *, sign, x.sign, return, result, if, ||, &&, &&, ==, x.nans, INFINITE, ==, nans, FINITE, ==, mant, -, mant.length, 1, 0, &&, &&, ==, nans, INFINITE, ==, x.nans, FINITE, ==, x.mant, -, mant.length, 1, 0, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, =, result, newInstance, getZero, =, result.nans, QNAN, =, result, dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result, return, result, int, product, int, *, mant.length, 2, for, int, i, 0, <, i, mant.length, ++, i, int, rh, 0, for, int, j, 0, <, j, mant.length, ++, j, int, r, *, mant, i, x.mant, j, +=, r, +, product, +, i, j, rh, =, rh, /, r, RADIX, =, product, +, i, j, -, r, *, rh, RADIX, =, product, +, i, mant.length, rh, int, md, -, *, mant.length, 2, 1, for, int, i, -, *, mant.length, 2, 1, >=, i, 0, --, i, if, !=, product, i, 0, =, md, i, break, for, int, i, 0, <, i, mant.length, ++, i, =, result.mant, -, mant.length, i, 1, product, -, md, i, =, result.exp, +, -, +, exp, x.exp, md, *, 2, mant.length, 1, =, result.sign, byte, ==, sign, x.sign, 1, -, 1, if, ==, result.mant, -, mant.length, 1, 0, =, result.exp, 0, final, int, excp, if, >, md, -, mant.length, 1, =, excp, result, round, product, -, md, mant.length, =, excp, result, round, 0, if, !=, excp, 0, =, result, dotrap, excp, MULTIPLY_TRAP, x, result, return, result]
org.apache.commons.math4.dfp:Dfp:multiply:int#[if, &&, >=, x, 0, <, x, RADIX, return, multiplyFast, x, return, multiply, newInstance, x]
org.apache.commons.math4.dfp:Dfp:multiplyFast:int#[Dfp, result, newInstance, this, if, !=, nans, FINITE, if, isNaN, return, this, if, &&, ==, nans, INFINITE, !=, x, 0, =, result, newInstance, this, return, result, if, &&, ==, nans, INFINITE, ==, x, 0, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, =, result, newInstance, getZero, =, result.nans, QNAN, =, result, dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance, getZero, result, return, result, if, ||, <, x, 0, >=, x, RADIX, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, =, result, newInstance, getZero, =, result.nans, QNAN, =, result, dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result, return, result, int, rh, 0, for, int, i, 0, <, i, mant.length, ++, i, final, int, r, +, *, mant, i, x, rh, =, rh, /, r, RADIX, =, result.mant, i, -, r, *, rh, RADIX, int, lostdigit, 0, if, !=, rh, 0, =, lostdigit, result.mant, 0, result, shiftRight, =, result.mant, -, mant.length, 1, rh, if, ==, result.mant, -, mant.length, 1, 0, =, result.exp, 0, final, int, excp, result, round, lostdigit, if, !=, excp, 0, =, result, dotrap, excp, MULTIPLY_TRAP, result, result, return, result]
org.apache.commons.math4.dfp:Dfp:divide:Dfp#[int, dividend, int, quotient, int, remainder, int, qd, int, nsqd, int, trial, 0, int, minadj, boolean, trialgood, int, md, 0, int, excp, if, !=, field, getRadixDigits, divisor.field, getRadixDigits, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, return, dotrap, DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result, Dfp, result, newInstance, getZero, if, ||, !=, nans, FINITE, !=, divisor.nans, FINITE, if, isNaN, return, this, if, divisor, isNaN, return, divisor, if, &&, ==, nans, INFINITE, ==, divisor.nans, FINITE, =, result, newInstance, this, =, result.sign, byte, *, sign, divisor.sign, return, result, if, &&, ==, divisor.nans, INFINITE, ==, nans, FINITE, =, result, newInstance, getZero, =, result.sign, byte, *, sign, divisor.sign, return, result, if, &&, ==, divisor.nans, INFINITE, ==, nans, INFINITE, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, =, result, newInstance, getZero, =, result.nans, QNAN, =, result, dotrap, DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result, return, result, if, ==, divisor.mant, -, mant.length, 1, 0, field, setIEEEFlagsBits, DfpField.FLAG_DIV_ZERO, =, result, newInstance, getZero, =, result.sign, byte, *, sign, divisor.sign, =, result.nans, INFINITE, =, result, dotrap, DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result, return, result, =, dividend, int, +, mant.length, 1, =, quotient, int, +, mant.length, 2, =, remainder, int, +, mant.length, 1, =, dividend, mant.length, 0, =, quotient, mant.length, 0, =, quotient, +, mant.length, 1, 0, =, remainder, mant.length, 0, for, int, i, 0, <, i, mant.length, ++, i, =, dividend, i, mant, i, =, quotient, i, 0, =, remainder, i, 0, =, nsqd, 0, for, =, qd, +, mant.length, 1, >=, qd, 0, --, qd, final, int, divMsb, +, *, dividend, mant.length, RADIX, dividend, -, mant.length, 1, int, min, /, divMsb, +, divisor.mant, -, mant.length, 1, 1, int, max, /, +, divMsb, 1, divisor.mant, -, mant.length, 1, =, trialgood, false, while, !, trialgood, =, trial, /, +, min, max, 2, int, rh, 0, for, int, i, 0, <, i, +, mant.length, 1, ++, i, int, dm, <, i, mant.length, divisor.mant, i, 0, final, int, r, +, *, dm, trial, rh, =, rh, /, r, RADIX, =, remainder, i, -, r, *, rh, RADIX, =, rh, 1, for, int, i, 0, <, i, +, mant.length, 1, ++, i, final, int, r, +, -, -, RADIX, 1, remainder, i, dividend, i, rh, =, rh, /, r, RADIX, =, remainder, i, -, r, *, rh, RADIX, if, ==, rh, 0, =, max, -, trial, 1, continue, =, minadj, +, *, remainder, mant.length, RADIX, remainder, -, mant.length, 1, /=, minadj, +, divisor.mant, -, mant.length, 1, 1, if, >=, minadj, 2, =, min, +, trial, minadj, continue, =, trialgood, false, for, int, i, -, mant.length, 1, >=, i, 0, --, i, if, >, divisor.mant, i, remainder, i, =, trialgood, true, if, <, divisor.mant, i, remainder, i, break, if, !=, remainder, mant.length, 0, =, trialgood, false, if, ==, trialgood, false, =, min, +, trial, 1, =, quotient, qd, trial, if, ||, !=, trial, 0, !=, nsqd, 0, ++, nsqd, if, &&, ==, field, getRoundingMode, DfpField.RoundingMode.ROUND_DOWN, ==, nsqd, mant.length, break, if, >, nsqd, mant.length, break, =, dividend, 0, 0, for, int, i, 0, <, i, mant.length, ++, i, =, dividend, +, i, 1, remainder, i, =, md, mant.length, for, int, i, +, mant.length, 1, >=, i, 0, --, i, if, !=, quotient, i, 0, =, md, i, break, for, int, i, 0, <, i, mant.length, ++, i, =, result.mant, -, mant.length, i, 1, quotient, -, md, i, =, result.exp, -, +, -, exp, divisor.exp, md, mant.length, =, result.sign, byte, ==, sign, divisor.sign, 1, -, 1, if, ==, result.mant, -, mant.length, 1, 0, =, result.exp, 0, if, >, md, -, mant.length, 1, =, excp, result, round, quotient, -, md, mant.length, =, excp, result, round, 0, if, !=, excp, 0, =, result, dotrap, excp, DIVIDE_TRAP, divisor, result, return, result]
org.apache.commons.math4.dfp:Dfp:divide:int#[if, !=, nans, FINITE, if, isNaN, return, this, if, ==, nans, INFINITE, return, newInstance, this, if, ==, divisor, 0, field, setIEEEFlagsBits, DfpField.FLAG_DIV_ZERO, Dfp, result, newInstance, getZero, =, result.sign, sign, =, result.nans, INFINITE, =, result, dotrap, DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero, result, return, result, if, ||, <, divisor, 0, >=, divisor, RADIX, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, Dfp, result, newInstance, getZero, =, result.nans, QNAN, =, result, dotrap, DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result, return, result, Dfp, result, newInstance, this, int, rl, 0, for, int, i, -, mant.length, 1, >=, i, 0, --, i, final, int, r, +, *, rl, RADIX, result.mant, i, final, int, rh, /, r, divisor, =, rl, -, r, *, rh, divisor, =, result.mant, i, rh, if, ==, result.mant, -, mant.length, 1, 0, result, shiftLeft, final, int, r, *, rl, RADIX, final, int, rh, /, r, divisor, =, rl, -, r, *, rh, divisor, =, result.mant, 0, rh, final, int, excp, result, round, /, *, rl, RADIX, divisor, if, !=, excp, 0, =, result, dotrap, excp, DIVIDE_TRAP, result, result, return, result]
org.apache.commons.math4.dfp:Dfp:reciprocal:null#[return, field, getOne, divide, this]
org.apache.commons.math4.dfp:Dfp:sqrt:null#[if, &&, ==, nans, FINITE, ==, mant, -, mant.length, 1, 0, return, newInstance, this, if, !=, nans, FINITE, if, &&, ==, nans, INFINITE, ==, sign, 1, return, newInstance, this, if, ==, nans, QNAN, return, newInstance, this, if, ==, nans, SNAN, Dfp, result, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, =, result, newInstance, this, =, result, dotrap, DfpField.FLAG_INVALID, SQRT_TRAP, null, result, return, result, if, ==, sign, -, 1, Dfp, result, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, =, result, newInstance, this, =, result.nans, QNAN, =, result, dotrap, DfpField.FLAG_INVALID, SQRT_TRAP, null, result, return, result, Dfp, x, newInstance, this, if, ||, <, x.exp, -, 1, >, x.exp, 1, =, x.exp, /, this, exp, 2, switch, /, x.mant, -, mant.length, 1, 2000, case, 0, =, x.mant, -, mant.length, 1, +, /, x.mant, -, mant.length, 1, 2, 1, break, case, 2, =, x.mant, -, mant.length, 1, 1500, break, case, 3, =, x.mant, -, mant.length, 1, 2200, break, default, =, x.mant, -, mant.length, 1, 3000, Dfp, dx, newInstance, x, Dfp, px, getZero, Dfp, ppx, getZero, while, x, unequal, px, =, dx, newInstance, x, =, dx.sign, -, 1, =, dx, dx, add, this, divide, x, =, dx, dx, divide, 2, =, ppx, px, =, px, x, =, x, x, add, dx, if, x, equals, ppx, break, if, ==, dx.mant, -, mant.length, 1, 0, break, return, x]
org.apache.commons.math4.dfp:Dfp:toString:null#[if, !=, nans, FINITE, if, ==, nans, INFINITE, return, <, sign, 0, NEG_INFINITY_STRING, POS_INFINITY_STRING, return, NAN_STRING, if, ||, >, exp, mant.length, <, exp, -, 1, return, dfp2sci, return, dfp2string]
org.apache.commons.math4.dfp:Dfp:dfp2sci:null#[char, rawdigits, char, *, mant.length, 4, char, outputbuffer, char, +, *, mant.length, 4, 20, int, p, int, q, int, e, int, ae, int, shf, =, p, 0, for, int, i, -, mant.length, 1, >=, i, 0, --, i, =, rawdigits, ++, p, char, +, /, mant, i, 1000, '0', =, rawdigits, ++, p, char, +, %, /, mant, i, 100, 10, '0', =, rawdigits, ++, p, char, +, %, /, mant, i, 10, 10, '0', =, rawdigits, ++, p, char, +, %, mant, i, 10, '0', for, =, p, 0, <, p, rawdigits.length, ++, p, if, !=, rawdigits, p, '0', break, =, shf, p, =, q, 0, if, ==, sign, -, 1, =, outputbuffer, ++, q, '-', if, !=, p, rawdigits.length, =, outputbuffer, ++, q, rawdigits, ++, p, =, outputbuffer, ++, q, '.', while, <, p, rawdigits.length, =, outputbuffer, ++, q, rawdigits, ++, p, =, outputbuffer, ++, q, '0', =, outputbuffer, ++, q, '.', =, outputbuffer, ++, q, '0', =, outputbuffer, ++, q, 'e', =, outputbuffer, ++, q, '0', return, new, String, outputbuffer, 0, 5, =, outputbuffer, ++, q, 'e', =, e, -, -, *, exp, 4, shf, 1, =, ae, e, if, <, e, 0, =, ae, -, e, for, =, p, 1000000000, >, p, ae, /=, p, 10, if, <, e, 0, =, outputbuffer, ++, q, '-', while, >, p, 0, =, outputbuffer, ++, q, char, +, /, ae, p, '0', %=, ae, p, /=, p, 10, return, new, String, outputbuffer, 0, q]
org.apache.commons.math4.dfp:Dfp:dfp2string:null#[char, buffer, char, +, *, mant.length, 4, 20, int, p, 1, int, q, int, e, exp, boolean, pointInserted, false, =, buffer, 0, ' ', if, <=, e, 0, =, buffer, ++, p, '0', =, buffer, ++, p, '.', =, pointInserted, true, while, <, e, 0, =, buffer, ++, p, '0', =, buffer, ++, p, '0', =, buffer, ++, p, '0', =, buffer, ++, p, '0', ++, e, for, int, i, -, mant.length, 1, >=, i, 0, --, i, =, buffer, ++, p, char, +, /, mant, i, 1000, '0', =, buffer, ++, p, char, +, %, /, mant, i, 100, 10, '0', =, buffer, ++, p, char, +, %, /, mant, i, 10, 10, '0', =, buffer, ++, p, char, +, %, mant, i, 10, '0', if, ==, --, e, 0, =, buffer, ++, p, '.', =, pointInserted, true, while, >, e, 0, =, buffer, ++, p, '0', =, buffer, ++, p, '0', =, buffer, ++, p, '0', =, buffer, ++, p, '0', --, e, if, !, pointInserted, =, buffer, ++, p, '.', =, q, 1, while, ==, buffer, q, '0', ++, q, if, ==, buffer, q, '.', --, q, while, ==, buffer, -, p, 1, '0', --, p, if, <, sign, 0, =, buffer, --, q, '-', return, new, String, buffer, q, -, p, q]
org.apache.commons.math4.dfp:Dfp:dotrap:int+String+Dfp+Dfp#[Dfp, def, result, switch, type, case, DfpField.FLAG_INVALID, =, def, newInstance, getZero, =, def.sign, result.sign, =, def.nans, QNAN, break, case, DfpField.FLAG_DIV_ZERO, if, &&, ==, nans, FINITE, !=, mant, -, mant.length, 1, 0, =, def, newInstance, getZero, =, def.sign, byte, *, sign, oper.sign, =, def.nans, INFINITE, if, &&, ==, nans, FINITE, ==, mant, -, mant.length, 1, 0, =, def, newInstance, getZero, =, def.nans, QNAN, if, ||, ==, nans, INFINITE, ==, nans, QNAN, =, def, newInstance, getZero, =, def.nans, QNAN, if, ||, ==, nans, INFINITE, ==, nans, SNAN, =, def, newInstance, getZero, =, def.nans, QNAN, break, case, DfpField.FLAG_UNDERFLOW, if, <, +, result.exp, mant.length, MIN_EXP, =, def, newInstance, getZero, =, def.sign, result.sign, =, def, newInstance, result, +=, result.exp, ERR_SCALE, break, case, DfpField.FLAG_OVERFLOW, -=, result.exp, ERR_SCALE, =, def, newInstance, getZero, =, def.sign, result.sign, =, def.nans, INFINITE, break, default, =, def, result, break, return, trap, type, what, oper, def, result]
org.apache.commons.math4.dfp:Dfp:trap:int+String+Dfp+Dfp+Dfp#[return, def]
org.apache.commons.math4.dfp:Dfp:classify:null#[return, nans]
org.apache.commons.math4.dfp:Dfp:copysign:Dfp+Dfp#[Dfp, result, x, newInstance, x, =, result.sign, y.sign, return, result]
org.apache.commons.math4.dfp:Dfp:nextAfter:Dfp#[if, !=, field, getRadixDigits, x.field, getRadixDigits, field, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, return, dotrap, DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result, boolean, up, false, if, this, lessThan, x, =, up, true, if, ==, compare, this, x, 0, return, newInstance, x, if, lessThan, getZero, =, up, !, up, final, Dfp, inc, Dfp, result, if, up, =, inc, newInstance, getOne, =, inc.exp, +, -, this, exp, mant.length, 1, =, inc.sign, this, sign, if, this, equals, getZero, =, inc.exp, -, MIN_EXP, mant.length, =, result, add, inc, =, inc, newInstance, getOne, =, inc.exp, this, exp, =, inc.sign, this, sign, if, this, equals, inc, =, inc.exp, -, this, exp, mant.length, =, inc.exp, +, -, this, exp, mant.length, 1, if, this, equals, getZero, =, inc.exp, -, MIN_EXP, mant.length, =, result, this, subtract, inc, if, &&, ==, result, classify, INFINITE, !=, this, classify, INFINITE, field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, =, result, dotrap, DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result, if, &&, result, equals, getZero, ==, this, equals, getZero, false, field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, =, result, dotrap, DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result, return, result]
org.apache.commons.math4.dfp:Dfp:toDouble:null#[if, isInfinite, if, lessThan, getZero, return, Double.NEGATIVE_INFINITY, return, Double.POSITIVE_INFINITY, if, isNaN, return, Double.NaN, Dfp, y, this, boolean, negate, false, int, cmp0, compare, this, getZero, if, ==, cmp0, 0, return, <, sign, 0, -, 0.0, +, 0.0, if, <, cmp0, 0, =, y, negate, =, negate, true, int, exponent, int, *, y, intLog10, 3.32, if, <, exponent, 0, --, exponent, Dfp, tempDfp, DfpMath, pow, getTwo, exponent, while, ||, tempDfp, lessThan, y, tempDfp, equals, y, =, tempDfp, tempDfp, multiply, 2, ++, exponent, --, exponent, =, y, y, divide, DfpMath, pow, getTwo, exponent, if, >, exponent, -, 1023, =, y, y, subtract, getOne, if, <, exponent, -, 1074, return, 0, if, >, exponent, 1023, return, negate, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, =, y, y, multiply, newInstance, 4503599627370496l, rint, String, str, y, toString, =, str, str, substring, 0, -, str, length, 1, long, mantissa, Long, parseLong, str, if, ==, mantissa, 4503599627370496L, =, mantissa, 0, ++, exponent, if, <=, exponent, -, 1023, --, exponent, while, <, exponent, -, 1023, ++, exponent, >>>=, mantissa, 1, long, bits, |, mantissa, <<, +, exponent, 1023L, 52, double, x, Double, longBitsToDouble, bits, if, negate, =, x, -, x, return, x]
org.apache.commons.math4.dfp:Dfp:toSplitDouble:null#[double, split, double, 2, long, mask, 0xffffffffc0000000L, =, split, 0, Double, longBitsToDouble, &, Double, doubleToLongBits, toDouble, mask, =, split, 1, subtract, newInstance, split, 0, toDouble, return, split]
org.apache.commons.math4.dfp:Dfp:getReal:null#[return, toDouble]
org.apache.commons.math4.dfp:Dfp:add:double#[return, add, newInstance, a]
org.apache.commons.math4.dfp:Dfp:subtract:double#[return, subtract, newInstance, a]
org.apache.commons.math4.dfp:Dfp:multiply:double#[return, multiply, newInstance, a]
org.apache.commons.math4.dfp:Dfp:divide:double#[return, divide, newInstance, a]
org.apache.commons.math4.dfp:Dfp:remainder:double#[return, remainder, newInstance, a]
org.apache.commons.math4.dfp:Dfp:round:null#[return, FastMath, round, toDouble]
org.apache.commons.math4.dfp:Dfp:signum:null#[if, ||, isNaN, isZero, return, this, return, newInstance, >, sign, 0, +, 1, -, 1]
org.apache.commons.math4.dfp:Dfp:copySign:Dfp#[if, ||, &&, >=, sign, 0, >=, s.sign, 0, &&, <, sign, 0, <, s.sign, 0, return, this, return, negate]
org.apache.commons.math4.dfp:Dfp:copySign:double#[long, sb, Double, doubleToLongBits, s, if, ||, &&, >=, sign, 0, >=, sb, 0, &&, <, sign, 0, <, sb, 0, return, this, return, negate]
org.apache.commons.math4.dfp:Dfp:scalb:int#[return, multiply, DfpMath, pow, getTwo, n]
org.apache.commons.math4.dfp:Dfp:hypot:Dfp#[return, multiply, this, add, y, multiply, y, sqrt]
org.apache.commons.math4.dfp:Dfp:cbrt:null#[return, rootN, 3]
org.apache.commons.math4.dfp:Dfp:rootN:int#[return, >=, sign, 0, DfpMath, pow, this, getOne, divide, n, DfpMath, pow, negate, getOne, divide, n, negate]
org.apache.commons.math4.dfp:Dfp:pow:double#[return, DfpMath, pow, this, newInstance, p]
org.apache.commons.math4.dfp:Dfp:pow:int#[return, DfpMath, pow, this, n]
org.apache.commons.math4.dfp:Dfp:pow:Dfp#[return, DfpMath, pow, this, e]
org.apache.commons.math4.dfp:Dfp:exp:null#[return, DfpMath, exp, this]
org.apache.commons.math4.dfp:Dfp:expm1:null#[return, DfpMath, exp, this, subtract, getOne]
org.apache.commons.math4.dfp:Dfp:log:null#[return, DfpMath, log, this]
org.apache.commons.math4.dfp:Dfp:log1p:null#[return, DfpMath, log, this, add, getOne]
org.apache.commons.math4.dfp:Dfp:log10:null#[return, DfpMath, log, this, divide, DfpMath, log, newInstance, 10]
org.apache.commons.math4.dfp:Dfp:cos:null#[return, DfpMath, cos, this]
org.apache.commons.math4.dfp:Dfp:sin:null#[return, DfpMath, sin, this]
org.apache.commons.math4.dfp:Dfp:tan:null#[return, DfpMath, tan, this]
org.apache.commons.math4.dfp:Dfp:acos:null#[return, DfpMath, acos, this]
org.apache.commons.math4.dfp:Dfp:asin:null#[return, DfpMath, asin, this]
org.apache.commons.math4.dfp:Dfp:atan:null#[return, DfpMath, atan, this]
org.apache.commons.math4.dfp:Dfp:atan2:Dfp#[final, Dfp, r, x, multiply, x, add, multiply, this, sqrt, if, >=, x.sign, 0, return, getTwo, multiply, divide, r, add, x, atan, final, Dfp, tmp, getTwo, multiply, divide, r, subtract, x, atan, final, Dfp, pmPi, newInstance, <=, tmp.sign, 0, -, FastMath.PI, FastMath.PI, return, pmPi, subtract, tmp]
org.apache.commons.math4.dfp:Dfp:cosh:null#[return, DfpMath, exp, this, add, DfpMath, exp, negate, divide, 2]
org.apache.commons.math4.dfp:Dfp:sinh:null#[return, DfpMath, exp, this, subtract, DfpMath, exp, negate, divide, 2]
org.apache.commons.math4.dfp:Dfp:tanh:null#[final, Dfp, ePlus, DfpMath, exp, this, final, Dfp, eMinus, DfpMath, exp, negate, return, ePlus, subtract, eMinus, divide, ePlus, add, eMinus]
org.apache.commons.math4.dfp:Dfp:acosh:null#[return, multiply, this, subtract, getOne, sqrt, add, this, log]
org.apache.commons.math4.dfp:Dfp:asinh:null#[return, multiply, this, add, getOne, sqrt, add, this, log]
org.apache.commons.math4.dfp:Dfp:atanh:null#[return, getOne, add, this, divide, getOne, subtract, this, log, divide, 2]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp[]+Dfp[]#[if, !=, a.length, b.length, throw, new, DimensionMismatchException, a.length, b.length, Dfp, r, getZero, for, int, i, 0, <, i, a.length, ++, i, =, r, r, add, a, i, multiply, b, i, return, r]
org.apache.commons.math4.dfp:Dfp:linearCombination:double[]+Dfp[]#[if, !=, a.length, b.length, throw, new, DimensionMismatchException, a.length, b.length, Dfp, r, getZero, for, int, i, 0, <, i, a.length, ++, i, =, r, r, add, b, i, multiply, a, i, return, r]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp+Dfp+Dfp+Dfp#[return, a1, multiply, b1, add, a2, multiply, b2]
org.apache.commons.math4.dfp:Dfp:linearCombination:double+Dfp+double+Dfp#[return, b1, multiply, a1, add, b2, multiply, a2]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp+Dfp+Dfp+Dfp+Dfp+Dfp#[return, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3]
org.apache.commons.math4.dfp:Dfp:linearCombination:double+Dfp+double+Dfp+double+Dfp#[return, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp+Dfp+Dfp+Dfp+Dfp+Dfp+Dfp+Dfp#[return, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, add, a4, multiply, b4]
org.apache.commons.math4.dfp:Dfp:linearCombination:double+Dfp+double+Dfp+double+Dfp+double+Dfp#[return, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, add, b4, multiply, a4]
org.apache.commons.math4.dfp:DfpDec:newInstance:null#[return, new, DfpDec, getField]
org.apache.commons.math4.dfp:DfpDec:newInstance:byte#[return, new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:int#[return, new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:long#[return, new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:double#[return, new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:Dfp#[if, !=, getField, getRadixDigits, d, getField, getRadixDigits, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, return, dotrap, DfpField.FLAG_INVALID, "newInstance", d, result, return, new, DfpDec, d]
org.apache.commons.math4.dfp:DfpDec:newInstance:String#[return, new, DfpDec, getField, s]
org.apache.commons.math4.dfp:DfpDec:newInstance:byte+byte#[return, new, DfpDec, getField, sign, nans]
org.apache.commons.math4.dfp:DfpDec:getDecimalDigits:null#[return, -, *, getRadixDigits, 4, 3]
org.apache.commons.math4.dfp:DfpDec:round:int#[int, msb, mant, -, mant.length, 1, if, ==, msb, 0, return, 0, int, cmaxdigits, *, mant.length, 4, int, lsbthreshold, 1000, while, >, lsbthreshold, msb, /=, lsbthreshold, 10, --, cmaxdigits, final, int, digits, getDecimalDigits, final, int, lsbshift, -, cmaxdigits, digits, final, int, lsd, /, lsbshift, 4, =, lsbthreshold, 1, for, int, i, 0, <, i, %, lsbshift, 4, ++, i, *=, lsbthreshold, 10, final, int, lsb, mant, lsd, if, &&, <=, lsbthreshold, 1, ==, digits, -, *, 4, mant.length, 3, return, super, round, in, int, discarded, in, final, int, n, if, ==, lsbthreshold, 1, =, n, %, /, mant, -, lsd, 1, 1000, 10, %=, mant, -, lsd, 1, 1000, |=, discarded, mant, -, lsd, 1, =, n, %, /, *, lsb, 10, lsbthreshold, 10, |=, discarded, %, lsb, /, lsbthreshold, 10, for, int, i, 0, <, i, lsd, ++, i, |=, discarded, mant, i, =, mant, i, 0, =, mant, lsd, *, /, lsb, lsbthreshold, lsbthreshold, final, boolean, inc, switch, getField, getRoundingMode, case, ROUND_DOWN, =, inc, false, break, case, ROUND_UP, =, inc, ||, !=, n, 0, !=, discarded, 0, break, case, ROUND_HALF_UP, =, inc, >=, n, 5, break, case, ROUND_HALF_DOWN, =, inc, >, n, 5, break, case, ROUND_HALF_EVEN, =, inc, ||, >, n, 5, &&, ==, n, 5, !=, discarded, 0, &&, &&, ==, n, 5, ==, discarded, 0, ==, &, /, lsb, lsbthreshold, 1, 1, break, case, ROUND_HALF_ODD, =, inc, ||, >, n, 5, &&, ==, n, 5, !=, discarded, 0, &&, &&, ==, n, 5, ==, discarded, 0, ==, &, /, lsb, lsbthreshold, 1, 0, break, case, ROUND_CEIL, =, inc, &&, ==, sign, 1, ||, !=, n, 0, !=, discarded, 0, break, case, ROUND_FLOOR, default, =, inc, &&, ==, sign, -, 1, ||, !=, n, 0, !=, discarded, 0, break, if, inc, int, rh, lsbthreshold, for, int, i, lsd, <, i, mant.length, ++, i, final, int, r, +, mant, i, rh, =, rh, /, r, RADIX, =, mant, i, %, r, RADIX, if, !=, rh, 0, shiftRight, =, mant, -, mant.length, 1, rh, if, <, exp, MIN_EXP, getField, setIEEEFlagsBits, DfpField.FLAG_UNDERFLOW, return, DfpField.FLAG_UNDERFLOW, if, >, exp, MAX_EXP, getField, setIEEEFlagsBits, DfpField.FLAG_OVERFLOW, return, DfpField.FLAG_OVERFLOW, if, ||, !=, n, 0, !=, discarded, 0, getField, setIEEEFlagsBits, DfpField.FLAG_INEXACT, return, DfpField.FLAG_INEXACT, return, 0]
org.apache.commons.math4.dfp:DfpDec:nextAfter:Dfp#[final, String, trapName, "nextAfter", if, !=, getField, getRadixDigits, x, getField, getRadixDigits, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, newInstance, getZero, =, result.nans, QNAN, return, dotrap, DfpField.FLAG_INVALID, trapName, x, result, boolean, up, false, Dfp, result, Dfp, inc, if, this, lessThan, x, =, up, true, if, equals, x, return, newInstance, x, if, lessThan, getZero, =, up, !, up, if, up, =, inc, power10, +, -, intLog10, getDecimalDigits, 1, =, inc, copysign, inc, this, if, this, equals, getZero, =, inc, power10K, -, MIN_EXP, mant.length, 1, if, inc, equals, getZero, =, result, copysign, newInstance, getZero, this, =, result, add, inc, =, inc, power10, intLog10, =, inc, copysign, inc, this, if, this, equals, inc, =, inc, inc, divide, power10, getDecimalDigits, =, inc, inc, divide, power10, -, getDecimalDigits, 1, if, this, equals, getZero, =, inc, power10K, -, MIN_EXP, mant.length, 1, if, inc, equals, getZero, =, result, copysign, newInstance, getZero, this, =, result, subtract, inc, if, &&, ==, result, classify, INFINITE, !=, this, classify, INFINITE, getField, setIEEEFlagsBits, DfpField.FLAG_INEXACT, =, result, dotrap, DfpField.FLAG_INEXACT, trapName, x, result, if, &&, result, equals, getZero, ==, this, equals, getZero, false, getField, setIEEEFlagsBits, DfpField.FLAG_INEXACT, =, result, dotrap, DfpField.FLAG_INEXACT, trapName, x, result, return, result]
org.apache.commons.math4.dfp:DfpField:getRadixDigits:null#[return, radixDigits]
org.apache.commons.math4.dfp:DfpField:setRoundingMode:RoundingMode#[=, rMode, mode]
org.apache.commons.math4.dfp:DfpField:getRoundingMode:null#[return, rMode]
org.apache.commons.math4.dfp:DfpField:getIEEEFlags:null#[return, ieeeFlags]
org.apache.commons.math4.dfp:DfpField:clearIEEEFlags:null#[=, ieeeFlags, 0]
org.apache.commons.math4.dfp:DfpField:setIEEEFlags:int#[=, ieeeFlags, &, flags, |, FLAG_INVALID, FLAG_DIV_ZERO, FLAG_OVERFLOW, FLAG_UNDERFLOW, FLAG_INEXACT]
org.apache.commons.math4.dfp:DfpField:setIEEEFlagsBits:int#[|=, ieeeFlags, &, bits, |, FLAG_INVALID, FLAG_DIV_ZERO, FLAG_OVERFLOW, FLAG_UNDERFLOW, FLAG_INEXACT]
org.apache.commons.math4.dfp:DfpField:newDfp:null#[return, new, Dfp, this]
org.apache.commons.math4.dfp:DfpField:newDfp:byte#[return, new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:int#[return, new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:long#[return, new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:double#[return, new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:Dfp#[return, new, Dfp, d]
org.apache.commons.math4.dfp:DfpField:newDfp:String#[return, new, Dfp, this, s]
org.apache.commons.math4.dfp:DfpField:newDfp:byte+byte#[return, new, Dfp, this, sign, nans]
org.apache.commons.math4.dfp:DfpField:getZero:null#[return, zero]
org.apache.commons.math4.dfp:DfpField:getOne:null#[return, one]
org.apache.commons.math4.dfp:DfpField:getRuntimeClass:null#[return, Dfp]
org.apache.commons.math4.dfp:DfpField:getTwo:null#[return, two]
org.apache.commons.math4.dfp:DfpField:getSqr2:null#[return, sqr2]
org.apache.commons.math4.dfp:DfpField:getSqr2Split:null#[return, sqr2Split, clone]
org.apache.commons.math4.dfp:DfpField:getSqr2Reciprocal:null#[return, sqr2Reciprocal]
org.apache.commons.math4.dfp:DfpField:getSqr3:null#[return, sqr3]
org.apache.commons.math4.dfp:DfpField:getSqr3Reciprocal:null#[return, sqr3Reciprocal]
org.apache.commons.math4.dfp:DfpField:getPi:null#[return, pi]
org.apache.commons.math4.dfp:DfpField:getPiSplit:null#[return, piSplit, clone]
org.apache.commons.math4.dfp:DfpField:getE:null#[return, e]
org.apache.commons.math4.dfp:DfpField:getESplit:null#[return, eSplit, clone]
org.apache.commons.math4.dfp:DfpField:getLn2:null#[return, ln2]
org.apache.commons.math4.dfp:DfpField:getLn2Split:null#[return, ln2Split, clone]
org.apache.commons.math4.dfp:DfpField:getLn5:null#[return, ln5]
org.apache.commons.math4.dfp:DfpField:getLn5Split:null#[return, ln5Split, clone]
org.apache.commons.math4.dfp:DfpField:getLn10:null#[return, ln10]
org.apache.commons.math4.dfp:DfpField:split:String#[Dfp, result, Dfp, 2, boolean, leading, true, int, sp, 0, int, sig, 0, char, buf, char, a, length, for, int, i, 0, <, i, buf.length, ++, i, =, buf, i, a, charAt, i, if, &&, >=, buf, i, '1', <=, buf, i, '9', =, leading, false, if, ==, buf, i, '.', +=, sig, %, -, 400, sig, 4, =, leading, false, if, ==, sig, *, /, radixDigits, 2, 4, =, sp, i, break, if, &&, &&, >=, buf, i, '0', <=, buf, i, '9', !, leading, ++, sig, =, result, 0, new, Dfp, this, new, String, buf, 0, sp, for, int, i, 0, <, i, buf.length, ++, i, =, buf, i, a, charAt, i, if, &&, &&, >=, buf, i, '0', <=, buf, i, '9', <, i, sp, =, buf, i, '0', =, result, 1, new, Dfp, this, new, String, buf, return, result]
org.apache.commons.math4.dfp:DfpField:computeStringConstants:int#[if, ||, ==, sqr2String, null, <, sqr2String, length, -, highPrecisionDecimalDigits, 3, final, DfpField, highPrecisionField, new, DfpField, highPrecisionDecimalDigits, false, final, Dfp, highPrecisionOne, new, Dfp, highPrecisionField, 1, final, Dfp, highPrecisionTwo, new, Dfp, highPrecisionField, 2, final, Dfp, highPrecisionThree, new, Dfp, highPrecisionField, 3, final, Dfp, highPrecisionSqr2, highPrecisionTwo, sqrt, =, sqr2String, highPrecisionSqr2, toString, =, sqr2ReciprocalString, highPrecisionOne, divide, highPrecisionSqr2, toString, final, Dfp, highPrecisionSqr3, highPrecisionThree, sqrt, =, sqr3String, highPrecisionSqr3, toString, =, sqr3ReciprocalString, highPrecisionOne, divide, highPrecisionSqr3, toString, =, piString, computePi, highPrecisionOne, highPrecisionTwo, highPrecisionThree, toString, =, eString, computeExp, highPrecisionOne, highPrecisionOne, toString, =, ln2String, computeLn, highPrecisionTwo, highPrecisionOne, highPrecisionTwo, toString, =, ln5String, computeLn, new, Dfp, highPrecisionField, 5, highPrecisionOne, highPrecisionTwo, toString, =, ln10String, computeLn, new, Dfp, highPrecisionField, 10, highPrecisionOne, highPrecisionTwo, toString]
org.apache.commons.math4.dfp:DfpField:computePi:Dfp+Dfp+Dfp#[Dfp, sqrt2, two, sqrt, Dfp, yk, sqrt2, subtract, one, Dfp, four, two, add, two, Dfp, two2kp3, two, Dfp, ak, two, multiply, three, subtract, two, multiply, sqrt2, for, int, i, 1, <, i, 20, ++, i, final, Dfp, ykM1, yk, final, Dfp, y2, yk, multiply, yk, final, Dfp, oneMinusY4, one, subtract, y2, multiply, y2, final, Dfp, s, oneMinusY4, sqrt, sqrt, =, yk, one, subtract, s, divide, one, add, s, =, two2kp3, two2kp3, multiply, four, final, Dfp, p, one, add, yk, final, Dfp, p2, p, multiply, p, =, ak, ak, multiply, p2, multiply, p2, subtract, two2kp3, multiply, yk, multiply, one, add, yk, add, yk, multiply, yk, if, yk, equals, ykM1, break, return, one, divide, ak]
org.apache.commons.math4.dfp:DfpField:computeExp:Dfp+Dfp#[Dfp, y, new, Dfp, one, Dfp, py, new, Dfp, one, Dfp, f, new, Dfp, one, Dfp, fi, new, Dfp, one, Dfp, x, new, Dfp, one, for, int, i, 0, <, i, 10000, ++, i, =, x, x, multiply, a, =, y, y, add, x, divide, f, =, fi, fi, add, one, =, f, f, multiply, fi, if, y, equals, py, break, =, py, new, Dfp, y, return, y]
org.apache.commons.math4.dfp:DfpField:computeLn:Dfp+Dfp+Dfp#[int, den, 1, Dfp, x, a, add, new, Dfp, a, getField, -, 1, divide, a, add, one, Dfp, y, new, Dfp, x, Dfp, num, new, Dfp, x, Dfp, py, new, Dfp, y, for, int, i, 0, <, i, 10000, ++, i, =, num, num, multiply, x, =, num, num, multiply, x, +=, den, 2, Dfp, t, num, divide, den, =, y, y, add, t, if, y, equals, py, break, =, py, new, Dfp, y, return, y, multiply, two]
org.apache.commons.math4.dfp:DfpMath:split:DfpField+String#[Dfp, result, Dfp, 2, char, buf, boolean, leading, true, int, sp, 0, int, sig, 0, =, buf, char, a, length, for, int, i, 0, <, i, buf.length, ++, i, =, buf, i, a, charAt, i, if, &&, >=, buf, i, '1', <=, buf, i, '9', =, leading, false, if, ==, buf, i, '.', +=, sig, %, -, 400, sig, 4, =, leading, false, if, ==, sig, *, /, field, getRadixDigits, 2, 4, =, sp, i, break, if, &&, &&, >=, buf, i, '0', <=, buf, i, '9', !, leading, ++, sig, =, result, 0, field, newDfp, new, String, buf, 0, sp, for, int, i, 0, <, i, buf.length, ++, i, =, buf, i, a, charAt, i, if, &&, &&, >=, buf, i, '0', <=, buf, i, '9', <, i, sp, =, buf, i, '0', =, result, 1, field, newDfp, new, String, buf, return, result]
org.apache.commons.math4.dfp:DfpMath:split:Dfp#[final, Dfp, result, Dfp, 2, final, Dfp, shift, a, multiply, a, power10K, /, a, getRadixDigits, 2, =, result, 0, a, add, shift, subtract, shift, =, result, 1, a, subtract, result, 0, return, result]
org.apache.commons.math4.dfp:DfpMath:splitMult:Dfp[]+Dfp[]#[final, Dfp, result, Dfp, 2, =, result, 1, a, 0, getZero, =, result, 0, a, 0, multiply, b, 0, if, ||, ==, result, 0, classify, Dfp.INFINITE, result, 0, equals, result, 1, return, result, =, result, 1, a, 0, multiply, b, 1, add, a, 1, multiply, b, 0, add, a, 1, multiply, b, 1, return, result]
org.apache.commons.math4.dfp:DfpMath:splitDiv:Dfp[]+Dfp[]#[final, Dfp, result, =, result, Dfp, 2, =, result, 0, a, 0, divide, b, 0, =, result, 1, a, 1, multiply, b, 0, subtract, a, 0, multiply, b, 1, =, result, 1, result, 1, divide, b, 0, multiply, b, 0, add, b, 0, multiply, b, 1, return, result]
org.apache.commons.math4.dfp:DfpMath:splitPow:Dfp[]+int#[boolean, invert, false, Dfp, r, Dfp, 2, Dfp, result, Dfp, 2, =, result, 0, base, 0, getOne, =, result, 1, base, 0, getZero, if, ==, a, 0, return, result, 0, add, result, 1, if, <, a, 0, =, invert, true, =, a, -, a, do, =, r, 0, new, Dfp, base, 0, =, r, 1, new, Dfp, base, 1, int, trial, 1, int, prevtrial, while, true, =, prevtrial, trial, *=, trial, 2, if, >, trial, a, break, =, r, splitMult, r, r, =, trial, prevtrial, -=, a, trial, =, result, splitMult, result, r, >=, a, 1, =, result, 0, result, 0, add, result, 1, if, invert, =, result, 0, base, 0, getOne, divide, result, 0, return, result, 0]
org.apache.commons.math4.dfp:DfpMath:pow:Dfp+int#[boolean, invert, false, Dfp, result, base, getOne, if, ==, a, 0, return, result, if, <, a, 0, =, invert, true, =, a, -, a, do, Dfp, r, new, Dfp, base, Dfp, prevr, int, trial, 1, int, prevtrial, do, =, prevr, new, Dfp, r, =, prevtrial, trial, =, r, r, multiply, r, *=, trial, 2, >, a, trial, =, r, prevr, =, trial, prevtrial, -=, a, trial, =, result, result, multiply, r, >=, a, 1, if, invert, =, result, base, getOne, divide, result, return, base, newInstance, result]
org.apache.commons.math4.dfp:DfpMath:exp:Dfp#[final, Dfp, inta, a, rint, final, Dfp, fraca, a, subtract, inta, final, int, ia, inta, intValue, if, >, ia, 2147483646, return, a, newInstance, byte, 1, Dfp.INFINITE, if, <, ia, -, 2147483646, return, a, newInstance, final, Dfp, einta, splitPow, a, getField, getESplit, ia, final, Dfp, efraca, expInternal, fraca, return, einta, multiply, efraca]
org.apache.commons.math4.dfp:DfpMath:expInternal:Dfp#[Dfp, y, a, getOne, Dfp, x, a, getOne, Dfp, fact, a, getOne, Dfp, py, new, Dfp, y, for, int, i, 1, <, i, 90, ++, i, =, x, x, multiply, a, =, fact, fact, divide, i, =, y, y, add, x, multiply, fact, if, y, equals, py, break, =, py, new, Dfp, y, return, y]
org.apache.commons.math4.dfp:DfpMath:log:Dfp#[int, lr, Dfp, x, int, ix, int, p2, 0, if, ||, a, equals, a, getZero, a, lessThan, a, getZero, a, isNaN, a, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, return, a, dotrap, DfpField.FLAG_INVALID, "ln", a, a, newInstance, byte, 1, Dfp.QNAN, if, ==, a, classify, Dfp.INFINITE, return, a, =, x, new, Dfp, a, =, lr, x, log10K, =, x, x, divide, pow, a, newInstance, 10000, lr, =, ix, x, floor, intValue, while, >, ix, 2, >>=, ix, 1, ++, p2, Dfp, spx, split, x, Dfp, spy, Dfp, 2, =, spy, 0, pow, a, getTwo, p2, =, spx, 0, spx, 0, divide, spy, 0, =, spx, 1, spx, 1, divide, spy, 0, =, spy, 0, a, newInstance, "1.33333", while, spx, 0, add, spx, 1, greaterThan, spy, 0, =, spx, 0, spx, 0, divide, 2, =, spx, 1, spx, 1, divide, 2, ++, p2, Dfp, spz, logInternal, spx, =, spx, 0, a, newInstance, new, StringBuilder, append, +, p2, *, 4, lr, toString, =, spx, 1, a, getZero, =, spy, splitMult, a, getField, getLn2Split, spx, =, spz, 0, spz, 0, add, spy, 0, =, spz, 1, spz, 1, add, spy, 1, =, spx, 0, a, newInstance, new, StringBuilder, append, *, 4, lr, toString, =, spx, 1, a, getZero, =, spy, splitMult, a, getField, getLn5Split, spx, =, spz, 0, spz, 0, add, spy, 0, =, spz, 1, spz, 1, add, spy, 1, return, a, newInstance, spz, 0, add, spz, 1]
org.apache.commons.math4.dfp:DfpMath:logInternal:Dfp#[Dfp, t, a, 0, divide, 4, add, a, 1, divide, 4, Dfp, x, t, add, a, 0, newInstance, "-0.25", divide, t, add, a, 0, newInstance, "0.25", Dfp, y, new, Dfp, x, Dfp, num, new, Dfp, x, Dfp, py, new, Dfp, y, int, den, 1, for, int, i, 0, <, i, 10000, ++, i, =, num, num, multiply, x, =, num, num, multiply, x, +=, den, 2, =, t, num, divide, den, =, y, y, add, t, if, y, equals, py, break, =, py, new, Dfp, y, =, y, y, multiply, a, 0, getTwo, return, split, y]
org.apache.commons.math4.dfp:DfpMath:pow:Dfp+Dfp#[if, !=, x, getField, getRadixDigits, y, getField, getRadixDigits, x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, final, Dfp, result, x, newInstance, x, getZero, =, result.nans, Dfp.QNAN, return, x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, result, final, Dfp, zero, x, getZero, final, Dfp, one, x, getOne, final, Dfp, two, x, getTwo, boolean, invert, false, int, ui, if, y, equals, zero, return, x, newInstance, one, if, y, equals, one, if, x, isNaN, x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, return, x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, return, x, if, ||, x, isNaN, y, isNaN, x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, return, x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, newInstance, byte, 1, Dfp.QNAN, if, x, equals, zero, if, Dfp, copysign, one, x, greaterThan, zero, if, y, greaterThan, zero, return, x, newInstance, zero, return, x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, if, &&, &&, ==, y, classify, Dfp.FINITE, y, rint, equals, y, !, y, remainder, two, equals, zero, if, y, greaterThan, zero, return, x, newInstance, zero, negate, return, x, newInstance, x, newInstance, byte, -, 1, Dfp.INFINITE, if, y, greaterThan, zero, return, x, newInstance, zero, return, x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, if, x, lessThan, zero, =, x, x, negate, =, invert, true, if, &&, x, greaterThan, one, ==, y, classify, Dfp.INFINITE, if, y, greaterThan, zero, return, y, return, x, newInstance, zero, if, &&, x, lessThan, one, ==, y, classify, Dfp.INFINITE, if, y, greaterThan, zero, return, x, newInstance, zero, return, x, newInstance, Dfp, copysign, y, one, if, &&, x, equals, one, ==, y, classify, Dfp.INFINITE, x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, return, x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, newInstance, byte, 1, Dfp.QNAN, if, ==, x, classify, Dfp.INFINITE, if, invert, if, &&, &&, ==, y, classify, Dfp.FINITE, y, rint, equals, y, !, y, remainder, two, equals, zero, if, y, greaterThan, zero, return, x, newInstance, x, newInstance, byte, -, 1, Dfp.INFINITE, return, x, newInstance, zero, negate, if, y, greaterThan, zero, return, x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, return, x, newInstance, zero, if, y, greaterThan, zero, return, x, return, x, newInstance, zero, if, &&, invert, !, y, rint, equals, y, x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, return, x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, newInstance, byte, 1, Dfp.QNAN, Dfp, r, if, &&, y, lessThan, x, newInstance, 100000000, y, greaterThan, x, newInstance, -, 100000000, final, Dfp, u, y, rint, =, ui, u, intValue, final, Dfp, v, y, subtract, u, if, v, unequal, zero, final, Dfp, a, v, multiply, log, x, final, Dfp, b, a, divide, x, getField, getLn2, rint, final, Dfp, c, a, subtract, b, multiply, x, getField, getLn2, =, r, splitPow, split, x, ui, =, r, r, multiply, pow, two, b, intValue, =, r, r, multiply, exp, c, =, r, splitPow, split, x, ui, =, r, exp, log, x, multiply, y, if, &&, invert, y, rint, equals, y, !, y, remainder, two, equals, zero, =, r, r, negate, return, x, newInstance, r]
org.apache.commons.math4.dfp:DfpMath:sinInternal:Dfp#[Dfp, c, a, 0, add, a, 1, Dfp, y, c, =, c, c, multiply, c, Dfp, x, y, Dfp, fact, a, 0, getOne, Dfp, py, new, Dfp, y, for, int, i, 3, <, i, 90, +=, i, 2, =, x, x, multiply, c, =, x, x, negate, =, fact, fact, divide, *, -, i, 1, i, =, y, y, add, x, multiply, fact, if, y, equals, py, break, =, py, new, Dfp, y, return, y]
org.apache.commons.math4.dfp:DfpMath:cosInternal:Dfp#[final, Dfp, one, a, 0, getOne, Dfp, x, one, Dfp, y, one, Dfp, c, a, 0, add, a, 1, =, c, c, multiply, c, Dfp, fact, one, Dfp, py, new, Dfp, y, for, int, i, 2, <, i, 90, +=, i, 2, =, x, x, multiply, c, =, x, x, negate, =, fact, fact, divide, *, -, i, 1, i, =, y, y, add, x, multiply, fact, if, y, equals, py, break, =, py, new, Dfp, y, return, y]
org.apache.commons.math4.dfp:DfpMath:sin:Dfp#[final, Dfp, pi, a, getField, getPi, final, Dfp, zero, a, getField, getZero, boolean, neg, false, Dfp, x, a, remainder, pi, multiply, 2, if, x, lessThan, zero, =, x, x, negate, =, neg, true, if, x, greaterThan, pi, divide, 2, =, x, pi, subtract, x, Dfp, y, if, x, lessThan, pi, divide, 4, =, y, sinInternal, split, x, final, Dfp, c, Dfp, 2, final, Dfp, piSplit, a, getField, getPiSplit, =, c, 0, piSplit, 0, divide, 2, subtract, x, =, c, 1, piSplit, 1, divide, 2, =, y, cosInternal, c, if, neg, =, y, y, negate, return, a, newInstance, y]
org.apache.commons.math4.dfp:DfpMath:cos:Dfp#[final, Dfp, pi, a, getField, getPi, final, Dfp, zero, a, getField, getZero, boolean, neg, false, Dfp, x, a, remainder, pi, multiply, 2, if, x, lessThan, zero, =, x, x, negate, if, x, greaterThan, pi, divide, 2, =, x, pi, subtract, x, =, neg, true, Dfp, y, if, x, lessThan, pi, divide, 4, Dfp, c, Dfp, 2, =, c, 0, x, =, c, 1, zero, =, y, cosInternal, c, final, Dfp, c, Dfp, 2, final, Dfp, piSplit, a, getField, getPiSplit, =, c, 0, piSplit, 0, divide, 2, subtract, x, =, c, 1, piSplit, 1, divide, 2, =, y, sinInternal, c, if, neg, =, y, y, negate, return, a, newInstance, y]
org.apache.commons.math4.dfp:DfpMath:tan:Dfp#[return, sin, a, divide, cos, a]
org.apache.commons.math4.dfp:DfpMath:atanInternal:Dfp#[Dfp, y, new, Dfp, a, Dfp, x, new, Dfp, y, Dfp, py, new, Dfp, y, for, int, i, 3, <, i, 90, +=, i, 2, =, x, x, multiply, a, =, x, x, multiply, a, =, x, x, negate, =, y, y, add, x, divide, i, if, y, equals, py, break, =, py, new, Dfp, y, return, y]
org.apache.commons.math4.dfp:DfpMath:atan:Dfp#[final, Dfp, zero, a, getField, getZero, final, Dfp, one, a, getField, getOne, final, Dfp, sqr2Split, a, getField, getSqr2Split, final, Dfp, piSplit, a, getField, getPiSplit, boolean, recp, false, boolean, neg, false, boolean, sub, false, final, Dfp, ty, sqr2Split, 0, subtract, one, add, sqr2Split, 1, Dfp, x, new, Dfp, a, if, x, lessThan, zero, =, neg, true, =, x, x, negate, if, x, greaterThan, one, =, recp, true, =, x, one, divide, x, if, x, greaterThan, ty, Dfp, sty, Dfp, 2, =, sub, true, =, sty, 0, sqr2Split, 0, subtract, one, =, sty, 1, sqr2Split, 1, Dfp, xs, split, x, Dfp, ds, splitMult, xs, sty, =, ds, 0, ds, 0, add, one, =, xs, 0, xs, 0, subtract, sty, 0, =, xs, 1, xs, 1, subtract, sty, 1, =, xs, splitDiv, xs, ds, =, x, xs, 0, add, xs, 1, Dfp, y, atanInternal, x, if, sub, =, y, y, add, piSplit, 0, divide, 8, add, piSplit, 1, divide, 8, if, recp, =, y, piSplit, 0, divide, 2, subtract, y, add, piSplit, 1, divide, 2, if, neg, =, y, y, negate, return, a, newInstance, y]
org.apache.commons.math4.dfp:DfpMath:asin:Dfp#[return, atan, a, divide, a, getOne, subtract, a, multiply, a, sqrt]
org.apache.commons.math4.dfp:DfpMath:acos:Dfp#[Dfp, result, boolean, negative, false, if, a, lessThan, a, getZero, =, negative, true, =, a, Dfp, copysign, a, a, getOne, =, result, atan, a, getOne, subtract, a, multiply, a, sqrt, divide, a, if, negative, =, result, a, getField, getPi, subtract, result, return, a, newInstance, result]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:probability:int+int#[if, <, x1, x0, throw, new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, return, -, cumulativeProbability, x1, cumulativeProbability, x0]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, int, lower, getSupportLowerBound, if, ==, p, 0.0, return, lower, if, ==, lower, Integer.MIN_VALUE, if, >=, checkedCumulativeProbability, lower, p, return, lower, -=, lower, 1, int, upper, getSupportUpperBound, if, ==, p, 1.0, return, upper, final, double, mu, getNumericalMean, final, double, sigma, FastMath, sqrt, getNumericalVariance, final, boolean, chebyshevApplies, !, ||, Double, isInfinite, mu, Double, isNaN, mu, Double, isInfinite, sigma, Double, isNaN, sigma, ==, sigma, 0.0, if, chebyshevApplies, double, k, FastMath, sqrt, /, -, 1.0, p, p, double, tmp, -, mu, *, k, sigma, if, >, tmp, lower, =, lower, -, int, FastMath, ceil, tmp, 1, =, k, /, 1.0, k, =, tmp, +, mu, *, k, sigma, if, <, tmp, upper, =, upper, -, int, FastMath, ceil, tmp, 1, return, solveInverseCumulativeProbability, p, lower, upper]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:solveInverseCumulativeProbability:double+int+int#[while, <, +, lower, 1, upper, int, xm, /, +, lower, upper, 2, if, ||, <, xm, lower, >, xm, upper, =, xm, +, lower, /, -, upper, lower, 2, double, pm, checkedCumulativeProbability, xm, if, >=, pm, p, =, upper, xm, =, lower, xm, return, upper]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:reseedRandomGenerator:long#[random, setSeed, seed]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:sample:null#[return, inverseCumulativeProbability, random, nextDouble]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:sample:int#[if, <=, sampleSize, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, int, out, int, sampleSize, for, int, i, 0, <, i, sampleSize, ++, i, =, out, i, sample, return, out]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:checkedCumulativeProbability:int#[double, result, Double.NaN, =, result, cumulativeProbability, argument, if, Double, isNaN, result, throw, new, MathInternalError, LocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument, return, result]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:logProbability:int#[return, FastMath, log, probability, x]
org.apache.commons.math4.distribution:AbstractMultivariateRealDistribution:reseedRandomGenerator:long#[random, setSeed, seed]
org.apache.commons.math4.distribution:AbstractMultivariateRealDistribution:getDimension:null#[return, dimension]
org.apache.commons.math4.distribution:AbstractMultivariateRealDistribution:sample:int#[if, <=, sampleSize, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, final, double, out, double, sampleSize, dimension, for, int, i, 0, <, i, sampleSize, ++, i, =, out, i, sample, return, out]
org.apache.commons.math4.distribution:AbstractRealDistribution:probability:double+double#[if, >, x0, x1, throw, new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, return, -, cumulativeProbability, x1, cumulativeProbability, x0]
org.apache.commons.math4.distribution:AbstractRealDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, double, lowerBound, getSupportLowerBound, if, ==, p, 0.0, return, lowerBound, double, upperBound, getSupportUpperBound, if, ==, p, 1.0, return, upperBound, final, double, mu, getNumericalMean, final, double, sig, FastMath, sqrt, getNumericalVariance, final, boolean, chebyshevApplies, =, chebyshevApplies, !, ||, Double, isInfinite, mu, Double, isNaN, mu, Double, isInfinite, sig, Double, isNaN, sig, if, ==, lowerBound, Double.NEGATIVE_INFINITY, if, chebyshevApplies, =, lowerBound, -, mu, *, sig, FastMath, sqrt, /, -, 1., p, p, =, lowerBound, -, 1.0, while, >=, cumulativeProbability, lowerBound, p, *=, lowerBound, 2.0, if, ==, upperBound, Double.POSITIVE_INFINITY, if, chebyshevApplies, =, upperBound, +, mu, *, sig, FastMath, sqrt, /, p, -, 1., p, =, upperBound, 1.0, while, <, cumulativeProbability, upperBound, p, *=, upperBound, 2.0, final, UnivariateFunction, toSolve, new, UnivariateFunction, Override, public, double, value, final, double, x, return, -, cumulativeProbability, x, p, double, x, UnivariateSolverUtils, solve, toSolve, lowerBound, upperBound, getSolverAbsoluteAccuracy, if, !, isSupportConnected, final, double, dx, getSolverAbsoluteAccuracy, if, >=, -, x, dx, getSupportLowerBound, double, px, cumulativeProbability, x, if, ==, cumulativeProbability, -, x, dx, px, =, upperBound, x, while, >, -, upperBound, lowerBound, dx, final, double, midPoint, *, 0.5, +, lowerBound, upperBound, if, <, cumulativeProbability, midPoint, px, =, lowerBound, midPoint, =, upperBound, midPoint, return, upperBound, return, x]
org.apache.commons.math4.distribution:AbstractRealDistribution:getSolverAbsoluteAccuracy:null#[return, SOLVER_DEFAULT_ABSOLUTE_ACCURACY]
org.apache.commons.math4.distribution:AbstractRealDistribution:reseedRandomGenerator:long#[random, setSeed, seed]
org.apache.commons.math4.distribution:AbstractRealDistribution:sample:null#[return, inverseCumulativeProbability, random, nextDouble]
org.apache.commons.math4.distribution:AbstractRealDistribution:sample:int#[if, <=, sampleSize, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, double, out, double, sampleSize, for, int, i, 0, <, i, sampleSize, ++, i, =, out, i, sample, return, out]
org.apache.commons.math4.distribution:AbstractRealDistribution:probability:double#[return, 0d]
org.apache.commons.math4.distribution:AbstractRealDistribution:logDensity:double#[return, FastMath, log, density, x]
org.apache.commons.math4.distribution:BetaDistribution:getAlpha:null#[return, alpha]
org.apache.commons.math4.distribution:BetaDistribution:getBeta:null#[return, beta]
org.apache.commons.math4.distribution:BetaDistribution:recomputeZ:null#[if, Double, isNaN, z, =, z, -, +, Gamma, logGamma, alpha, Gamma, logGamma, beta, Gamma, logGamma, +, alpha, beta]
org.apache.commons.math4.distribution:BetaDistribution:density:double#[final, double, logDensity, logDensity, x, return, ==, logDensity, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logDensity]
org.apache.commons.math4.distribution:BetaDistribution:logDensity:double#[recomputeZ, if, ||, <, x, 0, >, x, 1, return, Double.NEGATIVE_INFINITY, if, ==, x, 0, if, <, alpha, 1, throw, new, NumberIsTooSmallException, LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha, 1, false, return, Double.NEGATIVE_INFINITY, if, ==, x, 1, if, <, beta, 1, throw, new, NumberIsTooSmallException, LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta, 1, false, return, Double.NEGATIVE_INFINITY, double, logX, FastMath, log, x, double, log1mX, FastMath, log1p, -, x, return, -, +, *, -, alpha, 1, logX, *, -, beta, 1, log1mX, z]
org.apache.commons.math4.distribution:BetaDistribution:cumulativeProbability:double#[if, <=, x, 0, return, 0, if, >=, x, 1, return, 1, return, Beta, regularizedBeta, x, alpha, beta]
org.apache.commons.math4.distribution:BetaDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:BetaDistribution:getNumericalMean:null#[final, double, a, getAlpha, return, /, a, +, a, getBeta]
org.apache.commons.math4.distribution:BetaDistribution:getNumericalVariance:null#[final, double, a, getAlpha, final, double, b, getBeta, final, double, alphabetasum, +, a, b, return, /, *, a, b, *, *, alphabetasum, alphabetasum, +, alphabetasum, 1]
org.apache.commons.math4.distribution:BetaDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:BetaDistribution:getSupportUpperBound:null#[return, 1]
org.apache.commons.math4.distribution:BetaDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:BetaDistribution:sample:null#[return, ChengBetaSampler, sample, random, alpha, beta]
org.apache.commons.math4.distribution:BinomialDistribution:getNumberOfTrials:null#[return, numberOfTrials]
org.apache.commons.math4.distribution:BinomialDistribution:getProbabilityOfSuccess:null#[return, probabilityOfSuccess]
org.apache.commons.math4.distribution:BinomialDistribution:probability:int#[final, double, logProbability, logProbability, x, return, ==, logProbability, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logProbability]
org.apache.commons.math4.distribution:BinomialDistribution:logProbability:int#[if, ==, numberOfTrials, 0, return, ==, x, 0, 0., Double.NEGATIVE_INFINITY, double, ret, if, ||, <, x, 0, >, x, numberOfTrials, =, ret, Double.NEGATIVE_INFINITY, =, ret, SaddlePointExpansion, logBinomialProbability, x, numberOfTrials, probabilityOfSuccess, -, 1.0, probabilityOfSuccess, return, ret]
org.apache.commons.math4.distribution:BinomialDistribution:cumulativeProbability:int#[double, ret, if, <, x, 0, =, ret, 0.0, if, >=, x, numberOfTrials, =, ret, 1.0, =, ret, -, 1.0, Beta, regularizedBeta, probabilityOfSuccess, +, x, 1.0, -, numberOfTrials, x, return, ret]
org.apache.commons.math4.distribution:BinomialDistribution:getNumericalMean:null#[return, *, numberOfTrials, probabilityOfSuccess]
org.apache.commons.math4.distribution:BinomialDistribution:getNumericalVariance:null#[final, double, p, probabilityOfSuccess, return, *, numberOfTrials, p, -, 1, p]
org.apache.commons.math4.distribution:BinomialDistribution:getSupportLowerBound:null#[return, <, probabilityOfSuccess, 1.0, 0, numberOfTrials]
org.apache.commons.math4.distribution:BinomialDistribution:getSupportUpperBound:null#[return, >, probabilityOfSuccess, 0.0, numberOfTrials, 0]
org.apache.commons.math4.distribution:BinomialDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:CauchyDistribution:cumulativeProbability:double#[return, +, 0.5, /, FastMath, atan, /, -, x, median, scale, FastMath.PI]
org.apache.commons.math4.distribution:CauchyDistribution:getMedian:null#[return, median]
org.apache.commons.math4.distribution:CauchyDistribution:getScale:null#[return, scale]
org.apache.commons.math4.distribution:CauchyDistribution:density:double#[final, double, dev, -, x, median, return, *, /, 1, FastMath.PI, /, scale, +, *, dev, dev, *, scale, scale]
org.apache.commons.math4.distribution:CauchyDistribution:inverseCumulativeProbability:double#[double, ret, if, ||, <, p, 0, >, p, 1, throw, new, OutOfRangeException, p, 0, 1, if, ==, p, 0, =, ret, Double.NEGATIVE_INFINITY, if, ==, p, 1, =, ret, Double.POSITIVE_INFINITY, =, ret, +, median, *, scale, FastMath, tan, *, FastMath.PI, -, p, .5, return, ret]
org.apache.commons.math4.distribution:CauchyDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:CauchyDistribution:getNumericalMean:null#[return, Double.NaN]
org.apache.commons.math4.distribution:CauchyDistribution:getNumericalVariance:null#[return, Double.NaN]
org.apache.commons.math4.distribution:CauchyDistribution:getSupportLowerBound:null#[return, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:CauchyDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:CauchyDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getDegreesOfFreedom:null#[return, *, gamma, getShape, 2.0]
org.apache.commons.math4.distribution:ChiSquaredDistribution:density:double#[return, gamma, density, x]
org.apache.commons.math4.distribution:ChiSquaredDistribution:logDensity:double#[return, gamma, logDensity, x]
org.apache.commons.math4.distribution:ChiSquaredDistribution:cumulativeProbability:double#[return, gamma, cumulativeProbability, x]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getNumericalMean:null#[return, getDegreesOfFreedom]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getNumericalVariance:null#[return, *, 2, getDegreesOfFreedom]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:ChiSquaredDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:ConstantRealDistribution:density:double#[return, ==, x, value, 1, 0]
org.apache.commons.math4.distribution:ConstantRealDistribution:cumulativeProbability:double#[return, <, x, value, 0, 1]
org.apache.commons.math4.distribution:ConstantRealDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, return, value]
org.apache.commons.math4.distribution:ConstantRealDistribution:getNumericalMean:null#[return, value]
org.apache.commons.math4.distribution:ConstantRealDistribution:getNumericalVariance:null#[return, 0]
org.apache.commons.math4.distribution:ConstantRealDistribution:getSupportLowerBound:null#[return, value]
org.apache.commons.math4.distribution:ConstantRealDistribution:getSupportUpperBound:null#[return, value]
org.apache.commons.math4.distribution:ConstantRealDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:ConstantRealDistribution:sample:null#[return, value]
org.apache.commons.math4.distribution:EnumeratedDistribution:reseedRandomGenerator:long#[random, setSeed, seed]
org.apache.commons.math4.distribution:EnumeratedDistribution:probability:T#[double, probability, 0, for, int, i, 0, <, i, probabilities.length, ++, i, if, ||, &&, ==, x, null, ==, singletons, get, i, null, &&, !=, x, null, x, equals, singletons, get, i, +=, probability, probabilities, i, return, probability]
org.apache.commons.math4.distribution:EnumeratedDistribution:getPmf:null#[final, List, Pair, T, Double, samples, new, ArrayList, Pair, T, Double, probabilities.length, for, int, i, 0, <, i, probabilities.length, ++, i, samples, add, new, Pair, T, Double, singletons, get, i, probabilities, i, return, samples]
org.apache.commons.math4.distribution:EnumeratedDistribution:sample:null#[final, double, randomValue, random, nextDouble, int, index, Arrays, binarySearch, cumulativeProbabilities, randomValue, if, <, index, 0, =, index, -, -, index, 1, if, &&, &&, >=, index, 0, <, index, probabilities.length, <, randomValue, cumulativeProbabilities, index, return, singletons, get, index, return, singletons, get, -, singletons, size, 1]
org.apache.commons.math4.distribution:EnumeratedDistribution:sample:int#[if, <=, sampleSize, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, final, Object, out, Object, sampleSize, for, int, i, 0, <, i, sampleSize, ++, i, =, out, i, sample, return, out]
org.apache.commons.math4.distribution:EnumeratedDistribution:sample:int+T[]#[if, <=, sampleSize, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, if, ==, array, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, T, out, if, <, array.length, sampleSize, SuppressWarnings, "unchecked", final, T, unchecked, T, Array, newInstance, array, getClass, getComponentType, sampleSize, =, out, unchecked, =, out, array, for, int, i, 0, <, i, sampleSize, ++, i, =, out, i, sample, return, out]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:createDistribution:int[]+double[]#[if, !=, singletons.length, probabilities.length, throw, new, DimensionMismatchException, probabilities.length, singletons.length, final, List, Pair, Integer, Double, samples, new, ArrayList, Pair, Integer, Double, singletons.length, for, int, i, 0, <, i, singletons.length, ++, i, samples, add, new, Pair, Integer, Double, singletons, i, probabilities, i, return, samples]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:probability:int#[return, innerDistribution, probability, x]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:cumulativeProbability:int#[double, probability, 0, for, final, Pair, Integer, Double, sample, innerDistribution, getPmf, if, <=, sample, getKey, x, +=, probability, sample, getValue, return, probability]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getNumericalMean:null#[double, mean, 0, for, final, Pair, Integer, Double, sample, innerDistribution, getPmf, +=, mean, *, sample, getValue, sample, getKey, return, mean]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getNumericalVariance:null#[double, mean, 0, double, meanOfSquares, 0, for, final, Pair, Integer, Double, sample, innerDistribution, getPmf, +=, mean, *, sample, getValue, sample, getKey, +=, meanOfSquares, *, sample, getValue, sample, getKey, sample, getKey, return, -, meanOfSquares, *, mean, mean]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getSupportLowerBound:null#[int, min, Integer.MAX_VALUE, for, final, Pair, Integer, Double, sample, innerDistribution, getPmf, if, &&, <, sample, getKey, min, >, sample, getValue, 0, =, min, sample, getKey, return, min]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getSupportUpperBound:null#[int, max, Integer.MIN_VALUE, for, final, Pair, Integer, Double, sample, innerDistribution, getPmf, if, &&, >, sample, getKey, max, >, sample, getValue, 0, =, max, sample, getKey, return, max]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:sample:null#[return, innerDistribution, sample]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:createDistribution:double[]+double[]#[if, !=, singletons.length, probabilities.length, throw, new, DimensionMismatchException, probabilities.length, singletons.length, final, List, Pair, Double, Double, samples, new, ArrayList, Pair, Double, Double, singletons.length, for, int, i, 0, <, i, singletons.length, ++, i, samples, add, new, Pair, Double, Double, singletons, i, probabilities, i, return, samples]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:probability:double#[return, innerDistribution, probability, x]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:density:double#[return, probability, x]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:cumulativeProbability:double#[double, probability, 0, for, final, Pair, Double, Double, sample, innerDistribution, getPmf, if, <=, sample, getKey, x, +=, probability, sample, getValue, return, probability]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, double, probability, 0, double, x, getSupportLowerBound, for, final, Pair, Double, Double, sample, innerDistribution, getPmf, if, ==, sample, getValue, 0.0, continue, +=, probability, sample, getValue, =, x, sample, getKey, if, >=, probability, p, break, return, x]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getNumericalMean:null#[double, mean, 0, for, final, Pair, Double, Double, sample, innerDistribution, getPmf, +=, mean, *, sample, getValue, sample, getKey, return, mean]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getNumericalVariance:null#[double, mean, 0, double, meanOfSquares, 0, for, final, Pair, Double, Double, sample, innerDistribution, getPmf, +=, mean, *, sample, getValue, sample, getKey, +=, meanOfSquares, *, sample, getValue, sample, getKey, sample, getKey, return, -, meanOfSquares, *, mean, mean]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getSupportLowerBound:null#[double, min, Double.POSITIVE_INFINITY, for, final, Pair, Double, Double, sample, innerDistribution, getPmf, if, &&, <, sample, getKey, min, >, sample, getValue, 0, =, min, sample, getKey, return, min]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getSupportUpperBound:null#[double, max, Double.NEGATIVE_INFINITY, for, final, Pair, Double, Double, sample, innerDistribution, getPmf, if, &&, >, sample, getKey, max, >, sample, getValue, 0, =, max, sample, getKey, return, max]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:sample:null#[return, innerDistribution, sample]
org.apache.commons.math4.distribution:ExponentialDistribution:getMean:null#[return, mean]
org.apache.commons.math4.distribution:ExponentialDistribution:density:double#[final, double, logDensity, logDensity, x, return, ==, logDensity, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logDensity]
org.apache.commons.math4.distribution:ExponentialDistribution:logDensity:double#[if, <, x, 0, return, Double.NEGATIVE_INFINITY, return, -, /, -, x, mean, logMean]
org.apache.commons.math4.distribution:ExponentialDistribution:cumulativeProbability:double#[double, ret, if, <=, x, 0.0, =, ret, 0.0, =, ret, -, 1.0, FastMath, exp, /, -, x, mean, return, ret]
org.apache.commons.math4.distribution:ExponentialDistribution:inverseCumulativeProbability:double#[double, ret, if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0.0, 1.0, if, ==, p, 1.0, =, ret, Double.POSITIVE_INFINITY, =, ret, *, -, mean, FastMath, log, -, 1.0, p, return, ret]
org.apache.commons.math4.distribution:ExponentialDistribution:sample:null#[double, a, 0, double, u, random, nextDouble, while, <, u, 0.5, +=, a, EXPONENTIAL_SA_QI, 0, *=, u, 2, +=, u, -, u, 1, if, <=, u, EXPONENTIAL_SA_QI, 0, return, *, mean, +, a, u, int, i, 0, double, u2, random, nextDouble, double, umin, u2, do, ++, i, =, u2, random, nextDouble, if, <, u2, umin, =, umin, u2, >, u, EXPONENTIAL_SA_QI, i, return, *, mean, +, a, *, umin, EXPONENTIAL_SA_QI, 0]
org.apache.commons.math4.distribution:ExponentialDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:ExponentialDistribution:getNumericalMean:null#[return, getMean]
org.apache.commons.math4.distribution:ExponentialDistribution:getNumericalVariance:null#[final, double, m, getMean, return, *, m, m]
org.apache.commons.math4.distribution:ExponentialDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:ExponentialDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:ExponentialDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:FDistribution:density:double#[return, FastMath, exp, logDensity, x]
org.apache.commons.math4.distribution:FDistribution:logDensity:double#[final, double, nhalf, /, numeratorDegreesOfFreedom, 2, final, double, mhalf, /, denominatorDegreesOfFreedom, 2, final, double, logx, FastMath, log, x, final, double, logn, FastMath, log, numeratorDegreesOfFreedom, final, double, logm, FastMath, log, denominatorDegreesOfFreedom, final, double, lognxm, FastMath, log, +, *, numeratorDegreesOfFreedom, x, denominatorDegreesOfFreedom, return, -, -, -, +, -, +, *, nhalf, logn, *, nhalf, logx, logx, *, mhalf, logm, *, nhalf, lognxm, *, mhalf, lognxm, Beta, logBeta, nhalf, mhalf]
org.apache.commons.math4.distribution:FDistribution:cumulativeProbability:double#[double, ret, if, <=, x, 0, =, ret, 0, double, n, numeratorDegreesOfFreedom, double, m, denominatorDegreesOfFreedom, =, ret, Beta, regularizedBeta, /, *, n, x, +, m, *, n, x, *, 0.5, n, *, 0.5, m, return, ret]
org.apache.commons.math4.distribution:FDistribution:getNumeratorDegreesOfFreedom:null#[return, numeratorDegreesOfFreedom]
org.apache.commons.math4.distribution:FDistribution:getDenominatorDegreesOfFreedom:null#[return, denominatorDegreesOfFreedom]
org.apache.commons.math4.distribution:FDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:FDistribution:getNumericalMean:null#[final, double, denominatorDF, getDenominatorDegreesOfFreedom, if, >, denominatorDF, 2, return, /, denominatorDF, -, denominatorDF, 2, return, Double.NaN]
org.apache.commons.math4.distribution:FDistribution:getNumericalVariance:null#[if, !, numericalVarianceIsCalculated, =, numericalVariance, calculateNumericalVariance, =, numericalVarianceIsCalculated, true, return, numericalVariance]
org.apache.commons.math4.distribution:FDistribution:calculateNumericalVariance:null#[final, double, denominatorDF, getDenominatorDegreesOfFreedom, if, >, denominatorDF, 4, final, double, numeratorDF, getNumeratorDegreesOfFreedom, final, double, denomDFMinusTwo, -, denominatorDF, 2, return, /, *, 2, *, denominatorDF, denominatorDF, -, +, numeratorDF, denominatorDF, 2, *, numeratorDF, *, denomDFMinusTwo, denomDFMinusTwo, -, denominatorDF, 4, return, Double.NaN]
org.apache.commons.math4.distribution:FDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:FDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:FDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:fit:MixtureMultivariateNormalDistribution+int+double#[if, <, maxIterations, 1, throw, new, NotStrictlyPositiveException, maxIterations, if, <, threshold, Double.MIN_VALUE, throw, new, NotStrictlyPositiveException, threshold, final, int, n, data.length, final, int, numCols, data, 0, length, final, int, k, initialMixture, getComponents, size, final, int, numMeanColumns, initialMixture, getComponents, get, 0, getSecond, getMeans, length, if, !=, numMeanColumns, numCols, throw, new, DimensionMismatchException, numMeanColumns, numCols, int, numIterations, 0, double, previousLogLikelihood, 0d, =, logLikelihood, Double.NEGATIVE_INFINITY, =, fittedModel, new, MixtureMultivariateNormalDistribution, initialMixture, getComponents, while, &&, <=, ++, numIterations, maxIterations, >, FastMath, abs, -, previousLogLikelihood, logLikelihood, threshold, =, previousLogLikelihood, logLikelihood, double, sumLogLikelihood, 0d, final, List, Pair, Double, MultivariateNormalDistribution, components, fittedModel, getComponents, final, double, weights, double, k, final, MultivariateNormalDistribution, mvns, MultivariateNormalDistribution, k, for, int, j, 0, <, j, k, ++, j, =, weights, j, components, get, j, getFirst, =, mvns, j, components, get, j, getSecond, final, double, gamma, double, n, k, final, double, gammaSums, double, k, final, double, gammaDataProdSums, double, k, numCols, for, int, i, 0, <, i, n, ++, i, final, double, rowDensity, fittedModel, density, data, i, +=, sumLogLikelihood, FastMath, log, rowDensity, for, int, j, 0, <, j, k, ++, j, =, gamma, i, j, /, *, weights, j, mvns, j, density, data, i, rowDensity, +=, gammaSums, j, gamma, i, j, for, int, col, 0, <, col, numCols, ++, col, +=, gammaDataProdSums, j, col, *, gamma, i, j, data, i, col, =, logLikelihood, /, sumLogLikelihood, n, final, double, newWeights, double, k, final, double, newMeans, double, k, numCols, for, int, j, 0, <, j, k, ++, j, =, newWeights, j, /, gammaSums, j, n, for, int, col, 0, <, col, numCols, ++, col, =, newMeans, j, col, /, gammaDataProdSums, j, col, gammaSums, j, final, RealMatrix, newCovMats, RealMatrix, k, for, int, j, 0, <, j, k, ++, j, =, newCovMats, j, new, Array2DRowRealMatrix, numCols, numCols, for, int, i, 0, <, i, n, ++, i, for, int, j, 0, <, j, k, ++, j, final, RealMatrix, vec, new, Array2DRowRealMatrix, MathArrays, ebeSubtract, data, i, newMeans, j, final, RealMatrix, dataCov, vec, multiply, vec, transpose, scalarMultiply, gamma, i, j, =, newCovMats, j, newCovMats, j, add, dataCov, final, double, newCovMatArrays, double, k, numCols, numCols, for, int, j, 0, <, j, k, ++, j, =, newCovMats, j, newCovMats, j, scalarMultiply, /, 1d, gammaSums, j, =, newCovMatArrays, j, newCovMats, j, getData, =, fittedModel, new, MixtureMultivariateNormalDistribution, newWeights, newMeans, newCovMatArrays, if, >, FastMath, abs, -, previousLogLikelihood, logLikelihood, threshold, throw, new, ConvergenceException]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:fit:MixtureMultivariateNormalDistribution#[fit, initialMixture, DEFAULT_MAX_ITERATIONS, DEFAULT_THRESHOLD]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:estimate:double[][]+int#[if, <, data.length, 2, throw, new, NotStrictlyPositiveException, data.length, if, <, numComponents, 2, throw, new, NumberIsTooSmallException, numComponents, 2, true, if, >, numComponents, data.length, throw, new, NumberIsTooLargeException, numComponents, data.length, true, final, int, numRows, data.length, final, int, numCols, data, 0, length, final, DataRow, sortedData, DataRow, numRows, for, int, i, 0, <, i, numRows, ++, i, =, sortedData, i, new, DataRow, data, i, Arrays, sort, sortedData, final, double, weight, /, 1d, numComponents, final, List, Pair, Double, MultivariateNormalDistribution, components, new, ArrayList, Pair, Double, MultivariateNormalDistribution, numComponents, for, int, binIndex, 0, <, binIndex, numComponents, ++, binIndex, final, int, minIndex, /, *, binIndex, numRows, numComponents, final, int, maxIndex, /, *, +, binIndex, 1, numRows, numComponents, final, int, numBinRows, -, maxIndex, minIndex, final, double, binData, double, numBinRows, numCols, final, double, columnMeans, double, numCols, for, int, i, minIndex, iBin, 0, <, i, maxIndex, ++, i, ++, iBin, for, int, j, 0, <, j, numCols, ++, j, final, double, val, sortedData, i, getRow, j, +=, columnMeans, j, val, =, binData, iBin, j, val, MathArrays, scaleInPlace, /, 1d, numBinRows, columnMeans, final, double, covMat, new, Covariance, binData, getCovarianceMatrix, getData, final, MultivariateNormalDistribution, mvn, new, MultivariateNormalDistribution, columnMeans, covMat, components, add, new, Pair, Double, MultivariateNormalDistribution, weight, mvn, return, new, MixtureMultivariateNormalDistribution, components]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:getLogLikelihood:null#[return, logLikelihood]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:getFittedModel:null#[return, new, MixtureMultivariateNormalDistribution, fittedModel, getComponents]
org.apache.commons.math4.distribution:GammaDistribution:getShape:null#[return, shape]
org.apache.commons.math4.distribution:GammaDistribution:getScale:null#[return, scale]
org.apache.commons.math4.distribution:GammaDistribution:density:double#[if, <, x, 0, return, 0, final, double, y, /, x, scale, if, ||, <=, y, minY, >=, FastMath, log, y, maxLogY, final, double, aux1, /, -, y, shiftedShape, shiftedShape, final, double, aux2, *, shape, -, FastMath, log1p, aux1, aux1, final, double, aux3, +, +, /, *, -, y, +, Gamma.LANCZOS_G, 0.5, shiftedShape, Gamma.LANCZOS_G, aux2, return, *, /, densityPrefactor2, x, FastMath, exp, aux3, return, *, densityPrefactor1, FastMath, exp, -, y, FastMath, pow, y, -, shape, 1]
org.apache.commons.math4.distribution:GammaDistribution:logDensity:double#[if, <, x, 0, return, Double.NEGATIVE_INFINITY, final, double, y, /, x, scale, if, ||, <=, y, minY, >=, FastMath, log, y, maxLogY, final, double, aux1, /, -, y, shiftedShape, shiftedShape, final, double, aux2, *, shape, -, FastMath, log1p, aux1, aux1, final, double, aux3, +, +, /, *, -, y, +, Gamma.LANCZOS_G, 0.5, shiftedShape, Gamma.LANCZOS_G, aux2, return, +, -, logDensityPrefactor2, FastMath, log, x, aux3, return, +, -, logDensityPrefactor1, y, *, FastMath, log, y, -, shape, 1]
org.apache.commons.math4.distribution:GammaDistribution:cumulativeProbability:double#[double, ret, if, <=, x, 0, =, ret, 0, =, ret, Gamma, regularizedGammaP, shape, /, x, scale, return, ret]
org.apache.commons.math4.distribution:GammaDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:GammaDistribution:getNumericalMean:null#[return, *, shape, scale]
org.apache.commons.math4.distribution:GammaDistribution:getNumericalVariance:null#[return, *, shape, scale, scale]
org.apache.commons.math4.distribution:GammaDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:GammaDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:GammaDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:GammaDistribution:sample:null#[if, <, shape, 1, while, true, final, double, u, random, nextDouble, final, double, bGS, +, 1, /, shape, FastMath.E, final, double, p, *, bGS, u, if, <=, p, 1, final, double, x, FastMath, pow, p, /, 1, shape, final, double, u2, random, nextDouble, if, >, u2, FastMath, exp, -, x, continue, return, *, scale, x, final, double, x, *, -, 1, FastMath, log, /, -, bGS, p, shape, final, double, u2, random, nextDouble, if, >, u2, FastMath, pow, x, -, shape, 1, continue, return, *, scale, x, final, double, d, -, shape, 0.333333333333333333, final, double, c, /, 1, *, 3, FastMath, sqrt, d, while, true, final, double, x, random, nextGaussian, final, double, v, *, +, 1, *, c, x, +, 1, *, c, x, +, 1, *, c, x, if, <=, v, 0, continue, final, double, x2, *, x, x, final, double, u, random, nextDouble, if, <, u, -, 1, *, 0.0331, x2, x2, return, *, scale, d, v, if, <, FastMath, log, u, +, *, 0.5, x2, *, d, +, -, 1, v, FastMath, log, v, return, *, scale, d, v]
org.apache.commons.math4.distribution:GeometricDistribution:getProbabilityOfSuccess:null#[return, probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:probability:int#[if, <, x, 0, return, 0.0, return, *, FastMath, exp, *, log1mProbabilityOfSuccess, x, probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:logProbability:int#[if, <, x, 0, return, Double.NEGATIVE_INFINITY, return, +, *, x, log1mProbabilityOfSuccess, logProbabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:cumulativeProbability:int#[if, <, x, 0, return, 0.0, return, -, FastMath, expm1, *, log1mProbabilityOfSuccess, +, x, 1]
org.apache.commons.math4.distribution:GeometricDistribution:getNumericalMean:null#[return, /, -, 1, probabilityOfSuccess, probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:getNumericalVariance:null#[return, /, -, 1, probabilityOfSuccess, *, probabilityOfSuccess, probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:GeometricDistribution:getSupportUpperBound:null#[return, Integer.MAX_VALUE]
org.apache.commons.math4.distribution:GeometricDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:GeometricDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0, >, p, 1, throw, new, OutOfRangeException, p, 0, 1, if, ==, p, 1, return, Integer.MAX_VALUE, if, ==, p, 0, return, 0, return, Math, max, 0, int, Math, ceil, -, /, FastMath, log1p, -, p, log1mProbabilityOfSuccess, 1]
org.apache.commons.math4.distribution:GumbelDistribution:getLocation:null#[return, mu]
org.apache.commons.math4.distribution:GumbelDistribution:getScale:null#[return, beta]
org.apache.commons.math4.distribution:GumbelDistribution:density:double#[final, double, z, /, -, x, mu, beta, final, double, t, FastMath, exp, -, z, return, /, FastMath, exp, -, -, z, t, beta]
org.apache.commons.math4.distribution:GumbelDistribution:cumulativeProbability:double#[final, double, z, /, -, x, mu, beta, return, FastMath, exp, -, FastMath, exp, -, z]
org.apache.commons.math4.distribution:GumbelDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0.0, 1.0, if, ==, p, 0, return, Double.NEGATIVE_INFINITY, if, ==, p, 1, return, Double.POSITIVE_INFINITY, return, -, mu, *, FastMath, log, -, FastMath, log, p, beta]
org.apache.commons.math4.distribution:GumbelDistribution:getNumericalMean:null#[return, +, mu, *, EULER, beta]
org.apache.commons.math4.distribution:GumbelDistribution:getNumericalVariance:null#[return, *, /, MathUtils.PI_SQUARED, 6.0, *, beta, beta]
org.apache.commons.math4.distribution:GumbelDistribution:getSupportLowerBound:null#[return, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:GumbelDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:GumbelDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:HypergeometricDistribution:cumulativeProbability:int#[double, ret, int, domain, getDomain, populationSize, numberOfSuccesses, sampleSize, if, <, x, domain, 0, =, ret, 0.0, if, >=, x, domain, 1, =, ret, 1.0, =, ret, innerCumulativeProbability, domain, 0, x, 1, return, ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:getDomain:int+int+int#[return, int, getLowerDomain, n, m, k, getUpperDomain, m, k]
org.apache.commons.math4.distribution:HypergeometricDistribution:getLowerDomain:int+int+int#[return, FastMath, max, 0, -, m, -, n, k]
org.apache.commons.math4.distribution:HypergeometricDistribution:getNumberOfSuccesses:null#[return, numberOfSuccesses]
org.apache.commons.math4.distribution:HypergeometricDistribution:getPopulationSize:null#[return, populationSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getSampleSize:null#[return, sampleSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getUpperDomain:int+int#[return, FastMath, min, k, m]
org.apache.commons.math4.distribution:HypergeometricDistribution:probability:int#[final, double, logProbability, logProbability, x, return, ==, logProbability, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logProbability]
org.apache.commons.math4.distribution:HypergeometricDistribution:logProbability:int#[double, ret, int, domain, getDomain, populationSize, numberOfSuccesses, sampleSize, if, ||, <, x, domain, 0, >, x, domain, 1, =, ret, Double.NEGATIVE_INFINITY, double, p, /, double, sampleSize, double, populationSize, double, q, /, double, -, populationSize, sampleSize, double, populationSize, double, p1, SaddlePointExpansion, logBinomialProbability, x, numberOfSuccesses, p, q, double, p2, SaddlePointExpansion, logBinomialProbability, -, sampleSize, x, -, populationSize, numberOfSuccesses, p, q, double, p3, SaddlePointExpansion, logBinomialProbability, sampleSize, populationSize, p, q, =, ret, -, +, p1, p2, p3, return, ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:upperCumulativeProbability:int#[double, ret, final, int, domain, getDomain, populationSize, numberOfSuccesses, sampleSize, if, <=, x, domain, 0, =, ret, 1.0, if, >, x, domain, 1, =, ret, 0.0, =, ret, innerCumulativeProbability, domain, 1, x, -, 1, return, ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:innerCumulativeProbability:int+int+int#[double, ret, probability, x0, while, !=, x0, x1, +=, x0, dx, +=, ret, probability, x0, return, ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:getNumericalMean:null#[return, *, getSampleSize, /, getNumberOfSuccesses, double, getPopulationSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getNumericalVariance:null#[if, !, numericalVarianceIsCalculated, =, numericalVariance, calculateNumericalVariance, =, numericalVarianceIsCalculated, true, return, numericalVariance]
org.apache.commons.math4.distribution:HypergeometricDistribution:calculateNumericalVariance:null#[final, double, N, getPopulationSize, final, double, m, getNumberOfSuccesses, final, double, n, getSampleSize, return, /, *, n, m, -, N, n, -, N, m, *, N, N, -, N, 1]
org.apache.commons.math4.distribution:HypergeometricDistribution:getSupportLowerBound:null#[return, FastMath, max, 0, -, +, getSampleSize, getNumberOfSuccesses, getPopulationSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getSupportUpperBound:null#[return, FastMath, min, getNumberOfSuccesses, getSampleSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:LaplaceDistribution:getLocation:null#[return, mu]
org.apache.commons.math4.distribution:LaplaceDistribution:getScale:null#[return, beta]
org.apache.commons.math4.distribution:LaplaceDistribution:density:double#[return, /, FastMath, exp, /, -, FastMath, abs, -, x, mu, beta, *, 2.0, beta]
org.apache.commons.math4.distribution:LaplaceDistribution:cumulativeProbability:double#[if, <=, x, mu, return, /, FastMath, exp, /, -, x, mu, beta, 2.0, return, -, 1.0, /, FastMath, exp, /, -, mu, x, beta, 2.0]
org.apache.commons.math4.distribution:LaplaceDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0.0, 1.0, if, ==, p, 0, return, Double.NEGATIVE_INFINITY, if, ==, p, 1, return, Double.POSITIVE_INFINITY, double, x, >, p, 0.5, -, Math, log, -, 2.0, *, 2.0, p, Math, log, *, 2.0, p, return, +, mu, *, beta, x]
org.apache.commons.math4.distribution:LaplaceDistribution:getNumericalMean:null#[return, mu]
org.apache.commons.math4.distribution:LaplaceDistribution:getNumericalVariance:null#[return, *, 2.0, beta, beta]
org.apache.commons.math4.distribution:LaplaceDistribution:getSupportLowerBound:null#[return, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:LaplaceDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LaplaceDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:LevyDistribution:density:double#[if, <, x, mu, return, Double.NaN, final, double, delta, -, x, mu, final, double, f, /, halfC, delta, return, /, *, FastMath, sqrt, /, f, FastMath.PI, FastMath, exp, -, f, delta]
org.apache.commons.math4.distribution:LevyDistribution:logDensity:double#[if, <, x, mu, return, Double.NaN, final, double, delta, -, x, mu, final, double, f, /, halfC, delta, return, -, -, *, 0.5, FastMath, log, /, f, FastMath.PI, f, FastMath, log, delta]
org.apache.commons.math4.distribution:LevyDistribution:cumulativeProbability:double#[if, <, x, mu, return, Double.NaN, return, Erf, erfc, FastMath, sqrt, /, halfC, -, x, mu]
org.apache.commons.math4.distribution:LevyDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, final, double, t, Erf, erfcInv, p, return, +, mu, /, halfC, *, t, t]
org.apache.commons.math4.distribution:LevyDistribution:getScale:null#[return, c]
org.apache.commons.math4.distribution:LevyDistribution:getLocation:null#[return, mu]
org.apache.commons.math4.distribution:LevyDistribution:getNumericalMean:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LevyDistribution:getNumericalVariance:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LevyDistribution:getSupportLowerBound:null#[return, mu]
org.apache.commons.math4.distribution:LevyDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LevyDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:LogisticDistribution:getLocation:null#[return, mu]
org.apache.commons.math4.distribution:LogisticDistribution:getScale:null#[return, s]
org.apache.commons.math4.distribution:LogisticDistribution:density:double#[double, z, /, -, x, mu, s, double, v, FastMath, exp, -, z, return, /, *, /, 1, s, v, *, +, 1.0, v, +, 1.0, v]
org.apache.commons.math4.distribution:LogisticDistribution:cumulativeProbability:double#[double, z, *, /, 1, s, -, x, mu, return, /, 1.0, +, 1.0, FastMath, exp, -, z]
org.apache.commons.math4.distribution:LogisticDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0.0, 1.0, if, ==, p, 0, return, 0.0, if, ==, p, 1, return, Double.POSITIVE_INFINITY, return, +, *, s, Math, log, /, p, -, 1.0, p, mu]
org.apache.commons.math4.distribution:LogisticDistribution:getNumericalMean:null#[return, mu]
org.apache.commons.math4.distribution:LogisticDistribution:getNumericalVariance:null#[return, *, /, MathUtils.PI_SQUARED, 3.0, /, 1.0, *, s, s]
org.apache.commons.math4.distribution:LogisticDistribution:getSupportLowerBound:null#[return, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:LogisticDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LogisticDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:LogNormalDistribution:getScale:null#[return, scale]
org.apache.commons.math4.distribution:LogNormalDistribution:getShape:null#[return, shape]
org.apache.commons.math4.distribution:LogNormalDistribution:density:double#[if, <=, x, 0, return, 0, final, double, x0, -, FastMath, log, x, scale, final, double, x1, /, x0, shape, return, /, FastMath, exp, *, -, 0.5, x1, x1, *, shape, SQRT2PI, x]
org.apache.commons.math4.distribution:LogNormalDistribution:logDensity:double#[if, <=, x, 0, return, Double.NEGATIVE_INFINITY, final, double, logX, FastMath, log, x, final, double, x0, -, logX, scale, final, double, x1, /, x0, shape, return, -, *, -, 0.5, x1, x1, +, logShapePlusHalfLog2Pi, logX]
org.apache.commons.math4.distribution:LogNormalDistribution:cumulativeProbability:double#[if, <=, x, 0, return, 0, final, double, dev, -, FastMath, log, x, scale, if, >, FastMath, abs, dev, *, 40, shape, return, <, dev, 0, 0.0d, 1.0d, return, +, 0.5, *, 0.5, Erf, erf, /, dev, *, shape, SQRT2]
org.apache.commons.math4.distribution:LogNormalDistribution:probability:double+double#[if, >, x0, x1, throw, new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, if, ||, <=, x0, 0, <=, x1, 0, return, super, probability, x0, x1, final, double, denom, *, shape, SQRT2, final, double, v0, /, -, FastMath, log, x0, scale, denom, final, double, v1, /, -, FastMath, log, x1, scale, denom, return, *, 0.5, Erf, erf, v0, v1]
org.apache.commons.math4.distribution:LogNormalDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:LogNormalDistribution:getNumericalMean:null#[double, s, shape, return, FastMath, exp, +, scale, /, *, s, s, 2]
org.apache.commons.math4.distribution:LogNormalDistribution:getNumericalVariance:null#[final, double, s, shape, final, double, ss, *, s, s, return, *, FastMath, expm1, ss, FastMath, exp, +, *, 2, scale, ss]
org.apache.commons.math4.distribution:LogNormalDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:LogNormalDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LogNormalDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:LogNormalDistribution:sample:null#[final, double, n, random, nextGaussian, return, FastMath, exp, +, scale, *, shape, n]
org.apache.commons.math4.distribution:MixtureMultivariateNormalDistribution:createComponents:double[]+double[][]+double[][][]#[final, List, Pair, Double, MultivariateNormalDistribution, mvns, new, ArrayList, Pair, Double, MultivariateNormalDistribution, weights.length, for, int, i, 0, <, i, weights.length, ++, i, final, MultivariateNormalDistribution, dist, new, MultivariateNormalDistribution, means, i, covariances, i, mvns, add, new, Pair, Double, MultivariateNormalDistribution, weights, i, dist, return, mvns]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:density:double[]#[double, p, 0, for, int, i, 0, <, i, weight.length, ++, i, +=, p, *, weight, i, distribution, get, i, density, values, return, p]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:sample:null#[double, vals, null, final, double, randomValue, random, nextDouble, double, sum, 0, for, int, i, 0, <, i, weight.length, ++, i, +=, sum, weight, i, if, <=, randomValue, sum, =, vals, distribution, get, i, sample, break, if, ==, vals, null, =, vals, distribution, get, -, weight.length, 1, sample, return, vals]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:reseedRandomGenerator:long#[super, reseedRandomGenerator, seed, for, int, i, 0, <, i, distribution, size, ++, i, distribution, get, i, reseedRandomGenerator, +, i, 1, seed]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:getComponents:null#[final, List, Pair, Double, T, list, new, ArrayList, Pair, Double, T, weight.length, for, int, i, 0, <, i, weight.length, ++, i, list, add, new, Pair, Double, T, weight, i, distribution, get, i, return, list]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getMeans:null#[return, MathArrays, copyOf, means]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getCovariances:null#[return, covarianceMatrix, copy]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:density:double[]#[final, int, dim, getDimension, if, !=, vals.length, dim, throw, new, DimensionMismatchException, vals.length, dim, return, *, FastMath, pow, *, 2, FastMath.PI, *, -, 0.5, dim, FastMath, pow, covarianceMatrixDeterminant, -, 0.5, getExponentTerm, vals]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getStandardDeviations:null#[final, int, dim, getDimension, final, double, std, double, dim, final, double, s, covarianceMatrix, getData, for, int, i, 0, <, i, dim, ++, i, =, std, i, FastMath, sqrt, s, i, i, return, std]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:sample:null#[final, int, dim, getDimension, final, double, normalVals, double, dim, for, int, i, 0, <, i, dim, ++, i, =, normalVals, i, random, nextGaussian, final, double, vals, samplingMatrix, operate, normalVals, for, int, i, 0, <, i, dim, ++, i, +=, vals, i, means, i, return, vals]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getExponentTerm:double[]#[final, double, centered, double, values.length, for, int, i, 0, <, i, centered.length, ++, i, =, centered, i, -, values, i, getMeans, i, final, double, preMultiplied, covarianceMatrixInverse, preMultiply, centered, double, sum, 0, for, int, i, 0, <, i, preMultiplied.length, ++, i, +=, sum, *, preMultiplied, i, centered, i, return, FastMath, exp, *, -, 0.5, sum]
org.apache.commons.math4.distribution:NakagamiDistribution:getShape:null#[return, mu]
org.apache.commons.math4.distribution:NakagamiDistribution:getScale:null#[return, omega]
org.apache.commons.math4.distribution:NakagamiDistribution:getSolverAbsoluteAccuracy:null#[return, inverseAbsoluteAccuracy]
org.apache.commons.math4.distribution:NakagamiDistribution:density:double#[if, <=, x, 0, return, 0.0, return, *, *, /, *, 2.0, FastMath, pow, mu, mu, *, Gamma, gamma, mu, FastMath, pow, omega, mu, FastMath, pow, x, -, *, 2, mu, 1, FastMath, exp, /, *, -, mu, x, x, omega]
org.apache.commons.math4.distribution:NakagamiDistribution:cumulativeProbability:double#[return, Gamma, regularizedGammaP, mu, /, *, mu, x, x, omega]
org.apache.commons.math4.distribution:NakagamiDistribution:getNumericalMean:null#[return, *, /, Gamma, gamma, +, mu, 0.5, Gamma, gamma, mu, FastMath, sqrt, /, omega, mu]
org.apache.commons.math4.distribution:NakagamiDistribution:getNumericalVariance:null#[double, v, /, Gamma, gamma, +, mu, 0.5, Gamma, gamma, mu, return, *, omega, -, 1, *, *, /, 1, mu, v, v]
org.apache.commons.math4.distribution:NakagamiDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:NakagamiDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:NakagamiDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:NormalDistribution:getMean:null#[return, mean]
org.apache.commons.math4.distribution:NormalDistribution:getStandardDeviation:null#[return, standardDeviation]
org.apache.commons.math4.distribution:NormalDistribution:density:double#[return, FastMath, exp, logDensity, x]
org.apache.commons.math4.distribution:NormalDistribution:logDensity:double#[final, double, x0, -, x, mean, final, double, x1, /, x0, standardDeviation, return, -, *, -, 0.5, x1, x1, logStandardDeviationPlusHalfLog2Pi]
org.apache.commons.math4.distribution:NormalDistribution:cumulativeProbability:double#[final, double, dev, -, x, mean, if, >, FastMath, abs, dev, *, 40, standardDeviation, return, <, dev, 0, 0.0d, 1.0d, return, *, 0.5, Erf, erfc, /, -, dev, *, standardDeviation, SQRT2]
org.apache.commons.math4.distribution:NormalDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, return, +, mean, *, standardDeviation, SQRT2, Erf, erfInv, -, *, 2, p, 1]
org.apache.commons.math4.distribution:NormalDistribution:probability:double+double#[if, >, x0, x1, throw, new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, final, double, denom, *, standardDeviation, SQRT2, final, double, v0, /, -, x0, mean, denom, final, double, v1, /, -, x1, mean, denom, return, *, 0.5, Erf, erf, v0, v1]
org.apache.commons.math4.distribution:NormalDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:NormalDistribution:getNumericalMean:null#[return, getMean]
org.apache.commons.math4.distribution:NormalDistribution:getNumericalVariance:null#[final, double, s, getStandardDeviation, return, *, s, s]
org.apache.commons.math4.distribution:NormalDistribution:getSupportLowerBound:null#[return, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:NormalDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:NormalDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:NormalDistribution:sample:null#[return, +, *, standardDeviation, random, nextGaussian, mean]
org.apache.commons.math4.distribution:ParetoDistribution:getScale:null#[return, scale]
org.apache.commons.math4.distribution:ParetoDistribution:getShape:null#[return, shape]
org.apache.commons.math4.distribution:ParetoDistribution:density:double#[if, <, x, scale, return, 0, return, *, /, FastMath, pow, scale, shape, FastMath, pow, x, +, shape, 1, shape]
org.apache.commons.math4.distribution:ParetoDistribution:logDensity:double#[if, <, x, scale, return, Double.NEGATIVE_INFINITY, return, +, -, *, FastMath, log, scale, shape, *, FastMath, log, x, +, shape, 1, FastMath, log, shape]
org.apache.commons.math4.distribution:ParetoDistribution:cumulativeProbability:double#[if, <=, x, scale, return, 0, return, -, 1, FastMath, pow, /, scale, x, shape]
org.apache.commons.math4.distribution:ParetoDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:ParetoDistribution:getNumericalMean:null#[if, <=, shape, 1, return, Double.POSITIVE_INFINITY, return, /, *, shape, scale, -, shape, 1]
org.apache.commons.math4.distribution:ParetoDistribution:getNumericalVariance:null#[if, <=, shape, 2, return, Double.POSITIVE_INFINITY, double, s, -, shape, 1, return, /, /, *, scale, scale, shape, *, s, s, -, shape, 2]
org.apache.commons.math4.distribution:ParetoDistribution:getSupportLowerBound:null#[return, scale]
org.apache.commons.math4.distribution:ParetoDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:ParetoDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:ParetoDistribution:sample:null#[final, double, n, random, nextDouble, return, /, scale, FastMath, pow, n, /, 1, shape]
org.apache.commons.math4.distribution:PascalDistribution:getNumberOfSuccesses:null#[return, numberOfSuccesses]
org.apache.commons.math4.distribution:PascalDistribution:getProbabilityOfSuccess:null#[return, probabilityOfSuccess]
org.apache.commons.math4.distribution:PascalDistribution:probability:int#[double, ret, if, <, x, 0, =, ret, 0.0, =, ret, *, CombinatoricsUtils, binomialCoefficientDouble, -, +, x, numberOfSuccesses, 1, -, numberOfSuccesses, 1, FastMath, pow, probabilityOfSuccess, numberOfSuccesses, FastMath, pow, -, 1.0, probabilityOfSuccess, x, return, ret]
org.apache.commons.math4.distribution:PascalDistribution:logProbability:int#[double, ret, if, <, x, 0, =, ret, Double.NEGATIVE_INFINITY, =, ret, +, +, CombinatoricsUtils, binomialCoefficientLog, -, +, x, numberOfSuccesses, 1, -, numberOfSuccesses, 1, *, logProbabilityOfSuccess, numberOfSuccesses, *, log1mProbabilityOfSuccess, x, return, ret]
org.apache.commons.math4.distribution:PascalDistribution:cumulativeProbability:int#[double, ret, if, <, x, 0, =, ret, 0.0, =, ret, Beta, regularizedBeta, probabilityOfSuccess, numberOfSuccesses, +, x, 1.0, return, ret]
org.apache.commons.math4.distribution:PascalDistribution:getNumericalMean:null#[final, double, p, getProbabilityOfSuccess, final, double, r, getNumberOfSuccesses, return, /, *, r, -, 1, p, p]
org.apache.commons.math4.distribution:PascalDistribution:getNumericalVariance:null#[final, double, p, getProbabilityOfSuccess, final, double, r, getNumberOfSuccesses, return, /, *, r, -, 1, p, *, p, p]
org.apache.commons.math4.distribution:PascalDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:PascalDistribution:getSupportUpperBound:null#[return, Integer.MAX_VALUE]
org.apache.commons.math4.distribution:PascalDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:PoissonDistribution:getMean:null#[return, mean]
org.apache.commons.math4.distribution:PoissonDistribution:probability:int#[final, double, logProbability, logProbability, x, return, ==, logProbability, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logProbability]
org.apache.commons.math4.distribution:PoissonDistribution:logProbability:int#[double, ret, if, ||, <, x, 0, ==, x, Integer.MAX_VALUE, =, ret, Double.NEGATIVE_INFINITY, if, ==, x, 0, =, ret, -, mean, =, ret, -, -, -, SaddlePointExpansion, getStirlingError, x, SaddlePointExpansion, getDeviancePart, x, mean, *, 0.5, FastMath, log, MathUtils.TWO_PI, *, 0.5, FastMath, log, x, return, ret]
org.apache.commons.math4.distribution:PoissonDistribution:cumulativeProbability:int#[if, <, x, 0, return, 0, if, ==, x, Integer.MAX_VALUE, return, 1, return, Gamma, regularizedGammaQ, +, double, x, 1, mean, epsilon, maxIterations]
org.apache.commons.math4.distribution:PoissonDistribution:normalApproximateProbability:int#[return, normal, cumulativeProbability, +, x, 0.5]
org.apache.commons.math4.distribution:PoissonDistribution:getNumericalMean:null#[return, getMean]
org.apache.commons.math4.distribution:PoissonDistribution:getNumericalVariance:null#[return, getMean]
org.apache.commons.math4.distribution:PoissonDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:PoissonDistribution:getSupportUpperBound:null#[return, Integer.MAX_VALUE]
org.apache.commons.math4.distribution:PoissonDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:PoissonDistribution:sample:null#[return, int, FastMath, min, nextPoisson, mean, Integer.MAX_VALUE]
org.apache.commons.math4.distribution:PoissonDistribution:nextPoisson:double#[final, double, pivot, 40.0d, if, <, meanPoisson, pivot, double, p, FastMath, exp, -, meanPoisson, long, n, 0, double, r, 1.0d, double, rnd, 1.0d, while, <, n, *, 1000, meanPoisson, =, rnd, random, nextDouble, *=, r, rnd, if, >=, r, p, ++, n, return, n, return, n, final, double, lambda, FastMath, floor, meanPoisson, final, double, lambdaFractional, -, meanPoisson, lambda, final, double, logLambda, FastMath, log, lambda, final, double, logLambdaFactorial, CombinatoricsUtils, factorialLog, int, lambda, final, long, y2, <, lambdaFractional, Double.MIN_VALUE, 0, nextPoisson, lambdaFractional, final, double, delta, FastMath, sqrt, *, lambda, FastMath, log, +, /, *, 32, lambda, FastMath.PI, 1, final, double, halfDelta, /, delta, 2, final, double, twolpd, +, *, 2, lambda, delta, final, double, a1, *, FastMath, sqrt, *, FastMath.PI, twolpd, FastMath, exp, /, 1, *, 8, lambda, final, double, a2, *, /, twolpd, delta, FastMath, exp, /, *, -, delta, +, 1, delta, twolpd, final, double, aSum, +, a1, a2, 1, final, double, p1, /, a1, aSum, final, double, p2, /, a2, aSum, final, double, c1, /, 1, *, 8, lambda, double, x, 0, double, y, 0, double, v, 0, int, a, 0, double, t, 0, double, qr, 0, double, qa, 0, for, final, double, u, random, nextDouble, if, <=, u, p1, final, double, n, random, nextGaussian, =, x, -, *, n, FastMath, sqrt, +, lambda, halfDelta, 0.5d, if, ||, >, x, delta, <, x, -, lambda, continue, =, y, <, x, 0, FastMath, floor, x, FastMath, ceil, x, final, double, e, exponential, sample, =, v, +, -, -, e, /, *, n, n, 2, c1, if, >, u, +, p1, p2, =, y, lambda, break, =, x, +, delta, *, /, twolpd, delta, exponential, sample, =, y, FastMath, ceil, x, =, v, -, -, exponential, sample, /, *, delta, +, x, 1, twolpd, =, a, <, x, 0, 1, 0, =, t, /, *, y, +, y, 1, *, 2, lambda, if, &&, <, v, -, t, ==, a, 0, =, y, +, lambda, y, break, =, qr, *, t, -, /, +, *, 2, y, 1, *, 6, lambda, 1, =, qa, -, qr, /, *, t, t, *, 3, +, lambda, *, a, +, y, 1, if, <, v, qa, =, y, +, lambda, y, break, if, >, v, qr, continue, if, <, v, +, -, *, y, logLambda, CombinatoricsUtils, factorialLog, int, +, y, lambda, logLambdaFactorial, =, y, +, lambda, y, break, return, +, y2, long, y]
org.apache.commons.math4.distribution:SaddlePointExpansion:getStirlingError:double#[double, ret, if, <, z, 15.0, double, z2, *, 2.0, z, if, ==, FastMath, floor, z2, z2, =, ret, EXACT_STIRLING_ERRORS, int, z2, =, ret, -, +, -, Gamma, logGamma, +, z, 1.0, *, +, z, 0.5, FastMath, log, z, z, HALF_LOG_2_PI, double, z2, *, z, z, =, ret, /, -, 0.083333333333333333333, /, -, 0.00277777777777777777778, /, -, 0.00079365079365079365079365, /, -, 0.000595238095238095238095238, /, 0.0008417508417508417508417508, z2, z2, z2, z2, z, return, ret]
org.apache.commons.math4.distribution:SaddlePointExpansion:getDeviancePart:double+double#[double, ret, if, <, FastMath, abs, -, x, mu, *, 0.1, +, x, mu, double, d, -, x, mu, double, v, /, d, +, x, mu, double, s1, *, v, d, double, s, Double.NaN, double, ej, *, 2.0, x, v, *=, v, v, int, j, 1, while, !=, s1, s, =, s, s1, *=, ej, v, =, s1, +, s, /, ej, +, *, j, 2, 1, ++, j, =, ret, s1, =, ret, -, +, *, x, FastMath, log, /, x, mu, mu, x, return, ret]
org.apache.commons.math4.distribution:SaddlePointExpansion:logBinomialProbability:int+int+double+double#[double, ret, if, ==, x, 0, if, <, p, 0.1, =, ret, -, -, getDeviancePart, n, *, n, q, *, n, p, =, ret, *, n, FastMath, log, q, if, ==, x, n, if, <, q, 0.1, =, ret, -, -, getDeviancePart, n, *, n, p, *, n, q, =, ret, *, n, FastMath, log, p, =, ret, -, getStirlingError, n, getStirlingError, x, getStirlingError, -, n, x, getDeviancePart, x, *, n, p, getDeviancePart, -, n, x, *, n, q, double, f, /, *, MathUtils.TWO_PI, x, -, n, x, n, =, ret, +, *, -, 0.5, FastMath, log, f, ret, return, ret]
org.apache.commons.math4.distribution:TDistribution:getDegreesOfFreedom:null#[return, degreesOfFreedom]
org.apache.commons.math4.distribution:TDistribution:density:double#[return, FastMath, exp, logDensity, x]
org.apache.commons.math4.distribution:TDistribution:logDensity:double#[final, double, n, degreesOfFreedom, final, double, nPlus1Over2, /, +, n, 1, 2, return, -, factor, *, nPlus1Over2, FastMath, log, +, 1, /, *, x, x, n]
org.apache.commons.math4.distribution:TDistribution:cumulativeProbability:double#[double, ret, if, ==, x, 0, =, ret, 0.5, double, t, Beta, regularizedBeta, /, degreesOfFreedom, +, degreesOfFreedom, *, x, x, *, 0.5, degreesOfFreedom, 0.5, if, <, x, 0.0, =, ret, *, 0.5, t, =, ret, -, 1.0, *, 0.5, t, return, ret]
org.apache.commons.math4.distribution:TDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:TDistribution:getNumericalMean:null#[final, double, df, getDegreesOfFreedom, if, >, df, 1, return, 0, return, Double.NaN]
org.apache.commons.math4.distribution:TDistribution:getNumericalVariance:null#[final, double, df, getDegreesOfFreedom, if, >, df, 2, return, /, df, -, df, 2, if, &&, >, df, 1, <=, df, 2, return, Double.POSITIVE_INFINITY, return, Double.NaN]
org.apache.commons.math4.distribution:TDistribution:getSupportLowerBound:null#[return, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:TDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:TDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:TriangularDistribution:getMode:null#[return, c]
org.apache.commons.math4.distribution:TriangularDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:TriangularDistribution:density:double#[if, <, x, a, return, 0, if, &&, <=, a, x, <, x, c, double, divident, *, 2, -, x, a, double, divisor, *, -, b, a, -, c, a, return, /, divident, divisor, if, ==, x, c, return, /, 2, -, b, a, if, &&, <, c, x, <=, x, b, double, divident, *, 2, -, b, x, double, divisor, *, -, b, a, -, b, c, return, /, divident, divisor, return, 0]
org.apache.commons.math4.distribution:TriangularDistribution:cumulativeProbability:double#[if, <, x, a, return, 0, if, &&, <=, a, x, <, x, c, double, divident, *, -, x, a, -, x, a, double, divisor, *, -, b, a, -, c, a, return, /, divident, divisor, if, ==, x, c, return, /, -, c, a, -, b, a, if, &&, <, c, x, <=, x, b, double, divident, *, -, b, x, -, b, x, double, divisor, *, -, b, a, -, b, c, return, -, 1, /, divident, divisor, return, 1]
org.apache.commons.math4.distribution:TriangularDistribution:getNumericalMean:null#[return, /, +, a, b, c, 3]
org.apache.commons.math4.distribution:TriangularDistribution:getNumericalVariance:null#[return, /, -, -, -, +, +, *, a, a, *, b, b, *, c, c, *, a, b, *, a, c, *, b, c, 18]
org.apache.commons.math4.distribution:TriangularDistribution:getSupportLowerBound:null#[return, a]
org.apache.commons.math4.distribution:TriangularDistribution:getSupportUpperBound:null#[return, b]
org.apache.commons.math4.distribution:TriangularDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:TriangularDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0, >, p, 1, throw, new, OutOfRangeException, p, 0, 1, if, ==, p, 0, return, a, if, ==, p, 1, return, b, if, <, p, /, -, c, a, -, b, a, return, +, a, FastMath, sqrt, *, p, -, b, a, -, c, a, return, -, b, FastMath, sqrt, *, -, 1, p, -, b, a, -, b, c]
org.apache.commons.math4.distribution:UniformIntegerDistribution:probability:int#[if, ||, <, x, lower, >, x, upper, return, 0, return, /, 1.0, +, -, upper, lower, 1]
org.apache.commons.math4.distribution:UniformIntegerDistribution:cumulativeProbability:int#[if, <, x, lower, return, 0, if, >, x, upper, return, 1, return, /, +, -, x, lower, 1.0, +, -, upper, lower, 1.0]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getNumericalMean:null#[return, *, 0.5, +, lower, upper]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getNumericalVariance:null#[double, n, +, -, upper, lower, 1, return, /, -, *, n, n, 1, 12.0]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getSupportLowerBound:null#[return, lower]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getSupportUpperBound:null#[return, upper]
org.apache.commons.math4.distribution:UniformIntegerDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:UniformIntegerDistribution:sample:null#[final, int, max, +, -, upper, lower, 1, if, <=, max, 0, while, true, final, int, r, random, nextInt, if, &&, >=, r, lower, <=, r, upper, return, r, return, +, lower, random, nextInt, max]
org.apache.commons.math4.distribution:UniformRealDistribution:density:double#[if, ||, <, x, lower, >, x, upper, return, 0.0, return, /, 1, -, upper, lower]
org.apache.commons.math4.distribution:UniformRealDistribution:cumulativeProbability:double#[if, <=, x, lower, return, 0, if, >=, x, upper, return, 1, return, /, -, x, lower, -, upper, lower]
org.apache.commons.math4.distribution:UniformRealDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, return, +, *, p, -, upper, lower, lower]
org.apache.commons.math4.distribution:UniformRealDistribution:getNumericalMean:null#[return, *, 0.5, +, lower, upper]
org.apache.commons.math4.distribution:UniformRealDistribution:getNumericalVariance:null#[double, ul, -, upper, lower, return, /, *, ul, ul, 12]
org.apache.commons.math4.distribution:UniformRealDistribution:getSupportLowerBound:null#[return, lower]
org.apache.commons.math4.distribution:UniformRealDistribution:getSupportUpperBound:null#[return, upper]
org.apache.commons.math4.distribution:UniformRealDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:UniformRealDistribution:sample:null#[final, double, u, random, nextDouble, return, +, *, u, upper, *, -, 1, u, lower]
org.apache.commons.math4.distribution:WeibullDistribution:getShape:null#[return, shape]
org.apache.commons.math4.distribution:WeibullDistribution:getScale:null#[return, scale]
org.apache.commons.math4.distribution:WeibullDistribution:density:double#[if, <, x, 0, return, 0, final, double, xscale, /, x, scale, final, double, xscalepow, FastMath, pow, xscale, -, shape, 1, final, double, xscalepowshape, *, xscalepow, xscale, return, *, /, shape, scale, xscalepow, FastMath, exp, -, xscalepowshape]
org.apache.commons.math4.distribution:WeibullDistribution:logDensity:double#[if, <, x, 0, return, Double.NEGATIVE_INFINITY, final, double, xscale, /, x, scale, final, double, logxscalepow, *, FastMath, log, xscale, -, shape, 1, final, double, xscalepowshape, *, FastMath, exp, logxscalepow, xscale, return, -, +, FastMath, log, /, shape, scale, logxscalepow, xscalepowshape]
org.apache.commons.math4.distribution:WeibullDistribution:cumulativeProbability:double#[double, ret, if, <=, x, 0.0, =, ret, 0.0, =, ret, -, 1.0, FastMath, exp, -, FastMath, pow, /, x, scale, shape, return, ret]
org.apache.commons.math4.distribution:WeibullDistribution:inverseCumulativeProbability:double#[double, ret, if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0.0, 1.0, if, ==, p, 0, =, ret, 0.0, if, ==, p, 1, =, ret, Double.POSITIVE_INFINITY, =, ret, *, scale, FastMath, pow, -, FastMath, log1p, -, p, /, 1.0, shape, return, ret]
org.apache.commons.math4.distribution:WeibullDistribution:getSolverAbsoluteAccuracy:null#[return, solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:WeibullDistribution:getNumericalMean:null#[if, !, numericalMeanIsCalculated, =, numericalMean, calculateNumericalMean, =, numericalMeanIsCalculated, true, return, numericalMean]
org.apache.commons.math4.distribution:WeibullDistribution:calculateNumericalMean:null#[final, double, sh, getShape, final, double, sc, getScale, return, *, sc, FastMath, exp, Gamma, logGamma, +, 1, /, 1, sh]
org.apache.commons.math4.distribution:WeibullDistribution:getNumericalVariance:null#[if, !, numericalVarianceIsCalculated, =, numericalVariance, calculateNumericalVariance, =, numericalVarianceIsCalculated, true, return, numericalVariance]
org.apache.commons.math4.distribution:WeibullDistribution:calculateNumericalVariance:null#[final, double, sh, getShape, final, double, sc, getScale, final, double, mn, getNumericalMean, return, -, *, *, sc, sc, FastMath, exp, Gamma, logGamma, +, 1, /, 2, sh, *, mn, mn]
org.apache.commons.math4.distribution:WeibullDistribution:getSupportLowerBound:null#[return, 0]
org.apache.commons.math4.distribution:WeibullDistribution:getSupportUpperBound:null#[return, Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:WeibullDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:ZipfDistribution:getNumberOfElements:null#[return, numberOfElements]
org.apache.commons.math4.distribution:ZipfDistribution:getExponent:null#[return, exponent]
org.apache.commons.math4.distribution:ZipfDistribution:probability:int#[if, ||, <=, x, 0, >, x, numberOfElements, return, 0.0, return, /, /, 1.0, FastMath, pow, x, exponent, nthHarmonic]
org.apache.commons.math4.distribution:ZipfDistribution:logProbability:int#[if, ||, <=, x, 0, >, x, numberOfElements, return, Double.NEGATIVE_INFINITY, return, -, *, -, FastMath, log, x, exponent, FastMath, log, nthHarmonic]
org.apache.commons.math4.distribution:ZipfDistribution:cumulativeProbability:int#[if, <=, x, 0, return, 0.0, if, >=, x, numberOfElements, return, 1.0, return, /, generalizedHarmonic, x, exponent, nthHarmonic]
org.apache.commons.math4.distribution:ZipfDistribution:getNumericalMean:null#[if, !, numericalMeanIsCalculated, =, numericalMean, calculateNumericalMean, =, numericalMeanIsCalculated, true, return, numericalMean]
org.apache.commons.math4.distribution:ZipfDistribution:calculateNumericalMean:null#[final, int, N, getNumberOfElements, final, double, s, getExponent, final, double, Hs1, generalizedHarmonic, N, -, s, 1, final, double, Hs, nthHarmonic, return, /, Hs1, Hs]
org.apache.commons.math4.distribution:ZipfDistribution:getNumericalVariance:null#[if, !, numericalVarianceIsCalculated, =, numericalVariance, calculateNumericalVariance, =, numericalVarianceIsCalculated, true, return, numericalVariance]
org.apache.commons.math4.distribution:ZipfDistribution:calculateNumericalVariance:null#[final, int, N, getNumberOfElements, final, double, s, getExponent, final, double, Hs2, generalizedHarmonic, N, -, s, 2, final, double, Hs1, generalizedHarmonic, N, -, s, 1, final, double, Hs, nthHarmonic, return, -, /, Hs2, Hs, /, *, Hs1, Hs1, *, Hs, Hs]
org.apache.commons.math4.distribution:ZipfDistribution:generalizedHarmonic:int+double#[double, value, 0, for, int, k, n, >, k, 0, --, k, +=, value, /, 1.0, FastMath, pow, k, m, return, value]
org.apache.commons.math4.distribution:ZipfDistribution:getSupportLowerBound:null#[return, 1]
org.apache.commons.math4.distribution:ZipfDistribution:getSupportUpperBound:null#[return, getNumberOfElements]
org.apache.commons.math4.distribution:ZipfDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.distribution:ZipfDistribution:sample:null#[if, ==, sampler, null, =, sampler, new, ZipfRejectionInversionSampler, numberOfElements, exponent, return, sampler, sample, random]
org.apache.commons.math4.exception:DimensionMismatchException:getDimension:null#[return, dimension]
org.apache.commons.math4.exception:MathIllegalNumberException:getArgument:null#[return, argument]
org.apache.commons.math4.exception:MathRuntimeException:getContext:null#[return, context]
org.apache.commons.math4.exception:MathRuntimeException:getMessage:null#[return, context, getMessage]
org.apache.commons.math4.exception:MathRuntimeException:getLocalizedMessage:null#[return, context, getLocalizedMessage]
org.apache.commons.math4.exception:MaxCountExceededException:getMax:null#[return, max]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getWrongDimensions:null#[return, wrong, clone]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getExpectedDimensions:null#[return, expected, clone]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getWrongDimension:int#[return, wrong, index, intValue]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getExpectedDimension:int#[return, expected, index, intValue]
org.apache.commons.math4.exception:NoBracketingException:getLo:null#[return, lo]
org.apache.commons.math4.exception:NoBracketingException:getHi:null#[return, hi]
org.apache.commons.math4.exception:NoBracketingException:getFLo:null#[return, fLo]
org.apache.commons.math4.exception:NoBracketingException:getFHi:null#[return, fHi]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getDirection:null#[return, direction]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getStrict:null#[return, strict]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getIndex:null#[return, index]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getPrevious:null#[return, previous]
org.apache.commons.math4.exception:NullArgumentException:getContext:null#[return, context]
org.apache.commons.math4.exception:NullArgumentException:getMessage:null#[return, context, getMessage]
org.apache.commons.math4.exception:NullArgumentException:getLocalizedMessage:null#[return, context, getLocalizedMessage]
org.apache.commons.math4.exception:NumberIsTooLargeException:getBoundIsAllowed:null#[return, boundIsAllowed]
org.apache.commons.math4.exception:NumberIsTooLargeException:getMax:null#[return, max]
org.apache.commons.math4.exception:NumberIsTooSmallException:getBoundIsAllowed:null#[return, boundIsAllowed]
org.apache.commons.math4.exception:NumberIsTooSmallException:getMin:null#[return, min]
org.apache.commons.math4.exception:OutOfRangeException:getLo:null#[return, lo]
org.apache.commons.math4.exception:OutOfRangeException:getHi:null#[return, hi]
org.apache.commons.math4.exception.util:ArgUtils:flatten:Object[]#[final, List, Object, list, new, ArrayList, Object, if, !=, array, null, for, Object, o, array, if, instanceof, o, Object, for, Object, oR, flatten, Object, o, list, add, oR, list, add, o, return, list, toArray]
org.apache.commons.math4.exception.util:DummyLocalizable:getSourceString:null#[return, source]
org.apache.commons.math4.exception.util:DummyLocalizable:getLocalizedString:Locale#[return, source]
org.apache.commons.math4.exception.util:DummyLocalizable:toString:null#[return, source]
org.apache.commons.math4.exception.util:ExceptionContext:getThrowable:null#[return, throwable]
org.apache.commons.math4.exception.util:ExceptionContext:addMessage:Localizable+Object...#[msgPatterns, add, pattern, msgArguments, add, ArgUtils, flatten, arguments]
org.apache.commons.math4.exception.util:ExceptionContext:setValue:String+Object#[context, put, key, value]
org.apache.commons.math4.exception.util:ExceptionContext:getValue:String#[return, context, get, key]
org.apache.commons.math4.exception.util:ExceptionContext:getKeys:null#[return, context, keySet]
org.apache.commons.math4.exception.util:ExceptionContext:getMessage:null#[return, getMessage, Locale.US]
org.apache.commons.math4.exception.util:ExceptionContext:getLocalizedMessage:null#[return, getMessage, Locale, getDefault]
org.apache.commons.math4.exception.util:ExceptionContext:getMessage:Locale#[return, buildMessage, locale, ": "]
org.apache.commons.math4.exception.util:ExceptionContext:getMessage:Locale+String#[return, buildMessage, locale, separator]
org.apache.commons.math4.exception.util:ExceptionContext:buildMessage:Locale+String#[final, StringBuilder, sb, new, StringBuilder, int, count, 0, final, int, len, msgPatterns, size, for, int, i, 0, <, i, len, ++, i, final, Localizable, pat, msgPatterns, get, i, final, Object, args, msgArguments, get, i, final, MessageFormat, fmt, new, MessageFormat, pat, getLocalizedString, locale, locale, sb, append, fmt, format, args, if, <, ++, count, len, sb, append, separator, return, sb, toString]
org.apache.commons.math4.exception.util:ExceptionContext:writeObject:ObjectOutputStream#[out, writeObject, throwable, serializeMessages, out, serializeContext, out]
org.apache.commons.math4.exception.util:ExceptionContext:readObject:ObjectInputStream#[=, throwable, Throwable, in, readObject, deSerializeMessages, in, deSerializeContext, in]
org.apache.commons.math4.exception.util:ExceptionContext:serializeMessages:ObjectOutputStream#[final, int, len, msgPatterns, size, out, writeInt, len, for, int, i, 0, <, i, len, ++, i, final, Localizable, pat, msgPatterns, get, i, out, writeObject, pat, final, Object, args, msgArguments, get, i, final, int, aLen, args.length, out, writeInt, aLen, for, int, j, 0, <, j, aLen, ++, j, if, instanceof, args, j, Serializable, out, writeObject, args, j, out, writeObject, nonSerializableReplacement, args, j]
org.apache.commons.math4.exception.util:ExceptionContext:deSerializeMessages:ObjectInputStream#[final, int, len, in, readInt, =, msgPatterns, new, ArrayList, Localizable, len, =, msgArguments, new, ArrayList, Object, len, for, int, i, 0, <, i, len, ++, i, final, Localizable, pat, Localizable, in, readObject, msgPatterns, add, pat, final, int, aLen, in, readInt, final, Object, args, Object, aLen, for, int, j, 0, <, j, aLen, ++, j, =, args, j, in, readObject, msgArguments, add, args]
org.apache.commons.math4.exception.util:ExceptionContext:serializeContext:ObjectOutputStream#[final, int, len, context, size, out, writeInt, len, for, Map.Entry, String, Object, entry, context, entrySet, out, writeObject, entry, getKey, final, Object, value, entry, getValue, if, instanceof, value, Serializable, out, writeObject, value, out, writeObject, nonSerializableReplacement, value]
org.apache.commons.math4.exception.util:ExceptionContext:deSerializeContext:ObjectInputStream#[final, int, len, in, readInt, =, context, new, HashMap, String, Object, for, int, i, 0, <, i, len, ++, i, final, String, key, String, in, readObject, final, Object, value, in, readObject, context, put, key, value]
org.apache.commons.math4.exception.util:ExceptionContext:nonSerializableReplacement:Object#[return, +, "[Object could not be serialized: ", obj, getClass, getName, "]"]
org.apache.commons.math4.filter:DefaultMeasurementModel:getMeasurementMatrix:null#[return, measurementMatrix]
org.apache.commons.math4.filter:DefaultMeasurementModel:getMeasurementNoise:null#[return, measurementNoise]
org.apache.commons.math4.filter:DefaultProcessModel:getStateTransitionMatrix:null#[return, stateTransitionMatrix]
org.apache.commons.math4.filter:DefaultProcessModel:getControlMatrix:null#[return, controlMatrix]
org.apache.commons.math4.filter:DefaultProcessModel:getProcessNoise:null#[return, processNoiseCovMatrix]
org.apache.commons.math4.filter:DefaultProcessModel:getInitialStateEstimate:null#[return, initialStateEstimateVector]
org.apache.commons.math4.filter:DefaultProcessModel:getInitialErrorCovariance:null#[return, initialErrorCovMatrix]
org.apache.commons.math4.filter:KalmanFilter:getStateDimension:null#[return, stateEstimation, getDimension]
org.apache.commons.math4.filter:KalmanFilter:getMeasurementDimension:null#[return, measurementMatrix, getRowDimension]
org.apache.commons.math4.filter:KalmanFilter:getStateEstimation:null#[return, stateEstimation, toArray]
org.apache.commons.math4.filter:KalmanFilter:getStateEstimationVector:null#[return, stateEstimation, copy]
org.apache.commons.math4.filter:KalmanFilter:getErrorCovariance:null#[return, errorCovariance, getData]
org.apache.commons.math4.filter:KalmanFilter:getErrorCovarianceMatrix:null#[return, errorCovariance, copy]
org.apache.commons.math4.filter:KalmanFilter:predict:null#[predict, RealVector, null]
org.apache.commons.math4.filter:KalmanFilter:predict:double[]#[predict, new, ArrayRealVector, u, false]
org.apache.commons.math4.filter:KalmanFilter:predict:RealVector#[if, &&, !=, u, null, !=, u, getDimension, controlMatrix, getColumnDimension, throw, new, DimensionMismatchException, u, getDimension, controlMatrix, getColumnDimension, =, stateEstimation, transitionMatrix, operate, stateEstimation, if, !=, u, null, =, stateEstimation, stateEstimation, add, controlMatrix, operate, u, =, errorCovariance, transitionMatrix, multiply, errorCovariance, multiply, transitionMatrixT, add, processModel, getProcessNoise]
org.apache.commons.math4.filter:KalmanFilter:correct:double[]#[correct, new, ArrayRealVector, z, false]
org.apache.commons.math4.filter:KalmanFilter:correct:RealVector#[MathUtils, checkNotNull, z, if, !=, z, getDimension, measurementMatrix, getRowDimension, throw, new, DimensionMismatchException, z, getDimension, measurementMatrix, getRowDimension, RealMatrix, s, measurementMatrix, multiply, errorCovariance, multiply, measurementMatrixT, add, measurementModel, getMeasurementNoise, RealVector, innovation, z, subtract, measurementMatrix, operate, stateEstimation, RealMatrix, kalmanGain, new, CholeskyDecomposition, s, getSolver, solve, measurementMatrix, multiply, errorCovariance, transpose, transpose, =, stateEstimation, stateEstimation, add, kalmanGain, operate, innovation, RealMatrix, identity, MatrixUtils, createRealIdentityMatrix, kalmanGain, getRowDimension, =, errorCovariance, identity, subtract, kalmanGain, multiply, measurementMatrix, multiply, errorCovariance]
org.apache.commons.math4.fitting:AbstractCurveFitter:fit:Collection<WeightedObservedPoint>#[return, getOptimizer, optimize, getProblem, points, getPoint, toArray]
org.apache.commons.math4.fitting:AbstractCurveFitter:getOptimizer:null#[return, new, LevenbergMarquardtOptimizer]
org.apache.commons.math4.fitting:GaussianCurveFitter:create:null#[return, new, GaussianCurveFitter, null, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:GaussianCurveFitter:withStartPoint:double[]#[return, new, GaussianCurveFitter, newStart, clone, maxIter]
org.apache.commons.math4.fitting:GaussianCurveFitter:withMaxIterations:int#[return, new, GaussianCurveFitter, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:GaussianCurveFitter:getProblem:Collection<WeightedObservedPoint>#[final, int, len, observations, size, final, double, target, double, len, final, double, weights, double, len, int, i, 0, for, WeightedObservedPoint, obs, observations, =, target, i, obs, getY, =, weights, i, obs, getWeight, ++, i, final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, FUNCTION, observations, final, double, startPoint, !=, initialGuess, null, initialGuess, new, ParameterGuesser, observations, guess, return, new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, startPoint, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting:HarmonicCurveFitter:create:null#[return, new, HarmonicCurveFitter, null, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:HarmonicCurveFitter:withStartPoint:double[]#[return, new, HarmonicCurveFitter, newStart, clone, maxIter]
org.apache.commons.math4.fitting:HarmonicCurveFitter:withMaxIterations:int#[return, new, HarmonicCurveFitter, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:HarmonicCurveFitter:getProblem:Collection<WeightedObservedPoint>#[final, int, len, observations, size, final, double, target, double, len, final, double, weights, double, len, int, i, 0, for, WeightedObservedPoint, obs, observations, =, target, i, obs, getY, =, weights, i, obs, getWeight, ++, i, final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, FUNCTION, observations, final, double, startPoint, !=, initialGuess, null, initialGuess, new, ParameterGuesser, observations, guess, return, new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, startPoint, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getCovariances:double#[final, RealMatrix, j, this, getJacobian, final, RealMatrix, jTj, j, transpose, multiply, j, final, DecompositionSolver, solver, new, QRDecomposition, jTj, threshold, getSolver, return, solver, getInverse]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getSigma:double#[final, RealMatrix, cov, this, getCovariances, covarianceSingularityThreshold, final, int, nC, cov, getColumnDimension, final, RealVector, sig, new, ArrayRealVector, nC, for, int, i, 0, <, i, nC, ++, i, sig, setEntry, i, FastMath, sqrt, cov, getEntry, i, i, return, sig]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getRMS:null#[return, FastMath, sqrt, getReducedChiSquare, 1]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getCost:null#[return, FastMath, sqrt, getChiSquare]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getChiSquare:null#[final, ArrayRealVector, r, new, ArrayRealVector, getResiduals, return, r, dotProduct, r]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getReducedChiSquare:int#[return, /, getChiSquare, +, -, observationSize, numberOfFittedParameters, 1]
org.apache.commons.math4.fitting.leastsquares:DenseWeightedEvaluation:getJacobian:null#[return, weightSqrt, multiply, this, unweighted, getJacobian]
org.apache.commons.math4.fitting.leastsquares:DenseWeightedEvaluation:getResiduals:null#[return, this, weightSqrt, operate, this, unweighted, getResiduals]
org.apache.commons.math4.fitting.leastsquares:DenseWeightedEvaluation:getPoint:null#[return, unweighted, getPoint]
org.apache.commons.math4.fitting.leastsquares:EvaluationRmsChecker:converged:int+Evaluation+Evaluation#[final, double, prevRms, previous, getRMS, final, double, currRms, current, getRMS, return, ||, Precision, equals, prevRms, currRms, this, absTol, Precision, equalsWithRelativeTolerance, prevRms, currRms, this, relTol]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[try, final, Pair, RealMatrix, RealVector, normalEquation, computeNormalMatrix, jacobian, residuals, final, RealMatrix, normal, normalEquation, getFirst, final, RealVector, jTr, normalEquation, getSecond, return, new, LUDecomposition, normal, SINGULARITY_THRESHOLD, getSolver, solve, jTr, catch, SingularMatrixException, e, throw, new, ConvergenceException, LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM, e]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[try, return, new, QRDecomposition, jacobian, SINGULARITY_THRESHOLD, getSolver, solve, residuals, catch, SingularMatrixException, e, throw, new, ConvergenceException, LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM, e]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[try, final, Pair, RealMatrix, RealVector, normalEquation, computeNormalMatrix, jacobian, residuals, final, RealMatrix, normal, normalEquation, getFirst, final, RealVector, jTr, normalEquation, getSecond, return, new, CholeskyDecomposition, normal, SINGULARITY_THRESHOLD, SINGULARITY_THRESHOLD, getSolver, solve, jTr, catch, NonPositiveDefiniteMatrixException, e, throw, new, ConvergenceException, LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM, e]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[return, new, SingularValueDecomposition, jacobian, getSolver, solve, residuals]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:getDecomposition:null#[return, this, decomposition]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:withDecomposition:Decomposition#[return, new, GaussNewtonOptimizer, newDecomposition]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:optimize:LeastSquaresProblem#[final, Incrementor, evaluationCounter, lsp, getEvaluationCounter, final, Incrementor, iterationCounter, lsp, getIterationCounter, final, ConvergenceChecker, Evaluation, checker, lsp, getConvergenceChecker, if, ==, checker, null, throw, new, NullArgumentException, RealVector, currentPoint, lsp, getStart, Evaluation, current, null, while, true, iterationCounter, incrementCount, Evaluation, previous, current, evaluationCounter, incrementCount, =, current, lsp, evaluate, currentPoint, final, RealVector, currentResiduals, current, getResiduals, final, RealMatrix, weightedJacobian, current, getJacobian, =, currentPoint, current, getPoint, if, &&, !=, previous, null, checker, converged, iterationCounter, getCount, previous, current, return, new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, final, RealVector, dX, this, decomposition, solve, weightedJacobian, currentResiduals, =, currentPoint, currentPoint, add, dX]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:toString:null#[return, +, +, "GaussNewtonOptimizer{", "decomposition=", decomposition, '}']
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:computeNormalMatrix:RealMatrix+RealVector#[final, int, nR, jacobian, getRowDimension, final, int, nC, jacobian, getColumnDimension, final, RealMatrix, normal, MatrixUtils, createRealMatrix, nC, nC, final, RealVector, jTr, new, ArrayRealVector, nC, for, int, i, 0, <, i, nR, ++, i, for, int, j, 0, <, j, nC, ++, j, jTr, setEntry, j, +, jTr, getEntry, j, *, residuals, getEntry, i, jacobian, getEntry, i, j, for, int, k, 0, <, k, nC, ++, k, for, int, l, k, <, l, nC, ++, l, normal, setEntry, k, l, +, normal, getEntry, k, l, *, jacobian, getEntry, i, k, jacobian, getEntry, i, l, for, int, i, 0, <, i, nC, ++, i, for, int, j, 0, <, j, i, ++, j, normal, setEntry, i, j, normal, getEntry, j, i, return, new, Pair, RealMatrix, RealVector, normal, jTr]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getStart:null#[return, problem, getStart]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getObservationSize:null#[return, problem, getObservationSize]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getParameterSize:null#[return, problem, getParameterSize]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:evaluate:RealVector#[return, problem, evaluate, point]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getEvaluationCounter:null#[return, problem, getEvaluationCounter]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getIterationCounter:null#[return, problem, getIterationCounter]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getConvergenceChecker:null#[return, problem, getConvergenceChecker]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:build:null#[return, LeastSquaresFactory, create, model, target, start, weight, checker, maxEvaluations, maxIterations, lazyEvaluation, paramValidator]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:maxEvaluations:int#[=, this, maxEvaluations, newMaxEvaluations, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:maxIterations:int#[=, this, maxIterations, newMaxIterations, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:checker:ConvergenceChecker<Evaluation>#[=, this, checker, newChecker, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:checkerPair:ConvergenceChecker<PointVectorValuePair>#[return, this, checker, LeastSquaresFactory, evaluationChecker, newChecker]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:model:MultivariateVectorFunction+MultivariateMatrixFunction#[return, model, LeastSquaresFactory, model, value, jacobian]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:model:MultivariateJacobianFunction#[=, this, model, newModel, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:target:RealVector#[=, this, target, newTarget, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:target:double[]#[return, target, new, ArrayRealVector, newTarget, false]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:start:RealVector#[=, this, start, newStart, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:start:double[]#[return, start, new, ArrayRealVector, newStart, false]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:weight:RealMatrix#[=, this, weight, newWeight, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:lazyEvaluation:boolean#[=, lazyEvaluation, newValue, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:parameterValidator:ParameterValidator#[=, paramValidator, newValidator, return, this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateJacobianFunction+RealVector+RealVector+RealMatrix+ConvergenceChecker<Evaluation>+int+int+boolean+ParameterValidator#[final, LeastSquaresProblem, p, new, LocalLeastSquaresProblem, model, observed, start, checker, maxEvaluations, maxIterations, lazyEvaluation, paramValidator, if, !=, weight, null, return, weightMatrix, p, weight, return, p]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateJacobianFunction+RealVector+RealVector+ConvergenceChecker<Evaluation>+int+int#[return, create, model, observed, start, null, checker, maxEvaluations, maxIterations, false, null]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateJacobianFunction+RealVector+RealVector+RealMatrix+ConvergenceChecker<Evaluation>+int+int#[return, weightMatrix, create, model, observed, start, checker, maxEvaluations, maxIterations, weight]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateVectorFunction+MultivariateMatrixFunction+double[]+double[]+RealMatrix+ConvergenceChecker<Evaluation>+int+int#[return, create, model, model, jacobian, new, ArrayRealVector, observed, false, new, ArrayRealVector, start, false, weight, checker, maxEvaluations, maxIterations]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:weightMatrix:LeastSquaresProblem+RealMatrix#[final, RealMatrix, weightSquareRoot, squareRoot, weights, return, new, LeastSquaresAdapter, problem, Override, public, Evaluation, evaluate, final, RealVector, point, return, new, DenseWeightedEvaluation, super, evaluate, point, weightSquareRoot]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:weightDiagonal:LeastSquaresProblem+RealVector#[return, weightMatrix, problem, new, DiagonalMatrix, weights, toArray]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:countEvaluations:LeastSquaresProblem+Incrementor#[return, new, LeastSquaresAdapter, problem, Override, public, Evaluation, evaluate, final, RealVector, point, counter, incrementCount, return, super, evaluate, point]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:evaluationChecker:ConvergenceChecker<PointVectorValuePair>#[return, new, ConvergenceChecker, Evaluation, Override, public, boolean, converged, final, int, iteration, final, Evaluation, previous, final, Evaluation, current, return, checker, converged, iteration, new, PointVectorValuePair, previous, getPoint, toArray, previous, getResiduals, toArray, false, new, PointVectorValuePair, current, getPoint, toArray, current, getResiduals, toArray, false]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:squareRoot:RealMatrix#[if, instanceof, m, DiagonalMatrix, final, int, dim, m, getRowDimension, final, RealMatrix, sqrtM, new, DiagonalMatrix, dim, for, int, i, 0, <, i, dim, ++, i, sqrtM, setEntry, i, i, FastMath, sqrt, m, getEntry, i, i, return, sqrtM, final, EigenDecomposition, dec, new, EigenDecomposition, m, return, dec, getSquareRoot]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:model:MultivariateVectorFunction+MultivariateMatrixFunction#[return, new, LocalValueAndJacobianFunction, value, jacobian]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withInitialStepBoundFactor:double#[return, new, LevenbergMarquardtOptimizer, newInitialStepBoundFactor, costRelativeTolerance, parRelativeTolerance, orthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withCostRelativeTolerance:double#[return, new, LevenbergMarquardtOptimizer, initialStepBoundFactor, newCostRelativeTolerance, parRelativeTolerance, orthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withParameterRelativeTolerance:double#[return, new, LevenbergMarquardtOptimizer, initialStepBoundFactor, costRelativeTolerance, newParRelativeTolerance, orthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withOrthoTolerance:double#[return, new, LevenbergMarquardtOptimizer, initialStepBoundFactor, costRelativeTolerance, parRelativeTolerance, newOrthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withRankingThreshold:double#[return, new, LevenbergMarquardtOptimizer, initialStepBoundFactor, costRelativeTolerance, parRelativeTolerance, orthoTolerance, newQRRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getInitialStepBoundFactor:null#[return, initialStepBoundFactor]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getCostRelativeTolerance:null#[return, costRelativeTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getParameterRelativeTolerance:null#[return, parRelativeTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getOrthoTolerance:null#[return, orthoTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getRankingThreshold:null#[return, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:optimize:LeastSquaresProblem#[final, int, nR, problem, getObservationSize, final, int, nC, problem, getParameterSize, final, Incrementor, iterationCounter, problem, getIterationCounter, final, Incrementor, evaluationCounter, problem, getEvaluationCounter, final, ConvergenceChecker, Evaluation, checker, problem, getConvergenceChecker, final, int, solvedCols, FastMath, min, nR, nC, double, lmDir, double, nC, double, lmPar, 0, double, delta, 0, double, xNorm, 0, double, diag, double, nC, double, oldX, double, nC, double, oldRes, double, nR, double, qtf, double, nR, double, work1, double, nC, double, work2, double, nC, double, work3, double, nC, evaluationCounter, incrementCount, Evaluation, current, problem, evaluate, problem, getStart, double, currentResiduals, current, getResiduals, toArray, double, currentCost, current, getCost, double, currentPoint, current, getPoint, toArray, boolean, firstIteration, true, while, true, iterationCounter, incrementCount, final, Evaluation, previous, current, final, InternalData, internalData, qrDecomposition, current, getJacobian, solvedCols, final, double, weightedJacobian, internalData.weightedJacobian, final, int, permutation, internalData.permutation, final, double, diagR, internalData.diagR, final, double, jacNorm, internalData.jacNorm, double, weightedResidual, currentResiduals, for, int, i, 0, <, i, nR, ++, i, =, qtf, i, weightedResidual, i, qTy, qtf, internalData, for, int, k, 0, <, k, solvedCols, ++, k, int, pk, permutation, k, =, weightedJacobian, k, pk, diagR, pk, if, firstIteration, =, xNorm, 0, for, int, k, 0, <, k, nC, ++, k, double, dk, jacNorm, k, if, ==, dk, 0, =, dk, 1.0, double, xk, *, dk, currentPoint, k, +=, xNorm, *, xk, xk, =, diag, k, dk, =, xNorm, FastMath, sqrt, xNorm, =, delta, ==, xNorm, 0, initialStepBoundFactor, *, initialStepBoundFactor, xNorm, double, maxCosine, 0, if, !=, currentCost, 0, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, double, s, jacNorm, pj, if, !=, s, 0, double, sum, 0, for, int, i, 0, <=, i, j, ++, i, +=, sum, *, weightedJacobian, i, pj, qtf, i, =, maxCosine, FastMath, max, maxCosine, /, FastMath, abs, sum, *, s, currentCost, if, <=, maxCosine, orthoTolerance, return, new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, for, int, j, 0, <, j, nC, ++, j, =, diag, j, FastMath, max, diag, j, jacNorm, j, for, double, ratio, 0, <, ratio, 1.0e-4, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, =, oldX, pj, currentPoint, pj, final, double, previousCost, currentCost, double, tmpVec, weightedResidual, =, weightedResidual, oldRes, =, oldRes, tmpVec, =, lmPar, determineLMParameter, qtf, delta, diag, internalData, solvedCols, work1, work2, work3, lmDir, lmPar, double, lmNorm, 0, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, =, lmDir, pj, -, lmDir, pj, =, currentPoint, pj, +, oldX, pj, lmDir, pj, double, s, *, diag, pj, lmDir, pj, +=, lmNorm, *, s, s, =, lmNorm, FastMath, sqrt, lmNorm, if, firstIteration, =, delta, FastMath, min, delta, lmNorm, evaluationCounter, incrementCount, =, current, problem, evaluate, new, ArrayRealVector, currentPoint, =, currentResiduals, current, getResiduals, toArray, =, currentCost, current, getCost, =, currentPoint, current, getPoint, toArray, double, actRed, -, 1.0, if, <, *, 0.1, currentCost, previousCost, double, r, /, currentCost, previousCost, =, actRed, -, 1.0, *, r, r, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, double, dirJ, lmDir, pj, =, work1, j, 0, for, int, i, 0, <=, i, j, ++, i, +=, work1, i, *, weightedJacobian, i, pj, dirJ, double, coeff1, 0, for, int, j, 0, <, j, solvedCols, ++, j, +=, coeff1, *, work1, j, work1, j, double, pc2, *, previousCost, previousCost, /=, coeff1, pc2, double, coeff2, /, *, lmPar, lmNorm, lmNorm, pc2, double, preRed, +, coeff1, *, 2, coeff2, double, dirDer, -, +, coeff1, coeff2, =, ratio, ==, preRed, 0, 0, /, actRed, preRed, if, <=, ratio, 0.25, double, tmp, <, actRed, 0, /, *, 0.5, dirDer, +, dirDer, *, 0.5, actRed, 0.5, if, ||, >=, *, 0.1, currentCost, previousCost, <, tmp, 0.1, =, tmp, 0.1, =, delta, *, tmp, FastMath, min, delta, *, 10.0, lmNorm, /=, lmPar, tmp, if, ||, ==, lmPar, 0, >=, ratio, 0.75, =, delta, *, 2, lmNorm, *=, lmPar, 0.5, if, >=, ratio, 1.0e-4, =, firstIteration, false, =, xNorm, 0, for, int, k, 0, <, k, nC, ++, k, double, xK, *, diag, k, currentPoint, k, +=, xNorm, *, xK, xK, =, xNorm, FastMath, sqrt, xNorm, if, &&, !=, checker, null, checker, converged, iterationCounter, getCount, previous, current, return, new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, =, currentCost, previousCost, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, =, currentPoint, pj, oldX, pj, =, tmpVec, weightedResidual, =, weightedResidual, oldRes, =, oldRes, tmpVec, =, current, previous, if, ||, &&, &&, <=, FastMath, abs, actRed, costRelativeTolerance, <=, preRed, costRelativeTolerance, <=, ratio, 2.0, <=, delta, *, parRelativeTolerance, xNorm, return, new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, if, &&, &&, <=, FastMath, abs, actRed, TWO_EPS, <=, preRed, TWO_EPS, <=, ratio, 2.0, throw, new, ConvergenceException, LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance, if, <=, delta, *, TWO_EPS, xNorm, throw, new, ConvergenceException, LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance, if, <=, maxCosine, TWO_EPS, throw, new, ConvergenceException, LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:determineLMParameter:double[]+double+double[]+InternalData+int+double[]+double[]+double[]+double[]+double#[final, double, weightedJacobian, internalData.weightedJacobian, final, int, permutation, internalData.permutation, final, int, rank, internalData.rank, final, double, diagR, internalData.diagR, final, int, nC, weightedJacobian, 0, length, for, int, j, 0, <, j, rank, ++, j, =, lmDir, permutation, j, qy, j, for, int, j, rank, <, j, nC, ++, j, =, lmDir, permutation, j, 0, for, int, k, -, rank, 1, >=, k, 0, --, k, int, pk, permutation, k, double, ypk, /, lmDir, pk, diagR, pk, for, int, i, 0, <, i, k, ++, i, -=, lmDir, permutation, i, *, ypk, weightedJacobian, i, pk, =, lmDir, pk, ypk, double, dxNorm, 0, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, double, s, *, diag, pj, lmDir, pj, =, work1, pj, s, +=, dxNorm, *, s, s, =, dxNorm, FastMath, sqrt, dxNorm, double, fp, -, dxNorm, delta, if, <=, fp, *, 0.1, delta, =, lmPar, 0, return, lmPar, double, sum2, double, parl, 0, if, ==, rank, solvedCols, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, *=, work1, pj, /, diag, pj, dxNorm, =, sum2, 0, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, double, sum, 0, for, int, i, 0, <, i, j, ++, i, +=, sum, *, weightedJacobian, i, pj, work1, permutation, i, double, s, /, -, work1, pj, sum, diagR, pj, =, work1, pj, s, +=, sum2, *, s, s, =, parl, /, fp, *, delta, sum2, =, sum2, 0, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, double, sum, 0, for, int, i, 0, <=, i, j, ++, i, +=, sum, *, weightedJacobian, i, pj, qy, i, /=, sum, diag, pj, +=, sum2, *, sum, sum, double, gNorm, FastMath, sqrt, sum2, double, paru, /, gNorm, delta, if, ==, paru, 0, =, paru, /, Precision.SAFE_MIN, FastMath, min, delta, 0.1, =, lmPar, FastMath, min, paru, FastMath, max, lmPar, parl, if, ==, lmPar, 0, =, lmPar, /, gNorm, dxNorm, for, int, countdown, 10, >=, countdown, 0, --, countdown, if, ==, lmPar, 0, =, lmPar, FastMath, max, Precision.SAFE_MIN, *, 0.001, paru, double, sPar, FastMath, sqrt, lmPar, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, =, work1, pj, *, sPar, diag, pj, determineLMDirection, qy, work1, work2, internalData, solvedCols, work3, lmDir, =, dxNorm, 0, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, double, s, *, diag, pj, lmDir, pj, =, work3, pj, s, +=, dxNorm, *, s, s, =, dxNorm, FastMath, sqrt, dxNorm, double, previousFP, fp, =, fp, -, dxNorm, delta, if, ||, <=, FastMath, abs, fp, *, 0.1, delta, &&, &&, ==, parl, 0, <=, fp, previousFP, <, previousFP, 0, return, lmPar, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, =, work1, pj, /, *, work3, pj, diag, pj, dxNorm, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, /=, work1, pj, work2, j, double, tmp, work1, pj, for, int, i, +, j, 1, <, i, solvedCols, ++, i, -=, work1, permutation, i, *, weightedJacobian, i, pj, tmp, =, sum2, 0, for, int, j, 0, <, j, solvedCols, ++, j, double, s, work1, permutation, j, +=, sum2, *, s, s, double, correction, /, fp, *, delta, sum2, if, >, fp, 0, =, parl, FastMath, max, parl, lmPar, if, <, fp, 0, =, paru, FastMath, min, paru, lmPar, =, lmPar, FastMath, max, parl, +, lmPar, correction, return, lmPar]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:determineLMDirection:double[]+double[]+double[]+InternalData+int+double[]+double[]#[final, int, permutation, internalData.permutation, final, double, weightedJacobian, internalData.weightedJacobian, final, double, diagR, internalData.diagR, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, for, int, i, +, j, 1, <, i, solvedCols, ++, i, =, weightedJacobian, i, pj, weightedJacobian, j, permutation, i, =, lmDir, j, diagR, pj, =, work, j, qy, j, for, int, j, 0, <, j, solvedCols, ++, j, int, pj, permutation, j, double, dpj, diag, pj, if, !=, dpj, 0, Arrays, fill, lmDiag, +, j, 1, lmDiag.length, 0, =, lmDiag, j, dpj, double, qtbpj, 0, for, int, k, j, <, k, solvedCols, ++, k, int, pk, permutation, k, if, !=, lmDiag, k, 0, final, double, sin, final, double, cos, double, rkk, weightedJacobian, k, pk, if, <, FastMath, abs, rkk, FastMath, abs, lmDiag, k, final, double, cotan, /, rkk, lmDiag, k, =, sin, /, 1.0, FastMath, sqrt, +, 1.0, *, cotan, cotan, =, cos, *, sin, cotan, final, double, tan, /, lmDiag, k, rkk, =, cos, /, 1.0, FastMath, sqrt, +, 1.0, *, tan, tan, =, sin, *, cos, tan, =, weightedJacobian, k, pk, +, *, cos, rkk, *, sin, lmDiag, k, final, double, temp, +, *, cos, work, k, *, sin, qtbpj, =, qtbpj, +, *, -, sin, work, k, *, cos, qtbpj, =, work, k, temp, for, int, i, +, k, 1, <, i, solvedCols, ++, i, double, rik, weightedJacobian, i, pk, final, double, temp2, +, *, cos, rik, *, sin, lmDiag, i, =, lmDiag, i, +, *, -, sin, rik, *, cos, lmDiag, i, =, weightedJacobian, i, pk, temp2, =, lmDiag, j, weightedJacobian, j, permutation, j, =, weightedJacobian, j, permutation, j, lmDir, j, int, nSing, solvedCols, for, int, j, 0, <, j, solvedCols, ++, j, if, &&, ==, lmDiag, j, 0, ==, nSing, solvedCols, =, nSing, j, if, <, nSing, solvedCols, =, work, j, 0, if, >, nSing, 0, for, int, j, -, nSing, 1, >=, j, 0, --, j, int, pj, permutation, j, double, sum, 0, for, int, i, +, j, 1, <, i, nSing, ++, i, +=, sum, *, weightedJacobian, i, pj, work, i, =, work, j, /, -, work, j, sum, lmDiag, j, for, int, j, 0, <, j, lmDir.length, ++, j, =, lmDir, permutation, j, work, j]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:qrDecomposition:RealMatrix+int#[final, double, weightedJacobian, jacobian, scalarMultiply, -, 1, getData, final, int, nR, weightedJacobian.length, final, int, nC, weightedJacobian, 0, length, final, int, permutation, int, nC, final, double, diagR, double, nC, final, double, jacNorm, double, nC, final, double, beta, double, nC, for, int, k, 0, <, k, nC, ++, k, =, permutation, k, k, double, norm2, 0, for, int, i, 0, <, i, nR, ++, i, double, akk, weightedJacobian, i, k, +=, norm2, *, akk, akk, =, jacNorm, k, FastMath, sqrt, norm2, for, int, k, 0, <, k, nC, ++, k, int, nextColumn, -, 1, double, ak2, Double.NEGATIVE_INFINITY, for, int, i, k, <, i, nC, ++, i, double, norm2, 0, for, int, j, k, <, j, nR, ++, j, double, aki, weightedJacobian, j, permutation, i, +=, norm2, *, aki, aki, if, ||, Double, isInfinite, norm2, Double, isNaN, norm2, throw, new, ConvergenceException, LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, nR, nC, if, >, norm2, ak2, =, nextColumn, i, =, ak2, norm2, if, <=, ak2, qrRankingThreshold, return, new, InternalData, weightedJacobian, permutation, k, diagR, jacNorm, beta, int, pk, permutation, nextColumn, =, permutation, nextColumn, permutation, k, =, permutation, k, pk, double, akk, weightedJacobian, k, pk, double, alpha, >, akk, 0, -, FastMath, sqrt, ak2, FastMath, sqrt, ak2, double, betak, /, 1.0, -, ak2, *, akk, alpha, =, beta, pk, betak, =, diagR, pk, alpha, -=, weightedJacobian, k, pk, alpha, for, int, dk, -, nC, 1, k, >, dk, 0, --, dk, double, gamma, 0, for, int, j, k, <, j, nR, ++, j, +=, gamma, *, weightedJacobian, j, pk, weightedJacobian, j, permutation, +, k, dk, *=, gamma, betak, for, int, j, k, <, j, nR, ++, j, -=, weightedJacobian, j, permutation, +, k, dk, *, gamma, weightedJacobian, j, pk, return, new, InternalData, weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:qTy:double[]+InternalData#[final, double, weightedJacobian, internalData.weightedJacobian, final, int, permutation, internalData.permutation, final, double, beta, internalData.beta, final, int, nR, weightedJacobian.length, final, int, nC, weightedJacobian, 0, length, for, int, k, 0, <, k, nC, ++, k, int, pk, permutation, k, double, gamma, 0, for, int, i, k, <, i, nR, ++, i, +=, gamma, *, weightedJacobian, i, pk, y, i, *=, gamma, beta, pk, for, int, i, k, <, i, nR, ++, i, -=, y, i, *, gamma, weightedJacobian, i, pk]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getEvaluations:null#[return, evaluations]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getIterations:null#[return, iterations]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getCovariances:double#[return, value, getCovariances, threshold]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getSigma:double#[return, value, getSigma, covarianceSingularityThreshold]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getRMS:null#[return, value, getRMS]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getJacobian:null#[return, value, getJacobian]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getCost:null#[return, value, getCost]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getChiSquare:null#[return, value, getChiSquare]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getReducedChiSquare:int#[return, value, getReducedChiSquare, n]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getResiduals:null#[return, value, getResiduals]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getPoint:null#[return, value, getPoint]
org.apache.commons.math4.fitting:PolynomialCurveFitter:create:int#[return, new, PolynomialCurveFitter, double, +, degree, 1, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:PolynomialCurveFitter:withStartPoint:double[]#[return, new, PolynomialCurveFitter, newStart, clone, maxIter]
org.apache.commons.math4.fitting:PolynomialCurveFitter:withMaxIterations:int#[return, new, PolynomialCurveFitter, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:PolynomialCurveFitter:getProblem:Collection<WeightedObservedPoint>#[final, int, len, observations, size, final, double, target, double, len, final, double, weights, double, len, int, i, 0, for, WeightedObservedPoint, obs, observations, =, target, i, obs, getY, =, weights, i, obs, getWeight, ++, i, final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, FUNCTION, observations, if, ==, initialGuess, null, throw, new, MathInternalError, return, new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, initialGuess, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting:SimpleCurveFitter:create:ParametricUnivariateFunction+double[]#[return, new, SimpleCurveFitter, f, start, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:SimpleCurveFitter:withStartPoint:double[]#[return, new, SimpleCurveFitter, function, newStart, clone, maxIter]
org.apache.commons.math4.fitting:SimpleCurveFitter:withMaxIterations:int#[return, new, SimpleCurveFitter, function, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:SimpleCurveFitter:getProblem:Collection<WeightedObservedPoint>#[final, int, len, observations, size, final, double, target, double, len, final, double, weights, double, len, int, count, 0, for, WeightedObservedPoint, obs, observations, =, target, count, obs, getY, =, weights, count, obs, getWeight, ++, count, final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, function, observations, return, new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, initialGuess, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting:WeightedObservedPoint:getWeight:null#[return, weight]
org.apache.commons.math4.fitting:WeightedObservedPoint:getX:null#[return, x]
org.apache.commons.math4.fitting:WeightedObservedPoint:getY:null#[return, y]
org.apache.commons.math4.fitting:WeightedObservedPoints:add:double+double#[add, 1d, x, y]
org.apache.commons.math4.fitting:WeightedObservedPoints:add:double+double+double#[observations, add, new, WeightedObservedPoint, weight, x, y]
org.apache.commons.math4.fitting:WeightedObservedPoints:add:WeightedObservedPoint#[observations, add, observed]
org.apache.commons.math4.fitting:WeightedObservedPoints:toList:null#[return, new, ArrayList, WeightedObservedPoint, observations]
org.apache.commons.math4.fitting:WeightedObservedPoints:clear:null#[observations, clear]
org.apache.commons.math4.fraction:AbstractFormat:getDefaultNumberFormat:null#[return, getDefaultNumberFormat, Locale, getDefault]
org.apache.commons.math4.fraction:AbstractFormat:getDefaultNumberFormat:Locale#[final, NumberFormat, nf, NumberFormat, getNumberInstance, locale, nf, setMaximumFractionDigits, 0, nf, setParseIntegerOnly, true, return, nf]
org.apache.commons.math4.fraction:AbstractFormat:getDenominatorFormat:null#[return, denominatorFormat]
org.apache.commons.math4.fraction:AbstractFormat:getNumeratorFormat:null#[return, numeratorFormat]
org.apache.commons.math4.fraction:AbstractFormat:setDenominatorFormat:NumberFormat#[if, ==, format, null, throw, new, NullArgumentException, LocalizedFormats.DENOMINATOR_FORMAT, =, this, denominatorFormat, format]
org.apache.commons.math4.fraction:AbstractFormat:setNumeratorFormat:NumberFormat#[if, ==, format, null, throw, new, NullArgumentException, LocalizedFormats.NUMERATOR_FORMAT, =, this, numeratorFormat, format]
org.apache.commons.math4.fraction:AbstractFormat:parseAndIgnoreWhitespace:String+ParsePosition#[parseNextCharacter, source, pos, pos, setIndex, -, pos, getIndex, 1]
org.apache.commons.math4.fraction:AbstractFormat:parseNextCharacter:String+ParsePosition#[int, index, pos, getIndex, final, int, n, source, length, char, ret, 0, if, <, index, n, char, c, do, =, c, source, charAt, ++, index, &&, Character, isWhitespace, c, <, index, n, pos, setIndex, index, if, <, index, n, =, ret, c, return, ret]
org.apache.commons.math4.fraction:AbstractFormat:format:double+StringBuffer+FieldPosition#[return, format, Double, valueOf, value, buffer, position]
org.apache.commons.math4.fraction:AbstractFormat:format:long+StringBuffer+FieldPosition#[return, format, Long, valueOf, value, buffer, position]
org.apache.commons.math4.fraction:BigFraction:getReducedFraction:int+int#[if, ==, numerator, 0, return, ZERO, return, new, BigFraction, numerator, denominator]
org.apache.commons.math4.fraction:BigFraction:abs:null#[return, ==, numerator, signum, 1, this, negate]
org.apache.commons.math4.fraction:BigFraction:add:BigInteger#[MathUtils, checkNotNull, bg, if, ==, numerator, signum, 0, return, new, BigFraction, bg, if, ==, bg, signum, 0, return, this, return, new, BigFraction, numerator, add, denominator, multiply, bg, denominator]
org.apache.commons.math4.fraction:BigFraction:add:int#[return, add, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:add:long#[return, add, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:add:BigFraction#[MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, if, ==, fraction.numerator, signum, 0, return, this, if, ==, numerator, signum, 0, return, fraction, BigInteger, num, null, BigInteger, den, null, if, denominator, equals, fraction.denominator, =, num, numerator, add, fraction.numerator, =, den, denominator, =, num, numerator, multiply, fraction.denominator, add, fraction.numerator, multiply, denominator, =, den, denominator, multiply, fraction.denominator, if, ==, num, signum, 0, return, ZERO, return, new, BigFraction, num, den]
org.apache.commons.math4.fraction:BigFraction:bigDecimalValue:null#[return, new, BigDecimal, numerator, divide, new, BigDecimal, denominator]
org.apache.commons.math4.fraction:BigFraction:bigDecimalValue:int#[return, new, BigDecimal, numerator, divide, new, BigDecimal, denominator, roundingMode]
org.apache.commons.math4.fraction:BigFraction:bigDecimalValue:int+int#[return, new, BigDecimal, numerator, divide, new, BigDecimal, denominator, scale, roundingMode]
org.apache.commons.math4.fraction:BigFraction:compareTo:BigFraction#[int, lhsSigNum, numerator, signum, int, rhsSigNum, object.numerator, signum, if, !=, lhsSigNum, rhsSigNum, return, >, lhsSigNum, rhsSigNum, 1, -, 1, if, ==, lhsSigNum, 0, return, 0, BigInteger, nOd, numerator, multiply, object.denominator, BigInteger, dOn, denominator, multiply, object.numerator, return, nOd, compareTo, dOn]
org.apache.commons.math4.fraction:BigFraction:divide:BigInteger#[MathUtils, checkNotNull, bg, if, ==, bg, signum, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, if, ==, numerator, signum, 0, return, ZERO, return, new, BigFraction, numerator, denominator, multiply, bg]
org.apache.commons.math4.fraction:BigFraction:divide:int#[return, divide, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:divide:long#[return, divide, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:divide:BigFraction#[MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, if, ==, fraction.numerator, signum, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, if, ==, numerator, signum, 0, return, ZERO, return, multiply, fraction, reciprocal]
org.apache.commons.math4.fraction:BigFraction:doubleValue:null#[double, result, /, numerator, doubleValue, denominator, doubleValue, if, Double, isNaN, result, int, shift, -, FastMath, max, numerator, bitLength, denominator, bitLength, FastMath, getExponent, Double.MAX_VALUE, =, result, /, numerator, shiftRight, shift, doubleValue, denominator, shiftRight, shift, doubleValue, return, result]
org.apache.commons.math4.fraction:BigFraction:equals:Object#[boolean, ret, false, if, ==, this, other, =, ret, true, if, instanceof, other, BigFraction, BigFraction, rhs, BigFraction, other, reduce, BigFraction, thisOne, this, reduce, =, ret, &&, thisOne.numerator, equals, rhs.numerator, thisOne.denominator, equals, rhs.denominator, return, ret]
org.apache.commons.math4.fraction:BigFraction:floatValue:null#[float, result, /, numerator, floatValue, denominator, floatValue, if, Double, isNaN, result, int, shift, -, FastMath, max, numerator, bitLength, denominator, bitLength, FastMath, getExponent, Float.MAX_VALUE, =, result, /, numerator, shiftRight, shift, floatValue, denominator, shiftRight, shift, floatValue, return, result]
org.apache.commons.math4.fraction:BigFraction:getDenominator:null#[return, denominator]
org.apache.commons.math4.fraction:BigFraction:getDenominatorAsInt:null#[return, denominator, intValue]
org.apache.commons.math4.fraction:BigFraction:getDenominatorAsLong:null#[return, denominator, longValue]
org.apache.commons.math4.fraction:BigFraction:getNumerator:null#[return, numerator]
org.apache.commons.math4.fraction:BigFraction:getNumeratorAsInt:null#[return, numerator, intValue]
org.apache.commons.math4.fraction:BigFraction:getNumeratorAsLong:null#[return, numerator, longValue]
org.apache.commons.math4.fraction:BigFraction:hashCode:null#[return, +, *, 37, +, *, 37, 17, numerator, hashCode, denominator, hashCode]
org.apache.commons.math4.fraction:BigFraction:intValue:null#[return, numerator, divide, denominator, intValue]
org.apache.commons.math4.fraction:BigFraction:longValue:null#[return, numerator, divide, denominator, longValue]
org.apache.commons.math4.fraction:BigFraction:multiply:BigInteger#[MathUtils, checkNotNull, bg, if, ||, ==, numerator, signum, 0, ==, bg, signum, 0, return, ZERO, return, new, BigFraction, bg, multiply, numerator, denominator]
org.apache.commons.math4.fraction:BigFraction:multiply:int#[if, ||, ==, i, 0, ==, numerator, signum, 0, return, ZERO, return, multiply, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:multiply:long#[if, ||, ==, l, 0, ==, numerator, signum, 0, return, ZERO, return, multiply, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:multiply:BigFraction#[MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, if, ||, ==, numerator, signum, 0, ==, fraction.numerator, signum, 0, return, ZERO, return, new, BigFraction, numerator, multiply, fraction.numerator, denominator, multiply, fraction.denominator]
org.apache.commons.math4.fraction:BigFraction:negate:null#[return, new, BigFraction, numerator, negate, denominator]
org.apache.commons.math4.fraction:BigFraction:percentageValue:null#[return, multiply, ONE_HUNDRED, doubleValue]
org.apache.commons.math4.fraction:BigFraction:pow:int#[if, ==, exponent, 0, return, ONE, if, ==, numerator, signum, 0, return, this, if, <, exponent, 0, return, new, BigFraction, denominator, pow, -, exponent, numerator, pow, -, exponent, return, new, BigFraction, numerator, pow, exponent, denominator, pow, exponent]
org.apache.commons.math4.fraction:BigFraction:pow:long#[if, ==, exponent, 0, return, ONE, if, ==, numerator, signum, 0, return, this, if, <, exponent, 0, return, new, BigFraction, ArithmeticUtils, pow, denominator, -, exponent, ArithmeticUtils, pow, numerator, -, exponent, return, new, BigFraction, ArithmeticUtils, pow, numerator, exponent, ArithmeticUtils, pow, denominator, exponent]
org.apache.commons.math4.fraction:BigFraction:pow:BigInteger#[if, ==, exponent, signum, 0, return, ONE, if, ==, numerator, signum, 0, return, this, if, ==, exponent, signum, -, 1, final, BigInteger, eNeg, exponent, negate, return, new, BigFraction, ArithmeticUtils, pow, denominator, eNeg, ArithmeticUtils, pow, numerator, eNeg, return, new, BigFraction, ArithmeticUtils, pow, numerator, exponent, ArithmeticUtils, pow, denominator, exponent]
org.apache.commons.math4.fraction:BigFraction:pow:double#[return, /, FastMath, pow, numerator, doubleValue, exponent, FastMath, pow, denominator, doubleValue, exponent]
org.apache.commons.math4.fraction:BigFraction:reciprocal:null#[return, new, BigFraction, denominator, numerator]
org.apache.commons.math4.fraction:BigFraction:reduce:null#[final, BigInteger, gcd, numerator, gcd, denominator, if, <, BigInteger.ONE, compareTo, gcd, 0, return, new, BigFraction, numerator, divide, gcd, denominator, divide, gcd, return, this]
org.apache.commons.math4.fraction:BigFraction:subtract:BigInteger#[MathUtils, checkNotNull, bg, if, ==, bg, signum, 0, return, this, if, ==, numerator, signum, 0, return, new, BigFraction, bg, negate, return, new, BigFraction, numerator, subtract, denominator, multiply, bg, denominator]
org.apache.commons.math4.fraction:BigFraction:subtract:int#[return, subtract, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:subtract:long#[return, subtract, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:subtract:BigFraction#[MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, if, ==, fraction.numerator, signum, 0, return, this, if, ==, numerator, signum, 0, return, fraction, negate, BigInteger, num, null, BigInteger, den, null, if, denominator, equals, fraction.denominator, =, num, numerator, subtract, fraction.numerator, =, den, denominator, =, num, numerator, multiply, fraction.denominator, subtract, fraction.numerator, multiply, denominator, =, den, denominator, multiply, fraction.denominator, return, new, BigFraction, num, den]
org.apache.commons.math4.fraction:BigFraction:toString:null#[String, str, null, if, BigInteger.ONE, equals, denominator, =, str, numerator, toString, if, BigInteger.ZERO, equals, numerator, =, str, "0", =, str, +, numerator, " / ", denominator, return, str]
org.apache.commons.math4.fraction:BigFraction:getField:null#[return, BigFractionField, getInstance]
org.apache.commons.math4.fraction:BigFractionField:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:BigFractionField:getOne:null#[return, BigFraction.ONE]
org.apache.commons.math4.fraction:BigFractionField:getZero:null#[return, BigFraction.ZERO]
org.apache.commons.math4.fraction:BigFractionField:getRuntimeClass:null#[return, BigFraction]
org.apache.commons.math4.fraction:BigFractionField:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:BigFractionFormat:getAvailableLocales:null#[return, NumberFormat, getAvailableLocales]
org.apache.commons.math4.fraction:BigFractionFormat:formatBigFraction:BigFraction#[return, getImproperInstance, format, f]
org.apache.commons.math4.fraction:BigFractionFormat:getImproperInstance:null#[return, getImproperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:BigFractionFormat:getImproperInstance:Locale#[return, new, BigFractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:BigFractionFormat:getProperInstance:null#[return, getProperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:BigFractionFormat:getProperInstance:Locale#[return, new, ProperBigFractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:BigFractionFormat:format:BigFraction+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, getNumeratorFormat, format, BigFraction, getNumerator, toAppendTo, pos, toAppendTo, append, " / ", getDenominatorFormat, format, BigFraction, getDenominator, toAppendTo, pos, return, toAppendTo]
org.apache.commons.math4.fraction:BigFractionFormat:format:Object+StringBuffer+FieldPosition#[final, StringBuffer, ret, if, instanceof, obj, BigFraction, =, ret, format, BigFraction, obj, toAppendTo, pos, if, instanceof, obj, BigInteger, =, ret, format, new, BigFraction, BigInteger, obj, toAppendTo, pos, if, instanceof, obj, Number, =, ret, format, new, BigFraction, Number, obj, doubleValue, toAppendTo, pos, throw, new, MathIllegalArgumentException, LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION, return, ret]
org.apache.commons.math4.fraction:BigFractionFormat:parse:String#[final, ParsePosition, parsePosition, new, ParsePosition, 0, final, BigFraction, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, BigFraction, return, result]
org.apache.commons.math4.fraction:BigFractionFormat:parse:String+ParsePosition#[final, int, initialIndex, pos, getIndex, parseAndIgnoreWhitespace, source, pos, final, BigInteger, num, parseNextBigInteger, source, pos, if, ==, num, null, pos, setIndex, initialIndex, return, null, final, int, startIndex, pos, getIndex, final, char, c, parseNextCharacter, source, pos, switch, c, case, 0, return, new, BigFraction, num, case, '/', break, default, pos, setIndex, initialIndex, pos, setErrorIndex, startIndex, return, null, parseAndIgnoreWhitespace, source, pos, final, BigInteger, den, parseNextBigInteger, source, pos, if, ==, den, null, pos, setIndex, initialIndex, return, null, return, new, BigFraction, num, den]
org.apache.commons.math4.fraction:BigFractionFormat:parseNextBigInteger:String+ParsePosition#[final, int, start, pos, getIndex, int, end, ==, source, charAt, start, '-', +, start, 1, start, while, &&, <, end, source, length, Character, isDigit, source, charAt, end, ++, end, try, BigInteger, n, new, BigInteger, source, substring, start, end, pos, setIndex, end, return, n, catch, NumberFormatException, nfe, pos, setErrorIndex, start, return, null]
org.apache.commons.math4.fraction:Fraction:abs:null#[Fraction, ret, if, >=, numerator, 0, =, ret, this, =, ret, negate, return, ret]
org.apache.commons.math4.fraction:Fraction:compareTo:Fraction#[long, nOd, *, long, numerator, object.denominator, long, dOn, *, long, denominator, object.numerator, return, <, nOd, dOn, -, 1, >, nOd, dOn, +, 1, 0]
org.apache.commons.math4.fraction:Fraction:doubleValue:null#[return, /, double, numerator, double, denominator]
org.apache.commons.math4.fraction:Fraction:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, Fraction, Fraction, rhs, Fraction, other, return, &&, ==, numerator, rhs.numerator, ==, denominator, rhs.denominator, return, false]
org.apache.commons.math4.fraction:Fraction:floatValue:null#[return, float, doubleValue]
org.apache.commons.math4.fraction:Fraction:getDenominator:null#[return, denominator]
org.apache.commons.math4.fraction:Fraction:getNumerator:null#[return, numerator]
org.apache.commons.math4.fraction:Fraction:hashCode:null#[return, +, *, 37, +, *, 37, 17, numerator, denominator]
org.apache.commons.math4.fraction:Fraction:intValue:null#[return, int, doubleValue]
org.apache.commons.math4.fraction:Fraction:longValue:null#[return, long, doubleValue]
org.apache.commons.math4.fraction:Fraction:negate:null#[if, ==, numerator, Integer.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator, return, new, Fraction, -, numerator, denominator]
org.apache.commons.math4.fraction:Fraction:reciprocal:null#[return, new, Fraction, denominator, numerator]
org.apache.commons.math4.fraction:Fraction:add:Fraction#[return, addSub, fraction, true]
org.apache.commons.math4.fraction:Fraction:add:int#[return, new, Fraction, +, numerator, *, i, denominator, denominator]
org.apache.commons.math4.fraction:Fraction:subtract:Fraction#[return, addSub, fraction, false]
org.apache.commons.math4.fraction:Fraction:subtract:int#[return, new, Fraction, -, numerator, *, i, denominator, denominator]
org.apache.commons.math4.fraction:Fraction:addSub:Fraction+boolean#[if, ==, fraction, null, throw, new, NullArgumentException, LocalizedFormats.FRACTION, if, ==, numerator, 0, return, isAdd, fraction, fraction, negate, if, ==, fraction.numerator, 0, return, this, int, d1, ArithmeticUtils, gcd, denominator, fraction.denominator, if, ==, d1, 1, int, uvp, ArithmeticUtils, mulAndCheck, numerator, fraction.denominator, int, upv, ArithmeticUtils, mulAndCheck, fraction.numerator, denominator, return, new, Fraction, isAdd, ArithmeticUtils, addAndCheck, uvp, upv, ArithmeticUtils, subAndCheck, uvp, upv, ArithmeticUtils, mulAndCheck, denominator, fraction.denominator, BigInteger, uvp, BigInteger, valueOf, numerator, multiply, BigInteger, valueOf, /, fraction.denominator, d1, BigInteger, upv, BigInteger, valueOf, fraction.numerator, multiply, BigInteger, valueOf, /, denominator, d1, BigInteger, t, isAdd, uvp, add, upv, uvp, subtract, upv, int, tmodd1, t, mod, BigInteger, valueOf, d1, intValue, int, d2, ==, tmodd1, 0, d1, ArithmeticUtils, gcd, tmodd1, d1, BigInteger, w, t, divide, BigInteger, valueOf, d2, if, >, w, bitLength, 31, throw, new, MathArithmeticException, LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY, w, return, new, Fraction, w, intValue, ArithmeticUtils, mulAndCheck, /, denominator, d1, /, fraction.denominator, d2]
org.apache.commons.math4.fraction:Fraction:multiply:Fraction#[if, ==, fraction, null, throw, new, NullArgumentException, LocalizedFormats.FRACTION, if, ||, ==, numerator, 0, ==, fraction.numerator, 0, return, ZERO, int, d1, ArithmeticUtils, gcd, numerator, fraction.denominator, int, d2, ArithmeticUtils, gcd, fraction.numerator, denominator, return, getReducedFraction, ArithmeticUtils, mulAndCheck, /, numerator, d1, /, fraction.numerator, d2, ArithmeticUtils, mulAndCheck, /, denominator, d2, /, fraction.denominator, d1]
org.apache.commons.math4.fraction:Fraction:multiply:int#[return, multiply, new, Fraction, i]
org.apache.commons.math4.fraction:Fraction:divide:Fraction#[if, ==, fraction, null, throw, new, NullArgumentException, LocalizedFormats.FRACTION, if, ==, fraction.numerator, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator, return, multiply, fraction, reciprocal]
org.apache.commons.math4.fraction:Fraction:divide:int#[return, divide, new, Fraction, i]
org.apache.commons.math4.fraction:Fraction:percentageValue:null#[return, *, 100, doubleValue]
org.apache.commons.math4.fraction:Fraction:getReducedFraction:int+int#[if, ==, denominator, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator, if, ==, numerator, 0, return, ZERO, if, &&, ==, denominator, Integer.MIN_VALUE, ==, &, numerator, 1, 0, /=, numerator, 2, /=, denominator, 2, if, <, denominator, 0, if, ||, ==, numerator, Integer.MIN_VALUE, ==, denominator, Integer.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator, =, numerator, -, numerator, =, denominator, -, denominator, int, gcd, ArithmeticUtils, gcd, numerator, denominator, /=, numerator, gcd, /=, denominator, gcd, return, new, Fraction, numerator, denominator]
org.apache.commons.math4.fraction:Fraction:toString:null#[String, str, null, if, ==, denominator, 1, =, str, Integer, toString, numerator, if, ==, numerator, 0, =, str, "0", =, str, +, numerator, " / ", denominator, return, str]
org.apache.commons.math4.fraction:Fraction:getField:null#[return, FractionField, getInstance]
org.apache.commons.math4.fraction:FractionField:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:FractionField:getOne:null#[return, Fraction.ONE]
org.apache.commons.math4.fraction:FractionField:getZero:null#[return, Fraction.ZERO]
org.apache.commons.math4.fraction:FractionField:getRuntimeClass:null#[return, Fraction]
org.apache.commons.math4.fraction:FractionField:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:FractionFormat:getAvailableLocales:null#[return, NumberFormat, getAvailableLocales]
org.apache.commons.math4.fraction:FractionFormat:formatFraction:Fraction#[return, getImproperInstance, format, f]
org.apache.commons.math4.fraction:FractionFormat:getImproperInstance:null#[return, getImproperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:FractionFormat:getImproperInstance:Locale#[return, new, FractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:FractionFormat:getProperInstance:null#[return, getProperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:FractionFormat:getProperInstance:Locale#[return, new, ProperFractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:FractionFormat:getDefaultNumberFormat:null#[return, getDefaultNumberFormat, Locale, getDefault]
org.apache.commons.math4.fraction:FractionFormat:format:Fraction+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, getNumeratorFormat, format, fraction, getNumerator, toAppendTo, pos, toAppendTo, append, " / ", getDenominatorFormat, format, fraction, getDenominator, toAppendTo, pos, return, toAppendTo]
org.apache.commons.math4.fraction:FractionFormat:format:Object+StringBuffer+FieldPosition#[StringBuffer, ret, null, if, instanceof, obj, Fraction, =, ret, format, Fraction, obj, toAppendTo, pos, if, instanceof, obj, Number, =, ret, format, new, Fraction, Number, obj, doubleValue, toAppendTo, pos, throw, new, MathIllegalArgumentException, LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION, return, ret]
org.apache.commons.math4.fraction:FractionFormat:parse:String#[final, ParsePosition, parsePosition, new, ParsePosition, 0, final, Fraction, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, Fraction, return, result]
org.apache.commons.math4.fraction:FractionFormat:parse:String+ParsePosition#[final, int, initialIndex, pos, getIndex, parseAndIgnoreWhitespace, source, pos, final, Number, num, getNumeratorFormat, parse, source, pos, if, ==, num, null, pos, setIndex, initialIndex, return, null, final, int, startIndex, pos, getIndex, final, char, c, parseNextCharacter, source, pos, switch, c, case, 0, return, new, Fraction, num, intValue, 1, case, '/', break, default, pos, setIndex, initialIndex, pos, setErrorIndex, startIndex, return, null, parseAndIgnoreWhitespace, source, pos, final, Number, den, getDenominatorFormat, parse, source, pos, if, ==, den, null, pos, setIndex, initialIndex, return, null, return, new, Fraction, num, intValue, den, intValue]
org.apache.commons.math4.fraction:ProperBigFractionFormat:format:BigFraction+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, BigInteger, num, fraction, getNumerator, BigInteger, den, fraction, getDenominator, BigInteger, whole, num, divide, den, =, num, num, remainder, den, if, !, BigInteger.ZERO, equals, whole, getWholeFormat, format, whole, toAppendTo, pos, toAppendTo, append, ' ', if, <, num, compareTo, BigInteger.ZERO, 0, =, num, num, negate, getNumeratorFormat, format, num, toAppendTo, pos, toAppendTo, append, " / ", getDenominatorFormat, format, den, toAppendTo, pos, return, toAppendTo]
org.apache.commons.math4.fraction:ProperBigFractionFormat:getWholeFormat:null#[return, wholeFormat]
org.apache.commons.math4.fraction:ProperBigFractionFormat:parse:String+ParsePosition#[BigFraction, ret, super, parse, source, pos, if, !=, ret, null, return, ret, final, int, initialIndex, pos, getIndex, parseAndIgnoreWhitespace, source, pos, BigInteger, whole, parseNextBigInteger, source, pos, if, ==, whole, null, pos, setIndex, initialIndex, return, null, parseAndIgnoreWhitespace, source, pos, BigInteger, num, parseNextBigInteger, source, pos, if, ==, num, null, pos, setIndex, initialIndex, return, null, if, <, num, compareTo, BigInteger.ZERO, 0, pos, setIndex, initialIndex, return, null, final, int, startIndex, pos, getIndex, final, char, c, parseNextCharacter, source, pos, switch, c, case, 0, return, new, BigFraction, num, case, '/', break, default, pos, setIndex, initialIndex, pos, setErrorIndex, startIndex, return, null, parseAndIgnoreWhitespace, source, pos, final, BigInteger, den, parseNextBigInteger, source, pos, if, ==, den, null, pos, setIndex, initialIndex, return, null, if, <, den, compareTo, BigInteger.ZERO, 0, pos, setIndex, initialIndex, return, null, boolean, wholeIsNeg, <, whole, compareTo, BigInteger.ZERO, 0, if, wholeIsNeg, =, whole, whole, negate, =, num, whole, multiply, den, add, num, if, wholeIsNeg, =, num, num, negate, return, new, BigFraction, num, den]
org.apache.commons.math4.fraction:ProperBigFractionFormat:setWholeFormat:NumberFormat#[if, ==, format, null, throw, new, NullArgumentException, LocalizedFormats.WHOLE_FORMAT, =, this, wholeFormat, format]
org.apache.commons.math4.fraction:ProperFractionFormat:format:Fraction+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, int, num, fraction, getNumerator, int, den, fraction, getDenominator, int, whole, /, num, den, %=, num, den, if, !=, whole, 0, getWholeFormat, format, whole, toAppendTo, pos, toAppendTo, append, ' ', =, num, FastMath, abs, num, getNumeratorFormat, format, num, toAppendTo, pos, toAppendTo, append, " / ", getDenominatorFormat, format, den, toAppendTo, pos, return, toAppendTo]
org.apache.commons.math4.fraction:ProperFractionFormat:getWholeFormat:null#[return, wholeFormat]
org.apache.commons.math4.fraction:ProperFractionFormat:parse:String+ParsePosition#[Fraction, ret, super, parse, source, pos, if, !=, ret, null, return, ret, int, initialIndex, pos, getIndex, parseAndIgnoreWhitespace, source, pos, Number, whole, getWholeFormat, parse, source, pos, if, ==, whole, null, pos, setIndex, initialIndex, return, null, parseAndIgnoreWhitespace, source, pos, Number, num, getNumeratorFormat, parse, source, pos, if, ==, num, null, pos, setIndex, initialIndex, return, null, if, <, num, intValue, 0, pos, setIndex, initialIndex, return, null, int, startIndex, pos, getIndex, char, c, parseNextCharacter, source, pos, switch, c, case, 0, return, new, Fraction, num, intValue, 1, case, '/', break, default, pos, setIndex, initialIndex, pos, setErrorIndex, startIndex, return, null, parseAndIgnoreWhitespace, source, pos, Number, den, getDenominatorFormat, parse, source, pos, if, ==, den, null, pos, setIndex, initialIndex, return, null, if, <, den, intValue, 0, pos, setIndex, initialIndex, return, null, int, w, whole, intValue, int, n, num, intValue, int, d, den, intValue, return, new, Fraction, *, +, *, FastMath, abs, w, d, n, MathUtils, copySign, 1, w, d]
org.apache.commons.math4.fraction:ProperFractionFormat:setWholeFormat:NumberFormat#[if, ==, format, null, throw, new, NullArgumentException, LocalizedFormats.WHOLE_FORMAT, =, this, wholeFormat, format]
org.apache.commons.math4.genetics:AbstractListChromosome:getRepresentation:null#[return, representation]
org.apache.commons.math4.genetics:AbstractListChromosome:getLength:null#[return, getRepresentation, size]
org.apache.commons.math4.genetics:AbstractListChromosome:toString:null#[return, String, format, "(f=%s %s)", getFitness, getRepresentation]
org.apache.commons.math4.genetics:BinaryChromosome:checkValidity:List<Integer>#[for, int, i, chromosomeRepresentation, if, ||, <, i, 0, >, i, 1, throw, new, InvalidRepresentationException, LocalizedFormats.INVALID_BINARY_DIGIT, i]
org.apache.commons.math4.genetics:BinaryChromosome:randomBinaryRepresentation:int#[List, Integer, rList, new, ArrayList, Integer, length, for, int, j, 0, <, j, length, ++, j, rList, add, GeneticAlgorithm, getRandomGenerator, nextInt, 2, return, rList]
org.apache.commons.math4.genetics:BinaryChromosome:isSame:Chromosome#[if, !, instanceof, another, BinaryChromosome, return, false, BinaryChromosome, anotherBc, BinaryChromosome, another, if, !=, getLength, anotherBc, getLength, return, false, for, int, i, 0, <, i, getRepresentation, size, ++, i, if, !, getRepresentation, get, i, equals, anotherBc, getRepresentation, get, i, return, false, return, true]
org.apache.commons.math4.genetics:BinaryMutation:mutate:Chromosome#[if, !, instanceof, original, BinaryChromosome, throw, new, MathIllegalArgumentException, LocalizedFormats.INVALID_BINARY_CHROMOSOME, BinaryChromosome, origChrom, BinaryChromosome, original, List, Integer, newRepr, new, ArrayList, Integer, origChrom, getRepresentation, int, geneIndex, GeneticAlgorithm, getRandomGenerator, nextInt, origChrom, getLength, newRepr, set, geneIndex, ==, origChrom, getRepresentation, get, geneIndex, 0, 1, 0, Chromosome, newChrom, origChrom, newFixedLengthChromosome, newRepr, return, newChrom]
org.apache.commons.math4.genetics:Chromosome:getFitness:null#[if, ==, this, fitness, NO_FITNESS, =, this, fitness, fitness, return, this, fitness]
org.apache.commons.math4.genetics:Chromosome:compareTo:Chromosome#[return, Double, compare, getFitness, another, getFitness]
org.apache.commons.math4.genetics:Chromosome:isSame:Chromosome#[return, false]
org.apache.commons.math4.genetics:Chromosome:findSameChromosome:Population#[for, Chromosome, anotherChr, population, if, this, isSame, anotherChr, return, anotherChr, return, null]
org.apache.commons.math4.genetics:Chromosome:searchForFitnessUpdate:Population#[Chromosome, sameChromosome, findSameChromosome, population, if, !=, sameChromosome, null, =, fitness, sameChromosome, getFitness]
org.apache.commons.math4.genetics:ChromosomePair:getFirst:null#[return, first]
org.apache.commons.math4.genetics:ChromosomePair:getSecond:null#[return, second]
org.apache.commons.math4.genetics:ChromosomePair:toString:null#[return, String, format, "(%s,%s)", getFirst, getSecond]
org.apache.commons.math4.genetics:CycleCrossover:isRandomStart:null#[return, randomStart]
org.apache.commons.math4.genetics:CycleCrossover:crossover:Chromosome+Chromosome#[if, !, &&, instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, throw, new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, return, mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:CycleCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[final, int, length, first, getLength, if, !=, length, second, getLength, throw, new, DimensionMismatchException, second, getLength, length, final, List, T, parent1Rep, first, getRepresentation, final, List, T, parent2Rep, second, getRepresentation, final, List, T, child1Rep, new, ArrayList, T, second, getRepresentation, final, List, T, child2Rep, new, ArrayList, T, first, getRepresentation, final, Set, Integer, visitedIndices, new, HashSet, Integer, length, final, List, Integer, indices, new, ArrayList, Integer, length, int, idx, randomStart, GeneticAlgorithm, getRandomGenerator, nextInt, length, 0, int, cycle, 1, while, <, visitedIndices, size, length, indices, add, idx, T, item, parent2Rep, get, idx, =, idx, parent1Rep, indexOf, item, while, !=, idx, indices, get, 0, indices, add, idx, =, item, parent2Rep, get, idx, =, idx, parent1Rep, indexOf, item, if, !=, %, ++, cycle, 2, 0, for, int, i, indices, T, tmp, child1Rep, get, i, child1Rep, set, i, child2Rep, get, i, child2Rep, set, i, tmp, visitedIndices, addAll, indices, =, idx, %, +, indices, get, 0, 1, length, while, &&, visitedIndices, contains, idx, <, visitedIndices, size, length, ++, idx, if, >=, idx, length, =, idx, 0, indices, clear, return, new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.genetics:ElitisticListPopulation:nextGeneration:null#[ElitisticListPopulation, nextGeneration, new, ElitisticListPopulation, getPopulationLimit, getElitismRate, final, List, Chromosome, oldChromosomes, getChromosomeList, Collections, sort, oldChromosomes, int, boundIndex, int, FastMath, ceil, *, -, 1.0, getElitismRate, oldChromosomes, size, for, int, i, boundIndex, <, i, oldChromosomes, size, ++, i, nextGeneration, addChromosome, oldChromosomes, get, i, return, nextGeneration]
org.apache.commons.math4.genetics:ElitisticListPopulation:setElitismRate:double#[if, ||, <, elitismRate, 0, >, elitismRate, 1, throw, new, OutOfRangeException, LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1, =, this, elitismRate, elitismRate]
org.apache.commons.math4.genetics:ElitisticListPopulation:getElitismRate:null#[return, this, elitismRate]
org.apache.commons.math4.genetics:FixedElapsedTime:isSatisfied:Population#[if, <, endTime, 0, =, endTime, +, System, nanoTime, maxTimePeriod, return, >=, System, nanoTime, endTime]
org.apache.commons.math4.genetics:FixedGenerationCount:isSatisfied:Population#[if, <, this, numGenerations, this, maxGenerations, ++, numGenerations, return, false, return, true]
org.apache.commons.math4.genetics:FixedGenerationCount:getNumGenerations:null#[return, numGenerations]
org.apache.commons.math4.genetics:GeneticAlgorithm:setRandomGenerator:RandomGenerator#[=, randomGenerator, random]
org.apache.commons.math4.genetics:GeneticAlgorithm:getRandomGenerator:null#[return, randomGenerator]
org.apache.commons.math4.genetics:GeneticAlgorithm:evolve:Population+StoppingCondition#[Population, current, initial, =, generationsEvolved, 0, while, !, condition, isSatisfied, current, =, current, nextGeneration, current, ++, generationsEvolved, return, current]
org.apache.commons.math4.genetics:GeneticAlgorithm:nextGeneration:Population#[Population, nextGeneration, current, nextGeneration, RandomGenerator, randGen, getRandomGenerator, while, <, nextGeneration, getPopulationSize, nextGeneration, getPopulationLimit, ChromosomePair, pair, getSelectionPolicy, select, current, if, <, randGen, nextDouble, getCrossoverRate, =, pair, getCrossoverPolicy, crossover, pair, getFirst, pair, getSecond, if, <, randGen, nextDouble, getMutationRate, =, pair, new, ChromosomePair, getMutationPolicy, mutate, pair, getFirst, getMutationPolicy, mutate, pair, getSecond, nextGeneration, addChromosome, pair, getFirst, if, <, nextGeneration, getPopulationSize, nextGeneration, getPopulationLimit, nextGeneration, addChromosome, pair, getSecond, return, nextGeneration]
org.apache.commons.math4.genetics:GeneticAlgorithm:getCrossoverPolicy:null#[return, crossoverPolicy]
org.apache.commons.math4.genetics:GeneticAlgorithm:getCrossoverRate:null#[return, crossoverRate]
org.apache.commons.math4.genetics:GeneticAlgorithm:getMutationPolicy:null#[return, mutationPolicy]
org.apache.commons.math4.genetics:GeneticAlgorithm:getMutationRate:null#[return, mutationRate]
org.apache.commons.math4.genetics:GeneticAlgorithm:getSelectionPolicy:null#[return, selectionPolicy]
org.apache.commons.math4.genetics:GeneticAlgorithm:getGenerationsEvolved:null#[return, generationsEvolved]
org.apache.commons.math4.genetics:ListPopulation:addChromosomes:Collection<Chromosome>#[if, >, +, chromosomes, size, chromosomeColl, size, populationLimit, throw, new, NumberIsTooLargeException, LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE, chromosomes, size, populationLimit, false, this, chromosomes, addAll, chromosomeColl]
org.apache.commons.math4.genetics:ListPopulation:getChromosomes:null#[return, Collections, unmodifiableList, chromosomes]
org.apache.commons.math4.genetics:ListPopulation:getChromosomeList:null#[return, chromosomes]
org.apache.commons.math4.genetics:ListPopulation:addChromosome:Chromosome#[if, >=, chromosomes, size, populationLimit, throw, new, NumberIsTooLargeException, LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE, chromosomes, size, populationLimit, false, this, chromosomes, add, chromosome]
org.apache.commons.math4.genetics:ListPopulation:getFittestChromosome:null#[Chromosome, bestChromosome, this, chromosomes, get, 0, for, Chromosome, chromosome, this, chromosomes, if, >, chromosome, compareTo, bestChromosome, 0, =, bestChromosome, chromosome, return, bestChromosome]
org.apache.commons.math4.genetics:ListPopulation:getPopulationLimit:null#[return, this, populationLimit]
org.apache.commons.math4.genetics:ListPopulation:setPopulationLimit:int#[if, <=, populationLimit, 0, throw, new, NotPositiveException, LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit, if, <, populationLimit, chromosomes, size, throw, new, NumberIsTooSmallException, populationLimit, chromosomes, size, true, =, this, populationLimit, populationLimit]
org.apache.commons.math4.genetics:ListPopulation:getPopulationSize:null#[return, this, chromosomes, size]
org.apache.commons.math4.genetics:ListPopulation:toString:null#[return, this, chromosomes, toString]
org.apache.commons.math4.genetics:ListPopulation:iterator:null#[return, getChromosomes, iterator]
org.apache.commons.math4.genetics:NPointCrossover:getCrossoverPoints:null#[return, crossoverPoints]
org.apache.commons.math4.genetics:NPointCrossover:crossover:Chromosome+Chromosome#[if, !, &&, instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, throw, new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, return, mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:NPointCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[final, int, length, first, getLength, if, !=, length, second, getLength, throw, new, DimensionMismatchException, second, getLength, length, if, >=, crossoverPoints, length, throw, new, NumberIsTooLargeException, crossoverPoints, length, false, final, List, T, parent1Rep, first, getRepresentation, final, List, T, parent2Rep, second, getRepresentation, final, List, T, child1Rep, new, ArrayList, T, length, final, List, T, child2Rep, new, ArrayList, T, length, final, RandomGenerator, random, GeneticAlgorithm, getRandomGenerator, List, T, c1, child1Rep, List, T, c2, child2Rep, int, remainingPoints, crossoverPoints, int, lastIndex, 0, for, int, i, 0, <, i, crossoverPoints, ++, i, --, remainingPoints, final, int, crossoverIndex, +, 1, lastIndex, random, nextInt, -, length, lastIndex, remainingPoints, for, int, j, lastIndex, <, j, crossoverIndex, ++, j, c1, add, parent1Rep, get, j, c2, add, parent2Rep, get, j, List, T, tmp, c1, =, c1, c2, =, c2, tmp, =, lastIndex, crossoverIndex, for, int, j, lastIndex, <, j, length, ++, j, c1, add, parent1Rep, get, j, c2, add, parent2Rep, get, j, return, new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.genetics:OnePointCrossover:crossover:Chromosome+Chromosome#[if, !, &&, instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, throw, new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, return, crossover, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:OnePointCrossover:crossover:AbstractListChromosome<T>+AbstractListChromosome<T>#[final, int, length, first, getLength, if, !=, length, second, getLength, throw, new, DimensionMismatchException, second, getLength, length, final, List, T, parent1Rep, first, getRepresentation, final, List, T, parent2Rep, second, getRepresentation, final, List, T, child1Rep, new, ArrayList, T, length, final, List, T, child2Rep, new, ArrayList, T, length, final, int, crossoverIndex, +, 1, GeneticAlgorithm, getRandomGenerator, nextInt, -, length, 2, for, int, i, 0, <, i, crossoverIndex, ++, i, child1Rep, add, parent1Rep, get, i, child2Rep, add, parent2Rep, get, i, for, int, i, crossoverIndex, <, i, length, ++, i, child1Rep, add, parent2Rep, get, i, child2Rep, add, parent1Rep, get, i, return, new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.genetics:OrderedCrossover:crossover:Chromosome+Chromosome#[if, !, &&, instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, throw, new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, return, mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:OrderedCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[final, int, length, first, getLength, if, !=, length, second, getLength, throw, new, DimensionMismatchException, second, getLength, length, final, List, T, parent1Rep, first, getRepresentation, final, List, T, parent2Rep, second, getRepresentation, final, List, T, child1, new, ArrayList, T, length, final, List, T, child2, new, ArrayList, T, length, final, Set, T, child1Set, new, HashSet, T, length, final, Set, T, child2Set, new, HashSet, T, length, final, RandomGenerator, random, GeneticAlgorithm, getRandomGenerator, int, a, random, nextInt, length, int, b, do, =, b, random, nextInt, length, ==, a, b, final, int, lb, FastMath, min, a, b, final, int, ub, FastMath, max, a, b, child1, addAll, parent1Rep, subList, lb, +, ub, 1, child1Set, addAll, child1, child2, addAll, parent2Rep, subList, lb, +, ub, 1, child2Set, addAll, child2, for, int, i, 1, <=, i, length, ++, i, final, int, idx, %, +, ub, i, length, final, T, item1, parent1Rep, get, idx, final, T, item2, parent2Rep, get, idx, if, !, child1Set, contains, item2, child1, add, item2, child1Set, add, item2, if, !, child2Set, contains, item1, child2, add, item1, child2Set, add, item1, Collections, rotate, child1, lb, Collections, rotate, child2, lb, return, new, ChromosomePair, first, newFixedLengthChromosome, child1, second, newFixedLengthChromosome, child2]
org.apache.commons.math4.genetics:RandomKey:decode:List<T>#[return, decodeGeneric, sequence, getRepresentation, sortedRepresentation]
org.apache.commons.math4.genetics:RandomKey:decodeGeneric:List<S>+List<Double>+List<Double>#[int, l, sequence, size, if, !=, representation, size, l, throw, new, DimensionMismatchException, representation, size, l, if, !=, sortedRepr, size, l, throw, new, DimensionMismatchException, sortedRepr, size, l, List, Double, reprCopy, new, ArrayList, Double, representation, List, S, res, new, ArrayList, S, l, for, int, i, 0, <, i, l, ++, i, int, index, reprCopy, indexOf, sortedRepr, get, i, res, add, sequence, get, index, reprCopy, set, index, null, return, res]
org.apache.commons.math4.genetics:RandomKey:isSame:Chromosome#[if, !, instanceof, another, RandomKey, return, false, RandomKey, anotherRk, RandomKey, another, if, !=, getLength, anotherRk, getLength, return, false, List, Integer, thisPerm, this, baseSeqPermutation, List, Integer, anotherPerm, anotherRk.baseSeqPermutation, for, int, i, 0, <, i, getLength, ++, i, if, !=, thisPerm, get, i, anotherPerm, get, i, return, false, return, true]
org.apache.commons.math4.genetics:RandomKey:checkValidity:List<Double>#[for, double, val, chromosomeRepresentation, if, ||, <, val, 0, >, val, 1, throw, new, InvalidRepresentationException, LocalizedFormats.OUT_OF_RANGE_SIMPLE, val, 0, 1]
org.apache.commons.math4.genetics:RandomKey:randomPermutation:int#[List, Double, repr, new, ArrayList, Double, l, for, int, i, 0, <, i, l, ++, i, repr, add, GeneticAlgorithm, getRandomGenerator, nextDouble, return, repr]
org.apache.commons.math4.genetics:RandomKey:identityPermutation:int#[List, Double, repr, new, ArrayList, Double, l, for, int, i, 0, <, i, l, ++, i, repr, add, /, double, i, l, return, repr]
org.apache.commons.math4.genetics:RandomKey:comparatorPermutation:List<S>+Comparator<S>#[List, S, sortedData, new, ArrayList, S, data, Collections, sort, sortedData, comparator, return, inducedPermutation, data, sortedData]
org.apache.commons.math4.genetics:RandomKey:inducedPermutation:List<S>+List<S>#[if, !=, originalData, size, permutedData, size, throw, new, DimensionMismatchException, permutedData, size, originalData, size, int, l, originalData, size, List, S, origDataCopy, new, ArrayList, S, originalData, Double, res, Double, l, for, int, i, 0, <, i, l, ++, i, int, index, origDataCopy, indexOf, permutedData, get, i, if, ==, index, -, 1, throw, new, MathIllegalArgumentException, LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA, =, res, index, /, double, i, l, origDataCopy, set, index, null, return, Arrays, asList, res]
org.apache.commons.math4.genetics:RandomKey:toString:null#[return, String, format, "(f=%s pi=(%s))", getFitness, baseSeqPermutation]
org.apache.commons.math4.genetics:RandomKey:baseSequence:int#[List, Integer, baseSequence, new, ArrayList, Integer, l, for, int, i, 0, <, i, l, ++, i, baseSequence, add, i, return, baseSequence]
org.apache.commons.math4.genetics:RandomKeyMutation:mutate:Chromosome#[if, !, instanceof, original, RandomKey, throw, new, MathIllegalArgumentException, LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS, original, getClass, getSimpleName, RandomKey, originalRk, RandomKey, original, List, Double, repr, originalRk, getRepresentation, int, rInd, GeneticAlgorithm, getRandomGenerator, nextInt, repr, size, List, Double, newRepr, new, ArrayList, Double, repr, newRepr, set, rInd, GeneticAlgorithm, getRandomGenerator, nextDouble, return, originalRk, newFixedLengthChromosome, newRepr]
org.apache.commons.math4.genetics:TournamentSelection:select:Population#[return, new, ChromosomePair, tournament, ListPopulation, population, tournament, ListPopulation, population]
org.apache.commons.math4.genetics:TournamentSelection:tournament:ListPopulation#[if, <, population, getPopulationSize, this, arity, throw, new, MathIllegalArgumentException, LocalizedFormats.TOO_LARGE_TOURNAMENT_ARITY, arity, population, getPopulationSize, ListPopulation, tournamentPopulation, new, ListPopulation, this, arity, Override, public, Population, nextGeneration, return, null, List, Chromosome, chromosomes, new, ArrayList, Chromosome, population, getChromosomes, for, int, i, 0, <, i, this, arity, ++, i, int, rind, GeneticAlgorithm, getRandomGenerator, nextInt, chromosomes, size, tournamentPopulation, addChromosome, chromosomes, get, rind, chromosomes, remove, rind, return, tournamentPopulation, getFittestChromosome]
org.apache.commons.math4.genetics:TournamentSelection:getArity:null#[return, arity]
org.apache.commons.math4.genetics:TournamentSelection:setArity:int#[=, this, arity, arity]
org.apache.commons.math4.genetics:UniformCrossover:getRatio:null#[return, ratio]
org.apache.commons.math4.genetics:UniformCrossover:crossover:Chromosome+Chromosome#[if, !, &&, instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, throw, new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, return, mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:UniformCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[final, int, length, first, getLength, if, !=, length, second, getLength, throw, new, DimensionMismatchException, second, getLength, length, final, List, T, parent1Rep, first, getRepresentation, final, List, T, parent2Rep, second, getRepresentation, final, List, T, child1Rep, new, ArrayList, T, length, final, List, T, child2Rep, new, ArrayList, T, length, final, RandomGenerator, random, GeneticAlgorithm, getRandomGenerator, for, int, index, 0, <, index, length, ++, index, if, <, random, nextDouble, ratio, child1Rep, add, parent2Rep, get, index, child2Rep, add, parent1Rep, get, index, child1Rep, add, parent1Rep, get, index, child2Rep, add, parent2Rep, get, index, return, new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getCenter:null#[return, center]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getRadius:null#[return, radius]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getSupport:null#[return, support, clone]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getSupportSize:null#[return, support.length]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:contains:P#[return, <=, point, distance, center, radius]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:contains:P+double#[return, <=, point, distance, center, +, radius, margin]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:enclose:Iterable<P>#[if, ||, ==, points, null, !, points, iterator, hasNext, return, generator, ballOnSupport, new, ArrayList, P, return, pivotingBall, points]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:pivotingBall:Iterable<P>#[final, P, first, points, iterator, next, final, List, P, extreme, new, ArrayList, P, +, first, getSpace, getDimension, 1, final, List, P, support, new, ArrayList, P, +, first, getSpace, getDimension, 1, extreme, add, first, EnclosingBall, S, P, ball, moveToFrontBall, extreme, extreme, size, support, while, true, final, P, farthest, selectFarthest, points, ball, if, ball, contains, farthest, tolerance, return, ball, support, clear, support, add, farthest, EnclosingBall, S, P, savedBall, ball, =, ball, moveToFrontBall, extreme, extreme, size, support, if, <, ball, getRadius, savedBall, getRadius, throw, new, MathInternalError, extreme, add, 0, farthest, extreme, subList, ball, getSupportSize, extreme, size, clear]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:moveToFrontBall:List<P>+int+List<P>#[EnclosingBall, S, P, ball, generator, ballOnSupport, support, if, <=, ball, getSupportSize, ball, getCenter, getSpace, getDimension, for, int, i, 0, <, i, nbExtreme, ++, i, final, P, pi, extreme, get, i, if, !, ball, contains, pi, tolerance, support, add, pi, =, ball, moveToFrontBall, extreme, i, support, support, remove, -, support, size, 1, for, int, j, i, >, j, 0, --, j, extreme, set, j, extreme, get, -, j, 1, extreme, set, 0, pi, return, ball]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:selectFarthest:Iterable<P>+EnclosingBall<S,P>#[final, P, center, ball, getCenter, P, farthest, null, double, dMax, -, 1.0, for, final, P, point, points, final, double, d, point, distance, center, if, >, d, dMax, =, farthest, point, =, dMax, d, return, farthest]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:getDimension:null#[return, 1]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:getSubSpace:null#[throw, new, NoSubSpaceException]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getInf:null#[return, lower]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getSup:null#[return, upper]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getSize:null#[return, -, upper, lower]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getBarycenter:null#[return, *, 0.5, +, lower, upper]
org.apache.commons.math4.geometry.euclidean.oned:Interval:checkPoint:double+double#[if, ||, <, point, -, lower, tolerance, >, point, +, upper, tolerance, return, Location.OUTSIDE, if, &&, >, point, +, lower, tolerance, <, point, -, upper, tolerance, return, Location.INSIDE, return, Location.BOUNDARY]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:buildTree:double+double+double#[if, &&, Double, isInfinite, lower, <, lower, 0, if, &&, Double, isInfinite, upper, >, upper, 0, return, new, BSPTree, Euclidean1D, Boolean.TRUE, final, SubHyperplane, Euclidean1D, upperCut, new, OrientedPoint, new, Vector1D, upper, true, tolerance, wholeHyperplane, return, new, BSPTree, Euclidean1D, upperCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, Boolean.TRUE, null, final, SubHyperplane, Euclidean1D, lowerCut, new, OrientedPoint, new, Vector1D, lower, false, tolerance, wholeHyperplane, if, &&, Double, isInfinite, upper, >, upper, 0, return, new, BSPTree, Euclidean1D, lowerCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, Boolean.TRUE, null, final, SubHyperplane, Euclidean1D, upperCut, new, OrientedPoint, new, Vector1D, upper, true, tolerance, wholeHyperplane, return, new, BSPTree, Euclidean1D, lowerCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, upperCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, Boolean.TRUE, null, null]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:buildNew:BSPTree<Euclidean1D>#[return, new, IntervalsSet, tree, getTolerance]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:computeGeometricalProperties:null#[if, ==, getTree, false, getCut, null, setBarycenter, Point, Euclidean1D, Vector1D.NaN, setSize, Boolean, getTree, false, getAttribute, Double.POSITIVE_INFINITY, 0, double, size, 0.0, double, sum, 0.0, for, final, Interval, interval, asList, +=, size, interval, getSize, +=, sum, *, interval, getSize, interval, getBarycenter, setSize, size, if, Double, isInfinite, size, setBarycenter, Point, Euclidean1D, Vector1D.NaN, if, >=, size, Precision.SAFE_MIN, setBarycenter, Point, Euclidean1D, new, Vector1D, /, sum, size, setBarycenter, Point, Euclidean1D, OrientedPoint, getTree, false, getCut, getHyperplane, getLocation]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getInf:null#[BSPTree, Euclidean1D, node, getTree, false, double, inf, Double.POSITIVE_INFINITY, while, !=, node, getCut, null, final, OrientedPoint, op, OrientedPoint, node, getCut, getHyperplane, =, inf, op, getLocation, getX, =, node, op, isDirect, node, getMinus, node, getPlus, return, Boolean, node, getAttribute, Double.NEGATIVE_INFINITY, inf]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getSup:null#[BSPTree, Euclidean1D, node, getTree, false, double, sup, Double.NEGATIVE_INFINITY, while, !=, node, getCut, null, final, OrientedPoint, op, OrientedPoint, node, getCut, getHyperplane, =, sup, op, getLocation, getX, =, node, op, isDirect, node, getPlus, node, getMinus, return, Boolean, node, getAttribute, Double.POSITIVE_INFINITY, sup]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:projectToBoundary:Point<Euclidean1D>#[final, double, x, Vector1D, point, getX, double, previous, Double.NEGATIVE_INFINITY, for, final, double, a, this, if, <, x, a, 0, final, double, previousOffset, -, x, previous, final, double, currentOffset, -, a, 0, x, if, <, previousOffset, currentOffset, return, new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, previous, previousOffset, return, new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, a, 0, currentOffset, if, <=, x, a, 1, final, double, offset0, -, a, 0, x, final, double, offset1, -, x, a, 1, if, <, offset0, offset1, return, new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, a, 1, offset1, return, new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, a, 0, offset0, =, previous, a, 1, return, new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, previous, -, x, previous]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:finiteOrNullPoint:double#[return, Double, isInfinite, x, null, new, Vector1D, x]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:asList:null#[final, List, Interval, list, new, ArrayList, Interval, for, final, double, a, this, list, add, new, Interval, a, 0, a, 1, return, list]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getFirstLeaf:BSPTree<Euclidean1D>#[if, ==, root, getCut, null, return, root, BSPTree, Euclidean1D, smallest, null, for, BSPTree, Euclidean1D, n, root, !=, n, null, =, n, previousInternalNode, n, =, smallest, n, return, leafBefore, smallest]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getFirstIntervalBoundary:null#[BSPTree, Euclidean1D, node, getTree, false, if, ==, node, getCut, null, return, null, =, node, getFirstLeaf, node, getParent, while, &&, !=, node, null, !, ||, isIntervalStart, node, isIntervalEnd, node, =, node, nextInternalNode, node, return, node]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isIntervalStart:BSPTree<Euclidean1D>#[if, Boolean, leafBefore, node, getAttribute, return, false, if, !, Boolean, leafAfter, node, getAttribute, return, false, return, true]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isIntervalEnd:BSPTree<Euclidean1D>#[if, !, Boolean, leafBefore, node, getAttribute, return, false, if, Boolean, leafAfter, node, getAttribute, return, false, return, true]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:nextInternalNode:BSPTree<Euclidean1D>#[if, !=, childAfter, node, getCut, null, return, leafAfter, node, getParent, while, isAfterParent, node, =, node, node, getParent, return, node, getParent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:previousInternalNode:BSPTree<Euclidean1D>#[if, !=, childBefore, node, getCut, null, return, leafBefore, node, getParent, while, isBeforeParent, node, =, node, node, getParent, return, node, getParent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:leafBefore:BSPTree<Euclidean1D>#[=, node, childBefore, node, while, !=, node, getCut, null, =, node, childAfter, node, return, node]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:leafAfter:BSPTree<Euclidean1D>#[=, node, childAfter, node, while, !=, node, getCut, null, =, node, childBefore, node, return, node]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isBeforeParent:BSPTree<Euclidean1D>#[final, BSPTree, Euclidean1D, parent, node, getParent, if, ==, parent, null, return, false, return, ==, node, childBefore, parent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isAfterParent:BSPTree<Euclidean1D>#[final, BSPTree, Euclidean1D, parent, node, getParent, if, ==, parent, null, return, false, return, ==, node, childAfter, parent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:childBefore:BSPTree<Euclidean1D>#[if, isDirect, node, return, node, getMinus, return, node, getPlus]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:childAfter:BSPTree<Euclidean1D>#[if, isDirect, node, return, node, getPlus, return, node, getMinus]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isDirect:BSPTree<Euclidean1D>#[return, OrientedPoint, node, getCut, getHyperplane, isDirect]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getAngle:BSPTree<Euclidean1D>#[return, OrientedPoint, node, getCut, getHyperplane, getLocation, getX]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:iterator:null#[return, new, SubIntervalsIterator]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:copySelf:null#[return, this]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getOffset:Vector<Euclidean1D>#[return, getOffset, Point, Euclidean1D, vector]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getOffset:Point<Euclidean1D>#[final, double, delta, -, Vector1D, point, getX, location, getX, return, direct, delta, -, delta]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:wholeHyperplane:null#[return, new, SubOrientedPoint, this, null]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:wholeSpace:null#[return, new, IntervalsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:sameOrientationAs:Hyperplane<Euclidean1D>#[return, !, ^, direct, OrientedPoint, other, direct]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:project:Point<Euclidean1D>#[return, location]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getLocation:null#[return, location]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:isDirect:null#[return, direct]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:revertSelf:null#[=, direct, !, direct]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:getSize:null#[return, 0]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:isEmpty:null#[return, false]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:buildNew:Hyperplane<Euclidean1D>+Region<Euclidean1D>#[return, new, SubOrientedPoint, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:split:Hyperplane<Euclidean1D>#[final, double, global, hyperplane, getOffset, OrientedPoint, getHyperplane, getLocation, if, <, global, -, 1.0e-10, return, new, SplitSubHyperplane, Euclidean1D, null, this, if, >, global, 1.0e-10, return, new, SplitSubHyperplane, Euclidean1D, this, null, return, new, SplitSubHyperplane, Euclidean1D, null, null]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getX:null#[return, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getSpace:null#[return, Euclidean1D, getInstance]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getZero:null#[return, ZERO]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNorm1:null#[return, FastMath, abs, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNorm:null#[return, FastMath, abs, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNormSq:null#[return, *, x, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNormInf:null#[return, FastMath, abs, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:add:Vector<Euclidean1D>#[Vector1D, v1, Vector1D, v, return, new, Vector1D, +, x, v1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:add:double+Vector<Euclidean1D>#[Vector1D, v1, Vector1D, v, return, new, Vector1D, +, x, *, factor, v1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:subtract:Vector<Euclidean1D>#[Vector1D, p3, Vector1D, p, return, new, Vector1D, -, x, p3.x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:subtract:double+Vector<Euclidean1D>#[Vector1D, v1, Vector1D, v, return, new, Vector1D, -, x, *, factor, v1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:normalize:null#[double, s, getNorm, if, ==, s, 0, throw, new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, return, scalarMultiply, /, 1, s]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:negate:null#[return, new, Vector1D, -, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:scalarMultiply:double#[return, new, Vector1D, *, a, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:isNaN:null#[return, Double, isNaN, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:isInfinite:null#[return, &&, !, isNaN, Double, isInfinite, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distance1:Vector<Euclidean1D>#[Vector1D, p3, Vector1D, p, final, double, dx, FastMath, abs, -, p3.x, x, return, dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distance:Point<Euclidean1D>#[Vector1D, p3, Vector1D, p, final, double, dx, -, p3.x, x, return, FastMath, abs, dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceInf:Vector<Euclidean1D>#[Vector1D, p3, Vector1D, p, final, double, dx, FastMath, abs, -, p3.x, x, return, dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceSq:Vector<Euclidean1D>#[Vector1D, p3, Vector1D, p, final, double, dx, -, p3.x, x, return, *, dx, dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:dotProduct:Vector<Euclidean1D>#[final, Vector1D, v1, Vector1D, v, return, *, x, v1.x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distance:Vector1D+Vector1D#[return, p1, distance, p2]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceInf:Vector1D+Vector1D#[return, p1, distanceInf, p2]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceSq:Vector1D+Vector1D#[return, p1, distanceSq, p2]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, Vector1D, final, Vector1D, rhs, Vector1D, other, if, rhs, isNaN, return, this, isNaN, return, ==, x, rhs.x, return, false]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:hashCode:null#[if, isNaN, return, 7785, return, *, 997, MathUtils, hash, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:toString:null#[return, Vector1DFormat, getInstance, format, this]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:toString:NumberFormat#[return, new, Vector1DFormat, format, format, this]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:getInstance:null#[return, getInstance, Locale, getDefault]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:getInstance:Locale#[return, new, Vector1DFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:format:Vector<Euclidean1D>+StringBuffer+FieldPosition#[final, Vector1D, p1, Vector1D, vector, return, format, toAppendTo, pos, p1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:parse:String#[ParsePosition, parsePosition, new, ParsePosition, 0, Vector1D, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, Vector1D, return, result]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:parse:String+ParsePosition#[final, double, coordinates, parseCoordinates, 1, source, pos, if, ==, coordinates, null, return, null, return, new, Vector1D, coordinates, 0]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:getDimension:null#[return, 3]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:getSubSpace:null#[return, Euclidean2D, getInstance]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:mat2quat:T[][]#[final, T, quat, MathArrays, buildArray, ort, 0, 0, getField, 4, T, s, ort, 0, 0, add, ort, 1, 1, add, ort, 2, 2, if, >, s, getReal, -, 0.19, =, quat, 0, s, add, 1.0, sqrt, multiply, 0.5, T, inv, quat, 0, reciprocal, multiply, 0.25, =, quat, 1, inv, multiply, ort, 1, 2, subtract, ort, 2, 1, =, quat, 2, inv, multiply, ort, 2, 0, subtract, ort, 0, 2, =, quat, 3, inv, multiply, ort, 0, 1, subtract, ort, 1, 0, =, s, ort, 0, 0, subtract, ort, 1, 1, subtract, ort, 2, 2, if, >, s, getReal, -, 0.19, =, quat, 1, s, add, 1.0, sqrt, multiply, 0.5, T, inv, quat, 1, reciprocal, multiply, 0.25, =, quat, 0, inv, multiply, ort, 1, 2, subtract, ort, 2, 1, =, quat, 2, inv, multiply, ort, 0, 1, add, ort, 1, 0, =, quat, 3, inv, multiply, ort, 0, 2, add, ort, 2, 0, =, s, ort, 1, 1, subtract, ort, 0, 0, subtract, ort, 2, 2, if, >, s, getReal, -, 0.19, =, quat, 2, s, add, 1.0, sqrt, multiply, 0.5, T, inv, quat, 2, reciprocal, multiply, 0.25, =, quat, 0, inv, multiply, ort, 2, 0, subtract, ort, 0, 2, =, quat, 1, inv, multiply, ort, 0, 1, add, ort, 1, 0, =, quat, 3, inv, multiply, ort, 2, 1, add, ort, 1, 2, =, s, ort, 2, 2, subtract, ort, 0, 0, subtract, ort, 1, 1, =, quat, 3, s, add, 1.0, sqrt, multiply, 0.5, T, inv, quat, 3, reciprocal, multiply, 0.25, =, quat, 0, inv, multiply, ort, 0, 1, subtract, ort, 1, 0, =, quat, 1, inv, multiply, ort, 0, 2, add, ort, 2, 0, =, quat, 2, inv, multiply, ort, 2, 1, add, ort, 1, 2, return, quat]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:revert:null#[return, new, FieldRotation, T, q0, negate, q1, q2, q3, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ0:null#[return, q0]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ1:null#[return, q1]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ2:null#[return, q2]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ3:null#[return, q3]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAxis:null#[return, getAxis, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAxis:RotationConvention#[final, T, squaredSine, q1, multiply, q1, add, q2, multiply, q2, add, q3, multiply, q3, if, ==, squaredSine, getReal, 0, final, Field, T, field, squaredSine, getField, return, new, FieldVector3D, T, ==, convention, RotationConvention.VECTOR_OPERATOR, field, getOne, field, getOne, negate, field, getZero, field, getZero, final, double, sgn, ==, convention, RotationConvention.VECTOR_OPERATOR, +, 1, -, 1, if, <, q0, getReal, 0, T, inverse, squaredSine, sqrt, reciprocal, multiply, sgn, return, new, FieldVector3D, T, q1, multiply, inverse, q2, multiply, inverse, q3, multiply, inverse, final, T, inverse, squaredSine, sqrt, reciprocal, negate, multiply, sgn, return, new, FieldVector3D, T, q1, multiply, inverse, q2, multiply, inverse, q3, multiply, inverse]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAngle:null#[if, ||, <, q0, getReal, -, 0.1, >, q0, getReal, 0.1, return, q1, multiply, q1, add, q2, multiply, q2, add, q3, multiply, q3, sqrt, asin, multiply, 2, if, <, q0, getReal, 0, return, q0, negate, acos, multiply, 2, return, q0, acos, multiply, 2]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAngles:RotationOrder#[return, getAngles, order, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAngles:RotationOrder+RotationConvention#[if, ==, convention, RotationConvention.VECTOR_OPERATOR, if, ==, order, RotationOrder.XYZ, final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v1, getY, negate, atan2, v1, getZ, v2, getZ, asin, v2, getY, negate, atan2, v2, getX, if, ==, order, RotationOrder.XZY, final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v1, getZ, atan2, v1, getY, v2, getY, asin, negate, v2, getZ, atan2, v2, getX, if, ==, order, RotationOrder.YXZ, final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v1, getX, atan2, v1, getZ, v2, getZ, asin, negate, v2, getX, atan2, v2, getY, if, ==, order, RotationOrder.YZX, final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v1, getZ, negate, atan2, v1, getX, v2, getX, asin, v2, getZ, negate, atan2, v2, getY, if, ==, order, RotationOrder.ZXY, final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v1, getX, negate, atan2, v1, getY, v2, getY, asin, v2, getX, negate, atan2, v2, getZ, if, ==, order, RotationOrder.ZYX, final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v1, getY, atan2, v1, getX, v2, getX, asin, negate, v2, getY, atan2, v2, getZ, if, ==, order, RotationOrder.XYX, final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v1, getY, atan2, v1, getZ, negate, v2, getX, acos, v2, getY, atan2, v2, getZ, if, ==, order, RotationOrder.XZX, final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v1, getZ, atan2, v1, getY, v2, getX, acos, v2, getZ, atan2, v2, getY, negate, if, ==, order, RotationOrder.YXY, final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v1, getX, atan2, v1, getZ, v2, getY, acos, v2, getX, atan2, v2, getZ, negate, if, ==, order, RotationOrder.YZY, final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v1, getZ, atan2, v1, getX, negate, v2, getY, acos, v2, getZ, atan2, v2, getX, if, ==, order, RotationOrder.ZXZ, final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v1, getX, atan2, v1, getY, negate, v2, getZ, acos, v2, getX, atan2, v2, getY, final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v1, getY, atan2, v1, getX, v2, getZ, acos, v2, getY, atan2, v2, getX, negate, if, ==, order, RotationOrder.XYZ, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v2, getY, negate, atan2, v2, getZ, v2, getX, asin, v1, getY, negate, atan2, v1, getX, if, ==, order, RotationOrder.XZY, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v2, getZ, atan2, v2, getY, v2, getX, asin, negate, v1, getZ, atan2, v1, getX, if, ==, order, RotationOrder.YXZ, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v2, getX, atan2, v2, getZ, v2, getY, asin, negate, v1, getX, atan2, v1, getY, if, ==, order, RotationOrder.YZX, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v2, getZ, negate, atan2, v2, getX, v2, getY, asin, v1, getZ, negate, atan2, v1, getY, if, ==, order, RotationOrder.ZXY, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v2, getX, negate, atan2, v2, getY, v2, getZ, asin, v1, getX, negate, atan2, v1, getZ, if, ==, order, RotationOrder.ZYX, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, buildArray, v2, getY, atan2, v2, getX, v2, getZ, asin, negate, v1, getY, atan2, v1, getZ, if, ==, order, RotationOrder.XYX, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v2, getY, atan2, v2, getZ, negate, v2, getX, acos, v1, getY, atan2, v1, getZ, if, ==, order, RotationOrder.XZX, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getX, getReal, -, 0.9999999999, >, v2, getX, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v2, getZ, atan2, v2, getY, v2, getX, acos, v1, getZ, atan2, v1, getY, negate, if, ==, order, RotationOrder.YXY, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v2, getX, atan2, v2, getZ, v2, getY, acos, v1, getX, atan2, v1, getZ, negate, if, ==, order, RotationOrder.YZY, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getY, getReal, -, 0.9999999999, >, v2, getY, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v2, getZ, atan2, v2, getX, negate, v2, getY, acos, v1, getZ, atan2, v1, getX, if, ==, order, RotationOrder.ZXZ, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v2, getX, atan2, v2, getY, negate, v2, getZ, acos, v1, getX, atan2, v1, getY, FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getZ, getReal, -, 0.9999999999, >, v2, getZ, getReal, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, buildArray, v2, getY, atan2, v2, getX, v2, getZ, acos, v1, getY, atan2, v1, getX, negate]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:buildArray:T+T+T#[final, T, array, MathArrays, buildArray, a0, getField, 3, =, array, 0, a0, =, array, 1, a1, =, array, 2, a2, return, array]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:vector:double+double+double#[final, T, zero, q0, getField, getZero, return, new, FieldVector3D, T, zero, add, x, zero, add, y, zero, add, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getMatrix:null#[final, T, q0q0, q0, multiply, q0, final, T, q0q1, q0, multiply, q1, final, T, q0q2, q0, multiply, q2, final, T, q0q3, q0, multiply, q3, final, T, q1q1, q1, multiply, q1, final, T, q1q2, q1, multiply, q2, final, T, q1q3, q1, multiply, q3, final, T, q2q2, q2, multiply, q2, final, T, q2q3, q2, multiply, q3, final, T, q3q3, q3, multiply, q3, final, T, m, MathArrays, buildArray, q0, getField, 3, 3, =, m, 0, 0, q0q0, add, q1q1, multiply, 2, subtract, 1, =, m, 1, 0, q1q2, subtract, q0q3, multiply, 2, =, m, 2, 0, q1q3, add, q0q2, multiply, 2, =, m, 0, 1, q1q2, add, q0q3, multiply, 2, =, m, 1, 1, q0q0, add, q2q2, multiply, 2, subtract, 1, =, m, 2, 1, q2q3, subtract, q0q1, multiply, 2, =, m, 0, 2, q1q3, subtract, q0q2, multiply, 2, =, m, 1, 2, q2q3, add, q0q1, multiply, 2, =, m, 2, 2, q0q0, add, q3q3, multiply, 2, subtract, 1, return, m]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:toRotation:null#[return, new, Rotation, q0, getReal, q1, getReal, q2, getReal, q3, getReal, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:FieldVector3D<T>#[final, T, x, u, getX, final, T, y, u, getY, final, T, z, u, getZ, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, return, new, FieldVector3D, T, q0, multiply, x, multiply, q0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, q0, multiply, y, multiply, q0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, q0, multiply, z, multiply, q0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Vector3D#[final, double, x, u, getX, final, double, y, u, getY, final, double, z, u, getZ, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, return, new, FieldVector3D, T, q0, multiply, q0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, q0, multiply, q0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, q0, multiply, q0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:T[]+T[]#[final, T, x, in, 0, final, T, y, in, 1, final, T, z, in, 2, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, =, out, 0, q0, multiply, x, multiply, q0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, =, out, 1, q0, multiply, y, multiply, q0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, =, out, 2, q0, multiply, z, multiply, q0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:double[]+T[]#[final, double, x, in, 0, final, double, y, in, 1, final, double, z, in, 2, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, =, out, 0, q0, multiply, q0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, =, out, 1, q0, multiply, q0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, =, out, 2, q0, multiply, q0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Rotation+FieldVector3D<T>#[final, T, x, u, getX, final, T, y, u, getY, final, T, z, u, getZ, final, T, s, x, multiply, r, getQ1, add, y, multiply, r, getQ2, add, z, multiply, r, getQ3, return, new, FieldVector3D, T, x, multiply, r, getQ0, subtract, z, multiply, r, getQ2, subtract, y, multiply, r, getQ3, multiply, r, getQ0, add, s, multiply, r, getQ1, multiply, 2, subtract, x, y, multiply, r, getQ0, subtract, x, multiply, r, getQ3, subtract, z, multiply, r, getQ1, multiply, r, getQ0, add, s, multiply, r, getQ2, multiply, 2, subtract, y, z, multiply, r, getQ0, subtract, y, multiply, r, getQ1, subtract, x, multiply, r, getQ2, multiply, r, getQ0, add, s, multiply, r, getQ3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:FieldVector3D<T>#[final, T, x, u, getX, final, T, y, u, getY, final, T, z, u, getZ, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, final, T, m0, q0, negate, return, new, FieldVector3D, T, m0, multiply, x, multiply, m0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, m0, multiply, y, multiply, m0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, m0, multiply, z, multiply, m0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Vector3D#[final, double, x, u, getX, final, double, y, u, getY, final, double, z, u, getZ, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, final, T, m0, q0, negate, return, new, FieldVector3D, T, m0, multiply, m0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, m0, multiply, m0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, m0, multiply, m0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:T[]+T[]#[final, T, x, in, 0, final, T, y, in, 1, final, T, z, in, 2, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, final, T, m0, q0, negate, =, out, 0, m0, multiply, x, multiply, m0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, =, out, 1, m0, multiply, y, multiply, m0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, =, out, 2, m0, multiply, z, multiply, m0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:double[]+T[]#[final, double, x, in, 0, final, double, y, in, 1, final, double, z, in, 2, final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, final, T, m0, q0, negate, =, out, 0, m0, multiply, m0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, =, out, 1, m0, multiply, m0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, =, out, 2, m0, multiply, m0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Rotation+FieldVector3D<T>#[final, T, x, u, getX, final, T, y, u, getY, final, T, z, u, getZ, final, T, s, x, multiply, r, getQ1, add, y, multiply, r, getQ2, add, z, multiply, r, getQ3, final, double, m0, -, r, getQ0, return, new, FieldVector3D, T, x, multiply, m0, subtract, z, multiply, r, getQ2, subtract, y, multiply, r, getQ3, multiply, m0, add, s, multiply, r, getQ1, multiply, 2, subtract, x, y, multiply, m0, subtract, x, multiply, r, getQ3, subtract, z, multiply, r, getQ1, multiply, m0, add, s, multiply, r, getQ2, multiply, 2, subtract, y, z, multiply, m0, subtract, y, multiply, r, getQ1, subtract, x, multiply, r, getQ2, multiply, m0, add, s, multiply, r, getQ3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:FieldRotation<T>#[return, compose, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:compose:FieldRotation<T>+RotationConvention#[return, ==, convention, RotationConvention.VECTOR_OPERATOR, composeInternal, r, r, composeInternal, this]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInternal:FieldRotation<T>#[return, new, FieldRotation, T, r.q0, multiply, q0, subtract, r.q1, multiply, q1, add, r.q2, multiply, q2, add, r.q3, multiply, q3, r.q1, multiply, q0, add, r.q0, multiply, q1, add, r.q2, multiply, q3, subtract, r.q3, multiply, q2, r.q2, multiply, q0, add, r.q0, multiply, q2, add, r.q3, multiply, q1, subtract, r.q1, multiply, q3, r.q3, multiply, q0, add, r.q0, multiply, q3, add, r.q1, multiply, q2, subtract, r.q2, multiply, q1, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Rotation#[return, compose, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:compose:Rotation+RotationConvention#[return, ==, convention, RotationConvention.VECTOR_OPERATOR, composeInternal, r, applyTo, r, this]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInternal:Rotation#[return, new, FieldRotation, T, q0, multiply, r, getQ0, subtract, q1, multiply, r, getQ1, add, q2, multiply, r, getQ2, add, q3, multiply, r, getQ3, q0, multiply, r, getQ1, add, q1, multiply, r, getQ0, add, q3, multiply, r, getQ2, subtract, q2, multiply, r, getQ3, q0, multiply, r, getQ2, add, q2, multiply, r, getQ0, add, q1, multiply, r, getQ3, subtract, q3, multiply, r, getQ1, q0, multiply, r, getQ3, add, q3, multiply, r, getQ0, add, q2, multiply, r, getQ1, subtract, q1, multiply, r, getQ2, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Rotation+FieldRotation<T>#[return, new, FieldRotation, T, rInner.q0, multiply, r1, getQ0, subtract, rInner.q1, multiply, r1, getQ1, add, rInner.q2, multiply, r1, getQ2, add, rInner.q3, multiply, r1, getQ3, rInner.q1, multiply, r1, getQ0, add, rInner.q0, multiply, r1, getQ1, add, rInner.q2, multiply, r1, getQ3, subtract, rInner.q3, multiply, r1, getQ2, rInner.q2, multiply, r1, getQ0, add, rInner.q0, multiply, r1, getQ2, add, rInner.q3, multiply, r1, getQ1, subtract, rInner.q1, multiply, r1, getQ3, rInner.q3, multiply, r1, getQ0, add, rInner.q0, multiply, r1, getQ3, add, rInner.q1, multiply, r1, getQ2, subtract, rInner.q2, multiply, r1, getQ1, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:FieldRotation<T>#[return, composeInverse, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverse:FieldRotation<T>+RotationConvention#[return, ==, convention, RotationConvention.VECTOR_OPERATOR, composeInverseInternal, r, r, composeInternal, revert]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverseInternal:FieldRotation<T>#[return, new, FieldRotation, T, r.q0, multiply, q0, add, r.q1, multiply, q1, add, r.q2, multiply, q2, add, r.q3, multiply, q3, negate, r.q0, multiply, q1, add, r.q2, multiply, q3, subtract, r.q3, multiply, q2, subtract, r.q1, multiply, q0, r.q0, multiply, q2, add, r.q3, multiply, q1, subtract, r.q1, multiply, q3, subtract, r.q2, multiply, q0, r.q0, multiply, q3, add, r.q1, multiply, q2, subtract, r.q2, multiply, q1, subtract, r.q3, multiply, q0, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Rotation#[return, composeInverse, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverse:Rotation+RotationConvention#[return, ==, convention, RotationConvention.VECTOR_OPERATOR, composeInverseInternal, r, applyTo, r, revert]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverseInternal:Rotation#[return, new, FieldRotation, T, q0, multiply, r, getQ0, add, q1, multiply, r, getQ1, add, q2, multiply, r, getQ2, add, q3, multiply, r, getQ3, negate, q1, multiply, r, getQ0, add, q3, multiply, r, getQ2, subtract, q2, multiply, r, getQ3, subtract, q0, multiply, r, getQ1, q2, multiply, r, getQ0, add, q1, multiply, r, getQ3, subtract, q3, multiply, r, getQ1, subtract, q0, multiply, r, getQ2, q3, multiply, r, getQ0, add, q2, multiply, r, getQ1, subtract, q1, multiply, r, getQ2, subtract, q0, multiply, r, getQ3, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Rotation+FieldRotation<T>#[return, new, FieldRotation, T, rInner.q0, multiply, rOuter, getQ0, add, rInner.q1, multiply, rOuter, getQ1, add, rInner.q2, multiply, rOuter, getQ2, add, rInner.q3, multiply, rOuter, getQ3, negate, rInner.q0, multiply, rOuter, getQ1, add, rInner.q2, multiply, rOuter, getQ3, subtract, rInner.q3, multiply, rOuter, getQ2, subtract, rInner.q1, multiply, rOuter, getQ0, rInner.q0, multiply, rOuter, getQ2, add, rInner.q3, multiply, rOuter, getQ1, subtract, rInner.q1, multiply, rOuter, getQ3, subtract, rInner.q2, multiply, rOuter, getQ0, rInner.q0, multiply, rOuter, getQ3, add, rInner.q1, multiply, rOuter, getQ2, subtract, rInner.q2, multiply, rOuter, getQ1, subtract, rInner.q3, multiply, rOuter, getQ0, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:orthogonalizeMatrix:T[][]+double#[T, x00, m, 0, 0, T, x01, m, 0, 1, T, x02, m, 0, 2, T, x10, m, 1, 0, T, x11, m, 1, 1, T, x12, m, 1, 2, T, x20, m, 2, 0, T, x21, m, 2, 1, T, x22, m, 2, 2, double, fn, 0, double, fn1, final, T, o, MathArrays, buildArray, m, 0, 0, getField, 3, 3, int, i, 0, while, <, ++, i, 11, final, T, mx00, m, 0, 0, multiply, x00, add, m, 1, 0, multiply, x10, add, m, 2, 0, multiply, x20, final, T, mx10, m, 0, 1, multiply, x00, add, m, 1, 1, multiply, x10, add, m, 2, 1, multiply, x20, final, T, mx20, m, 0, 2, multiply, x00, add, m, 1, 2, multiply, x10, add, m, 2, 2, multiply, x20, final, T, mx01, m, 0, 0, multiply, x01, add, m, 1, 0, multiply, x11, add, m, 2, 0, multiply, x21, final, T, mx11, m, 0, 1, multiply, x01, add, m, 1, 1, multiply, x11, add, m, 2, 1, multiply, x21, final, T, mx21, m, 0, 2, multiply, x01, add, m, 1, 2, multiply, x11, add, m, 2, 2, multiply, x21, final, T, mx02, m, 0, 0, multiply, x02, add, m, 1, 0, multiply, x12, add, m, 2, 0, multiply, x22, final, T, mx12, m, 0, 1, multiply, x02, add, m, 1, 1, multiply, x12, add, m, 2, 1, multiply, x22, final, T, mx22, m, 0, 2, multiply, x02, add, m, 1, 2, multiply, x12, add, m, 2, 2, multiply, x22, =, o, 0, 0, x00, subtract, x00, multiply, mx00, add, x01, multiply, mx10, add, x02, multiply, mx20, subtract, m, 0, 0, multiply, 0.5, =, o, 0, 1, x01, subtract, x00, multiply, mx01, add, x01, multiply, mx11, add, x02, multiply, mx21, subtract, m, 0, 1, multiply, 0.5, =, o, 0, 2, x02, subtract, x00, multiply, mx02, add, x01, multiply, mx12, add, x02, multiply, mx22, subtract, m, 0, 2, multiply, 0.5, =, o, 1, 0, x10, subtract, x10, multiply, mx00, add, x11, multiply, mx10, add, x12, multiply, mx20, subtract, m, 1, 0, multiply, 0.5, =, o, 1, 1, x11, subtract, x10, multiply, mx01, add, x11, multiply, mx11, add, x12, multiply, mx21, subtract, m, 1, 1, multiply, 0.5, =, o, 1, 2, x12, subtract, x10, multiply, mx02, add, x11, multiply, mx12, add, x12, multiply, mx22, subtract, m, 1, 2, multiply, 0.5, =, o, 2, 0, x20, subtract, x20, multiply, mx00, add, x21, multiply, mx10, add, x22, multiply, mx20, subtract, m, 2, 0, multiply, 0.5, =, o, 2, 1, x21, subtract, x20, multiply, mx01, add, x21, multiply, mx11, add, x22, multiply, mx21, subtract, m, 2, 1, multiply, 0.5, =, o, 2, 2, x22, subtract, x20, multiply, mx02, add, x21, multiply, mx12, add, x22, multiply, mx22, subtract, m, 2, 2, multiply, 0.5, final, double, corr00, -, o, 0, 0, getReal, m, 0, 0, getReal, final, double, corr01, -, o, 0, 1, getReal, m, 0, 1, getReal, final, double, corr02, -, o, 0, 2, getReal, m, 0, 2, getReal, final, double, corr10, -, o, 1, 0, getReal, m, 1, 0, getReal, final, double, corr11, -, o, 1, 1, getReal, m, 1, 1, getReal, final, double, corr12, -, o, 1, 2, getReal, m, 1, 2, getReal, final, double, corr20, -, o, 2, 0, getReal, m, 2, 0, getReal, final, double, corr21, -, o, 2, 1, getReal, m, 2, 1, getReal, final, double, corr22, -, o, 2, 2, getReal, m, 2, 2, getReal, =, fn1, +, +, +, +, +, +, +, +, *, corr00, corr00, *, corr01, corr01, *, corr02, corr02, *, corr10, corr10, *, corr11, corr11, *, corr12, corr12, *, corr20, corr20, *, corr21, corr21, *, corr22, corr22, if, <=, FastMath, abs, -, fn1, fn, threshold, return, o, =, x00, o, 0, 0, =, x01, o, 0, 1, =, x02, o, 0, 2, =, x10, o, 1, 0, =, x11, o, 1, 1, =, x12, o, 1, 2, =, x20, o, 2, 0, =, x21, o, 2, 1, =, x22, o, 2, 2, =, fn, fn1, throw, new, NotARotationMatrixException, LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX, -, i, 1]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:distance:FieldRotation<T>+FieldRotation<T>#[return, r1, composeInverseInternal, r2, getAngle]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getX:null#[return, x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getY:null#[return, y]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getZ:null#[return, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toArray:null#[final, T, array, MathArrays, buildArray, x, getField, 3, =, array, 0, x, =, array, 1, y, =, array, 2, z, return, array]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toVector3D:null#[return, new, Vector3D, x, getReal, y, getReal, z, getReal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNorm1:null#[return, x, abs, add, y, abs, add, z, abs]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNorm:null#[return, x, multiply, x, add, y, multiply, y, add, z, multiply, z, sqrt]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNormSq:null#[return, x, multiply, x, add, y, multiply, y, add, z, multiply, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNormInf:null#[final, T, xAbs, x, abs, final, T, yAbs, y, abs, final, T, zAbs, z, abs, if, <=, xAbs, getReal, yAbs, getReal, if, <=, yAbs, getReal, zAbs, getReal, return, zAbs, return, yAbs, if, <=, xAbs, getReal, zAbs, getReal, return, zAbs, return, xAbs]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getAlpha:null#[return, y, atan2, x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getDelta:null#[return, z, divide, getNorm, asin]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:FieldVector3D<T>#[return, new, FieldVector3D, T, x, add, v.x, y, add, v.y, z, add, v.z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:Vector3D#[return, new, FieldVector3D, T, x, add, v, getX, y, add, v, getY, z, add, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:T+FieldVector3D<T>#[return, new, FieldVector3D, T, x, getField, getOne, this, factor, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:T+Vector3D#[return, new, FieldVector3D, T, x, add, factor, multiply, v, getX, y, add, factor, multiply, v, getY, z, add, factor, multiply, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:double+FieldVector3D<T>#[return, new, FieldVector3D, T, 1.0, this, factor, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:double+Vector3D#[return, new, FieldVector3D, T, x, add, *, factor, v, getX, y, add, *, factor, v, getY, z, add, *, factor, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:FieldVector3D<T>#[return, new, FieldVector3D, T, x, subtract, v.x, y, subtract, v.y, z, subtract, v.z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:Vector3D#[return, new, FieldVector3D, T, x, subtract, v, getX, y, subtract, v, getY, z, subtract, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:T+FieldVector3D<T>#[return, new, FieldVector3D, T, x, getField, getOne, this, factor, negate, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:T+Vector3D#[return, new, FieldVector3D, T, x, subtract, factor, multiply, v, getX, y, subtract, factor, multiply, v, getY, z, subtract, factor, multiply, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:double+FieldVector3D<T>#[return, new, FieldVector3D, T, 1.0, this, -, factor, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:double+Vector3D#[return, new, FieldVector3D, T, x, subtract, *, factor, v, getX, y, subtract, *, factor, v, getY, z, subtract, *, factor, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:normalize:null#[final, T, s, getNorm, if, ==, s, getReal, 0, throw, new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, return, scalarMultiply, s, reciprocal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:orthogonal:null#[final, double, threshold, *, 0.6, getNorm, getReal, if, ==, threshold, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, if, <=, FastMath, abs, x, getReal, threshold, final, T, inverse, y, multiply, y, add, z, multiply, z, sqrt, reciprocal, return, new, FieldVector3D, T, inverse, getField, getZero, inverse, multiply, z, inverse, multiply, y, negate, if, <=, FastMath, abs, y, getReal, threshold, final, T, inverse, x, multiply, x, add, z, multiply, z, sqrt, reciprocal, return, new, FieldVector3D, T, inverse, multiply, z, negate, inverse, getField, getZero, inverse, multiply, x, final, T, inverse, x, multiply, x, add, y, multiply, y, sqrt, reciprocal, return, new, FieldVector3D, T, inverse, multiply, y, inverse, multiply, x, negate, inverse, getField, getZero]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:angle:FieldVector3D<T>+FieldVector3D<T>#[final, T, normProduct, v1, getNorm, multiply, v2, getNorm, if, ==, normProduct, getReal, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, final, T, dot, dotProduct, v1, v2, final, double, threshold, *, normProduct, getReal, 0.9999, if, ||, <, dot, getReal, -, threshold, >, dot, getReal, threshold, FieldVector3D, T, v3, crossProduct, v1, v2, if, >=, dot, getReal, 0, return, v3, getNorm, divide, normProduct, asin, return, v3, getNorm, divide, normProduct, asin, subtract, FastMath.PI, negate, return, dot, divide, normProduct, acos]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:angle:FieldVector3D<T>+Vector3D#[final, T, normProduct, v1, getNorm, multiply, v2, getNorm, if, ==, normProduct, getReal, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, final, T, dot, dotProduct, v1, v2, final, double, threshold, *, normProduct, getReal, 0.9999, if, ||, <, dot, getReal, -, threshold, >, dot, getReal, threshold, FieldVector3D, T, v3, crossProduct, v1, v2, if, >=, dot, getReal, 0, return, v3, getNorm, divide, normProduct, asin, return, v3, getNorm, divide, normProduct, asin, subtract, FastMath.PI, negate, return, dot, divide, normProduct, acos]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:angle:Vector3D+FieldVector3D<T>#[return, angle, v2, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:negate:null#[return, new, FieldVector3D, T, x, negate, y, negate, z, negate]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:scalarMultiply:T#[return, new, FieldVector3D, T, x, multiply, a, y, multiply, a, z, multiply, a]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:scalarMultiply:double#[return, new, FieldVector3D, T, x, multiply, a, y, multiply, a, z, multiply, a]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:isNaN:null#[return, ||, Double, isNaN, x, getReal, Double, isNaN, y, getReal, Double, isNaN, z, getReal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:isInfinite:null#[return, &&, !, isNaN, ||, Double, isInfinite, x, getReal, Double, isInfinite, y, getReal, Double, isInfinite, z, getReal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, FieldVector3D, SuppressWarnings, "unchecked", final, FieldVector3D, T, rhs, FieldVector3D, T, other, if, rhs, isNaN, return, this, isNaN, return, &&, x, equals, rhs.x, y, equals, rhs.y, z, equals, rhs.z, return, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:hashCode:null#[if, isNaN, return, 409, return, *, 311, +, +, *, 107, x, hashCode, *, 83, y, hashCode, z, hashCode]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:FieldVector3D<T>#[return, x, linearCombination, x, v.x, y, v.y, z, v.z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:Vector3D#[return, x, linearCombination, v, getX, x, v, getY, y, v, getZ, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:FieldVector3D<T>#[return, new, FieldVector3D, T, x, linearCombination, y, v.z, z, negate, v.y, y, linearCombination, z, v.x, x, negate, v.z, z, linearCombination, x, v.y, y, negate, v.x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:Vector3D#[return, new, FieldVector3D, T, x, linearCombination, v, getZ, y, -, v, getY, z, y, linearCombination, v, getX, z, -, v, getZ, x, z, linearCombination, v, getY, x, -, v, getX, y]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:FieldVector3D<T>#[final, T, dx, v.x, subtract, x, abs, final, T, dy, v.y, subtract, y, abs, final, T, dz, v.z, subtract, z, abs, return, dx, add, dy, add, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:Vector3D#[final, T, dx, x, subtract, v, getX, abs, final, T, dy, y, subtract, v, getY, abs, final, T, dz, z, subtract, v, getZ, abs, return, dx, add, dy, add, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:FieldVector3D<T>#[final, T, dx, v.x, subtract, x, final, T, dy, v.y, subtract, y, final, T, dz, v.z, subtract, z, return, dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz, sqrt]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:Vector3D#[final, T, dx, x, subtract, v, getX, final, T, dy, y, subtract, v, getY, final, T, dz, z, subtract, v, getZ, return, dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz, sqrt]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:FieldVector3D<T>#[final, T, dx, v.x, subtract, x, abs, final, T, dy, v.y, subtract, y, abs, final, T, dz, v.z, subtract, z, abs, if, <=, dx, getReal, dy, getReal, if, <=, dy, getReal, dz, getReal, return, dz, return, dy, if, <=, dx, getReal, dz, getReal, return, dz, return, dx]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:Vector3D#[final, T, dx, x, subtract, v, getX, abs, final, T, dy, y, subtract, v, getY, abs, final, T, dz, z, subtract, v, getZ, abs, if, <=, dx, getReal, dy, getReal, if, <=, dy, getReal, dz, getReal, return, dz, return, dy, if, <=, dx, getReal, dz, getReal, return, dz, return, dx]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:FieldVector3D<T>#[final, T, dx, v.x, subtract, x, final, T, dy, v.y, subtract, y, final, T, dz, v.z, subtract, z, return, dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:Vector3D#[final, T, dx, x, subtract, v, getX, final, T, dy, y, subtract, v, getY, final, T, dz, z, subtract, v, getZ, return, dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:FieldVector3D<T>+FieldVector3D<T>#[return, v1, dotProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:FieldVector3D<T>+Vector3D#[return, v1, dotProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:Vector3D+FieldVector3D<T>#[return, v2, dotProduct, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:FieldVector3D<T>+FieldVector3D<T>#[return, v1, crossProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:FieldVector3D<T>+Vector3D#[return, v1, crossProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:Vector3D+FieldVector3D<T>#[return, new, FieldVector3D, T, v2.x, linearCombination, v1, getY, v2.z, -, v1, getZ, v2.y, v2.y, linearCombination, v1, getZ, v2.x, -, v1, getX, v2.z, v2.z, linearCombination, v1, getX, v2.y, -, v1, getY, v2.x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:FieldVector3D<T>+FieldVector3D<T>#[return, v1, distance1, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:FieldVector3D<T>+Vector3D#[return, v1, distance1, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:Vector3D+FieldVector3D<T>#[return, v2, distance1, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:FieldVector3D<T>+FieldVector3D<T>#[return, v1, distance, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:FieldVector3D<T>+Vector3D#[return, v1, distance, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:Vector3D+FieldVector3D<T>#[return, v2, distance, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:FieldVector3D<T>+FieldVector3D<T>#[return, v1, distanceInf, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:FieldVector3D<T>+Vector3D#[return, v1, distanceInf, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:Vector3D+FieldVector3D<T>#[return, v2, distanceInf, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:FieldVector3D<T>+FieldVector3D<T>#[return, v1, distanceSq, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:FieldVector3D<T>+Vector3D#[return, v1, distanceSq, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:Vector3D+FieldVector3D<T>#[return, v2, distanceSq, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toString:null#[return, Vector3DFormat, getInstance, format, toVector3D]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toString:NumberFormat#[return, new, Vector3DFormat, format, format, toVector3D]
org.apache.commons.math4.geometry.euclidean.threed:Line:reset:Vector3D+Vector3D#[final, Vector3D, delta, p2, subtract, p1, final, double, norm2, delta, getNormSq, if, ==, norm2, 0.0, throw, new, MathIllegalArgumentException, LocalizedFormats.ZERO_NORM, =, this, direction, new, Vector3D, /, 1.0, FastMath, sqrt, norm2, delta, =, zero, new, Vector3D, 1.0, p1, /, -, p1, dotProduct, delta, norm2, delta]
org.apache.commons.math4.geometry.euclidean.threed:Line:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Line:revert:null#[final, Line, reverted, new, Line, this, =, reverted.direction, reverted.direction, negate, return, reverted]
org.apache.commons.math4.geometry.euclidean.threed:Line:getDirection:null#[return, direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:getOrigin:null#[return, zero]
org.apache.commons.math4.geometry.euclidean.threed:Line:getAbscissa:Vector3D#[return, point, subtract, zero, dotProduct, direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:pointAt:double#[return, new, Vector3D, 1.0, zero, abscissa, direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSubSpace:Vector<Euclidean3D>#[return, toSubSpace, Point, Euclidean3D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSpace:Vector<Euclidean1D>#[return, toSpace, Point, Euclidean1D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSubSpace:Point<Euclidean3D>#[return, new, Vector1D, getAbscissa, Vector3D, point]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSpace:Point<Euclidean1D>#[return, pointAt, Vector1D, point, getX]
org.apache.commons.math4.geometry.euclidean.threed:Line:isSimilarTo:Line#[final, double, angle, Vector3D, angle, direction, line.direction, return, &&, ||, <, angle, tolerance, >, angle, -, FastMath.PI, tolerance, contains, line.zero]
org.apache.commons.math4.geometry.euclidean.threed:Line:contains:Vector3D#[return, <, distance, p, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Line:distance:Vector3D#[final, Vector3D, d, p, subtract, zero, final, Vector3D, n, new, Vector3D, 1.0, d, -, d, dotProduct, direction, direction, return, n, getNorm]
org.apache.commons.math4.geometry.euclidean.threed:Line:distance:Line#[final, Vector3D, normal, Vector3D, crossProduct, direction, line.direction, final, double, n, normal, getNorm, if, <, n, Precision.SAFE_MIN, return, distance, line.zero, final, double, offset, /, line.zero, subtract, zero, dotProduct, normal, n, return, FastMath, abs, offset]
org.apache.commons.math4.geometry.euclidean.threed:Line:closestPoint:Line#[final, double, cos, direction, dotProduct, line.direction, final, double, n, -, 1, *, cos, cos, if, <, n, Precision.EPSILON, return, zero, final, Vector3D, delta0, line.zero, subtract, zero, final, double, a, delta0, dotProduct, direction, final, double, b, delta0, dotProduct, line.direction, return, new, Vector3D, 1, zero, /, -, a, *, b, cos, n, direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:intersection:Line#[final, Vector3D, closest, closestPoint, line, return, line, contains, closest, closest, null]
org.apache.commons.math4.geometry.euclidean.threed:Line:wholeLine:null#[return, new, SubLine, this, new, IntervalsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:OutlineExtractor:getOutline:PolyhedronsSet#[final, BoundaryProjector, projector, new, BoundaryProjector, polyhedronsSet, getTolerance, polyhedronsSet, getTree, true, visit, projector, final, PolygonsSet, projected, projector, getProjected, final, Vector2D, outline, projected, getVertices, for, int, i, 0, <, i, outline.length, ++, i, final, Vector2D, rawLoop, outline, i, int, end, rawLoop.length, int, j, 0, while, <, j, end, if, pointIsBetween, rawLoop, end, j, for, int, k, j, <, k, -, end, 1, ++, k, =, rawLoop, k, rawLoop, +, k, 1, --, end, ++, j, if, !=, end, rawLoop.length, =, outline, i, Vector2D, end, System, arraycopy, rawLoop, 0, outline, i, 0, end, return, outline]
org.apache.commons.math4.geometry.euclidean.threed:OutlineExtractor:pointIsBetween:Vector2D[]+int+int#[final, Vector2D, previous, loop, %, -, +, i, n, 1, n, final, Vector2D, current, loop, i, final, Vector2D, next, loop, %, +, i, 1, n, final, double, dx1, -, current, getX, previous, getX, final, double, dy1, -, current, getY, previous, getY, final, double, dx2, -, next, getX, current, getX, final, double, dy2, -, next, getY, current, getY, final, double, cross, -, *, dx1, dy2, *, dx2, dy1, final, double, dot, +, *, dx1, dx2, *, dy1, dy2, final, double, d1d2, FastMath, sqrt, *, +, *, dx1, dx1, *, dy1, dy1, +, *, dx2, dx2, *, dy2, dy2, return, &&, <=, FastMath, abs, cross, *, 1.0e-6, d1d2, >=, dot, 0.0]
org.apache.commons.math4.geometry.euclidean.threed:Plane:copySelf:null#[return, new, Plane, this]
org.apache.commons.math4.geometry.euclidean.threed:Plane:reset:Vector3D+Vector3D#[setNormal, normal, =, originOffset, -, p, dotProduct, w, setFrame]
org.apache.commons.math4.geometry.euclidean.threed:Plane:reset:Plane#[=, originOffset, original.originOffset, =, origin, original.origin, =, u, original.u, =, v, original.v, =, w, original.w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:setNormal:Vector3D#[final, double, norm, normal, getNorm, if, <, norm, 1.0e-10, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, =, w, new, Vector3D, /, 1.0, norm, normal]
org.apache.commons.math4.geometry.euclidean.threed:Plane:setFrame:null#[=, origin, new, Vector3D, -, originOffset, w, =, u, w, orthogonal, =, v, Vector3D, crossProduct, w, u]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOrigin:null#[return, origin]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getNormal:null#[return, w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getU:null#[return, u]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getV:null#[return, v]
org.apache.commons.math4.geometry.euclidean.threed:Plane:project:Point<Euclidean3D>#[return, toSpace, toSubSpace, point]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:revertSelf:null#[final, Vector3D, tmp, u, =, u, v, =, v, tmp, =, w, w, negate, =, originOffset, -, originOffset]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSubSpace:Vector<Euclidean3D>#[return, toSubSpace, Point, Euclidean3D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSpace:Vector<Euclidean2D>#[return, toSpace, Point, Euclidean2D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSubSpace:Point<Euclidean3D>#[final, Vector3D, p3D, Vector3D, point, return, new, Vector2D, p3D, dotProduct, u, p3D, dotProduct, v]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSpace:Point<Euclidean2D>#[final, Vector2D, p2D, Vector2D, point, return, new, Vector3D, p2D, getX, u, p2D, getY, v, -, originOffset, w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getPointAt:Vector2D+double#[return, new, Vector3D, inPlane, getX, u, inPlane, getY, v, -, offset, originOffset, w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:isSimilarTo:Plane#[final, double, angle, Vector3D, angle, w, plane.w, return, ||, &&, <, angle, 1.0e-10, <, FastMath, abs, -, originOffset, plane.originOffset, tolerance, &&, >, angle, -, FastMath.PI, 1.0e-10, <, FastMath, abs, +, originOffset, plane.originOffset, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:rotate:Vector3D+Rotation#[final, Vector3D, delta, origin, subtract, center, final, Plane, plane, new, Plane, center, add, rotation, applyTo, delta, rotation, applyTo, w, tolerance, =, plane.u, rotation, applyTo, u, =, plane.v, rotation, applyTo, v, return, plane]
org.apache.commons.math4.geometry.euclidean.threed:Plane:translate:Vector3D#[final, Plane, plane, new, Plane, origin, add, translation, w, tolerance, =, plane.u, u, =, plane.v, v, return, plane]
org.apache.commons.math4.geometry.euclidean.threed:Plane:intersection:Line#[final, Vector3D, direction, line, getDirection, final, double, dot, w, dotProduct, direction, if, <, FastMath, abs, dot, 1.0e-10, return, null, final, Vector3D, point, line, toSpace, Point, Euclidean1D, Vector1D.ZERO, final, double, k, /, -, +, originOffset, w, dotProduct, point, dot, return, new, Vector3D, 1.0, point, k, direction]
org.apache.commons.math4.geometry.euclidean.threed:Plane:intersection:Plane#[final, Vector3D, direction, Vector3D, crossProduct, w, other.w, if, <, direction, getNorm, tolerance, return, null, final, Vector3D, point, intersection, this, other, new, Plane, direction, tolerance, return, new, Line, point, point, add, direction, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:intersection:Plane+Plane+Plane#[final, double, a1, plane1.w, getX, final, double, b1, plane1.w, getY, final, double, c1, plane1.w, getZ, final, double, d1, plane1.originOffset, final, double, a2, plane2.w, getX, final, double, b2, plane2.w, getY, final, double, c2, plane2.w, getZ, final, double, d2, plane2.originOffset, final, double, a3, plane3.w, getX, final, double, b3, plane3.w, getY, final, double, c3, plane3.w, getZ, final, double, d3, plane3.originOffset, final, double, a23, -, *, b2, c3, *, b3, c2, final, double, b23, -, *, c2, a3, *, c3, a2, final, double, c23, -, *, a2, b3, *, a3, b2, final, double, determinant, +, +, *, a1, a23, *, b1, b23, *, c1, c23, if, <, FastMath, abs, determinant, 1.0e-10, return, null, final, double, r, /, 1.0, determinant, return, new, Vector3D, *, -, -, *, -, a23, d1, *, -, *, c1, b3, *, c3, b1, d2, *, -, *, c2, b1, *, c1, b2, d3, r, *, -, -, *, -, b23, d1, *, -, *, c3, a1, *, c1, a3, d2, *, -, *, c1, a2, *, c2, a1, d3, r, *, -, -, *, -, c23, d1, *, -, *, b1, a3, *, b3, a1, d2, *, -, *, b2, a1, *, b1, a2, d3, r]
org.apache.commons.math4.geometry.euclidean.threed:Plane:wholeHyperplane:null#[return, new, SubPlane, this, new, PolygonsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:wholeSpace:null#[return, new, PolyhedronsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:contains:Vector3D#[return, <, FastMath, abs, getOffset, p, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOffset:Plane#[return, +, originOffset, sameOrientationAs, plane, -, plane.originOffset, plane.originOffset]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOffset:Vector<Euclidean3D>#[return, getOffset, Point, Euclidean3D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOffset:Point<Euclidean3D>#[return, +, Vector3D, point, dotProduct, w, originOffset]
org.apache.commons.math4.geometry.euclidean.threed:Plane:sameOrientationAs:Hyperplane<Euclidean3D>#[return, >, Plane, other, w, dotProduct, w, 0.0]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:buildBoundary:double+double+double+double+double+double+double#[if, ||, >=, xMin, -, xMax, tolerance, >=, yMin, -, yMax, tolerance, >=, zMin, -, zMax, tolerance, return, new, BSPTree, Euclidean3D, Boolean.FALSE, final, Plane, pxMin, new, Plane, new, Vector3D, xMin, 0, 0, Vector3D.MINUS_I, tolerance, final, Plane, pxMax, new, Plane, new, Vector3D, xMax, 0, 0, Vector3D.PLUS_I, tolerance, final, Plane, pyMin, new, Plane, new, Vector3D, 0, yMin, 0, Vector3D.MINUS_J, tolerance, final, Plane, pyMax, new, Plane, new, Vector3D, 0, yMax, 0, Vector3D.PLUS_J, tolerance, final, Plane, pzMin, new, Plane, new, Vector3D, 0, 0, zMin, Vector3D.MINUS_K, tolerance, final, Plane, pzMax, new, Plane, new, Vector3D, 0, 0, zMax, Vector3D.PLUS_K, tolerance, final, Region, Euclidean3D, boundary, new, RegionFactory, Euclidean3D, buildConvex, pxMin, pxMax, pyMin, pyMax, pzMin, pzMax, return, boundary, getTree, false]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:buildBoundary:List<Vector3D>+List<int[]>+double#[for, int, i, 0, <, i, -, vertices, size, 1, ++, i, final, Vector3D, vi, vertices, get, i, for, int, j, +, i, 1, <, j, vertices, size, ++, j, if, <=, Vector3D, distance, vi, vertices, get, j, tolerance, throw, new, MathIllegalArgumentException, LocalizedFormats.CLOSE_VERTICES, vi, getX, vi, getY, vi, getZ, final, int, references, findReferences, vertices, facets, final, int, successors, successors, vertices, facets, references, for, int, vA, 0, <, vA, vertices, size, ++, vA, for, final, int, vB, successors, vA, if, >=, vB, 0, boolean, found, false, for, final, int, v, successors, vB, =, found, ||, found, ==, v, vA, if, !, found, final, Vector3D, start, vertices, get, vA, final, Vector3D, end, vertices, get, vB, throw, new, MathIllegalArgumentException, LocalizedFormats.EDGE_CONNECTED_TO_ONE_FACET, start, getX, start, getY, start, getZ, end, getX, end, getY, end, getZ, final, List, SubHyperplane, Euclidean3D, boundary, new, ArrayList, SubHyperplane, Euclidean3D, for, final, int, facet, facets, Plane, plane, new, Plane, vertices, get, facet, 0, vertices, get, facet, 1, vertices, get, facet, 2, tolerance, final, Vector2D, two2Points, Vector2D, facet.length, for, int, i, 0, <, i, facet.length, ++, i, final, Vector3D, v, vertices, get, facet, i, if, !, plane, contains, v, throw, new, MathIllegalArgumentException, LocalizedFormats.OUT_OF_PLANE, v, getX, v, getY, v, getZ, =, two2Points, i, plane, toSubSpace, v, boundary, add, new, SubPlane, plane, new, PolygonsSet, tolerance, two2Points, return, boundary]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:findReferences:List<Vector3D>+List<int[]>#[final, int, nbFacets, int, vertices, size, int, maxFacets, 0, for, final, int, facet, facets, if, <, facet.length, 3, throw, new, NumberIsTooSmallException, LocalizedFormats.WRONG_NUMBER_OF_POINTS, 3, facet.length, true, for, final, int, index, facet, =, maxFacets, FastMath, max, maxFacets, ++, nbFacets, index, final, int, references, int, vertices, size, maxFacets, for, int, r, references, Arrays, fill, r, -, 1, for, int, f, 0, <, f, facets, size, ++, f, for, final, int, v, facets, get, f, int, k, 0, while, &&, <, k, maxFacets, >=, references, v, k, 0, ++, k, =, references, v, k, f, return, references]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:successors:List<Vector3D>+List<int[]>+int[][]#[final, int, successors, int, vertices, size, references, 0, length, for, final, int, s, successors, Arrays, fill, s, -, 1, for, int, v, 0, <, v, vertices, size, ++, v, for, int, k, 0, &&, <, k, successors, v, length, >=, references, v, k, 0, ++, k, final, int, facet, facets, get, references, v, k, int, i, 0, while, &&, <, i, facet.length, !=, facet, i, v, ++, i, =, successors, v, k, facet, %, +, i, 1, facet.length, for, int, l, 0, <, l, k, ++, l, if, ==, successors, v, l, successors, v, k, final, Vector3D, start, vertices, get, v, final, Vector3D, end, vertices, get, successors, v, k, throw, new, MathIllegalArgumentException, LocalizedFormats.FACET_ORIENTATION_MISMATCH, start, getX, start, getY, start, getZ, end, getX, end, getY, end, getZ, return, successors]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:buildNew:BSPTree<Euclidean3D>#[return, new, PolyhedronsSet, tree, getTolerance]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:computeGeometricalProperties:null#[getTree, true, visit, new, FacetsContributionVisitor, if, <, getSize, 0, setSize, Double.POSITIVE_INFINITY, setBarycenter, Point, Euclidean3D, Vector3D.NaN, setSize, /, getSize, 3.0, setBarycenter, Point, Euclidean3D, new, Vector3D, /, 1.0, *, 4, getSize, Vector3D, getBarycenter]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:firstIntersection:Vector3D+Line#[return, recurseFirstIntersection, getTree, true, point, line]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:recurseFirstIntersection:BSPTree<Euclidean3D>+Vector3D+Line#[final, SubHyperplane, Euclidean3D, cut, node, getCut, if, ==, cut, null, return, null, final, BSPTree, Euclidean3D, minus, node, getMinus, final, BSPTree, Euclidean3D, plus, node, getPlus, final, Plane, plane, Plane, cut, getHyperplane, final, double, offset, plane, getOffset, Point, Euclidean3D, point, final, boolean, in, <, FastMath, abs, offset, getTolerance, final, BSPTree, Euclidean3D, near, final, BSPTree, Euclidean3D, far, if, <, offset, 0, =, near, minus, =, far, plus, =, near, plus, =, far, minus, if, in, final, SubHyperplane, Euclidean3D, facet, boundaryFacet, point, node, if, !=, facet, null, return, facet, final, SubHyperplane, Euclidean3D, crossed, recurseFirstIntersection, near, point, line, if, !=, crossed, null, return, crossed, if, !, in, final, Vector3D, hit3D, plane, intersection, line, if, &&, !=, hit3D, null, >, line, getAbscissa, hit3D, line, getAbscissa, point, final, SubHyperplane, Euclidean3D, facet, boundaryFacet, hit3D, node, if, !=, facet, null, return, facet, return, recurseFirstIntersection, far, point, line]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:boundaryFacet:Vector3D+BSPTree<Euclidean3D>#[final, Vector2D, point2D, Plane, node, getCut, getHyperplane, toSubSpace, Point, Euclidean3D, point, SuppressWarnings, "unchecked", final, BoundaryAttribute, Euclidean3D, attribute, BoundaryAttribute, Euclidean3D, node, getAttribute, if, &&, !=, attribute, getPlusOutside, null, ==, SubPlane, attribute, getPlusOutside, getRemainingRegion, checkPoint, point2D, Location.INSIDE, return, attribute, getPlusOutside, if, &&, !=, attribute, getPlusInside, null, ==, SubPlane, attribute, getPlusInside, getRemainingRegion, checkPoint, point2D, Location.INSIDE, return, attribute, getPlusInside, return, null]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:rotate:Vector3D+Rotation#[return, PolyhedronsSet, applyTransform, new, RotationTransform, center, rotation]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:translate:Vector3D#[return, PolyhedronsSet, applyTransform, new, TranslationTransform, translation]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:mat2quat:double[][]#[final, double, quat, double, 4, double, s, +, ort, 0, 0, ort, 1, 1, ort, 2, 2, if, >, s, -, 0.19, =, quat, 0, *, 0.5, FastMath, sqrt, +, s, 1.0, double, inv, /, 0.25, quat, 0, =, quat, 1, *, inv, -, ort, 1, 2, ort, 2, 1, =, quat, 2, *, inv, -, ort, 2, 0, ort, 0, 2, =, quat, 3, *, inv, -, ort, 0, 1, ort, 1, 0, =, s, -, ort, 0, 0, ort, 1, 1, ort, 2, 2, if, >, s, -, 0.19, =, quat, 1, *, 0.5, FastMath, sqrt, +, s, 1.0, double, inv, /, 0.25, quat, 1, =, quat, 0, *, inv, -, ort, 1, 2, ort, 2, 1, =, quat, 2, *, inv, +, ort, 0, 1, ort, 1, 0, =, quat, 3, *, inv, +, ort, 0, 2, ort, 2, 0, =, s, -, ort, 1, 1, ort, 0, 0, ort, 2, 2, if, >, s, -, 0.19, =, quat, 2, *, 0.5, FastMath, sqrt, +, s, 1.0, double, inv, /, 0.25, quat, 2, =, quat, 0, *, inv, -, ort, 2, 0, ort, 0, 2, =, quat, 1, *, inv, +, ort, 0, 1, ort, 1, 0, =, quat, 3, *, inv, +, ort, 2, 1, ort, 1, 2, =, s, -, ort, 2, 2, ort, 0, 0, ort, 1, 1, =, quat, 3, *, 0.5, FastMath, sqrt, +, s, 1.0, double, inv, /, 0.25, quat, 3, =, quat, 0, *, inv, -, ort, 0, 1, ort, 1, 0, =, quat, 1, *, inv, +, ort, 0, 2, ort, 2, 0, =, quat, 2, *, inv, +, ort, 2, 1, ort, 1, 2, return, quat]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:revert:null#[return, new, Rotation, -, q0, q1, q2, q3, false]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ0:null#[return, q0]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ1:null#[return, q1]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ2:null#[return, q2]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ3:null#[return, q3]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAxis:null#[return, getAxis, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAxis:RotationConvention#[final, double, squaredSine, +, +, *, q1, q1, *, q2, q2, *, q3, q3, if, ==, squaredSine, 0, return, ==, convention, RotationConvention.VECTOR_OPERATOR, Vector3D.PLUS_I, Vector3D.MINUS_I, final, double, sgn, ==, convention, RotationConvention.VECTOR_OPERATOR, +, 1, -, 1, if, <, q0, 0, final, double, inverse, /, sgn, FastMath, sqrt, squaredSine, return, new, Vector3D, *, q1, inverse, *, q2, inverse, *, q3, inverse, final, double, inverse, /, -, sgn, FastMath, sqrt, squaredSine, return, new, Vector3D, *, q1, inverse, *, q2, inverse, *, q3, inverse]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAngle:null#[if, ||, <, q0, -, 0.1, >, q0, 0.1, return, *, 2, FastMath, asin, FastMath, sqrt, +, +, *, q1, q1, *, q2, q2, *, q3, q3, if, <, q0, 0, return, *, 2, FastMath, acos, -, q0, return, *, 2, FastMath, acos, q0]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAngles:RotationOrder#[return, getAngles, order, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAngles:RotationOrder+RotationConvention#[if, ==, convention, RotationConvention.VECTOR_OPERATOR, if, ==, order, RotationOrder.XYZ, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, -, v1, getY, v1, getZ, FastMath, asin, v2, getZ, FastMath, atan2, -, v2, getY, v2, getX, if, ==, order, RotationOrder.XZY, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, v1, getZ, v1, getY, -, FastMath, asin, v2, getY, FastMath, atan2, v2, getZ, v2, getX, if, ==, order, RotationOrder.YXZ, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, v1, getX, v1, getZ, -, FastMath, asin, v2, getZ, FastMath, atan2, v2, getX, v2, getY, if, ==, order, RotationOrder.YZX, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, -, v1, getZ, v1, getX, FastMath, asin, v2, getX, FastMath, atan2, -, v2, getZ, v2, getY, if, ==, order, RotationOrder.ZXY, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, -, v1, getX, v1, getY, FastMath, asin, v2, getY, FastMath, atan2, -, v2, getX, v2, getZ, if, ==, order, RotationOrder.ZYX, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, v1, getY, v1, getX, -, FastMath, asin, v2, getX, FastMath, atan2, v2, getY, v2, getZ, if, ==, order, RotationOrder.XYX, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v1, getY, -, v1, getZ, FastMath, acos, v2, getX, FastMath, atan2, v2, getY, v2, getZ, if, ==, order, RotationOrder.XZX, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v1, getZ, v1, getY, FastMath, acos, v2, getX, FastMath, atan2, v2, getZ, -, v2, getY, if, ==, order, RotationOrder.YXY, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v1, getX, v1, getZ, FastMath, acos, v2, getY, FastMath, atan2, v2, getX, -, v2, getZ, if, ==, order, RotationOrder.YZY, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v1, getZ, -, v1, getX, FastMath, acos, v2, getY, FastMath, atan2, v2, getZ, v2, getX, if, ==, order, RotationOrder.ZXZ, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v1, getX, -, v1, getY, FastMath, acos, v2, getZ, FastMath, atan2, v2, getX, v2, getY, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v1, getY, v1, getX, FastMath, acos, v2, getZ, FastMath, atan2, v2, getY, -, v2, getX, if, ==, order, RotationOrder.XYZ, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, -, v2, getY, v2, getZ, FastMath, asin, v2, getX, FastMath, atan2, -, v1, getY, v1, getX, if, ==, order, RotationOrder.XZY, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, v2, getZ, v2, getY, -, FastMath, asin, v2, getX, FastMath, atan2, v1, getZ, v1, getX, if, ==, order, RotationOrder.YXZ, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, v2, getX, v2, getZ, -, FastMath, asin, v2, getY, FastMath, atan2, v1, getX, v1, getY, if, ==, order, RotationOrder.YZX, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, -, v2, getZ, v2, getX, FastMath, asin, v2, getY, FastMath, atan2, -, v1, getZ, v1, getY, if, ==, order, RotationOrder.ZXY, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, -, v2, getX, v2, getY, FastMath, asin, v2, getZ, FastMath, atan2, -, v1, getX, v1, getZ, if, ==, order, RotationOrder.ZYX, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, true, return, double, FastMath, atan2, v2, getY, v2, getX, -, FastMath, asin, v2, getZ, FastMath, atan2, v1, getY, v1, getZ, if, ==, order, RotationOrder.XYX, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v2, getY, -, v2, getZ, FastMath, acos, v2, getX, FastMath, atan2, v1, getY, v1, getZ, if, ==, order, RotationOrder.XZX, Vector3D, v1, applyTo, Vector3D.PLUS_I, Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, if, ||, <, v2, getX, -, 0.9999999999, >, v2, getX, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v2, getZ, v2, getY, FastMath, acos, v2, getX, FastMath, atan2, v1, getZ, -, v1, getY, if, ==, order, RotationOrder.YXY, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v2, getX, v2, getZ, FastMath, acos, v2, getY, FastMath, atan2, v1, getX, -, v1, getZ, if, ==, order, RotationOrder.YZY, Vector3D, v1, applyTo, Vector3D.PLUS_J, Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, if, ||, <, v2, getY, -, 0.9999999999, >, v2, getY, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v2, getZ, -, v2, getX, FastMath, acos, v2, getY, FastMath, atan2, v1, getZ, v1, getX, if, ==, order, RotationOrder.ZXZ, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v2, getX, -, v2, getY, FastMath, acos, v2, getZ, FastMath, atan2, v1, getX, v1, getY, Vector3D, v1, applyTo, Vector3D.PLUS_K, Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, if, ||, <, v2, getZ, -, 0.9999999999, >, v2, getZ, 0.9999999999, throw, new, CardanEulerSingularityException, false, return, double, FastMath, atan2, v2, getY, v2, getX, FastMath, acos, v2, getZ, FastMath, atan2, v1, getY, -, v1, getX]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getMatrix:null#[double, q0q0, *, q0, q0, double, q0q1, *, q0, q1, double, q0q2, *, q0, q2, double, q0q3, *, q0, q3, double, q1q1, *, q1, q1, double, q1q2, *, q1, q2, double, q1q3, *, q1, q3, double, q2q2, *, q2, q2, double, q2q3, *, q2, q3, double, q3q3, *, q3, q3, double, m, double, 3, =, m, 0, double, 3, =, m, 1, double, 3, =, m, 2, double, 3, =, m, 0, 0, -, *, 2.0, +, q0q0, q1q1, 1.0, =, m, 1, 0, *, 2.0, -, q1q2, q0q3, =, m, 2, 0, *, 2.0, +, q1q3, q0q2, =, m, 0, 1, *, 2.0, +, q1q2, q0q3, =, m, 1, 1, -, *, 2.0, +, q0q0, q2q2, 1.0, =, m, 2, 1, *, 2.0, -, q2q3, q0q1, =, m, 0, 2, *, 2.0, -, q1q3, q0q2, =, m, 1, 2, *, 2.0, +, q2q3, q0q1, =, m, 2, 2, -, *, 2.0, +, q0q0, q3q3, 1.0, return, m]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyTo:Vector3D#[double, x, u, getX, double, y, u, getY, double, z, u, getZ, double, s, +, +, *, q1, x, *, q2, y, *, q3, z, return, new, Vector3D, -, *, 2, +, *, q0, -, *, x, q0, -, *, q2, z, *, q3, y, *, s, q1, x, -, *, 2, +, *, q0, -, *, y, q0, -, *, q3, x, *, q1, z, *, s, q2, y, -, *, 2, +, *, q0, -, *, z, q0, -, *, q1, y, *, q2, x, *, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyTo:double[]+double[]#[final, double, x, in, 0, final, double, y, in, 1, final, double, z, in, 2, final, double, s, +, +, *, q1, x, *, q2, y, *, q3, z, =, out, 0, -, *, 2, +, *, q0, -, *, x, q0, -, *, q2, z, *, q3, y, *, s, q1, x, =, out, 1, -, *, 2, +, *, q0, -, *, y, q0, -, *, q3, x, *, q1, z, *, s, q2, y, =, out, 2, -, *, 2, +, *, q0, -, *, z, q0, -, *, q1, y, *, q2, x, *, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyInverseTo:Vector3D#[double, x, u, getX, double, y, u, getY, double, z, u, getZ, double, s, +, +, *, q1, x, *, q2, y, *, q3, z, double, m0, -, q0, return, new, Vector3D, -, *, 2, +, *, m0, -, *, x, m0, -, *, q2, z, *, q3, y, *, s, q1, x, -, *, 2, +, *, m0, -, *, y, m0, -, *, q3, x, *, q1, z, *, s, q2, y, -, *, 2, +, *, m0, -, *, z, m0, -, *, q1, y, *, q2, x, *, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyInverseTo:double[]+double[]#[final, double, x, in, 0, final, double, y, in, 1, final, double, z, in, 2, final, double, s, +, +, *, q1, x, *, q2, y, *, q3, z, final, double, m0, -, q0, =, out, 0, -, *, 2, +, *, m0, -, *, x, m0, -, *, q2, z, *, q3, y, *, s, q1, x, =, out, 1, -, *, 2, +, *, m0, -, *, y, m0, -, *, q3, x, *, q1, z, *, s, q2, y, =, out, 2, -, *, 2, +, *, m0, -, *, z, m0, -, *, q1, y, *, q2, x, *, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyTo:Rotation#[return, compose, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:compose:Rotation+RotationConvention#[return, ==, convention, RotationConvention.VECTOR_OPERATOR, composeInternal, r, r, composeInternal, this]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:composeInternal:Rotation#[return, new, Rotation, -, *, r.q0, q0, +, +, *, r.q1, q1, *, r.q2, q2, *, r.q3, q3, +, +, *, r.q1, q0, *, r.q0, q1, -, *, r.q2, q3, *, r.q3, q2, +, +, *, r.q2, q0, *, r.q0, q2, -, *, r.q3, q1, *, r.q1, q3, +, +, *, r.q3, q0, *, r.q0, q3, -, *, r.q1, q2, *, r.q2, q1, false]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyInverseTo:Rotation#[return, composeInverse, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:composeInverse:Rotation+RotationConvention#[return, ==, convention, RotationConvention.VECTOR_OPERATOR, composeInverseInternal, r, r, composeInternal, revert]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:composeInverseInternal:Rotation#[return, new, Rotation, -, *, -, r.q0, q0, +, +, *, r.q1, q1, *, r.q2, q2, *, r.q3, q3, +, +, *, -, r.q1, q0, *, r.q0, q1, -, *, r.q2, q3, *, r.q3, q2, +, +, *, -, r.q2, q0, *, r.q0, q2, -, *, r.q3, q1, *, r.q1, q3, +, +, *, -, r.q3, q0, *, r.q0, q3, -, *, r.q1, q2, *, r.q2, q1, false]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:orthogonalizeMatrix:double[][]+double#[double, m0, m, 0, double, m1, m, 1, double, m2, m, 2, double, x00, m0, 0, double, x01, m0, 1, double, x02, m0, 2, double, x10, m1, 0, double, x11, m1, 1, double, x12, m1, 2, double, x20, m2, 0, double, x21, m2, 1, double, x22, m2, 2, double, fn, 0, double, fn1, double, o, double, 3, 3, double, o0, o, 0, double, o1, o, 1, double, o2, o, 2, int, i, 0, while, <, ++, i, 11, double, mx00, +, +, *, m0, 0, x00, *, m1, 0, x10, *, m2, 0, x20, double, mx10, +, +, *, m0, 1, x00, *, m1, 1, x10, *, m2, 1, x20, double, mx20, +, +, *, m0, 2, x00, *, m1, 2, x10, *, m2, 2, x20, double, mx01, +, +, *, m0, 0, x01, *, m1, 0, x11, *, m2, 0, x21, double, mx11, +, +, *, m0, 1, x01, *, m1, 1, x11, *, m2, 1, x21, double, mx21, +, +, *, m0, 2, x01, *, m1, 2, x11, *, m2, 2, x21, double, mx02, +, +, *, m0, 0, x02, *, m1, 0, x12, *, m2, 0, x22, double, mx12, +, +, *, m0, 1, x02, *, m1, 1, x12, *, m2, 1, x22, double, mx22, +, +, *, m0, 2, x02, *, m1, 2, x12, *, m2, 2, x22, =, o0, 0, -, x00, *, 0.5, -, +, +, *, x00, mx00, *, x01, mx10, *, x02, mx20, m0, 0, =, o0, 1, -, x01, *, 0.5, -, +, +, *, x00, mx01, *, x01, mx11, *, x02, mx21, m0, 1, =, o0, 2, -, x02, *, 0.5, -, +, +, *, x00, mx02, *, x01, mx12, *, x02, mx22, m0, 2, =, o1, 0, -, x10, *, 0.5, -, +, +, *, x10, mx00, *, x11, mx10, *, x12, mx20, m1, 0, =, o1, 1, -, x11, *, 0.5, -, +, +, *, x10, mx01, *, x11, mx11, *, x12, mx21, m1, 1, =, o1, 2, -, x12, *, 0.5, -, +, +, *, x10, mx02, *, x11, mx12, *, x12, mx22, m1, 2, =, o2, 0, -, x20, *, 0.5, -, +, +, *, x20, mx00, *, x21, mx10, *, x22, mx20, m2, 0, =, o2, 1, -, x21, *, 0.5, -, +, +, *, x20, mx01, *, x21, mx11, *, x22, mx21, m2, 1, =, o2, 2, -, x22, *, 0.5, -, +, +, *, x20, mx02, *, x21, mx12, *, x22, mx22, m2, 2, double, corr00, -, o0, 0, m0, 0, double, corr01, -, o0, 1, m0, 1, double, corr02, -, o0, 2, m0, 2, double, corr10, -, o1, 0, m1, 0, double, corr11, -, o1, 1, m1, 1, double, corr12, -, o1, 2, m1, 2, double, corr20, -, o2, 0, m2, 0, double, corr21, -, o2, 1, m2, 1, double, corr22, -, o2, 2, m2, 2, =, fn1, +, +, +, +, +, +, +, +, *, corr00, corr00, *, corr01, corr01, *, corr02, corr02, *, corr10, corr10, *, corr11, corr11, *, corr12, corr12, *, corr20, corr20, *, corr21, corr21, *, corr22, corr22, if, <=, FastMath, abs, -, fn1, fn, threshold, return, o, =, x00, o0, 0, =, x01, o0, 1, =, x02, o0, 2, =, x10, o1, 0, =, x11, o1, 1, =, x12, o1, 2, =, x20, o2, 0, =, x21, o2, 1, =, x22, o2, 2, =, fn, fn1, throw, new, NotARotationMatrixException, LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX, -, i, 1]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:distance:Rotation+Rotation#[return, r1, composeInverseInternal, r2, getAngle]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:toString:null#[return, name]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:getA1:null#[return, a1]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:getA2:null#[return, a2]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:getA3:null#[return, a3]
org.apache.commons.math4.geometry.euclidean.threed:Segment:getStart:null#[return, start]
org.apache.commons.math4.geometry.euclidean.threed:Segment:getEnd:null#[return, end]
org.apache.commons.math4.geometry.euclidean.threed:Segment:getLine:null#[return, line]
org.apache.commons.math4.geometry.euclidean.threed:SphereGenerator:ballOnSupport:List<Vector3D>#[if, <, support, size, 1, return, new, EnclosingBall, Euclidean3D, Vector3D, Vector3D.ZERO, Double.NEGATIVE_INFINITY, final, Vector3D, vA, support, get, 0, if, <, support, size, 2, return, new, EnclosingBall, Euclidean3D, Vector3D, vA, 0, vA, final, Vector3D, vB, support, get, 1, if, <, support, size, 3, return, new, EnclosingBall, Euclidean3D, Vector3D, new, Vector3D, 0.5, vA, 0.5, vB, *, 0.5, vA, distance, vB, vA, vB, final, Vector3D, vC, support, get, 2, if, <, support, size, 4, final, Plane, p, new, Plane, vA, vB, vC, *, 1.0e-10, +, vA, getNorm1, vB, getNorm1, vC, getNorm1, final, EnclosingBall, Euclidean2D, Vector2D, disk, new, DiskGenerator, ballOnSupport, Arrays, asList, p, toSubSpace, vA, p, toSubSpace, vB, p, toSubSpace, vC, return, new, EnclosingBall, Euclidean3D, Vector3D, p, toSpace, disk, getCenter, disk, getRadius, vA, vB, vC, final, Vector3D, vD, support, get, 3, final, BigFraction, c2, BigFraction, new, BigFraction, vA, getX, new, BigFraction, vB, getX, new, BigFraction, vC, getX, new, BigFraction, vD, getX, final, BigFraction, c3, BigFraction, new, BigFraction, vA, getY, new, BigFraction, vB, getY, new, BigFraction, vC, getY, new, BigFraction, vD, getY, final, BigFraction, c4, BigFraction, new, BigFraction, vA, getZ, new, BigFraction, vB, getZ, new, BigFraction, vC, getZ, new, BigFraction, vD, getZ, final, BigFraction, c1, BigFraction, c2, 0, multiply, c2, 0, add, c3, 0, multiply, c3, 0, add, c4, 0, multiply, c4, 0, c2, 1, multiply, c2, 1, add, c3, 1, multiply, c3, 1, add, c4, 1, multiply, c4, 1, c2, 2, multiply, c2, 2, add, c3, 2, multiply, c3, 2, add, c4, 2, multiply, c4, 2, c2, 3, multiply, c2, 3, add, c3, 3, multiply, c3, 3, add, c4, 3, multiply, c4, 3, final, BigFraction, twoM11, minor, c2, c3, c4, multiply, 2, final, BigFraction, m12, minor, c1, c3, c4, final, BigFraction, m13, minor, c1, c2, c4, final, BigFraction, m14, minor, c1, c2, c3, final, BigFraction, centerX, m12, divide, twoM11, final, BigFraction, centerY, m13, divide, twoM11, negate, final, BigFraction, centerZ, m14, divide, twoM11, final, BigFraction, dx, c2, 0, subtract, centerX, final, BigFraction, dy, c3, 0, subtract, centerY, final, BigFraction, dz, c4, 0, subtract, centerZ, final, BigFraction, r2, dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz, return, new, EnclosingBall, Euclidean3D, Vector3D, new, Vector3D, centerX, doubleValue, centerY, doubleValue, centerZ, doubleValue, FastMath, sqrt, r2, doubleValue, vA, vB, vC, vD]
org.apache.commons.math4.geometry.euclidean.threed:SphereGenerator:minor:BigFraction[]+BigFraction[]+BigFraction[]#[return, c2, 0, multiply, c3, 1, multiply, c1, 2, subtract, c1, 3, add, c2, 0, multiply, c3, 2, multiply, c1, 3, subtract, c1, 1, add, c2, 0, multiply, c3, 3, multiply, c1, 1, subtract, c1, 2, add, c2, 1, multiply, c3, 0, multiply, c1, 3, subtract, c1, 2, add, c2, 1, multiply, c3, 2, multiply, c1, 0, subtract, c1, 3, add, c2, 1, multiply, c3, 3, multiply, c1, 2, subtract, c1, 0, add, c2, 2, multiply, c3, 0, multiply, c1, 1, subtract, c1, 3, add, c2, 2, multiply, c3, 1, multiply, c1, 3, subtract, c1, 0, add, c2, 2, multiply, c3, 3, multiply, c1, 0, subtract, c1, 1, add, c2, 3, multiply, c3, 0, multiply, c1, 2, subtract, c1, 1, add, c2, 3, multiply, c3, 1, multiply, c1, 0, subtract, c1, 2, add, c2, 3, multiply, c3, 2, multiply, c1, 1, subtract, c1, 0]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getCartesian:null#[return, v]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getR:null#[return, r]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getTheta:null#[return, theta]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getPhi:null#[return, phi]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:toCartesianGradient:double[]#[computeJacobian, return, double, +, +, *, sGradient, 0, jacobian, 0, 0, *, sGradient, 1, jacobian, 1, 0, *, sGradient, 2, jacobian, 2, 0, +, +, *, sGradient, 0, jacobian, 0, 1, *, sGradient, 1, jacobian, 1, 1, *, sGradient, 2, jacobian, 2, 1, +, *, sGradient, 0, jacobian, 0, 2, *, sGradient, 2, jacobian, 2, 2]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:toCartesianHessian:double[][]+double[]#[computeJacobian, computeHessians, final, double, hj, double, 3, 3, final, double, cHessian, double, 3, 3, =, hj, 0, 0, +, +, *, sHessian, 0, 0, jacobian, 0, 0, *, sHessian, 1, 0, jacobian, 1, 0, *, sHessian, 2, 0, jacobian, 2, 0, =, hj, 0, 1, +, +, *, sHessian, 0, 0, jacobian, 0, 1, *, sHessian, 1, 0, jacobian, 1, 1, *, sHessian, 2, 0, jacobian, 2, 1, =, hj, 0, 2, +, *, sHessian, 0, 0, jacobian, 0, 2, *, sHessian, 2, 0, jacobian, 2, 2, =, hj, 1, 0, +, +, *, sHessian, 1, 0, jacobian, 0, 0, *, sHessian, 1, 1, jacobian, 1, 0, *, sHessian, 2, 1, jacobian, 2, 0, =, hj, 1, 1, +, +, *, sHessian, 1, 0, jacobian, 0, 1, *, sHessian, 1, 1, jacobian, 1, 1, *, sHessian, 2, 1, jacobian, 2, 1, =, hj, 2, 0, +, +, *, sHessian, 2, 0, jacobian, 0, 0, *, sHessian, 2, 1, jacobian, 1, 0, *, sHessian, 2, 2, jacobian, 2, 0, =, hj, 2, 1, +, +, *, sHessian, 2, 0, jacobian, 0, 1, *, sHessian, 2, 1, jacobian, 1, 1, *, sHessian, 2, 2, jacobian, 2, 1, =, hj, 2, 2, +, *, sHessian, 2, 0, jacobian, 0, 2, *, sHessian, 2, 2, jacobian, 2, 2, =, cHessian, 0, 0, +, +, *, jacobian, 0, 0, hj, 0, 0, *, jacobian, 1, 0, hj, 1, 0, *, jacobian, 2, 0, hj, 2, 0, =, cHessian, 1, 0, +, +, *, jacobian, 0, 1, hj, 0, 0, *, jacobian, 1, 1, hj, 1, 0, *, jacobian, 2, 1, hj, 2, 0, =, cHessian, 2, 0, +, *, jacobian, 0, 2, hj, 0, 0, *, jacobian, 2, 2, hj, 2, 0, =, cHessian, 1, 1, +, +, *, jacobian, 0, 1, hj, 0, 1, *, jacobian, 1, 1, hj, 1, 1, *, jacobian, 2, 1, hj, 2, 1, =, cHessian, 2, 1, +, *, jacobian, 0, 2, hj, 0, 1, *, jacobian, 2, 2, hj, 2, 1, =, cHessian, 2, 2, +, *, jacobian, 0, 2, hj, 0, 2, *, jacobian, 2, 2, hj, 2, 2, +=, cHessian, 0, 0, +, +, *, sGradient, 0, rHessian, 0, 0, *, sGradient, 1, thetaHessian, 0, 0, *, sGradient, 2, phiHessian, 0, 0, +=, cHessian, 1, 0, +, +, *, sGradient, 0, rHessian, 1, 0, *, sGradient, 1, thetaHessian, 1, 0, *, sGradient, 2, phiHessian, 1, 0, +=, cHessian, 2, 0, +, *, sGradient, 0, rHessian, 2, 0, *, sGradient, 2, phiHessian, 2, 0, +=, cHessian, 1, 1, +, +, *, sGradient, 0, rHessian, 1, 1, *, sGradient, 1, thetaHessian, 1, 1, *, sGradient, 2, phiHessian, 1, 1, +=, cHessian, 2, 1, +, *, sGradient, 0, rHessian, 2, 1, *, sGradient, 2, phiHessian, 2, 1, +=, cHessian, 2, 2, +, *, sGradient, 0, rHessian, 2, 2, *, sGradient, 2, phiHessian, 2, 2, =, cHessian, 0, 1, cHessian, 1, 0, =, cHessian, 0, 2, cHessian, 2, 0, =, cHessian, 1, 2, cHessian, 2, 1, return, cHessian]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:computeJacobian:null#[if, ==, jacobian, null, final, double, x, v, getX, final, double, y, v, getY, final, double, z, v, getZ, final, double, rho2, +, *, x, x, *, y, y, final, double, rho, FastMath, sqrt, rho2, final, double, r2, +, rho2, *, z, z, =, jacobian, double, 3, 3, =, jacobian, 0, 0, /, x, r, =, jacobian, 0, 1, /, y, r, =, jacobian, 0, 2, /, z, r, =, jacobian, 1, 0, /, -, y, rho2, =, jacobian, 1, 1, /, x, rho2, =, jacobian, 2, 0, /, *, x, z, *, rho, r2, =, jacobian, 2, 1, /, *, y, z, *, rho, r2, =, jacobian, 2, 2, /, -, rho, r2]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:computeHessians:null#[if, ==, rHessian, null, final, double, x, v, getX, final, double, y, v, getY, final, double, z, v, getZ, final, double, x2, *, x, x, final, double, y2, *, y, y, final, double, z2, *, z, z, final, double, rho2, +, x2, y2, final, double, rho, FastMath, sqrt, rho2, final, double, r2, +, rho2, z2, final, double, xOr, /, x, r, final, double, yOr, /, y, r, final, double, zOr, /, z, r, final, double, xOrho2, /, x, rho2, final, double, yOrho2, /, y, rho2, final, double, xOr3, /, xOr, r2, final, double, yOr3, /, yOr, r2, final, double, zOr3, /, zOr, r2, =, rHessian, double, 3, 3, =, rHessian, 0, 0, +, *, y, yOr3, *, z, zOr3, =, rHessian, 1, 0, *, -, x, yOr3, =, rHessian, 2, 0, *, -, z, xOr3, =, rHessian, 1, 1, +, *, x, xOr3, *, z, zOr3, =, rHessian, 2, 1, *, -, y, zOr3, =, rHessian, 2, 2, +, *, x, xOr3, *, y, yOr3, =, rHessian, 0, 1, rHessian, 1, 0, =, rHessian, 0, 2, rHessian, 2, 0, =, rHessian, 1, 2, rHessian, 2, 1, =, thetaHessian, double, 2, 2, =, thetaHessian, 0, 0, *, 2, xOrho2, yOrho2, =, thetaHessian, 1, 0, -, *, yOrho2, yOrho2, *, xOrho2, xOrho2, =, thetaHessian, 1, 1, *, -, 2, xOrho2, yOrho2, =, thetaHessian, 0, 1, thetaHessian, 1, 0, final, double, rhor2, *, rho, r2, final, double, rho2r2, *, rho, rhor2, final, double, rhor4, *, rhor2, r2, final, double, rho3r4, *, rhor4, rho2, final, double, r2P2rho2, +, *, 3, rho2, z2, =, phiHessian, double, 3, 3, =, phiHessian, 0, 0, /, *, z, -, rho2r2, *, x2, r2P2rho2, rho3r4, =, phiHessian, 1, 0, /, *, -, x, y, z, r2P2rho2, rho3r4, =, phiHessian, 2, 0, /, *, x, -, rho2, z2, rhor4, =, phiHessian, 1, 1, /, *, z, -, rho2r2, *, y2, r2P2rho2, rho3r4, =, phiHessian, 2, 1, /, *, y, -, rho2, z2, rhor4, =, phiHessian, 2, 2, /, *, 2, rho, zOr3, r, =, phiHessian, 0, 1, phiHessian, 1, 0, =, phiHessian, 0, 2, phiHessian, 2, 0, =, phiHessian, 1, 2, phiHessian, 2, 1]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:writeReplace:null#[return, new, DataTransferObject, v, getX, v, getY, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:SubLine:getSegments:null#[final, List, Interval, list, remainingRegion, asList, final, List, Segment, segments, new, ArrayList, Segment, list, size, for, final, Interval, interval, list, final, Vector3D, start, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getInf, final, Vector3D, end, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getSup, segments, add, new, Segment, start, end, line, return, segments]
org.apache.commons.math4.geometry.euclidean.threed:SubLine:intersection:SubLine+boolean#[Vector3D, v1D, line, intersection, subLine.line, if, ==, v1D, null, return, null, Location, loc1, remainingRegion, checkPoint, Point, Euclidean1D, line, toSubSpace, Point, Euclidean3D, v1D, Location, loc2, subLine.remainingRegion, checkPoint, Point, Euclidean1D, subLine.line, toSubSpace, Point, Euclidean3D, v1D, if, includeEndPoints, return, &&, !=, loc1, Location.OUTSIDE, !=, loc2, Location.OUTSIDE, v1D, null, return, &&, ==, loc1, Location.INSIDE, ==, loc2, Location.INSIDE, v1D, null]
org.apache.commons.math4.geometry.euclidean.threed:SubLine:buildIntervalSet:Vector3D+Vector3D+double#[final, Line, line, new, Line, start, end, tolerance, return, new, IntervalsSet, line, toSubSpace, Point, Euclidean3D, start, getX, line, toSubSpace, Point, Euclidean3D, end, getX, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:SubPlane:buildNew:Hyperplane<Euclidean3D>+Region<Euclidean2D>#[return, new, SubPlane, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.euclidean.threed:SubPlane:split:Hyperplane<Euclidean3D>#[final, Plane, otherPlane, Plane, hyperplane, final, Plane, thisPlane, Plane, getHyperplane, final, Line, inter, otherPlane, intersection, thisPlane, final, double, tolerance, thisPlane, getTolerance, if, ==, inter, null, final, double, global, otherPlane, getOffset, thisPlane, if, <, global, -, tolerance, return, new, SplitSubHyperplane, Euclidean3D, null, this, if, >, global, tolerance, return, new, SplitSubHyperplane, Euclidean3D, this, null, return, new, SplitSubHyperplane, Euclidean3D, null, null, Vector2D, p, thisPlane, toSubSpace, Point, Euclidean3D, inter, toSpace, Point, Euclidean1D, Vector1D.ZERO, Vector2D, q, thisPlane, toSubSpace, Point, Euclidean3D, inter, toSpace, Point, Euclidean1D, Vector1D.ONE, Vector3D, crossP, Vector3D, crossProduct, inter, getDirection, thisPlane, getNormal, if, <, crossP, dotProduct, otherPlane, getNormal, 0, final, Vector2D, tmp, p, =, p, q, =, q, tmp, final, SubHyperplane, Euclidean2D, l2DMinus, new, org.apache.commons.math4.geometry.euclidean.twod.Line, p, q, tolerance, wholeHyperplane, final, SubHyperplane, Euclidean2D, l2DPlus, new, org.apache.commons.math4.geometry.euclidean.twod.Line, q, p, tolerance, wholeHyperplane, final, BSPTree, Euclidean2D, splitTree, getRemainingRegion, getTree, false, split, l2DMinus, final, BSPTree, Euclidean2D, plusTree, getRemainingRegion, isEmpty, splitTree, getPlus, new, BSPTree, Euclidean2D, Boolean.FALSE, new, BSPTree, Euclidean2D, l2DPlus, new, BSPTree, Euclidean2D, Boolean.FALSE, splitTree, getPlus, null, final, BSPTree, Euclidean2D, minusTree, getRemainingRegion, isEmpty, splitTree, getMinus, new, BSPTree, Euclidean2D, Boolean.FALSE, new, BSPTree, Euclidean2D, l2DMinus, new, BSPTree, Euclidean2D, Boolean.FALSE, splitTree, getMinus, null, return, new, SplitSubHyperplane, Euclidean3D, new, SubPlane, thisPlane, copySelf, new, PolygonsSet, plusTree, tolerance, new, SubPlane, thisPlane, copySelf, new, PolygonsSet, minusTree, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getX:null#[return, x]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getY:null#[return, y]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getZ:null#[return, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:toArray:null#[return, double, x, y, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getSpace:null#[return, Euclidean3D, getInstance]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getZero:null#[return, ZERO]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNorm1:null#[return, +, FastMath, abs, x, FastMath, abs, y, FastMath, abs, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNorm:null#[return, FastMath, sqrt, +, +, *, x, x, *, y, y, *, z, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNormSq:null#[return, +, +, *, x, x, *, y, y, *, z, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNormInf:null#[return, FastMath, max, FastMath, max, FastMath, abs, x, FastMath, abs, y, FastMath, abs, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getAlpha:null#[return, FastMath, atan2, y, x]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getDelta:null#[return, FastMath, asin, /, z, getNorm]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:add:Vector<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, return, new, Vector3D, +, x, v3.x, +, y, v3.y, +, z, v3.z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:add:double+Vector<Euclidean3D>#[return, new, Vector3D, 1, this, factor, Vector3D, v]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:subtract:Vector<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, return, new, Vector3D, -, x, v3.x, -, y, v3.y, -, z, v3.z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:subtract:double+Vector<Euclidean3D>#[return, new, Vector3D, 1, this, -, factor, Vector3D, v]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:normalize:null#[double, s, getNorm, if, ==, s, 0, throw, new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, return, scalarMultiply, /, 1, s]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:orthogonal:null#[double, threshold, *, 0.6, getNorm, if, ==, threshold, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, if, <=, FastMath, abs, x, threshold, double, inverse, /, 1, FastMath, sqrt, +, *, y, y, *, z, z, return, new, Vector3D, 0, *, inverse, z, *, -, inverse, y, if, <=, FastMath, abs, y, threshold, double, inverse, /, 1, FastMath, sqrt, +, *, x, x, *, z, z, return, new, Vector3D, *, -, inverse, z, 0, *, inverse, x, double, inverse, /, 1, FastMath, sqrt, +, *, x, x, *, y, y, return, new, Vector3D, *, inverse, y, *, -, inverse, x, 0]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:angle:Vector3D+Vector3D#[double, normProduct, *, v1, getNorm, v2, getNorm, if, ==, normProduct, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, double, dot, v1, dotProduct, v2, double, threshold, *, normProduct, 0.9999, if, ||, <, dot, -, threshold, >, dot, threshold, Vector3D, v3, crossProduct, v1, v2, if, >=, dot, 0, return, FastMath, asin, /, v3, getNorm, normProduct, return, -, FastMath.PI, FastMath, asin, /, v3, getNorm, normProduct, return, FastMath, acos, /, dot, normProduct]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:negate:null#[return, new, Vector3D, -, x, -, y, -, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:scalarMultiply:double#[return, new, Vector3D, *, a, x, *, a, y, *, a, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:isNaN:null#[return, ||, Double, isNaN, x, Double, isNaN, y, Double, isNaN, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:isInfinite:null#[return, &&, !, isNaN, ||, Double, isInfinite, x, Double, isInfinite, y, Double, isInfinite, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, Vector3D, final, Vector3D, rhs, Vector3D, other, if, rhs, isNaN, return, this, isNaN, return, &&, ==, x, rhs.x, ==, y, rhs.y, ==, z, rhs.z, return, false]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:hashCode:null#[if, isNaN, return, 642, return, *, 643, +, +, *, 164, MathUtils, hash, x, *, 3, MathUtils, hash, y, MathUtils, hash, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:dotProduct:Vector<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, return, MathArrays, linearCombination, x, v3.x, y, v3.y, z, v3.z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:crossProduct:Vector<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, return, new, Vector3D, MathArrays, linearCombination, y, v3.z, -, z, v3.y, MathArrays, linearCombination, z, v3.x, -, x, v3.z, MathArrays, linearCombination, x, v3.y, -, y, v3.x]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance1:Vector<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, final, double, dx, FastMath, abs, -, v3.x, x, final, double, dy, FastMath, abs, -, v3.y, y, final, double, dz, FastMath, abs, -, v3.z, z, return, +, dx, dy, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance:Point<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, final, double, dx, -, v3.x, x, final, double, dy, -, v3.y, y, final, double, dz, -, v3.z, z, return, FastMath, sqrt, +, +, *, dx, dx, *, dy, dy, *, dz, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceInf:Vector<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, final, double, dx, FastMath, abs, -, v3.x, x, final, double, dy, FastMath, abs, -, v3.y, y, final, double, dz, FastMath, abs, -, v3.z, z, return, FastMath, max, FastMath, max, dx, dy, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceSq:Vector<Euclidean3D>#[final, Vector3D, v3, Vector3D, v, final, double, dx, -, v3.x, x, final, double, dy, -, v3.y, y, final, double, dz, -, v3.z, z, return, +, +, *, dx, dx, *, dy, dy, *, dz, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:dotProduct:Vector3D+Vector3D#[return, v1, dotProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:crossProduct:Vector3D+Vector3D#[return, v1, crossProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance1:Vector3D+Vector3D#[return, v1, distance1, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance:Vector3D+Vector3D#[return, v1, distance, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceInf:Vector3D+Vector3D#[return, v1, distanceInf, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceSq:Vector3D+Vector3D#[return, v1, distanceSq, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:toString:null#[return, Vector3DFormat, getInstance, format, this]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:toString:NumberFormat#[return, new, Vector3DFormat, format, format, this]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:getInstance:null#[return, getInstance, Locale, getDefault]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:getInstance:Locale#[return, new, Vector3DFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:format:Vector<Euclidean3D>+StringBuffer+FieldPosition#[final, Vector3D, v3, Vector3D, vector, return, format, toAppendTo, pos, v3, getX, v3, getY, v3, getZ]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:parse:String#[ParsePosition, parsePosition, new, ParsePosition, 0, Vector3D, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, Vector3D, return, result]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:parse:String+ParsePosition#[final, double, coordinates, parseCoordinates, 3, source, pos, if, ==, coordinates, null, return, null, return, new, Vector3D, coordinates, 0, coordinates, 1, coordinates, 2]
org.apache.commons.math4.geometry.euclidean.twod:DiskGenerator:ballOnSupport:List<Vector2D>#[if, <, support, size, 1, return, new, EnclosingBall, Euclidean2D, Vector2D, Vector2D.ZERO, Double.NEGATIVE_INFINITY, final, Vector2D, vA, support, get, 0, if, <, support, size, 2, return, new, EnclosingBall, Euclidean2D, Vector2D, vA, 0, vA, final, Vector2D, vB, support, get, 1, if, <, support, size, 3, return, new, EnclosingBall, Euclidean2D, Vector2D, new, Vector2D, 0.5, vA, 0.5, vB, *, 0.5, vA, distance, vB, vA, vB, final, Vector2D, vC, support, get, 2, final, BigFraction, c2, BigFraction, new, BigFraction, vA, getX, new, BigFraction, vB, getX, new, BigFraction, vC, getX, final, BigFraction, c3, BigFraction, new, BigFraction, vA, getY, new, BigFraction, vB, getY, new, BigFraction, vC, getY, final, BigFraction, c1, BigFraction, c2, 0, multiply, c2, 0, add, c3, 0, multiply, c3, 0, c2, 1, multiply, c2, 1, add, c3, 1, multiply, c3, 1, c2, 2, multiply, c2, 2, add, c3, 2, multiply, c3, 2, final, BigFraction, twoM11, minor, c2, c3, multiply, 2, final, BigFraction, m12, minor, c1, c3, final, BigFraction, m13, minor, c1, c2, final, BigFraction, centerX, m12, divide, twoM11, final, BigFraction, centerY, m13, divide, twoM11, negate, final, BigFraction, dx, c2, 0, subtract, centerX, final, BigFraction, dy, c3, 0, subtract, centerY, final, BigFraction, r2, dx, multiply, dx, add, dy, multiply, dy, return, new, EnclosingBall, Euclidean2D, Vector2D, new, Vector2D, centerX, doubleValue, centerY, doubleValue, FastMath, sqrt, r2, doubleValue, vA, vB, vC]
org.apache.commons.math4.geometry.euclidean.twod:DiskGenerator:minor:BigFraction[]+BigFraction[]#[return, c2, 0, multiply, c1, 2, subtract, c1, 1, add, c2, 1, multiply, c1, 0, subtract, c1, 2, add, c2, 2, multiply, c1, 1, subtract, c1, 0]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:getDimension:null#[return, 2]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:getSubSpace:null#[return, Euclidean1D, getInstance]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.twod.hull:AbstractConvexHullGenerator2D:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.euclidean.twod.hull:AbstractConvexHullGenerator2D:isIncludeCollinearPoints:null#[return, includeCollinearPoints]
org.apache.commons.math4.geometry.euclidean.twod.hull:AbstractConvexHullGenerator2D:generate:Collection<Vector2D>#[MathUtils, checkNotNull, points, Collection, Vector2D, hullVertices, null, if, <, points, size, 2, =, hullVertices, points, =, hullVertices, findHullVertices, points, try, return, new, ConvexHull2D, hullVertices, toArray, Vector2D, hullVertices, size, tolerance, catch, MathIllegalArgumentException, e, throw, new, ConvergenceException]
org.apache.commons.math4.geometry.euclidean.twod.hull:AklToussaintHeuristic:reducePoints:Collection<Vector2D>#[int, size, 0, Vector2D, minX, null, Vector2D, maxX, null, Vector2D, minY, null, Vector2D, maxY, null, for, Vector2D, p, points, if, ||, ==, minX, null, <, p, getX, minX, getX, =, minX, p, if, ||, ==, maxX, null, >, p, getX, maxX, getX, =, maxX, p, if, ||, ==, minY, null, <, p, getY, minY, getY, =, minY, p, if, ||, ==, maxY, null, >, p, getY, maxY, getY, =, maxY, p, ++, size, if, <, size, 4, return, points, final, List, Vector2D, quadrilateral, buildQuadrilateral, minY, maxX, maxY, minX, if, <, quadrilateral, size, 3, return, points, final, List, Vector2D, reducedPoints, new, ArrayList, Vector2D, quadrilateral, for, final, Vector2D, p, points, if, !, insideQuadrilateral, p, quadrilateral, reducedPoints, add, p, return, reducedPoints]
org.apache.commons.math4.geometry.euclidean.twod.hull:AklToussaintHeuristic:buildQuadrilateral:Vector2D...#[List, Vector2D, quadrilateral, new, ArrayList, Vector2D, for, Vector2D, p, points, if, !, quadrilateral, contains, p, quadrilateral, add, p, return, quadrilateral]
org.apache.commons.math4.geometry.euclidean.twod.hull:AklToussaintHeuristic:insideQuadrilateral:Vector2D+List<Vector2D>#[Vector2D, p1, quadrilateralPoints, get, 0, Vector2D, p2, quadrilateralPoints, get, 1, if, ||, point, equals, p1, point, equals, p2, return, true, final, double, last, point, crossProduct, p1, p2, final, int, size, quadrilateralPoints, size, for, int, i, 1, <, i, size, ++, i, =, p1, p2, =, p2, quadrilateralPoints, get, ==, +, i, 1, size, 0, +, i, 1, if, ||, point, equals, p1, point, equals, p2, return, true, if, <, *, last, point, crossProduct, p1, p2, 0, return, false, return, true]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:isConvex:Vector2D[]#[if, <, hullVertices.length, 3, return, true, int, sign, 0, for, int, i, 0, <, i, hullVertices.length, ++, i, final, Vector2D, p1, hullVertices, ==, i, 0, -, hullVertices.length, 1, -, i, 1, final, Vector2D, p2, hullVertices, i, final, Vector2D, p3, hullVertices, ==, i, -, hullVertices.length, 1, 0, +, i, 1, final, Vector2D, d1, p2, subtract, p1, final, Vector2D, d2, p3, subtract, p2, final, double, crossProduct, MathArrays, linearCombination, d1, getX, d2, getY, -, d1, getY, d2, getX, final, int, cmp, Precision, compareTo, crossProduct, 0.0, tolerance, if, !=, cmp, 0.0, if, &&, !=, sign, 0.0, !=, cmp, sign, return, false, =, sign, cmp, return, true]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:getVertices:null#[return, vertices, clone]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:getLineSegments:null#[return, retrieveLineSegments, clone]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:retrieveLineSegments:null#[if, ==, lineSegments, null, final, int, size, vertices.length, if, <=, size, 1, =, this, lineSegments, Segment, 0, if, ==, size, 2, =, this, lineSegments, Segment, 1, final, Vector2D, p1, vertices, 0, final, Vector2D, p2, vertices, 1, =, this, lineSegments, 0, new, Segment, p1, p2, new, Line, p1, p2, tolerance, =, this, lineSegments, Segment, size, Vector2D, firstPoint, null, Vector2D, lastPoint, null, int, index, 0, for, Vector2D, point, vertices, if, ==, lastPoint, null, =, firstPoint, point, =, lastPoint, point, =, this, lineSegments, ++, index, new, Segment, lastPoint, point, new, Line, lastPoint, point, tolerance, =, lastPoint, point, =, this, lineSegments, index, new, Segment, lastPoint, firstPoint, new, Line, lastPoint, firstPoint, tolerance, return, lineSegments]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:createRegion:null#[if, <, vertices.length, 3, throw, new, InsufficientDataException, final, RegionFactory, Euclidean2D, factory, new, RegionFactory, Euclidean2D, final, Segment, segments, retrieveLineSegments, final, Line, lineArray, Line, segments.length, for, int, i, 0, <, i, segments.length, ++, i, =, lineArray, i, segments, i, getLine, return, factory, buildConvex, lineArray]
org.apache.commons.math4.geometry.euclidean.twod.hull:MonotoneChain:findHullVertices:Collection<Vector2D>#[final, List, Vector2D, pointsSortedByXAxis, new, ArrayList, Vector2D, points, Collections, sort, pointsSortedByXAxis, new, Comparator, Vector2D, Override, public, int, compare, final, Vector2D, o1, final, Vector2D, o2, final, double, tolerance, getTolerance, final, int, diff, Precision, compareTo, o1, getX, o2, getX, tolerance, if, ==, diff, 0, return, Precision, compareTo, o1, getY, o2, getY, tolerance, return, diff, final, List, Vector2D, lowerHull, new, ArrayList, Vector2D, for, Vector2D, p, pointsSortedByXAxis, updateHull, p, lowerHull, final, List, Vector2D, upperHull, new, ArrayList, Vector2D, for, int, idx, -, pointsSortedByXAxis, size, 1, >=, idx, 0, --, idx, final, Vector2D, p, pointsSortedByXAxis, get, idx, updateHull, p, upperHull, final, List, Vector2D, hullVertices, new, ArrayList, Vector2D, -, +, lowerHull, size, upperHull, size, 2, for, int, idx, 0, <, idx, -, lowerHull, size, 1, ++, idx, hullVertices, add, lowerHull, get, idx, for, int, idx, 0, <, idx, -, upperHull, size, 1, ++, idx, hullVertices, add, upperHull, get, idx, if, &&, hullVertices, isEmpty, !, lowerHull, isEmpty, hullVertices, add, lowerHull, get, 0, return, hullVertices]
org.apache.commons.math4.geometry.euclidean.twod.hull:MonotoneChain:updateHull:Vector2D+List<Vector2D>#[final, double, tolerance, getTolerance, if, ==, hull, size, 1, final, Vector2D, p1, hull, get, 0, if, <, p1, distance, point, tolerance, return, while, >=, hull, size, 2, final, int, size, hull, size, final, Vector2D, p1, hull, get, -, size, 2, final, Vector2D, p2, hull, get, -, size, 1, final, double, offset, new, Line, p1, p2, tolerance, getOffset, point, if, <, FastMath, abs, offset, tolerance, final, double, distanceToCurrent, p1, distance, point, if, ||, <, distanceToCurrent, tolerance, <, p2, distance, point, tolerance, return, final, double, distanceToLast, p1, distance, p2, if, isIncludeCollinearPoints, final, int, index, <, distanceToCurrent, distanceToLast, -, size, 1, size, hull, add, index, point, if, >, distanceToCurrent, distanceToLast, hull, remove, -, size, 1, hull, add, point, return, if, >, offset, 0, hull, remove, -, size, 1, break, hull, add, point]
org.apache.commons.math4.geometry.euclidean.twod:Line:copySelf:null#[return, new, Line, this]
org.apache.commons.math4.geometry.euclidean.twod:Line:reset:Vector2D+Vector2D#[unlinkReverse, final, double, dx, -, p2, getX, p1, getX, final, double, dy, -, p2, getY, p1, getY, final, double, d, FastMath, hypot, dx, dy, if, ==, d, 0.0, =, angle, 0.0, =, cos, 1.0, =, sin, 0.0, =, originOffset, p1, getY, =, angle, +, FastMath.PI, FastMath, atan2, -, dy, -, dx, =, cos, /, dx, d, =, sin, /, dy, d, =, originOffset, /, MathArrays, linearCombination, p2, getX, p1, getY, -, p1, getX, p2, getY, d]
org.apache.commons.math4.geometry.euclidean.twod:Line:reset:Vector2D+double#[unlinkReverse, =, this, angle, MathUtils, normalizeAngle, alpha, FastMath.PI, =, cos, FastMath, cos, this, angle, =, sin, FastMath, sin, this, angle, =, originOffset, MathArrays, linearCombination, cos, p, getY, -, sin, p, getX]
org.apache.commons.math4.geometry.euclidean.twod:Line:revertSelf:null#[unlinkReverse, if, <, angle, FastMath.PI, +=, angle, FastMath.PI, -=, angle, FastMath.PI, =, cos, -, cos, =, sin, -, sin, =, originOffset, -, originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:unlinkReverse:null#[if, !=, reverse, null, =, reverse.reverse, null, =, reverse, null]
org.apache.commons.math4.geometry.euclidean.twod:Line:getReverse:null#[if, ==, reverse, null, =, reverse, new, Line, <, angle, FastMath.PI, +, angle, FastMath.PI, -, angle, FastMath.PI, -, cos, -, sin, -, originOffset, tolerance, =, reverse.reverse, this, return, reverse]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSubSpace:Vector<Euclidean2D>#[return, toSubSpace, Point, Euclidean2D, vector]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSpace:Vector<Euclidean1D>#[return, toSpace, Point, Euclidean1D, vector]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSubSpace:Point<Euclidean2D>#[Vector2D, p2, Vector2D, point, return, new, Vector1D, MathArrays, linearCombination, cos, p2, getX, sin, p2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSpace:Point<Euclidean1D>#[final, double, abscissa, Vector1D, point, getX, return, new, Vector2D, MathArrays, linearCombination, abscissa, cos, -, originOffset, sin, MathArrays, linearCombination, abscissa, sin, originOffset, cos]
org.apache.commons.math4.geometry.euclidean.twod:Line:intersection:Line#[final, double, d, MathArrays, linearCombination, sin, other.cos, -, other.sin, cos, if, <, FastMath, abs, d, tolerance, return, null, return, new, Vector2D, /, MathArrays, linearCombination, cos, other.originOffset, -, other.cos, originOffset, d, /, MathArrays, linearCombination, sin, other.originOffset, -, other.sin, originOffset, d]
org.apache.commons.math4.geometry.euclidean.twod:Line:project:Point<Euclidean2D>#[return, toSpace, toSubSpace, point]
org.apache.commons.math4.geometry.euclidean.twod:Line:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:wholeHyperplane:null#[return, new, SubLine, this, new, IntervalsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:wholeSpace:null#[return, new, PolygonsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOffset:Line#[return, +, originOffset, >, MathArrays, linearCombination, cos, line.cos, sin, line.sin, 0, -, line.originOffset, line.originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOffset:Vector<Euclidean2D>#[return, getOffset, Point, Euclidean2D, vector]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOffset:Point<Euclidean2D>#[Vector2D, p2, Vector2D, point, return, MathArrays, linearCombination, sin, p2, getX, -, cos, p2, getY, 1.0, originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:sameOrientationAs:Hyperplane<Euclidean2D>#[final, Line, otherL, Line, other, return, >=, MathArrays, linearCombination, sin, otherL.sin, cos, otherL.cos, 0.0]
org.apache.commons.math4.geometry.euclidean.twod:Line:getPointAt:Vector1D+double#[final, double, x, abscissa, getX, final, double, dOffset, -, offset, originOffset, return, new, Vector2D, MathArrays, linearCombination, x, cos, dOffset, sin, MathArrays, linearCombination, x, sin, -, dOffset, cos]
org.apache.commons.math4.geometry.euclidean.twod:Line:contains:Vector2D#[return, <, FastMath, abs, getOffset, p, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:distance:Vector2D#[return, FastMath, abs, getOffset, p]
org.apache.commons.math4.geometry.euclidean.twod:Line:isParallelTo:Line#[return, <, FastMath, abs, MathArrays, linearCombination, sin, line.cos, -, cos, line.sin, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:translateToPoint:Vector2D#[=, originOffset, MathArrays, linearCombination, cos, p, getY, -, sin, p, getX]
org.apache.commons.math4.geometry.euclidean.twod:Line:getAngle:null#[return, MathUtils, normalizeAngle, angle, FastMath.PI]
org.apache.commons.math4.geometry.euclidean.twod:Line:setAngle:double#[unlinkReverse, =, this, angle, MathUtils, normalizeAngle, angle, FastMath.PI, =, cos, FastMath, cos, this, angle, =, sin, FastMath, sin, this, angle]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOriginOffset:null#[return, originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:setOriginOffset:double#[unlinkReverse, =, originOffset, offset]
org.apache.commons.math4.geometry.euclidean.twod:Line:getTransform:double+double+double+double+double+double#[return, new, LineTransform, cXX, cYX, cXY, cYY, cX1, cY1]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:add:Vector2D[]#[add, new, NestedLoops, bLoop, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:add:NestedLoops#[for, final, NestedLoops, child, surrounded, if, child.polygon, contains, node.polygon, child, add, node, return, for, final, Iterator, NestedLoops, iterator, surrounded, iterator, iterator, hasNext, final, NestedLoops, child, iterator, next, if, node.polygon, contains, child.polygon, node.surrounded, add, child, iterator, remove, RegionFactory, Euclidean2D, factory, new, RegionFactory, Euclidean2D, for, final, NestedLoops, child, surrounded, if, !, factory, intersection, node.polygon, child.polygon, isEmpty, throw, new, MathIllegalArgumentException, LocalizedFormats.CROSSING_BOUNDARY_LOOPS, surrounded, add, node]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:correctOrientation:null#[for, NestedLoops, child, surrounded, child, setClockWise, true]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:setClockWise:boolean#[if, ^, originalIsClockwise, clockwise, int, min, -, 1, int, max, loop.length, while, <, ++, min, --, max, final, Vector2D, tmp, loop, min, =, loop, min, loop, max, =, loop, max, tmp, for, final, NestedLoops, child, surrounded, child, setClockWise, !, clockwise]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:boxBoundary:double+double+double+double+double#[if, ||, >=, xMin, -, xMax, tolerance, >=, yMin, -, yMax, tolerance, return, null, final, Vector2D, minMin, new, Vector2D, xMin, yMin, final, Vector2D, minMax, new, Vector2D, xMin, yMax, final, Vector2D, maxMin, new, Vector2D, xMax, yMin, final, Vector2D, maxMax, new, Vector2D, xMax, yMax, return, Line, new, Line, minMin, maxMin, tolerance, new, Line, maxMin, maxMax, tolerance, new, Line, maxMax, minMax, tolerance, new, Line, minMax, minMin, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:verticesToTree:double+Vector2D...#[final, int, n, vertices.length, if, ==, n, 0, return, new, BSPTree, Euclidean2D, Boolean.TRUE, final, Vertex, vArray, Vertex, n, for, int, i, 0, <, i, n, ++, i, =, vArray, i, new, Vertex, vertices, i, List, Edge, edges, new, ArrayList, Edge, n, for, int, i, 0, <, i, n, ++, i, final, Vertex, start, vArray, i, final, Vertex, end, vArray, %, +, i, 1, n, Line, line, start, sharedLineWith, end, if, ==, line, null, =, line, new, Line, start, getLocation, end, getLocation, hyperplaneThickness, edges, add, new, Edge, start, end, line, for, final, Vertex, vertex, vArray, if, &&, &&, !=, vertex, start, !=, vertex, end, <=, FastMath, abs, line, getOffset, Point, Euclidean2D, vertex, getLocation, hyperplaneThickness, vertex, bindWith, line, final, BSPTree, Euclidean2D, tree, new, BSPTree, Euclidean2D, insertEdges, hyperplaneThickness, tree, edges, return, tree]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:insertEdges:double+BSPTree<Euclidean2D>+List<Edge>#[int, index, 0, Edge, inserted, null, while, &&, ==, inserted, null, <, index, edges, size, =, inserted, edges, get, ++, index, if, ==, inserted, getNode, null, if, node, insertCut, inserted, getLine, inserted, setNode, node, =, inserted, null, =, inserted, null, if, ==, inserted, null, final, BSPTree, Euclidean2D, parent, node, getParent, if, ||, ==, parent, null, ==, node, parent, getMinus, node, setAttribute, Boolean.TRUE, node, setAttribute, Boolean.FALSE, return, final, List, Edge, plusList, new, ArrayList, Edge, final, List, Edge, minusList, new, ArrayList, Edge, for, final, Edge, edge, edges, if, !=, edge, inserted, final, double, startOffset, inserted, getLine, getOffset, Point, Euclidean2D, edge, getStart, getLocation, final, double, endOffset, inserted, getLine, getOffset, Point, Euclidean2D, edge, getEnd, getLocation, Side, startSide, <=, FastMath, abs, startOffset, hyperplaneThickness, Side.HYPER, <, startOffset, 0, Side.MINUS, Side.PLUS, Side, endSide, <=, FastMath, abs, endOffset, hyperplaneThickness, Side.HYPER, <, endOffset, 0, Side.MINUS, Side.PLUS, switch, startSide, case, PLUS, if, ==, endSide, Side.MINUS, final, Vertex, splitPoint, edge, split, inserted, getLine, minusList, add, splitPoint, getOutgoing, plusList, add, splitPoint, getIncoming, plusList, add, edge, break, case, MINUS, if, ==, endSide, Side.PLUS, final, Vertex, splitPoint, edge, split, inserted, getLine, minusList, add, splitPoint, getIncoming, plusList, add, splitPoint, getOutgoing, minusList, add, edge, break, default, if, ==, endSide, Side.PLUS, plusList, add, edge, if, ==, endSide, Side.MINUS, minusList, add, edge, break, if, !, plusList, isEmpty, insertEdges, hyperplaneThickness, node, getPlus, plusList, node, getPlus, setAttribute, Boolean.FALSE, if, !, minusList, isEmpty, insertEdges, hyperplaneThickness, node, getMinus, minusList, node, getMinus, setAttribute, Boolean.TRUE]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:buildNew:BSPTree<Euclidean2D>#[return, new, PolygonsSet, tree, getTolerance]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:computeGeometricalProperties:null#[final, Vector2D, v, getVertices, if, ==, v.length, 0, final, BSPTree, Euclidean2D, tree, getTree, false, if, &&, ==, tree, getCut, null, Boolean, tree, getAttribute, setSize, Double.POSITIVE_INFINITY, setBarycenter, Point, Euclidean2D, Vector2D.NaN, setSize, 0, setBarycenter, Point, Euclidean2D, new, Vector2D, 0, 0, if, ==, v, 0, 0, null, setSize, Double.POSITIVE_INFINITY, setBarycenter, Point, Euclidean2D, Vector2D.NaN, double, sum, 0, double, sumX, 0, double, sumY, 0, for, Vector2D, loop, v, double, x1, loop, -, loop.length, 1, getX, double, y1, loop, -, loop.length, 1, getY, for, final, Vector2D, point, loop, final, double, x0, x1, final, double, y0, y1, =, x1, point, getX, =, y1, point, getY, final, double, factor, -, *, x0, y1, *, y0, x1, +=, sum, factor, +=, sumX, *, factor, +, x0, x1, +=, sumY, *, factor, +, y0, y1, if, <, sum, 0, setSize, Double.POSITIVE_INFINITY, setBarycenter, Point, Euclidean2D, Vector2D.NaN, setSize, /, sum, 2, setBarycenter, Point, Euclidean2D, new, Vector2D, /, sumX, *, 3, sum, /, sumY, *, 3, sum]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:getVertices:null#[if, ==, vertices, null, if, ==, getTree, false, getCut, null, =, vertices, Vector2D, 0, final, SegmentsBuilder, visitor, new, SegmentsBuilder, getTolerance, getTree, true, visit, visitor, final, List, ConnectableSegment, segments, visitor, getSegments, int, pending, segments, size, -=, pending, naturalFollowerConnections, segments, if, >, pending, 0, -=, pending, splitEdgeConnections, segments, if, >, pending, 0, -=, pending, closeVerticesConnections, segments, final, ArrayList, List, Segment, loops, new, ArrayList, List, Segment, for, ConnectableSegment, s, getUnprocessed, segments, !=, s, null, =, s, getUnprocessed, segments, final, List, Segment, loop, followLoop, s, if, !=, loop, null, if, ==, loop, get, 0, getStart, null, loops, add, 0, loop, loops, add, loop, =, vertices, Vector2D, loops, size, int, i, 0, for, final, List, Segment, loop, loops, if, ||, <, loop, size, 2, &&, &&, ==, loop, size, 2, ==, loop, get, 0, getStart, null, ==, loop, get, 1, getEnd, null, final, Line, line, loop, get, 0, getLine, =, vertices, ++, i, Vector2D, null, line, toSpace, Point, Euclidean1D, new, Vector1D, -, Float.MAX_VALUE, line, toSpace, Point, Euclidean1D, new, Vector1D, +, Float.MAX_VALUE, if, ==, loop, get, 0, getStart, null, final, Vector2D, array, Vector2D, +, loop, size, 2, int, j, 0, for, Segment, segment, loop, if, ==, j, 0, double, x, segment, getLine, toSubSpace, Point, Euclidean2D, segment, getEnd, getX, -=, x, FastMath, max, 1.0, FastMath, abs, /, x, 2, =, array, ++, j, null, =, array, ++, j, segment, getLine, toSpace, Point, Euclidean1D, new, Vector1D, x, if, <, j, -, array.length, 1, =, array, ++, j, segment, getEnd, if, ==, j, -, array.length, 1, double, x, segment, getLine, toSubSpace, Point, Euclidean2D, segment, getStart, getX, +=, x, FastMath, max, 1.0, FastMath, abs, /, x, 2, =, array, ++, j, segment, getLine, toSpace, Point, Euclidean1D, new, Vector1D, x, =, vertices, ++, i, array, final, Vector2D, array, Vector2D, loop, size, int, j, 0, for, Segment, segment, loop, =, array, ++, j, segment, getStart, =, vertices, ++, i, array, return, vertices, clone]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:naturalFollowerConnections:List<ConnectableSegment>#[int, connected, 0, for, final, ConnectableSegment, segment, segments, if, ==, segment, getNext, null, final, BSPTree, Euclidean2D, node, segment, getNode, final, BSPTree, Euclidean2D, end, segment, getEndNode, for, final, ConnectableSegment, candidateNext, segments, if, &&, &&, ==, candidateNext, getPrevious, null, ==, candidateNext, getNode, end, ==, candidateNext, getStartNode, node, segment, setNext, candidateNext, candidateNext, setPrevious, segment, ++, connected, break, return, connected]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:splitEdgeConnections:List<ConnectableSegment>#[int, connected, 0, for, final, ConnectableSegment, segment, segments, if, ==, segment, getNext, null, final, Hyperplane, Euclidean2D, hyperplane, segment, getNode, getCut, getHyperplane, final, BSPTree, Euclidean2D, end, segment, getEndNode, for, final, ConnectableSegment, candidateNext, segments, if, &&, &&, ==, candidateNext, getPrevious, null, ==, candidateNext, getNode, getCut, getHyperplane, hyperplane, ==, candidateNext, getStartNode, end, segment, setNext, candidateNext, candidateNext, setPrevious, segment, ++, connected, break, return, connected]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:closeVerticesConnections:List<ConnectableSegment>#[int, connected, 0, for, final, ConnectableSegment, segment, segments, if, &&, ==, segment, getNext, null, !=, segment, getEnd, null, final, Vector2D, end, segment, getEnd, ConnectableSegment, selectedNext, null, double, min, Double.POSITIVE_INFINITY, for, final, ConnectableSegment, candidateNext, segments, if, &&, ==, candidateNext, getPrevious, null, !=, candidateNext, getStart, null, final, double, distance, Vector2D, distance, end, candidateNext, getStart, if, <, distance, min, =, selectedNext, candidateNext, =, min, distance, if, <=, min, getTolerance, segment, setNext, selectedNext, selectedNext, setPrevious, segment, ++, connected, return, connected]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:getUnprocessed:List<ConnectableSegment>#[for, final, ConnectableSegment, segment, segments, if, !, segment, isProcessed, return, segment, return, null]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:followLoop:ConnectableSegment#[final, List, Segment, loop, new, ArrayList, Segment, loop, add, defining, defining, setProcessed, true, ConnectableSegment, next, defining, getNext, while, &&, !=, next, defining, !=, next, null, loop, add, next, next, setProcessed, true, =, next, next, getNext, if, ==, next, null, ConnectableSegment, previous, defining, getPrevious, while, !=, previous, null, loop, add, 0, previous, previous, setProcessed, true, =, previous, previous, getPrevious, filterSpuriousVertices, loop, if, &&, ==, loop, size, 2, !=, loop, get, 0, getStart, null, return, null, return, loop]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:filterSpuriousVertices:List<Segment>#[for, int, i, 0, <, i, loop, size, ++, i, final, Segment, previous, loop, get, i, int, j, %, +, i, 1, loop, size, final, Segment, next, loop, get, j, if, &&, !=, next, null, Precision, equals, previous, getLine, getAngle, next, getLine, getAngle, Precision.EPSILON, loop, set, j, new, Segment, previous, getStart, next, getEnd, previous, getLine, loop, remove, --, i]
org.apache.commons.math4.geometry.euclidean.twod:Segment:getStart:null#[return, start]
org.apache.commons.math4.geometry.euclidean.twod:Segment:getEnd:null#[return, end]
org.apache.commons.math4.geometry.euclidean.twod:Segment:getLine:null#[return, line]
org.apache.commons.math4.geometry.euclidean.twod:Segment:distance:Vector2D#[final, double, deltaX, -, end, getX, start, getX, final, double, deltaY, -, end, getY, start, getY, final, double, r, /, +, *, -, p, getX, start, getX, deltaX, *, -, p, getY, start, getY, deltaY, +, *, deltaX, deltaX, *, deltaY, deltaY, if, ||, <, r, 0, >, r, 1, final, double, dist1, getStart, distance, Point, Euclidean2D, p, final, double, dist2, getEnd, distance, Point, Euclidean2D, p, return, FastMath, min, dist1, dist2, final, double, px, +, start, getX, *, r, deltaX, final, double, py, +, start, getY, *, r, deltaY, final, Vector2D, interPt, new, Vector2D, px, py, return, interPt, distance, Point, Euclidean2D, p]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:getSegments:null#[final, Line, line, Line, getHyperplane, final, List, Interval, list, IntervalsSet, getRemainingRegion, asList, final, List, Segment, segments, new, ArrayList, Segment, list, size, for, final, Interval, interval, list, final, Vector2D, start, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getInf, final, Vector2D, end, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getSup, segments, add, new, Segment, start, end, line, return, segments]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:intersection:SubLine+boolean#[Line, line1, Line, getHyperplane, Line, line2, Line, subLine, getHyperplane, Vector2D, v2D, line1, intersection, line2, if, ==, v2D, null, return, null, Location, loc1, getRemainingRegion, checkPoint, line1, toSubSpace, Point, Euclidean2D, v2D, Location, loc2, subLine, getRemainingRegion, checkPoint, line2, toSubSpace, Point, Euclidean2D, v2D, if, includeEndPoints, return, &&, !=, loc1, Location.OUTSIDE, !=, loc2, Location.OUTSIDE, v2D, null, return, &&, ==, loc1, Location.INSIDE, ==, loc2, Location.INSIDE, v2D, null]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:buildIntervalSet:Vector2D+Vector2D+double#[final, Line, line, new, Line, start, end, tolerance, return, new, IntervalsSet, line, toSubSpace, Point, Euclidean2D, start, getX, line, toSubSpace, Point, Euclidean2D, end, getX, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:buildNew:Hyperplane<Euclidean2D>+Region<Euclidean1D>#[return, new, SubLine, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:split:Hyperplane<Euclidean2D>#[final, Line, thisLine, Line, getHyperplane, final, Line, otherLine, Line, hyperplane, final, Vector2D, crossing, thisLine, intersection, otherLine, final, double, tolerance, thisLine, getTolerance, if, ==, crossing, null, final, double, global, otherLine, getOffset, thisLine, if, <, global, -, tolerance, return, new, SplitSubHyperplane, Euclidean2D, null, this, if, >, global, tolerance, return, new, SplitSubHyperplane, Euclidean2D, this, null, return, new, SplitSubHyperplane, Euclidean2D, null, null, final, boolean, direct, <, FastMath, sin, -, thisLine, getAngle, otherLine, getAngle, 0, final, Vector1D, x, thisLine, toSubSpace, Point, Euclidean2D, crossing, final, SubHyperplane, Euclidean1D, subPlus, new, OrientedPoint, x, !, direct, tolerance, wholeHyperplane, final, SubHyperplane, Euclidean1D, subMinus, new, OrientedPoint, x, direct, tolerance, wholeHyperplane, final, BSPTree, Euclidean1D, splitTree, getRemainingRegion, getTree, false, split, subMinus, final, BSPTree, Euclidean1D, plusTree, getRemainingRegion, isEmpty, splitTree, getPlus, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, subPlus, new, BSPTree, Euclidean1D, Boolean.FALSE, splitTree, getPlus, null, final, BSPTree, Euclidean1D, minusTree, getRemainingRegion, isEmpty, splitTree, getMinus, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, subMinus, new, BSPTree, Euclidean1D, Boolean.FALSE, splitTree, getMinus, null, return, new, SplitSubHyperplane, Euclidean2D, new, SubLine, thisLine, copySelf, new, IntervalsSet, plusTree, tolerance, new, SubLine, thisLine, copySelf, new, IntervalsSet, minusTree, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getX:null#[return, x]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getY:null#[return, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:toArray:null#[return, double, x, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getSpace:null#[return, Euclidean2D, getInstance]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getZero:null#[return, ZERO]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNorm1:null#[return, +, FastMath, abs, x, FastMath, abs, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNorm:null#[return, FastMath, sqrt, +, *, x, x, *, y, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNormSq:null#[return, +, *, x, x, *, y, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNormInf:null#[return, FastMath, max, FastMath, abs, x, FastMath, abs, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:add:Vector<Euclidean2D>#[Vector2D, v2, Vector2D, v, return, new, Vector2D, +, x, v2, getX, +, y, v2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:add:double+Vector<Euclidean2D>#[Vector2D, v2, Vector2D, v, return, new, Vector2D, +, x, *, factor, v2, getX, +, y, *, factor, v2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:subtract:Vector<Euclidean2D>#[Vector2D, p3, Vector2D, p, return, new, Vector2D, -, x, p3.x, -, y, p3.y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:subtract:double+Vector<Euclidean2D>#[Vector2D, v2, Vector2D, v, return, new, Vector2D, -, x, *, factor, v2, getX, -, y, *, factor, v2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:normalize:null#[double, s, getNorm, if, ==, s, 0, throw, new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, return, scalarMultiply, /, 1, s]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:angle:Vector2D+Vector2D#[double, normProduct, *, v1, getNorm, v2, getNorm, if, ==, normProduct, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, double, dot, v1, dotProduct, v2, double, threshold, *, normProduct, 0.9999, if, ||, <, dot, -, threshold, >, dot, threshold, final, double, n, FastMath, abs, MathArrays, linearCombination, v1.x, v2.y, -, v1.y, v2.x, if, >=, dot, 0, return, FastMath, asin, /, n, normProduct, return, -, FastMath.PI, FastMath, asin, /, n, normProduct, return, FastMath, acos, /, dot, normProduct]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:negate:null#[return, new, Vector2D, -, x, -, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:scalarMultiply:double#[return, new, Vector2D, *, a, x, *, a, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:isNaN:null#[return, ||, Double, isNaN, x, Double, isNaN, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:isInfinite:null#[return, &&, !, isNaN, ||, Double, isInfinite, x, Double, isInfinite, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distance1:Vector<Euclidean2D>#[Vector2D, p3, Vector2D, p, final, double, dx, FastMath, abs, -, p3.x, x, final, double, dy, FastMath, abs, -, p3.y, y, return, +, dx, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distance:Point<Euclidean2D>#[Vector2D, p3, Vector2D, p, final, double, dx, -, p3.x, x, final, double, dy, -, p3.y, y, return, FastMath, sqrt, +, *, dx, dx, *, dy, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceInf:Vector<Euclidean2D>#[Vector2D, p3, Vector2D, p, final, double, dx, FastMath, abs, -, p3.x, x, final, double, dy, FastMath, abs, -, p3.y, y, return, FastMath, max, dx, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceSq:Vector<Euclidean2D>#[Vector2D, p3, Vector2D, p, final, double, dx, -, p3.x, x, final, double, dy, -, p3.y, y, return, +, *, dx, dx, *, dy, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:dotProduct:Vector<Euclidean2D>#[final, Vector2D, v2, Vector2D, v, return, MathArrays, linearCombination, x, v2.x, y, v2.y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:crossProduct:Vector2D+Vector2D#[final, double, x1, -, p2, getX, p1, getX, final, double, y1, -, getY, p1, getY, final, double, x2, -, getX, p1, getX, final, double, y2, -, p2, getY, p1, getY, return, MathArrays, linearCombination, x1, y1, -, x2, y2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distance:Vector2D+Vector2D#[return, p1, distance, p2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceInf:Vector2D+Vector2D#[return, p1, distanceInf, p2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceSq:Vector2D+Vector2D#[return, p1, distanceSq, p2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, Vector2D, final, Vector2D, rhs, Vector2D, other, if, rhs, isNaN, return, this, isNaN, return, &&, ==, x, rhs.x, ==, y, rhs.y, return, false]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:hashCode:null#[if, isNaN, return, 542, return, *, 122, +, *, 76, MathUtils, hash, x, MathUtils, hash, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:toString:null#[return, Vector2DFormat, getInstance, format, this]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:toString:NumberFormat#[return, new, Vector2DFormat, format, format, this]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:getInstance:null#[return, getInstance, Locale, getDefault]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:getInstance:Locale#[return, new, Vector2DFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:format:Vector<Euclidean2D>+StringBuffer+FieldPosition#[final, Vector2D, p2, Vector2D, vector, return, format, toAppendTo, pos, p2, getX, p2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:parse:String#[ParsePosition, parsePosition, new, ParsePosition, 0, Vector2D, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, Vector2D, return, result]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:parse:String+ParsePosition#[final, double, coordinates, parseCoordinates, 2, source, pos, if, ==, coordinates, null, return, null, return, new, Vector2D, coordinates, 0, coordinates, 1]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:insertCuts:BSPTree<S>+Collection<SubHyperplane<S>>#[final, Iterator, SubHyperplane, S, iterator, boundary, iterator, Hyperplane, S, inserted, null, while, &&, ==, inserted, null, iterator, hasNext, =, inserted, iterator, next, getHyperplane, if, !, node, insertCut, inserted, copySelf, =, inserted, null, if, !, iterator, hasNext, return, final, ArrayList, SubHyperplane, S, plusList, new, ArrayList, SubHyperplane, S, final, ArrayList, SubHyperplane, S, minusList, new, ArrayList, SubHyperplane, S, while, iterator, hasNext, final, SubHyperplane, S, other, iterator, next, final, SubHyperplane.SplitSubHyperplane, S, split, other, split, inserted, switch, split, getSide, case, PLUS, plusList, add, other, break, case, MINUS, minusList, add, other, break, case, BOTH, plusList, add, split, getPlus, minusList, add, split, getMinus, break, default, insertCuts, node, getPlus, plusList, insertCuts, node, getMinus, minusList]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:copySelf:null#[return, buildNew, tree, copySelf]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isEmpty:null#[return, isEmpty, tree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isEmpty:BSPTree<S>#[if, ==, node, getCut, null, return, !, Boolean, node, getAttribute, return, &&, isEmpty, node, getMinus, isEmpty, node, getPlus]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isFull:null#[return, isFull, tree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isFull:BSPTree<S>#[if, ==, node, getCut, null, return, Boolean, node, getAttribute, return, &&, isFull, node, getMinus, isFull, node, getPlus]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:contains:Region<S>#[return, new, RegionFactory, S, difference, region, this, isEmpty]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:projectToBoundary:Point<S>#[final, BoundaryProjector, S, T, projector, new, BoundaryProjector, S, T, point, getTree, true, visit, projector, return, projector, getProjection]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:Vector<S>#[return, checkPoint, Point, S, point]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:Point<S>#[return, checkPoint, tree, point]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:BSPTree<S>+Vector<S>#[return, checkPoint, node, Point, S, point]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:BSPTree<S>+Point<S>#[final, BSPTree, S, cell, node, getCell, point, tolerance, if, ==, cell, getCut, null, return, Boolean, cell, getAttribute, Location.INSIDE, Location.OUTSIDE, final, Location, minusCode, checkPoint, cell, getMinus, point, final, Location, plusCode, checkPoint, cell, getPlus, point, return, ==, minusCode, plusCode, minusCode, Location.BOUNDARY]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getTree:boolean#[if, &&, includeBoundaryAttributes, !=, tree, getCut, null, ==, tree, getAttribute, null, tree, visit, new, BoundaryBuilder, S, return, tree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getBoundarySize:null#[final, BoundarySizeVisitor, S, visitor, new, BoundarySizeVisitor, S, getTree, true, visit, visitor, return, visitor, getSize]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getSize:null#[if, ==, barycenter, null, computeGeometricalProperties, return, size]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:setSize:double#[=, this, size, size]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getBarycenter:null#[if, ==, barycenter, null, computeGeometricalProperties, return, barycenter]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:setBarycenter:Vector<S>#[setBarycenter, Point, S, barycenter]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:setBarycenter:Point<S>#[=, this, barycenter, barycenter]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:intersection:SubHyperplane<S>#[return, recurseIntersection, tree, sub]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:recurseIntersection:BSPTree<S>+SubHyperplane<S>#[if, ==, node, getCut, null, return, Boolean, node, getAttribute, sub, copySelf, null, final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, final, SubHyperplane.SplitSubHyperplane, S, split, sub, split, hyperplane, if, !=, split, getPlus, null, if, !=, split, getMinus, null, final, SubHyperplane, S, plus, recurseIntersection, node, getPlus, split, getPlus, final, SubHyperplane, S, minus, recurseIntersection, node, getMinus, split, getMinus, if, ==, plus, null, return, minus, if, ==, minus, null, return, plus, return, plus, reunite, minus, return, recurseIntersection, node, getPlus, sub, if, !=, split, getMinus, null, return, recurseIntersection, node, getMinus, sub, return, recurseIntersection, node, getPlus, recurseIntersection, node, getMinus, sub]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:applyTransform:Transform<S,T>#[final, Map, BSPTree, S, BSPTree, S, map, new, HashMap, BSPTree, S, BSPTree, S, final, BSPTree, S, transformedTree, recurseTransform, getTree, false, transform, map, for, final, Map.Entry, BSPTree, S, BSPTree, S, entry, map, entrySet, if, !=, entry, getKey, getCut, null, SuppressWarnings, "unchecked", BoundaryAttribute, S, original, BoundaryAttribute, S, entry, getKey, getAttribute, if, !=, original, null, SuppressWarnings, "unchecked", BoundaryAttribute, S, transformed, BoundaryAttribute, S, entry, getValue, getAttribute, for, final, BSPTree, S, splitter, original, getSplitters, transformed, getSplitters, add, map, get, splitter, return, buildNew, transformedTree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:recurseTransform:BSPTree<S>+Transform<S,T>+Map<BSPTree<S>,BSPTree<S>>#[final, BSPTree, S, transformedNode, if, ==, node, getCut, null, =, transformedNode, new, BSPTree, S, node, getAttribute, final, SubHyperplane, S, sub, node, getCut, final, SubHyperplane, S, tSub, AbstractSubHyperplane, S, T, sub, applyTransform, transform, BoundaryAttribute, S, attribute, BoundaryAttribute, S, node, getAttribute, if, !=, attribute, null, final, SubHyperplane, S, tPO, ==, attribute, getPlusOutside, null, null, AbstractSubHyperplane, S, T, attribute, getPlusOutside, applyTransform, transform, final, SubHyperplane, S, tPI, ==, attribute, getPlusInside, null, null, AbstractSubHyperplane, S, T, attribute, getPlusInside, applyTransform, transform, =, attribute, new, BoundaryAttribute, S, tPO, tPI, new, NodesSet, S, =, transformedNode, new, BSPTree, S, tSub, recurseTransform, node, getPlus, transform, map, recurseTransform, node, getMinus, transform, map, attribute, map, put, node, transformedNode, return, transformedNode]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:copySelf:null#[return, buildNew, hyperplane, copySelf, remainingRegion]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:getHyperplane:null#[return, hyperplane]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:getRemainingRegion:null#[return, remainingRegion]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:getSize:null#[return, remainingRegion, getSize]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:reunite:SubHyperplane<S>#[SuppressWarnings, "unchecked", AbstractSubHyperplane, S, T, o, AbstractSubHyperplane, S, T, other, return, buildNew, hyperplane, new, RegionFactory, T, union, remainingRegion, o.remainingRegion]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:applyTransform:Transform<S,T>#[final, Hyperplane, S, tHyperplane, transform, apply, hyperplane, final, Map, BSPTree, T, BSPTree, T, map, new, HashMap, BSPTree, T, BSPTree, T, final, BSPTree, T, tTree, recurseTransform, remainingRegion, getTree, false, tHyperplane, transform, map, for, final, Map.Entry, BSPTree, T, BSPTree, T, entry, map, entrySet, if, !=, entry, getKey, getCut, null, SuppressWarnings, "unchecked", BoundaryAttribute, T, original, BoundaryAttribute, T, entry, getKey, getAttribute, if, !=, original, null, SuppressWarnings, "unchecked", BoundaryAttribute, T, transformed, BoundaryAttribute, T, entry, getValue, getAttribute, for, final, BSPTree, T, splitter, original, getSplitters, transformed, getSplitters, add, map, get, splitter, return, buildNew, tHyperplane, remainingRegion, buildNew, tTree]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:recurseTransform:BSPTree<T>+Hyperplane<S>+Transform<S,T>+Map<BSPTree<T>,BSPTree<T>>#[final, BSPTree, T, transformedNode, if, ==, node, getCut, null, =, transformedNode, new, BSPTree, T, node, getAttribute, SuppressWarnings, "unchecked", BoundaryAttribute, T, attribute, BoundaryAttribute, T, node, getAttribute, if, !=, attribute, null, final, SubHyperplane, T, tPO, ==, attribute, getPlusOutside, null, null, transform, apply, attribute, getPlusOutside, hyperplane, transformed, final, SubHyperplane, T, tPI, ==, attribute, getPlusInside, null, null, transform, apply, attribute, getPlusInside, hyperplane, transformed, =, attribute, new, BoundaryAttribute, T, tPO, tPI, new, NodesSet, T, =, transformedNode, new, BSPTree, T, transform, apply, node, getCut, hyperplane, transformed, recurseTransform, node, getPlus, transformed, transform, map, recurseTransform, node, getMinus, transformed, transform, map, attribute, map, put, node, transformedNode, return, transformedNode]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:isEmpty:null#[return, remainingRegion, isEmpty]
org.apache.commons.math4.geometry.partitioning:BoundaryAttribute:getPlusOutside:null#[return, plusOutside]
org.apache.commons.math4.geometry.partitioning:BoundaryAttribute:getPlusInside:null#[return, plusInside]
org.apache.commons.math4.geometry.partitioning:BoundaryAttribute:getSplitters:null#[return, splitters]
org.apache.commons.math4.geometry.partitioning:BoundaryBuilder:visitOrder:BSPTree<S>#[return, Order.PLUS_MINUS_SUB]
org.apache.commons.math4.geometry.partitioning:BoundaryBuilder:visitInternalNode:BSPTree<S>#[SubHyperplane, S, plusOutside, null, SubHyperplane, S, plusInside, null, NodesSet, S, splitters, null, final, Characterization, S, plusChar, new, Characterization, S, node, getPlus, node, getCut, copySelf, if, plusChar, touchOutside, final, Characterization, S, minusChar, new, Characterization, S, node, getMinus, plusChar, outsideTouching, if, minusChar, touchInside, =, plusOutside, minusChar, insideTouching, =, splitters, new, NodesSet, S, splitters, addAll, minusChar, getInsideSplitters, splitters, addAll, plusChar, getOutsideSplitters, if, plusChar, touchInside, final, Characterization, S, minusChar, new, Characterization, S, node, getMinus, plusChar, insideTouching, if, minusChar, touchOutside, =, plusInside, minusChar, outsideTouching, if, ==, splitters, null, =, splitters, new, NodesSet, S, splitters, addAll, minusChar, getOutsideSplitters, splitters, addAll, plusChar, getInsideSplitters, if, !=, splitters, null, for, BSPTree, S, up, node, getParent, !=, up, null, =, up, up, getParent, splitters, add, up, node, setAttribute, new, BoundaryAttribute, S, plusOutside, plusInside, splitters]
org.apache.commons.math4.geometry.partitioning:BoundaryProjection:getOriginal:null#[return, original]
org.apache.commons.math4.geometry.partitioning:BoundaryProjection:getProjected:null#[return, projected]
org.apache.commons.math4.geometry.partitioning:BoundaryProjection:getOffset:null#[return, offset]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:visitOrder:BSPTree<S>#[if, <=, node, getCut, getHyperplane, getOffset, original, 0, return, Order.MINUS_SUB_PLUS, return, Order.PLUS_SUB_MINUS]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:visitInternalNode:BSPTree<S>#[final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, final, double, signedOffset, hyperplane, getOffset, original, if, <, FastMath, abs, signedOffset, offset, final, Point, S, regular, hyperplane, project, original, final, List, Region, T, boundaryParts, boundaryRegions, node, boolean, regularFound, false, for, final, Region, T, part, boundaryParts, if, &&, !, regularFound, belongsToPart, regular, hyperplane, part, =, projected, regular, =, offset, FastMath, abs, signedOffset, =, regularFound, true, if, !, regularFound, for, final, Region, T, part, boundaryParts, final, Point, S, spI, singularProjection, regular, hyperplane, part, if, !=, spI, null, final, double, distance, original, distance, spI, if, <, distance, offset, =, projected, spI, =, offset, distance]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:visitLeafNode:BSPTree<S>#[if, ==, leaf, null, =, leaf, node]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:getProjection:null#[=, offset, FastMath, copySign, offset, Boolean, leaf, getAttribute, -, 1, +, 1, return, new, BoundaryProjection, S, original, projected, offset]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:boundaryRegions:BSPTree<S>#[final, List, Region, T, regions, new, ArrayList, Region, T, 2, SuppressWarnings, "unchecked", final, BoundaryAttribute, S, ba, BoundaryAttribute, S, node, getAttribute, addRegion, ba, getPlusInside, regions, addRegion, ba, getPlusOutside, regions, return, regions]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:addRegion:SubHyperplane<S>+List<Region<T>>#[if, !=, sub, null, SuppressWarnings, "unchecked", final, Region, T, region, AbstractSubHyperplane, S, T, sub, getRemainingRegion, if, !=, region, null, list, add, region]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:belongsToPart:Point<S>+Hyperplane<S>+Region<T>#[SuppressWarnings, "unchecked", final, Embedding, S, T, embedding, Embedding, S, T, hyperplane, return, !=, part, checkPoint, embedding, toSubSpace, point, Location.OUTSIDE]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:singularProjection:Point<S>+Hyperplane<S>+Region<T>#[SuppressWarnings, "unchecked", final, Embedding, S, T, embedding, Embedding, S, T, hyperplane, final, BoundaryProjection, T, bp, part, projectToBoundary, embedding, toSubSpace, point, return, ==, bp, getProjected, null, null, embedding, toSpace, bp, getProjected]
org.apache.commons.math4.geometry.partitioning:BoundarySizeVisitor:visitOrder:BSPTree<S>#[return, Order.MINUS_SUB_PLUS]
org.apache.commons.math4.geometry.partitioning:BoundarySizeVisitor:visitInternalNode:BSPTree<S>#[SuppressWarnings, "unchecked", final, BoundaryAttribute, S, attribute, BoundaryAttribute, S, node, getAttribute, if, !=, attribute, getPlusOutside, null, +=, boundarySize, attribute, getPlusOutside, getSize, if, !=, attribute, getPlusInside, null, +=, boundarySize, attribute, getPlusInside, getSize]
org.apache.commons.math4.geometry.partitioning:BoundarySizeVisitor:getSize:null#[return, boundarySize]
org.apache.commons.math4.geometry.partitioning:BSPTree:insertCut:Hyperplane<S>#[if, !=, cut, null, =, plus.parent, null, =, minus.parent, null, final, SubHyperplane, S, chopped, fitToCell, hyperplane, wholeHyperplane, if, ||, ==, chopped, null, chopped, isEmpty, =, cut, null, =, plus, null, =, minus, null, return, false, =, cut, chopped, =, plus, new, BSPTree, S, =, plus.parent, this, =, minus, new, BSPTree, S, =, minus.parent, this, return, true]
org.apache.commons.math4.geometry.partitioning:BSPTree:copySelf:null#[if, ==, cut, null, return, new, BSPTree, S, attribute, return, new, BSPTree, S, cut, copySelf, plus, copySelf, minus, copySelf, attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:getCut:null#[return, cut]
org.apache.commons.math4.geometry.partitioning:BSPTree:getPlus:null#[return, plus]
org.apache.commons.math4.geometry.partitioning:BSPTree:getMinus:null#[return, minus]
org.apache.commons.math4.geometry.partitioning:BSPTree:getParent:null#[return, parent]
org.apache.commons.math4.geometry.partitioning:BSPTree:setAttribute:Object#[=, this, attribute, attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:getAttribute:null#[return, attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:visit:BSPTreeVisitor<S>#[if, ==, cut, null, visitor, visitLeafNode, this, switch, visitor, visitOrder, this, case, PLUS_MINUS_SUB, plus, visit, visitor, minus, visit, visitor, visitor, visitInternalNode, this, break, case, PLUS_SUB_MINUS, plus, visit, visitor, visitor, visitInternalNode, this, minus, visit, visitor, break, case, MINUS_PLUS_SUB, minus, visit, visitor, plus, visit, visitor, visitor, visitInternalNode, this, break, case, MINUS_SUB_PLUS, minus, visit, visitor, visitor, visitInternalNode, this, plus, visit, visitor, break, case, SUB_PLUS_MINUS, visitor, visitInternalNode, this, plus, visit, visitor, minus, visit, visitor, break, case, SUB_MINUS_PLUS, visitor, visitInternalNode, this, minus, visit, visitor, plus, visit, visitor, break, default, throw, new, MathInternalError]
org.apache.commons.math4.geometry.partitioning:BSPTree:fitToCell:SubHyperplane<S>#[SubHyperplane, S, s, sub, for, BSPTree, S, tree, this, &&, !=, tree.parent, null, !=, s, null, =, tree, tree.parent, if, ==, tree, tree.parent.plus, =, s, s, split, tree.parent.cut, getHyperplane, getPlus, =, s, s, split, tree.parent.cut, getHyperplane, getMinus, return, s]
org.apache.commons.math4.geometry.partitioning:BSPTree:getCell:Point<S>+double#[if, ==, cut, null, return, this, final, double, offset, cut, getHyperplane, getOffset, point, if, <, FastMath, abs, offset, tolerance, return, this, if, <=, offset, 0, return, minus, getCell, point, tolerance, return, plus, getCell, point, tolerance]
org.apache.commons.math4.geometry.partitioning:BSPTree:getCloseCuts:Point<S>+double#[final, List, BSPTree, S, close, new, ArrayList, BSPTree, S, recurseCloseCuts, point, maxOffset, close, return, close]
org.apache.commons.math4.geometry.partitioning:BSPTree:recurseCloseCuts:Point<S>+double+List<BSPTree<S>>#[if, !=, cut, null, final, double, offset, cut, getHyperplane, getOffset, point, if, <, offset, -, maxOffset, minus, recurseCloseCuts, point, maxOffset, close, if, >, offset, maxOffset, plus, recurseCloseCuts, point, maxOffset, close, close, add, this, minus, recurseCloseCuts, point, maxOffset, close, plus, recurseCloseCuts, point, maxOffset, close]
org.apache.commons.math4.geometry.partitioning:BSPTree:condense:null#[if, &&, !=, cut, null, ==, plus.cut, null, ==, minus.cut, null, ||, &&, ==, plus.attribute, null, ==, minus.attribute, null, &&, !=, plus.attribute, null, plus.attribute, equals, minus.attribute, =, attribute, ==, plus.attribute, null, minus.attribute, plus.attribute, =, cut, null, =, plus, null, =, minus, null]
org.apache.commons.math4.geometry.partitioning:BSPTree:merge:BSPTree<S>+LeafMerger<S>#[return, merge, tree, leafMerger, null, false]
org.apache.commons.math4.geometry.partitioning:BSPTree:merge:BSPTree<S>+LeafMerger<S>+BSPTree<S>+boolean#[if, ==, cut, null, return, leafMerger, merge, this, tree, parentTree, isPlusChild, true, if, ==, tree.cut, null, return, leafMerger, merge, tree, this, parentTree, isPlusChild, false, final, BSPTree, S, merged, tree, split, cut, if, !=, parentTree, null, =, merged.parent, parentTree, if, isPlusChild, =, parentTree.plus, merged, =, parentTree.minus, merged, plus, merge, merged.plus, leafMerger, merged, true, minus, merge, merged.minus, leafMerger, merged, false, merged, condense, if, !=, merged.cut, null, =, merged.cut, merged, fitToCell, merged.cut, getHyperplane, wholeHyperplane, return, merged]
org.apache.commons.math4.geometry.partitioning:BSPTree:split:SubHyperplane<S>#[if, ==, cut, null, return, new, BSPTree, S, sub, copySelf, new, BSPTree, S, attribute, null, final, Hyperplane, S, cHyperplane, cut, getHyperplane, final, Hyperplane, S, sHyperplane, sub, getHyperplane, final, SubHyperplane.SplitSubHyperplane, S, subParts, sub, split, cHyperplane, switch, subParts, getSide, case, PLUS, final, BSPTree, S, split, plus, split, sub, if, ==, cut, split, sHyperplane, getSide, Side.PLUS, =, split.plus, new, BSPTree, S, cut, copySelf, split.plus, minus, copySelf, attribute, split.plus, condense, =, split.plus.parent, split, =, split.minus, new, BSPTree, S, cut, copySelf, split.minus, minus, copySelf, attribute, split.minus, condense, =, split.minus.parent, split, return, split, case, MINUS, final, BSPTree, S, split, minus, split, sub, if, ==, cut, split, sHyperplane, getSide, Side.PLUS, =, split.plus, new, BSPTree, S, cut, copySelf, plus, copySelf, split.plus, attribute, split.plus, condense, =, split.plus.parent, split, =, split.minus, new, BSPTree, S, cut, copySelf, plus, copySelf, split.minus, attribute, split.minus, condense, =, split.minus.parent, split, return, split, case, BOTH, final, SubHyperplane.SplitSubHyperplane, S, cutParts, cut, split, sHyperplane, final, BSPTree, S, split, new, BSPTree, S, sub, plus, split, subParts, getPlus, minus, split, subParts, getMinus, null, =, split.plus.cut, cutParts, getPlus, =, split.minus.cut, cutParts, getMinus, final, BSPTree, S, tmp, split.plus.minus, =, split.plus.minus, split.minus.plus, =, split.plus.minus.parent, split.plus, =, split.minus.plus, tmp, =, split.minus.plus.parent, split.minus, split.plus, condense, split.minus, condense, return, split, default, return, cHyperplane, sameOrientationAs, sHyperplane, new, BSPTree, S, sub, plus, copySelf, minus, copySelf, attribute, new, BSPTree, S, sub, minus, copySelf, plus, copySelf, attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:insertInTree:BSPTree<S>+boolean+VanishingCutHandler<S>#[=, parent, parentTree, if, !=, parentTree, null, if, isPlusChild, =, parentTree.plus, this, =, parentTree.minus, this, if, !=, cut, null, for, BSPTree, S, tree, this, !=, tree.parent, null, =, tree, tree.parent, final, Hyperplane, S, hyperplane, tree.parent.cut, getHyperplane, if, ==, tree, tree.parent.plus, =, cut, cut, split, hyperplane, getPlus, plus, chopOffMinus, hyperplane, vanishingHandler, minus, chopOffMinus, hyperplane, vanishingHandler, =, cut, cut, split, hyperplane, getMinus, plus, chopOffPlus, hyperplane, vanishingHandler, minus, chopOffPlus, hyperplane, vanishingHandler, if, ==, cut, null, final, BSPTree, S, fixed, vanishingHandler, fixNode, this, =, cut, fixed.cut, =, plus, fixed.plus, =, minus, fixed.minus, =, attribute, fixed.attribute, if, ==, cut, null, break, condense]
org.apache.commons.math4.geometry.partitioning:BSPTree:pruneAroundConvexCell:Object+Object+Object#[BSPTree, S, tree, new, BSPTree, S, cellAttribute, for, BSPTree, S, current, this, !=, current.parent, null, =, current, current.parent, final, SubHyperplane, S, parentCut, current.parent.cut, copySelf, final, BSPTree, S, sibling, new, BSPTree, S, otherLeafsAttributes, if, ==, current, current.parent.plus, =, tree, new, BSPTree, S, parentCut, tree, sibling, internalAttributes, =, tree, new, BSPTree, S, parentCut, sibling, tree, internalAttributes, return, tree]
org.apache.commons.math4.geometry.partitioning:BSPTree:chopOffMinus:Hyperplane<S>+VanishingCutHandler<S>#[if, !=, cut, null, =, cut, cut, split, hyperplane, getPlus, plus, chopOffMinus, hyperplane, vanishingHandler, minus, chopOffMinus, hyperplane, vanishingHandler, if, ==, cut, null, final, BSPTree, S, fixed, vanishingHandler, fixNode, this, =, cut, fixed.cut, =, plus, fixed.plus, =, minus, fixed.minus, =, attribute, fixed.attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:chopOffPlus:Hyperplane<S>+VanishingCutHandler<S>#[if, !=, cut, null, =, cut, cut, split, hyperplane, getMinus, plus, chopOffPlus, hyperplane, vanishingHandler, minus, chopOffPlus, hyperplane, vanishingHandler, if, ==, cut, null, final, BSPTree, S, fixed, vanishingHandler, fixNode, this, =, cut, fixed.cut, =, plus, fixed.plus, =, minus, fixed.minus, =, attribute, fixed.attribute]
org.apache.commons.math4.geometry.partitioning:Characterization:characterize:BSPTree<S>+SubHyperplane<S>+List<BSPTree<S>>#[if, ==, node, getCut, null, final, boolean, inside, Boolean, node, getAttribute, if, inside, addInsideTouching, sub, splitters, addOutsideTouching, sub, splitters, final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, final, SubHyperplane.SplitSubHyperplane, S, split, sub, split, hyperplane, switch, split, getSide, case, PLUS, characterize, node, getPlus, sub, splitters, break, case, MINUS, characterize, node, getMinus, sub, splitters, break, case, BOTH, splitters, add, node, characterize, node, getPlus, split, getPlus, splitters, characterize, node, getMinus, split, getMinus, splitters, splitters, remove, -, splitters, size, 1, break, default, throw, new, MathInternalError]
org.apache.commons.math4.geometry.partitioning:Characterization:addOutsideTouching:SubHyperplane<S>+List<BSPTree<S>>#[if, ==, outsideTouching, null, =, outsideTouching, sub, =, outsideTouching, outsideTouching, reunite, sub, outsideSplitters, addAll, splitters]
org.apache.commons.math4.geometry.partitioning:Characterization:addInsideTouching:SubHyperplane<S>+List<BSPTree<S>>#[if, ==, insideTouching, null, =, insideTouching, sub, =, insideTouching, insideTouching, reunite, sub, insideSplitters, addAll, splitters]
org.apache.commons.math4.geometry.partitioning:Characterization:touchOutside:null#[return, &&, !=, outsideTouching, null, !, outsideTouching, isEmpty]
org.apache.commons.math4.geometry.partitioning:Characterization:outsideTouching:null#[return, outsideTouching]
org.apache.commons.math4.geometry.partitioning:Characterization:getOutsideSplitters:null#[return, outsideSplitters]
org.apache.commons.math4.geometry.partitioning:Characterization:touchInside:null#[return, &&, !=, insideTouching, null, !, insideTouching, isEmpty]
org.apache.commons.math4.geometry.partitioning:Characterization:insideTouching:null#[return, insideTouching]
org.apache.commons.math4.geometry.partitioning:Characterization:getInsideSplitters:null#[return, insideSplitters]
org.apache.commons.math4.geometry.partitioning:InsideFinder:recurseSides:BSPTree<S>+SubHyperplane<S>#[if, ==, node, getCut, null, if, Boolean, node, getAttribute, =, plusFound, true, =, minusFound, true, return, final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, final, SubHyperplane.SplitSubHyperplane, S, split, sub, split, hyperplane, switch, split, getSide, case, PLUS, if, ==, node, getCut, split, sub, getHyperplane, getSide, Side.PLUS, if, !, region, isEmpty, node, getMinus, =, plusFound, true, if, !, region, isEmpty, node, getMinus, =, minusFound, true, if, !, &&, plusFound, minusFound, recurseSides, node, getPlus, sub, break, case, MINUS, if, ==, node, getCut, split, sub, getHyperplane, getSide, Side.PLUS, if, !, region, isEmpty, node, getPlus, =, plusFound, true, if, !, region, isEmpty, node, getPlus, =, minusFound, true, if, !, &&, plusFound, minusFound, recurseSides, node, getMinus, sub, break, case, BOTH, recurseSides, node, getPlus, split, getPlus, if, !, &&, plusFound, minusFound, recurseSides, node, getMinus, split, getMinus, break, default, if, node, getCut, getHyperplane, sameOrientationAs, sub, getHyperplane, if, ||, !=, node, getPlus, getCut, null, Boolean, node, getPlus, getAttribute, =, plusFound, true, if, ||, !=, node, getMinus, getCut, null, Boolean, node, getMinus, getAttribute, =, minusFound, true, if, ||, !=, node, getPlus, getCut, null, Boolean, node, getPlus, getAttribute, =, minusFound, true, if, ||, !=, node, getMinus, getCut, null, Boolean, node, getMinus, getAttribute, =, plusFound, true]
org.apache.commons.math4.geometry.partitioning:InsideFinder:plusFound:null#[return, plusFound]
org.apache.commons.math4.geometry.partitioning:InsideFinder:minusFound:null#[return, minusFound]
org.apache.commons.math4.geometry.partitioning:NodesSet:add:BSPTree<S>#[for, final, BSPTree, S, existing, list, if, ==, node, existing, return, list, add, node]
org.apache.commons.math4.geometry.partitioning:NodesSet:addAll:Iterable<BSPTree<S>>#[for, final, BSPTree, S, node, iterator, add, node]
org.apache.commons.math4.geometry.partitioning:NodesSet:iterator:null#[return, list, iterator]
org.apache.commons.math4.geometry.partitioning:RegionFactory:buildConvex:Hyperplane<S>...#[if, ||, ==, hyperplanes, null, ==, hyperplanes.length, 0, return, null, final, Region, S, region, hyperplanes, 0, wholeSpace, BSPTree, S, node, region, getTree, false, node, setAttribute, Boolean.TRUE, for, final, Hyperplane, S, hyperplane, hyperplanes, if, node, insertCut, hyperplane, node, setAttribute, null, node, getPlus, setAttribute, Boolean.FALSE, =, node, node, getMinus, node, setAttribute, Boolean.TRUE, SubHyperplane, S, s, hyperplane, wholeHyperplane, for, BSPTree, S, tree, node, &&, !=, tree, getParent, null, !=, s, null, =, tree, tree, getParent, final, Hyperplane, S, other, tree, getParent, getCut, getHyperplane, final, SplitSubHyperplane, S, split, s, split, other, switch, split, getSide, case, HYPER, if, !, hyperplane, sameOrientationAs, other, return, getComplement, hyperplanes, 0, wholeSpace, break, case, PLUS, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_CONVEX_HYPERPLANES, default, =, s, split, getMinus, return, region]
org.apache.commons.math4.geometry.partitioning:RegionFactory:union:Region<S>+Region<S>#[final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, UnionMerger, tree, visit, nodeCleaner, return, region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:intersection:Region<S>+Region<S>#[final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, IntersectionMerger, tree, visit, nodeCleaner, return, region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:xor:Region<S>+Region<S>#[final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, XorMerger, tree, visit, nodeCleaner, return, region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:difference:Region<S>+Region<S>#[final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, DifferenceMerger, region1, region2, tree, visit, nodeCleaner, return, region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:getComplement:Region<S>#[return, region, buildNew, recurseComplement, region, getTree, false]
org.apache.commons.math4.geometry.partitioning:RegionFactory:recurseComplement:BSPTree<S>#[final, Map, BSPTree, S, BSPTree, S, map, new, HashMap, BSPTree, S, BSPTree, S, final, BSPTree, S, transformedTree, recurseComplement, node, map, for, final, Map.Entry, BSPTree, S, BSPTree, S, entry, map, entrySet, if, !=, entry, getKey, getCut, null, SuppressWarnings, "unchecked", BoundaryAttribute, S, original, BoundaryAttribute, S, entry, getKey, getAttribute, if, !=, original, null, SuppressWarnings, "unchecked", BoundaryAttribute, S, transformed, BoundaryAttribute, S, entry, getValue, getAttribute, for, final, BSPTree, S, splitter, original, getSplitters, transformed, getSplitters, add, map, get, splitter, return, transformedTree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:recurseComplement:BSPTree<S>+Map<BSPTree<S>,BSPTree<S>>#[final, BSPTree, S, transformedNode, if, ==, node, getCut, null, =, transformedNode, new, BSPTree, S, Boolean, node, getAttribute, Boolean.FALSE, Boolean.TRUE, SuppressWarnings, "unchecked", BoundaryAttribute, S, attribute, BoundaryAttribute, S, node, getAttribute, if, !=, attribute, null, final, SubHyperplane, S, plusOutside, ==, attribute, getPlusInside, null, null, attribute, getPlusInside, copySelf, final, SubHyperplane, S, plusInside, ==, attribute, getPlusOutside, null, null, attribute, getPlusOutside, copySelf, =, attribute, new, BoundaryAttribute, S, plusOutside, plusInside, new, NodesSet, S, =, transformedNode, new, BSPTree, S, node, getCut, copySelf, recurseComplement, node, getPlus, map, recurseComplement, node, getMinus, map, attribute, map, put, node, transformedNode, return, transformedNode]
org.apache.commons.math4.geometry.spherical.oned:Arc:getInf:null#[return, lower]
org.apache.commons.math4.geometry.spherical.oned:Arc:getSup:null#[return, upper]
org.apache.commons.math4.geometry.spherical.oned:Arc:getSize:null#[return, -, upper, lower]
org.apache.commons.math4.geometry.spherical.oned:Arc:getBarycenter:null#[return, middle]
org.apache.commons.math4.geometry.spherical.oned:Arc:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.spherical.oned:Arc:checkPoint:double#[final, double, normalizedPoint, MathUtils, normalizeAngle, point, middle, if, ||, <, normalizedPoint, -, lower, tolerance, >, normalizedPoint, +, upper, tolerance, return, Location.OUTSIDE, if, &&, >, normalizedPoint, +, lower, tolerance, <, normalizedPoint, -, upper, tolerance, return, Location.INSIDE, return, >=, getSize, -, MathUtils.TWO_PI, tolerance, Location.INSIDE, Location.BOUNDARY]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:buildTree:double+double+double#[if, ||, Precision, equals, lower, upper, 0, >=, -, upper, lower, MathUtils.TWO_PI, return, new, BSPTree, Sphere1D, Boolean.TRUE, if, >, lower, upper, throw, new, NumberIsTooLargeException, LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper, true, final, double, normalizedLower, MathUtils, normalizeAngle, lower, FastMath.PI, final, double, normalizedUpper, +, normalizedLower, -, upper, lower, final, SubHyperplane, Sphere1D, lowerCut, new, LimitAngle, new, S1Point, normalizedLower, false, tolerance, wholeHyperplane, if, <=, normalizedUpper, MathUtils.TWO_PI, final, SubHyperplane, Sphere1D, upperCut, new, LimitAngle, new, S1Point, normalizedUpper, true, tolerance, wholeHyperplane, return, new, BSPTree, Sphere1D, lowerCut, new, BSPTree, Sphere1D, Boolean.FALSE, new, BSPTree, Sphere1D, upperCut, new, BSPTree, Sphere1D, Boolean.FALSE, new, BSPTree, Sphere1D, Boolean.TRUE, null, null, final, SubHyperplane, Sphere1D, upperCut, new, LimitAngle, new, S1Point, -, normalizedUpper, MathUtils.TWO_PI, true, tolerance, wholeHyperplane, return, new, BSPTree, Sphere1D, lowerCut, new, BSPTree, Sphere1D, upperCut, new, BSPTree, Sphere1D, Boolean.FALSE, new, BSPTree, Sphere1D, Boolean.TRUE, null, new, BSPTree, Sphere1D, Boolean.TRUE, null]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:check2PiConsistency:null#[BSPTree, Sphere1D, root, getTree, false, if, ==, root, getCut, null, return, final, Boolean, stateBefore, Boolean, getFirstLeaf, root, getAttribute, final, Boolean, stateAfter, Boolean, getLastLeaf, root, getAttribute, if, ^, stateBefore, stateAfter, throw, new, InconsistentStateAt2PiWrapping]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getFirstLeaf:BSPTree<Sphere1D>#[if, ==, root, getCut, null, return, root, BSPTree, Sphere1D, smallest, null, for, BSPTree, Sphere1D, n, root, !=, n, null, =, n, previousInternalNode, n, =, smallest, n, return, leafBefore, smallest]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getLastLeaf:BSPTree<Sphere1D>#[if, ==, root, getCut, null, return, root, BSPTree, Sphere1D, largest, null, for, BSPTree, Sphere1D, n, root, !=, n, null, =, n, nextInternalNode, n, =, largest, n, return, leafAfter, largest]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getFirstArcStart:null#[BSPTree, Sphere1D, node, getTree, false, if, ==, node, getCut, null, return, null, =, node, getFirstLeaf, node, getParent, while, &&, !=, node, null, !, isArcStart, node, =, node, nextInternalNode, node, return, node]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isArcStart:BSPTree<Sphere1D>#[if, Boolean, leafBefore, node, getAttribute, return, false, if, !, Boolean, leafAfter, node, getAttribute, return, false, return, true]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isArcEnd:BSPTree<Sphere1D>#[if, !, Boolean, leafBefore, node, getAttribute, return, false, if, Boolean, leafAfter, node, getAttribute, return, false, return, true]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:nextInternalNode:BSPTree<Sphere1D>#[if, !=, childAfter, node, getCut, null, return, leafAfter, node, getParent, while, isAfterParent, node, =, node, node, getParent, return, node, getParent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:previousInternalNode:BSPTree<Sphere1D>#[if, !=, childBefore, node, getCut, null, return, leafBefore, node, getParent, while, isBeforeParent, node, =, node, node, getParent, return, node, getParent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:leafBefore:BSPTree<Sphere1D>#[=, node, childBefore, node, while, !=, node, getCut, null, =, node, childAfter, node, return, node]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:leafAfter:BSPTree<Sphere1D>#[=, node, childAfter, node, while, !=, node, getCut, null, =, node, childBefore, node, return, node]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isBeforeParent:BSPTree<Sphere1D>#[final, BSPTree, Sphere1D, parent, node, getParent, if, ==, parent, null, return, false, return, ==, node, childBefore, parent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isAfterParent:BSPTree<Sphere1D>#[final, BSPTree, Sphere1D, parent, node, getParent, if, ==, parent, null, return, false, return, ==, node, childAfter, parent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:childBefore:BSPTree<Sphere1D>#[if, isDirect, node, return, node, getMinus, return, node, getPlus]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:childAfter:BSPTree<Sphere1D>#[if, isDirect, node, return, node, getPlus, return, node, getMinus]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isDirect:BSPTree<Sphere1D>#[return, LimitAngle, node, getCut, getHyperplane, isDirect]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getAngle:BSPTree<Sphere1D>#[return, LimitAngle, node, getCut, getHyperplane, getLocation, getAlpha]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:buildNew:BSPTree<Sphere1D>#[return, new, ArcsSet, tree, getTolerance]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:computeGeometricalProperties:null#[if, ==, getTree, false, getCut, null, setBarycenter, S1Point.NaN, setSize, Boolean, getTree, false, getAttribute, MathUtils.TWO_PI, 0, double, size, 0.0, double, sum, 0.0, for, final, double, a, this, final, double, length, -, a, 1, a, 0, +=, size, length, +=, sum, *, length, +, a, 0, a, 1, setSize, size, if, Precision, equals, size, MathUtils.TWO_PI, 0, setBarycenter, S1Point.NaN, if, >=, size, Precision.SAFE_MIN, setBarycenter, new, S1Point, /, sum, *, 2, size, final, LimitAngle, limit, LimitAngle, getTree, false, getCut, getHyperplane, setBarycenter, limit, getLocation]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:projectToBoundary:Point<Sphere1D>#[final, double, alpha, S1Point, point, getAlpha, boolean, wrapFirst, false, double, first, Double.NaN, double, previous, Double.NaN, for, final, double, a, this, if, Double, isNaN, first, =, first, a, 0, if, !, wrapFirst, if, <, alpha, a, 0, if, Double, isNaN, previous, =, wrapFirst, true, final, double, previousOffset, -, alpha, previous, final, double, currentOffset, -, a, 0, alpha, if, <, previousOffset, currentOffset, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, previous, previousOffset, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, a, 0, currentOffset, if, <=, alpha, a, 1, final, double, offset0, -, a, 0, alpha, final, double, offset1, -, alpha, a, 1, if, <, offset0, offset1, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, a, 1, offset1, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, a, 0, offset0, =, previous, a, 1, if, Double, isNaN, previous, return, new, BoundaryProjection, Sphere1D, point, null, MathUtils.TWO_PI, if, wrapFirst, final, double, previousOffset, -, alpha, -, previous, MathUtils.TWO_PI, final, double, currentOffset, -, first, alpha, if, <, previousOffset, currentOffset, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, previous, previousOffset, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, first, currentOffset, final, double, previousOffset, -, alpha, previous, final, double, currentOffset, -, +, first, MathUtils.TWO_PI, alpha, if, <, previousOffset, currentOffset, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, previous, previousOffset, return, new, BoundaryProjection, Sphere1D, point, new, S1Point, first, currentOffset]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:asList:null#[final, List, Arc, list, new, ArrayList, Arc, for, final, double, a, this, list, add, new, Arc, a, 0, a, 1, getTolerance, return, list]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:iterator:null#[return, new, SubArcsIterator]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:side:Arc#[return, split, arc, getSide]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:split:Arc#[final, List, Double, minus, new, ArrayList, Double, final, List, Double, plus, new, ArrayList, Double, final, double, reference, +, FastMath.PI, arc, getInf, final, double, arcLength, -, arc, getSup, arc, getInf, for, final, double, a, this, final, double, syncedStart, -, MathUtils, normalizeAngle, a, 0, reference, arc, getInf, final, double, arcOffset, -, a, 0, syncedStart, final, double, syncedEnd, -, a, 1, arcOffset, if, <, syncedStart, arcLength, minus, add, a, 0, if, >, syncedEnd, arcLength, final, double, minusToPlus, +, arcLength, arcOffset, minus, add, minusToPlus, plus, add, minusToPlus, if, >, syncedEnd, MathUtils.TWO_PI, final, double, plusToMinus, +, MathUtils.TWO_PI, arcOffset, plus, add, plusToMinus, minus, add, plusToMinus, minus, add, a, 1, plus, add, a, 1, minus, add, a, 1, plus, add, a, 0, if, >, syncedEnd, MathUtils.TWO_PI, final, double, plusToMinus, +, MathUtils.TWO_PI, arcOffset, plus, add, plusToMinus, minus, add, plusToMinus, if, >, syncedEnd, +, MathUtils.TWO_PI, arcLength, final, double, minusToPlus, +, MathUtils.TWO_PI, arcLength, arcOffset, minus, add, minusToPlus, plus, add, minusToPlus, plus, add, a, 1, minus, add, a, 1, plus, add, a, 1, return, new, Split, createSplitPart, plus, createSplitPart, minus]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:addArcLimit:BSPTree<Sphere1D>+double+boolean#[final, LimitAngle, limit, new, LimitAngle, new, S1Point, alpha, !, isStart, getTolerance, final, BSPTree, Sphere1D, node, tree, getCell, limit, getLocation, getTolerance, if, !=, node, getCut, null, throw, new, MathInternalError, node, insertCut, limit, node, setAttribute, null, node, getPlus, setAttribute, Boolean.FALSE, node, getMinus, setAttribute, Boolean.TRUE]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:createSplitPart:List<Double>#[if, limits, isEmpty, return, null, for, int, i, 0, <, i, limits, size, ++, i, final, int, j, %, +, i, 1, limits, size, final, double, lA, limits, get, i, final, double, lB, MathUtils, normalizeAngle, limits, get, j, lA, if, <=, FastMath, abs, -, lB, lA, getTolerance, if, >, j, 0, limits, remove, j, limits, remove, i, =, i, -, i, 1, final, double, lEnd, limits, remove, -, limits, size, 1, final, double, lStart, limits, remove, 0, if, limits, isEmpty, if, >, -, lEnd, lStart, FastMath.PI, return, new, ArcsSet, new, BSPTree, Sphere1D, Boolean.TRUE, getTolerance, return, null, limits, add, +, limits, remove, 0, MathUtils.TWO_PI, BSPTree, Sphere1D, tree, new, BSPTree, Sphere1D, Boolean.FALSE, for, int, i, 0, <, i, -, limits, size, 1, +=, i, 2, addArcLimit, tree, limits, get, i, true, addArcLimit, tree, limits, get, +, i, 1, false, if, ==, tree, getCut, null, return, null, return, new, ArcsSet, tree, getTolerance]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:copySelf:null#[return, this]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getOffset:Point<Sphere1D>#[final, double, delta, -, S1Point, point, getAlpha, location, getAlpha, return, direct, delta, -, delta]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:isDirect:null#[return, direct]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getReverse:null#[return, new, LimitAngle, location, !, direct, tolerance]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:wholeHyperplane:null#[return, new, SubLimitAngle, this, null]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:wholeSpace:null#[return, new, ArcsSet, tolerance]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:sameOrientationAs:Hyperplane<Sphere1D>#[return, !, ^, direct, LimitAngle, other, direct]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getLocation:null#[return, location]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:project:Point<Sphere1D>#[return, location]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.spherical.oned:S1Point:getAlpha:null#[return, alpha]
org.apache.commons.math4.geometry.spherical.oned:S1Point:getVector:null#[return, vector]
org.apache.commons.math4.geometry.spherical.oned:S1Point:getSpace:null#[return, Sphere1D, getInstance]
org.apache.commons.math4.geometry.spherical.oned:S1Point:isNaN:null#[return, Double, isNaN, alpha]
org.apache.commons.math4.geometry.spherical.oned:S1Point:distance:Point<Sphere1D>#[return, distance, this, S1Point, point]
org.apache.commons.math4.geometry.spherical.oned:S1Point:distance:S1Point+S1Point#[return, Vector2D, angle, p1.vector, p2.vector]
org.apache.commons.math4.geometry.spherical.oned:S1Point:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, S1Point, final, S1Point, rhs, S1Point, other, if, rhs, isNaN, return, this, isNaN, return, ==, alpha, rhs.alpha, return, false]
org.apache.commons.math4.geometry.spherical.oned:S1Point:hashCode:null#[if, isNaN, return, 542, return, *, 1759, MathUtils, hash, alpha]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:getDimension:null#[return, 1]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:getSubSpace:null#[throw, new, NoSubSpaceException]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:getSize:null#[return, 0]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:isEmpty:null#[return, false]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:buildNew:Hyperplane<Sphere1D>+Region<Sphere1D>#[return, new, SubLimitAngle, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:split:Hyperplane<Sphere1D>#[final, double, global, hyperplane, getOffset, LimitAngle, getHyperplane, getLocation, return, <, global, -, 1.0e-10, new, SplitSubHyperplane, Sphere1D, null, this, new, SplitSubHyperplane, Sphere1D, this, null]
org.apache.commons.math4.geometry.spherical.twod:Circle:copySelf:null#[return, new, Circle, this]
org.apache.commons.math4.geometry.spherical.twod:Circle:reset:Vector3D#[=, this, pole, newPole, normalize, =, this, x, newPole, orthogonal, =, this, y, Vector3D, crossProduct, newPole, x, normalize]
org.apache.commons.math4.geometry.spherical.twod:Circle:revertSelf:null#[=, y, y, negate, =, pole, pole, negate]
org.apache.commons.math4.geometry.spherical.twod:Circle:getReverse:null#[return, new, Circle, pole, negate, x, y, negate, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:project:Point<Sphere2D>#[return, toSpace, toSubSpace, point]
org.apache.commons.math4.geometry.spherical.twod:Circle:getTolerance:null#[return, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:toSubSpace:Point<Sphere2D>#[return, new, S1Point, getPhase, S2Point, point, getVector]
org.apache.commons.math4.geometry.spherical.twod:Circle:getPhase:Vector3D#[return, +, FastMath.PI, FastMath, atan2, -, direction, dotProduct, y, -, direction, dotProduct, x]
org.apache.commons.math4.geometry.spherical.twod:Circle:toSpace:Point<Sphere1D>#[return, new, S2Point, getPointAt, S1Point, point, getAlpha]
org.apache.commons.math4.geometry.spherical.twod:Circle:getPointAt:double#[return, new, Vector3D, FastMath, cos, alpha, x, FastMath, sin, alpha, y]
org.apache.commons.math4.geometry.spherical.twod:Circle:getXAxis:null#[return, x]
org.apache.commons.math4.geometry.spherical.twod:Circle:getYAxis:null#[return, y]
org.apache.commons.math4.geometry.spherical.twod:Circle:getPole:null#[return, pole]
org.apache.commons.math4.geometry.spherical.twod:Circle:getInsideArc:Circle#[final, double, alpha, getPhase, other.pole, final, double, halfPi, *, 0.5, FastMath.PI, return, new, Arc, -, alpha, halfPi, +, alpha, halfPi, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:wholeHyperplane:null#[return, new, SubCircle, this, new, ArcsSet, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:wholeSpace:null#[return, new, SphericalPolygonsSet, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:getOffset:Point<Sphere2D>#[return, getOffset, S2Point, point, getVector]
org.apache.commons.math4.geometry.spherical.twod:Circle:getOffset:Vector3D#[return, -, Vector3D, angle, pole, direction, *, 0.5, FastMath.PI]
org.apache.commons.math4.geometry.spherical.twod:Circle:sameOrientationAs:Hyperplane<Sphere2D>#[final, Circle, otherC, Circle, other, return, >=, Vector3D, dotProduct, pole, otherC.pole, 0.0]
org.apache.commons.math4.geometry.spherical.twod:Circle:getTransform:Rotation#[return, new, CircleTransform, rotation]
org.apache.commons.math4.geometry.spherical.twod:Edge:getStart:null#[return, start]
org.apache.commons.math4.geometry.spherical.twod:Edge:getEnd:null#[return, end]
org.apache.commons.math4.geometry.spherical.twod:Edge:getLength:null#[return, length]
org.apache.commons.math4.geometry.spherical.twod:Edge:getCircle:null#[return, circle]
org.apache.commons.math4.geometry.spherical.twod:Edge:getPointAt:double#[return, circle, getPointAt, +, alpha, circle, getPhase, start, getLocation, getVector]
org.apache.commons.math4.geometry.spherical.twod:Edge:setNextEdge:Edge#[=, end, next, getStart, end, setIncoming, this, end, bindWith, getCircle]
org.apache.commons.math4.geometry.spherical.twod:Edge:split:Circle+List<Edge>+List<Edge>#[final, double, edgeStart, circle, getPhase, start, getLocation, getVector, final, Arc, arc, circle, getInsideArc, splitCircle, final, double, arcRelativeStart, -, MathUtils, normalizeAngle, arc, getInf, +, edgeStart, FastMath.PI, edgeStart, final, double, arcRelativeEnd, +, arcRelativeStart, arc, getSize, final, double, unwrappedEnd, -, arcRelativeEnd, MathUtils.TWO_PI, final, double, tolerance, circle, getTolerance, Vertex, previousVertex, start, if, >=, unwrappedEnd, -, length, tolerance, insideList, add, this, double, alreadyManagedLength, 0, if, >=, unwrappedEnd, 0, =, previousVertex, addSubEdge, previousVertex, new, Vertex, new, S2Point, circle, getPointAt, +, edgeStart, unwrappedEnd, unwrappedEnd, insideList, splitCircle, =, alreadyManagedLength, unwrappedEnd, if, >=, arcRelativeStart, -, length, tolerance, if, >=, unwrappedEnd, 0, =, previousVertex, addSubEdge, previousVertex, end, -, length, alreadyManagedLength, outsideList, splitCircle, outsideList, add, this, =, previousVertex, addSubEdge, previousVertex, new, Vertex, new, S2Point, circle, getPointAt, +, edgeStart, arcRelativeStart, -, arcRelativeStart, alreadyManagedLength, outsideList, splitCircle, =, alreadyManagedLength, arcRelativeStart, if, >=, arcRelativeEnd, -, length, tolerance, =, previousVertex, addSubEdge, previousVertex, end, -, length, alreadyManagedLength, insideList, splitCircle, =, previousVertex, addSubEdge, previousVertex, new, Vertex, new, S2Point, circle, getPointAt, +, edgeStart, arcRelativeStart, -, arcRelativeStart, alreadyManagedLength, insideList, splitCircle, =, alreadyManagedLength, arcRelativeStart, =, previousVertex, addSubEdge, previousVertex, end, -, length, alreadyManagedLength, outsideList, splitCircle]
org.apache.commons.math4.geometry.spherical.twod:Edge:addSubEdge:Vertex+Vertex+double+List<Edge>+Circle#[if, <=, subLength, circle, getTolerance, return, subStart, subEnd, bindWith, splitCircle, final, Edge, edge, new, Edge, subStart, subEnd, subLength, circle, list, add, edge, return, subEnd]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:visitOrder:BSPTree<Sphere2D>#[return, Order.MINUS_SUB_PLUS]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:visitInternalNode:BSPTree<Sphere2D>#[nodeToEdgesList, put, node, new, ArrayList, Edge, SuppressWarnings, "unchecked", final, BoundaryAttribute, Sphere2D, attribute, BoundaryAttribute, Sphere2D, node, getAttribute, if, !=, attribute, getPlusOutside, null, addContribution, SubCircle, attribute, getPlusOutside, false, node, if, !=, attribute, getPlusInside, null, addContribution, SubCircle, attribute, getPlusInside, true, node]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:addContribution:SubCircle+boolean+BSPTree<Sphere2D>#[final, Circle, circle, Circle, sub, getHyperplane, final, List, Arc, arcs, ArcsSet, sub, getRemainingRegion, asList, for, final, Arc, a, arcs, final, Vertex, start, new, Vertex, S2Point, circle, toSpace, new, S1Point, a, getInf, final, Vertex, end, new, Vertex, S2Point, circle, toSpace, new, S1Point, a, getSup, start, bindWith, circle, end, bindWith, circle, final, Edge, edge, if, reversed, =, edge, new, Edge, end, start, a, getSize, circle, getReverse, =, edge, new, Edge, start, end, a, getSize, circle, edgeToNode, put, edge, node, nodeToEdgesList, get, node, add, edge]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:getFollowingEdge:Edge#[final, S2Point, point, previous, getEnd, getLocation, final, List, BSPTree, Sphere2D, candidates, root, getCloseCuts, point, tolerance, double, closest, tolerance, Edge, following, null, for, final, BSPTree, Sphere2D, node, candidates, for, final, Edge, edge, nodeToEdgesList, get, node, if, &&, !=, edge, previous, ==, edge, getStart, getIncoming, null, final, Vector3D, edgeStart, edge, getStart, getLocation, getVector, final, double, gap, Vector3D, angle, point, getVector, edgeStart, if, <=, gap, closest, =, closest, gap, =, following, edge, if, ==, following, null, final, Vector3D, previousStart, previous, getStart, getLocation, getVector, if, <=, Vector3D, angle, point, getVector, previousStart, tolerance, return, previous, throw, new, MathIllegalStateException, LocalizedFormats.OUTLINE_BOUNDARY_LOOP_OPEN, return, following]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:getEdges:null#[for, final, Edge, previous, edgeToNode, keySet, previous, setNextEdge, getFollowingEdge, previous, return, new, ArrayList, Edge, edgeToNode, keySet]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:visitOrder:BSPTree<Sphere2D>#[return, Order.MINUS_SUB_PLUS]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:visitLeafNode:BSPTree<Sphere2D>#[if, Boolean, node, getAttribute, final, SphericalPolygonsSet, convex, new, SphericalPolygonsSet, node, pruneAroundConvexCell, Boolean.TRUE, Boolean.FALSE, null, tolerance, final, List, Vertex, boundary, convex, getBoundaryLoops, if, !=, boundary, size, 1, throw, new, MathInternalError, final, double, area, convexCellArea, boundary, get, 0, final, Vector3D, barycenter, convexCellBarycenter, boundary, get, 0, convexCellsInsidePoints, add, barycenter, +=, summedArea, area, =, summedBarycenter, new, Vector3D, 1, summedBarycenter, area, barycenter]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:convexCellArea:Vertex#[int, n, 0, double, sum, 0, for, Edge, e, start, getOutgoing, ||, ==, n, 0, !=, e, getStart, start, =, e, e, getEnd, getOutgoing, final, Vector3D, previousPole, e, getCircle, getPole, final, Vector3D, nextPole, e, getEnd, getOutgoing, getCircle, getPole, final, Vector3D, point, e, getEnd, getLocation, getVector, double, alpha, FastMath, atan2, Vector3D, dotProduct, nextPole, Vector3D, crossProduct, point, previousPole, -, Vector3D, dotProduct, nextPole, previousPole, if, <, alpha, 0, +=, alpha, MathUtils.TWO_PI, +=, sum, alpha, ++, n, return, -, sum, *, -, n, 2, FastMath.PI]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:convexCellBarycenter:Vertex#[int, n, 0, Vector3D, sumB, Vector3D.ZERO, for, Edge, e, start, getOutgoing, ||, ==, n, 0, !=, e, getStart, start, =, e, e, getEnd, getOutgoing, =, sumB, new, Vector3D, 1, sumB, e, getLength, e, getCircle, getPole, ++, n, return, sumB, normalize]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:getArea:null#[return, summedArea]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:getBarycenter:null#[if, ==, summedBarycenter, getNormSq, 0, return, S2Point.NaN, return, new, S2Point, summedBarycenter]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:getConvexCellsInsidePoints:null#[return, convexCellsInsidePoints]
org.apache.commons.math4.geometry.spherical.twod:S2Point:vector:double+double#[if, ||, <, phi, 0, >, phi, FastMath.PI, throw, new, OutOfRangeException, phi, 0, FastMath.PI, final, double, cosTheta, FastMath, cos, theta, final, double, sinTheta, FastMath, sin, theta, final, double, cosPhi, FastMath, cos, phi, final, double, sinPhi, FastMath, sin, phi, return, new, Vector3D, *, cosTheta, sinPhi, *, sinTheta, sinPhi, cosPhi]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getTheta:null#[return, theta]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getPhi:null#[return, phi]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getVector:null#[return, vector]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getSpace:null#[return, Sphere2D, getInstance]
org.apache.commons.math4.geometry.spherical.twod:S2Point:isNaN:null#[return, ||, Double, isNaN, theta, Double, isNaN, phi]
org.apache.commons.math4.geometry.spherical.twod:S2Point:negate:null#[return, new, S2Point, -, theta, -, FastMath.PI, phi, vector, negate]
org.apache.commons.math4.geometry.spherical.twod:S2Point:distance:Point<Sphere2D>#[return, distance, this, S2Point, point]
org.apache.commons.math4.geometry.spherical.twod:S2Point:distance:S2Point+S2Point#[return, Vector3D, angle, p1.vector, p2.vector]
org.apache.commons.math4.geometry.spherical.twod:S2Point:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, S2Point, final, S2Point, rhs, S2Point, other, if, rhs, isNaN, return, this, isNaN, return, &&, ==, theta, rhs.theta, ==, phi, rhs.phi, return, false]
org.apache.commons.math4.geometry.spherical.twod:S2Point:hashCode:null#[if, isNaN, return, 542, return, *, 134, +, *, 37, MathUtils, hash, theta, MathUtils, hash, phi]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:getDimension:null#[return, 2]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:getSubSpace:null#[return, Sphere1D, getInstance]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:createRegularPolygonVertices:Vector3D+Vector3D+double+int#[final, S2Point, array, S2Point, n, final, Rotation, r0, new, Rotation, Vector3D, crossProduct, center, meridian, outsideRadius, RotationConvention.VECTOR_OPERATOR, =, array, 0, new, S2Point, r0, applyTo, center, final, Rotation, r, new, Rotation, center, /, MathUtils.TWO_PI, n, RotationConvention.VECTOR_OPERATOR, for, int, i, 1, <, i, n, ++, i, =, array, i, new, S2Point, r, applyTo, array, -, i, 1, getVector, return, array]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:verticesToTree:double+S2Point...#[final, int, n, vertices.length, if, ==, n, 0, return, new, BSPTree, Sphere2D, Boolean.TRUE, final, Vertex, vArray, Vertex, n, for, int, i, 0, <, i, n, ++, i, =, vArray, i, new, Vertex, vertices, i, List, Edge, edges, new, ArrayList, Edge, n, Vertex, end, vArray, -, n, 1, for, int, i, 0, <, i, n, ++, i, final, Vertex, start, end, =, end, vArray, i, Circle, circle, start, sharedCircleWith, end, if, ==, circle, null, =, circle, new, Circle, start, getLocation, end, getLocation, hyperplaneThickness, edges, add, new, Edge, start, end, Vector3D, angle, start, getLocation, getVector, end, getLocation, getVector, circle, for, final, Vertex, vertex, vArray, if, &&, &&, !=, vertex, start, !=, vertex, end, <=, FastMath, abs, circle, getOffset, vertex, getLocation, hyperplaneThickness, vertex, bindWith, circle, final, BSPTree, Sphere2D, tree, new, BSPTree, Sphere2D, insertEdges, hyperplaneThickness, tree, edges, return, tree]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:insertEdges:double+BSPTree<Sphere2D>+List<Edge>#[int, index, 0, Edge, inserted, null, while, &&, ==, inserted, null, <, index, edges, size, =, inserted, edges, get, ++, index, if, !, node, insertCut, inserted, getCircle, =, inserted, null, if, ==, inserted, null, final, BSPTree, Sphere2D, parent, node, getParent, if, ||, ==, parent, null, ==, node, parent, getMinus, node, setAttribute, Boolean.TRUE, node, setAttribute, Boolean.FALSE, return, final, List, Edge, outsideList, new, ArrayList, Edge, final, List, Edge, insideList, new, ArrayList, Edge, for, final, Edge, edge, edges, if, !=, edge, inserted, edge, split, inserted, getCircle, outsideList, insideList, if, !, outsideList, isEmpty, insertEdges, hyperplaneThickness, node, getPlus, outsideList, node, getPlus, setAttribute, Boolean.FALSE, if, !, insideList, isEmpty, insertEdges, hyperplaneThickness, node, getMinus, insideList, node, getMinus, setAttribute, Boolean.TRUE]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:buildNew:BSPTree<Sphere2D>#[return, new, SphericalPolygonsSet, tree, getTolerance]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:computeGeometricalProperties:null#[final, BSPTree, Sphere2D, tree, getTree, true, if, ==, tree, getCut, null, if, &&, ==, tree, getCut, null, Boolean, tree, getAttribute, setSize, *, 4, FastMath.PI, setBarycenter, new, S2Point, 0, 0, setSize, 0, setBarycenter, S2Point.NaN, final, PropertiesComputer, pc, new, PropertiesComputer, getTolerance, tree, visit, pc, setSize, pc, getArea, setBarycenter, pc, getBarycenter]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getBoundaryLoops:null#[if, ==, loops, null, if, ==, getTree, false, getCut, null, =, loops, Collections, emptyList, final, BSPTree, Sphere2D, root, getTree, true, final, EdgesBuilder, visitor, new, EdgesBuilder, root, getTolerance, root, visit, visitor, final, List, Edge, edges, visitor, getEdges, =, loops, new, ArrayList, Vertex, while, !, edges, isEmpty, Edge, edge, edges, get, 0, final, Vertex, startVertex, edge, getStart, loops, add, startVertex, do, for, final, Iterator, Edge, iterator, edges, iterator, iterator, hasNext, if, ==, iterator, next, edge, iterator, remove, break, =, edge, edge, getEnd, getOutgoing, !=, edge, getStart, startVertex, return, Collections, unmodifiableList, loops]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getEnclosingCap:null#[if, isEmpty, return, new, EnclosingBall, Sphere2D, S2Point, S2Point.PLUS_K, Double.NEGATIVE_INFINITY, if, isFull, return, new, EnclosingBall, Sphere2D, S2Point, S2Point.PLUS_K, Double.POSITIVE_INFINITY, final, BSPTree, Sphere2D, root, getTree, false, if, &&, isEmpty, root, getMinus, isFull, root, getPlus, final, Circle, circle, Circle, root, getCut, getHyperplane, return, new, EnclosingBall, Sphere2D, S2Point, new, S2Point, circle, getPole, negate, *, 0.5, FastMath.PI, if, &&, isFull, root, getMinus, isEmpty, root, getPlus, final, Circle, circle, Circle, root, getCut, getHyperplane, return, new, EnclosingBall, Sphere2D, S2Point, new, S2Point, circle, getPole, *, 0.5, FastMath.PI, final, List, Vector3D, points, getInsidePoints, final, List, Vertex, boundary, getBoundaryLoops, for, final, Vertex, loopStart, boundary, int, count, 0, for, Vertex, v, loopStart, ||, ==, count, 0, !=, v, loopStart, =, v, v, getOutgoing, getEnd, ++, count, points, add, v, getLocation, getVector, final, SphereGenerator, generator, new, SphereGenerator, final, WelzlEncloser, Euclidean3D, Vector3D, encloser, new, WelzlEncloser, Euclidean3D, Vector3D, getTolerance, generator, EnclosingBall, Euclidean3D, Vector3D, enclosing3D, encloser, enclose, points, final, Vector3D, support3D, enclosing3D, getSupport, final, double, r, enclosing3D, getRadius, final, double, h, enclosing3D, getCenter, getNorm, if, <, h, getTolerance, EnclosingBall, Sphere2D, S2Point, enclosingS2, new, EnclosingBall, Sphere2D, S2Point, S2Point.PLUS_K, Double.POSITIVE_INFINITY, for, Vector3D, outsidePoint, getOutsidePoints, final, S2Point, outsideS2, new, S2Point, outsidePoint, final, BoundaryProjection, Sphere2D, projection, projectToBoundary, outsideS2, if, <, -, FastMath.PI, projection, getOffset, enclosingS2, getRadius, =, enclosingS2, new, EnclosingBall, Sphere2D, S2Point, outsideS2, negate, -, FastMath.PI, projection, getOffset, S2Point, projection, getProjected, return, enclosingS2, final, S2Point, support, S2Point, support3D.length, for, int, i, 0, <, i, support3D.length, ++, i, =, support, i, new, S2Point, support3D, i, final, EnclosingBall, Sphere2D, S2Point, enclosingS2, new, EnclosingBall, Sphere2D, S2Point, new, S2Point, enclosing3D, getCenter, FastMath, acos, /, -, +, 1, *, h, h, *, r, r, *, 2, h, support, return, enclosingS2]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getInsidePoints:null#[final, PropertiesComputer, pc, new, PropertiesComputer, getTolerance, getTree, true, visit, pc, return, pc, getConvexCellsInsidePoints]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getOutsidePoints:null#[final, SphericalPolygonsSet, complement, SphericalPolygonsSet, new, RegionFactory, Sphere2D, getComplement, this, final, PropertiesComputer, pc, new, PropertiesComputer, getTolerance, complement, getTree, true, visit, pc, return, pc, getConvexCellsInsidePoints]
org.apache.commons.math4.geometry.spherical.twod:SubCircle:buildNew:Hyperplane<Sphere2D>+Region<Sphere1D>#[return, new, SubCircle, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.spherical.twod:SubCircle:split:Hyperplane<Sphere2D>#[final, Circle, thisCircle, Circle, getHyperplane, final, Circle, otherCircle, Circle, hyperplane, final, double, angle, Vector3D, angle, thisCircle, getPole, otherCircle, getPole, if, ||, <, angle, thisCircle, getTolerance, >, angle, -, FastMath.PI, thisCircle, getTolerance, return, new, SplitSubHyperplane, Sphere2D, null, null, final, Arc, arc, thisCircle, getInsideArc, otherCircle, final, ArcsSet.Split, split, ArcsSet, getRemainingRegion, split, arc, final, ArcsSet, plus, split, getPlus, final, ArcsSet, minus, split, getMinus, return, new, SplitSubHyperplane, Sphere2D, ==, plus, null, null, new, SubCircle, thisCircle, copySelf, plus, ==, minus, null, null, new, SubCircle, thisCircle, copySelf, minus]
org.apache.commons.math4.geometry.spherical.twod:Vertex:getLocation:null#[return, location]
org.apache.commons.math4.geometry.spherical.twod:Vertex:bindWith:Circle#[circles, add, circle]
org.apache.commons.math4.geometry.spherical.twod:Vertex:sharedCircleWith:Vertex#[for, final, Circle, circle1, circles, for, final, Circle, circle2, vertex.circles, if, ==, circle1, circle2, return, circle1, return, null]
org.apache.commons.math4.geometry.spherical.twod:Vertex:setIncoming:Edge#[=, this, incoming, incoming, bindWith, incoming, getCircle]
org.apache.commons.math4.geometry.spherical.twod:Vertex:getIncoming:null#[return, incoming]
org.apache.commons.math4.geometry.spherical.twod:Vertex:setOutgoing:Edge#[=, this, outgoing, outgoing, bindWith, outgoing, getCircle]
org.apache.commons.math4.geometry.spherical.twod:Vertex:getOutgoing:null#[return, outgoing]
org.apache.commons.math4.geometry:VectorFormat:getAvailableLocales:null#[return, NumberFormat, getAvailableLocales]
org.apache.commons.math4.geometry:VectorFormat:getPrefix:null#[return, prefix]
org.apache.commons.math4.geometry:VectorFormat:getSuffix:null#[return, suffix]
org.apache.commons.math4.geometry:VectorFormat:getSeparator:null#[return, separator]
org.apache.commons.math4.geometry:VectorFormat:getFormat:null#[return, format]
org.apache.commons.math4.geometry:VectorFormat:format:Vector<S>#[return, format, vector, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.geometry:VectorFormat:format:StringBuffer+FieldPosition+double...#[pos, setBeginIndex, 0, pos, setEndIndex, 0, toAppendTo, append, prefix, for, int, i, 0, <, i, coordinates.length, ++, i, if, >, i, 0, toAppendTo, append, separator, CompositeFormat, formatDouble, coordinates, i, format, toAppendTo, pos, toAppendTo, append, suffix, return, toAppendTo]
org.apache.commons.math4.geometry:VectorFormat:parseCoordinates:int+String+ParsePosition#[int, initialIndex, pos, getIndex, double, coordinates, double, dimension, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedPrefix, pos, return, null, for, int, i, 0, <, i, dimension, ++, i, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, &&, >, i, 0, !, CompositeFormat, parseFixedstring, source, trimmedSeparator, pos, return, null, CompositeFormat, parseAndIgnoreWhitespace, source, pos, Number, c, CompositeFormat, parseNumber, source, format, pos, if, ==, c, null, pos, setIndex, initialIndex, return, null, =, coordinates, i, c, doubleValue, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedSuffix, pos, return, null, return, coordinates]
org.apache.commons.math4.linear:AbstractFieldMatrix:extractField:T[][]#[if, ==, d, null, throw, new, NullArgumentException, if, ==, d.length, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, if, ==, d, 0, length, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, return, d, 0, 0, getField]
org.apache.commons.math4.linear:AbstractFieldMatrix:extractField:T[]#[if, ==, d.length, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, return, d, 0, getField]
org.apache.commons.math4.linear:AbstractFieldMatrix:getField:null#[return, field]
org.apache.commons.math4.linear:AbstractFieldMatrix:add:FieldMatrix<T>#[checkAdditionCompatible, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, getEntry, row, col, add, m, getEntry, row, col, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:subtract:FieldMatrix<T>#[checkSubtractionCompatible, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, getEntry, row, col, subtract, m, getEntry, row, col, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:scalarAdd:T#[final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, getEntry, row, col, add, d, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:scalarMultiply:T#[final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, getEntry, row, col, multiply, d, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:multiply:FieldMatrix<T>#[checkMultiplicationCompatible, m, final, int, nRows, getRowDimension, final, int, nCols, m, getColumnDimension, final, int, nSum, getColumnDimension, final, FieldMatrix, T, out, createMatrix, nRows, nCols, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, T, sum, field, getZero, for, int, i, 0, <, i, nSum, ++, i, =, sum, sum, add, getEntry, row, i, multiply, m, getEntry, i, col, out, setEntry, row, col, sum, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:preMultiply:FieldMatrix<T>#[return, m, multiply, this]
org.apache.commons.math4.linear:AbstractFieldMatrix:power:int#[if, <, p, 0, throw, new, NotPositiveException, p, if, !, isSquare, throw, new, NonSquareMatrixException, getRowDimension, getColumnDimension, if, ==, p, 0, return, MatrixUtils, createFieldIdentityMatrix, this, getField, this, getRowDimension, if, ==, p, 1, return, this, copy, final, int, power, -, p, 1, final, char, binaryRepresentation, Integer, toBinaryString, power, toCharArray, final, ArrayList, Integer, nonZeroPositions, new, ArrayList, Integer, for, int, i, 0, <, i, binaryRepresentation.length, ++, i, if, ==, binaryRepresentation, i, '1', final, int, pos, -, binaryRepresentation.length, i, 1, nonZeroPositions, add, pos, ArrayList, FieldMatrix, T, results, new, ArrayList, FieldMatrix, T, binaryRepresentation.length, results, add, 0, this, copy, for, int, i, 1, <, i, binaryRepresentation.length, ++, i, final, FieldMatrix, T, s, results, get, -, i, 1, final, FieldMatrix, T, r, s, multiply, s, results, add, i, r, FieldMatrix, T, result, this, copy, for, Integer, i, nonZeroPositions, =, result, result, multiply, results, get, i, return, result]
org.apache.commons.math4.linear:AbstractFieldMatrix:getData:null#[final, T, data, MathArrays, buildArray, field, getRowDimension, getColumnDimension, for, int, i, 0, <, i, data.length, ++, i, final, T, dataI, data, i, for, int, j, 0, <, j, dataI.length, ++, j, =, dataI, j, getEntry, i, j, return, data]
org.apache.commons.math4.linear:AbstractFieldMatrix:getSubMatrix:int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, final, FieldMatrix, T, subMatrix, createMatrix, +, -, endRow, startRow, 1, +, -, endColumn, startColumn, 1, for, int, i, startRow, <=, i, endRow, ++, i, for, int, j, startColumn, <=, j, endColumn, ++, j, subMatrix, setEntry, -, i, startRow, -, j, startColumn, getEntry, i, j, return, subMatrix]
org.apache.commons.math4.linear:AbstractFieldMatrix:getSubMatrix:int[]+int[]#[checkSubMatrixIndex, selectedRows, selectedColumns, final, FieldMatrix, T, subMatrix, createMatrix, selectedRows.length, selectedColumns.length, subMatrix, walkInOptimizedOrder, new, DefaultFieldMatrixChangingVisitor, T, field, getZero, Override, public, T, visit, final, int, row, final, int, column, final, T, value, return, getEntry, selectedRows, row, selectedColumns, column, return, subMatrix]
org.apache.commons.math4.linear:AbstractFieldMatrix:copySubMatrix:int+int+int+int+T[][]#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, final, int, rowsCount, -, +, endRow, 1, startRow, final, int, columnsCount, -, +, endColumn, 1, startColumn, if, ||, <, destination.length, rowsCount, <, destination, 0, length, columnsCount, throw, new, MatrixDimensionMismatchException, destination.length, destination, 0, length, rowsCount, columnsCount, walkInOptimizedOrder, new, DefaultFieldMatrixPreservingVisitor, T, field, getZero, private, int, startRow, private, int, startColumn, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, =, this, startRow, startRow, =, this, startColumn, startColumn, Override, public, void, visit, final, int, row, final, int, column, final, T, value, =, destination, -, row, startRow, -, column, startColumn, value, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractFieldMatrix:copySubMatrix:int[]+int[]+T[][]#[checkSubMatrixIndex, selectedRows, selectedColumns, if, ||, <, destination.length, selectedRows.length, <, destination, 0, length, selectedColumns.length, throw, new, MatrixDimensionMismatchException, destination.length, destination, 0, length, selectedRows.length, selectedColumns.length, for, int, i, 0, <, i, selectedRows.length, ++, i, final, T, destinationI, destination, i, for, int, j, 0, <, j, selectedColumns.length, ++, j, =, destinationI, j, getEntry, selectedRows, i, selectedColumns, j]
org.apache.commons.math4.linear:AbstractFieldMatrix:setSubMatrix:T[][]+int+int#[if, ==, subMatrix, null, throw, new, NullArgumentException, final, int, nRows, subMatrix.length, if, ==, nRows, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, final, int, nCols, subMatrix, 0, length, if, ==, nCols, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, for, int, r, 1, <, r, nRows, ++, r, if, !=, subMatrix, r, length, nCols, throw, new, DimensionMismatchException, nCols, subMatrix, r, length, checkRowIndex, row, checkColumnIndex, column, checkRowIndex, -, +, nRows, row, 1, checkColumnIndex, -, +, nCols, column, 1, for, int, i, 0, <, i, nRows, ++, i, for, int, j, 0, <, j, nCols, ++, j, setEntry, +, row, i, +, column, j, subMatrix, i, j]
org.apache.commons.math4.linear:AbstractFieldMatrix:getRowMatrix:int#[checkRowIndex, row, final, int, nCols, getColumnDimension, final, FieldMatrix, T, out, createMatrix, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, out, setEntry, 0, i, getEntry, row, i, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setRowMatrix:int+FieldMatrix<T>#[checkRowIndex, row, final, int, nCols, getColumnDimension, if, ||, !=, matrix, getRowDimension, 1, !=, matrix, getColumnDimension, nCols, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, setEntry, row, i, matrix, getEntry, 0, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getColumnMatrix:int#[checkColumnIndex, column, final, int, nRows, getRowDimension, final, FieldMatrix, T, out, createMatrix, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, out, setEntry, i, 0, getEntry, i, column, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setColumnMatrix:int+FieldMatrix<T>#[checkColumnIndex, column, final, int, nRows, getRowDimension, if, ||, !=, matrix, getRowDimension, nRows, !=, matrix, getColumnDimension, 1, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, setEntry, i, column, matrix, getEntry, i, 0]
org.apache.commons.math4.linear:AbstractFieldMatrix:getRowVector:int#[return, new, ArrayFieldVector, T, field, getRow, row, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:setRowVector:int+FieldVector<T>#[checkRowIndex, row, final, int, nCols, getColumnDimension, if, !=, vector, getDimension, nCols, throw, new, MatrixDimensionMismatchException, 1, vector, getDimension, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, setEntry, row, i, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getColumnVector:int#[return, new, ArrayFieldVector, T, field, getColumn, column, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:setColumnVector:int+FieldVector<T>#[checkColumnIndex, column, final, int, nRows, getRowDimension, if, !=, vector, getDimension, nRows, throw, new, MatrixDimensionMismatchException, vector, getDimension, 1, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, setEntry, i, column, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getRow:int#[checkRowIndex, row, final, int, nCols, getColumnDimension, final, T, out, MathArrays, buildArray, field, nCols, for, int, i, 0, <, i, nCols, ++, i, =, out, i, getEntry, row, i, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setRow:int+T[]#[checkRowIndex, row, final, int, nCols, getColumnDimension, if, !=, array.length, nCols, throw, new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, setEntry, row, i, array, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getColumn:int#[checkColumnIndex, column, final, int, nRows, getRowDimension, final, T, out, MathArrays, buildArray, field, nRows, for, int, i, 0, <, i, nRows, ++, i, =, out, i, getEntry, i, column, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setColumn:int+T[]#[checkColumnIndex, column, final, int, nRows, getRowDimension, if, !=, array.length, nRows, throw, new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, setEntry, i, column, array, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:transpose:null#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, final, FieldMatrix, T, out, createMatrix, nCols, nRows, walkInOptimizedOrder, new, DefaultFieldMatrixPreservingVisitor, T, field, getZero, Override, public, void, visit, final, int, row, final, int, column, final, T, value, out, setEntry, column, row, value, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:isSquare:null#[return, ==, getColumnDimension, getRowDimension]
org.apache.commons.math4.linear:AbstractFieldMatrix:getTrace:null#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, nRows, nCols, throw, new, NonSquareMatrixException, nRows, nCols, T, trace, field, getZero, for, int, i, 0, <, i, nRows, ++, i, =, trace, trace, add, getEntry, i, i, return, trace]
org.apache.commons.math4.linear:AbstractFieldMatrix:operate:T[]#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v.length, nCols, throw, new, DimensionMismatchException, v.length, nCols, final, T, out, MathArrays, buildArray, field, nRows, for, int, row, 0, <, row, nRows, ++, row, T, sum, field, getZero, for, int, i, 0, <, i, nCols, ++, i, =, sum, sum, add, getEntry, row, i, multiply, v, i, =, out, row, sum, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:operate:FieldVector<T>#[try, return, new, ArrayFieldVector, T, field, operate, ArrayFieldVector, T, v, getDataRef, false, catch, ClassCastException, cce, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v, getDimension, nCols, throw, new, DimensionMismatchException, v, getDimension, nCols, final, T, out, MathArrays, buildArray, field, nRows, for, int, row, 0, <, row, nRows, ++, row, T, sum, field, getZero, for, int, i, 0, <, i, nCols, ++, i, =, sum, sum, add, getEntry, row, i, multiply, v, getEntry, i, =, out, row, sum, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:preMultiply:T[]#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v.length, nRows, throw, new, DimensionMismatchException, v.length, nRows, final, T, out, MathArrays, buildArray, field, nCols, for, int, col, 0, <, col, nCols, ++, col, T, sum, field, getZero, for, int, i, 0, <, i, nRows, ++, i, =, sum, sum, add, getEntry, i, col, multiply, v, i, =, out, col, sum, return, out]
org.apache.commons.math4.linear:AbstractFieldMatrix:preMultiply:FieldVector<T>#[try, return, new, ArrayFieldVector, T, field, preMultiply, ArrayFieldVector, T, v, getDataRef, false, catch, ClassCastException, cce, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v, getDimension, nRows, throw, new, DimensionMismatchException, v, getDimension, nRows, final, T, out, MathArrays, buildArray, field, nCols, for, int, col, 0, <, col, nCols, ++, col, T, sum, field, getZero, for, int, i, 0, <, i, nRows, ++, i, =, sum, sum, add, getEntry, i, col, multiply, v, getEntry, i, =, out, col, sum, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, row, 0, <, row, rows, ++, row, for, int, column, 0, <, column, columns, ++, column, final, T, oldValue, getEntry, row, column, final, T, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, row, 0, <, row, rows, ++, row, for, int, column, 0, <, column, columns, ++, column, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, row, startRow, <=, row, endRow, ++, row, for, int, column, startColumn, <=, column, endColumn, ++, column, final, T, oldValue, getEntry, row, column, final, T, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, row, startRow, <=, row, endRow, ++, row, for, int, column, startColumn, <=, column, endColumn, ++, column, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, column, 0, <, column, columns, ++, column, for, int, row, 0, <, row, rows, ++, row, final, T, oldValue, getEntry, row, column, final, T, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, column, 0, <, column, columns, ++, column, for, int, row, 0, <, row, rows, ++, row, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, column, startColumn, <=, column, endColumn, ++, column, for, int, row, startRow, <=, row, endRow, ++, row, final, T, oldValue, getEntry, row, column, final, T, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, column, startColumn, <=, column, endColumn, ++, column, for, int, row, startRow, <=, row, endRow, ++, row, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>#[return, walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>#[return, walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[return, walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[return, walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractFieldMatrix:toString:null#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, final, StringBuffer, res, new, StringBuffer, String, fullClassName, getClass, getName, String, shortClassName, fullClassName, substring, +, fullClassName, lastIndexOf, '.', 1, res, append, shortClassName, append, "{", for, int, i, 0, <, i, nRows, ++, i, if, >, i, 0, res, append, ",", res, append, "{", for, int, j, 0, <, j, nCols, ++, j, if, >, j, 0, res, append, ",", res, append, getEntry, i, j, res, append, "}", res, append, "}", return, res, toString]
org.apache.commons.math4.linear:AbstractFieldMatrix:equals:Object#[if, ==, object, this, return, true, if, ==, instanceof, object, FieldMatrix, false, return, false, FieldMatrix, m, FieldMatrix, object, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, ||, !=, m, getColumnDimension, nCols, !=, m, getRowDimension, nRows, return, false, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, if, !, getEntry, row, col, equals, m, getEntry, row, col, return, false, return, true]
org.apache.commons.math4.linear:AbstractFieldMatrix:hashCode:null#[int, ret, 322562, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, =, ret, +, *, ret, 31, nRows, =, ret, +, *, ret, 31, nCols, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, =, ret, +, *, ret, 31, *, +, *, 11, +, row, 1, *, 17, +, col, 1, getEntry, row, col, hashCode, return, ret]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkRowIndex:int#[if, ||, <, row, 0, >=, row, getRowDimension, throw, new, OutOfRangeException, LocalizedFormats.ROW_INDEX, row, 0, -, getRowDimension, 1]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkColumnIndex:int#[if, ||, <, column, 0, >=, column, getColumnDimension, throw, new, OutOfRangeException, LocalizedFormats.COLUMN_INDEX, column, 0, -, getColumnDimension, 1]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkSubMatrixIndex:int+int+int+int#[checkRowIndex, startRow, checkRowIndex, endRow, if, <, endRow, startRow, throw, new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, endRow, startRow, true, checkColumnIndex, startColumn, checkColumnIndex, endColumn, if, <, endColumn, startColumn, throw, new, NumberIsTooSmallException, LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN, endColumn, startColumn, true]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkSubMatrixIndex:int[]+int[]#[if, ||, ==, selectedRows, null, ==, selectedColumns, null, throw, new, NullArgumentException, if, ||, ==, selectedRows.length, 0, ==, selectedColumns.length, 0, throw, new, NoDataException, for, final, int, row, selectedRows, checkRowIndex, row, for, final, int, column, selectedColumns, checkColumnIndex, column]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkAdditionCompatible:FieldMatrix<T>#[if, ||, !=, getRowDimension, m, getRowDimension, !=, getColumnDimension, m, getColumnDimension, throw, new, MatrixDimensionMismatchException, m, getRowDimension, m, getColumnDimension, getRowDimension, getColumnDimension]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkSubtractionCompatible:FieldMatrix<T>#[if, ||, !=, getRowDimension, m, getRowDimension, !=, getColumnDimension, m, getColumnDimension, throw, new, MatrixDimensionMismatchException, m, getRowDimension, m, getColumnDimension, getRowDimension, getColumnDimension]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkMultiplicationCompatible:FieldMatrix<T>#[if, !=, getColumnDimension, m, getRowDimension, throw, new, DimensionMismatchException, m, getRowDimension, getColumnDimension]
org.apache.commons.math4.linear:AbstractRealMatrix:add:RealMatrix#[MatrixUtils, checkAdditionCompatible, this, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, RealMatrix, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, +, getEntry, row, col, m, getEntry, row, col, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:subtract:RealMatrix#[MatrixUtils, checkSubtractionCompatible, this, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, RealMatrix, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, -, getEntry, row, col, m, getEntry, row, col, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:scalarAdd:double#[final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, RealMatrix, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, +, getEntry, row, col, d, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:scalarMultiply:double#[final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, RealMatrix, out, createMatrix, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, for, int, col, 0, <, col, columnCount, ++, col, out, setEntry, row, col, *, getEntry, row, col, d, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:multiply:RealMatrix#[MatrixUtils, checkMultiplicationCompatible, this, m, final, int, nRows, getRowDimension, final, int, nCols, m, getColumnDimension, final, int, nSum, getColumnDimension, final, RealMatrix, out, createMatrix, nRows, nCols, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, double, sum, 0, for, int, i, 0, <, i, nSum, ++, i, +=, sum, *, getEntry, row, i, m, getEntry, i, col, out, setEntry, row, col, sum, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:preMultiply:RealMatrix#[return, m, multiply, this]
org.apache.commons.math4.linear:AbstractRealMatrix:power:int#[if, <, p, 0, throw, new, NotPositiveException, LocalizedFormats.NOT_POSITIVE_EXPONENT, p, if, !, isSquare, throw, new, NonSquareMatrixException, getRowDimension, getColumnDimension, if, ==, p, 0, return, MatrixUtils, createRealIdentityMatrix, this, getRowDimension, if, ==, p, 1, return, this, copy, final, int, power, -, p, 1, final, char, binaryRepresentation, Integer, toBinaryString, power, toCharArray, final, ArrayList, Integer, nonZeroPositions, new, ArrayList, Integer, int, maxI, -, 1, for, int, i, 0, <, i, binaryRepresentation.length, ++, i, if, ==, binaryRepresentation, i, '1', final, int, pos, -, binaryRepresentation.length, i, 1, nonZeroPositions, add, pos, if, ==, maxI, -, 1, =, maxI, pos, RealMatrix, results, RealMatrix, +, maxI, 1, =, results, 0, this, copy, for, int, i, 1, <=, i, maxI, ++, i, =, results, i, results, -, i, 1, multiply, results, -, i, 1, RealMatrix, result, this, copy, for, Integer, i, nonZeroPositions, =, result, result, multiply, results, i, return, result]
org.apache.commons.math4.linear:AbstractRealMatrix:getData:null#[final, double, data, double, getRowDimension, getColumnDimension, for, int, i, 0, <, i, data.length, ++, i, final, double, dataI, data, i, for, int, j, 0, <, j, dataI.length, ++, j, =, dataI, j, getEntry, i, j, return, data]
org.apache.commons.math4.linear:AbstractRealMatrix:getNorm:null#[return, walkInColumnOrder, new, RealMatrixPreservingVisitor, private, double, endRow, private, double, columnSum, private, double, maxColSum, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, =, this, endRow, endRow, =, columnSum, 0, =, maxColSum, 0, Override, public, void, visit, final, int, row, final, int, column, final, double, value, +=, columnSum, FastMath, abs, value, if, ==, row, endRow, =, maxColSum, FastMath, max, maxColSum, columnSum, =, columnSum, 0, Override, public, double, end, return, maxColSum]
org.apache.commons.math4.linear:AbstractRealMatrix:getFrobeniusNorm:null#[return, walkInOptimizedOrder, new, RealMatrixPreservingVisitor, private, double, sum, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, =, sum, 0, Override, public, void, visit, final, int, row, final, int, column, final, double, value, +=, sum, *, value, value, Override, public, double, end, return, FastMath, sqrt, sum]
org.apache.commons.math4.linear:AbstractRealMatrix:getSubMatrix:int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, final, RealMatrix, subMatrix, createMatrix, +, -, endRow, startRow, 1, +, -, endColumn, startColumn, 1, for, int, i, startRow, <=, i, endRow, ++, i, for, int, j, startColumn, <=, j, endColumn, ++, j, subMatrix, setEntry, -, i, startRow, -, j, startColumn, getEntry, i, j, return, subMatrix]
org.apache.commons.math4.linear:AbstractRealMatrix:getSubMatrix:int[]+int[]#[MatrixUtils, checkSubMatrixIndex, this, selectedRows, selectedColumns, final, RealMatrix, subMatrix, createMatrix, selectedRows.length, selectedColumns.length, subMatrix, walkInOptimizedOrder, new, DefaultRealMatrixChangingVisitor, Override, public, double, visit, final, int, row, final, int, column, final, double, value, return, getEntry, selectedRows, row, selectedColumns, column, return, subMatrix]
org.apache.commons.math4.linear:AbstractRealMatrix:copySubMatrix:int+int+int+int+double[][]#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, final, int, rowsCount, -, +, endRow, 1, startRow, final, int, columnsCount, -, +, endColumn, 1, startColumn, if, ||, <, destination.length, rowsCount, <, destination, 0, length, columnsCount, throw, new, MatrixDimensionMismatchException, destination.length, destination, 0, length, rowsCount, columnsCount, for, int, i, 1, <, i, rowsCount, ++, i, if, <, destination, i, length, columnsCount, throw, new, MatrixDimensionMismatchException, destination.length, destination, i, length, rowsCount, columnsCount, walkInOptimizedOrder, new, DefaultRealMatrixPreservingVisitor, private, int, startRow, private, int, startColumn, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, =, this, startRow, startRow, =, this, startColumn, startColumn, Override, public, void, visit, final, int, row, final, int, column, final, double, value, =, destination, -, row, startRow, -, column, startColumn, value, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractRealMatrix:copySubMatrix:int[]+int[]+double[][]#[MatrixUtils, checkSubMatrixIndex, this, selectedRows, selectedColumns, final, int, nCols, selectedColumns.length, if, ||, <, destination.length, selectedRows.length, <, destination, 0, length, nCols, throw, new, MatrixDimensionMismatchException, destination.length, destination, 0, length, selectedRows.length, selectedColumns.length, for, int, i, 0, <, i, selectedRows.length, ++, i, final, double, destinationI, destination, i, if, <, destinationI.length, nCols, throw, new, MatrixDimensionMismatchException, destination.length, destinationI.length, selectedRows.length, selectedColumns.length, for, int, j, 0, <, j, selectedColumns.length, ++, j, =, destinationI, j, getEntry, selectedRows, i, selectedColumns, j]
org.apache.commons.math4.linear:AbstractRealMatrix:setSubMatrix:double[][]+int+int#[MathUtils, checkNotNull, subMatrix, final, int, nRows, subMatrix.length, if, ==, nRows, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, final, int, nCols, subMatrix, 0, length, if, ==, nCols, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, for, int, r, 1, <, r, nRows, ++, r, if, !=, subMatrix, r, length, nCols, throw, new, DimensionMismatchException, nCols, subMatrix, r, length, MatrixUtils, checkRowIndex, this, row, MatrixUtils, checkColumnIndex, this, column, MatrixUtils, checkRowIndex, this, -, +, nRows, row, 1, MatrixUtils, checkColumnIndex, this, -, +, nCols, column, 1, for, int, i, 0, <, i, nRows, ++, i, for, int, j, 0, <, j, nCols, ++, j, setEntry, +, row, i, +, column, j, subMatrix, i, j]
org.apache.commons.math4.linear:AbstractRealMatrix:getRowMatrix:int#[MatrixUtils, checkRowIndex, this, row, final, int, nCols, getColumnDimension, final, RealMatrix, out, createMatrix, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, out, setEntry, 0, i, getEntry, row, i, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:setRowMatrix:int+RealMatrix#[MatrixUtils, checkRowIndex, this, row, final, int, nCols, getColumnDimension, if, ||, !=, matrix, getRowDimension, 1, !=, matrix, getColumnDimension, nCols, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, setEntry, row, i, matrix, getEntry, 0, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getColumnMatrix:int#[MatrixUtils, checkColumnIndex, this, column, final, int, nRows, getRowDimension, final, RealMatrix, out, createMatrix, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, out, setEntry, i, 0, getEntry, i, column, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:setColumnMatrix:int+RealMatrix#[MatrixUtils, checkColumnIndex, this, column, final, int, nRows, getRowDimension, if, ||, !=, matrix, getRowDimension, nRows, !=, matrix, getColumnDimension, 1, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, setEntry, i, column, matrix, getEntry, i, 0]
org.apache.commons.math4.linear:AbstractRealMatrix:getRowVector:int#[return, new, ArrayRealVector, getRow, row, false]
org.apache.commons.math4.linear:AbstractRealMatrix:setRowVector:int+RealVector#[MatrixUtils, checkRowIndex, this, row, final, int, nCols, getColumnDimension, if, !=, vector, getDimension, nCols, throw, new, MatrixDimensionMismatchException, 1, vector, getDimension, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, setEntry, row, i, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getColumnVector:int#[return, new, ArrayRealVector, getColumn, column, false]
org.apache.commons.math4.linear:AbstractRealMatrix:setColumnVector:int+RealVector#[MatrixUtils, checkColumnIndex, this, column, final, int, nRows, getRowDimension, if, !=, vector, getDimension, nRows, throw, new, MatrixDimensionMismatchException, vector, getDimension, 1, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, setEntry, i, column, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getRow:int#[MatrixUtils, checkRowIndex, this, row, final, int, nCols, getColumnDimension, final, double, out, double, nCols, for, int, i, 0, <, i, nCols, ++, i, =, out, i, getEntry, row, i, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:setRow:int+double[]#[MatrixUtils, checkRowIndex, this, row, final, int, nCols, getColumnDimension, if, !=, array.length, nCols, throw, new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, setEntry, row, i, array, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getColumn:int#[MatrixUtils, checkColumnIndex, this, column, final, int, nRows, getRowDimension, final, double, out, double, nRows, for, int, i, 0, <, i, nRows, ++, i, =, out, i, getEntry, i, column, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:setColumn:int+double[]#[MatrixUtils, checkColumnIndex, this, column, final, int, nRows, getRowDimension, if, !=, array.length, nRows, throw, new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, setEntry, i, column, array, i]
org.apache.commons.math4.linear:AbstractRealMatrix:addToEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, setEntry, row, column, +, getEntry, row, column, increment]
org.apache.commons.math4.linear:AbstractRealMatrix:multiplyEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, setEntry, row, column, *, getEntry, row, column, factor]
org.apache.commons.math4.linear:AbstractRealMatrix:transpose:null#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, final, RealMatrix, out, createMatrix, nCols, nRows, walkInOptimizedOrder, new, DefaultRealMatrixPreservingVisitor, Override, public, void, visit, final, int, row, final, int, column, final, double, value, out, setEntry, column, row, value, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:isSquare:null#[return, ==, getColumnDimension, getRowDimension]
org.apache.commons.math4.linear:AbstractRealMatrix:getTrace:null#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, nRows, nCols, throw, new, NonSquareMatrixException, nRows, nCols, double, trace, 0, for, int, i, 0, <, i, nRows, ++, i, +=, trace, getEntry, i, i, return, trace]
org.apache.commons.math4.linear:AbstractRealMatrix:operate:double[]#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v.length, nCols, throw, new, DimensionMismatchException, v.length, nCols, final, double, out, double, nRows, for, int, row, 0, <, row, nRows, ++, row, double, sum, 0, for, int, i, 0, <, i, nCols, ++, i, +=, sum, *, getEntry, row, i, v, i, =, out, row, sum, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:operate:RealVector#[try, return, new, ArrayRealVector, operate, ArrayRealVector, v, getDataRef, false, catch, ClassCastException, cce, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v, getDimension, nCols, throw, new, DimensionMismatchException, v, getDimension, nCols, final, double, out, double, nRows, for, int, row, 0, <, row, nRows, ++, row, double, sum, 0, for, int, i, 0, <, i, nCols, ++, i, +=, sum, *, getEntry, row, i, v, getEntry, i, =, out, row, sum, return, new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:AbstractRealMatrix:preMultiply:double[]#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v.length, nRows, throw, new, DimensionMismatchException, v.length, nRows, final, double, out, double, nCols, for, int, col, 0, <, col, nCols, ++, col, double, sum, 0, for, int, i, 0, <, i, nRows, ++, i, +=, sum, *, getEntry, i, col, v, i, =, out, col, sum, return, out]
org.apache.commons.math4.linear:AbstractRealMatrix:preMultiply:RealVector#[try, return, new, ArrayRealVector, preMultiply, ArrayRealVector, v, getDataRef, false, catch, ClassCastException, cce, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v, getDimension, nRows, throw, new, DimensionMismatchException, v, getDimension, nRows, final, double, out, double, nCols, for, int, col, 0, <, col, nCols, ++, col, double, sum, 0, for, int, i, 0, <, i, nRows, ++, i, +=, sum, *, getEntry, i, col, v, getEntry, i, =, out, col, sum, return, new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixChangingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, row, 0, <, row, rows, ++, row, for, int, column, 0, <, column, columns, ++, column, final, double, oldValue, getEntry, row, column, final, double, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, row, 0, <, row, rows, ++, row, for, int, column, 0, <, column, columns, ++, column, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixChangingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, row, startRow, <=, row, endRow, ++, row, for, int, column, startColumn, <=, column, endColumn, ++, column, final, double, oldValue, getEntry, row, column, final, double, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, row, startRow, <=, row, endRow, ++, row, for, int, column, startColumn, <=, column, endColumn, ++, column, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, column, 0, <, column, columns, ++, column, for, int, row, 0, <, row, rows, ++, row, final, double, oldValue, getEntry, row, column, final, double, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, column, 0, <, column, columns, ++, column, for, int, row, 0, <, row, rows, ++, row, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, column, startColumn, <=, column, endColumn, ++, column, for, int, row, startRow, <=, row, endRow, ++, row, final, double, oldValue, getEntry, row, column, final, double, newValue, visitor, visit, row, column, oldValue, setEntry, row, column, newValue, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, column, startColumn, <=, column, endColumn, ++, column, for, int, row, startRow, <=, row, endRow, ++, row, visitor, visit, row, column, getEntry, row, column, return, visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor#[return, walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor#[return, walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor+int+int+int+int#[return, walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor+int+int+int+int#[return, walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractRealMatrix:toString:null#[final, StringBuilder, res, new, StringBuilder, String, fullClassName, getClass, getName, String, shortClassName, fullClassName, substring, +, fullClassName, lastIndexOf, '.', 1, res, append, shortClassName, res, append, DEFAULT_FORMAT, format, this, return, res, toString]
org.apache.commons.math4.linear:AbstractRealMatrix:equals:Object#[if, ==, object, this, return, true, if, ==, instanceof, object, RealMatrix, false, return, false, RealMatrix, m, RealMatrix, object, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, ||, !=, m, getColumnDimension, nCols, !=, m, getRowDimension, nRows, return, false, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, if, !=, getEntry, row, col, m, getEntry, row, col, return, false, return, true]
org.apache.commons.math4.linear:AbstractRealMatrix:hashCode:null#[int, ret, 7, final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, =, ret, +, *, ret, 31, nRows, =, ret, +, *, ret, 31, nCols, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, =, ret, +, *, ret, 31, *, +, *, 11, +, row, 1, *, 17, +, col, 1, MathUtils, hash, getEntry, row, col, return, ret]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:createMatrix:int+int#[return, new, Array2DRowFieldMatrix, T, getField, rowDimension, columnDimension]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:copy:null#[return, new, Array2DRowFieldMatrix, T, getField, copyOut, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:add:Array2DRowFieldMatrix<T>#[checkAdditionCompatible, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, T, outData, MathArrays, buildArray, getField, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, final, T, dataRow, data, row, final, T, mRow, m.data, row, final, T, outDataRow, outData, row, for, int, col, 0, <, col, columnCount, ++, col, =, outDataRow, col, dataRow, col, add, mRow, col, return, new, Array2DRowFieldMatrix, T, getField, outData, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:subtract:Array2DRowFieldMatrix<T>#[checkSubtractionCompatible, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, T, outData, MathArrays, buildArray, getField, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, final, T, dataRow, data, row, final, T, mRow, m.data, row, final, T, outDataRow, outData, row, for, int, col, 0, <, col, columnCount, ++, col, =, outDataRow, col, dataRow, col, subtract, mRow, col, return, new, Array2DRowFieldMatrix, T, getField, outData, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:multiply:Array2DRowFieldMatrix<T>#[checkMultiplicationCompatible, m, final, int, nRows, this, getRowDimension, final, int, nCols, m, getColumnDimension, final, int, nSum, this, getColumnDimension, final, T, outData, MathArrays, buildArray, getField, nRows, nCols, for, int, row, 0, <, row, nRows, ++, row, final, T, dataRow, data, row, final, T, outDataRow, outData, row, for, int, col, 0, <, col, nCols, ++, col, T, sum, getField, getZero, for, int, i, 0, <, i, nSum, ++, i, =, sum, sum, add, dataRow, i, multiply, m.data, i, col, =, outDataRow, col, sum, return, new, Array2DRowFieldMatrix, T, getField, outData, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getData:null#[return, copyOut]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getDataRef:null#[return, data]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:setSubMatrix:T[][]+int+int#[if, ==, data, null, if, >, row, 0, throw, new, MathIllegalStateException, LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row, if, >, column, 0, throw, new, MathIllegalStateException, LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column, final, int, nRows, subMatrix.length, if, ==, nRows, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, final, int, nCols, subMatrix, 0, length, if, ==, nCols, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, =, data, MathArrays, buildArray, getField, subMatrix.length, nCols, for, int, i, 0, <, i, data.length, ++, i, if, !=, subMatrix, i, length, nCols, throw, new, DimensionMismatchException, nCols, subMatrix, i, length, System, arraycopy, subMatrix, i, 0, data, +, i, row, column, nCols, super, setSubMatrix, subMatrix, row, column]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getEntry:int+int#[checkRowIndex, row, checkColumnIndex, column, return, data, row, column]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:setEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, =, data, row, column, value]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:addToEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, =, data, row, column, data, row, column, add, increment]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:multiplyEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, =, data, row, column, data, row, column, multiply, factor]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getRowDimension:null#[return, ==, data, null, 0, data.length]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getColumnDimension:null#[return, ||, ==, data, null, ==, data, 0, null, 0, data, 0, length]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:operate:T[]#[final, int, nRows, this, getRowDimension, final, int, nCols, this, getColumnDimension, if, !=, v.length, nCols, throw, new, DimensionMismatchException, v.length, nCols, final, T, out, MathArrays, buildArray, getField, nRows, for, int, row, 0, <, row, nRows, ++, row, final, T, dataRow, data, row, T, sum, getField, getZero, for, int, i, 0, <, i, nCols, ++, i, =, sum, sum, add, dataRow, i, multiply, v, i, =, out, row, sum, return, out]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:preMultiply:T[]#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v.length, nRows, throw, new, DimensionMismatchException, v.length, nRows, final, T, out, MathArrays, buildArray, getField, nCols, for, int, col, 0, <, col, nCols, ++, col, T, sum, getField, getZero, for, int, i, 0, <, i, nRows, ++, i, =, sum, sum, add, data, i, col, multiply, v, i, =, out, col, sum, return, out]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, i, 0, <, i, rows, ++, i, final, T, rowI, data, i, for, int, j, 0, <, j, columns, ++, j, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, i, 0, <, i, rows, ++, i, final, T, rowI, data, i, for, int, j, 0, <, j, columns, ++, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, i, startRow, <=, i, endRow, ++, i, final, T, rowI, data, i, for, int, j, startColumn, <=, j, endColumn, ++, j, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, i, startRow, <=, i, endRow, ++, i, final, T, rowI, data, i, for, int, j, startColumn, <=, j, endColumn, ++, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, j, 0, <, j, columns, ++, j, for, int, i, 0, <, i, rows, ++, i, final, T, rowI, data, i, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, j, 0, <, j, columns, ++, j, for, int, i, 0, <, i, rows, ++, i, visitor, visit, i, j, data, i, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, j, startColumn, <=, j, endColumn, ++, j, for, int, i, startRow, <=, i, endRow, ++, i, final, T, rowI, data, i, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, j, startColumn, <=, j, endColumn, ++, j, for, int, i, startRow, <=, i, endRow, ++, i, visitor, visit, i, j, data, i, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:copyOut:null#[final, int, nRows, this, getRowDimension, final, T, out, MathArrays, buildArray, getField, nRows, getColumnDimension, for, int, i, 0, <, i, nRows, ++, i, System, arraycopy, data, i, 0, out, i, 0, data, i, length, return, out]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:copyIn:T[][]#[setSubMatrix, in, 0, 0]
org.apache.commons.math4.linear:Array2DRowRealMatrix:createMatrix:int+int#[return, new, Array2DRowRealMatrix, rowDimension, columnDimension]
org.apache.commons.math4.linear:Array2DRowRealMatrix:copy:null#[return, new, Array2DRowRealMatrix, copyOut, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:add:Array2DRowRealMatrix#[MatrixUtils, checkAdditionCompatible, this, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, double, outData, double, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, final, double, dataRow, data, row, final, double, mRow, m.data, row, final, double, outDataRow, outData, row, for, int, col, 0, <, col, columnCount, ++, col, =, outDataRow, col, +, dataRow, col, mRow, col, return, new, Array2DRowRealMatrix, outData, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:subtract:Array2DRowRealMatrix#[MatrixUtils, checkSubtractionCompatible, this, m, final, int, rowCount, getRowDimension, final, int, columnCount, getColumnDimension, final, double, outData, double, rowCount, columnCount, for, int, row, 0, <, row, rowCount, ++, row, final, double, dataRow, data, row, final, double, mRow, m.data, row, final, double, outDataRow, outData, row, for, int, col, 0, <, col, columnCount, ++, col, =, outDataRow, col, -, dataRow, col, mRow, col, return, new, Array2DRowRealMatrix, outData, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:multiply:Array2DRowRealMatrix#[MatrixUtils, checkMultiplicationCompatible, this, m, final, int, nRows, this, getRowDimension, final, int, nCols, m, getColumnDimension, final, int, nSum, this, getColumnDimension, final, double, outData, double, nRows, nCols, final, double, mCol, double, nSum, final, double, mData, m.data, for, int, col, 0, <, col, nCols, ++, col, for, int, mRow, 0, <, mRow, nSum, ++, mRow, =, mCol, mRow, mData, mRow, col, for, int, row, 0, <, row, nRows, ++, row, final, double, dataRow, data, row, double, sum, 0, for, int, i, 0, <, i, nSum, ++, i, +=, sum, *, dataRow, i, mCol, i, =, outData, row, col, sum, return, new, Array2DRowRealMatrix, outData, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getData:null#[return, copyOut]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getDataRef:null#[return, data]
org.apache.commons.math4.linear:Array2DRowRealMatrix:setSubMatrix:double[][]+int+int#[if, ==, data, null, if, >, row, 0, throw, new, MathIllegalStateException, LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row, if, >, column, 0, throw, new, MathIllegalStateException, LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column, MathUtils, checkNotNull, subMatrix, final, int, nRows, subMatrix.length, if, ==, nRows, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, final, int, nCols, subMatrix, 0, length, if, ==, nCols, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, =, data, double, subMatrix.length, nCols, for, int, i, 0, <, i, data.length, ++, i, if, !=, subMatrix, i, length, nCols, throw, new, DimensionMismatchException, subMatrix, i, length, nCols, System, arraycopy, subMatrix, i, 0, data, +, i, row, column, nCols, super, setSubMatrix, subMatrix, row, column]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getEntry:int+int#[MatrixUtils, checkMatrixIndex, this, row, column, return, data, row, column]
org.apache.commons.math4.linear:Array2DRowRealMatrix:setEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, =, data, row, column, value]
org.apache.commons.math4.linear:Array2DRowRealMatrix:addToEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, +=, data, row, column, increment]
org.apache.commons.math4.linear:Array2DRowRealMatrix:multiplyEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, *=, data, row, column, factor]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getRowDimension:null#[return, ==, data, null, 0, data.length]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getColumnDimension:null#[return, ||, ==, data, null, ==, data, 0, null, 0, data, 0, length]
org.apache.commons.math4.linear:Array2DRowRealMatrix:operate:double[]#[final, int, nRows, this, getRowDimension, final, int, nCols, this, getColumnDimension, if, !=, v.length, nCols, throw, new, DimensionMismatchException, v.length, nCols, final, double, out, double, nRows, for, int, row, 0, <, row, nRows, ++, row, final, double, dataRow, data, row, double, sum, 0, for, int, i, 0, <, i, nCols, ++, i, +=, sum, *, dataRow, i, v, i, =, out, row, sum, return, out]
org.apache.commons.math4.linear:Array2DRowRealMatrix:preMultiply:double[]#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, if, !=, v.length, nRows, throw, new, DimensionMismatchException, v.length, nRows, final, double, out, double, nCols, for, int, col, 0, <, col, nCols, ++, col, double, sum, 0, for, int, i, 0, <, i, nRows, ++, i, +=, sum, *, data, i, col, v, i, =, out, col, sum, return, out]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixChangingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, i, 0, <, i, rows, ++, i, final, double, rowI, data, i, for, int, j, 0, <, j, columns, ++, j, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, i, 0, <, i, rows, ++, i, final, double, rowI, data, i, for, int, j, 0, <, j, columns, ++, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixChangingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, i, startRow, <=, i, endRow, ++, i, final, double, rowI, data, i, for, int, j, startColumn, <=, j, endColumn, ++, j, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, i, startRow, <=, i, endRow, ++, i, final, double, rowI, data, i, for, int, j, startColumn, <=, j, endColumn, ++, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, j, 0, <, j, columns, ++, j, for, int, i, 0, <, i, rows, ++, i, final, double, rowI, data, i, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor#[final, int, rows, getRowDimension, final, int, columns, getColumnDimension, visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, j, 0, <, j, columns, ++, j, for, int, i, 0, <, i, rows, ++, i, visitor, visit, i, j, data, i, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, j, startColumn, <=, j, endColumn, ++, j, for, int, i, startRow, <=, i, endRow, ++, i, final, double, rowI, data, i, =, rowI, j, visitor, visit, i, j, rowI, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, for, int, j, startColumn, <=, j, endColumn, ++, j, for, int, i, startRow, <=, i, endRow, ++, i, visitor, visit, i, j, data, i, j, return, visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:copyOut:null#[final, int, nRows, this, getRowDimension, final, double, out, double, nRows, this, getColumnDimension, for, int, i, 0, <, i, nRows, ++, i, System, arraycopy, data, i, 0, out, i, 0, data, i, length, return, out]
org.apache.commons.math4.linear:Array2DRowRealMatrix:copyIn:double[][]#[setSubMatrix, in, 0, 0]
org.apache.commons.math4.linear:ArrayFieldVector:getField:null#[return, field]
org.apache.commons.math4.linear:ArrayFieldVector:copy:null#[return, new, ArrayFieldVector, T, this, true]
org.apache.commons.math4.linear:ArrayFieldVector:add:FieldVector<T>#[try, return, add, ArrayFieldVector, T, v, catch, ClassCastException, cce, checkVectorDimensions, v, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, add, v, getEntry, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:add:ArrayFieldVector<T>#[checkVectorDimensions, v.data.length, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, add, v.data, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:subtract:FieldVector<T>#[try, return, subtract, ArrayFieldVector, T, v, catch, ClassCastException, cce, checkVectorDimensions, v, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, subtract, v, getEntry, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:subtract:ArrayFieldVector<T>#[checkVectorDimensions, v.data.length, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, subtract, v.data, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapAdd:T#[T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, add, d, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapAddToSelf:T#[for, int, i, 0, <, i, data.length, ++, i, =, data, i, data, i, add, d, return, this]
org.apache.commons.math4.linear:ArrayFieldVector:mapSubtract:T#[T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, subtract, d, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapSubtractToSelf:T#[for, int, i, 0, <, i, data.length, ++, i, =, data, i, data, i, subtract, d, return, this]
org.apache.commons.math4.linear:ArrayFieldVector:mapMultiply:T#[T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, multiply, d, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapMultiplyToSelf:T#[for, int, i, 0, <, i, data.length, ++, i, =, data, i, data, i, multiply, d, return, this]
org.apache.commons.math4.linear:ArrayFieldVector:mapDivide:T#[MathUtils, checkNotNull, d, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, divide, d, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapDivideToSelf:T#[MathUtils, checkNotNull, d, for, int, i, 0, <, i, data.length, ++, i, =, data, i, data, i, divide, d, return, this]
org.apache.commons.math4.linear:ArrayFieldVector:mapInv:null#[T, out, MathArrays, buildArray, field, data.length, final, T, one, field, getOne, for, int, i, 0, <, i, data.length, ++, i, try, =, out, i, one, divide, data, i, catch, final, MathArithmeticException, e, throw, new, MathArithmeticException, LocalizedFormats.INDEX, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapInvToSelf:null#[final, T, one, field, getOne, for, int, i, 0, <, i, data.length, ++, i, try, =, data, i, one, divide, data, i, catch, final, MathArithmeticException, e, throw, new, MathArithmeticException, LocalizedFormats.INDEX, i, return, this]
org.apache.commons.math4.linear:ArrayFieldVector:ebeMultiply:FieldVector<T>#[try, return, ebeMultiply, ArrayFieldVector, T, v, catch, ClassCastException, cce, checkVectorDimensions, v, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, multiply, v, getEntry, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:ebeMultiply:ArrayFieldVector<T>#[checkVectorDimensions, v.data.length, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, =, out, i, data, i, multiply, v.data, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:ebeDivide:FieldVector<T>#[try, return, ebeDivide, ArrayFieldVector, T, v, catch, ClassCastException, cce, checkVectorDimensions, v, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, try, =, out, i, data, i, divide, v, getEntry, i, catch, final, MathArithmeticException, e, throw, new, MathArithmeticException, LocalizedFormats.INDEX, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:ebeDivide:ArrayFieldVector<T>#[checkVectorDimensions, v.data.length, T, out, MathArrays, buildArray, field, data.length, for, int, i, 0, <, i, data.length, ++, i, try, =, out, i, data, i, divide, v.data, i, catch, final, MathArithmeticException, e, throw, new, MathArithmeticException, LocalizedFormats.INDEX, i, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:getDataRef:null#[return, data]
org.apache.commons.math4.linear:ArrayFieldVector:dotProduct:FieldVector<T>#[try, return, dotProduct, ArrayFieldVector, T, v, catch, ClassCastException, cce, checkVectorDimensions, v, T, dot, field, getZero, for, int, i, 0, <, i, data.length, ++, i, =, dot, dot, add, data, i, multiply, v, getEntry, i, return, dot]
org.apache.commons.math4.linear:ArrayFieldVector:dotProduct:ArrayFieldVector<T>#[checkVectorDimensions, v.data.length, T, dot, field, getZero, for, int, i, 0, <, i, data.length, ++, i, =, dot, dot, add, data, i, multiply, v.data, i, return, dot]
org.apache.commons.math4.linear:ArrayFieldVector:projection:FieldVector<T>#[return, v, mapMultiply, dotProduct, v, divide, v, dotProduct, v]
org.apache.commons.math4.linear:ArrayFieldVector:projection:ArrayFieldVector<T>#[return, ArrayFieldVector, T, v, mapMultiply, dotProduct, v, divide, v, dotProduct, v]
org.apache.commons.math4.linear:ArrayFieldVector:outerProduct:FieldVector<T>#[try, return, outerProduct, ArrayFieldVector, T, v, catch, ClassCastException, cce, final, int, m, data.length, final, int, n, v, getDimension, final, FieldMatrix, T, out, new, Array2DRowFieldMatrix, T, field, m, n, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, n, ++, j, out, setEntry, i, j, data, i, multiply, v, getEntry, j, return, out]
org.apache.commons.math4.linear:ArrayFieldVector:outerProduct:ArrayFieldVector<T>#[final, int, m, data.length, final, int, n, v.data.length, final, FieldMatrix, T, out, new, Array2DRowFieldMatrix, T, field, m, n, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, n, ++, j, out, setEntry, i, j, data, i, multiply, v.data, j, return, out]
org.apache.commons.math4.linear:ArrayFieldVector:getEntry:int#[return, data, index]
org.apache.commons.math4.linear:ArrayFieldVector:getDimension:null#[return, data.length]
org.apache.commons.math4.linear:ArrayFieldVector:append:FieldVector<T>#[try, return, append, ArrayFieldVector, T, v, catch, ClassCastException, cce, return, new, ArrayFieldVector, T, this, new, ArrayFieldVector, T, v]
org.apache.commons.math4.linear:ArrayFieldVector:append:ArrayFieldVector<T>#[return, new, ArrayFieldVector, T, this, v]
org.apache.commons.math4.linear:ArrayFieldVector:append:T#[final, T, out, MathArrays, buildArray, field, +, data.length, 1, System, arraycopy, data, 0, out, 0, data.length, =, out, data.length, in, return, new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:getSubVector:int+int#[if, <, n, 0, throw, new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, ArrayFieldVector, T, out, new, ArrayFieldVector, T, field, n, try, System, arraycopy, data, index, out.data, 0, n, catch, IndexOutOfBoundsException, e, checkIndex, index, checkIndex, -, +, index, n, 1, return, out]
org.apache.commons.math4.linear:ArrayFieldVector:setEntry:int+T#[try, =, data, index, value, catch, IndexOutOfBoundsException, e, checkIndex, index]
org.apache.commons.math4.linear:ArrayFieldVector:setSubVector:int+FieldVector<T>#[try, try, set, index, ArrayFieldVector, T, v, catch, ClassCastException, cce, for, int, i, index, <, i, +, index, v, getDimension, ++, i, =, data, i, v, getEntry, -, i, index, catch, IndexOutOfBoundsException, e, checkIndex, index, checkIndex, -, +, index, v, getDimension, 1]
org.apache.commons.math4.linear:ArrayFieldVector:set:int+ArrayFieldVector<T>#[try, System, arraycopy, v.data, 0, data, index, v.data.length, catch, IndexOutOfBoundsException, e, checkIndex, index, checkIndex, -, +, index, v.data.length, 1]
org.apache.commons.math4.linear:ArrayFieldVector:set:T#[Arrays, fill, data, value]
org.apache.commons.math4.linear:ArrayFieldVector:toArray:null#[return, data, clone]
org.apache.commons.math4.linear:ArrayFieldVector:checkVectorDimensions:FieldVector<T>#[checkVectorDimensions, v, getDimension]
org.apache.commons.math4.linear:ArrayFieldVector:checkVectorDimensions:int#[if, !=, data.length, n, throw, new, DimensionMismatchException, data.length, n]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>#[final, int, dim, getDimension, visitor, start, dim, 0, -, dim, 1, for, int, i, 0, <, i, dim, ++, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>+int+int#[checkIndices, start, end, visitor, start, getDimension, start, end, for, int, i, start, <=, i, end, ++, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>#[final, int, dim, getDimension, visitor, start, dim, 0, -, dim, 1, for, int, i, 0, <, i, dim, ++, i, setEntry, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>+int+int#[checkIndices, start, end, visitor, start, getDimension, start, end, for, int, i, start, <=, i, end, ++, i, setEntry, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:ArrayFieldVector:equals:Object#[if, ==, this, other, return, true, if, ==, other, null, return, false, try, SuppressWarnings, "unchecked", FieldVector, T, rhs, FieldVector, T, other, if, !=, data.length, rhs, getDimension, return, false, for, int, i, 0, <, i, data.length, ++, i, if, !, data, i, equals, rhs, getEntry, i, return, false, return, true, catch, ClassCastException, ex, return, false]
org.apache.commons.math4.linear:ArrayFieldVector:hashCode:null#[int, h, 3542, for, final, T, a, data, ^=, h, a, hashCode, return, h]
org.apache.commons.math4.linear:ArrayFieldVector:checkIndex:int#[if, ||, <, index, 0, >=, index, getDimension, throw, new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, -, getDimension, 1]
org.apache.commons.math4.linear:ArrayFieldVector:checkIndices:int+int#[final, int, dim, getDimension, if, ||, <, start, 0, >=, start, dim, throw, new, OutOfRangeException, LocalizedFormats.INDEX, start, 0, -, dim, 1, if, ||, <, end, 0, >=, end, dim, throw, new, OutOfRangeException, LocalizedFormats.INDEX, end, 0, -, dim, 1, if, <, end, start, throw, new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false]
org.apache.commons.math4.linear:ArrayRealVector:copy:null#[return, new, ArrayRealVector, this, true]
org.apache.commons.math4.linear:ArrayRealVector:add:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, final, int, dim, vData.length, checkVectorDimensions, dim, ArrayRealVector, result, new, ArrayRealVector, dim, double, resultData, result.data, for, int, i, 0, <, i, dim, ++, i, =, resultData, i, +, data, i, vData, i, return, result, checkVectorDimensions, v, double, out, data, clone, Iterator, Entry, it, v, iterator, while, it, hasNext, final, Entry, e, it, next, +=, out, e, getIndex, e, getValue, return, new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:subtract:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, final, int, dim, vData.length, checkVectorDimensions, dim, ArrayRealVector, result, new, ArrayRealVector, dim, double, resultData, result.data, for, int, i, 0, <, i, dim, ++, i, =, resultData, i, -, data, i, vData, i, return, result, checkVectorDimensions, v, double, out, data, clone, Iterator, Entry, it, v, iterator, while, it, hasNext, final, Entry, e, it, next, -=, out, e, getIndex, e, getValue, return, new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:map:UnivariateFunction#[return, copy, mapToSelf, function]
org.apache.commons.math4.linear:ArrayRealVector:mapToSelf:UnivariateFunction#[for, int, i, 0, <, i, data.length, ++, i, =, data, i, function, value, data, i, return, this]
org.apache.commons.math4.linear:ArrayRealVector:mapAddToSelf:double#[for, int, i, 0, <, i, data.length, ++, i, +=, data, i, d, return, this]
org.apache.commons.math4.linear:ArrayRealVector:mapSubtractToSelf:double#[for, int, i, 0, <, i, data.length, ++, i, -=, data, i, d, return, this]
org.apache.commons.math4.linear:ArrayRealVector:mapMultiplyToSelf:double#[for, int, i, 0, <, i, data.length, ++, i, *=, data, i, d, return, this]
org.apache.commons.math4.linear:ArrayRealVector:mapDivideToSelf:double#[for, int, i, 0, <, i, data.length, ++, i, /=, data, i, d, return, this]
org.apache.commons.math4.linear:ArrayRealVector:ebeMultiply:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, final, int, dim, vData.length, checkVectorDimensions, dim, ArrayRealVector, result, new, ArrayRealVector, dim, double, resultData, result.data, for, int, i, 0, <, i, dim, ++, i, =, resultData, i, *, data, i, vData, i, return, result, checkVectorDimensions, v, double, out, data, clone, for, int, i, 0, <, i, data.length, ++, i, *=, out, i, v, getEntry, i, return, new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:ebeDivide:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, final, int, dim, vData.length, checkVectorDimensions, dim, ArrayRealVector, result, new, ArrayRealVector, dim, double, resultData, result.data, for, int, i, 0, <, i, dim, ++, i, =, resultData, i, /, data, i, vData, i, return, result, checkVectorDimensions, v, double, out, data, clone, for, int, i, 0, <, i, data.length, ++, i, /=, out, i, v, getEntry, i, return, new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:getDataRef:null#[return, data]
org.apache.commons.math4.linear:ArrayRealVector:dotProduct:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, checkVectorDimensions, vData.length, double, dot, 0, for, int, i, 0, <, i, data.length, ++, i, +=, dot, *, data, i, vData, i, return, dot, return, super, dotProduct, v]
org.apache.commons.math4.linear:ArrayRealVector:getNorm:null#[double, sum, 0, for, double, a, data, +=, sum, *, a, a, return, FastMath, sqrt, sum]
org.apache.commons.math4.linear:ArrayRealVector:getL1Norm:null#[double, sum, 0, for, double, a, data, +=, sum, FastMath, abs, a, return, sum]
org.apache.commons.math4.linear:ArrayRealVector:getLInfNorm:null#[double, max, 0, for, double, a, data, =, max, FastMath, max, max, FastMath, abs, a, return, max]
org.apache.commons.math4.linear:ArrayRealVector:getDistance:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, checkVectorDimensions, vData.length, double, sum, 0, for, int, i, 0, <, i, data.length, ++, i, final, double, delta, -, data, i, vData, i, +=, sum, *, delta, delta, return, FastMath, sqrt, sum, checkVectorDimensions, v, double, sum, 0, for, int, i, 0, <, i, data.length, ++, i, final, double, delta, -, data, i, v, getEntry, i, +=, sum, *, delta, delta, return, FastMath, sqrt, sum]
org.apache.commons.math4.linear:ArrayRealVector:getL1Distance:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, checkVectorDimensions, vData.length, double, sum, 0, for, int, i, 0, <, i, data.length, ++, i, final, double, delta, -, data, i, vData, i, +=, sum, FastMath, abs, delta, return, sum, checkVectorDimensions, v, double, sum, 0, for, int, i, 0, <, i, data.length, ++, i, final, double, delta, -, data, i, v, getEntry, i, +=, sum, FastMath, abs, delta, return, sum]
org.apache.commons.math4.linear:ArrayRealVector:getLInfDistance:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, checkVectorDimensions, vData.length, double, max, 0, for, int, i, 0, <, i, data.length, ++, i, final, double, delta, -, data, i, vData, i, =, max, FastMath, max, max, FastMath, abs, delta, return, max, checkVectorDimensions, v, double, max, 0, for, int, i, 0, <, i, data.length, ++, i, final, double, delta, -, data, i, v, getEntry, i, =, max, FastMath, max, max, FastMath, abs, delta, return, max]
org.apache.commons.math4.linear:ArrayRealVector:outerProduct:RealVector#[if, instanceof, v, ArrayRealVector, final, double, vData, ArrayRealVector, v, data, final, int, m, data.length, final, int, n, vData.length, final, RealMatrix, out, MatrixUtils, createRealMatrix, m, n, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, n, ++, j, out, setEntry, i, j, *, data, i, vData, j, return, out, final, int, m, data.length, final, int, n, v, getDimension, final, RealMatrix, out, MatrixUtils, createRealMatrix, m, n, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, n, ++, j, out, setEntry, i, j, *, data, i, v, getEntry, j, return, out]
org.apache.commons.math4.linear:ArrayRealVector:getEntry:int#[try, return, data, index, catch, IndexOutOfBoundsException, e, throw, new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, -, getDimension, 1]
org.apache.commons.math4.linear:ArrayRealVector:getDimension:null#[return, data.length]
org.apache.commons.math4.linear:ArrayRealVector:append:RealVector#[try, return, new, ArrayRealVector, this, ArrayRealVector, v, catch, ClassCastException, cce, return, new, ArrayRealVector, this, v]
org.apache.commons.math4.linear:ArrayRealVector:append:ArrayRealVector#[return, new, ArrayRealVector, this, v]
org.apache.commons.math4.linear:ArrayRealVector:append:double#[final, double, out, double, +, data.length, 1, System, arraycopy, data, 0, out, 0, data.length, =, out, data.length, in, return, new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:getSubVector:int+int#[if, <, n, 0, throw, new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, ArrayRealVector, out, new, ArrayRealVector, n, try, System, arraycopy, data, index, out.data, 0, n, catch, IndexOutOfBoundsException, e, checkIndex, index, checkIndex, -, +, index, n, 1, return, out]
org.apache.commons.math4.linear:ArrayRealVector:setEntry:int+double#[try, =, data, index, value, catch, IndexOutOfBoundsException, e, checkIndex, index]
org.apache.commons.math4.linear:ArrayRealVector:addToEntry:int+double#[try, +=, data, index, increment, catch, IndexOutOfBoundsException, e, throw, new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, -, data.length, 1]
org.apache.commons.math4.linear:ArrayRealVector:setSubVector:int+RealVector#[if, instanceof, v, ArrayRealVector, setSubVector, index, ArrayRealVector, v, data, try, for, int, i, index, <, i, +, index, v, getDimension, ++, i, =, data, i, v, getEntry, -, i, index, catch, IndexOutOfBoundsException, e, checkIndex, index, checkIndex, -, +, index, v, getDimension, 1]
org.apache.commons.math4.linear:ArrayRealVector:setSubVector:int+double[]#[try, System, arraycopy, v, 0, data, index, v.length, catch, IndexOutOfBoundsException, e, checkIndex, index, checkIndex, -, +, index, v.length, 1]
org.apache.commons.math4.linear:ArrayRealVector:set:double#[Arrays, fill, data, value]
org.apache.commons.math4.linear:ArrayRealVector:toArray:null#[return, data, clone]
org.apache.commons.math4.linear:ArrayRealVector:toString:null#[return, DEFAULT_FORMAT, format, this]
org.apache.commons.math4.linear:ArrayRealVector:checkVectorDimensions:RealVector#[checkVectorDimensions, v, getDimension]
org.apache.commons.math4.linear:ArrayRealVector:checkVectorDimensions:int#[if, !=, data.length, n, throw, new, DimensionMismatchException, data.length, n]
org.apache.commons.math4.linear:ArrayRealVector:isNaN:null#[for, double, v, data, if, Double, isNaN, v, return, true, return, false]
org.apache.commons.math4.linear:ArrayRealVector:isInfinite:null#[if, isNaN, return, false, for, double, v, data, if, Double, isInfinite, v, return, true, return, false]
org.apache.commons.math4.linear:ArrayRealVector:equals:Object#[if, ==, this, other, return, true, if, !, instanceof, other, RealVector, return, false, RealVector, rhs, RealVector, other, if, !=, data.length, rhs, getDimension, return, false, if, rhs, isNaN, return, this, isNaN, for, int, i, 0, <, i, data.length, ++, i, if, !=, data, i, rhs, getEntry, i, return, false, return, true]
org.apache.commons.math4.linear:ArrayRealVector:hashCode:null#[if, isNaN, return, 9, return, MathUtils, hash, data]
org.apache.commons.math4.linear:ArrayRealVector:combine:double+double+RealVector#[return, copy, combineToSelf, a, b, y]
org.apache.commons.math4.linear:ArrayRealVector:combineToSelf:double+double+RealVector#[if, instanceof, y, ArrayRealVector, final, double, yData, ArrayRealVector, y, data, checkVectorDimensions, yData.length, for, int, i, 0, <, i, this, data, length, ++, i, =, data, i, +, *, a, data, i, *, b, yData, i, checkVectorDimensions, y, for, int, i, 0, <, i, this, data, length, ++, i, =, data, i, +, *, a, data, i, *, b, y, getEntry, i, return, this]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorPreservingVisitor#[visitor, start, data.length, 0, -, data.length, 1, for, int, i, 0, <, i, data.length, ++, i, visitor, visit, i, data, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorPreservingVisitor+int+int#[checkIndices, start, end, visitor, start, data.length, start, end, for, int, i, start, <=, i, end, ++, i, visitor, visit, i, data, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorPreservingVisitor#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorPreservingVisitor+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorChangingVisitor#[visitor, start, data.length, 0, -, data.length, 1, for, int, i, 0, <, i, data.length, ++, i, =, data, i, visitor, visit, i, data, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorChangingVisitor+int+int#[checkIndices, start, end, visitor, start, data.length, start, end, for, int, i, start, <=, i, end, ++, i, =, data, i, visitor, visit, i, data, i, return, visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorChangingVisitor#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorChangingVisitor+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:BiDiagonalTransformer:getU:null#[if, ==, cachedU, null, final, int, m, householderVectors.length, final, int, n, householderVectors, 0, length, final, int, p, main.length, final, int, diagOffset, >=, m, n, 0, 1, final, double, diagonal, >=, m, n, main, secondary, double, ua, double, m, m, for, int, k, -, m, 1, >=, k, p, --, k, =, ua, k, k, 1, for, int, k, -, p, 1, >=, k, diagOffset, --, k, final, double, hK, householderVectors, k, =, ua, k, k, 1, if, !=, hK, -, k, diagOffset, 0.0, for, int, j, k, <, j, m, ++, j, double, alpha, 0, for, int, i, k, <, i, m, ++, i, -=, alpha, *, ua, i, j, householderVectors, i, -, k, diagOffset, /=, alpha, *, diagonal, -, k, diagOffset, hK, -, k, diagOffset, for, int, i, k, <, i, m, ++, i, +=, ua, i, j, *, -, alpha, householderVectors, i, -, k, diagOffset, if, >, diagOffset, 0, =, ua, 0, 0, 1, =, cachedU, MatrixUtils, createRealMatrix, ua, return, cachedU]
org.apache.commons.math4.linear:BiDiagonalTransformer:getB:null#[if, ==, cachedB, null, final, int, m, householderVectors.length, final, int, n, householderVectors, 0, length, double, ba, double, m, n, for, int, i, 0, <, i, main.length, ++, i, =, ba, i, i, main, i, if, <, m, n, if, >, i, 0, =, ba, i, -, i, 1, secondary, -, i, 1, if, <, i, -, main.length, 1, =, ba, i, +, i, 1, secondary, i, =, cachedB, MatrixUtils, createRealMatrix, ba, return, cachedB]
org.apache.commons.math4.linear:BiDiagonalTransformer:getV:null#[if, ==, cachedV, null, final, int, m, householderVectors.length, final, int, n, householderVectors, 0, length, final, int, p, main.length, final, int, diagOffset, >=, m, n, 1, 0, final, double, diagonal, >=, m, n, secondary, main, double, va, double, n, n, for, int, k, -, n, 1, >=, k, p, --, k, =, va, k, k, 1, for, int, k, -, p, 1, >=, k, diagOffset, --, k, final, double, hK, householderVectors, -, k, diagOffset, =, va, k, k, 1, if, !=, hK, k, 0.0, for, int, j, k, <, j, n, ++, j, double, beta, 0, for, int, i, k, <, i, n, ++, i, -=, beta, *, va, i, j, hK, i, /=, beta, *, diagonal, -, k, diagOffset, hK, k, for, int, i, k, <, i, n, ++, i, +=, va, i, j, *, -, beta, hK, i, if, >, diagOffset, 0, =, va, 0, 0, 1, =, cachedV, MatrixUtils, createRealMatrix, va, return, cachedV]
org.apache.commons.math4.linear:BiDiagonalTransformer:getHouseholderVectorsRef:null#[return, householderVectors]
org.apache.commons.math4.linear:BiDiagonalTransformer:getMainDiagonalRef:null#[return, main]
org.apache.commons.math4.linear:BiDiagonalTransformer:getSecondaryDiagonalRef:null#[return, secondary]
org.apache.commons.math4.linear:BiDiagonalTransformer:isUpperBiDiagonal:null#[return, >=, householderVectors.length, householderVectors, 0, length]
org.apache.commons.math4.linear:BiDiagonalTransformer:transformToUpperBiDiagonal:null#[final, int, m, householderVectors.length, final, int, n, householderVectors, 0, length, for, int, k, 0, <, k, n, ++, k, double, xNormSqr, 0, for, int, i, k, <, i, m, ++, i, final, double, c, householderVectors, i, k, +=, xNormSqr, *, c, c, final, double, hK, householderVectors, k, final, double, a, >, hK, k, 0, -, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, =, main, k, a, if, !=, a, 0.0, -=, hK, k, a, for, int, j, +, k, 1, <, j, n, ++, j, double, alpha, 0, for, int, i, k, <, i, m, ++, i, final, double, hI, householderVectors, i, -=, alpha, *, hI, j, hI, k, /=, alpha, *, a, householderVectors, k, k, for, int, i, k, <, i, m, ++, i, final, double, hI, householderVectors, i, -=, hI, j, *, alpha, hI, k, if, <, k, -, n, 1, =, xNormSqr, 0, for, int, j, +, k, 1, <, j, n, ++, j, final, double, c, hK, j, +=, xNormSqr, *, c, c, final, double, b, >, hK, +, k, 1, 0, -, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, =, secondary, k, b, if, !=, b, 0.0, -=, hK, +, k, 1, b, for, int, i, +, k, 1, <, i, m, ++, i, final, double, hI, householderVectors, i, double, beta, 0, for, int, j, +, k, 1, <, j, n, ++, j, -=, beta, *, hI, j, hK, j, /=, beta, *, b, hK, +, k, 1, for, int, j, +, k, 1, <, j, n, ++, j, -=, hI, j, *, beta, hK, j]
org.apache.commons.math4.linear:BiDiagonalTransformer:transformToLowerBiDiagonal:null#[final, int, m, householderVectors.length, final, int, n, householderVectors, 0, length, for, int, k, 0, <, k, m, ++, k, final, double, hK, householderVectors, k, double, xNormSqr, 0, for, int, j, k, <, j, n, ++, j, final, double, c, hK, j, +=, xNormSqr, *, c, c, final, double, a, >, hK, k, 0, -, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, =, main, k, a, if, !=, a, 0.0, -=, hK, k, a, for, int, i, +, k, 1, <, i, m, ++, i, final, double, hI, householderVectors, i, double, alpha, 0, for, int, j, k, <, j, n, ++, j, -=, alpha, *, hI, j, hK, j, /=, alpha, *, a, householderVectors, k, k, for, int, j, k, <, j, n, ++, j, -=, hI, j, *, alpha, hK, j, if, <, k, -, m, 1, final, double, hKp1, householderVectors, +, k, 1, =, xNormSqr, 0, for, int, i, +, k, 1, <, i, m, ++, i, final, double, c, householderVectors, i, k, +=, xNormSqr, *, c, c, final, double, b, >, hKp1, k, 0, -, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, =, secondary, k, b, if, !=, b, 0.0, -=, hKp1, k, b, for, int, j, +, k, 1, <, j, n, ++, j, double, beta, 0, for, int, i, +, k, 1, <, i, m, ++, i, final, double, hI, householderVectors, i, -=, beta, *, hI, j, hI, k, /=, beta, *, b, hKp1, k, for, int, i, +, k, 1, <, i, m, ++, i, final, double, hI, householderVectors, i, -=, hI, j, *, beta, hI, k]
org.apache.commons.math4.linear:BlockFieldMatrix:toBlocksLayout:T[][]#[final, int, rows, rawData.length, final, int, columns, rawData, 0, length, final, int, blockRows, /, -, +, rows, BLOCK_SIZE, 1, BLOCK_SIZE, final, int, blockColumns, /, -, +, columns, BLOCK_SIZE, 1, BLOCK_SIZE, for, int, i, 0, <, i, rawData.length, ++, i, final, int, length, rawData, i, length, if, !=, length, columns, throw, new, DimensionMismatchException, columns, length, final, Field, T, field, extractField, rawData, final, T, blocks, MathArrays, buildArray, field, *, blockRows, blockColumns, -, 1, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, iHeight, -, pEnd, pStart, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, int, jWidth, -, qEnd, qStart, final, T, block, MathArrays, buildArray, field, *, iHeight, jWidth, =, blocks, blockIndex, block, int, index, 0, for, int, p, pStart, <, p, pEnd, ++, p, System, arraycopy, rawData, p, qStart, block, index, jWidth, +=, index, jWidth, ++, blockIndex, return, blocks]
org.apache.commons.math4.linear:BlockFieldMatrix:createBlocksLayout:Field<T>+int+int#[final, int, blockRows, /, -, +, rows, BLOCK_SIZE, 1, BLOCK_SIZE, final, int, blockColumns, /, -, +, columns, BLOCK_SIZE, 1, BLOCK_SIZE, final, T, blocks, MathArrays, buildArray, field, *, blockRows, blockColumns, -, 1, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, iHeight, -, pEnd, pStart, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, int, jWidth, -, qEnd, qStart, =, blocks, blockIndex, MathArrays, buildArray, field, *, iHeight, jWidth, ++, blockIndex, return, blocks]
org.apache.commons.math4.linear:BlockFieldMatrix:createMatrix:int+int#[return, new, BlockFieldMatrix, T, getField, rowDimension, columnDimension]
org.apache.commons.math4.linear:BlockFieldMatrix:copy:null#[BlockFieldMatrix, T, copied, new, BlockFieldMatrix, T, getField, rows, columns, for, int, i, 0, <, i, blocks.length, ++, i, System, arraycopy, blocks, i, 0, copied.blocks, i, 0, blocks, i, length, return, copied]
org.apache.commons.math4.linear:BlockFieldMatrix:add:FieldMatrix<T>#[try, return, add, BlockFieldMatrix, T, m, catch, ClassCastException, cce, checkAdditionCompatible, m, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, T, outBlock, out.blocks, blockIndex, final, T, tBlock, blocks, blockIndex, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, =, outBlock, k, tBlock, k, add, m, getEntry, p, q, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:add:BlockFieldMatrix<T>#[checkAdditionCompatible, m, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, T, outBlock, out.blocks, blockIndex, final, T, tBlock, blocks, blockIndex, final, T, mBlock, m.blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, tBlock, k, add, mBlock, k, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:subtract:FieldMatrix<T>#[try, return, subtract, BlockFieldMatrix, T, m, catch, ClassCastException, cce, checkSubtractionCompatible, m, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, T, outBlock, out.blocks, blockIndex, final, T, tBlock, blocks, blockIndex, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, =, outBlock, k, tBlock, k, subtract, m, getEntry, p, q, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:subtract:BlockFieldMatrix<T>#[checkSubtractionCompatible, m, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, T, outBlock, out.blocks, blockIndex, final, T, tBlock, blocks, blockIndex, final, T, mBlock, m.blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, tBlock, k, subtract, mBlock, k, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:scalarAdd:T#[final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, T, outBlock, out.blocks, blockIndex, final, T, tBlock, blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, tBlock, k, add, d, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:scalarMultiply:T#[final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, T, outBlock, out.blocks, blockIndex, final, T, tBlock, blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, tBlock, k, multiply, d, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:multiply:FieldMatrix<T>#[try, return, multiply, BlockFieldMatrix, T, m, catch, ClassCastException, cce, checkMultiplicationCompatible, m, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, m, getColumnDimension, final, T, zero, getField, getZero, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, m, getColumnDimension, final, T, outBlock, out.blocks, blockIndex, for, int, kBlock, 0, <, kBlock, blockColumns, ++, kBlock, final, int, kWidth, blockWidth, kBlock, final, T, tBlock, blocks, +, *, iBlock, blockColumns, kBlock, final, int, rStart, *, kBlock, BLOCK_SIZE, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, int, lStart, *, -, p, pStart, kWidth, final, int, lEnd, +, lStart, kWidth, for, int, q, qStart, <, q, qEnd, ++, q, T, sum, zero, int, r, rStart, for, int, l, lStart, <, l, lEnd, ++, l, =, sum, sum, add, tBlock, l, multiply, m, getEntry, r, q, ++, r, =, outBlock, k, outBlock, k, add, sum, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:multiply:BlockFieldMatrix<T>#[checkMultiplicationCompatible, m, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, m.columns, final, T, zero, getField, getZero, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, int, jWidth, out, blockWidth, jBlock, final, int, jWidth2, +, jWidth, jWidth, final, int, jWidth3, +, jWidth2, jWidth, final, int, jWidth4, +, jWidth3, jWidth, final, T, outBlock, out.blocks, blockIndex, for, int, kBlock, 0, <, kBlock, blockColumns, ++, kBlock, final, int, kWidth, blockWidth, kBlock, final, T, tBlock, blocks, +, *, iBlock, blockColumns, kBlock, final, T, mBlock, m.blocks, +, *, kBlock, m.blockColumns, jBlock, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, int, lStart, *, -, p, pStart, kWidth, final, int, lEnd, +, lStart, kWidth, for, int, nStart, 0, <, nStart, jWidth, ++, nStart, T, sum, zero, int, l, lStart, int, n, nStart, while, <, l, -, lEnd, 3, =, sum, sum, add, tBlock, l, multiply, mBlock, n, add, tBlock, +, l, 1, multiply, mBlock, +, n, jWidth, add, tBlock, +, l, 2, multiply, mBlock, +, n, jWidth2, add, tBlock, +, l, 3, multiply, mBlock, +, n, jWidth3, +=, l, 4, +=, n, jWidth4, while, <, l, lEnd, =, sum, sum, add, tBlock, ++, l, multiply, mBlock, n, +=, n, jWidth, =, outBlock, k, outBlock, k, add, sum, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:getData:null#[final, T, data, MathArrays, buildArray, getField, getRowDimension, getColumnDimension, final, int, lastColumns, -, columns, *, -, blockColumns, 1, BLOCK_SIZE, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, int, regularPos, 0, int, lastPos, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, T, dataP, data, p, int, blockIndex, *, iBlock, blockColumns, int, dataPos, 0, for, int, jBlock, 0, <, jBlock, -, blockColumns, 1, ++, jBlock, System, arraycopy, blocks, ++, blockIndex, regularPos, dataP, dataPos, BLOCK_SIZE, +=, dataPos, BLOCK_SIZE, System, arraycopy, blocks, blockIndex, lastPos, dataP, dataPos, lastColumns, +=, regularPos, BLOCK_SIZE, +=, lastPos, lastColumns, return, data]
org.apache.commons.math4.linear:BlockFieldMatrix:getSubMatrix:int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, +, -, endRow, startRow, 1, +, -, endColumn, startColumn, 1, final, int, blockStartRow, /, startRow, BLOCK_SIZE, final, int, rowsShift, %, startRow, BLOCK_SIZE, final, int, blockStartColumn, /, startColumn, BLOCK_SIZE, final, int, columnsShift, %, startColumn, BLOCK_SIZE, int, pBlock, blockStartRow, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, final, int, iHeight, out, blockHeight, iBlock, int, qBlock, blockStartColumn, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, int, jWidth, out, blockWidth, jBlock, final, int, outIndex, +, *, iBlock, out.blockColumns, jBlock, final, T, outBlock, out.blocks, outIndex, final, int, index, +, *, pBlock, blockColumns, qBlock, final, int, width, blockWidth, qBlock, final, int, heightExcess, -, +, iHeight, rowsShift, BLOCK_SIZE, final, int, widthExcess, -, +, jWidth, columnsShift, BLOCK_SIZE, if, >, heightExcess, 0, if, >, widthExcess, 0, final, int, width2, blockWidth, +, qBlock, 1, copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, copyBlockPart, blocks, +, index, 1, width2, rowsShift, BLOCK_SIZE, 0, widthExcess, outBlock, jWidth, 0, -, jWidth, widthExcess, copyBlockPart, blocks, +, index, blockColumns, width, 0, heightExcess, columnsShift, BLOCK_SIZE, outBlock, jWidth, -, iHeight, heightExcess, 0, copyBlockPart, blocks, +, index, blockColumns, 1, width2, 0, heightExcess, 0, widthExcess, outBlock, jWidth, -, iHeight, heightExcess, -, jWidth, widthExcess, copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, +, jWidth, columnsShift, outBlock, jWidth, 0, 0, copyBlockPart, blocks, +, index, blockColumns, width, 0, heightExcess, columnsShift, +, jWidth, columnsShift, outBlock, jWidth, -, iHeight, heightExcess, 0, if, >, widthExcess, 0, final, int, width2, blockWidth, +, qBlock, 1, copyBlockPart, blocks, index, width, rowsShift, +, iHeight, rowsShift, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, copyBlockPart, blocks, +, index, 1, width2, rowsShift, +, iHeight, rowsShift, 0, widthExcess, outBlock, jWidth, 0, -, jWidth, widthExcess, copyBlockPart, blocks, index, width, rowsShift, +, iHeight, rowsShift, columnsShift, +, jWidth, columnsShift, outBlock, jWidth, 0, 0, ++, qBlock, ++, pBlock, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:copyBlockPart:T[]+int+int+int+int+int+T[]+int+int+int#[final, int, length, -, srcEndColumn, srcStartColumn, int, srcPos, +, *, srcStartRow, srcWidth, srcStartColumn, int, dstPos, +, *, dstStartRow, dstWidth, dstStartColumn, for, int, srcRow, srcStartRow, <, srcRow, srcEndRow, ++, srcRow, System, arraycopy, srcBlock, srcPos, dstBlock, dstPos, length, +=, srcPos, srcWidth, +=, dstPos, dstWidth]
org.apache.commons.math4.linear:BlockFieldMatrix:setSubMatrix:T[][]+int+int#[MathUtils, checkNotNull, subMatrix, final, int, refLength, subMatrix, 0, length, if, ==, refLength, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, final, int, endRow, -, +, row, subMatrix.length, 1, final, int, endColumn, -, +, column, refLength, 1, checkSubMatrixIndex, row, endRow, column, endColumn, for, final, T, subRow, subMatrix, if, !=, subRow.length, refLength, throw, new, DimensionMismatchException, refLength, subRow.length, final, int, blockStartRow, /, row, BLOCK_SIZE, final, int, blockEndRow, /, +, endRow, BLOCK_SIZE, BLOCK_SIZE, final, int, blockStartColumn, /, column, BLOCK_SIZE, final, int, blockEndColumn, /, +, endColumn, BLOCK_SIZE, BLOCK_SIZE, for, int, iBlock, blockStartRow, <, iBlock, blockEndRow, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, int, firstRow, *, iBlock, BLOCK_SIZE, final, int, iStart, FastMath, max, row, firstRow, final, int, iEnd, FastMath, min, +, endRow, 1, +, firstRow, iHeight, for, int, jBlock, blockStartColumn, <, jBlock, blockEndColumn, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, firstColumn, *, jBlock, BLOCK_SIZE, final, int, jStart, FastMath, max, column, firstColumn, final, int, jEnd, FastMath, min, +, endColumn, 1, +, firstColumn, jWidth, final, int, jLength, -, jEnd, jStart, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, iStart, <, i, iEnd, ++, i, System, arraycopy, subMatrix, -, i, row, -, jStart, column, block, +, *, -, i, firstRow, jWidth, -, jStart, firstColumn, jLength]
org.apache.commons.math4.linear:BlockFieldMatrix:getRowMatrix:int#[checkRowIndex, row, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, 1, columns, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outBlockIndex, 0, int, outIndex, 0, T, outBlock, out.blocks, outBlockIndex, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, available, -, outBlock.length, outIndex, if, >, jWidth, available, System, arraycopy, block, *, iRow, jWidth, outBlock, outIndex, available, =, outBlock, out.blocks, ++, outBlockIndex, System, arraycopy, block, *, iRow, jWidth, outBlock, 0, -, jWidth, available, =, outIndex, -, jWidth, available, System, arraycopy, block, *, iRow, jWidth, outBlock, outIndex, jWidth, +=, outIndex, jWidth, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:setRowMatrix:int+FieldMatrix<T>#[try, setRowMatrix, row, BlockFieldMatrix, T, matrix, catch, ClassCastException, cce, super, setRowMatrix, row, matrix]
org.apache.commons.math4.linear:BlockFieldMatrix:setRowMatrix:int+BlockFieldMatrix<T>#[checkRowIndex, row, final, int, nCols, getColumnDimension, if, ||, !=, matrix, getRowDimension, 1, !=, matrix, getColumnDimension, nCols, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, mBlockIndex, 0, int, mIndex, 0, T, mBlock, matrix.blocks, mBlockIndex, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, available, -, mBlock.length, mIndex, if, >, jWidth, available, System, arraycopy, mBlock, mIndex, block, *, iRow, jWidth, available, =, mBlock, matrix.blocks, ++, mBlockIndex, System, arraycopy, mBlock, 0, block, *, iRow, jWidth, -, jWidth, available, =, mIndex, -, jWidth, available, System, arraycopy, mBlock, mIndex, block, *, iRow, jWidth, jWidth, +=, mIndex, jWidth]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumnMatrix:int#[checkColumnIndex, column, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, 1, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outBlockIndex, 0, int, outIndex, 0, T, outBlock, out.blocks, outBlockIndex, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, if, >=, outIndex, outBlock.length, =, outBlock, out.blocks, ++, outBlockIndex, =, outIndex, 0, =, outBlock, ++, outIndex, block, +, *, i, jWidth, jColumn, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumnMatrix:int+FieldMatrix<T>#[try, setColumnMatrix, column, BlockFieldMatrix, T, matrix, catch, ClassCastException, cce, super, setColumnMatrix, column, matrix]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumnMatrix:int+BlockFieldMatrix<T>#[checkColumnIndex, column, final, int, nRows, getRowDimension, if, ||, !=, matrix, getRowDimension, nRows, !=, matrix, getColumnDimension, 1, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, mBlockIndex, 0, int, mIndex, 0, T, mBlock, matrix.blocks, mBlockIndex, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, if, >=, mIndex, mBlock.length, =, mBlock, matrix.blocks, ++, mBlockIndex, =, mIndex, 0, =, block, +, *, i, jWidth, jColumn, mBlock, ++, mIndex]
org.apache.commons.math4.linear:BlockFieldMatrix:getRowVector:int#[checkRowIndex, row, final, T, outData, MathArrays, buildArray, getField, columns, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outIndex, 0, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, System, arraycopy, block, *, iRow, jWidth, outData, outIndex, jWidth, +=, outIndex, jWidth, return, new, ArrayFieldVector, T, getField, outData, false]
org.apache.commons.math4.linear:BlockFieldMatrix:setRowVector:int+FieldVector<T>#[try, setRow, row, ArrayFieldVector, T, vector, getDataRef, catch, ClassCastException, cce, super, setRowVector, row, vector]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumnVector:int#[checkColumnIndex, column, final, T, outData, MathArrays, buildArray, getField, rows, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, =, outData, ++, outIndex, block, +, *, i, jWidth, jColumn, return, new, ArrayFieldVector, T, getField, outData, false]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumnVector:int+FieldVector<T>#[try, setColumn, column, ArrayFieldVector, T, vector, getDataRef, catch, ClassCastException, cce, super, setColumnVector, column, vector]
org.apache.commons.math4.linear:BlockFieldMatrix:getRow:int#[checkRowIndex, row, final, T, out, MathArrays, buildArray, getField, columns, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outIndex, 0, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, System, arraycopy, block, *, iRow, jWidth, out, outIndex, jWidth, +=, outIndex, jWidth, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:setRow:int+T[]#[checkRowIndex, row, final, int, nCols, getColumnDimension, if, !=, array.length, nCols, throw, new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outIndex, 0, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, System, arraycopy, array, outIndex, block, *, iRow, jWidth, jWidth, +=, outIndex, jWidth]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumn:int#[checkColumnIndex, column, final, T, out, MathArrays, buildArray, getField, rows, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, =, out, ++, outIndex, block, +, *, i, jWidth, jColumn, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumn:int+T[]#[checkColumnIndex, column, final, int, nRows, getRowDimension, if, !=, array.length, nRows, throw, new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, =, block, +, *, i, jWidth, jColumn, array, ++, outIndex]
org.apache.commons.math4.linear:BlockFieldMatrix:getEntry:int+int#[checkRowIndex, row, checkColumnIndex, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, return, blocks, +, *, iBlock, blockColumns, jBlock, k]
org.apache.commons.math4.linear:BlockFieldMatrix:setEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, =, blocks, +, *, iBlock, blockColumns, jBlock, k, value]
org.apache.commons.math4.linear:BlockFieldMatrix:addToEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, final, T, blockIJ, blocks, +, *, iBlock, blockColumns, jBlock, =, blockIJ, k, blockIJ, k, add, increment]
org.apache.commons.math4.linear:BlockFieldMatrix:multiplyEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, final, T, blockIJ, blocks, +, *, iBlock, blockColumns, jBlock, =, blockIJ, k, blockIJ, k, multiply, factor]
org.apache.commons.math4.linear:BlockFieldMatrix:transpose:null#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, nCols, nRows, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockColumns, ++, iBlock, for, int, jBlock, 0, <, jBlock, blockRows, ++, jBlock, final, T, outBlock, out.blocks, blockIndex, final, T, tBlock, blocks, +, *, jBlock, blockColumns, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, columns, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, rows, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, int, lInc, -, pEnd, pStart, int, l, -, p, pStart, for, int, q, qStart, <, q, qEnd, ++, q, =, outBlock, k, tBlock, l, ++, k, +=, l, lInc, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:getRowDimension:null#[return, rows]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumnDimension:null#[return, columns]
org.apache.commons.math4.linear:BlockFieldMatrix:operate:T[]#[if, !=, v.length, columns, throw, new, DimensionMismatchException, v.length, columns, final, T, out, MathArrays, buildArray, getField, rows, final, T, zero, getField, getZero, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, T, sum, zero, int, q, qStart, while, <, q, -, qEnd, 3, =, sum, sum, add, block, k, multiply, v, q, add, block, +, k, 1, multiply, v, +, q, 1, add, block, +, k, 2, multiply, v, +, q, 2, add, block, +, k, 3, multiply, v, +, q, 3, +=, k, 4, +=, q, 4, while, <, q, qEnd, =, sum, sum, add, block, ++, k, multiply, v, ++, q, =, out, p, out, p, add, sum, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:preMultiply:T[]#[if, !=, v.length, rows, throw, new, DimensionMismatchException, v.length, rows, final, T, out, MathArrays, buildArray, getField, columns, final, T, zero, getField, getZero, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, jWidth2, +, jWidth, jWidth, final, int, jWidth3, +, jWidth2, jWidth, final, int, jWidth4, +, jWidth3, jWidth, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, q, qStart, <, q, qEnd, ++, q, int, k, -, q, qStart, T, sum, zero, int, p, pStart, while, <, p, -, pEnd, 3, =, sum, sum, add, block, k, multiply, v, p, add, block, +, k, jWidth, multiply, v, +, p, 1, add, block, +, k, jWidth2, multiply, v, +, p, 2, add, block, +, k, jWidth3, multiply, v, +, p, 3, +=, k, jWidth4, +=, p, 4, while, <, p, pEnd, =, sum, sum, add, block, k, multiply, v, ++, p, +=, k, jWidth, =, out, q, out, q, add, sum, return, out]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, *, -, p, pStart, jWidth, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, *, -, p, pStart, jWidth, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, T, block, blocks, blockIndex, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, ++, blockIndex, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, T, block, blocks, blockIndex, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, ++, blockIndex, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, p, pStart, <, p, pEnd, ++, p, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, T, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, p, pStart, <, p, pEnd, ++, p, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:blockHeight:int#[return, ==, blockRow, -, blockRows, 1, -, rows, *, blockRow, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:BlockFieldMatrix:blockWidth:int#[return, ==, blockColumn, -, blockColumns, 1, -, columns, *, blockColumn, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:BlockRealMatrix:toBlocksLayout:double[][]#[final, int, rows, rawData.length, final, int, columns, rawData, 0, length, final, int, blockRows, /, -, +, rows, BLOCK_SIZE, 1, BLOCK_SIZE, final, int, blockColumns, /, -, +, columns, BLOCK_SIZE, 1, BLOCK_SIZE, for, int, i, 0, <, i, rawData.length, ++, i, final, int, length, rawData, i, length, if, !=, length, columns, throw, new, DimensionMismatchException, columns, length, final, double, blocks, double, *, blockRows, blockColumns, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, iHeight, -, pEnd, pStart, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, int, jWidth, -, qEnd, qStart, final, double, block, double, *, iHeight, jWidth, =, blocks, blockIndex, block, int, index, 0, for, int, p, pStart, <, p, pEnd, ++, p, System, arraycopy, rawData, p, qStart, block, index, jWidth, +=, index, jWidth, ++, blockIndex, return, blocks]
org.apache.commons.math4.linear:BlockRealMatrix:createBlocksLayout:int+int#[final, int, blockRows, /, -, +, rows, BLOCK_SIZE, 1, BLOCK_SIZE, final, int, blockColumns, /, -, +, columns, BLOCK_SIZE, 1, BLOCK_SIZE, final, double, blocks, double, *, blockRows, blockColumns, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, iHeight, -, pEnd, pStart, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, int, jWidth, -, qEnd, qStart, =, blocks, blockIndex, double, *, iHeight, jWidth, ++, blockIndex, return, blocks]
org.apache.commons.math4.linear:BlockRealMatrix:createMatrix:int+int#[return, new, BlockRealMatrix, rowDimension, columnDimension]
org.apache.commons.math4.linear:BlockRealMatrix:copy:null#[BlockRealMatrix, copied, new, BlockRealMatrix, rows, columns, for, int, i, 0, <, i, blocks.length, ++, i, System, arraycopy, blocks, i, 0, copied.blocks, i, 0, blocks, i, length, return, copied]
org.apache.commons.math4.linear:BlockRealMatrix:add:RealMatrix#[try, return, add, BlockRealMatrix, m, catch, ClassCastException, cce, MatrixUtils, checkAdditionCompatible, this, m, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, double, outBlock, out.blocks, blockIndex, final, double, tBlock, blocks, blockIndex, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, =, outBlock, k, +, tBlock, k, m, getEntry, p, q, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:add:BlockRealMatrix#[MatrixUtils, checkAdditionCompatible, this, m, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, double, outBlock, out.blocks, blockIndex, final, double, tBlock, blocks, blockIndex, final, double, mBlock, m.blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, +, tBlock, k, mBlock, k, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:subtract:RealMatrix#[try, return, subtract, BlockRealMatrix, m, catch, ClassCastException, cce, MatrixUtils, checkSubtractionCompatible, this, m, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, double, outBlock, out.blocks, blockIndex, final, double, tBlock, blocks, blockIndex, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, =, outBlock, k, -, tBlock, k, m, getEntry, p, q, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:subtract:BlockRealMatrix#[MatrixUtils, checkSubtractionCompatible, this, m, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, double, outBlock, out.blocks, blockIndex, final, double, tBlock, blocks, blockIndex, final, double, mBlock, m.blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, -, tBlock, k, mBlock, k, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:scalarAdd:double#[final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, double, outBlock, out.blocks, blockIndex, final, double, tBlock, blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, +, tBlock, k, d, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:scalarMultiply:double#[final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, for, int, blockIndex, 0, <, blockIndex, out.blocks.length, ++, blockIndex, final, double, outBlock, out.blocks, blockIndex, final, double, tBlock, blocks, blockIndex, for, int, k, 0, <, k, outBlock.length, ++, k, =, outBlock, k, *, tBlock, k, d, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:multiply:RealMatrix#[try, return, multiply, BlockRealMatrix, m, catch, ClassCastException, cce, MatrixUtils, checkMultiplicationCompatible, this, m, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, m, getColumnDimension, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, m, getColumnDimension, final, double, outBlock, out.blocks, blockIndex, for, int, kBlock, 0, <, kBlock, blockColumns, ++, kBlock, final, int, kWidth, blockWidth, kBlock, final, double, tBlock, blocks, +, *, iBlock, blockColumns, kBlock, final, int, rStart, *, kBlock, BLOCK_SIZE, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, int, lStart, *, -, p, pStart, kWidth, final, int, lEnd, +, lStart, kWidth, for, int, q, qStart, <, q, qEnd, ++, q, double, sum, 0, int, r, rStart, for, int, l, lStart, <, l, lEnd, ++, l, +=, sum, *, tBlock, l, m, getEntry, r, q, ++, r, +=, outBlock, k, sum, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:multiply:BlockRealMatrix#[MatrixUtils, checkMultiplicationCompatible, this, m, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, m.columns, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, int, jWidth, out, blockWidth, jBlock, final, int, jWidth2, +, jWidth, jWidth, final, int, jWidth3, +, jWidth2, jWidth, final, int, jWidth4, +, jWidth3, jWidth, final, double, outBlock, out.blocks, blockIndex, for, int, kBlock, 0, <, kBlock, blockColumns, ++, kBlock, final, int, kWidth, blockWidth, kBlock, final, double, tBlock, blocks, +, *, iBlock, blockColumns, kBlock, final, double, mBlock, m.blocks, +, *, kBlock, m.blockColumns, jBlock, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, int, lStart, *, -, p, pStart, kWidth, final, int, lEnd, +, lStart, kWidth, for, int, nStart, 0, <, nStart, jWidth, ++, nStart, double, sum, 0, int, l, lStart, int, n, nStart, while, <, l, -, lEnd, 3, +=, sum, +, +, +, *, tBlock, l, mBlock, n, *, tBlock, +, l, 1, mBlock, +, n, jWidth, *, tBlock, +, l, 2, mBlock, +, n, jWidth2, *, tBlock, +, l, 3, mBlock, +, n, jWidth3, +=, l, 4, +=, n, jWidth4, while, <, l, lEnd, +=, sum, *, tBlock, ++, l, mBlock, n, +=, n, jWidth, +=, outBlock, k, sum, ++, k, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:getData:null#[final, double, data, double, getRowDimension, getColumnDimension, final, int, lastColumns, -, columns, *, -, blockColumns, 1, BLOCK_SIZE, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, int, regularPos, 0, int, lastPos, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, double, dataP, data, p, int, blockIndex, *, iBlock, blockColumns, int, dataPos, 0, for, int, jBlock, 0, <, jBlock, -, blockColumns, 1, ++, jBlock, System, arraycopy, blocks, ++, blockIndex, regularPos, dataP, dataPos, BLOCK_SIZE, +=, dataPos, BLOCK_SIZE, System, arraycopy, blocks, blockIndex, lastPos, dataP, dataPos, lastColumns, +=, regularPos, BLOCK_SIZE, +=, lastPos, lastColumns, return, data]
org.apache.commons.math4.linear:BlockRealMatrix:getNorm:null#[final, double, colSums, double, BLOCK_SIZE, double, maxColSum, 0, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, Arrays, fill, colSums, 0, jWidth, 0.0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, j, 0, <, j, jWidth, ++, j, double, sum, 0, for, int, i, 0, <, i, iHeight, ++, i, +=, sum, FastMath, abs, block, +, *, i, jWidth, j, +=, colSums, j, sum, for, int, j, 0, <, j, jWidth, ++, j, =, maxColSum, FastMath, max, maxColSum, colSums, j, return, maxColSum]
org.apache.commons.math4.linear:BlockRealMatrix:getFrobeniusNorm:null#[double, sum2, 0, for, int, blockIndex, 0, <, blockIndex, blocks.length, ++, blockIndex, for, final, double, entry, blocks, blockIndex, +=, sum2, *, entry, entry, return, FastMath, sqrt, sum2]
org.apache.commons.math4.linear:BlockRealMatrix:getSubMatrix:int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, final, BlockRealMatrix, out, new, BlockRealMatrix, +, -, endRow, startRow, 1, +, -, endColumn, startColumn, 1, final, int, blockStartRow, /, startRow, BLOCK_SIZE, final, int, rowsShift, %, startRow, BLOCK_SIZE, final, int, blockStartColumn, /, startColumn, BLOCK_SIZE, final, int, columnsShift, %, startColumn, BLOCK_SIZE, int, pBlock, blockStartRow, for, int, iBlock, 0, <, iBlock, out.blockRows, ++, iBlock, final, int, iHeight, out, blockHeight, iBlock, int, qBlock, blockStartColumn, for, int, jBlock, 0, <, jBlock, out.blockColumns, ++, jBlock, final, int, jWidth, out, blockWidth, jBlock, final, int, outIndex, +, *, iBlock, out.blockColumns, jBlock, final, double, outBlock, out.blocks, outIndex, final, int, index, +, *, pBlock, blockColumns, qBlock, final, int, width, blockWidth, qBlock, final, int, heightExcess, -, +, iHeight, rowsShift, BLOCK_SIZE, final, int, widthExcess, -, +, jWidth, columnsShift, BLOCK_SIZE, if, >, heightExcess, 0, if, >, widthExcess, 0, final, int, width2, blockWidth, +, qBlock, 1, copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, copyBlockPart, blocks, +, index, 1, width2, rowsShift, BLOCK_SIZE, 0, widthExcess, outBlock, jWidth, 0, -, jWidth, widthExcess, copyBlockPart, blocks, +, index, blockColumns, width, 0, heightExcess, columnsShift, BLOCK_SIZE, outBlock, jWidth, -, iHeight, heightExcess, 0, copyBlockPart, blocks, +, index, blockColumns, 1, width2, 0, heightExcess, 0, widthExcess, outBlock, jWidth, -, iHeight, heightExcess, -, jWidth, widthExcess, copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, +, jWidth, columnsShift, outBlock, jWidth, 0, 0, copyBlockPart, blocks, +, index, blockColumns, width, 0, heightExcess, columnsShift, +, jWidth, columnsShift, outBlock, jWidth, -, iHeight, heightExcess, 0, if, >, widthExcess, 0, final, int, width2, blockWidth, +, qBlock, 1, copyBlockPart, blocks, index, width, rowsShift, +, iHeight, rowsShift, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, copyBlockPart, blocks, +, index, 1, width2, rowsShift, +, iHeight, rowsShift, 0, widthExcess, outBlock, jWidth, 0, -, jWidth, widthExcess, copyBlockPart, blocks, index, width, rowsShift, +, iHeight, rowsShift, columnsShift, +, jWidth, columnsShift, outBlock, jWidth, 0, 0, ++, qBlock, ++, pBlock, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:copyBlockPart:double[]+int+int+int+int+int+double[]+int+int+int#[final, int, length, -, srcEndColumn, srcStartColumn, int, srcPos, +, *, srcStartRow, srcWidth, srcStartColumn, int, dstPos, +, *, dstStartRow, dstWidth, dstStartColumn, for, int, srcRow, srcStartRow, <, srcRow, srcEndRow, ++, srcRow, System, arraycopy, srcBlock, srcPos, dstBlock, dstPos, length, +=, srcPos, srcWidth, +=, dstPos, dstWidth]
org.apache.commons.math4.linear:BlockRealMatrix:setSubMatrix:double[][]+int+int#[MathUtils, checkNotNull, subMatrix, final, int, refLength, subMatrix, 0, length, if, ==, refLength, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, final, int, endRow, -, +, row, subMatrix.length, 1, final, int, endColumn, -, +, column, refLength, 1, MatrixUtils, checkSubMatrixIndex, this, row, endRow, column, endColumn, for, final, double, subRow, subMatrix, if, !=, subRow.length, refLength, throw, new, DimensionMismatchException, refLength, subRow.length, final, int, blockStartRow, /, row, BLOCK_SIZE, final, int, blockEndRow, /, +, endRow, BLOCK_SIZE, BLOCK_SIZE, final, int, blockStartColumn, /, column, BLOCK_SIZE, final, int, blockEndColumn, /, +, endColumn, BLOCK_SIZE, BLOCK_SIZE, for, int, iBlock, blockStartRow, <, iBlock, blockEndRow, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, int, firstRow, *, iBlock, BLOCK_SIZE, final, int, iStart, FastMath, max, row, firstRow, final, int, iEnd, FastMath, min, +, endRow, 1, +, firstRow, iHeight, for, int, jBlock, blockStartColumn, <, jBlock, blockEndColumn, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, firstColumn, *, jBlock, BLOCK_SIZE, final, int, jStart, FastMath, max, column, firstColumn, final, int, jEnd, FastMath, min, +, endColumn, 1, +, firstColumn, jWidth, final, int, jLength, -, jEnd, jStart, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, iStart, <, i, iEnd, ++, i, System, arraycopy, subMatrix, -, i, row, -, jStart, column, block, +, *, -, i, firstRow, jWidth, -, jStart, firstColumn, jLength]
org.apache.commons.math4.linear:BlockRealMatrix:getRowMatrix:int#[MatrixUtils, checkRowIndex, this, row, final, BlockRealMatrix, out, new, BlockRealMatrix, 1, columns, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outBlockIndex, 0, int, outIndex, 0, double, outBlock, out.blocks, outBlockIndex, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, available, -, outBlock.length, outIndex, if, >, jWidth, available, System, arraycopy, block, *, iRow, jWidth, outBlock, outIndex, available, =, outBlock, out.blocks, ++, outBlockIndex, System, arraycopy, block, *, iRow, jWidth, outBlock, 0, -, jWidth, available, =, outIndex, -, jWidth, available, System, arraycopy, block, *, iRow, jWidth, outBlock, outIndex, jWidth, +=, outIndex, jWidth, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:setRowMatrix:int+RealMatrix#[try, setRowMatrix, row, BlockRealMatrix, matrix, catch, ClassCastException, cce, super, setRowMatrix, row, matrix]
org.apache.commons.math4.linear:BlockRealMatrix:setRowMatrix:int+BlockRealMatrix#[MatrixUtils, checkRowIndex, this, row, final, int, nCols, getColumnDimension, if, ||, !=, matrix, getRowDimension, 1, !=, matrix, getColumnDimension, nCols, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, mBlockIndex, 0, int, mIndex, 0, double, mBlock, matrix.blocks, mBlockIndex, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, available, -, mBlock.length, mIndex, if, >, jWidth, available, System, arraycopy, mBlock, mIndex, block, *, iRow, jWidth, available, =, mBlock, matrix.blocks, ++, mBlockIndex, System, arraycopy, mBlock, 0, block, *, iRow, jWidth, -, jWidth, available, =, mIndex, -, jWidth, available, System, arraycopy, mBlock, mIndex, block, *, iRow, jWidth, jWidth, +=, mIndex, jWidth]
org.apache.commons.math4.linear:BlockRealMatrix:getColumnMatrix:int#[MatrixUtils, checkColumnIndex, this, column, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, 1, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outBlockIndex, 0, int, outIndex, 0, double, outBlock, out.blocks, outBlockIndex, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, if, >=, outIndex, outBlock.length, =, outBlock, out.blocks, ++, outBlockIndex, =, outIndex, 0, =, outBlock, ++, outIndex, block, +, *, i, jWidth, jColumn, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:setColumnMatrix:int+RealMatrix#[try, setColumnMatrix, column, BlockRealMatrix, matrix, catch, ClassCastException, cce, super, setColumnMatrix, column, matrix]
org.apache.commons.math4.linear:BlockRealMatrix:setColumnMatrix:int+BlockRealMatrix#[MatrixUtils, checkColumnIndex, this, column, final, int, nRows, getRowDimension, if, ||, !=, matrix, getRowDimension, nRows, !=, matrix, getColumnDimension, 1, throw, new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, mBlockIndex, 0, int, mIndex, 0, double, mBlock, matrix.blocks, mBlockIndex, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, if, >=, mIndex, mBlock.length, =, mBlock, matrix.blocks, ++, mBlockIndex, =, mIndex, 0, =, block, +, *, i, jWidth, jColumn, mBlock, ++, mIndex]
org.apache.commons.math4.linear:BlockRealMatrix:getRowVector:int#[MatrixUtils, checkRowIndex, this, row, final, double, outData, double, columns, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outIndex, 0, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, System, arraycopy, block, *, iRow, jWidth, outData, outIndex, jWidth, +=, outIndex, jWidth, return, new, ArrayRealVector, outData, false]
org.apache.commons.math4.linear:BlockRealMatrix:setRowVector:int+RealVector#[try, setRow, row, ArrayRealVector, vector, getDataRef, catch, ClassCastException, cce, super, setRowVector, row, vector]
org.apache.commons.math4.linear:BlockRealMatrix:getColumnVector:int#[MatrixUtils, checkColumnIndex, this, column, final, double, outData, double, rows, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, =, outData, ++, outIndex, block, +, *, i, jWidth, jColumn, return, new, ArrayRealVector, outData, false]
org.apache.commons.math4.linear:BlockRealMatrix:setColumnVector:int+RealVector#[try, setColumn, column, ArrayRealVector, vector, getDataRef, catch, ClassCastException, cce, super, setColumnVector, column, vector]
org.apache.commons.math4.linear:BlockRealMatrix:getRow:int#[MatrixUtils, checkRowIndex, this, row, final, double, out, double, columns, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outIndex, 0, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, System, arraycopy, block, *, iRow, jWidth, out, outIndex, jWidth, +=, outIndex, jWidth, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:setRow:int+double[]#[MatrixUtils, checkRowIndex, this, row, final, int, nCols, getColumnDimension, if, !=, array.length, nCols, throw, new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, final, int, iBlock, /, row, BLOCK_SIZE, final, int, iRow, -, row, *, iBlock, BLOCK_SIZE, int, outIndex, 0, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, System, arraycopy, array, outIndex, block, *, iRow, jWidth, jWidth, +=, outIndex, jWidth]
org.apache.commons.math4.linear:BlockRealMatrix:getColumn:int#[MatrixUtils, checkColumnIndex, this, column, final, double, out, double, rows, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, =, out, ++, outIndex, block, +, *, i, jWidth, jColumn, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:setColumn:int+double[]#[MatrixUtils, checkColumnIndex, this, column, final, int, nRows, getRowDimension, if, !=, array.length, nRows, throw, new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, final, int, jBlock, /, column, BLOCK_SIZE, final, int, jColumn, -, column, *, jBlock, BLOCK_SIZE, final, int, jWidth, blockWidth, jBlock, int, outIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, iHeight, blockHeight, iBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, i, 0, <, i, iHeight, ++, i, =, block, +, *, i, jWidth, jColumn, array, ++, outIndex]
org.apache.commons.math4.linear:BlockRealMatrix:getEntry:int+int#[MatrixUtils, checkMatrixIndex, this, row, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, return, blocks, +, *, iBlock, blockColumns, jBlock, k]
org.apache.commons.math4.linear:BlockRealMatrix:setEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, =, blocks, +, *, iBlock, blockColumns, jBlock, k, value]
org.apache.commons.math4.linear:BlockRealMatrix:addToEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, +=, blocks, +, *, iBlock, blockColumns, jBlock, k, increment]
org.apache.commons.math4.linear:BlockRealMatrix:multiplyEntry:int+int+double#[MatrixUtils, checkMatrixIndex, this, row, column, final, int, iBlock, /, row, BLOCK_SIZE, final, int, jBlock, /, column, BLOCK_SIZE, final, int, k, +, *, -, row, *, iBlock, BLOCK_SIZE, blockWidth, jBlock, -, column, *, jBlock, BLOCK_SIZE, *=, blocks, +, *, iBlock, blockColumns, jBlock, k, factor]
org.apache.commons.math4.linear:BlockRealMatrix:transpose:null#[final, int, nRows, getRowDimension, final, int, nCols, getColumnDimension, final, BlockRealMatrix, out, new, BlockRealMatrix, nCols, nRows, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockColumns, ++, iBlock, for, int, jBlock, 0, <, jBlock, blockRows, ++, jBlock, final, double, outBlock, out.blocks, blockIndex, final, double, tBlock, blocks, +, *, jBlock, blockColumns, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, columns, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, rows, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, final, int, lInc, -, pEnd, pStart, int, l, -, p, pStart, for, int, q, qStart, <, q, qEnd, ++, q, =, outBlock, k, tBlock, l, ++, k, +=, l, lInc, ++, blockIndex, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:getRowDimension:null#[return, rows]
org.apache.commons.math4.linear:BlockRealMatrix:getColumnDimension:null#[return, columns]
org.apache.commons.math4.linear:BlockRealMatrix:operate:double[]#[if, !=, v.length, columns, throw, new, DimensionMismatchException, v.length, columns, final, double, out, double, rows, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, double, sum, 0, int, q, qStart, while, <, q, -, qEnd, 3, +=, sum, +, +, +, *, block, k, v, q, *, block, +, k, 1, v, +, q, 1, *, block, +, k, 2, v, +, q, 2, *, block, +, k, 3, v, +, q, 3, +=, k, 4, +=, q, 4, while, <, q, qEnd, +=, sum, *, block, ++, k, v, ++, q, +=, out, p, sum, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:preMultiply:double[]#[if, !=, v.length, rows, throw, new, DimensionMismatchException, v.length, rows, final, double, out, double, columns, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, jWidth2, +, jWidth, jWidth, final, int, jWidth3, +, jWidth2, jWidth, final, int, jWidth4, +, jWidth3, jWidth, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, q, qStart, <, q, qEnd, ++, q, int, k, -, q, qStart, double, sum, 0, int, p, pStart, while, <, p, -, pEnd, 3, +=, sum, +, +, +, *, block, k, v, p, *, block, +, k, jWidth, v, +, p, 1, *, block, +, k, jWidth2, v, +, p, 2, *, block, +, k, jWidth3, v, +, p, 3, +=, k, jWidth4, +=, p, 4, while, <, p, pEnd, +=, sum, *, block, k, v, ++, p, +=, k, jWidth, +=, out, q, sum, return, out]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixChangingVisitor#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, *, -, p, pStart, jWidth, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, *, -, p, pStart, jWidth, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixChangingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, p, pStart, <, p, pEnd, ++, p, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, double, block, blocks, blockIndex, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, ++, blockIndex, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor#[visitor, start, rows, columns, 0, -, rows, 1, 0, -, columns, 1, int, blockIndex, 0, for, int, iBlock, 0, <, iBlock, blockRows, ++, iBlock, final, int, pStart, *, iBlock, BLOCK_SIZE, final, int, pEnd, FastMath, min, +, pStart, BLOCK_SIZE, rows, for, int, jBlock, 0, <, jBlock, blockColumns, ++, jBlock, final, int, qStart, *, jBlock, BLOCK_SIZE, final, int, qEnd, FastMath, min, +, qStart, BLOCK_SIZE, columns, final, double, block, blocks, blockIndex, int, k, 0, for, int, p, pStart, <, p, pEnd, ++, p, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, ++, blockIndex, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, p, pStart, <, p, pEnd, ++, p, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, =, block, k, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor+int+int+int+int#[MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, for, int, iBlock, /, startRow, BLOCK_SIZE, <, iBlock, +, 1, /, endRow, BLOCK_SIZE, ++, iBlock, final, int, p0, *, iBlock, BLOCK_SIZE, final, int, pStart, FastMath, max, startRow, p0, final, int, pEnd, FastMath, min, *, +, iBlock, 1, BLOCK_SIZE, +, 1, endRow, for, int, jBlock, /, startColumn, BLOCK_SIZE, <, jBlock, +, 1, /, endColumn, BLOCK_SIZE, ++, jBlock, final, int, jWidth, blockWidth, jBlock, final, int, q0, *, jBlock, BLOCK_SIZE, final, int, qStart, FastMath, max, startColumn, q0, final, int, qEnd, FastMath, min, *, +, jBlock, 1, BLOCK_SIZE, +, 1, endColumn, final, double, block, blocks, +, *, iBlock, blockColumns, jBlock, for, int, p, pStart, <, p, pEnd, ++, p, int, k, -, +, *, -, p, p0, jWidth, qStart, q0, for, int, q, qStart, <, q, qEnd, ++, q, visitor, visit, p, q, block, k, ++, k, return, visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:blockHeight:int#[return, ==, blockRow, -, blockRows, 1, -, rows, *, blockRow, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:BlockRealMatrix:blockWidth:int#[return, ==, blockColumn, -, blockColumns, 1, -, columns, *, blockColumn, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:CholeskyDecomposition:getL:null#[if, ==, cachedL, null, =, cachedL, getLT, transpose, return, cachedL]
org.apache.commons.math4.linear:CholeskyDecomposition:getLT:null#[if, ==, cachedLT, null, =, cachedLT, MatrixUtils, createRealMatrix, lTData, return, cachedLT]
org.apache.commons.math4.linear:CholeskyDecomposition:getDeterminant:null#[double, determinant, 1.0, for, int, i, 0, <, i, lTData.length, ++, i, double, lTii, lTData, i, i, *=, determinant, *, lTii, lTii, return, determinant]
org.apache.commons.math4.linear:CholeskyDecomposition:getSolver:null#[return, new, Solver, lTData]
org.apache.commons.math4.linear:ConjugateGradient:getCheck:null#[return, check]
org.apache.commons.math4.linear:ConjugateGradient:solveInPlace:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[checkParameters, a, m, b, x0, final, IterationManager, manager, getIterationManager, manager, resetIterationCount, final, double, rmax, *, delta, b, getNorm, final, RealVector, bro, RealVector, unmodifiableRealVector, b, manager, incrementIterationCount, final, RealVector, x, x0, final, RealVector, xro, RealVector, unmodifiableRealVector, x, final, RealVector, p, x, copy, RealVector, q, a, operate, p, final, RealVector, r, b, combine, 1, -, 1, q, final, RealVector, rro, RealVector, unmodifiableRealVector, r, double, rnorm, r, getNorm, RealVector, z, if, ==, m, null, =, z, r, =, z, null, IterativeLinearSolverEvent, evt, =, evt, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, xro, bro, rro, rnorm, manager, fireInitializationEvent, evt, if, <=, rnorm, rmax, manager, fireTerminationEvent, evt, return, x, double, rhoPrev, 0., while, true, manager, incrementIterationCount, =, evt, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, xro, bro, rro, rnorm, manager, fireIterationStartedEvent, evt, if, !=, m, null, =, z, m, operate, r, final, double, rhoNext, r, dotProduct, z, if, &&, check, <=, rhoNext, 0., final, NonPositiveDefiniteOperatorException, e, =, e, new, NonPositiveDefiniteOperatorException, final, ExceptionContext, context, e, getContext, context, setValue, OPERATOR, m, context, setValue, VECTOR, r, throw, e, if, ==, manager, getIterations, 2, p, setSubVector, 0, z, p, combineToSelf, /, rhoNext, rhoPrev, 1., z, =, q, a, operate, p, final, double, pq, p, dotProduct, q, if, &&, check, <=, pq, 0., final, NonPositiveDefiniteOperatorException, e, =, e, new, NonPositiveDefiniteOperatorException, final, ExceptionContext, context, e, getContext, context, setValue, OPERATOR, a, context, setValue, VECTOR, p, throw, e, final, double, alpha, /, rhoNext, pq, x, combineToSelf, 1., alpha, p, r, combineToSelf, 1., -, alpha, q, =, rhoPrev, rhoNext, =, rnorm, r, getNorm, =, evt, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, xro, bro, rro, rnorm, manager, fireIterationPerformedEvent, evt, if, <=, rnorm, rmax, manager, fireTerminationEvent, evt, return, x]
org.apache.commons.math4.linear:DefaultFieldMatrixChangingVisitor:visit:int+int+T#[return, value]
org.apache.commons.math4.linear:DefaultFieldMatrixChangingVisitor:end:null#[return, zero]
org.apache.commons.math4.linear:DefaultFieldMatrixPreservingVisitor:end:null#[return, zero]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getNormOfResidual:null#[return, rnorm]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getResidual:null#[if, !=, r, null, return, r, throw, new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getRightHandSideVector:null#[return, b]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getSolution:null#[return, x]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:providesResidual:null#[return, !=, r, null]
org.apache.commons.math4.linear:DefaultRealMatrixChangingVisitor:visit:int+int+double#[return, value]
org.apache.commons.math4.linear:DefaultRealMatrixChangingVisitor:end:null#[return, 0]
org.apache.commons.math4.linear:DefaultRealMatrixPreservingVisitor:end:null#[return, 0]
org.apache.commons.math4.linear:DiagonalMatrix:createMatrix:int+int#[if, !=, rowDimension, columnDimension, throw, new, DimensionMismatchException, rowDimension, columnDimension, return, new, DiagonalMatrix, rowDimension]
org.apache.commons.math4.linear:DiagonalMatrix:copy:null#[return, new, DiagonalMatrix, data]
org.apache.commons.math4.linear:DiagonalMatrix:add:DiagonalMatrix#[MatrixUtils, checkAdditionCompatible, this, m, final, int, dim, getRowDimension, final, double, outData, double, dim, for, int, i, 0, <, i, dim, ++, i, =, outData, i, +, data, i, m.data, i, return, new, DiagonalMatrix, outData, false]
org.apache.commons.math4.linear:DiagonalMatrix:subtract:DiagonalMatrix#[MatrixUtils, checkSubtractionCompatible, this, m, final, int, dim, getRowDimension, final, double, outData, double, dim, for, int, i, 0, <, i, dim, ++, i, =, outData, i, -, data, i, m.data, i, return, new, DiagonalMatrix, outData, false]
org.apache.commons.math4.linear:DiagonalMatrix:multiply:DiagonalMatrix#[MatrixUtils, checkMultiplicationCompatible, this, m, final, int, dim, getRowDimension, final, double, outData, double, dim, for, int, i, 0, <, i, dim, ++, i, =, outData, i, *, data, i, m.data, i, return, new, DiagonalMatrix, outData, false]
org.apache.commons.math4.linear:DiagonalMatrix:multiply:RealMatrix#[if, instanceof, m, DiagonalMatrix, return, multiply, DiagonalMatrix, m, MatrixUtils, checkMultiplicationCompatible, this, m, final, int, nRows, m, getRowDimension, final, int, nCols, m, getColumnDimension, final, double, product, double, nRows, nCols, for, int, r, 0, <, r, nRows, ++, r, for, int, c, 0, <, c, nCols, ++, c, =, product, r, c, *, data, r, m, getEntry, r, c, return, new, Array2DRowRealMatrix, product, false]
org.apache.commons.math4.linear:DiagonalMatrix:getData:null#[final, int, dim, getRowDimension, final, double, out, double, dim, dim, for, int, i, 0, <, i, dim, ++, i, =, out, i, i, data, i, return, out]
org.apache.commons.math4.linear:DiagonalMatrix:getDataRef:null#[return, data]
org.apache.commons.math4.linear:DiagonalMatrix:getEntry:int+int#[MatrixUtils, checkMatrixIndex, this, row, column, return, ==, row, column, data, row, 0]
org.apache.commons.math4.linear:DiagonalMatrix:setEntry:int+int+double#[if, ==, row, column, MatrixUtils, checkRowIndex, this, row, =, data, row, value, ensureZero, value]
org.apache.commons.math4.linear:DiagonalMatrix:addToEntry:int+int+double#[if, ==, row, column, MatrixUtils, checkRowIndex, this, row, +=, data, row, increment, ensureZero, increment]
org.apache.commons.math4.linear:DiagonalMatrix:multiplyEntry:int+int+double#[if, ==, row, column, MatrixUtils, checkRowIndex, this, row, *=, data, row, factor]
org.apache.commons.math4.linear:DiagonalMatrix:getRowDimension:null#[return, data.length]
org.apache.commons.math4.linear:DiagonalMatrix:getColumnDimension:null#[return, data.length]
org.apache.commons.math4.linear:DiagonalMatrix:operate:double[]#[return, multiply, new, DiagonalMatrix, v, false, getDataRef]
org.apache.commons.math4.linear:DiagonalMatrix:preMultiply:double[]#[return, operate, v]
org.apache.commons.math4.linear:DiagonalMatrix:preMultiply:RealVector#[final, double, vectorData, if, instanceof, v, ArrayRealVector, =, vectorData, ArrayRealVector, v, getDataRef, =, vectorData, v, toArray, return, MatrixUtils, createRealVector, preMultiply, vectorData]
org.apache.commons.math4.linear:DiagonalMatrix:ensureZero:double#[if, !, Precision, equals, 0.0, value, 1, throw, new, NumberIsTooLargeException, FastMath, abs, value, 0, true]
org.apache.commons.math4.linear:DiagonalMatrix:inverse:null#[return, inverse, 0]
org.apache.commons.math4.linear:DiagonalMatrix:inverse:double#[if, isSingular, threshold, throw, new, SingularMatrixException, final, double, result, double, data.length, for, int, i, 0, <, i, data.length, ++, i, =, result, i, /, 1.0, data, i, return, new, DiagonalMatrix, result, false]
org.apache.commons.math4.linear:DiagonalMatrix:isSingular:double#[for, int, i, 0, <, i, data.length, ++, i, if, Precision, equals, data, i, 0.0, threshold, return, true, return, false]
org.apache.commons.math4.linear:EigenDecomposition:getV:null#[if, ==, cachedV, null, final, int, m, eigenvectors.length, =, cachedV, MatrixUtils, createRealMatrix, m, m, for, int, k, 0, <, k, m, ++, k, cachedV, setColumnVector, k, eigenvectors, k, return, cachedV]
org.apache.commons.math4.linear:EigenDecomposition:getD:null#[if, ==, cachedD, null, =, cachedD, MatrixUtils, createRealDiagonalMatrix, realEigenvalues, for, int, i, 0, <, i, imagEigenvalues.length, ++, i, if, >, Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, cachedD, setEntry, i, +, i, 1, imagEigenvalues, i, if, <, Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, cachedD, setEntry, i, -, i, 1, imagEigenvalues, i, return, cachedD]
org.apache.commons.math4.linear:EigenDecomposition:getVT:null#[if, ==, cachedVt, null, final, int, m, eigenvectors.length, =, cachedVt, MatrixUtils, createRealMatrix, m, m, for, int, k, 0, <, k, m, ++, k, cachedVt, setRowVector, k, eigenvectors, k, return, cachedVt]
org.apache.commons.math4.linear:EigenDecomposition:hasComplexEigenvalues:null#[for, int, i, 0, <, i, imagEigenvalues.length, ++, i, if, !, Precision, equals, imagEigenvalues, i, 0.0, EPSILON, return, true, return, false]
org.apache.commons.math4.linear:EigenDecomposition:getRealEigenvalues:null#[return, realEigenvalues, clone]
org.apache.commons.math4.linear:EigenDecomposition:getRealEigenvalue:int#[return, realEigenvalues, i]
org.apache.commons.math4.linear:EigenDecomposition:getImagEigenvalues:null#[return, imagEigenvalues, clone]
org.apache.commons.math4.linear:EigenDecomposition:getImagEigenvalue:int#[return, imagEigenvalues, i]
org.apache.commons.math4.linear:EigenDecomposition:getEigenvector:int#[return, eigenvectors, i, copy]
org.apache.commons.math4.linear:EigenDecomposition:getDeterminant:null#[double, determinant, 1, for, double, lambda, realEigenvalues, *=, determinant, lambda, return, determinant]
org.apache.commons.math4.linear:EigenDecomposition:getSquareRoot:null#[if, !, isSymmetric, throw, new, MathUnsupportedOperationException, final, double, sqrtEigenValues, double, realEigenvalues.length, for, int, i, 0, <, i, realEigenvalues.length, ++, i, final, double, eigen, realEigenvalues, i, if, <=, eigen, 0, throw, new, MathUnsupportedOperationException, =, sqrtEigenValues, i, FastMath, sqrt, eigen, final, RealMatrix, sqrtEigen, MatrixUtils, createRealDiagonalMatrix, sqrtEigenValues, final, RealMatrix, v, getV, final, RealMatrix, vT, getVT, return, v, multiply, sqrtEigen, multiply, vT]
org.apache.commons.math4.linear:EigenDecomposition:getSolver:null#[if, hasComplexEigenvalues, throw, new, MathUnsupportedOperationException, return, new, Solver, realEigenvalues, imagEigenvalues, eigenvectors]
org.apache.commons.math4.linear:EigenDecomposition:transformToTridiagonal:RealMatrix#[=, transformer, new, TriDiagonalTransformer, matrix, =, main, transformer, getMainDiagonalRef, =, secondary, transformer, getSecondaryDiagonalRef]
org.apache.commons.math4.linear:EigenDecomposition:findEigenVectors:double[][]#[final, double, z, householderMatrix, clone, final, int, n, main.length, =, realEigenvalues, double, n, =, imagEigenvalues, double, n, final, double, e, double, n, for, int, i, 0, <, i, -, n, 1, ++, i, =, realEigenvalues, i, main, i, =, e, i, secondary, i, =, realEigenvalues, -, n, 1, main, -, n, 1, =, e, -, n, 1, 0, double, maxAbsoluteValue, 0, for, int, i, 0, <, i, n, ++, i, if, >, FastMath, abs, realEigenvalues, i, maxAbsoluteValue, =, maxAbsoluteValue, FastMath, abs, realEigenvalues, i, if, >, FastMath, abs, e, i, maxAbsoluteValue, =, maxAbsoluteValue, FastMath, abs, e, i, if, !=, maxAbsoluteValue, 0, for, int, i, 0, <, i, n, ++, i, if, <=, FastMath, abs, realEigenvalues, i, *, Precision.EPSILON, maxAbsoluteValue, =, realEigenvalues, i, 0, if, <=, FastMath, abs, e, i, *, Precision.EPSILON, maxAbsoluteValue, =, e, i, 0, for, int, j, 0, <, j, n, ++, j, int, its, 0, int, m, do, for, =, m, j, <, m, -, n, 1, ++, m, double, delta, +, FastMath, abs, realEigenvalues, m, FastMath, abs, realEigenvalues, +, m, 1, if, ==, +, FastMath, abs, e, m, delta, delta, break, if, !=, m, j, if, ==, its, MAX_ITER, throw, new, MaxCountExceededException, LocalizedFormats.CONVERGENCE_FAILED, MAX_ITER, ++, its, double, q, /, -, realEigenvalues, +, j, 1, realEigenvalues, j, *, 2, e, j, double, t, FastMath, sqrt, +, 1, *, q, q, if, <, q, 0.0, =, q, +, -, realEigenvalues, m, realEigenvalues, j, /, e, j, -, q, t, =, q, +, -, realEigenvalues, m, realEigenvalues, j, /, e, j, +, q, t, double, u, 0.0, double, s, 1.0, double, c, 1.0, int, i, for, =, i, -, m, 1, >=, i, j, --, i, double, p, *, s, e, i, double, h, *, c, e, i, if, >=, FastMath, abs, p, FastMath, abs, q, =, c, /, q, p, =, t, FastMath, sqrt, +, *, c, c, 1.0, =, e, +, i, 1, *, p, t, =, s, /, 1.0, t, *=, c, s, =, s, /, p, q, =, t, FastMath, sqrt, +, *, s, s, 1.0, =, e, +, i, 1, *, q, t, =, c, /, 1.0, t, *=, s, c, if, ==, e, +, i, 1, 0.0, -=, realEigenvalues, +, i, 1, u, =, e, m, 0.0, break, =, q, -, realEigenvalues, +, i, 1, u, =, t, +, *, -, realEigenvalues, i, q, s, *, 2.0, c, h, =, u, *, s, t, =, realEigenvalues, +, i, 1, +, q, u, =, q, -, *, c, t, h, for, int, ia, 0, <, ia, n, ++, ia, =, p, z, ia, +, i, 1, =, z, ia, +, i, 1, +, *, s, z, ia, i, *, c, p, =, z, ia, i, -, *, c, z, ia, i, *, s, p, if, &&, ==, t, 0.0, >=, i, j, continue, -=, realEigenvalues, j, u, =, e, j, q, =, e, m, 0.0, !=, m, j, for, int, i, 0, <, i, n, ++, i, int, k, i, double, p, realEigenvalues, i, for, int, j, +, i, 1, <, j, n, ++, j, if, >, realEigenvalues, j, p, =, k, j, =, p, realEigenvalues, j, if, !=, k, i, =, realEigenvalues, k, realEigenvalues, i, =, realEigenvalues, i, p, for, int, j, 0, <, j, n, ++, j, =, p, z, j, i, =, z, j, i, z, j, k, =, z, j, k, p, =, maxAbsoluteValue, 0, for, int, i, 0, <, i, n, ++, i, if, >, FastMath, abs, realEigenvalues, i, maxAbsoluteValue, =, maxAbsoluteValue, FastMath, abs, realEigenvalues, i, if, !=, maxAbsoluteValue, 0.0, for, int, i, 0, <, i, n, ++, i, if, <, FastMath, abs, realEigenvalues, i, *, Precision.EPSILON, maxAbsoluteValue, =, realEigenvalues, i, 0, =, eigenvectors, ArrayRealVector, n, final, double, tmp, double, n, for, int, i, 0, <, i, n, ++, i, for, int, j, 0, <, j, n, ++, j, =, tmp, j, z, j, i, =, eigenvectors, i, new, ArrayRealVector, tmp]
org.apache.commons.math4.linear:EigenDecomposition:transformToSchur:RealMatrix#[final, SchurTransformer, schurTransform, new, SchurTransformer, matrix, final, double, matT, schurTransform, getT, getData, =, realEigenvalues, double, matT.length, =, imagEigenvalues, double, matT.length, for, int, i, 0, <, i, realEigenvalues.length, ++, i, if, ||, ==, i, -, realEigenvalues.length, 1, Precision, equals, matT, +, i, 1, i, 0.0, EPSILON, =, realEigenvalues, i, matT, i, i, final, double, x, matT, +, i, 1, +, i, 1, final, double, p, *, 0.5, -, matT, i, i, x, final, double, z, FastMath, sqrt, FastMath, abs, +, *, p, p, *, matT, +, i, 1, i, matT, i, +, i, 1, =, realEigenvalues, i, +, x, p, =, imagEigenvalues, i, z, =, realEigenvalues, +, i, 1, +, x, p, =, imagEigenvalues, +, i, 1, -, z, ++, i, return, schurTransform]
org.apache.commons.math4.linear:EigenDecomposition:cdiv:double+double+double+double#[return, new, Complex, xr, xi, divide, new, Complex, yr, yi]
org.apache.commons.math4.linear:EigenDecomposition:findEigenVectorsFromSchur:SchurTransformer#[final, double, matrixT, schur, getT, getData, final, double, matrixP, schur, getP, getData, final, int, n, matrixT.length, double, norm, 0.0, for, int, i, 0, <, i, n, ++, i, for, int, j, FastMath, max, -, i, 1, 0, <, j, n, ++, j, +=, norm, FastMath, abs, matrixT, i, j, if, Precision, equals, norm, 0.0, EPSILON, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, double, r, 0.0, double, s, 0.0, double, z, 0.0, for, int, idx, -, n, 1, >=, idx, 0, --, idx, double, p, realEigenvalues, idx, double, q, imagEigenvalues, idx, if, Precision, equals, q, 0.0, int, l, idx, =, matrixT, idx, idx, 1.0, for, int, i, -, idx, 1, >=, i, 0, --, i, double, w, -, matrixT, i, i, p, =, r, 0.0, for, int, j, l, <=, j, idx, ++, j, +=, r, *, matrixT, i, j, matrixT, j, idx, if, <, Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, =, z, w, =, s, r, =, l, i, if, Precision, equals, imagEigenvalues, i, 0.0, if, !=, w, 0.0, =, matrixT, i, idx, /, -, r, w, =, matrixT, i, idx, /, -, r, *, Precision.EPSILON, norm, double, x, matrixT, i, +, i, 1, double, y, matrixT, +, i, 1, i, =, q, +, *, -, realEigenvalues, i, p, -, realEigenvalues, i, p, *, imagEigenvalues, i, imagEigenvalues, i, double, t, /, -, *, x, s, *, z, r, q, =, matrixT, i, idx, t, if, >, FastMath, abs, x, FastMath, abs, z, =, matrixT, +, i, 1, idx, /, -, -, r, *, w, t, x, =, matrixT, +, i, 1, idx, /, -, -, s, *, y, t, z, double, t, FastMath, abs, matrixT, i, idx, if, >, *, *, Precision.EPSILON, t, t, 1, for, int, j, i, <=, j, idx, ++, j, /=, matrixT, j, idx, t, if, <, q, 0.0, int, l, -, idx, 1, if, >, FastMath, abs, matrixT, idx, -, idx, 1, FastMath, abs, matrixT, -, idx, 1, idx, =, matrixT, -, idx, 1, -, idx, 1, /, q, matrixT, idx, -, idx, 1, =, matrixT, -, idx, 1, idx, /, -, -, matrixT, idx, idx, p, matrixT, idx, -, idx, 1, final, Complex, result, cdiv, 0.0, -, matrixT, -, idx, 1, idx, -, matrixT, -, idx, 1, -, idx, 1, p, q, =, matrixT, -, idx, 1, -, idx, 1, result, getReal, =, matrixT, -, idx, 1, idx, result, getImaginary, =, matrixT, idx, -, idx, 1, 0.0, =, matrixT, idx, idx, 1.0, for, int, i, -, idx, 2, >=, i, 0, --, i, double, ra, 0.0, double, sa, 0.0, for, int, j, l, <=, j, idx, ++, j, +=, ra, *, matrixT, i, j, matrixT, j, -, idx, 1, +=, sa, *, matrixT, i, j, matrixT, j, idx, double, w, -, matrixT, i, i, p, if, <, Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, =, z, w, =, r, ra, =, s, sa, =, l, i, if, Precision, equals, imagEigenvalues, i, 0.0, final, Complex, c, cdiv, -, ra, -, sa, w, q, =, matrixT, i, -, idx, 1, c, getReal, =, matrixT, i, idx, c, getImaginary, double, x, matrixT, i, +, i, 1, double, y, matrixT, +, i, 1, i, double, vr, -, +, *, -, realEigenvalues, i, p, -, realEigenvalues, i, p, *, imagEigenvalues, i, imagEigenvalues, i, *, q, q, final, double, vi, *, -, realEigenvalues, i, p, 2.0, q, if, &&, Precision, equals, vr, 0.0, Precision, equals, vi, 0.0, =, vr, *, Precision.EPSILON, norm, +, FastMath, abs, w, FastMath, abs, q, FastMath, abs, x, FastMath, abs, y, FastMath, abs, z, final, Complex, c, cdiv, +, -, *, x, r, *, z, ra, *, q, sa, -, -, *, x, s, *, z, sa, *, q, ra, vr, vi, =, matrixT, i, -, idx, 1, c, getReal, =, matrixT, i, idx, c, getImaginary, if, >, FastMath, abs, x, +, FastMath, abs, z, FastMath, abs, q, =, matrixT, +, i, 1, -, idx, 1, /, +, -, -, ra, *, w, matrixT, i, -, idx, 1, *, q, matrixT, i, idx, x, =, matrixT, +, i, 1, idx, /, -, -, -, sa, *, w, matrixT, i, idx, *, q, matrixT, i, -, idx, 1, x, final, Complex, c2, cdiv, -, -, r, *, y, matrixT, i, -, idx, 1, -, -, s, *, y, matrixT, i, idx, z, q, =, matrixT, +, i, 1, -, idx, 1, c2, getReal, =, matrixT, +, i, 1, idx, c2, getImaginary, double, t, FastMath, max, FastMath, abs, matrixT, i, -, idx, 1, FastMath, abs, matrixT, i, idx, if, >, *, *, Precision.EPSILON, t, t, 1, for, int, j, i, <=, j, idx, ++, j, /=, matrixT, j, -, idx, 1, t, /=, matrixT, j, idx, t, for, int, j, -, n, 1, >=, j, 0, --, j, for, int, i, 0, <=, i, -, n, 1, ++, i, =, z, 0.0, for, int, k, 0, <=, k, FastMath, min, j, -, n, 1, ++, k, +=, z, *, matrixP, i, k, matrixT, k, j, =, matrixP, i, j, z, =, eigenvectors, ArrayRealVector, n, final, double, tmp, double, n, for, int, i, 0, <, i, n, ++, i, for, int, j, 0, <, j, n, ++, j, =, tmp, j, matrixP, j, i, =, eigenvectors, i, new, ArrayRealVector, tmp]
org.apache.commons.math4.linear:FieldLUDecomposition:getL:null#[if, &&, ==, cachedL, null, !, singular, final, int, m, pivot.length, =, cachedL, new, Array2DRowFieldMatrix, T, field, m, m, for, int, i, 0, <, i, m, ++, i, final, T, luI, lu, i, for, int, j, 0, <, j, i, ++, j, cachedL, setEntry, i, j, luI, j, cachedL, setEntry, i, i, field, getOne, return, cachedL]
org.apache.commons.math4.linear:FieldLUDecomposition:getU:null#[if, &&, ==, cachedU, null, !, singular, final, int, m, pivot.length, =, cachedU, new, Array2DRowFieldMatrix, T, field, m, m, for, int, i, 0, <, i, m, ++, i, final, T, luI, lu, i, for, int, j, i, <, j, m, ++, j, cachedU, setEntry, i, j, luI, j, return, cachedU]
org.apache.commons.math4.linear:FieldLUDecomposition:getP:null#[if, &&, ==, cachedP, null, !, singular, final, int, m, pivot.length, =, cachedP, new, Array2DRowFieldMatrix, T, field, m, m, for, int, i, 0, <, i, m, ++, i, cachedP, setEntry, i, pivot, i, field, getOne, return, cachedP]
org.apache.commons.math4.linear:FieldLUDecomposition:getPivot:null#[return, pivot, clone]
org.apache.commons.math4.linear:FieldLUDecomposition:getDeterminant:null#[if, singular, return, field, getZero, final, int, m, pivot.length, T, determinant, even, field, getOne, field, getZero, subtract, field, getOne, for, int, i, 0, <, i, m, ++, i, =, determinant, determinant, multiply, lu, i, i, return, determinant]
org.apache.commons.math4.linear:FieldLUDecomposition:getSolver:null#[return, new, Solver, T, field, lu, pivot, singular]
org.apache.commons.math4.linear:HessenbergTransformer:getP:null#[if, ==, cachedP, null, final, int, n, householderVectors.length, final, int, high, -, n, 1, final, double, pa, double, n, n, for, int, i, 0, <, i, n, ++, i, for, int, j, 0, <, j, n, ++, j, =, pa, i, j, ==, i, j, 1, 0, for, int, m, -, high, 1, >=, m, 1, --, m, if, !=, householderVectors, m, -, m, 1, 0.0, for, int, i, +, m, 1, <=, i, high, ++, i, =, ort, i, householderVectors, i, -, m, 1, for, int, j, m, <=, j, high, ++, j, double, g, 0.0, for, int, i, m, <=, i, high, ++, i, +=, g, *, ort, i, pa, i, j, =, g, /, /, g, ort, m, householderVectors, m, -, m, 1, for, int, i, m, <=, i, high, ++, i, +=, pa, i, j, *, g, ort, i, =, cachedP, MatrixUtils, createRealMatrix, pa, return, cachedP]
org.apache.commons.math4.linear:HessenbergTransformer:getPT:null#[if, ==, cachedPt, null, =, cachedPt, getP, transpose, return, cachedPt]
org.apache.commons.math4.linear:HessenbergTransformer:getH:null#[if, ==, cachedH, null, final, int, m, householderVectors.length, final, double, h, double, m, m, for, int, i, 0, <, i, m, ++, i, if, >, i, 0, =, h, i, -, i, 1, householderVectors, i, -, i, 1, for, int, j, i, <, j, m, ++, j, =, h, i, j, householderVectors, i, j, =, cachedH, MatrixUtils, createRealMatrix, h, return, cachedH]
org.apache.commons.math4.linear:HessenbergTransformer:getHouseholderVectorsRef:null#[return, householderVectors]
org.apache.commons.math4.linear:HessenbergTransformer:transform:null#[final, int, n, householderVectors.length, final, int, high, -, n, 1, for, int, m, 1, <=, m, -, high, 1, ++, m, double, scale, 0, for, int, i, m, <=, i, high, ++, i, +=, scale, FastMath, abs, householderVectors, i, -, m, 1, if, !, Precision, equals, scale, 0, double, h, 0, for, int, i, high, >=, i, m, --, i, =, ort, i, /, householderVectors, i, -, m, 1, scale, +=, h, *, ort, i, ort, i, final, double, g, >, ort, m, 0, -, FastMath, sqrt, h, FastMath, sqrt, h, -=, h, *, ort, m, g, -=, ort, m, g, for, int, j, m, <, j, n, ++, j, double, f, 0, for, int, i, high, >=, i, m, --, i, +=, f, *, ort, i, householderVectors, i, j, /=, f, h, for, int, i, m, <=, i, high, ++, i, -=, householderVectors, i, j, *, f, ort, i, for, int, i, 0, <=, i, high, ++, i, double, f, 0, for, int, j, high, >=, j, m, --, j, +=, f, *, ort, j, householderVectors, i, j, /=, f, h, for, int, j, m, <=, j, high, ++, j, -=, householderVectors, i, j, *, f, ort, j, =, ort, m, *, scale, ort, m, =, householderVectors, m, -, m, 1, *, scale, g]
org.apache.commons.math4.linear:IterativeLinearSolver:checkParameters:RealLinearOperator+RealVector+RealVector#[MathUtils, checkNotNull, a, MathUtils, checkNotNull, b, MathUtils, checkNotNull, x0, if, !=, a, getRowDimension, a, getColumnDimension, throw, new, NonSquareOperatorException, a, getRowDimension, a, getColumnDimension, if, !=, b, getDimension, a, getRowDimension, throw, new, DimensionMismatchException, b, getDimension, a, getRowDimension, if, !=, x0, getDimension, a, getColumnDimension, throw, new, DimensionMismatchException, x0, getDimension, a, getColumnDimension]
org.apache.commons.math4.linear:IterativeLinearSolver:getIterationManager:null#[return, manager]
org.apache.commons.math4.linear:IterativeLinearSolver:solve:RealLinearOperator+RealVector#[MathUtils, checkNotNull, a, final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, x, set, 0., return, solveInPlace, a, b, x]
org.apache.commons.math4.linear:IterativeLinearSolver:solve:RealLinearOperator+RealVector+RealVector#[MathUtils, checkNotNull, x0, return, solveInPlace, a, b, x0, copy]
org.apache.commons.math4.linear:IterativeLinearSolverEvent:getResidual:null#[throw, new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:IterativeLinearSolverEvent:providesResidual:null#[return, false]
org.apache.commons.math4.linear:JacobiPreconditioner:create:RealLinearOperator#[final, int, n, a, getColumnDimension, if, !=, a, getRowDimension, n, throw, new, NonSquareOperatorException, a, getRowDimension, n, final, double, diag, double, n, if, instanceof, a, AbstractRealMatrix, final, AbstractRealMatrix, m, AbstractRealMatrix, a, for, int, i, 0, <, i, n, ++, i, =, diag, i, m, getEntry, i, i, final, ArrayRealVector, x, new, ArrayRealVector, n, for, int, i, 0, <, i, n, ++, i, x, set, 0., x, setEntry, i, 1., =, diag, i, a, operate, x, getEntry, i, return, new, JacobiPreconditioner, diag, false]
org.apache.commons.math4.linear:JacobiPreconditioner:getColumnDimension:null#[return, diag, getDimension]
org.apache.commons.math4.linear:JacobiPreconditioner:getRowDimension:null#[return, diag, getDimension]
org.apache.commons.math4.linear:JacobiPreconditioner:operate:RealVector#[return, new, ArrayRealVector, MathArrays, ebeDivide, x, toArray, diag, toArray, false]
org.apache.commons.math4.linear:JacobiPreconditioner:sqrt:null#[final, RealVector, sqrtDiag, diag, map, new, Sqrt, return, new, RealLinearOperator, Override, public, RealVector, operate, final, RealVector, x, return, new, ArrayRealVector, MathArrays, ebeDivide, x, toArray, sqrtDiag, toArray, false, Override, public, int, getRowDimension, return, sqrtDiag, getDimension, Override, public, int, getColumnDimension, return, sqrtDiag, getDimension]
org.apache.commons.math4.linear:LUDecomposition:getL:null#[if, &&, ==, cachedL, null, !, singular, final, int, m, pivot.length, =, cachedL, MatrixUtils, createRealMatrix, m, m, for, int, i, 0, <, i, m, ++, i, final, double, luI, lu, i, for, int, j, 0, <, j, i, ++, j, cachedL, setEntry, i, j, luI, j, cachedL, setEntry, i, i, 1.0, return, cachedL]
org.apache.commons.math4.linear:LUDecomposition:getU:null#[if, &&, ==, cachedU, null, !, singular, final, int, m, pivot.length, =, cachedU, MatrixUtils, createRealMatrix, m, m, for, int, i, 0, <, i, m, ++, i, final, double, luI, lu, i, for, int, j, i, <, j, m, ++, j, cachedU, setEntry, i, j, luI, j, return, cachedU]
org.apache.commons.math4.linear:LUDecomposition:getP:null#[if, &&, ==, cachedP, null, !, singular, final, int, m, pivot.length, =, cachedP, MatrixUtils, createRealMatrix, m, m, for, int, i, 0, <, i, m, ++, i, cachedP, setEntry, i, pivot, i, 1.0, return, cachedP]
org.apache.commons.math4.linear:LUDecomposition:getPivot:null#[return, pivot, clone]
org.apache.commons.math4.linear:LUDecomposition:getDeterminant:null#[if, singular, return, 0, final, int, m, pivot.length, double, determinant, even, 1, -, 1, for, int, i, 0, <, i, m, ++, i, *=, determinant, lu, i, i, return, determinant]
org.apache.commons.math4.linear:LUDecomposition:getSolver:null#[return, new, Solver, lu, pivot, singular]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getWrongRowDimension:null#[return, getWrongDimension, 0]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getExpectedRowDimension:null#[return, getExpectedDimension, 0]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getWrongColumnDimension:null#[return, getWrongDimension, 1]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getExpectedColumnDimension:null#[return, getExpectedDimension, 1]
org.apache.commons.math4.linear:MatrixUtils:createRealMatrix:int+int#[return, <=, *, rows, columns, 4096, new, Array2DRowRealMatrix, rows, columns, new, BlockRealMatrix, rows, columns]
org.apache.commons.math4.linear:MatrixUtils:createFieldMatrix:Field<T>+int+int#[return, <=, *, rows, columns, 4096, new, Array2DRowFieldMatrix, T, field, rows, columns, new, BlockFieldMatrix, T, field, rows, columns]
org.apache.commons.math4.linear:MatrixUtils:createRealMatrix:double[][]#[if, ||, ==, data, null, ==, data, 0, null, throw, new, NullArgumentException, return, <=, *, data.length, data, 0, length, 4096, new, Array2DRowRealMatrix, data, new, BlockRealMatrix, data]
org.apache.commons.math4.linear:MatrixUtils:createFieldMatrix:T[][]#[if, ||, ==, data, null, ==, data, 0, null, throw, new, NullArgumentException, return, <=, *, data.length, data, 0, length, 4096, new, Array2DRowFieldMatrix, T, data, new, BlockFieldMatrix, T, data]
org.apache.commons.math4.linear:MatrixUtils:createRealIdentityMatrix:int#[final, RealMatrix, m, createRealMatrix, dimension, dimension, for, int, i, 0, <, i, dimension, ++, i, m, setEntry, i, i, 1.0, return, m]
org.apache.commons.math4.linear:MatrixUtils:createFieldIdentityMatrix:Field<T>+int#[final, T, zero, field, getZero, final, T, one, field, getOne, final, T, d, MathArrays, buildArray, field, dimension, dimension, for, int, row, 0, <, row, dimension, ++, row, final, T, dRow, d, row, Arrays, fill, dRow, zero, =, dRow, row, one, return, new, Array2DRowFieldMatrix, T, field, d, false]
org.apache.commons.math4.linear:MatrixUtils:createRealDiagonalMatrix:double[]#[final, RealMatrix, m, createRealMatrix, diagonal.length, diagonal.length, for, int, i, 0, <, i, diagonal.length, ++, i, m, setEntry, i, i, diagonal, i, return, m]
org.apache.commons.math4.linear:MatrixUtils:createFieldDiagonalMatrix:T[]#[final, FieldMatrix, T, m, createFieldMatrix, diagonal, 0, getField, diagonal.length, diagonal.length, for, int, i, 0, <, i, diagonal.length, ++, i, m, setEntry, i, i, diagonal, i, return, m]
org.apache.commons.math4.linear:MatrixUtils:createRealVector:double[]#[if, ==, data, null, throw, new, NullArgumentException, return, new, ArrayRealVector, data, true]
org.apache.commons.math4.linear:MatrixUtils:createFieldVector:T[]#[if, ==, data, null, throw, new, NullArgumentException, if, ==, data.length, 0, throw, new, ZeroException, LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, return, new, ArrayFieldVector, T, data, 0, getField, data, true]
org.apache.commons.math4.linear:MatrixUtils:createRowRealMatrix:double[]#[if, ==, rowData, null, throw, new, NullArgumentException, final, int, nCols, rowData.length, final, RealMatrix, m, createRealMatrix, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, m, setEntry, 0, i, rowData, i, return, m]
org.apache.commons.math4.linear:MatrixUtils:createRowFieldMatrix:T[]#[if, ==, rowData, null, throw, new, NullArgumentException, final, int, nCols, rowData.length, if, ==, nCols, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, final, FieldMatrix, T, m, createFieldMatrix, rowData, 0, getField, 1, nCols, for, int, i, 0, <, i, nCols, ++, i, m, setEntry, 0, i, rowData, i, return, m]
org.apache.commons.math4.linear:MatrixUtils:createColumnRealMatrix:double[]#[if, ==, columnData, null, throw, new, NullArgumentException, final, int, nRows, columnData.length, final, RealMatrix, m, createRealMatrix, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, m, setEntry, i, 0, columnData, i, return, m]
org.apache.commons.math4.linear:MatrixUtils:createColumnFieldMatrix:T[]#[if, ==, columnData, null, throw, new, NullArgumentException, final, int, nRows, columnData.length, if, ==, nRows, 0, throw, new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, final, FieldMatrix, T, m, createFieldMatrix, columnData, 0, getField, nRows, 1, for, int, i, 0, <, i, nRows, ++, i, m, setEntry, i, 0, columnData, i, return, m]
org.apache.commons.math4.linear:MatrixUtils:isSymmetricInternal:RealMatrix+double+boolean#[final, int, rows, matrix, getRowDimension, if, !=, rows, matrix, getColumnDimension, if, raiseException, throw, new, NonSquareMatrixException, rows, matrix, getColumnDimension, return, false, for, int, i, 0, <, i, rows, ++, i, for, int, j, +, i, 1, <, j, rows, ++, j, final, double, mij, matrix, getEntry, i, j, final, double, mji, matrix, getEntry, j, i, if, >, FastMath, abs, -, mij, mji, *, FastMath, max, FastMath, abs, mij, FastMath, abs, mji, relativeTolerance, if, raiseException, throw, new, NonSymmetricMatrixException, i, j, relativeTolerance, return, false, return, true]
org.apache.commons.math4.linear:MatrixUtils:checkSymmetric:RealMatrix+double#[isSymmetricInternal, matrix, eps, true]
org.apache.commons.math4.linear:MatrixUtils:isSymmetric:RealMatrix+double#[return, isSymmetricInternal, matrix, eps, false]
org.apache.commons.math4.linear:MatrixUtils:checkMatrixIndex:AnyMatrix+int+int#[checkRowIndex, m, row, checkColumnIndex, m, column]
org.apache.commons.math4.linear:MatrixUtils:checkRowIndex:AnyMatrix+int#[if, ||, <, row, 0, >=, row, m, getRowDimension, throw, new, OutOfRangeException, LocalizedFormats.ROW_INDEX, row, 0, -, m, getRowDimension, 1]
org.apache.commons.math4.linear:MatrixUtils:checkColumnIndex:AnyMatrix+int#[if, ||, <, column, 0, >=, column, m, getColumnDimension, throw, new, OutOfRangeException, LocalizedFormats.COLUMN_INDEX, column, 0, -, m, getColumnDimension, 1]
org.apache.commons.math4.linear:MatrixUtils:checkSubMatrixIndex:AnyMatrix+int+int+int+int#[checkRowIndex, m, startRow, checkRowIndex, m, endRow, if, <, endRow, startRow, throw, new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, endRow, startRow, false, checkColumnIndex, m, startColumn, checkColumnIndex, m, endColumn, if, <, endColumn, startColumn, throw, new, NumberIsTooSmallException, LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN, endColumn, startColumn, false]
org.apache.commons.math4.linear:MatrixUtils:checkSubMatrixIndex:AnyMatrix+int[]+int[]#[if, ==, selectedRows, null, throw, new, NullArgumentException, if, ==, selectedColumns, null, throw, new, NullArgumentException, if, ==, selectedRows.length, 0, throw, new, NoDataException, LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY, if, ==, selectedColumns.length, 0, throw, new, NoDataException, LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY, for, final, int, row, selectedRows, checkRowIndex, m, row, for, final, int, column, selectedColumns, checkColumnIndex, m, column]
org.apache.commons.math4.linear:MatrixUtils:checkAdditionCompatible:AnyMatrix+AnyMatrix#[if, ||, !=, left, getRowDimension, right, getRowDimension, !=, left, getColumnDimension, right, getColumnDimension, throw, new, MatrixDimensionMismatchException, left, getRowDimension, left, getColumnDimension, right, getRowDimension, right, getColumnDimension]
org.apache.commons.math4.linear:MatrixUtils:checkSubtractionCompatible:AnyMatrix+AnyMatrix#[if, ||, !=, left, getRowDimension, right, getRowDimension, !=, left, getColumnDimension, right, getColumnDimension, throw, new, MatrixDimensionMismatchException, left, getRowDimension, left, getColumnDimension, right, getRowDimension, right, getColumnDimension]
org.apache.commons.math4.linear:MatrixUtils:checkMultiplicationCompatible:AnyMatrix+AnyMatrix#[if, !=, left, getColumnDimension, right, getRowDimension, throw, new, DimensionMismatchException, left, getColumnDimension, right, getRowDimension]
org.apache.commons.math4.linear:MatrixUtils:fractionMatrixToRealMatrix:FieldMatrix<Fraction>#[final, FractionMatrixConverter, converter, new, FractionMatrixConverter, m, walkInOptimizedOrder, converter, return, converter, getConvertedMatrix]
org.apache.commons.math4.linear:MatrixUtils:bigFractionMatrixToRealMatrix:FieldMatrix<BigFraction>#[final, BigFractionMatrixConverter, converter, new, BigFractionMatrixConverter, m, walkInOptimizedOrder, converter, return, converter, getConvertedMatrix]
org.apache.commons.math4.linear:MatrixUtils:serializeRealVector:RealVector+ObjectOutputStream#[final, int, n, vector, getDimension, oos, writeInt, n, for, int, i, 0, <, i, n, ++, i, oos, writeDouble, vector, getEntry, i]
org.apache.commons.math4.linear:MatrixUtils:deserializeRealVector:Object+String+ObjectInputStream#[try, final, int, n, ois, readInt, final, double, data, double, n, for, int, i, 0, <, i, n, ++, i, =, data, i, ois, readDouble, final, RealVector, vector, new, ArrayRealVector, data, false, final, java.lang.reflect.Field, f, instance, getClass, getDeclaredField, fieldName, f, setAccessible, true, f, set, instance, vector, catch, NoSuchFieldException, nsfe, IOException, ioe, new, IOException, ioe, initCause, nsfe, throw, ioe, catch, IllegalAccessException, iae, IOException, ioe, new, IOException, ioe, initCause, iae, throw, ioe]
org.apache.commons.math4.linear:MatrixUtils:serializeRealMatrix:RealMatrix+ObjectOutputStream#[final, int, n, matrix, getRowDimension, final, int, m, matrix, getColumnDimension, oos, writeInt, n, oos, writeInt, m, for, int, i, 0, <, i, n, ++, i, for, int, j, 0, <, j, m, ++, j, oos, writeDouble, matrix, getEntry, i, j]
org.apache.commons.math4.linear:MatrixUtils:deserializeRealMatrix:Object+String+ObjectInputStream#[try, final, int, n, ois, readInt, final, int, m, ois, readInt, final, double, data, double, n, m, for, int, i, 0, <, i, n, ++, i, final, double, dataI, data, i, for, int, j, 0, <, j, m, ++, j, =, dataI, j, ois, readDouble, final, RealMatrix, matrix, new, Array2DRowRealMatrix, data, false, final, java.lang.reflect.Field, f, instance, getClass, getDeclaredField, fieldName, f, setAccessible, true, f, set, instance, matrix, catch, NoSuchFieldException, nsfe, IOException, ioe, new, IOException, ioe, initCause, nsfe, throw, ioe, catch, IllegalAccessException, iae, IOException, ioe, new, IOException, ioe, initCause, iae, throw, ioe]
org.apache.commons.math4.linear:MatrixUtils:solveLowerTriangularSystem:RealMatrix+RealVector#[if, ||, ==, rm, null, ==, b, null, !=, rm, getRowDimension, b, getDimension, throw, new, DimensionMismatchException, ==, rm, null, 0, rm, getRowDimension, ==, b, null, 0, b, getDimension, if, !=, rm, getColumnDimension, rm, getRowDimension, throw, new, NonSquareMatrixException, rm, getRowDimension, rm, getColumnDimension, int, rows, rm, getRowDimension, for, int, i, 0, <, i, rows, ++, i, double, diag, rm, getEntry, i, i, if, <, FastMath, abs, diag, Precision.SAFE_MIN, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, double, bi, /, b, getEntry, i, diag, b, setEntry, i, bi, for, int, j, +, i, 1, <, j, rows, ++, j, b, setEntry, j, -, b, getEntry, j, *, bi, rm, getEntry, j, i]
org.apache.commons.math4.linear:MatrixUtils:solveUpperTriangularSystem:RealMatrix+RealVector#[if, ||, ==, rm, null, ==, b, null, !=, rm, getRowDimension, b, getDimension, throw, new, DimensionMismatchException, ==, rm, null, 0, rm, getRowDimension, ==, b, null, 0, b, getDimension, if, !=, rm, getColumnDimension, rm, getRowDimension, throw, new, NonSquareMatrixException, rm, getRowDimension, rm, getColumnDimension, int, rows, rm, getRowDimension, for, int, i, -, rows, 1, >, i, -, 1, --, i, double, diag, rm, getEntry, i, i, if, <, FastMath, abs, diag, Precision.SAFE_MIN, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, double, bi, /, b, getEntry, i, diag, b, setEntry, i, bi, for, int, j, -, i, 1, >, j, -, 1, --, j, b, setEntry, j, -, b, getEntry, j, *, bi, rm, getEntry, j, i]
org.apache.commons.math4.linear:MatrixUtils:blockInverse:RealMatrix+int#[final, int, n, m, getRowDimension, if, !=, m, getColumnDimension, n, throw, new, NonSquareMatrixException, m, getRowDimension, m, getColumnDimension, final, int, splitIndex1, +, splitIndex, 1, final, RealMatrix, a, m, getSubMatrix, 0, splitIndex, 0, splitIndex, final, RealMatrix, b, m, getSubMatrix, 0, splitIndex, splitIndex1, -, n, 1, final, RealMatrix, c, m, getSubMatrix, splitIndex1, -, n, 1, 0, splitIndex, final, RealMatrix, d, m, getSubMatrix, splitIndex1, -, n, 1, splitIndex1, -, n, 1, final, SingularValueDecomposition, aDec, new, SingularValueDecomposition, a, final, DecompositionSolver, aSolver, aDec, getSolver, if, !, aSolver, isNonSingular, throw, new, SingularMatrixException, final, RealMatrix, aInv, aSolver, getInverse, final, SingularValueDecomposition, dDec, new, SingularValueDecomposition, d, final, DecompositionSolver, dSolver, dDec, getSolver, if, !, dSolver, isNonSingular, throw, new, SingularMatrixException, final, RealMatrix, dInv, dSolver, getInverse, final, RealMatrix, tmp1, a, subtract, b, multiply, dInv, multiply, c, final, SingularValueDecomposition, tmp1Dec, new, SingularValueDecomposition, tmp1, final, DecompositionSolver, tmp1Solver, tmp1Dec, getSolver, if, !, tmp1Solver, isNonSingular, throw, new, SingularMatrixException, final, RealMatrix, result00, tmp1Solver, getInverse, final, RealMatrix, tmp2, d, subtract, c, multiply, aInv, multiply, b, final, SingularValueDecomposition, tmp2Dec, new, SingularValueDecomposition, tmp2, final, DecompositionSolver, tmp2Solver, tmp2Dec, getSolver, if, !, tmp2Solver, isNonSingular, throw, new, SingularMatrixException, final, RealMatrix, result11, tmp2Solver, getInverse, final, RealMatrix, result01, aInv, multiply, b, multiply, result11, scalarMultiply, -, 1, final, RealMatrix, result10, dInv, multiply, c, multiply, result00, scalarMultiply, -, 1, final, RealMatrix, result, new, Array2DRowRealMatrix, n, n, result, setSubMatrix, result00, getData, 0, 0, result, setSubMatrix, result01, getData, 0, splitIndex1, result, setSubMatrix, result10, getData, splitIndex1, 0, result, setSubMatrix, result11, getData, splitIndex1, splitIndex1, return, result]
org.apache.commons.math4.linear:MatrixUtils:inverse:RealMatrix#[return, inverse, matrix, 0]
org.apache.commons.math4.linear:MatrixUtils:inverse:RealMatrix+double#[MathUtils, checkNotNull, matrix, if, !, matrix, isSquare, throw, new, NonSquareMatrixException, matrix, getRowDimension, matrix, getColumnDimension, if, instanceof, matrix, DiagonalMatrix, return, DiagonalMatrix, matrix, inverse, threshold, QRDecomposition, decomposition, new, QRDecomposition, matrix, threshold, return, decomposition, getSolver, getInverse]
org.apache.commons.math4.linear:NonPositiveDefiniteMatrixException:getRow:null#[return, index]
org.apache.commons.math4.linear:NonPositiveDefiniteMatrixException:getColumn:null#[return, index]
org.apache.commons.math4.linear:NonPositiveDefiniteMatrixException:getThreshold:null#[return, threshold]
org.apache.commons.math4.linear:NonSymmetricMatrixException:getRow:null#[return, row]
org.apache.commons.math4.linear:NonSymmetricMatrixException:getColumn:null#[return, column]
org.apache.commons.math4.linear:NonSymmetricMatrixException:getThreshold:null#[return, threshold]
org.apache.commons.math4.linear:OpenMapRealMatrix:copy:null#[return, new, OpenMapRealMatrix, this]
org.apache.commons.math4.linear:OpenMapRealMatrix:createMatrix:int+int#[return, new, OpenMapRealMatrix, rowDimension, columnDimension]
org.apache.commons.math4.linear:OpenMapRealMatrix:getColumnDimension:null#[return, columns]
org.apache.commons.math4.linear:OpenMapRealMatrix:add:OpenMapRealMatrix#[MatrixUtils, checkAdditionCompatible, this, m, final, OpenMapRealMatrix, out, new, OpenMapRealMatrix, this, for, OpenIntToDoubleHashMap.Iterator, iterator, m.entries, iterator, iterator, hasNext, iterator, advance, final, int, row, /, iterator, key, columns, final, int, col, -, iterator, key, *, row, columns, out, setEntry, row, col, +, getEntry, row, col, iterator, value, return, out]
org.apache.commons.math4.linear:OpenMapRealMatrix:subtract:RealMatrix#[try, return, subtract, OpenMapRealMatrix, m, catch, ClassCastException, cce, return, OpenMapRealMatrix, super, subtract, m]
org.apache.commons.math4.linear:OpenMapRealMatrix:subtract:OpenMapRealMatrix#[MatrixUtils, checkAdditionCompatible, this, m, final, OpenMapRealMatrix, out, new, OpenMapRealMatrix, this, for, OpenIntToDoubleHashMap.Iterator, iterator, m.entries, iterator, iterator, hasNext, iterator, advance, final, int, row, /, iterator, key, columns, final, int, col, -, iterator, key, *, row, columns, out, setEntry, row, col, -, getEntry, row, col, iterator, value, return, out]
org.apache.commons.math4.linear:OpenMapRealMatrix:multiply:RealMatrix#[try, return, multiply, OpenMapRealMatrix, m, catch, ClassCastException, cce, MatrixUtils, checkMultiplicationCompatible, this, m, final, int, outCols, m, getColumnDimension, final, BlockRealMatrix, out, new, BlockRealMatrix, rows, outCols, for, OpenIntToDoubleHashMap.Iterator, iterator, entries, iterator, iterator, hasNext, iterator, advance, final, double, value, iterator, value, final, int, key, iterator, key, final, int, i, /, key, columns, final, int, k, %, key, columns, for, int, j, 0, <, j, outCols, ++, j, out, addToEntry, i, j, *, value, m, getEntry, k, j, return, out]
org.apache.commons.math4.linear:OpenMapRealMatrix:multiply:OpenMapRealMatrix#[MatrixUtils, checkMultiplicationCompatible, this, m, final, int, outCols, m, getColumnDimension, OpenMapRealMatrix, out, new, OpenMapRealMatrix, rows, outCols, for, OpenIntToDoubleHashMap.Iterator, iterator, entries, iterator, iterator, hasNext, iterator, advance, final, double, value, iterator, value, final, int, key, iterator, key, final, int, i, /, key, columns, final, int, k, %, key, columns, for, int, j, 0, <, j, outCols, ++, j, final, int, rightKey, m, computeKey, k, j, if, m.entries, containsKey, rightKey, final, int, outKey, out, computeKey, i, j, final, double, outValue, +, out.entries, get, outKey, *, value, m.entries, get, rightKey, if, ==, outValue, 0.0, out.entries, remove, outKey, out.entries, put, outKey, outValue, return, out]
org.apache.commons.math4.linear:OpenMapRealMatrix:getEntry:int+int#[MatrixUtils, checkRowIndex, this, row, MatrixUtils, checkColumnIndex, this, column, return, entries, get, computeKey, row, column]
org.apache.commons.math4.linear:OpenMapRealMatrix:getRowDimension:null#[return, rows]
org.apache.commons.math4.linear:OpenMapRealMatrix:setEntry:int+int+double#[MatrixUtils, checkRowIndex, this, row, MatrixUtils, checkColumnIndex, this, column, if, ==, value, 0.0, entries, remove, computeKey, row, column, entries, put, computeKey, row, column, value]
org.apache.commons.math4.linear:OpenMapRealMatrix:addToEntry:int+int+double#[MatrixUtils, checkRowIndex, this, row, MatrixUtils, checkColumnIndex, this, column, final, int, key, computeKey, row, column, final, double, value, +, entries, get, key, increment, if, ==, value, 0.0, entries, remove, key, entries, put, key, value]
org.apache.commons.math4.linear:OpenMapRealMatrix:multiplyEntry:int+int+double#[MatrixUtils, checkRowIndex, this, row, MatrixUtils, checkColumnIndex, this, column, final, int, key, computeKey, row, column, final, double, value, *, entries, get, key, factor, if, ==, value, 0.0, entries, remove, key, entries, put, key, value]
org.apache.commons.math4.linear:OpenMapRealMatrix:computeKey:int+int#[return, +, *, row, columns, column]
org.apache.commons.math4.linear:OpenMapRealVector:getEntries:null#[return, entries]
org.apache.commons.math4.linear:OpenMapRealVector:isDefaultValue:double#[return, <, FastMath, abs, value, epsilon]
org.apache.commons.math4.linear:OpenMapRealVector:add:RealVector#[checkVectorDimensions, v, getDimension, if, instanceof, v, OpenMapRealVector, return, add, OpenMapRealVector, v, return, super, add, v]
org.apache.commons.math4.linear:OpenMapRealVector:add:OpenMapRealVector#[checkVectorDimensions, v, getDimension, boolean, copyThis, >, entries, size, v.entries, size, OpenMapRealVector, res, copyThis, this, copy, v, copy, Iterator, iter, copyThis, v.entries, iterator, entries, iterator, OpenIntToDoubleHashMap, randomAccess, copyThis, entries, v.entries, while, iter, hasNext, iter, advance, int, key, iter, key, if, randomAccess, containsKey, key, res, setEntry, key, +, randomAccess, get, key, iter, value, res, setEntry, key, iter, value, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:append:OpenMapRealVector#[OpenMapRealVector, res, new, OpenMapRealVector, this, v, getDimension, Iterator, iter, v.entries, iterator, while, iter, hasNext, iter, advance, res, setEntry, +, iter, key, virtualSize, iter, value, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:append:RealVector#[if, instanceof, v, OpenMapRealVector, return, append, OpenMapRealVector, v, final, OpenMapRealVector, res, new, OpenMapRealVector, this, v, getDimension, for, int, i, 0, <, i, v, getDimension, ++, i, res, setEntry, +, i, virtualSize, v, getEntry, i, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:append:double#[OpenMapRealVector, res, new, OpenMapRealVector, this, 1, res, setEntry, virtualSize, d, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:copy:null#[return, new, OpenMapRealVector, this]
org.apache.commons.math4.linear:OpenMapRealVector:ebeDivide:RealVector#[checkVectorDimensions, v, getDimension, OpenMapRealVector, res, new, OpenMapRealVector, this, final, int, n, getDimension, for, int, i, 0, <, i, n, ++, i, res, setEntry, i, /, this, getEntry, i, v, getEntry, i, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:ebeMultiply:RealVector#[checkVectorDimensions, v, getDimension, OpenMapRealVector, res, new, OpenMapRealVector, this, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, res, setEntry, iter, key, *, iter, value, v, getEntry, iter, key, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:getSubVector:int+int#[checkIndex, index, if, <, n, 0, throw, new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, checkIndex, -, +, index, n, 1, OpenMapRealVector, res, new, OpenMapRealVector, n, int, end, +, index, n, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, if, &&, >=, key, index, <, key, end, res, setEntry, -, key, index, iter, value, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:getDimension:null#[return, virtualSize]
org.apache.commons.math4.linear:OpenMapRealVector:getDistance:OpenMapRealVector#[checkVectorDimensions, v, getDimension, Iterator, iter, entries, iterator, double, res, 0, while, iter, hasNext, iter, advance, int, key, iter, key, double, delta, =, delta, -, iter, value, v, getEntry, key, +=, res, *, delta, delta, =, iter, v, getEntries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, if, !, entries, containsKey, key, final, double, value, iter, value, +=, res, *, value, value, return, FastMath, sqrt, res]
org.apache.commons.math4.linear:OpenMapRealVector:getDistance:RealVector#[checkVectorDimensions, v, getDimension, if, instanceof, v, OpenMapRealVector, return, getDistance, OpenMapRealVector, v, return, super, getDistance, v]
org.apache.commons.math4.linear:OpenMapRealVector:getEntry:int#[checkIndex, index, return, entries, get, index]
org.apache.commons.math4.linear:OpenMapRealVector:getL1Distance:OpenMapRealVector#[checkVectorDimensions, v, getDimension, double, max, 0, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, double, delta, FastMath, abs, -, iter, value, v, getEntry, iter, key, +=, max, delta, =, iter, v, getEntries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, if, !, entries, containsKey, key, double, delta, FastMath, abs, iter, value, +=, max, FastMath, abs, delta, return, max]
org.apache.commons.math4.linear:OpenMapRealVector:getL1Distance:RealVector#[checkVectorDimensions, v, getDimension, if, instanceof, v, OpenMapRealVector, return, getL1Distance, OpenMapRealVector, v, return, super, getL1Distance, v]
org.apache.commons.math4.linear:OpenMapRealVector:getLInfDistance:OpenMapRealVector#[checkVectorDimensions, v, getDimension, double, max, 0, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, double, delta, FastMath, abs, -, iter, value, v, getEntry, iter, key, if, >, delta, max, =, max, delta, =, iter, v, getEntries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, if, &&, !, entries, containsKey, key, >, iter, value, max, =, max, iter, value, return, max]
org.apache.commons.math4.linear:OpenMapRealVector:getLInfDistance:RealVector#[checkVectorDimensions, v, getDimension, if, instanceof, v, OpenMapRealVector, return, getLInfDistance, OpenMapRealVector, v, return, super, getLInfDistance, v]
org.apache.commons.math4.linear:OpenMapRealVector:isInfinite:null#[boolean, infiniteFound, false, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, final, double, value, iter, value, if, Double, isNaN, value, return, false, if, Double, isInfinite, value, =, infiniteFound, true, return, infiniteFound]
org.apache.commons.math4.linear:OpenMapRealVector:isNaN:null#[Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, if, Double, isNaN, iter, value, return, true, return, false]
org.apache.commons.math4.linear:OpenMapRealVector:mapAdd:double#[return, copy, mapAddToSelf, d]
org.apache.commons.math4.linear:OpenMapRealVector:mapAddToSelf:double#[for, int, i, 0, <, i, virtualSize, ++, i, setEntry, i, +, getEntry, i, d, return, this]
org.apache.commons.math4.linear:OpenMapRealVector:setEntry:int+double#[checkIndex, index, if, !, isDefaultValue, value, entries, put, index, value, if, entries, containsKey, index, entries, remove, index]
org.apache.commons.math4.linear:OpenMapRealVector:setSubVector:int+RealVector#[checkIndex, index, checkIndex, -, +, index, v, getDimension, 1, for, int, i, 0, <, i, v, getDimension, ++, i, setEntry, +, i, index, v, getEntry, i]
org.apache.commons.math4.linear:OpenMapRealVector:set:double#[for, int, i, 0, <, i, virtualSize, ++, i, setEntry, i, value]
org.apache.commons.math4.linear:OpenMapRealVector:subtract:OpenMapRealVector#[checkVectorDimensions, v, getDimension, OpenMapRealVector, res, copy, Iterator, iter, v, getEntries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, if, entries, containsKey, key, res, setEntry, key, -, entries, get, key, iter, value, res, setEntry, key, -, iter, value, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:subtract:RealVector#[checkVectorDimensions, v, getDimension, if, instanceof, v, OpenMapRealVector, return, subtract, OpenMapRealVector, v, return, super, subtract, v]
org.apache.commons.math4.linear:OpenMapRealVector:unitVector:null#[OpenMapRealVector, res, copy, res, unitize, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:unitize:null#[double, norm, getNorm, if, isDefaultValue, norm, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, entries, put, iter, key, /, iter, value, norm]
org.apache.commons.math4.linear:OpenMapRealVector:toArray:null#[double, res, double, virtualSize, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, =, res, iter, key, iter, value, return, res]
org.apache.commons.math4.linear:OpenMapRealVector:hashCode:null#[final, int, prime, 31, int, result, 1, long, temp, =, temp, Double, doubleToLongBits, epsilon, =, result, +, *, prime, result, int, ^, temp, >>>, temp, 32, =, result, +, *, prime, result, virtualSize, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, =, temp, Double, doubleToLongBits, iter, value, =, result, +, *, prime, result, int, ^, temp, >>, temp, 32, return, result]
org.apache.commons.math4.linear:OpenMapRealVector:equals:Object#[if, ==, this, obj, return, true, if, !, instanceof, obj, OpenMapRealVector, return, false, OpenMapRealVector, other, OpenMapRealVector, obj, if, !=, virtualSize, other.virtualSize, return, false, if, !=, Double, doubleToLongBits, epsilon, Double, doubleToLongBits, other.epsilon, return, false, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, double, test, other, getEntry, iter, key, if, !=, Double, doubleToLongBits, test, Double, doubleToLongBits, iter, value, return, false, =, iter, other, getEntries, iterator, while, iter, hasNext, iter, advance, double, test, iter, value, if, !=, Double, doubleToLongBits, test, Double, doubleToLongBits, getEntry, iter, key, return, false, return, true]
org.apache.commons.math4.linear:OpenMapRealVector:getSparsity:null#[return, /, double, entries, size, double, getDimension]
org.apache.commons.math4.linear:OpenMapRealVector:sparseIterator:null#[return, new, OpenMapSparseIterator]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[MathUtils, checkNotNull, x0, return, solveInPlace, a, m, b, x0, copy]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealVector#[MathUtils, checkNotNull, a, final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, x, set, 0., return, solveInPlace, a, null, b, x]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealVector+RealVector#[MathUtils, checkNotNull, x0, return, solveInPlace, a, null, b, x0, copy]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:checkParameters:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[checkParameters, a, b, x0, if, !=, m, null, if, !=, m, getColumnDimension, m, getRowDimension, throw, new, NonSquareOperatorException, m, getColumnDimension, m, getRowDimension, if, !=, m, getRowDimension, a, getRowDimension, throw, new, DimensionMismatchException, m, getRowDimension, a, getRowDimension]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealLinearOperator+RealVector#[MathUtils, checkNotNull, a, final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, return, solveInPlace, a, m, b, x]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solveInPlace:RealLinearOperator+RealVector+RealVector#[return, solveInPlace, a, null, b, x0]
org.apache.commons.math4.linear:QRDecomposition:decompose:double[][]#[for, int, minor, 0, <, minor, FastMath, min, matrix.length, matrix, 0, length, ++, minor, performHouseholderReflection, minor, matrix]
org.apache.commons.math4.linear:QRDecomposition:performHouseholderReflection:int+double[][]#[final, double, qrtMinor, matrix, minor, double, xNormSqr, 0, for, int, row, minor, <, row, qrtMinor.length, ++, row, final, double, c, qrtMinor, row, +=, xNormSqr, *, c, c, final, double, a, >, qrtMinor, minor, 0, -, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, =, rDiag, minor, a, if, !=, a, 0.0, -=, qrtMinor, minor, a, for, int, col, +, minor, 1, <, col, matrix.length, ++, col, final, double, qrtCol, matrix, col, double, alpha, 0, for, int, row, minor, <, row, qrtCol.length, ++, row, -=, alpha, *, qrtCol, row, qrtMinor, row, /=, alpha, *, a, qrtMinor, minor, for, int, row, minor, <, row, qrtCol.length, ++, row, -=, qrtCol, row, *, alpha, qrtMinor, row]
org.apache.commons.math4.linear:QRDecomposition:getR:null#[if, ==, cachedR, null, final, int, n, qrt.length, final, int, m, qrt, 0, length, double, ra, double, m, n, for, int, row, -, FastMath, min, m, n, 1, >=, row, 0, --, row, =, ra, row, row, rDiag, row, for, int, col, +, row, 1, <, col, n, ++, col, =, ra, row, col, qrt, col, row, =, cachedR, MatrixUtils, createRealMatrix, ra, return, cachedR]
org.apache.commons.math4.linear:QRDecomposition:getQ:null#[if, ==, cachedQ, null, =, cachedQ, getQT, transpose, return, cachedQ]
org.apache.commons.math4.linear:QRDecomposition:getQT:null#[if, ==, cachedQT, null, final, int, n, qrt.length, final, int, m, qrt, 0, length, double, qta, double, m, m, for, int, minor, -, m, 1, >=, minor, FastMath, min, m, n, --, minor, =, qta, minor, minor, 1.0d, for, int, minor, -, FastMath, min, m, n, 1, >=, minor, 0, --, minor, final, double, qrtMinor, qrt, minor, =, qta, minor, minor, 1.0d, if, !=, qrtMinor, minor, 0.0, for, int, col, minor, <, col, m, ++, col, double, alpha, 0, for, int, row, minor, <, row, m, ++, row, -=, alpha, *, qta, col, row, qrtMinor, row, /=, alpha, *, rDiag, minor, qrtMinor, minor, for, int, row, minor, <, row, m, ++, row, +=, qta, col, row, *, -, alpha, qrtMinor, row, =, cachedQT, MatrixUtils, createRealMatrix, qta, return, cachedQT]
org.apache.commons.math4.linear:QRDecomposition:getH:null#[if, ==, cachedH, null, final, int, n, qrt.length, final, int, m, qrt, 0, length, double, ha, double, m, n, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, FastMath, min, +, i, 1, n, ++, j, =, ha, i, j, /, qrt, j, i, -, rDiag, j, =, cachedH, MatrixUtils, createRealMatrix, ha, return, cachedH]
org.apache.commons.math4.linear:QRDecomposition:getSolver:null#[return, new, Solver, qrt, rDiag, threshold]
org.apache.commons.math4.linear:RealLinearOperator:operateTranspose:RealVector#[throw, new, UnsupportedOperationException]
org.apache.commons.math4.linear:RealLinearOperator:isTransposable:null#[return, false]
org.apache.commons.math4.linear:RealMatrixFormat:getAvailableLocales:null#[return, NumberFormat, getAvailableLocales]
org.apache.commons.math4.linear:RealMatrixFormat:getPrefix:null#[return, prefix]
org.apache.commons.math4.linear:RealMatrixFormat:getSuffix:null#[return, suffix]
org.apache.commons.math4.linear:RealMatrixFormat:getRowPrefix:null#[return, rowPrefix]
org.apache.commons.math4.linear:RealMatrixFormat:getRowSuffix:null#[return, rowSuffix]
org.apache.commons.math4.linear:RealMatrixFormat:getRowSeparator:null#[return, rowSeparator]
org.apache.commons.math4.linear:RealMatrixFormat:getColumnSeparator:null#[return, columnSeparator]
org.apache.commons.math4.linear:RealMatrixFormat:getFormat:null#[return, format]
org.apache.commons.math4.linear:RealMatrixFormat:getInstance:null#[return, getInstance, Locale, getDefault]
org.apache.commons.math4.linear:RealMatrixFormat:getInstance:Locale#[return, new, RealMatrixFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.linear:RealMatrixFormat:format:RealMatrix#[return, format, m, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.linear:RealMatrixFormat:format:RealMatrix+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, toAppendTo, append, prefix, final, int, rows, matrix, getRowDimension, for, int, i, 0, <, i, rows, ++, i, toAppendTo, append, rowPrefix, for, int, j, 0, <, j, matrix, getColumnDimension, ++, j, if, >, j, 0, toAppendTo, append, columnSeparator, CompositeFormat, formatDouble, matrix, getEntry, i, j, format, toAppendTo, pos, toAppendTo, append, rowSuffix, if, <, i, -, rows, 1, toAppendTo, append, rowSeparator, toAppendTo, append, suffix, return, toAppendTo]
org.apache.commons.math4.linear:RealMatrixFormat:parse:String#[final, ParsePosition, parsePosition, new, ParsePosition, 0, final, RealMatrix, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, Array2DRowRealMatrix, return, result]
org.apache.commons.math4.linear:RealMatrixFormat:parse:String+ParsePosition#[int, initialIndex, pos, getIndex, final, String, trimmedPrefix, prefix, trim, final, String, trimmedSuffix, suffix, trim, final, String, trimmedRowPrefix, rowPrefix, trim, final, String, trimmedRowSuffix, rowSuffix, trim, final, String, trimmedColumnSeparator, columnSeparator, trim, final, String, trimmedRowSeparator, rowSeparator, trim, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedPrefix, pos, return, null, List, List, Number, matrix, new, ArrayList, List, Number, List, Number, rowComponents, new, ArrayList, Number, for, boolean, loop, true, loop, if, !, rowComponents, isEmpty, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedColumnSeparator, pos, if, &&, !=, trimmedRowSuffix, length, 0, !, CompositeFormat, parseFixedstring, source, trimmedRowSuffix, pos, return, null, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, CompositeFormat, parseFixedstring, source, trimmedRowSeparator, pos, matrix, add, rowComponents, =, rowComponents, new, ArrayList, Number, continue, =, loop, false, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, &&, !=, trimmedRowPrefix, length, 0, !, CompositeFormat, parseFixedstring, source, trimmedRowPrefix, pos, return, null, if, loop, CompositeFormat, parseAndIgnoreWhitespace, source, pos, Number, component, CompositeFormat, parseNumber, source, format, pos, if, !=, component, null, rowComponents, add, component, if, rowComponents, isEmpty, =, loop, false, pos, setIndex, initialIndex, return, null, if, !, rowComponents, isEmpty, matrix, add, rowComponents, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedSuffix, pos, return, null, if, matrix, isEmpty, pos, setIndex, initialIndex, return, null, double, data, double, matrix, size, int, row, 0, for, List, Number, rowList, matrix, =, data, row, double, rowList, size, for, int, i, 0, <, i, rowList, size, ++, i, =, data, row, i, rowList, get, i, doubleValue, ++, row, return, MatrixUtils, createRealMatrix, data]
org.apache.commons.math4.linear:RealVector:addToEntry:int+double#[setEntry, index, +, getEntry, index, increment]
org.apache.commons.math4.linear:RealVector:checkVectorDimensions:RealVector#[checkVectorDimensions, v, getDimension]
org.apache.commons.math4.linear:RealVector:checkVectorDimensions:int#[int, d, getDimension, if, !=, d, n, throw, new, DimensionMismatchException, d, n]
org.apache.commons.math4.linear:RealVector:checkIndex:int#[if, ||, <, index, 0, >=, index, getDimension, throw, new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, -, getDimension, 1]
org.apache.commons.math4.linear:RealVector:checkIndices:int+int#[final, int, dim, getDimension, if, ||, <, start, 0, >=, start, dim, throw, new, OutOfRangeException, LocalizedFormats.INDEX, start, 0, -, dim, 1, if, ||, <, end, 0, >=, end, dim, throw, new, OutOfRangeException, LocalizedFormats.INDEX, end, 0, -, dim, 1, if, <, end, start, throw, new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false]
org.apache.commons.math4.linear:RealVector:add:RealVector#[checkVectorDimensions, v, RealVector, result, v, copy, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, final, int, index, e, getIndex, result, setEntry, index, +, e, getValue, result, getEntry, index, return, result]
org.apache.commons.math4.linear:RealVector:subtract:RealVector#[checkVectorDimensions, v, RealVector, result, v, mapMultiply, -, 1d, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, final, int, index, e, getIndex, result, setEntry, index, +, e, getValue, result, getEntry, index, return, result]
org.apache.commons.math4.linear:RealVector:mapAdd:double#[return, copy, mapAddToSelf, d]
org.apache.commons.math4.linear:RealVector:mapAddToSelf:double#[if, !=, d, 0, return, mapToSelf, FunctionUtils, fix2ndArgument, new, Add, d, return, this]
org.apache.commons.math4.linear:RealVector:dotProduct:RealVector#[checkVectorDimensions, v, double, d, 0, final, int, n, getDimension, for, int, i, 0, <, i, n, ++, i, +=, d, *, getEntry, i, v, getEntry, i, return, d]
org.apache.commons.math4.linear:RealVector:cosine:RealVector#[final, double, norm, getNorm, final, double, vNorm, v, getNorm, if, ||, ==, norm, 0, ==, vNorm, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, return, /, dotProduct, v, *, norm, vNorm]
org.apache.commons.math4.linear:RealVector:getDistance:RealVector#[checkVectorDimensions, v, double, d, 0, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, final, double, diff, -, e, getValue, v, getEntry, e, getIndex, +=, d, *, diff, diff, return, FastMath, sqrt, d]
org.apache.commons.math4.linear:RealVector:getNorm:null#[double, sum, 0, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, final, double, value, e, getValue, +=, sum, *, value, value, return, FastMath, sqrt, sum]
org.apache.commons.math4.linear:RealVector:getL1Norm:null#[double, norm, 0, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, +=, norm, FastMath, abs, e, getValue, return, norm]
org.apache.commons.math4.linear:RealVector:getLInfNorm:null#[double, norm, 0, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, =, norm, FastMath, max, norm, FastMath, abs, e, getValue, return, norm]
org.apache.commons.math4.linear:RealVector:getL1Distance:RealVector#[checkVectorDimensions, v, double, d, 0, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, +=, d, FastMath, abs, -, e, getValue, v, getEntry, e, getIndex, return, d]
org.apache.commons.math4.linear:RealVector:getLInfDistance:RealVector#[checkVectorDimensions, v, double, d, 0, Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, =, d, FastMath, max, FastMath, abs, -, e, getValue, v, getEntry, e, getIndex, d, return, d]
org.apache.commons.math4.linear:RealVector:getMinIndex:null#[int, minIndex, -, 1, double, minValue, Double.POSITIVE_INFINITY, Iterator, Entry, iterator, iterator, while, iterator, hasNext, final, Entry, entry, iterator, next, if, <=, entry, getValue, minValue, =, minIndex, entry, getIndex, =, minValue, entry, getValue, return, minIndex]
org.apache.commons.math4.linear:RealVector:getMinValue:null#[final, int, minIndex, getMinIndex, return, <, minIndex, 0, Double.NaN, getEntry, minIndex]
org.apache.commons.math4.linear:RealVector:getMaxIndex:null#[int, maxIndex, -, 1, double, maxValue, Double.NEGATIVE_INFINITY, Iterator, Entry, iterator, iterator, while, iterator, hasNext, final, Entry, entry, iterator, next, if, >=, entry, getValue, maxValue, =, maxIndex, entry, getIndex, =, maxValue, entry, getValue, return, maxIndex]
org.apache.commons.math4.linear:RealVector:getMaxValue:null#[final, int, maxIndex, getMaxIndex, return, <, maxIndex, 0, Double.NaN, getEntry, maxIndex]
org.apache.commons.math4.linear:RealVector:mapMultiply:double#[return, copy, mapMultiplyToSelf, d]
org.apache.commons.math4.linear:RealVector:mapMultiplyToSelf:double#[return, mapToSelf, FunctionUtils, fix2ndArgument, new, Multiply, d]
org.apache.commons.math4.linear:RealVector:mapSubtract:double#[return, copy, mapSubtractToSelf, d]
org.apache.commons.math4.linear:RealVector:mapSubtractToSelf:double#[return, mapAddToSelf, -, d]
org.apache.commons.math4.linear:RealVector:mapDivide:double#[return, copy, mapDivideToSelf, d]
org.apache.commons.math4.linear:RealVector:mapDivideToSelf:double#[return, mapToSelf, FunctionUtils, fix2ndArgument, new, Divide, d]
org.apache.commons.math4.linear:RealVector:outerProduct:RealVector#[final, int, m, this, getDimension, final, int, n, v, getDimension, final, RealMatrix, product, if, ||, instanceof, v, SparseRealVector, instanceof, this, SparseRealVector, =, product, new, OpenMapRealMatrix, m, n, =, product, new, Array2DRowRealMatrix, m, n, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, n, ++, j, product, setEntry, i, j, *, this, getEntry, i, v, getEntry, j, return, product]
org.apache.commons.math4.linear:RealVector:projection:RealVector#[final, double, norm2, v, dotProduct, v, if, ==, norm2, 0.0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, return, v, mapMultiply, /, dotProduct, v, v, dotProduct, v]
org.apache.commons.math4.linear:RealVector:set:double#[Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, e, setValue, value]
org.apache.commons.math4.linear:RealVector:toArray:null#[int, dim, getDimension, double, values, double, dim, for, int, i, 0, <, i, dim, ++, i, =, values, i, getEntry, i, return, values]
org.apache.commons.math4.linear:RealVector:unitVector:null#[final, double, norm, getNorm, if, ==, norm, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, return, mapDivide, norm]
org.apache.commons.math4.linear:RealVector:unitize:null#[final, double, norm, getNorm, if, ==, norm, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NORM, mapDivideToSelf, getNorm]
org.apache.commons.math4.linear:RealVector:sparseIterator:null#[return, new, SparseEntryIterator]
org.apache.commons.math4.linear:RealVector:iterator:null#[final, int, dim, getDimension, return, new, Iterator, Entry, private, int, i, 0, private, Entry, e, new, Entry, Override, public, boolean, hasNext, return, <, i, dim, Override, public, Entry, next, if, <, i, dim, e, setIndex, ++, i, return, e, throw, new, NoSuchElementException, Override, public, void, remove, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVector:map:UnivariateFunction#[return, copy, mapToSelf, function]
org.apache.commons.math4.linear:RealVector:mapToSelf:UnivariateFunction#[Iterator, Entry, it, iterator, while, it, hasNext, final, Entry, e, it, next, e, setValue, function, value, e, getValue, return, this]
org.apache.commons.math4.linear:RealVector:combine:double+double+RealVector#[return, copy, combineToSelf, a, b, y]
org.apache.commons.math4.linear:RealVector:combineToSelf:double+double+RealVector#[checkVectorDimensions, y, for, int, i, 0, <, i, getDimension, ++, i, final, double, xi, getEntry, i, final, double, yi, y, getEntry, i, setEntry, i, +, *, a, xi, *, b, yi, return, this]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorPreservingVisitor#[final, int, dim, getDimension, visitor, start, dim, 0, -, dim, 1, for, int, i, 0, <, i, dim, ++, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorPreservingVisitor+int+int#[checkIndices, start, end, visitor, start, getDimension, start, end, for, int, i, start, <=, i, end, ++, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorPreservingVisitor#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorPreservingVisitor+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorChangingVisitor#[final, int, dim, getDimension, visitor, start, dim, 0, -, dim, 1, for, int, i, 0, <, i, dim, ++, i, setEntry, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorChangingVisitor+int+int#[checkIndices, start, end, visitor, start, getDimension, start, end, for, int, i, start, <=, i, end, ++, i, setEntry, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorChangingVisitor#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorChangingVisitor+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:RealVector:equals:Object#[throw, new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVector:hashCode:null#[throw, new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVector:unmodifiableRealVector:RealVector#[return, new, RealVector, Override, public, RealVector, mapToSelf, UnivariateFunction, function, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, RealVector, map, UnivariateFunction, function, return, v, map, function, Override, public, Iterator, Entry, iterator, final, Iterator, Entry, i, v, iterator, return, new, Iterator, Entry, private, final, UnmodifiableEntry, e, new, UnmodifiableEntry, Override, public, boolean, hasNext, return, i, hasNext, Override, public, Entry, next, e, setIndex, i, next, getIndex, return, e, Override, public, void, remove, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, Iterator, Entry, sparseIterator, final, Iterator, Entry, i, v, sparseIterator, return, new, Iterator, Entry, private, final, UnmodifiableEntry, e, new, UnmodifiableEntry, Override, public, boolean, hasNext, return, i, hasNext, Override, public, Entry, next, e, setIndex, i, next, getIndex, return, e, Override, public, void, remove, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, RealVector, copy, return, v, copy, Override, public, RealVector, add, RealVector, w, DimensionMismatchException, return, v, add, w, Override, public, RealVector, subtract, RealVector, w, DimensionMismatchException, return, v, subtract, w, Override, public, RealVector, mapAdd, double, d, return, v, mapAdd, d, Override, public, RealVector, mapAddToSelf, double, d, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, RealVector, mapSubtract, double, d, return, v, mapSubtract, d, Override, public, RealVector, mapSubtractToSelf, double, d, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, RealVector, mapMultiply, double, d, return, v, mapMultiply, d, Override, public, RealVector, mapMultiplyToSelf, double, d, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, RealVector, mapDivide, double, d, return, v, mapDivide, d, Override, public, RealVector, mapDivideToSelf, double, d, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, RealVector, ebeMultiply, RealVector, w, DimensionMismatchException, return, v, ebeMultiply, w, Override, public, RealVector, ebeDivide, RealVector, w, DimensionMismatchException, return, v, ebeDivide, w, Override, public, double, dotProduct, RealVector, w, DimensionMismatchException, return, v, dotProduct, w, Override, public, double, cosine, RealVector, w, DimensionMismatchException, MathArithmeticException, return, v, cosine, w, Override, public, double, getNorm, return, v, getNorm, Override, public, double, getL1Norm, return, v, getL1Norm, Override, public, double, getLInfNorm, return, v, getLInfNorm, Override, public, double, getDistance, RealVector, w, DimensionMismatchException, return, v, getDistance, w, Override, public, double, getL1Distance, RealVector, w, DimensionMismatchException, return, v, getL1Distance, w, Override, public, double, getLInfDistance, RealVector, w, DimensionMismatchException, return, v, getLInfDistance, w, Override, public, RealVector, unitVector, MathArithmeticException, return, v, unitVector, Override, public, void, unitize, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, RealMatrix, outerProduct, RealVector, w, return, v, outerProduct, w, Override, public, double, getEntry, int, index, OutOfRangeException, return, v, getEntry, index, Override, public, void, setEntry, int, index, double, value, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, void, addToEntry, int, index, double, value, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, int, getDimension, return, v, getDimension, Override, public, RealVector, append, RealVector, w, return, v, append, w, Override, public, RealVector, append, double, d, return, v, append, d, Override, public, RealVector, getSubVector, int, index, int, n, OutOfRangeException, NotPositiveException, return, v, getSubVector, index, n, Override, public, void, setSubVector, int, index, RealVector, w, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, void, set, double, value, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, Override, public, double, toArray, return, v, toArray, Override, public, boolean, isNaN, return, v, isNaN, Override, public, boolean, isInfinite, return, v, isInfinite, Override, public, RealVector, combine, double, a, double, b, RealVector, y, DimensionMismatchException, return, v, combine, a, b, y, Override, public, RealVector, combineToSelf, double, a, double, b, RealVector, y, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException, UnmodifiableEntry, Entry, Override, public, double, getValue, return, v, getEntry, getIndex, Override, public, void, setValue, double, value, MathUnsupportedOperationException, throw, new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVectorFormat:getAvailableLocales:null#[return, NumberFormat, getAvailableLocales]
org.apache.commons.math4.linear:RealVectorFormat:getPrefix:null#[return, prefix]
org.apache.commons.math4.linear:RealVectorFormat:getSuffix:null#[return, suffix]
org.apache.commons.math4.linear:RealVectorFormat:getSeparator:null#[return, separator]
org.apache.commons.math4.linear:RealVectorFormat:getFormat:null#[return, format]
org.apache.commons.math4.linear:RealVectorFormat:getInstance:null#[return, getInstance, Locale, getDefault]
org.apache.commons.math4.linear:RealVectorFormat:getInstance:Locale#[return, new, RealVectorFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.linear:RealVectorFormat:format:RealVector#[return, format, v, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.linear:RealVectorFormat:format:RealVector+StringBuffer+FieldPosition#[pos, setBeginIndex, 0, pos, setEndIndex, 0, toAppendTo, append, prefix, for, int, i, 0, <, i, vector, getDimension, ++, i, if, >, i, 0, toAppendTo, append, separator, CompositeFormat, formatDouble, vector, getEntry, i, format, toAppendTo, pos, toAppendTo, append, suffix, return, toAppendTo]
org.apache.commons.math4.linear:RealVectorFormat:parse:String#[final, ParsePosition, parsePosition, new, ParsePosition, 0, final, ArrayRealVector, result, parse, source, parsePosition, if, ==, parsePosition, getIndex, 0, throw, new, MathParseException, source, parsePosition, getErrorIndex, ArrayRealVector, return, result]
org.apache.commons.math4.linear:RealVectorFormat:parse:String+ParsePosition#[int, initialIndex, pos, getIndex, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedPrefix, pos, return, null, List, Number, components, new, ArrayList, Number, for, boolean, loop, true, loop, if, !, components, isEmpty, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedSeparator, pos, =, loop, false, if, loop, CompositeFormat, parseAndIgnoreWhitespace, source, pos, Number, component, CompositeFormat, parseNumber, source, format, pos, if, !=, component, null, components, add, component, pos, setIndex, initialIndex, return, null, CompositeFormat, parseAndIgnoreWhitespace, source, pos, if, !, CompositeFormat, parseFixedstring, source, trimmedSuffix, pos, return, null, double, data, double, components, size, for, int, i, 0, <, i, data.length, ++, i, =, data, i, components, get, i, doubleValue, return, new, ArrayRealVector, data, false]
org.apache.commons.math4.linear:RectangularCholeskyDecomposition:getRootMatrix:null#[return, root]
org.apache.commons.math4.linear:RectangularCholeskyDecomposition:getRank:null#[return, rank]
org.apache.commons.math4.linear:RRQRDecomposition:decompose:double[][]#[=, p, int, qrt.length, for, int, i, 0, <, i, p.length, ++, i, =, p, i, i, super, decompose, qrt]
org.apache.commons.math4.linear:RRQRDecomposition:performHouseholderReflection:int+double[][]#[double, l2NormSquaredMax, 0, int, l2NormSquaredMaxIndex, minor, for, int, i, minor, <, i, qrt.length, ++, i, double, l2NormSquared, 0, for, int, j, 0, <, j, qrt, i, length, ++, j, +=, l2NormSquared, *, qrt, i, j, qrt, i, j, if, >, l2NormSquared, l2NormSquaredMax, =, l2NormSquaredMax, l2NormSquared, =, l2NormSquaredMaxIndex, i, if, !=, l2NormSquaredMaxIndex, minor, double, tmp1, qrt, minor, =, qrt, minor, qrt, l2NormSquaredMaxIndex, =, qrt, l2NormSquaredMaxIndex, tmp1, int, tmp2, p, minor, =, p, minor, p, l2NormSquaredMaxIndex, =, p, l2NormSquaredMaxIndex, tmp2, super, performHouseholderReflection, minor, qrt]
org.apache.commons.math4.linear:RRQRDecomposition:getP:null#[if, ==, cachedP, null, int, n, p.length, =, cachedP, MatrixUtils, createRealMatrix, n, n, for, int, i, 0, <, i, n, ++, i, cachedP, setEntry, p, i, i, 1, return, cachedP]
org.apache.commons.math4.linear:RRQRDecomposition:getRank:double#[RealMatrix, r, getR, int, rows, r, getRowDimension, int, columns, r, getColumnDimension, int, rank, 1, double, lastNorm, r, getFrobeniusNorm, double, rNorm, lastNorm, while, <, rank, FastMath, min, rows, columns, double, thisNorm, r, getSubMatrix, rank, -, rows, 1, rank, -, columns, 1, getFrobeniusNorm, if, ||, ==, thisNorm, 0, <, *, /, thisNorm, lastNorm, rNorm, dropThreshold, break, =, lastNorm, thisNorm, ++, rank, return, rank]
org.apache.commons.math4.linear:RRQRDecomposition:getSolver:null#[return, new, Solver, super, getSolver, this, getP]
org.apache.commons.math4.linear:SchurTransformer:getP:null#[if, ==, cachedP, null, =, cachedP, MatrixUtils, createRealMatrix, matrixP, return, cachedP]
org.apache.commons.math4.linear:SchurTransformer:getPT:null#[if, ==, cachedPt, null, =, cachedPt, getP, transpose, return, cachedPt]
org.apache.commons.math4.linear:SchurTransformer:getT:null#[if, ==, cachedT, null, =, cachedT, MatrixUtils, createRealMatrix, matrixT, return, cachedT]
org.apache.commons.math4.linear:SchurTransformer:transform:null#[final, int, n, matrixT.length, final, double, norm, getNorm, final, ShiftInfo, shift, new, ShiftInfo, int, iteration, 0, int, iu, -, n, 1, while, >=, iu, 0, final, int, il, findSmallSubDiagonalElement, iu, norm, if, ==, il, iu, +=, matrixT, iu, iu, shift.exShift, --, iu, =, iteration, 0, if, ==, il, -, iu, 1, double, p, /, -, matrixT, -, iu, 1, -, iu, 1, matrixT, iu, iu, 2.0, double, q, +, *, p, p, *, matrixT, iu, -, iu, 1, matrixT, -, iu, 1, iu, +=, matrixT, iu, iu, shift.exShift, +=, matrixT, -, iu, 1, -, iu, 1, shift.exShift, if, >=, q, 0, double, z, FastMath, sqrt, FastMath, abs, q, if, >=, p, 0, =, z, +, p, z, =, z, -, p, z, final, double, x, matrixT, iu, -, iu, 1, final, double, s, +, FastMath, abs, x, FastMath, abs, z, =, p, /, x, s, =, q, /, z, s, final, double, r, FastMath, sqrt, +, *, p, p, *, q, q, /=, p, r, /=, q, r, for, int, j, -, iu, 1, <, j, n, ++, j, =, z, matrixT, -, iu, 1, j, =, matrixT, -, iu, 1, j, +, *, q, z, *, p, matrixT, iu, j, =, matrixT, iu, j, -, *, q, matrixT, iu, j, *, p, z, for, int, i, 0, <=, i, iu, ++, i, =, z, matrixT, i, -, iu, 1, =, matrixT, i, -, iu, 1, +, *, q, z, *, p, matrixT, i, iu, =, matrixT, i, iu, -, *, q, matrixT, i, iu, *, p, z, for, int, i, 0, <=, i, -, n, 1, ++, i, =, z, matrixP, i, -, iu, 1, =, matrixP, i, -, iu, 1, +, *, q, z, *, p, matrixP, i, iu, =, matrixP, i, iu, -, *, q, matrixP, i, iu, *, p, z, -=, iu, 2, =, iteration, 0, computeShift, il, iu, iteration, shift, if, >, ++, iteration, MAX_ITERATIONS, throw, new, MaxCountExceededException, LocalizedFormats.CONVERGENCE_FAILED, MAX_ITERATIONS, final, double, hVec, double, 3, final, int, im, initQRStep, il, iu, shift, hVec, performDoubleQRStep, il, im, iu, shift, hVec]
org.apache.commons.math4.linear:SchurTransformer:getNorm:null#[double, norm, 0.0, for, int, i, 0, <, i, matrixT.length, ++, i, for, int, j, FastMath, max, -, i, 1, 0, <, j, matrixT.length, ++, j, +=, norm, FastMath, abs, matrixT, i, j, return, norm]
org.apache.commons.math4.linear:SchurTransformer:findSmallSubDiagonalElement:int+double#[int, l, startIdx, while, >, l, 0, double, s, +, FastMath, abs, matrixT, -, l, 1, -, l, 1, FastMath, abs, matrixT, l, l, if, ==, s, 0.0, =, s, norm, if, <, FastMath, abs, matrixT, l, -, l, 1, *, epsilon, s, break, --, l, return, l]
org.apache.commons.math4.linear:SchurTransformer:computeShift:int+int+int+ShiftInfo#[=, shift.x, matrixT, idx, idx, =, shift.y, =, shift.w, 0.0, if, <, l, idx, =, shift.y, matrixT, -, idx, 1, -, idx, 1, =, shift.w, *, matrixT, idx, -, idx, 1, matrixT, -, idx, 1, idx, if, ==, iteration, 10, +=, shift.exShift, shift.x, for, int, i, 0, <=, i, idx, ++, i, -=, matrixT, i, i, shift.x, final, double, s, +, FastMath, abs, matrixT, idx, -, idx, 1, FastMath, abs, matrixT, -, idx, 1, -, idx, 2, =, shift.x, *, 0.75, s, =, shift.y, *, 0.75, s, =, shift.w, *, -, 0.4375, s, s, if, ==, iteration, 30, double, s, /, -, shift.y, shift.x, 2.0, =, s, +, *, s, s, shift.w, if, >, s, 0.0, =, s, FastMath, sqrt, s, if, <, shift.y, shift.x, =, s, -, s, =, s, -, shift.x, /, shift.w, +, /, -, shift.y, shift.x, 2.0, s, for, int, i, 0, <=, i, idx, ++, i, -=, matrixT, i, i, s, +=, shift.exShift, s, =, shift.x, =, shift.y, =, shift.w, 0.964]
org.apache.commons.math4.linear:SchurTransformer:initQRStep:int+int+ShiftInfo+double[]#[int, im, -, iu, 2, while, >=, im, il, final, double, z, matrixT, im, im, final, double, r, -, shift.x, z, double, s, -, shift.y, z, =, hVec, 0, +, /, -, *, r, s, shift.w, matrixT, +, im, 1, im, matrixT, im, +, im, 1, =, hVec, 1, -, matrixT, +, im, 1, +, im, 1, z, r, s, =, hVec, 2, matrixT, +, im, 2, +, im, 1, if, ==, im, il, break, final, double, lhs, *, FastMath, abs, matrixT, im, -, im, 1, +, FastMath, abs, hVec, 1, FastMath, abs, hVec, 2, final, double, rhs, *, FastMath, abs, hVec, 0, +, FastMath, abs, matrixT, -, im, 1, -, im, 1, FastMath, abs, z, FastMath, abs, matrixT, +, im, 1, +, im, 1, if, <, lhs, *, epsilon, rhs, break, --, im, return, im]
org.apache.commons.math4.linear:SchurTransformer:performDoubleQRStep:int+int+int+ShiftInfo+double[]#[final, int, n, matrixT.length, double, p, hVec, 0, double, q, hVec, 1, double, r, hVec, 2, for, int, k, im, <=, k, -, iu, 1, ++, k, boolean, notlast, !=, k, -, iu, 1, if, !=, k, im, =, p, matrixT, k, -, k, 1, =, q, matrixT, +, k, 1, -, k, 1, =, r, notlast, matrixT, +, k, 2, -, k, 1, 0.0, =, shift.x, +, FastMath, abs, p, FastMath, abs, q, FastMath, abs, r, if, Precision, equals, shift.x, 0.0, epsilon, continue, /=, p, shift.x, /=, q, shift.x, /=, r, shift.x, double, s, FastMath, sqrt, +, +, *, p, p, *, q, q, *, r, r, if, <, p, 0.0, =, s, -, s, if, !=, s, 0.0, if, !=, k, im, =, matrixT, k, -, k, 1, *, -, s, shift.x, if, !=, il, im, =, matrixT, k, -, k, 1, -, matrixT, k, -, k, 1, +=, p, s, =, shift.x, /, p, s, =, shift.y, /, q, s, double, z, /, r, s, /=, q, p, /=, r, p, for, int, j, k, <, j, n, ++, j, =, p, +, matrixT, k, j, *, q, matrixT, +, k, 1, j, if, notlast, +=, p, *, r, matrixT, +, k, 2, j, -=, matrixT, +, k, 2, j, *, p, z, -=, matrixT, k, j, *, p, shift.x, -=, matrixT, +, k, 1, j, *, p, shift.y, for, int, i, 0, <=, i, FastMath, min, iu, +, k, 3, ++, i, =, p, +, *, shift.x, matrixT, i, k, *, shift.y, matrixT, i, +, k, 1, if, notlast, +=, p, *, z, matrixT, i, +, k, 2, -=, matrixT, i, +, k, 2, *, p, r, -=, matrixT, i, k, p, -=, matrixT, i, +, k, 1, *, p, q, final, int, high, -, matrixT.length, 1, for, int, i, 0, <=, i, high, ++, i, =, p, +, *, shift.x, matrixP, i, k, *, shift.y, matrixP, i, +, k, 1, if, notlast, +=, p, *, z, matrixP, i, +, k, 2, -=, matrixP, i, +, k, 2, *, p, r, -=, matrixP, i, k, p, -=, matrixP, i, +, k, 1, *, p, q, for, int, i, +, im, 2, <=, i, iu, ++, i, =, matrixT, i, -, i, 2, 0.0, if, >, i, +, im, 2, =, matrixT, i, -, i, 3, 0.0]
org.apache.commons.math4.linear:SingularValueDecomposition:getU:null#[return, cachedU]
org.apache.commons.math4.linear:SingularValueDecomposition:getUT:null#[if, ==, cachedUt, null, =, cachedUt, getU, transpose, return, cachedUt]
org.apache.commons.math4.linear:SingularValueDecomposition:getS:null#[if, ==, cachedS, null, =, cachedS, MatrixUtils, createRealDiagonalMatrix, singularValues, return, cachedS]
org.apache.commons.math4.linear:SingularValueDecomposition:getSingularValues:null#[return, singularValues, clone]
org.apache.commons.math4.linear:SingularValueDecomposition:getV:null#[return, cachedV]
org.apache.commons.math4.linear:SingularValueDecomposition:getVT:null#[if, ==, cachedVt, null, =, cachedVt, getV, transpose, return, cachedVt]
org.apache.commons.math4.linear:SingularValueDecomposition:getCovariance:double#[final, int, p, singularValues.length, int, dimension, 0, while, &&, <, dimension, p, >=, singularValues, dimension, minSingularValue, ++, dimension, if, ==, dimension, 0, throw, new, NumberIsTooLargeException, LocalizedFormats.TOO_LARGE_CUTOFF_SINGULAR_VALUE, minSingularValue, singularValues, 0, true, final, double, data, double, dimension, p, getVT, walkInOptimizedOrder, new, DefaultRealMatrixPreservingVisitor, Override, public, void, visit, final, int, row, final, int, column, final, double, value, =, data, row, column, /, value, singularValues, row, 0, -, dimension, 1, 0, -, p, 1, RealMatrix, jv, new, Array2DRowRealMatrix, data, false, return, jv, transpose, multiply, jv]
org.apache.commons.math4.linear:SingularValueDecomposition:getNorm:null#[return, singularValues, 0]
org.apache.commons.math4.linear:SingularValueDecomposition:getConditionNumber:null#[return, /, singularValues, 0, singularValues, -, n, 1]
org.apache.commons.math4.linear:SingularValueDecomposition:getInverseConditionNumber:null#[return, /, singularValues, -, n, 1, singularValues, 0]
org.apache.commons.math4.linear:SingularValueDecomposition:getRank:null#[int, r, 0, for, int, i, 0, <, i, singularValues.length, ++, i, if, >, singularValues, i, tol, ++, r, return, r]
org.apache.commons.math4.linear:SingularValueDecomposition:getSolver:null#[return, new, Solver, singularValues, getUT, getV, ==, getRank, m, tol]
org.apache.commons.math4.linear:SparseFieldMatrix:addToEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, final, int, key, computeKey, row, column, final, T, value, entries, get, key, add, increment, if, getField, getZero, equals, value, entries, remove, key, entries, put, key, value]
org.apache.commons.math4.linear:SparseFieldMatrix:copy:null#[return, new, SparseFieldMatrix, T, this]
org.apache.commons.math4.linear:SparseFieldMatrix:createMatrix:int+int#[return, new, SparseFieldMatrix, T, getField, rowDimension, columnDimension]
org.apache.commons.math4.linear:SparseFieldMatrix:getColumnDimension:null#[return, columns]
org.apache.commons.math4.linear:SparseFieldMatrix:getEntry:int+int#[checkRowIndex, row, checkColumnIndex, column, return, entries, get, computeKey, row, column]
org.apache.commons.math4.linear:SparseFieldMatrix:getRowDimension:null#[return, rows]
org.apache.commons.math4.linear:SparseFieldMatrix:multiplyEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, final, int, key, computeKey, row, column, final, T, value, entries, get, key, multiply, factor, if, getField, getZero, equals, value, entries, remove, key, entries, put, key, value]
org.apache.commons.math4.linear:SparseFieldMatrix:setEntry:int+int+T#[checkRowIndex, row, checkColumnIndex, column, if, getField, getZero, equals, value, entries, remove, computeKey, row, column, entries, put, computeKey, row, column, value]
org.apache.commons.math4.linear:SparseFieldMatrix:computeKey:int+int#[return, +, *, row, columns, column]
org.apache.commons.math4.linear:SparseFieldVector:getEntries:null#[return, entries]
org.apache.commons.math4.linear:SparseFieldVector:add:SparseFieldVector<T>#[checkVectorDimensions, v, getDimension, SparseFieldVector, T, res, SparseFieldVector, T, copy, OpenIntToFieldHashMap, T, Iterator, iter, v, getEntries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, T, value, iter, value, if, entries, containsKey, key, res, setEntry, key, entries, get, key, add, value, res, setEntry, key, value, return, res]
org.apache.commons.math4.linear:SparseFieldVector:append:SparseFieldVector<T>#[SparseFieldVector, T, res, new, SparseFieldVector, T, this, v, getDimension, OpenIntToFieldHashMap, T, Iterator, iter, v.entries, iterator, while, iter, hasNext, iter, advance, res, setEntry, +, iter, key, virtualSize, iter, value, return, res]
org.apache.commons.math4.linear:SparseFieldVector:append:FieldVector<T>#[if, instanceof, v, SparseFieldVector, return, append, SparseFieldVector, T, v, final, int, n, v, getDimension, FieldVector, T, res, new, SparseFieldVector, T, this, n, for, int, i, 0, <, i, n, ++, i, res, setEntry, +, i, virtualSize, v, getEntry, i, return, res]
org.apache.commons.math4.linear:SparseFieldVector:append:T#[MathUtils, checkNotNull, d, FieldVector, T, res, new, SparseFieldVector, T, this, 1, res, setEntry, virtualSize, d, return, res]
org.apache.commons.math4.linear:SparseFieldVector:copy:null#[return, new, SparseFieldVector, T, this]
org.apache.commons.math4.linear:SparseFieldVector:dotProduct:FieldVector<T>#[checkVectorDimensions, v, getDimension, T, res, field, getZero, OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, =, res, res, add, v, getEntry, iter, key, multiply, iter, value, return, res]
org.apache.commons.math4.linear:SparseFieldVector:ebeDivide:FieldVector<T>#[checkVectorDimensions, v, getDimension, SparseFieldVector, T, res, new, SparseFieldVector, T, this, OpenIntToFieldHashMap, T, Iterator, iter, res.entries, iterator, while, iter, hasNext, iter, advance, res, setEntry, iter, key, iter, value, divide, v, getEntry, iter, key, return, res]
org.apache.commons.math4.linear:SparseFieldVector:ebeMultiply:FieldVector<T>#[checkVectorDimensions, v, getDimension, SparseFieldVector, T, res, new, SparseFieldVector, T, this, OpenIntToFieldHashMap, T, Iterator, iter, res.entries, iterator, while, iter, hasNext, iter, advance, res, setEntry, iter, key, iter, value, multiply, v, getEntry, iter, key, return, res]
org.apache.commons.math4.linear:SparseFieldVector:getDimension:null#[return, virtualSize]
org.apache.commons.math4.linear:SparseFieldVector:getEntry:int#[checkIndex, index, return, entries, get, index]
org.apache.commons.math4.linear:SparseFieldVector:getField:null#[return, field]
org.apache.commons.math4.linear:SparseFieldVector:getSubVector:int+int#[if, <, n, 0, throw, new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, checkIndex, index, checkIndex, -, +, index, n, 1, SparseFieldVector, T, res, new, SparseFieldVector, T, field, n, int, end, +, index, n, OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, if, &&, >=, key, index, <, key, end, res, setEntry, -, key, index, iter, value, return, res]
org.apache.commons.math4.linear:SparseFieldVector:mapAdd:T#[return, copy, mapAddToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapAddToSelf:T#[for, int, i, 0, <, i, virtualSize, ++, i, setEntry, i, getEntry, i, add, d, return, this]
org.apache.commons.math4.linear:SparseFieldVector:mapDivide:T#[return, copy, mapDivideToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapDivideToSelf:T#[OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, entries, put, iter, key, iter, value, divide, d, return, this]
org.apache.commons.math4.linear:SparseFieldVector:mapInv:null#[return, copy, mapInvToSelf]
org.apache.commons.math4.linear:SparseFieldVector:mapInvToSelf:null#[for, int, i, 0, <, i, virtualSize, ++, i, setEntry, i, field, getOne, divide, getEntry, i, return, this]
org.apache.commons.math4.linear:SparseFieldVector:mapMultiply:T#[return, copy, mapMultiplyToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapMultiplyToSelf:T#[OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, entries, put, iter, key, iter, value, multiply, d, return, this]
org.apache.commons.math4.linear:SparseFieldVector:mapSubtract:T#[return, copy, mapSubtractToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapSubtractToSelf:T#[return, mapAddToSelf, field, getZero, subtract, d]
org.apache.commons.math4.linear:SparseFieldVector:outerProduct:SparseFieldVector<T>#[final, int, n, v, getDimension, SparseFieldMatrix, T, res, new, SparseFieldMatrix, T, field, virtualSize, n, OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, OpenIntToFieldHashMap, T, Iterator, iter2, v.entries, iterator, while, iter2, hasNext, iter2, advance, res, setEntry, iter, key, iter2, key, iter, value, multiply, iter2, value, return, res]
org.apache.commons.math4.linear:SparseFieldVector:outerProduct:FieldVector<T>#[if, instanceof, v, SparseFieldVector, return, outerProduct, SparseFieldVector, T, v, final, int, n, v, getDimension, FieldMatrix, T, res, new, SparseFieldMatrix, T, field, virtualSize, n, OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, int, row, iter, key, FieldElement, T, value, iter, value, for, int, col, 0, <, col, n, ++, col, res, setEntry, row, col, value, multiply, v, getEntry, col, return, res]
org.apache.commons.math4.linear:SparseFieldVector:projection:FieldVector<T>#[checkVectorDimensions, v, getDimension, return, v, mapMultiply, dotProduct, v, divide, v, dotProduct, v]
org.apache.commons.math4.linear:SparseFieldVector:set:T#[MathUtils, checkNotNull, value, for, int, i, 0, <, i, virtualSize, ++, i, setEntry, i, value]
org.apache.commons.math4.linear:SparseFieldVector:setEntry:int+T#[MathUtils, checkNotNull, value, checkIndex, index, entries, put, index, value]
org.apache.commons.math4.linear:SparseFieldVector:setSubVector:int+FieldVector<T>#[checkIndex, index, checkIndex, -, +, index, v, getDimension, 1, final, int, n, v, getDimension, for, int, i, 0, <, i, n, ++, i, setEntry, +, i, index, v, getEntry, i]
org.apache.commons.math4.linear:SparseFieldVector:subtract:SparseFieldVector<T>#[checkVectorDimensions, v, getDimension, SparseFieldVector, T, res, SparseFieldVector, T, copy, OpenIntToFieldHashMap, T, Iterator, iter, v, getEntries, iterator, while, iter, hasNext, iter, advance, int, key, iter, key, if, entries, containsKey, key, res, setEntry, key, entries, get, key, subtract, iter, value, res, setEntry, key, field, getZero, subtract, iter, value, return, res]
org.apache.commons.math4.linear:SparseFieldVector:subtract:FieldVector<T>#[if, instanceof, v, SparseFieldVector, return, subtract, SparseFieldVector, T, v, final, int, n, v, getDimension, checkVectorDimensions, n, SparseFieldVector, T, res, new, SparseFieldVector, T, this, for, int, i, 0, <, i, n, ++, i, if, entries, containsKey, i, res, setEntry, i, entries, get, i, subtract, v, getEntry, i, res, setEntry, i, field, getZero, subtract, v, getEntry, i, return, res]
org.apache.commons.math4.linear:SparseFieldVector:toArray:null#[T, res, MathArrays, buildArray, field, virtualSize, OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, =, res, iter, key, iter, value, return, res]
org.apache.commons.math4.linear:SparseFieldVector:checkIndex:int#[if, ||, <, index, 0, >=, index, getDimension, throw, new, OutOfRangeException, index, 0, -, getDimension, 1]
org.apache.commons.math4.linear:SparseFieldVector:checkIndices:int+int#[final, int, dim, getDimension, if, ||, <, start, 0, >=, start, dim, throw, new, OutOfRangeException, LocalizedFormats.INDEX, start, 0, -, dim, 1, if, ||, <, end, 0, >=, end, dim, throw, new, OutOfRangeException, LocalizedFormats.INDEX, end, 0, -, dim, 1, if, <, end, start, throw, new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false]
org.apache.commons.math4.linear:SparseFieldVector:checkVectorDimensions:int#[if, !=, getDimension, n, throw, new, DimensionMismatchException, getDimension, n]
org.apache.commons.math4.linear:SparseFieldVector:add:FieldVector<T>#[if, instanceof, v, SparseFieldVector, return, add, SparseFieldVector, T, v, final, int, n, v, getDimension, checkVectorDimensions, n, SparseFieldVector, T, res, new, SparseFieldVector, T, field, getDimension, for, int, i, 0, <, i, n, ++, i, res, setEntry, i, v, getEntry, i, add, getEntry, i, return, res]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>#[final, int, dim, getDimension, visitor, start, dim, 0, -, dim, 1, for, int, i, 0, <, i, dim, ++, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>+int+int#[checkIndices, start, end, visitor, start, getDimension, start, end, for, int, i, start, <=, i, end, ++, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>#[final, int, dim, getDimension, visitor, start, dim, 0, -, dim, 1, for, int, i, 0, <, i, dim, ++, i, setEntry, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>+int+int#[checkIndices, start, end, visitor, start, getDimension, start, end, for, int, i, start, <=, i, end, ++, i, setEntry, i, visitor, visit, i, getEntry, i, return, visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>#[return, walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>+int+int#[return, walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:SparseFieldVector:hashCode:null#[final, int, prime, 31, int, result, 1, =, result, +, *, prime, result, ==, field, null, 0, field, hashCode, =, result, +, *, prime, result, virtualSize, OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, int, temp, iter, value, hashCode, =, result, +, *, prime, result, temp, return, result]
org.apache.commons.math4.linear:SparseFieldVector:equals:Object#[if, ==, this, obj, return, true, if, !, instanceof, obj, SparseFieldVector, return, false, SuppressWarnings, "unchecked", SparseFieldVector, T, other, SparseFieldVector, T, obj, if, ==, field, null, if, !=, other.field, null, return, false, if, !, field, equals, other.field, return, false, if, !=, virtualSize, other.virtualSize, return, false, OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, while, iter, hasNext, iter, advance, T, test, other, getEntry, iter, key, if, !, test, equals, iter, value, return, false, =, iter, other, getEntries, iterator, while, iter, hasNext, iter, advance, T, test, iter, value, if, !, test, equals, getEntry, iter, key, return, false, return, true]
org.apache.commons.math4.linear:SymmLQ:getCheck:null#[return, check]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealLinearOperator+RealVector#[MathUtils, checkNotNull, a, final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, return, solveInPlace, a, m, b, x, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealLinearOperator+RealVector+boolean+double#[MathUtils, checkNotNull, a, final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, return, solveInPlace, a, m, b, x, goodb, shift]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[MathUtils, checkNotNull, x, return, solveInPlace, a, m, b, x, copy, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealVector#[MathUtils, checkNotNull, a, final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, x, set, 0., return, solveInPlace, a, null, b, x, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealVector+boolean+double#[MathUtils, checkNotNull, a, final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, return, solveInPlace, a, null, b, x, goodb, shift]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealVector+RealVector#[MathUtils, checkNotNull, x, return, solveInPlace, a, null, b, x, copy, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solveInPlace:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[return, solveInPlace, a, m, b, x, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solveInPlace:RealLinearOperator+RealLinearOperator+RealVector+RealVector+boolean+double#[checkParameters, a, m, b, x, final, IterationManager, manager, getIterationManager, manager, resetIterationCount, manager, incrementIterationCount, final, State, state, =, state, new, State, a, m, b, goodb, shift, delta, check, state, init, state, refineSolution, x, IterativeLinearSolverEvent, event, =, event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, if, state, bEqualsNullVector, manager, fireTerminationEvent, event, return, x, final, boolean, earlyStop, =, earlyStop, ||, state, betaEqualsZero, state, hasConverged, manager, fireInitializationEvent, event, if, !, earlyStop, do, manager, incrementIterationCount, =, event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, manager, fireIterationStartedEvent, event, state, update, state, refineSolution, x, =, event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, manager, fireIterationPerformedEvent, event, !, state, hasConverged, =, event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, manager, fireTerminationEvent, event, return, x]
org.apache.commons.math4.linear:SymmLQ:solveInPlace:RealLinearOperator+RealVector+RealVector#[return, solveInPlace, a, null, b, x, false, 0.]
org.apache.commons.math4.linear:TriDiagonalTransformer:getQ:null#[if, ==, cachedQ, null, =, cachedQ, getQT, transpose, return, cachedQ]
org.apache.commons.math4.linear:TriDiagonalTransformer:getQT:null#[if, ==, cachedQt, null, final, int, m, householderVectors.length, double, qta, double, m, m, for, int, k, -, m, 1, >=, k, 1, --, k, final, double, hK, householderVectors, -, k, 1, =, qta, k, k, 1, if, !=, hK, k, 0.0, final, double, inv, /, 1.0, *, secondary, -, k, 1, hK, k, double, beta, /, 1.0, secondary, -, k, 1, =, qta, k, k, +, 1, *, beta, hK, k, for, int, i, +, k, 1, <, i, m, ++, i, =, qta, k, i, *, beta, hK, i, for, int, j, +, k, 1, <, j, m, ++, j, =, beta, 0, for, int, i, +, k, 1, <, i, m, ++, i, +=, beta, *, qta, j, i, hK, i, *=, beta, inv, =, qta, j, k, *, beta, hK, k, for, int, i, +, k, 1, <, i, m, ++, i, +=, qta, j, i, *, beta, hK, i, =, qta, 0, 0, 1, =, cachedQt, MatrixUtils, createRealMatrix, qta, return, cachedQt]
org.apache.commons.math4.linear:TriDiagonalTransformer:getT:null#[if, ==, cachedT, null, final, int, m, main.length, double, ta, double, m, m, for, int, i, 0, <, i, m, ++, i, =, ta, i, i, main, i, if, >, i, 0, =, ta, i, -, i, 1, secondary, -, i, 1, if, <, i, -, main.length, 1, =, ta, i, +, i, 1, secondary, i, =, cachedT, MatrixUtils, createRealMatrix, ta, return, cachedT]
org.apache.commons.math4.linear:TriDiagonalTransformer:getHouseholderVectorsRef:null#[return, householderVectors]
org.apache.commons.math4.linear:TriDiagonalTransformer:getMainDiagonalRef:null#[return, main]
org.apache.commons.math4.linear:TriDiagonalTransformer:getSecondaryDiagonalRef:null#[return, secondary]
org.apache.commons.math4.linear:TriDiagonalTransformer:transform:null#[final, int, m, householderVectors.length, final, double, z, double, m, for, int, k, 0, <, k, -, m, 1, ++, k, final, double, hK, householderVectors, k, =, main, k, hK, k, double, xNormSqr, 0, for, int, j, +, k, 1, <, j, m, ++, j, final, double, c, hK, j, +=, xNormSqr, *, c, c, final, double, a, >, hK, +, k, 1, 0, -, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, =, secondary, k, a, if, !=, a, 0.0, -=, hK, +, k, 1, a, final, double, beta, /, -, 1, *, a, hK, +, k, 1, Arrays, fill, z, +, k, 1, m, 0, for, int, i, +, k, 1, <, i, m, ++, i, final, double, hI, householderVectors, i, final, double, hKI, hK, i, double, zI, *, hI, i, hKI, for, int, j, +, i, 1, <, j, m, ++, j, final, double, hIJ, hI, j, +=, zI, *, hIJ, hK, j, +=, z, j, *, hIJ, hKI, =, z, i, *, beta, +, z, i, zI, double, gamma, 0, for, int, i, +, k, 1, <, i, m, ++, i, +=, gamma, *, z, i, hK, i, *=, gamma, /, beta, 2, for, int, i, +, k, 1, <, i, m, ++, i, -=, z, i, *, gamma, hK, i, for, int, i, +, k, 1, <, i, m, ++, i, final, double, hI, householderVectors, i, for, int, j, i, <, j, m, ++, j, -=, hI, j, +, *, hK, i, z, j, *, z, i, hK, j, =, main, -, m, 1, householderVectors, -, m, 1, -, m, 1]
org.apache.commons.math4.ml.clustering:CentroidCluster:getCenter:null#[return, center]
org.apache.commons.math4.ml.clustering:Cluster:addPoint:T#[points, add, point]
org.apache.commons.math4.ml.clustering:Cluster:getPoints:null#[return, points]
org.apache.commons.math4.ml.clustering:Clusterer:getDistanceMeasure:null#[return, measure]
org.apache.commons.math4.ml.clustering:Clusterer:distance:Clusterable+Clusterable#[return, measure, compute, p1, getPoint, p2, getPoint]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:getEps:null#[return, eps]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:getMinPts:null#[return, minPts]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:cluster:Collection<T>#[MathUtils, checkNotNull, points, final, List, Cluster, T, clusters, new, ArrayList, Cluster, T, final, Map, Clusterable, PointStatus, visited, new, HashMap, Clusterable, PointStatus, for, final, T, point, points, if, !=, visited, get, point, null, continue, final, List, T, neighbors, getNeighbors, point, points, if, >=, neighbors, size, minPts, final, Cluster, T, cluster, new, Cluster, T, clusters, add, expandCluster, cluster, point, neighbors, points, visited, visited, put, point, PointStatus.NOISE, return, clusters]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:expandCluster:Cluster<T>+T+List<T>+Collection<T>+Map<Clusterable,PointStatus>#[cluster, addPoint, point, visited, put, point, PointStatus.PART_OF_CLUSTER, List, T, seeds, new, ArrayList, T, neighbors, int, index, 0, while, <, index, seeds, size, final, T, current, seeds, get, index, PointStatus, pStatus, visited, get, current, if, ==, pStatus, null, final, List, T, currentNeighbors, getNeighbors, current, points, if, >=, currentNeighbors, size, minPts, =, seeds, merge, seeds, currentNeighbors, if, !=, pStatus, PointStatus.PART_OF_CLUSTER, visited, put, current, PointStatus.PART_OF_CLUSTER, cluster, addPoint, current, ++, index, return, cluster]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:getNeighbors:T+Collection<T>#[final, List, T, neighbors, new, ArrayList, T, for, final, T, neighbor, points, if, &&, !=, point, neighbor, <=, distance, neighbor, point, eps, neighbors, add, neighbor, return, neighbors]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:merge:List<T>+List<T>#[final, Set, T, oneSet, new, HashSet, T, one, for, T, item, two, if, !, oneSet, contains, item, one, add, item, return, one]
org.apache.commons.math4.ml.clustering:DoublePoint:getPoint:null#[return, point]
org.apache.commons.math4.ml.clustering:DoublePoint:equals:Object#[if, !, instanceof, other, DoublePoint, return, false, return, Arrays, equals, point, DoublePoint, other, point]
org.apache.commons.math4.ml.clustering:DoublePoint:hashCode:null#[return, Arrays, hashCode, point]
org.apache.commons.math4.ml.clustering:DoublePoint:toString:null#[return, Arrays, toString, point]
org.apache.commons.math4.ml.clustering.evaluation:ClusterEvaluator:isBetterScore:double+double#[return, <, score1, score2]
org.apache.commons.math4.ml.clustering.evaluation:ClusterEvaluator:distance:Clusterable+Clusterable#[return, measure, compute, p1, getPoint, p2, getPoint]
org.apache.commons.math4.ml.clustering.evaluation:ClusterEvaluator:centroidOf:Cluster<T>#[final, List, T, points, cluster, getPoints, if, points, isEmpty, return, null, if, instanceof, cluster, CentroidCluster, return, CentroidCluster, T, cluster, getCenter, final, int, dimension, points, get, 0, getPoint, length, final, double, centroid, double, dimension, for, final, T, p, points, final, double, point, p, getPoint, for, int, i, 0, <, i, centroid.length, ++, i, +=, centroid, i, point, i, for, int, i, 0, <, i, centroid.length, ++, i, /=, centroid, i, points, size, return, new, DoublePoint, centroid]
org.apache.commons.math4.ml.clustering.evaluation:SumOfClusterVariances:score:Cluster<T>>#[double, varianceSum, 0.0, for, final, Cluster, T, cluster, clusters, if, !, cluster, getPoints, isEmpty, final, Clusterable, center, centroidOf, cluster, final, Variance, stat, new, Variance, for, final, T, point, cluster, getPoints, stat, increment, distance, point, center, +=, varianceSum, stat, getResult, return, varianceSum]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getK:null#[return, k]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getFuzziness:null#[return, fuzziness]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getMaxIterations:null#[return, maxIterations]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getEpsilon:null#[return, epsilon]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getRandomGenerator:null#[return, random]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getMembershipMatrix:null#[if, ==, membershipMatrix, null, throw, new, MathIllegalStateException, return, MatrixUtils, createRealMatrix, membershipMatrix]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getDataPoints:null#[return, points]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getClusters:null#[return, clusters]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getObjectiveFunctionValue:null#[if, ||, ==, points, null, ==, clusters, null, throw, new, MathIllegalStateException, int, i, 0, double, objFunction, 0.0, for, final, T, point, points, int, j, 0, for, final, CentroidCluster, T, cluster, clusters, final, double, dist, distance, point, cluster, getCenter, +=, objFunction, *, *, dist, dist, FastMath, pow, membershipMatrix, i, j, fuzziness, ++, j, ++, i, return, objFunction]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:cluster:Collection<T>#[MathUtils, checkNotNull, dataPoints, final, int, size, dataPoints, size, if, <, size, k, throw, new, NumberIsTooSmallException, size, k, false, =, points, Collections, unmodifiableList, new, ArrayList, T, dataPoints, =, clusters, new, ArrayList, CentroidCluster, T, =, membershipMatrix, double, size, k, final, double, oldMatrix, double, size, k, if, ==, size, 0, return, clusters, initializeMembershipMatrix, final, int, pointDimension, points, get, 0, getPoint, length, for, int, i, 0, <, i, k, ++, i, clusters, add, new, CentroidCluster, T, new, DoublePoint, double, pointDimension, int, iteration, 0, final, int, max, <, maxIterations, 0, Integer.MAX_VALUE, maxIterations, double, difference, 0.0, do, saveMembershipMatrix, oldMatrix, updateClusterCenters, updateMembershipMatrix, =, difference, calculateMaxMembershipChange, oldMatrix, &&, >, difference, epsilon, <, ++, iteration, max, return, clusters]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:updateClusterCenters:null#[int, j, 0, final, List, CentroidCluster, T, newClusters, new, ArrayList, CentroidCluster, T, k, for, final, CentroidCluster, T, cluster, clusters, final, Clusterable, center, cluster, getCenter, int, i, 0, double, arr, double, center, getPoint, length, double, sum, 0.0, for, final, T, point, points, final, double, u, FastMath, pow, membershipMatrix, i, j, fuzziness, final, double, pointArr, point, getPoint, for, int, idx, 0, <, idx, arr.length, ++, idx, +=, arr, idx, *, u, pointArr, idx, +=, sum, u, ++, i, MathArrays, scaleInPlace, /, 1.0, sum, arr, newClusters, add, new, CentroidCluster, T, new, DoublePoint, arr, ++, j, clusters, clear, =, clusters, newClusters]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:updateMembershipMatrix:null#[for, int, i, 0, <, i, points, size, ++, i, final, T, point, points, get, i, double, maxMembership, Double.MIN_VALUE, int, newCluster, -, 1, for, int, j, 0, <, j, clusters, size, ++, j, double, sum, 0.0, final, double, distA, FastMath, abs, distance, point, clusters, get, j, getCenter, if, !=, distA, 0.0, for, final, CentroidCluster, T, c, clusters, final, double, distB, FastMath, abs, distance, point, c, getCenter, if, ==, distB, 0.0, =, sum, Double.POSITIVE_INFINITY, break, +=, sum, FastMath, pow, /, distA, distB, /, 2.0, -, fuzziness, 1.0, double, membership, if, ==, sum, 0.0, =, membership, 1.0, if, ==, sum, Double.POSITIVE_INFINITY, =, membership, 0.0, =, membership, /, 1.0, sum, =, membershipMatrix, i, j, membership, if, >, membershipMatrix, i, j, maxMembership, =, maxMembership, membershipMatrix, i, j, =, newCluster, j, clusters, get, newCluster, addPoint, point]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:initializeMembershipMatrix:null#[for, int, i, 0, <, i, points, size, ++, i, for, int, j, 0, <, j, k, ++, j, =, membershipMatrix, i, j, random, nextDouble, =, membershipMatrix, i, MathArrays, normalizeArray, membershipMatrix, i, 1.0]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:calculateMaxMembershipChange:double[][]#[double, maxMembership, 0.0, for, int, i, 0, <, i, points, size, ++, i, for, int, j, 0, <, j, clusters, size, ++, j, double, v, FastMath, abs, -, membershipMatrix, i, j, matrix, i, j, =, maxMembership, FastMath, max, v, maxMembership, return, maxMembership]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:saveMembershipMatrix:double[][]#[for, int, i, 0, <, i, points, size, ++, i, System, arraycopy, membershipMatrix, i, 0, matrix, i, 0, clusters, size]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getK:null#[return, k]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getMaxIterations:null#[return, maxIterations]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getRandomGenerator:null#[return, random]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getEmptyClusterStrategy:null#[return, emptyStrategy]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:cluster:Collection<T>#[MathUtils, checkNotNull, points, if, <, points, size, k, throw, new, NumberIsTooSmallException, points, size, k, false, List, CentroidCluster, T, clusters, chooseInitialCenters, points, int, assignments, int, points, size, assignPointsToClusters, clusters, points, assignments, final, int, max, <, maxIterations, 0, Integer.MAX_VALUE, maxIterations, for, int, count, 0, <, count, max, ++, count, boolean, emptyCluster, false, List, CentroidCluster, T, newClusters, new, ArrayList, CentroidCluster, T, for, final, CentroidCluster, T, cluster, clusters, final, Clusterable, newCenter, if, cluster, getPoints, isEmpty, switch, emptyStrategy, case, LARGEST_VARIANCE, =, newCenter, getPointFromLargestVarianceCluster, clusters, break, case, LARGEST_POINTS_NUMBER, =, newCenter, getPointFromLargestNumberCluster, clusters, break, case, FARTHEST_POINT, =, newCenter, getFarthestPoint, clusters, break, default, throw, new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, =, emptyCluster, true, =, newCenter, centroidOf, cluster, getPoints, cluster, getCenter, getPoint, length, newClusters, add, new, CentroidCluster, T, newCenter, int, changes, assignPointsToClusters, newClusters, points, assignments, =, clusters, newClusters, if, &&, ==, changes, 0, !, emptyCluster, return, clusters, return, clusters]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:assignPointsToClusters:List<CentroidCluster<T>>+Collection<T>+int[]#[int, assignedDifferently, 0, int, pointIndex, 0, for, final, T, p, points, int, clusterIndex, getNearestCluster, clusters, p, if, !=, clusterIndex, assignments, pointIndex, ++, assignedDifferently, CentroidCluster, T, cluster, clusters, get, clusterIndex, cluster, addPoint, p, =, assignments, ++, pointIndex, clusterIndex, return, assignedDifferently]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:chooseInitialCenters:Collection<T>#[final, List, T, pointList, Collections, unmodifiableList, new, ArrayList, T, points, final, int, numPoints, pointList, size, final, boolean, taken, boolean, numPoints, final, List, CentroidCluster, T, resultSet, new, ArrayList, CentroidCluster, T, final, int, firstPointIndex, random, nextInt, numPoints, final, T, firstPoint, pointList, get, firstPointIndex, resultSet, add, new, CentroidCluster, T, firstPoint, =, taken, firstPointIndex, true, final, double, minDistSquared, double, numPoints, for, int, i, 0, <, i, numPoints, ++, i, if, !=, i, firstPointIndex, double, d, distance, firstPoint, pointList, get, i, =, minDistSquared, i, *, d, d, while, <, resultSet, size, k, double, distSqSum, 0.0, for, int, i, 0, <, i, numPoints, ++, i, if, !, taken, i, +=, distSqSum, minDistSquared, i, final, double, r, *, random, nextDouble, distSqSum, int, nextPointIndex, -, 1, double, sum, 0.0, for, int, i, 0, <, i, numPoints, ++, i, if, !, taken, i, +=, sum, minDistSquared, i, if, >=, sum, r, =, nextPointIndex, i, break, if, ==, nextPointIndex, -, 1, for, int, i, -, numPoints, 1, >=, i, 0, --, i, if, !, taken, i, =, nextPointIndex, i, break, if, >=, nextPointIndex, 0, final, T, p, pointList, get, nextPointIndex, resultSet, add, new, CentroidCluster, T, p, =, taken, nextPointIndex, true, if, <, resultSet, size, k, for, int, j, 0, <, j, numPoints, ++, j, if, !, taken, j, double, d, distance, p, pointList, get, j, double, d2, *, d, d, if, <, d2, minDistSquared, j, =, minDistSquared, j, d2, break, return, resultSet]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getPointFromLargestVarianceCluster:Collection<CentroidCluster<T>>#[double, maxVariance, Double.NEGATIVE_INFINITY, Cluster, T, selected, null, for, final, CentroidCluster, T, cluster, clusters, if, !, cluster, getPoints, isEmpty, final, Clusterable, center, cluster, getCenter, final, Variance, stat, new, Variance, for, final, T, point, cluster, getPoints, stat, increment, distance, point, center, final, double, variance, stat, getResult, if, >, variance, maxVariance, =, maxVariance, variance, =, selected, cluster, if, ==, selected, null, throw, new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, final, List, T, selectedPoints, selected, getPoints, return, selectedPoints, remove, random, nextInt, selectedPoints, size]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getPointFromLargestNumberCluster:Cluster<T>>#[int, maxNumber, 0, Cluster, T, selected, null, for, final, Cluster, T, cluster, clusters, final, int, number, cluster, getPoints, size, if, >, number, maxNumber, =, maxNumber, number, =, selected, cluster, if, ==, selected, null, throw, new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, final, List, T, selectedPoints, selected, getPoints, return, selectedPoints, remove, random, nextInt, selectedPoints, size]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getFarthestPoint:Collection<CentroidCluster<T>>#[double, maxDistance, Double.NEGATIVE_INFINITY, Cluster, T, selectedCluster, null, int, selectedPoint, -, 1, for, final, CentroidCluster, T, cluster, clusters, final, Clusterable, center, cluster, getCenter, final, List, T, points, cluster, getPoints, for, int, i, 0, <, i, points, size, ++, i, final, double, distance, distance, points, get, i, center, if, >, distance, maxDistance, =, maxDistance, distance, =, selectedCluster, cluster, =, selectedPoint, i, if, ==, selectedCluster, null, throw, new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, return, selectedCluster, getPoints, remove, selectedPoint]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getNearestCluster:Collection<CentroidCluster<T>>+T#[double, minDistance, Double.MAX_VALUE, int, clusterIndex, 0, int, minCluster, 0, for, final, CentroidCluster, T, c, clusters, final, double, distance, distance, point, c, getCenter, if, <, distance, minDistance, =, minDistance, distance, =, minCluster, clusterIndex, ++, clusterIndex, return, minCluster]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:centroidOf:Collection<T>+int#[final, double, centroid, double, dimension, for, final, T, p, points, final, double, point, p, getPoint, for, int, i, 0, <, i, centroid.length, ++, i, +=, centroid, i, point, i, for, int, i, 0, <, i, centroid.length, ++, i, /=, centroid, i, points, size, return, new, DoublePoint, centroid]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:getClusterer:null#[return, clusterer]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:getNumTrials:null#[return, numTrials]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:getClusterEvaluator:null#[return, evaluator]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:cluster:Collection<T>#[List, CentroidCluster, T, best, null, double, bestVarianceSum, Double.POSITIVE_INFINITY, for, int, i, 0, <, i, numTrials, ++, i, List, CentroidCluster, T, clusters, clusterer, cluster, points, final, double, varianceSum, evaluator, score, clusters, if, evaluator, isBetterScore, varianceSum, bestVarianceSum, =, best, clusters, =, bestVarianceSum, varianceSum, return, best]
org.apache.commons.math4.ml.distance:CanberraDistance:compute:double[]+double[]#[MathArrays, checkEqualLength, a, b, double, sum, 0, for, int, i, 0, <, i, a.length, ++, i, final, double, num, FastMath, abs, -, a, i, b, i, final, double, denom, +, FastMath, abs, a, i, FastMath, abs, b, i, +=, sum, &&, ==, num, 0.0, ==, denom, 0.0, 0.0, /, num, denom, return, sum]
org.apache.commons.math4.ml.distance:ChebyshevDistance:compute:double[]+double[]#[return, MathArrays, distanceInf, a, b]
org.apache.commons.math4.ml.distance:EarthMoversDistance:compute:double[]+double[]#[MathArrays, checkEqualLength, a, b, double, lastDistance, 0, double, totalDistance, 0, for, int, i, 0, <, i, a.length, ++, i, final, double, currentDistance, -, +, a, i, lastDistance, b, i, +=, totalDistance, FastMath, abs, currentDistance, =, lastDistance, currentDistance, return, totalDistance]
org.apache.commons.math4.ml.distance:EuclideanDistance:compute:double[]+double[]#[return, MathArrays, distance, a, b]
org.apache.commons.math4.ml.distance:ManhattanDistance:compute:double[]+double[]#[return, MathArrays, distance1, a, b]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:uniform:RandomGenerator+double+double#[return, randomize, new, UniformRealDistribution, rng, min, max, function, new, Constant, 0, 0, 0]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:uniform:double+double#[return, randomize, new, UniformRealDistribution, min, max, function, new, Constant, 0, 0, 0]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:function:UnivariateFunction+double+double#[return, new, FeatureInitializer, private, double, arg, init, Override, public, double, value, final, double, result, f, value, arg, +=, arg, inc, return, result]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:randomize:RealDistribution+FeatureInitializer#[return, new, FeatureInitializer, Override, public, double, value, return, +, orig, value, random, sample]
org.apache.commons.math4.ml.neuralnet:MapUtils:findBest:double[]+Iterable<Neuron>+DistanceMeasure#[Neuron, best, null, double, min, Double.POSITIVE_INFINITY, for, final, Neuron, n, neurons, final, double, d, distance, compute, n, getFeatures, features, if, <, d, min, =, min, d, =, best, n, return, best]
org.apache.commons.math4.ml.neuralnet:MapUtils:findBestAndSecondBest:double[]+Iterable<Neuron>+DistanceMeasure#[Neuron, best, null, null, double, min, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, for, final, Neuron, n, neurons, final, double, d, distance, compute, n, getFeatures, features, if, <, d, min, 0, =, min, 1, min, 0, =, best, 1, best, 0, =, min, 0, d, =, best, 0, n, if, <, d, min, 1, =, min, 1, d, =, best, 1, n, return, new, Pair, Neuron, Neuron, best, 0, best, 1]
org.apache.commons.math4.ml.neuralnet:MapUtils:sort:double[]+Iterable<Neuron>+DistanceMeasure#[final, List, PairNeuronDouble, list, new, ArrayList, PairNeuronDouble, for, final, Neuron, n, neurons, final, double, d, distance, compute, n, getFeatures, features, list, add, new, PairNeuronDouble, n, d, Collections, sort, list, PairNeuronDouble.COMPARATOR, final, int, len, list, size, final, Neuron, sorted, Neuron, len, for, int, i, 0, <, i, len, ++, i, =, sorted, i, list, get, i, getNeuron, return, sorted]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeU:NeuronSquareMesh2D+DistanceMeasure#[final, int, numRows, map, getNumberOfRows, final, int, numCols, map, getNumberOfColumns, final, double, uMatrix, double, numRows, numCols, final, Network, net, map, getNetwork, for, int, i, 0, <, i, numRows, ++, i, for, int, j, 0, <, j, numCols, ++, j, final, Neuron, neuron, map, getNeuron, i, j, final, Collection, Neuron, neighbours, net, getNeighbours, neuron, final, double, features, neuron, getFeatures, double, d, 0, int, count, 0, for, Neuron, n, neighbours, ++, count, +=, d, distance, compute, features, n, getFeatures, =, uMatrix, i, j, /, d, count, return, uMatrix]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeHitHistogram:Iterable<double[]>+NeuronSquareMesh2D+DistanceMeasure#[final, HashMap, Neuron, Integer, hit, new, HashMap, Neuron, Integer, final, Network, net, map, getNetwork, for, double, f, data, final, Neuron, best, findBest, f, net, distance, final, Integer, count, hit, get, best, if, ==, count, null, hit, put, best, 1, hit, put, best, +, count, 1, final, int, numRows, map, getNumberOfRows, final, int, numCols, map, getNumberOfColumns, final, int, histo, int, numRows, numCols, for, int, i, 0, <, i, numRows, ++, i, for, int, j, 0, <, j, numCols, ++, j, final, Neuron, neuron, map, getNeuron, i, j, final, Integer, count, hit, get, neuron, if, ==, count, null, =, histo, i, j, 0, =, histo, i, j, count, return, histo]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeQuantizationError:Iterable<double[]>+Iterable<Neuron>+DistanceMeasure#[double, d, 0, int, count, 0, for, double, f, data, ++, count, +=, d, distance, compute, f, findBest, f, neurons, distance, getFeatures, if, ==, count, 0, throw, new, NoDataException, return, /, d, count]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeTopographicError:Iterable<double[]>+Network+DistanceMeasure#[int, notAdjacentCount, 0, int, count, 0, for, double, f, data, ++, count, final, Pair, Neuron, Neuron, p, findBestAndSecondBest, f, net, distance, if, !, net, getNeighbours, p, getFirst, contains, p, getSecond, ++, notAdjacentCount, if, ==, count, 0, throw, new, NoDataException, return, /, double, notAdjacentCount, count]
org.apache.commons.math4.ml.neuralnet:Network:copy:null#[final, Network, copy, new, Network, nextId, get, featureSize, for, Map.Entry, Long, Neuron, e, neuronMap, entrySet, copy.neuronMap, put, e, getKey, e, getValue, copy, for, Map.Entry, Long, Set, Long, e, linkMap, entrySet, copy.linkMap, put, e, getKey, new, HashSet, Long, e, getValue, return, copy]
org.apache.commons.math4.ml.neuralnet:Network:iterator:null#[return, neuronMap, values, iterator]
org.apache.commons.math4.ml.neuralnet:Network:getNeurons:Comparator<Neuron>#[final, List, Neuron, neurons, new, ArrayList, Neuron, neurons, addAll, neuronMap, values, Collections, sort, neurons, comparator, return, neurons]
org.apache.commons.math4.ml.neuralnet:Network:createNeuron:double[]#[if, !=, features.length, featureSize, throw, new, DimensionMismatchException, features.length, featureSize, final, long, id, createNextId, neuronMap, put, id, new, Neuron, id, features, linkMap, put, id, new, HashSet, Long, return, id]
org.apache.commons.math4.ml.neuralnet:Network:deleteNeuron:Neuron#[final, Collection, Neuron, neighbours, getNeighbours, neuron, for, Neuron, n, neighbours, deleteLink, n, neuron, neuronMap, remove, neuron, getIdentifier]
org.apache.commons.math4.ml.neuralnet:Network:getFeaturesSize:null#[return, featureSize]
org.apache.commons.math4.ml.neuralnet:Network:addLink:Neuron+Neuron#[final, long, aId, a, getIdentifier, final, long, bId, b, getIdentifier, if, !=, a, getNeuron, aId, throw, new, NoSuchElementException, Long, toString, aId, if, !=, b, getNeuron, bId, throw, new, NoSuchElementException, Long, toString, bId, addLinkToLinkSet, linkMap, get, aId, bId]
org.apache.commons.math4.ml.neuralnet:Network:addLinkToLinkSet:Set<Long>+long#[linkSet, add, id]
org.apache.commons.math4.ml.neuralnet:Network:deleteLink:Neuron+Neuron#[final, long, aId, a, getIdentifier, final, long, bId, b, getIdentifier, if, !=, a, getNeuron, aId, throw, new, NoSuchElementException, Long, toString, aId, if, !=, b, getNeuron, bId, throw, new, NoSuchElementException, Long, toString, bId, deleteLinkFromLinkSet, linkMap, get, aId, bId]
org.apache.commons.math4.ml.neuralnet:Network:deleteLinkFromLinkSet:Set<Long>+long#[linkSet, remove, id]
org.apache.commons.math4.ml.neuralnet:Network:getNeuron:long#[final, Neuron, n, neuronMap, get, id, if, ==, n, null, throw, new, NoSuchElementException, Long, toString, id, return, n]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Iterable<Neuron>#[return, getNeighbours, neurons, null]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Iterable<Neuron>+Iterable<Neuron>#[final, Set, Long, idList, new, HashSet, Long, for, Neuron, n, neurons, idList, addAll, linkMap, get, n, getIdentifier, if, !=, exclude, null, for, Neuron, n, exclude, idList, remove, n, getIdentifier, final, List, Neuron, neuronList, new, ArrayList, Neuron, for, Long, id, idList, neuronList, add, getNeuron, id, return, neuronList]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Neuron#[return, getNeighbours, neuron, null]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Neuron+Iterable<Neuron>#[final, Set, Long, idList, linkMap, get, neuron, getIdentifier, if, !=, exclude, null, for, Neuron, n, exclude, idList, remove, n, getIdentifier, final, List, Neuron, neuronList, new, ArrayList, Neuron, for, Long, id, idList, neuronList, add, getNeuron, id, return, neuronList]
org.apache.commons.math4.ml.neuralnet:Network:createNextId:null#[return, nextId, getAndIncrement]
org.apache.commons.math4.ml.neuralnet:Network:readObject:ObjectInputStream#[throw, new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet:Network:writeReplace:null#[final, Neuron, neuronList, neuronMap, values, toArray, Neuron, 0, final, long, neighbourIdList, long, neuronList.length, for, int, i, 0, <, i, neuronList.length, ++, i, final, Collection, Neuron, neighbours, getNeighbours, neuronList, i, final, long, neighboursId, long, neighbours, size, int, count, 0, for, Neuron, n, neighbours, =, neighboursId, count, n, getIdentifier, ++, count, =, neighbourIdList, i, neighboursId, return, new, SerializationProxy, nextId, get, featureSize, neuronList, neighbourIdList]
org.apache.commons.math4.ml.neuralnet:Neuron:copy:null#[final, Neuron, copy, new, Neuron, getIdentifier, getFeatures, copy.numberOfAttemptedUpdates, set, numberOfAttemptedUpdates, get, copy.numberOfSuccessfulUpdates, set, numberOfSuccessfulUpdates, get, return, copy]
org.apache.commons.math4.ml.neuralnet:Neuron:getIdentifier:null#[return, identifier]
org.apache.commons.math4.ml.neuralnet:Neuron:getSize:null#[return, size]
org.apache.commons.math4.ml.neuralnet:Neuron:getFeatures:null#[return, features, get, clone]
org.apache.commons.math4.ml.neuralnet:Neuron:compareAndSetFeatures:double[]+double[]#[if, !=, update.length, size, throw, new, DimensionMismatchException, update.length, size, final, double, current, features, get, if, !, containSameValues, current, expect, return, false, numberOfAttemptedUpdates, incrementAndGet, if, features, compareAndSet, current, update, clone, numberOfSuccessfulUpdates, incrementAndGet, return, true, return, false]
org.apache.commons.math4.ml.neuralnet:Neuron:getNumberOfAttemptedUpdates:null#[return, numberOfAttemptedUpdates, get]
org.apache.commons.math4.ml.neuralnet:Neuron:getNumberOfSuccessfulUpdates:null#[return, numberOfSuccessfulUpdates, get]
org.apache.commons.math4.ml.neuralnet:Neuron:containSameValues:double[]+double[]#[if, !=, expect.length, size, throw, new, DimensionMismatchException, expect.length, size, for, int, i, 0, <, i, size, ++, i, if, !, Precision, equals, current, i, expect, i, return, false, return, true]
org.apache.commons.math4.ml.neuralnet:Neuron:readObject:ObjectInputStream#[throw, new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet:Neuron:writeReplace:null#[return, new, SerializationProxy, identifier, features, get]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:getNetwork:null#[return, network]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:getSize:null#[return, size]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:getFeatures:int#[if, ||, <, i, 0, >=, i, size, throw, new, OutOfRangeException, i, 0, -, size, 1, return, network, getNeuron, identifiers, i, getFeatures]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:createLinks:null#[for, int, i, 0, <, i, -, size, 1, ++, i, network, addLink, network, getNeuron, i, network, getNeuron, +, i, 1, for, int, i, -, size, 1, >, i, 0, --, i, network, addLink, network, getNeuron, i, network, getNeuron, -, i, 1, if, wrap, network, addLink, network, getNeuron, 0, network, getNeuron, -, size, 1, network, addLink, network, getNeuron, -, size, 1, network, getNeuron, 0]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:readObject:ObjectInputStream#[throw, new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:writeReplace:null#[final, double, featuresList, double, size, for, int, i, 0, <, i, size, ++, i, =, featuresList, i, getFeatures, i, return, new, SerializationProxy, wrap, featuresList]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenTrainingTask:run:null#[while, featuresIterator, hasNext, updateAction, update, net, featuresIterator, next]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:update:Network+double[]#[final, long, numCalls, -, numberOfCalls, incrementAndGet, 1, final, double, currentLearning, learningFactor, value, numCalls, final, Neuron, best, findAndUpdateBestNeuron, net, features, currentLearning, final, int, currentNeighbourhood, neighbourhoodSize, value, numCalls, final, Gaussian, neighbourhoodDecay, new, Gaussian, currentLearning, 0, currentNeighbourhood, if, >, currentNeighbourhood, 0, Collection, Neuron, neighbours, new, HashSet, Neuron, neighbours, add, best, final, HashSet, Neuron, exclude, new, HashSet, Neuron, exclude, add, best, int, radius, 1, do, =, neighbours, net, getNeighbours, neighbours, exclude, for, Neuron, n, neighbours, updateNeighbouringNeuron, n, features, neighbourhoodDecay, value, radius, exclude, addAll, neighbours, ++, radius, <=, radius, currentNeighbourhood]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:getNumberOfCalls:null#[return, numberOfCalls, get]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:attemptNeuronUpdate:Neuron+double[]+double#[final, double, expect, n, getFeatures, final, double, update, computeFeatures, expect, features, learningRate, return, n, compareAndSetFeatures, expect, update]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:updateNeighbouringNeuron:Neuron+double[]+double#[while, true, if, attemptNeuronUpdate, n, features, learningRate, break]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:findAndUpdateBestNeuron:Network+double[]+double#[while, true, final, Neuron, best, MapUtils, findBest, features, net, distance, if, attemptNeuronUpdate, best, features, learningRate, return, best]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:computeFeatures:double[]+double[]+double#[final, ArrayRealVector, c, new, ArrayRealVector, current, false, final, ArrayRealVector, s, new, ArrayRealVector, sample, false, return, s, subtract, c, mapMultiplyToSelf, learningRate, add, c, toArray]
org.apache.commons.math4.ml.neuralnet.sofm:LearningFactorFunctionFactory:exponentialDecay:double+double+long#[if, ||, <=, initValue, 0, >, initValue, 1, throw, new, OutOfRangeException, initValue, 0, 1, return, new, LearningFactorFunction, private, final, ExponentialDecayFunction, decay, new, ExponentialDecayFunction, initValue, valueAtNumCall, numCall, Override, public, double, value, long, n, return, decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm:LearningFactorFunctionFactory:quasiSigmoidDecay:double+double+long#[if, ||, <=, initValue, 0, >, initValue, 1, throw, new, OutOfRangeException, initValue, 0, 1, return, new, LearningFactorFunction, private, final, QuasiSigmoidDecayFunction, decay, new, QuasiSigmoidDecayFunction, initValue, slope, numCall, Override, public, double, value, long, n, return, decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm:NeighbourhoodSizeFunctionFactory:exponentialDecay:double+double+long#[return, new, NeighbourhoodSizeFunction, private, final, ExponentialDecayFunction, decay, new, ExponentialDecayFunction, initValue, valueAtNumCall, numCall, Override, public, int, value, long, n, return, int, FastMath, rint, decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm:NeighbourhoodSizeFunctionFactory:quasiSigmoidDecay:double+double+long#[return, new, NeighbourhoodSizeFunction, private, final, QuasiSigmoidDecayFunction, decay, new, QuasiSigmoidDecayFunction, initValue, slope, numCall, Override, public, int, value, long, n, return, int, FastMath, rint, decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm.util:ExponentialDecayFunction:value:long#[return, *, a, FastMath, exp, *, -, numCall, oneOverB]
org.apache.commons.math4.ml.neuralnet.sofm.util:QuasiSigmoidDecayFunction:value:long#[return, *, scale, sigmoid, value, numCall]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:copy:null#[final, long, idGrid, long, numberOfRows, numberOfColumns, for, int, r, 0, <, r, numberOfRows, ++, r, for, int, c, 0, <, c, numberOfColumns, ++, c, =, idGrid, r, c, identifiers, r, c, return, new, NeuronSquareMesh2D, wrapRows, wrapColumns, neighbourhood, network, copy, idGrid]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:iterator:null#[return, network, iterator]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNetwork:null#[return, network]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNumberOfRows:null#[return, numberOfRows]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNumberOfColumns:null#[return, numberOfColumns]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNeuron:int+int#[if, ||, <, i, 0, >=, i, numberOfRows, throw, new, OutOfRangeException, i, 0, -, numberOfRows, 1, if, ||, <, j, 0, >=, j, numberOfColumns, throw, new, OutOfRangeException, j, 0, -, numberOfColumns, 1, return, network, getNeuron, identifiers, i, j]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNeuron:int+int+HorizontalDirection+VerticalDirection#[final, int, location, getLocation, row, col, alongRowDir, alongColDir, return, ==, location, null, null, getNeuron, location, 0, location, 1]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getLocation:int+int+HorizontalDirection+VerticalDirection#[final, int, colOffset, switch, alongRowDir, case, LEFT, =, colOffset, -, 1, break, case, RIGHT, =, colOffset, 1, break, case, CENTER, =, colOffset, 0, break, default, throw, new, MathInternalError, int, colIndex, +, col, colOffset, if, wrapColumns, if, <, colIndex, 0, +=, colIndex, numberOfColumns, %=, colIndex, numberOfColumns, final, int, rowOffset, switch, alongColDir, case, UP, =, rowOffset, -, 1, break, case, DOWN, =, rowOffset, 1, break, case, CENTER, =, rowOffset, 0, break, default, throw, new, MathInternalError, int, rowIndex, +, row, rowOffset, if, wrapRows, if, <, rowIndex, 0, +=, rowIndex, numberOfRows, %=, rowIndex, numberOfRows, if, ||, ||, ||, <, rowIndex, 0, >=, rowIndex, numberOfRows, <, colIndex, 0, >=, colIndex, numberOfColumns, return, null, return, int, rowIndex, colIndex]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:createLinks:null#[final, List, Long, linkEnd, new, ArrayList, Long, final, int, iLast, -, numberOfRows, 1, final, int, jLast, -, numberOfColumns, 1, for, int, i, 0, <, i, numberOfRows, ++, i, for, int, j, 0, <, j, numberOfColumns, ++, j, linkEnd, clear, switch, neighbourhood, case, MOORE, if, >, i, 0, if, >, j, 0, linkEnd, add, identifiers, -, i, 1, -, j, 1, if, <, j, jLast, linkEnd, add, identifiers, -, i, 1, +, j, 1, if, <, i, iLast, if, >, j, 0, linkEnd, add, identifiers, +, i, 1, -, j, 1, if, <, j, jLast, linkEnd, add, identifiers, +, i, 1, +, j, 1, if, wrapRows, if, ==, i, 0, if, >, j, 0, linkEnd, add, identifiers, iLast, -, j, 1, if, <, j, jLast, linkEnd, add, identifiers, iLast, +, j, 1, if, ==, i, iLast, if, >, j, 0, linkEnd, add, identifiers, 0, -, j, 1, if, <, j, jLast, linkEnd, add, identifiers, 0, +, j, 1, if, wrapColumns, if, ==, j, 0, if, >, i, 0, linkEnd, add, identifiers, -, i, 1, jLast, if, <, i, iLast, linkEnd, add, identifiers, +, i, 1, jLast, if, ==, j, jLast, if, >, i, 0, linkEnd, add, identifiers, -, i, 1, 0, if, <, i, iLast, linkEnd, add, identifiers, +, i, 1, 0, if, &&, wrapRows, wrapColumns, if, &&, ==, i, 0, ==, j, 0, linkEnd, add, identifiers, iLast, jLast, if, &&, ==, i, 0, ==, j, jLast, linkEnd, add, identifiers, iLast, 0, if, &&, ==, i, iLast, ==, j, 0, linkEnd, add, identifiers, 0, jLast, if, &&, ==, i, iLast, ==, j, jLast, linkEnd, add, identifiers, 0, 0, case, VON_NEUMANN, if, >, i, 0, linkEnd, add, identifiers, -, i, 1, j, if, <, i, iLast, linkEnd, add, identifiers, +, i, 1, j, if, wrapRows, if, ==, i, 0, linkEnd, add, identifiers, iLast, j, if, ==, i, iLast, linkEnd, add, identifiers, 0, j, if, >, j, 0, linkEnd, add, identifiers, i, -, j, 1, if, <, j, jLast, linkEnd, add, identifiers, i, +, j, 1, if, wrapColumns, if, ==, j, 0, linkEnd, add, identifiers, i, jLast, if, ==, j, jLast, linkEnd, add, identifiers, i, 0, break, default, throw, new, MathInternalError, final, Neuron, aNeuron, network, getNeuron, identifiers, i, j, for, long, b, linkEnd, final, Neuron, bNeuron, network, getNeuron, b, network, addLink, aNeuron, bNeuron]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:readObject:ObjectInputStream#[throw, new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:writeReplace:null#[final, double, featuresList, double, numberOfRows, numberOfColumns, for, int, i, 0, <, i, numberOfRows, ++, i, for, int, j, 0, <, j, numberOfColumns, ++, j, =, featuresList, i, j, getNeuron, i, j, getFeatures, return, new, SerializationProxy, wrapRows, wrapColumns, neighbourhood, featuresList]
org.apache.commons.math4.ml.neuralnet.twod.util:HitHistogram:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[final, int, nR, map, getNumberOfRows, final, int, nC, map, getNumberOfColumns, final, LocationFinder, finder, new, LocationFinder, map, int, numSamples, 0, final, double, hit, double, nR, nC, for, double, sample, data, final, Neuron, best, MapUtils, findBest, sample, map, distance, final, LocationFinder.Location, loc, finder, getLocation, best, final, int, row, loc, getRow, final, int, col, loc, getColumn, +=, hit, row, col, 1, ++, numSamples, if, normalizeCount, for, int, r, 0, <, r, nR, ++, r, for, int, c, 0, <, c, nC, ++, c, /=, hit, r, c, numSamples, return, hit]
org.apache.commons.math4.ml.neuralnet.twod.util:LocationFinder:getLocation:Neuron#[return, locations, get, n, getIdentifier]
org.apache.commons.math4.ml.neuralnet.twod.util:QuantizationError:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[final, int, nR, map, getNumberOfRows, final, int, nC, map, getNumberOfColumns, final, LocationFinder, finder, new, LocationFinder, map, final, int, hit, int, nR, nC, final, double, error, double, nR, nC, for, double, sample, data, final, Neuron, best, MapUtils, findBest, sample, map, distance, final, LocationFinder.Location, loc, finder, getLocation, best, final, int, row, loc, getRow, final, int, col, loc, getColumn, +=, hit, row, col, 1, +=, error, row, col, distance, compute, sample, best, getFeatures, for, int, r, 0, <, r, nR, ++, r, for, int, c, 0, <, c, nC, ++, c, final, int, count, hit, r, c, if, !=, count, 0, /=, error, r, c, count, return, error]
org.apache.commons.math4.ml.neuralnet.twod.util:SmoothedDataHistogram:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[final, int, nR, map, getNumberOfRows, final, int, nC, map, getNumberOfColumns, final, int, mapSize, *, nR, nC, if, <, mapSize, smoothingBins, throw, new, NumberIsTooSmallException, mapSize, smoothingBins, true, final, LocationFinder, finder, new, LocationFinder, map, final, double, histo, double, nR, nC, for, double, sample, data, final, Neuron, sorted, MapUtils, sort, sample, map, getNetwork, distance, for, int, i, 0, <, i, smoothingBins, ++, i, final, LocationFinder.Location, loc, finder, getLocation, sorted, i, final, int, row, loc, getRow, final, int, col, loc, getColumn, +=, histo, row, col, *, -, smoothingBins, i, membershipNormalization, return, histo]
org.apache.commons.math4.ml.neuralnet.twod.util:TopographicErrorHistogram:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[final, int, nR, map, getNumberOfRows, final, int, nC, map, getNumberOfColumns, final, Network, net, map, getNetwork, final, LocationFinder, finder, new, LocationFinder, map, final, int, hit, int, nR, nC, final, double, error, double, nR, nC, for, double, sample, data, final, Pair, Neuron, Neuron, p, MapUtils, findBestAndSecondBest, sample, map, distance, final, Neuron, best, p, getFirst, final, LocationFinder.Location, loc, finder, getLocation, best, final, int, row, loc, getRow, final, int, col, loc, getColumn, +=, hit, row, col, 1, if, !, net, getNeighbours, best, contains, p, getSecond, +=, error, row, col, 1, if, relativeCount, for, int, r, 0, <, r, nR, ++, r, for, int, c, 0, <, c, nC, ++, c, /=, error, r, c, hit, r, c, return, error]
org.apache.commons.math4.ml.neuralnet.twod.util:UnifiedDistanceMatrix:computeImage:NeuronSquareMesh2D#[if, individualDistances, return, individualDistances, map, return, averageDistances, map]
org.apache.commons.math4.ml.neuralnet.twod.util:UnifiedDistanceMatrix:individualDistances:NeuronSquareMesh2D#[final, int, numRows, map, getNumberOfRows, final, int, numCols, map, getNumberOfColumns, final, double, uMatrix, double, +, *, numRows, 2, 1, +, *, numCols, 2, 1, for, int, i, 0, <, i, numRows, ++, i, final, int, iR, +, *, 2, i, 1, for, int, j, 0, <, j, numCols, ++, j, final, int, jR, +, *, 2, j, 1, final, double, current, map, getNeuron, i, j, getFeatures, Neuron, neighbour, =, neighbour, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.CENTER, if, !=, neighbour, null, =, uMatrix, iR, +, jR, 1, distance, compute, current, neighbour, getFeatures, =, neighbour, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.CENTER, NeuronSquareMesh2D.VerticalDirection.DOWN, if, !=, neighbour, null, =, uMatrix, +, iR, 1, jR, distance, compute, current, neighbour, getFeatures, for, int, i, 0, <, i, numRows, ++, i, final, int, iR, +, *, 2, i, 1, for, int, j, 0, <, j, numCols, ++, j, final, int, jR, +, *, 2, j, 1, final, Neuron, current, map, getNeuron, i, j, final, Neuron, right, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.CENTER, final, Neuron, bottom, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.CENTER, NeuronSquareMesh2D.VerticalDirection.DOWN, final, Neuron, bottomRight, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.DOWN, final, double, current2BottomRight, ==, bottomRight, null, 0, distance, compute, current, getFeatures, bottomRight, getFeatures, final, double, right2Bottom, ||, ==, right, null, ==, bottom, null, 0, distance, compute, right, getFeatures, bottom, getFeatures, =, uMatrix, +, iR, 1, +, jR, 1, *, 0.5, +, current2BottomRight, right2Bottom, final, int, lastRow, -, uMatrix.length, 1, =, uMatrix, 0, uMatrix, lastRow, final, int, lastCol, -, uMatrix, 0, length, 1, for, int, r, 0, <, r, lastRow, ++, r, =, uMatrix, r, 0, uMatrix, r, lastCol, return, uMatrix]
org.apache.commons.math4.ml.neuralnet.twod.util:UnifiedDistanceMatrix:averageDistances:NeuronSquareMesh2D#[final, int, numRows, map, getNumberOfRows, final, int, numCols, map, getNumberOfColumns, final, double, uMatrix, double, numRows, numCols, final, Network, net, map, getNetwork, for, int, i, 0, <, i, numRows, ++, i, for, int, j, 0, <, j, numCols, ++, j, final, Neuron, neuron, map, getNeuron, i, j, final, Collection, Neuron, neighbours, net, getNeighbours, neuron, final, double, features, neuron, getFeatures, double, d, 0, int, count, 0, for, Neuron, n, neighbours, ++, count, +=, d, distance, compute, features, n, getFeatures, =, uMatrix, i, j, /, d, count, return, uMatrix]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getField:null#[return, field]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getName:null#[return, name]
org.apache.commons.math4.ode:AbstractFieldIntegrator:addStepHandler:FieldStepHandler<T>#[stepHandlers, add, handler]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getStepHandlers:null#[return, Collections, unmodifiableCollection, stepHandlers]
org.apache.commons.math4.ode:AbstractFieldIntegrator:clearStepHandlers:null#[stepHandlers, clear]
org.apache.commons.math4.ode:AbstractFieldIntegrator:addEventHandler:FieldEventHandler<T>+double+double+int#[addEventHandler, handler, maxCheckInterval, convergence, maxIterationCount, new, FieldBracketingNthOrderBrentSolver, T, field, getZero, add, DEFAULT_RELATIVE_ACCURACY, field, getZero, add, convergence, field, getZero, add, DEFAULT_FUNCTION_VALUE_ACCURACY, 5]
org.apache.commons.math4.ode:AbstractFieldIntegrator:addEventHandler:FieldEventHandler<T>+double+double+int+BracketedRealFieldUnivariateSolver<T>#[eventsStates, add, new, FieldEventState, T, handler, maxCheckInterval, field, getZero, add, convergence, maxIterationCount, solver]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEventHandlers:null#[final, List, FieldEventHandler, T, list, new, ArrayList, FieldEventHandler, T, eventsStates, size, for, FieldEventState, T, state, eventsStates, list, add, state, getEventHandler, return, Collections, unmodifiableCollection, list]
org.apache.commons.math4.ode:AbstractFieldIntegrator:clearEventHandlers:null#[eventsStates, clear]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getCurrentStepStart:null#[return, stepStart]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getCurrentSignedStepsize:null#[return, stepSize]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setMaxEvaluations:int#[=, evaluations, evaluations, withMaximalCount, <, maxEvaluations, 0, Integer.MAX_VALUE, maxEvaluations]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getMaxEvaluations:null#[return, evaluations, getMaximalCount]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEvaluations:null#[return, evaluations, getCount]
org.apache.commons.math4.ode:AbstractFieldIntegrator:initIntegration:FieldExpandableODE<T>+T+T[]+T#[=, this, equations, eqn, =, evaluations, evaluations, withStart, 0, eqn, init, t0, y0, t, final, T, y0Dot, computeDerivatives, t0, y0, final, FieldODEStateAndDerivative, T, state0, new, FieldODEStateAndDerivative, T, t0, y0, y0Dot, for, final, FieldEventState, T, state, eventsStates, state, getEventHandler, init, state0, t, for, FieldStepHandler, T, handler, stepHandlers, handler, init, state0, t, setStateInitialized, false, return, state0]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEquations:null#[return, equations]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEvaluationsCounter:null#[return, evaluations]
org.apache.commons.math4.ode:AbstractFieldIntegrator:computeDerivatives:T+T[]#[evaluations, increment, return, equations, computeDerivatives, t, y]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setStateInitialized:boolean#[=, this, statesInitialized, stateInitialized]
org.apache.commons.math4.ode:AbstractFieldIntegrator:acceptStep:AbstractFieldStepInterpolator<T>+T#[FieldODEStateAndDerivative, T, previousState, interpolator, getGlobalPreviousState, final, FieldODEStateAndDerivative, T, currentState, interpolator, getGlobalCurrentState, if, !, statesInitialized, for, FieldEventState, T, state, eventsStates, state, reinitializeBegin, interpolator, =, statesInitialized, true, final, int, orderingSign, interpolator, isForward, +, 1, -, 1, SortedSet, FieldEventState, T, occurringEvents, new, TreeSet, FieldEventState, T, new, Comparator, FieldEventState, T, Override, public, int, compare, FieldEventState, T, es0, FieldEventState, T, es1, return, *, orderingSign, Double, compare, es0, getEventTime, getReal, es1, getEventTime, getReal, for, final, FieldEventState, T, state, eventsStates, if, state, evaluateStep, interpolator, occurringEvents, add, state, AbstractFieldStepInterpolator, T, restricted, interpolator, while, !, occurringEvents, isEmpty, final, Iterator, FieldEventState, T, iterator, occurringEvents, iterator, final, FieldEventState, T, currentEvent, iterator, next, iterator, remove, final, FieldODEStateAndDerivative, T, eventState, restricted, getInterpolatedState, currentEvent, getEventTime, =, restricted, restricted, restrictStep, previousState, eventState, for, final, FieldEventState, T, state, eventsStates, state, stepAccepted, eventState, =, isLastStep, ||, isLastStep, state, stop, for, final, FieldStepHandler, T, handler, stepHandlers, handler, handleStep, restricted, isLastStep, if, isLastStep, return, eventState, FieldODEState, T, newState, null, =, resetOccurred, false, for, final, FieldEventState, T, state, eventsStates, =, newState, state, reset, eventState, if, !=, newState, null, final, T, y, equations, getMapper, mapState, newState, final, T, yDot, computeDerivatives, newState, getTime, y, =, resetOccurred, true, return, equations, getMapper, mapStateAndDerivative, newState, getTime, y, yDot, =, previousState, eventState, =, restricted, restricted, restrictStep, eventState, currentState, if, currentEvent, evaluateStep, restricted, occurringEvents, add, currentEvent, for, final, FieldEventState, T, state, eventsStates, state, stepAccepted, currentState, =, isLastStep, ||, isLastStep, state, stop, =, isLastStep, ||, isLastStep, <=, currentState, getTime, subtract, tEnd, abs, getReal, FastMath, ulp, tEnd, getReal, for, FieldStepHandler, T, handler, stepHandlers, handler, handleStep, restricted, isLastStep, return, currentState]
org.apache.commons.math4.ode:AbstractFieldIntegrator:sanityChecks:FieldODEState<T>+T#[final, double, threshold, *, 1000, FastMath, ulp, FastMath, max, FastMath, abs, eqn, getTime, getReal, FastMath, abs, t, getReal, final, double, dt, eqn, getTime, subtract, t, abs, getReal, if, <=, dt, threshold, throw, new, NumberIsTooSmallException, LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false]
org.apache.commons.math4.ode:AbstractFieldIntegrator:resetOccurred:null#[return, resetOccurred]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setStepSize:T#[=, this, stepSize, stepSize]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getStepSize:null#[return, stepSize]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setStepStart:FieldODEStateAndDerivative<T>#[=, this, stepStart, stepStart]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getStepStart:null#[return, stepStart]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setIsLastStep:boolean#[=, this, isLastStep, isLastStep]
org.apache.commons.math4.ode:AbstractFieldIntegrator:isLastStep:null#[return, isLastStep]
org.apache.commons.math4.ode:AbstractIntegrator:getName:null#[return, name]
org.apache.commons.math4.ode:AbstractIntegrator:addStepHandler:StepHandler#[stepHandlers, add, handler]
org.apache.commons.math4.ode:AbstractIntegrator:getStepHandlers:null#[return, Collections, unmodifiableCollection, stepHandlers]
org.apache.commons.math4.ode:AbstractIntegrator:clearStepHandlers:null#[stepHandlers, clear]
org.apache.commons.math4.ode:AbstractIntegrator:addEventHandler:EventHandler+double+double+int#[addEventHandler, handler, maxCheckInterval, convergence, maxIterationCount, new, BracketingNthOrderBrentSolver, convergence, 5]
org.apache.commons.math4.ode:AbstractIntegrator:addEventHandler:EventHandler+double+double+int+UnivariateSolver#[eventsStates, add, new, EventState, handler, maxCheckInterval, convergence, maxIterationCount, solver]
org.apache.commons.math4.ode:AbstractIntegrator:getEventHandlers:null#[final, List, EventHandler, list, new, ArrayList, EventHandler, eventsStates, size, for, EventState, state, eventsStates, list, add, state, getEventHandler, return, Collections, unmodifiableCollection, list]
org.apache.commons.math4.ode:AbstractIntegrator:clearEventHandlers:null#[eventsStates, clear]
org.apache.commons.math4.ode:AbstractIntegrator:getCurrentStepStart:null#[return, stepStart]
org.apache.commons.math4.ode:AbstractIntegrator:getCurrentSignedStepsize:null#[return, stepSize]
org.apache.commons.math4.ode:AbstractIntegrator:setMaxEvaluations:int#[=, evaluations, evaluations, withMaximalCount, <, maxEvaluations, 0, Integer.MAX_VALUE, maxEvaluations]
org.apache.commons.math4.ode:AbstractIntegrator:getMaxEvaluations:null#[return, evaluations, getMaximalCount]
org.apache.commons.math4.ode:AbstractIntegrator:getEvaluations:null#[return, evaluations, getCount]
org.apache.commons.math4.ode:AbstractIntegrator:initIntegration:double+double[]+double#[=, evaluations, evaluations, withStart, 0, for, final, EventState, state, eventsStates, state, setExpandable, expandable, state, getEventHandler, init, t0, y0, t, for, StepHandler, handler, stepHandlers, handler, init, t0, y0, t, setStateInitialized, false]
org.apache.commons.math4.ode:AbstractIntegrator:setEquations:ExpandableStatefulODE#[=, this, expandable, equations]
org.apache.commons.math4.ode:AbstractIntegrator:getExpandable:null#[return, expandable]
org.apache.commons.math4.ode:AbstractIntegrator:getCounter:null#[return, evaluations]
org.apache.commons.math4.ode:AbstractIntegrator:integrate:FirstOrderDifferentialEquations+double+double[]+double+double[]#[if, !=, y0.length, equations, getDimension, throw, new, DimensionMismatchException, y0.length, equations, getDimension, if, !=, y.length, equations, getDimension, throw, new, DimensionMismatchException, y.length, equations, getDimension, final, ExpandableStatefulODE, expandableODE, new, ExpandableStatefulODE, equations, expandableODE, setTime, t0, expandableODE, setPrimaryState, y0, integrate, expandableODE, t, System, arraycopy, expandableODE, getPrimaryState, 0, y, 0, y.length, return, expandableODE, getTime]
org.apache.commons.math4.ode:AbstractIntegrator:computeDerivatives:double+double[]+double[]#[evaluations, increment, expandable, computeDerivatives, t, y, yDot]
org.apache.commons.math4.ode:AbstractIntegrator:setStateInitialized:boolean#[=, this, statesInitialized, stateInitialized]
org.apache.commons.math4.ode:AbstractIntegrator:acceptStep:AbstractStepInterpolator+double[]+double[]+double#[double, previousT, interpolator, getGlobalPreviousTime, final, double, currentT, interpolator, getGlobalCurrentTime, if, !, statesInitialized, for, EventState, state, eventsStates, state, reinitializeBegin, interpolator, =, statesInitialized, true, final, int, orderingSign, interpolator, isForward, +, 1, -, 1, SortedSet, EventState, occurringEvents, new, TreeSet, EventState, new, Comparator, EventState, Override, public, int, compare, EventState, es0, EventState, es1, return, *, orderingSign, Double, compare, es0, getEventTime, es1, getEventTime, for, final, EventState, state, eventsStates, if, state, evaluateStep, interpolator, occurringEvents, add, state, while, !, occurringEvents, isEmpty, final, Iterator, EventState, iterator, occurringEvents, iterator, final, EventState, currentEvent, iterator, next, iterator, remove, final, double, eventT, currentEvent, getEventTime, interpolator, setSoftPreviousTime, previousT, interpolator, setSoftCurrentTime, eventT, interpolator, setInterpolatedTime, eventT, final, double, eventYComplete, double, y.length, expandable, getPrimaryMapper, insertEquationData, interpolator, getInterpolatedState, eventYComplete, int, index, 0, for, EquationsMapper, secondary, expandable, getSecondaryMappers, secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, ++, index, eventYComplete, for, final, EventState, state, eventsStates, state, stepAccepted, eventT, eventYComplete, =, isLastStep, ||, isLastStep, state, stop, for, final, StepHandler, handler, stepHandlers, handler, handleStep, interpolator, isLastStep, if, isLastStep, System, arraycopy, eventYComplete, 0, y, 0, y.length, return, eventT, boolean, needReset, false, =, resetOccurred, false, for, final, EventState, state, eventsStates, =, needReset, ||, needReset, state, reset, eventT, eventYComplete, if, needReset, interpolator, setInterpolatedTime, eventT, System, arraycopy, eventYComplete, 0, y, 0, y.length, computeDerivatives, eventT, y, yDot, =, resetOccurred, true, return, eventT, =, previousT, eventT, interpolator, setSoftPreviousTime, eventT, interpolator, setSoftCurrentTime, currentT, if, currentEvent, evaluateStep, interpolator, occurringEvents, add, currentEvent, interpolator, setInterpolatedTime, currentT, final, double, currentY, double, y.length, expandable, getPrimaryMapper, insertEquationData, interpolator, getInterpolatedState, currentY, int, index, 0, for, EquationsMapper, secondary, expandable, getSecondaryMappers, secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, ++, index, currentY, for, final, EventState, state, eventsStates, state, stepAccepted, currentT, currentY, =, isLastStep, ||, isLastStep, state, stop, =, isLastStep, ||, isLastStep, Precision, equals, currentT, tEnd, 1, for, StepHandler, handler, stepHandlers, handler, handleStep, interpolator, isLastStep, return, currentT]
org.apache.commons.math4.ode:AbstractIntegrator:sanityChecks:ExpandableStatefulODE+double#[final, double, threshold, *, 1000, FastMath, ulp, FastMath, max, FastMath, abs, equations, getTime, FastMath, abs, t, final, double, dt, FastMath, abs, -, equations, getTime, t, if, <=, dt, threshold, throw, new, NumberIsTooSmallException, LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false]
org.apache.commons.math4.ode:AbstractParameterizable:getParametersNames:null#[return, parametersNames]
org.apache.commons.math4.ode:AbstractParameterizable:isSupported:String#[for, final, String, supportedName, parametersNames, if, supportedName, equals, name, return, true, return, false]
org.apache.commons.math4.ode:AbstractParameterizable:complainIfNotSupported:String#[if, !, isSupported, name, throw, new, UnknownParameterException, name]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:append:ContinuousOutputFieldModel<T>#[if, ==, model.steps, size, 0, return, if, ==, steps, size, 0, =, initialTime, model.initialTime, =, forward, model.forward, final, FieldODEStateAndDerivative, T, s1, steps, get, 0, getPreviousState, final, FieldODEStateAndDerivative, T, s2, model.steps, get, 0, getPreviousState, checkDimensionsEquality, s1, getStateDimension, s2, getStateDimension, checkDimensionsEquality, s1, getNumberOfSecondaryStates, s2, getNumberOfSecondaryStates, for, int, i, 0, <, i, s1, getNumberOfSecondaryStates, ++, i, checkDimensionsEquality, s1, getSecondaryStateDimension, i, s2, getSecondaryStateDimension, i, if, ^, forward, model.forward, throw, new, MathIllegalArgumentException, LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH, final, FieldStepInterpolator, T, lastInterpolator, steps, get, index, final, T, current, lastInterpolator, getCurrentState, getTime, final, T, previous, lastInterpolator, getPreviousState, getTime, final, T, step, current, subtract, previous, final, T, gap, model, getInitialTime, subtract, current, if, >, gap, abs, subtract, step, abs, multiply, 1.0e-3, getReal, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES, gap, abs, getReal, for, FieldStepInterpolator, T, interpolator, model.steps, steps, add, interpolator, =, index, -, steps, size, 1, =, finalTime, steps, get, index, getCurrentState, getTime]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:checkDimensionsEquality:int+int#[if, !=, d1, d2, throw, new, DimensionMismatchException, d2, d1]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:init:FieldODEStateAndDerivative<T>+T#[=, initialTime, initialState, getTime, =, finalTime, t, =, forward, true, =, index, 0, steps, clear]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:handleStep:FieldStepInterpolator<T>+boolean#[if, ==, steps, size, 0, =, initialTime, interpolator, getPreviousState, getTime, =, forward, interpolator, isForward, steps, add, interpolator, if, isLast, =, finalTime, interpolator, getCurrentState, getTime, =, index, -, steps, size, 1]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:getInitialTime:null#[return, initialTime]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:getFinalTime:null#[return, finalTime]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:getInterpolatedState:T#[int, iMin, 0, final, FieldStepInterpolator, T, sMin, steps, get, iMin, T, tMin, sMin, getPreviousState, getTime, add, sMin, getCurrentState, getTime, multiply, 0.5, int, iMax, -, steps, size, 1, final, FieldStepInterpolator, T, sMax, steps, get, iMax, T, tMax, sMax, getPreviousState, getTime, add, sMax, getCurrentState, getTime, multiply, 0.5, if, <=, locatePoint, time, sMin, 0, =, index, iMin, return, sMin, getInterpolatedState, time, if, >=, locatePoint, time, sMax, 0, =, index, iMax, return, sMax, getInterpolatedState, time, while, >, -, iMax, iMin, 5, final, FieldStepInterpolator, T, si, steps, get, index, final, int, location, locatePoint, time, si, if, <, location, 0, =, iMax, index, =, tMax, si, getPreviousState, getTime, add, si, getCurrentState, getTime, multiply, 0.5, if, >, location, 0, =, iMin, index, =, tMin, si, getPreviousState, getTime, add, si, getCurrentState, getTime, multiply, 0.5, return, si, getInterpolatedState, time, final, int, iMed, /, +, iMin, iMax, 2, final, FieldStepInterpolator, T, sMed, steps, get, iMed, final, T, tMed, sMed, getPreviousState, getTime, add, sMed, getCurrentState, getTime, multiply, 0.5, if, ||, <, tMed, subtract, tMin, abs, subtract, 1.0e-6, getReal, 0, <, tMax, subtract, tMed, abs, subtract, 1.0e-6, getReal, 0, =, index, iMed, final, T, d12, tMax, subtract, tMed, final, T, d23, tMed, subtract, tMin, final, T, d13, tMax, subtract, tMin, final, T, dt1, time, subtract, tMax, final, T, dt2, time, subtract, tMed, final, T, dt3, time, subtract, tMin, final, T, iLagrange, dt2, multiply, dt3, multiply, d23, multiply, iMax, subtract, dt1, multiply, dt3, multiply, d13, multiply, iMed, add, dt1, multiply, dt2, multiply, d12, multiply, iMin, divide, d12, multiply, d23, multiply, d13, =, index, int, FastMath, rint, iLagrange, getReal, final, int, low, FastMath, max, +, iMin, 1, /, +, *, 9, iMin, iMax, 10, final, int, high, FastMath, min, -, iMax, 1, /, +, iMin, *, 9, iMax, 10, if, <, index, low, =, index, low, if, >, index, high, =, index, high, =, index, iMin, while, &&, <=, index, iMax, >, locatePoint, time, steps, get, index, 0, ++, index, return, steps, get, index, getInterpolatedState, time]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:locatePoint:T+FieldStepInterpolator<T>#[if, forward, if, <, time, subtract, interval, getPreviousState, getTime, getReal, 0, return, -, 1, if, >, time, subtract, interval, getCurrentState, getTime, getReal, 0, return, +, 1, return, 0, if, >, time, subtract, interval, getPreviousState, getTime, getReal, 0, return, -, 1, if, <, time, subtract, interval, getCurrentState, getTime, getReal, 0, return, +, 1, return, 0]
org.apache.commons.math4.ode:ContinuousOutputModel:append:ContinuousOutputModel#[if, ==, model.steps, size, 0, return, if, ==, steps, size, 0, =, initialTime, model.initialTime, =, forward, model.forward, if, !=, getInterpolatedState, length, model, getInterpolatedState, length, throw, new, DimensionMismatchException, model, getInterpolatedState, length, getInterpolatedState, length, if, ^, forward, model.forward, throw, new, MathIllegalArgumentException, LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH, final, StepInterpolator, lastInterpolator, steps, get, index, final, double, current, lastInterpolator, getCurrentTime, final, double, previous, lastInterpolator, getPreviousTime, final, double, step, -, current, previous, final, double, gap, -, model, getInitialTime, current, if, >, FastMath, abs, gap, *, 1.0e-3, FastMath, abs, step, throw, new, MathIllegalArgumentException, LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES, FastMath, abs, gap, for, StepInterpolator, interpolator, model.steps, steps, add, interpolator, copy, =, index, -, steps, size, 1, =, finalTime, steps, get, index, getCurrentTime]
org.apache.commons.math4.ode:ContinuousOutputModel:init:double+double[]+double#[=, initialTime, Double.NaN, =, finalTime, Double.NaN, =, forward, true, =, index, 0, steps, clear]
org.apache.commons.math4.ode:ContinuousOutputModel:handleStep:StepInterpolator+boolean#[if, ==, steps, size, 0, =, initialTime, interpolator, getPreviousTime, =, forward, interpolator, isForward, steps, add, interpolator, copy, if, isLast, =, finalTime, interpolator, getCurrentTime, =, index, -, steps, size, 1]
org.apache.commons.math4.ode:ContinuousOutputModel:getInitialTime:null#[return, initialTime]
org.apache.commons.math4.ode:ContinuousOutputModel:getFinalTime:null#[return, finalTime]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedTime:null#[return, steps, get, index, getInterpolatedTime]
org.apache.commons.math4.ode:ContinuousOutputModel:setInterpolatedTime:double#[int, iMin, 0, final, StepInterpolator, sMin, steps, get, iMin, double, tMin, *, 0.5, +, sMin, getPreviousTime, sMin, getCurrentTime, int, iMax, -, steps, size, 1, final, StepInterpolator, sMax, steps, get, iMax, double, tMax, *, 0.5, +, sMax, getPreviousTime, sMax, getCurrentTime, if, <=, locatePoint, time, sMin, 0, =, index, iMin, sMin, setInterpolatedTime, time, return, if, >=, locatePoint, time, sMax, 0, =, index, iMax, sMax, setInterpolatedTime, time, return, while, >, -, iMax, iMin, 5, final, StepInterpolator, si, steps, get, index, final, int, location, locatePoint, time, si, if, <, location, 0, =, iMax, index, =, tMax, *, 0.5, +, si, getPreviousTime, si, getCurrentTime, if, >, location, 0, =, iMin, index, =, tMin, *, 0.5, +, si, getPreviousTime, si, getCurrentTime, si, setInterpolatedTime, time, return, final, int, iMed, /, +, iMin, iMax, 2, final, StepInterpolator, sMed, steps, get, iMed, final, double, tMed, *, 0.5, +, sMed, getPreviousTime, sMed, getCurrentTime, if, ||, <, FastMath, abs, -, tMed, tMin, 1e-6, <, FastMath, abs, -, tMax, tMed, 1e-6, =, index, iMed, final, double, d12, -, tMax, tMed, final, double, d23, -, tMed, tMin, final, double, d13, -, tMax, tMin, final, double, dt1, -, time, tMax, final, double, dt2, -, time, tMed, final, double, dt3, -, time, tMin, final, double, iLagrange, /, +, -, *, *, dt2, dt3, d23, iMax, *, *, dt1, dt3, d13, iMed, *, *, dt1, dt2, d12, iMin, *, d12, d23, d13, =, index, int, FastMath, rint, iLagrange, final, int, low, FastMath, max, +, iMin, 1, /, +, *, 9, iMin, iMax, 10, final, int, high, FastMath, min, -, iMax, 1, /, +, iMin, *, 9, iMax, 10, if, <, index, low, =, index, low, if, >, index, high, =, index, high, =, index, iMin, while, &&, <=, index, iMax, >, locatePoint, time, steps, get, index, 0, ++, index, steps, get, index, setInterpolatedTime, time]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedState:null#[return, steps, get, index, getInterpolatedState]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedDerivatives:null#[return, steps, get, index, getInterpolatedDerivatives]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedSecondaryState:int#[return, steps, get, index, getInterpolatedSecondaryState, secondaryStateIndex]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedSecondaryDerivatives:int#[return, steps, get, index, getInterpolatedSecondaryDerivatives, secondaryStateIndex]
org.apache.commons.math4.ode:ContinuousOutputModel:locatePoint:double+StepInterpolator#[if, forward, if, <, time, interval, getPreviousTime, return, -, 1, if, >, time, interval, getCurrentTime, return, +, 1, return, 0, if, >, time, interval, getPreviousTime, return, -, 1, if, <, time, interval, getCurrentTime, return, +, 1, return, 0]
org.apache.commons.math4.ode:EquationsMapper:getFirstIndex:null#[return, firstIndex]
org.apache.commons.math4.ode:EquationsMapper:getDimension:null#[return, dimension]
org.apache.commons.math4.ode:EquationsMapper:extractEquationData:double[]+double[]#[if, !=, equationData.length, dimension, throw, new, DimensionMismatchException, equationData.length, dimension, System, arraycopy, complete, firstIndex, equationData, 0, dimension]
org.apache.commons.math4.ode:EquationsMapper:insertEquationData:double[]+double[]#[if, !=, equationData.length, dimension, throw, new, DimensionMismatchException, equationData.length, dimension, System, arraycopy, equationData, 0, complete, firstIndex, dimension]
org.apache.commons.math4.ode.events:EventFilter:init:double+double[]+double#[rawHandler, init, t0, y0, t, =, forward, >=, t, t0, =, extremeT, forward, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Arrays, fill, transformers, Transformer.UNINITIALIZED, Arrays, fill, updates, extremeT]
org.apache.commons.math4.ode.events:EventFilter:g:double+double[]#[final, double, rawG, rawHandler, g, t, y, if, forward, final, int, last, -, transformers.length, 1, if, <, extremeT, t, final, Transformer, previous, transformers, last, final, Transformer, next, filter, selectTransformer, previous, rawG, forward, if, !=, next, previous, System, arraycopy, updates, 1, updates, 0, last, System, arraycopy, transformers, 1, transformers, 0, last, =, updates, last, extremeT, =, transformers, last, next, =, extremeT, t, return, next, transformed, rawG, for, int, i, last, >, i, 0, --, i, if, <=, updates, i, t, return, transformers, i, transformed, rawG, return, transformers, 0, transformed, rawG, if, <, t, extremeT, final, Transformer, previous, transformers, 0, final, Transformer, next, filter, selectTransformer, previous, rawG, forward, if, !=, next, previous, System, arraycopy, updates, 0, updates, 1, -, updates.length, 1, System, arraycopy, transformers, 0, transformers, 1, -, transformers.length, 1, =, updates, 0, extremeT, =, transformers, 0, next, =, extremeT, t, return, next, transformed, rawG, for, int, i, 0, <, i, -, updates.length, 1, ++, i, if, <=, t, updates, i, return, transformers, i, transformed, rawG, return, transformers, -, updates.length, 1, transformed, rawG]
org.apache.commons.math4.ode.events:EventFilter:eventOccurred:double+double[]+boolean#[return, rawHandler, eventOccurred, t, y, filter, getTriggeredIncreasing]
org.apache.commons.math4.ode.events:EventFilter:resetState:double+double[]#[rawHandler, resetState, t, y]
org.apache.commons.math4.ode.events:EventState:getEventHandler:null#[return, handler]
org.apache.commons.math4.ode.events:EventState:setExpandable:ExpandableStatefulODE#[=, this, expandable, expandable]
org.apache.commons.math4.ode.events:EventState:getMaxCheckInterval:null#[return, maxCheckInterval]
org.apache.commons.math4.ode.events:EventState:getConvergence:null#[return, convergence]
org.apache.commons.math4.ode.events:EventState:getMaxIterationCount:null#[return, maxIterationCount]
org.apache.commons.math4.ode.events:EventState:reinitializeBegin:StepInterpolator#[=, t0, interpolator, getPreviousTime, interpolator, setInterpolatedTime, t0, =, g0, handler, g, t0, getCompleteState, interpolator, if, ==, g0, 0, final, double, epsilon, FastMath, max, solver, getAbsoluteAccuracy, FastMath, abs, *, solver, getRelativeAccuracy, t0, final, double, tStart, +, t0, *, 0.5, epsilon, interpolator, setInterpolatedTime, tStart, =, g0, handler, g, tStart, getCompleteState, interpolator, =, g0Positive, >=, g0, 0]
org.apache.commons.math4.ode.events:EventState:getCompleteState:StepInterpolator#[final, double, complete, double, expandable, getTotalDimension, expandable, getPrimaryMapper, insertEquationData, interpolator, getInterpolatedState, complete, int, index, 0, for, EquationsMapper, secondary, expandable, getSecondaryMappers, secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, ++, index, complete, return, complete]
org.apache.commons.math4.ode.events:EventState:evaluateStep:StepInterpolator#[try, =, forward, interpolator, isForward, final, double, t1, interpolator, getCurrentTime, final, double, dt, -, t1, t0, if, <, FastMath, abs, dt, convergence, return, false, final, int, n, FastMath, max, 1, int, FastMath, ceil, /, FastMath, abs, dt, maxCheckInterval, final, double, h, /, dt, n, final, UnivariateFunction, f, new, UnivariateFunction, Override, public, double, value, final, double, t, LocalMaxCountExceededException, try, interpolator, setInterpolatedTime, t, return, handler, g, t, getCompleteState, interpolator, catch, MaxCountExceededException, mcee, throw, new, LocalMaxCountExceededException, mcee, double, ta, t0, double, ga, g0, for, int, i, 0, <, i, n, ++, i, final, double, tb, ==, i, -, n, 1, t1, +, t0, *, +, i, 1, h, interpolator, setInterpolatedTime, tb, final, double, gb, handler, g, tb, getCompleteState, interpolator, if, ^, g0Positive, >=, gb, 0, =, increasing, >=, gb, ga, final, double, root, if, instanceof, solver, BracketedUnivariateSolver, SuppressWarnings, "unchecked", BracketedUnivariateSolver, UnivariateFunction, bracketing, BracketedUnivariateSolver, UnivariateFunction, solver, =, root, forward, bracketing, solve, maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE, bracketing, solve, maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE, final, double, baseRoot, forward, solver, solve, maxIterationCount, f, ta, tb, solver, solve, maxIterationCount, f, tb, ta, final, int, remainingEval, -, maxIterationCount, solver, getEvaluations, BracketedUnivariateSolver, UnivariateFunction, bracketing, new, PegasusSolver, solver, getRelativeAccuracy, solver, getAbsoluteAccuracy, =, root, forward, UnivariateSolverUtils, forceSide, remainingEval, f, bracketing, baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE, UnivariateSolverUtils, forceSide, remainingEval, f, bracketing, baseRoot, tb, ta, AllowedSolution.LEFT_SIDE, if, &&, !, Double, isNaN, previousEventTime, <=, FastMath, abs, -, root, ta, convergence, <=, FastMath, abs, -, root, previousEventTime, convergence, do, =, ta, forward, +, ta, convergence, -, ta, convergence, =, ga, f, value, ta, &&, ^, g0Positive, >=, ga, 0, ^, forward, >=, ta, tb, if, ^, forward, >=, ta, tb, --, i, =, pendingEventTime, root, =, pendingEvent, true, return, true, if, ||, Double, isNaN, previousEventTime, >, FastMath, abs, -, previousEventTime, root, convergence, =, pendingEventTime, root, =, pendingEvent, true, return, true, =, ta, tb, =, ga, gb, =, ta, tb, =, ga, gb, =, pendingEvent, false, =, pendingEventTime, Double.NaN, return, false, catch, LocalMaxCountExceededException, lmcee, throw, lmcee, getException]
org.apache.commons.math4.ode.events:EventState:getEventTime:null#[return, pendingEvent, pendingEventTime, forward, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.ode.events:EventState:stepAccepted:double+double[]#[=, t0, t, =, g0, handler, g, t, y, if, &&, pendingEvent, <=, FastMath, abs, -, pendingEventTime, t, convergence, =, previousEventTime, t, =, g0Positive, increasing, =, nextAction, handler, eventOccurred, t, y, !, ^, increasing, forward, =, g0Positive, >=, g0, 0, =, nextAction, EventHandler.Action.CONTINUE]
org.apache.commons.math4.ode.events:EventState:stop:null#[return, ==, nextAction, EventHandler.Action.STOP]
org.apache.commons.math4.ode.events:EventState:reset:double+double[]#[if, !, &&, pendingEvent, <=, FastMath, abs, -, pendingEventTime, t, convergence, return, false, if, ==, nextAction, EventHandler.Action.RESET_STATE, handler, resetState, t, y, =, pendingEvent, false, =, pendingEventTime, Double.NaN, return, ||, ==, nextAction, EventHandler.Action.RESET_STATE, ==, nextAction, EventHandler.Action.RESET_DERIVATIVES]
org.apache.commons.math4.ode.events:FieldEventState:getEventHandler:null#[return, handler]
org.apache.commons.math4.ode.events:FieldEventState:getMaxCheckInterval:null#[return, maxCheckInterval]
org.apache.commons.math4.ode.events:FieldEventState:getConvergence:null#[return, convergence]
org.apache.commons.math4.ode.events:FieldEventState:getMaxIterationCount:null#[return, maxIterationCount]
org.apache.commons.math4.ode.events:FieldEventState:reinitializeBegin:FieldStepInterpolator<T>#[final, FieldODEStateAndDerivative, T, s0, interpolator, getPreviousState, =, t0, s0, getTime, =, g0, handler, g, s0, if, ==, g0, getReal, 0, final, double, epsilon, FastMath, max, solver, getAbsoluteAccuracy, getReal, FastMath, abs, solver, getRelativeAccuracy, multiply, t0, getReal, final, T, tStart, t0, add, *, 0.5, epsilon, =, g0, handler, g, interpolator, getInterpolatedState, tStart, =, g0Positive, >=, g0, getReal, 0]
org.apache.commons.math4.ode.events:FieldEventState:evaluateStep:FieldStepInterpolator<T>#[=, forward, interpolator, isForward, final, FieldODEStateAndDerivative, T, s1, interpolator, getCurrentState, final, T, t1, s1, getTime, final, T, dt, t1, subtract, t0, if, <, dt, abs, subtract, convergence, getReal, 0, return, false, final, int, n, FastMath, max, 1, int, FastMath, ceil, /, FastMath, abs, dt, getReal, maxCheckInterval, final, T, h, dt, divide, n, final, RealFieldUnivariateFunction, T, f, new, RealFieldUnivariateFunction, T, Override, public, T, value, final, T, t, return, handler, g, interpolator, getInterpolatedState, t, T, ta, t0, T, ga, g0, for, int, i, 0, <, i, n, ++, i, final, T, tb, ==, i, -, n, 1, t1, t0, add, h, multiply, +, i, 1, final, T, gb, handler, g, interpolator, getInterpolatedState, tb, if, ^, g0Positive, >=, gb, getReal, 0, =, increasing, >=, gb, subtract, ga, getReal, 0, final, T, root, forward, solver, solve, maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE, solver, solve, maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE, if, &&, &&, !=, previousEventTime, null, <=, root, subtract, ta, abs, subtract, convergence, getReal, 0, <=, root, subtract, previousEventTime, abs, subtract, convergence, getReal, 0, do, =, ta, forward, ta, add, convergence, ta, subtract, convergence, =, ga, f, value, ta, &&, ^, g0Positive, >=, ga, getReal, 0, ^, forward, >=, ta, subtract, tb, getReal, 0, if, ^, forward, >=, ta, subtract, tb, getReal, 0, --, i, =, pendingEventTime, root, =, pendingEvent, true, return, true, if, ||, ==, previousEventTime, null, >, previousEventTime, subtract, root, abs, subtract, convergence, getReal, 0, =, pendingEventTime, root, =, pendingEvent, true, return, true, =, ta, tb, =, ga, gb, =, ta, tb, =, ga, gb, =, pendingEvent, false, =, pendingEventTime, null, return, false]
org.apache.commons.math4.ode.events:FieldEventState:getEventTime:null#[return, pendingEvent, pendingEventTime, t0, getField, getZero, add, forward, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.ode.events:FieldEventState:stepAccepted:FieldODEStateAndDerivative<T>#[=, t0, state, getTime, =, g0, handler, g, state, if, &&, pendingEvent, <=, pendingEventTime, subtract, state, getTime, abs, subtract, convergence, getReal, 0, =, previousEventTime, state, getTime, =, g0Positive, increasing, =, nextAction, handler, eventOccurred, state, !, ^, increasing, forward, =, g0Positive, >=, g0, getReal, 0, =, nextAction, Action.CONTINUE]
org.apache.commons.math4.ode.events:FieldEventState:stop:null#[return, ==, nextAction, Action.STOP]
org.apache.commons.math4.ode.events:FieldEventState:reset:FieldODEStateAndDerivative<T>#[if, !, &&, pendingEvent, <=, pendingEventTime, subtract, state, getTime, abs, subtract, convergence, getReal, 0, return, null, final, FieldODEState, T, newState, if, ==, nextAction, Action.RESET_STATE, =, newState, handler, resetState, state, if, ==, nextAction, Action.RESET_DERIVATIVES, =, newState, state, =, newState, null, =, pendingEvent, false, =, pendingEventTime, null, return, newState]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimary:null#[return, primary]
org.apache.commons.math4.ode:ExpandableStatefulODE:getTotalDimension:null#[if, components, isEmpty, return, primaryMapper, getDimension, final, EquationsMapper, lastMapper, components, get, -, components, size, 1, mapper, return, +, lastMapper, getFirstIndex, lastMapper, getDimension]
org.apache.commons.math4.ode:ExpandableStatefulODE:computeDerivatives:double+double[]+double[]#[primaryMapper, extractEquationData, y, primaryState, primary, computeDerivatives, t, primaryState, primaryStateDot, for, final, SecondaryComponent, component, components, component.mapper, extractEquationData, y, component.state, component.equation, computeDerivatives, t, primaryState, primaryStateDot, component.state, component.stateDot, component.mapper, insertEquationData, component.stateDot, yDot, primaryMapper, insertEquationData, primaryStateDot, yDot]
org.apache.commons.math4.ode:ExpandableStatefulODE:addSecondaryEquations:SecondaryEquations#[final, int, firstIndex, if, components, isEmpty, =, components, new, ArrayList, ExpandableStatefulODE.SecondaryComponent, =, firstIndex, primary, getDimension, final, SecondaryComponent, last, components, get, -, components, size, 1, =, firstIndex, +, last.mapper, getFirstIndex, last.mapper, getDimension, components, add, new, SecondaryComponent, secondary, firstIndex, return, -, components, size, 1]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimaryMapper:null#[return, primaryMapper]
org.apache.commons.math4.ode:ExpandableStatefulODE:getSecondaryMappers:null#[final, EquationsMapper, mappers, EquationsMapper, components, size, for, int, i, 0, <, i, mappers.length, ++, i, =, mappers, i, components, get, i, mapper, return, mappers]
org.apache.commons.math4.ode:ExpandableStatefulODE:setTime:double#[=, this, time, time]
org.apache.commons.math4.ode:ExpandableStatefulODE:getTime:null#[return, time]
org.apache.commons.math4.ode:ExpandableStatefulODE:setPrimaryState:double[]#[if, !=, primaryState.length, this, primaryState, length, throw, new, DimensionMismatchException, primaryState.length, this, primaryState, length, System, arraycopy, primaryState, 0, this, primaryState, 0, primaryState.length]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimaryState:null#[return, primaryState, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimaryStateDot:null#[return, primaryStateDot, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:setSecondaryState:int+double[]#[double, localArray, components, get, index, state, if, !=, secondaryState.length, localArray.length, throw, new, DimensionMismatchException, secondaryState.length, localArray.length, System, arraycopy, secondaryState, 0, localArray, 0, secondaryState.length]
org.apache.commons.math4.ode:ExpandableStatefulODE:getSecondaryState:int#[return, components, get, index, state, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:getSecondaryStateDot:int#[return, components, get, index, stateDot, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:setCompleteState:double[]#[if, !=, completeState.length, getTotalDimension, throw, new, DimensionMismatchException, completeState.length, getTotalDimension, primaryMapper, extractEquationData, completeState, primaryState, for, final, SecondaryComponent, component, components, component.mapper, extractEquationData, completeState, component.state]
org.apache.commons.math4.ode:ExpandableStatefulODE:getCompleteState:null#[double, completeState, double, getTotalDimension, primaryMapper, insertEquationData, primaryState, completeState, for, final, SecondaryComponent, component, components, component.mapper, insertEquationData, component.state, completeState, return, completeState]
org.apache.commons.math4.ode:FieldEquationsMapper:getNumberOfEquations:null#[return, -, start.length, 1]
org.apache.commons.math4.ode:FieldEquationsMapper:getTotalDimension:null#[return, start, -, start.length, 1]
org.apache.commons.math4.ode:FieldEquationsMapper:mapState:FieldODEState<T>#[final, T, y, MathArrays, buildArray, state, getTime, getField, getTotalDimension, int, index, 0, insertEquationData, index, state, getState, y, while, <, ++, index, getNumberOfEquations, insertEquationData, index, state, getSecondaryState, index, y, return, y]
org.apache.commons.math4.ode:FieldEquationsMapper:mapDerivative:FieldODEStateAndDerivative<T>#[final, T, yDot, MathArrays, buildArray, state, getTime, getField, getTotalDimension, int, index, 0, insertEquationData, index, state, getDerivative, yDot, while, <, ++, index, getNumberOfEquations, insertEquationData, index, state, getSecondaryDerivative, index, yDot, return, yDot]
org.apache.commons.math4.ode:FieldEquationsMapper:mapStateAndDerivative:T+T[]+T[]#[if, !=, y.length, getTotalDimension, throw, new, DimensionMismatchException, y.length, getTotalDimension, if, !=, yDot.length, getTotalDimension, throw, new, DimensionMismatchException, yDot.length, getTotalDimension, final, int, n, getNumberOfEquations, int, index, 0, final, T, state, extractEquationData, index, y, final, T, derivative, extractEquationData, index, yDot, if, <, n, 2, return, new, FieldODEStateAndDerivative, T, t, state, derivative, final, T, secondaryState, MathArrays, buildArray, t, getField, -, n, 1, -, 1, final, T, secondaryDerivative, MathArrays, buildArray, t, getField, -, n, 1, -, 1, while, <, ++, index, getNumberOfEquations, =, secondaryState, -, index, 1, extractEquationData, index, y, =, secondaryDerivative, -, index, 1, extractEquationData, index, yDot, return, new, FieldODEStateAndDerivative, T, t, state, derivative, secondaryState, secondaryDerivative]
org.apache.commons.math4.ode:FieldEquationsMapper:extractEquationData:int+T[]#[checkIndex, index, final, int, begin, start, index, final, int, end, start, +, index, 1, if, <, complete.length, end, throw, new, DimensionMismatchException, complete.length, end, final, int, dimension, -, end, begin, final, T, equationData, MathArrays, buildArray, complete, 0, getField, dimension, System, arraycopy, complete, begin, equationData, 0, dimension, return, equationData]
org.apache.commons.math4.ode:FieldEquationsMapper:insertEquationData:int+T[]+T[]#[checkIndex, index, final, int, begin, start, index, final, int, end, start, +, index, 1, final, int, dimension, -, end, begin, if, <, complete.length, end, throw, new, DimensionMismatchException, complete.length, end, if, !=, equationData.length, dimension, throw, new, DimensionMismatchException, equationData.length, dimension, System, arraycopy, equationData, 0, complete, begin, dimension]
org.apache.commons.math4.ode:FieldEquationsMapper:checkIndex:int#[if, ||, <, index, 0, >, index, -, start.length, 2, throw, new, MathIllegalArgumentException, LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, index, 0, -, start.length, 2]
org.apache.commons.math4.ode:FieldExpandableODE:getMapper:null#[return, mapper]
org.apache.commons.math4.ode:FieldExpandableODE:addSecondaryEquations:FieldSecondaryEquations<T>#[components, add, secondary, =, mapper, new, FieldEquationsMapper, T, mapper, secondary, getDimension, return, components, size]
org.apache.commons.math4.ode:FieldExpandableODE:init:T+T[]+T#[int, index, 0, final, T, primary0, mapper, extractEquationData, index, y0, primary, init, t0, primary0, finalTime, while, <, ++, index, mapper, getNumberOfEquations, final, T, secondary0, mapper, extractEquationData, index, y0, components, get, -, index, 1, init, t0, primary0, secondary0, finalTime]
org.apache.commons.math4.ode:FieldExpandableODE:computeDerivatives:T+T[]#[final, T, yDot, MathArrays, buildArray, t, getField, mapper, getTotalDimension, int, index, 0, final, T, primaryState, mapper, extractEquationData, index, y, final, T, primaryStateDot, primary, computeDerivatives, t, primaryState, mapper, insertEquationData, index, primaryStateDot, yDot, while, <, ++, index, mapper, getNumberOfEquations, final, T, componentState, mapper, extractEquationData, index, y, final, T, componentStateDot, components, get, -, index, 1, computeDerivatives, t, primaryState, primaryStateDot, componentState, mapper, insertEquationData, index, componentStateDot, yDot, return, yDot]
org.apache.commons.math4.ode:FieldODEState:copy:Field<T>+T[][]#[if, ==, original, null, return, null, final, T, copied, MathArrays, buildArray, field, original.length, -, 1, for, int, i, 0, <, i, original.length, ++, i, =, copied, i, original, i, clone, return, copied]
org.apache.commons.math4.ode:FieldODEState:getTime:null#[return, time]
org.apache.commons.math4.ode:FieldODEState:getStateDimension:null#[return, state.length]
org.apache.commons.math4.ode:FieldODEState:getState:null#[return, state, clone]
org.apache.commons.math4.ode:FieldODEState:getNumberOfSecondaryStates:null#[return, ==, secondaryState, null, 0, secondaryState.length]
org.apache.commons.math4.ode:FieldODEState:getSecondaryStateDimension:int#[return, ==, index, 0, state.length, secondaryState, -, index, 1, length]
org.apache.commons.math4.ode:FieldODEState:getSecondaryState:int#[return, ==, index, 0, state, clone, secondaryState, -, index, 1, clone]
org.apache.commons.math4.ode:FieldODEStateAndDerivative:getDerivative:null#[return, derivative, clone]
org.apache.commons.math4.ode:FieldODEStateAndDerivative:getSecondaryDerivative:int#[return, ==, index, 0, derivative, clone, secondaryDerivative, -, index, 1, clone]
org.apache.commons.math4.ode:FirstOrderConverter:getDimension:null#[return, *, 2, dimension]
org.apache.commons.math4.ode:FirstOrderConverter:computeDerivatives:double+double[]+double[]#[System, arraycopy, y, 0, z, 0, dimension, System, arraycopy, y, dimension, zDot, 0, dimension, equations, computeSecondDerivatives, t, z, zDot, zDDot, System, arraycopy, zDot, 0, yDot, 0, dimension, System, arraycopy, zDDot, 0, yDot, dimension, dimension]
org.apache.commons.math4.ode:JacobianMatrices:registerVariationalEquations:ExpandableStatefulODE#[final, FirstOrderDifferentialEquations, ode, instanceof, jode, MainStateJacobianWrapper, MainStateJacobianWrapper, jode, ode, jode, if, !=, expandable, getPrimary, ode, throw, new, MismatchedEquations, =, efode, expandable, =, index, efode, addSecondaryEquations, new, JacobiansSecondaryEquations, efode, setSecondaryState, index, matricesData]
org.apache.commons.math4.ode:JacobianMatrices:addParameterJacobianProvider:ParameterJacobianProvider#[jacobianProviders, add, provider]
org.apache.commons.math4.ode:JacobianMatrices:setParameterizedODE:ParameterizedODE#[=, this, pode, parameterizedOde, =, dirtyParameter, true]
org.apache.commons.math4.ode:JacobianMatrices:setParameterStep:String+double#[for, ParameterConfiguration, param, selectedParameters, if, parameter, equals, param, getParameterName, param, setHP, hP, =, dirtyParameter, true, return, throw, new, UnknownParameterException, parameter]
org.apache.commons.math4.ode:JacobianMatrices:setInitialMainStateJacobian:double[][]#[checkDimension, stateDim, dYdY0, checkDimension, stateDim, dYdY0, 0, int, i, 0, for, final, double, row, dYdY0, System, arraycopy, row, 0, matricesData, i, stateDim, +=, i, stateDim, if, !=, efode, null, efode, setSecondaryState, index, matricesData]
org.apache.commons.math4.ode:JacobianMatrices:setInitialParameterJacobian:String+double[]#[checkDimension, stateDim, dYdP, int, i, *, stateDim, stateDim, for, ParameterConfiguration, param, selectedParameters, if, pName, equals, param, getParameterName, System, arraycopy, dYdP, 0, matricesData, i, stateDim, if, !=, efode, null, efode, setSecondaryState, index, matricesData, return, +=, i, stateDim, throw, new, UnknownParameterException, pName]
org.apache.commons.math4.ode:JacobianMatrices:getCurrentMainSetJacobian:double[][]#[double, p, efode, getSecondaryState, index, int, j, 0, for, int, i, 0, <, i, stateDim, ++, i, System, arraycopy, p, j, dYdY0, i, 0, stateDim, +=, j, stateDim]
org.apache.commons.math4.ode:JacobianMatrices:getCurrentParameterJacobian:String+double[]#[double, p, efode, getSecondaryState, index, int, i, *, stateDim, stateDim, for, ParameterConfiguration, param, selectedParameters, if, param, getParameterName, equals, pName, System, arraycopy, p, i, dYdP, 0, stateDim, return, +=, i, stateDim]
org.apache.commons.math4.ode:JacobianMatrices:checkDimension:int+Object#[int, arrayDimension, ==, array, null, 0, Array, getLength, array, if, !=, arrayDimension, expected, throw, new, DimensionMismatchException, arrayDimension, expected]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getStarterIntegrator:null#[return, starter]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setStarterIntegrator:FirstOrderFieldIntegrator<T>#[=, this, starter, starterIntegrator]
org.apache.commons.math4.ode:MultistepFieldIntegrator:start:FieldExpandableODE<T>+FieldODEState<T>+T#[starter, clearEventHandlers, starter, clearStepHandlers, starter, addStepHandler, new, FieldNordsieckInitializer, equations, getMapper, /, +, nSteps, 3, 2, try, starter, integrate, equations, initialState, t, throw, new, MathIllegalStateException, LocalizedFormats.MULTISTEP_STARTER_STOPPED_EARLY, catch, InitializationCompletedMarkerException, icme, getEvaluationsCounter, increment, starter, getEvaluations, starter, clearStepHandlers]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getMinReduction:null#[return, minReduction]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setMinReduction:double#[=, this, minReduction, minReduction]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getMaxGrowth:null#[return, maxGrowth]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setMaxGrowth:double#[=, this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getSafety:null#[return, safety]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setSafety:double#[=, this, safety, safety]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getNSteps:null#[return, nSteps]
org.apache.commons.math4.ode:MultistepFieldIntegrator:rescale:T#[final, T, ratio, newStepSize, divide, getStepSize, for, int, i, 0, <, i, scaled.length, ++, i, =, scaled, i, scaled, i, multiply, ratio, final, T, nData, nordsieck, getDataRef, T, power, ratio, for, int, i, 0, <, i, nData.length, ++, i, =, power, power, multiply, ratio, final, T, nDataI, nData, i, for, int, j, 0, <, j, nDataI.length, ++, j, =, nDataI, j, nDataI, j, multiply, power, setStepSize, newStepSize]
org.apache.commons.math4.ode:MultistepFieldIntegrator:computeStepGrowShrinkFactor:T#[return, MathUtils, min, error, getField, getZero, add, maxGrowth, MathUtils, max, error, getField, getZero, add, minReduction, error, pow, exp, multiply, safety]
org.apache.commons.math4.ode:MultistepIntegrator:getStarterIntegrator:null#[return, starter]
org.apache.commons.math4.ode:MultistepIntegrator:setStarterIntegrator:FirstOrderIntegrator#[=, this, starter, starterIntegrator]
org.apache.commons.math4.ode:MultistepIntegrator:start:double+double[]+double#[starter, clearEventHandlers, starter, clearStepHandlers, starter, addStepHandler, new, NordsieckInitializer, /, +, nSteps, 3, 2, y0.length, try, if, instanceof, starter, AbstractIntegrator, AbstractIntegrator, starter, integrate, getExpandable, t, starter, integrate, new, FirstOrderDifferentialEquations, Override, public, int, getDimension, return, getExpandable, getTotalDimension, Override, public, void, computeDerivatives, double, t, double, y, double, yDot, getExpandable, computeDerivatives, t, y, yDot, t0, y0, t, double, y0.length, throw, new, MathIllegalStateException, LocalizedFormats.MULTISTEP_STARTER_STOPPED_EARLY, catch, InitializationCompletedMarkerException, icme, getCounter, increment, starter, getEvaluations, starter, clearStepHandlers]
org.apache.commons.math4.ode:MultistepIntegrator:getMinReduction:null#[return, minReduction]
org.apache.commons.math4.ode:MultistepIntegrator:setMinReduction:double#[=, this, minReduction, minReduction]
org.apache.commons.math4.ode:MultistepIntegrator:getMaxGrowth:null#[return, maxGrowth]
org.apache.commons.math4.ode:MultistepIntegrator:setMaxGrowth:double#[=, this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode:MultistepIntegrator:getSafety:null#[return, safety]
org.apache.commons.math4.ode:MultistepIntegrator:setSafety:double#[=, this, safety, safety]
org.apache.commons.math4.ode:MultistepIntegrator:getNSteps:null#[return, nSteps]
org.apache.commons.math4.ode:MultistepIntegrator:computeStepGrowShrinkFactor:double#[return, FastMath, min, maxGrowth, FastMath, max, minReduction, *, safety, FastMath, pow, error, exp]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthFieldIntegrator:errorEstimation:T[]+T[]+T[]+FieldMatrix<T>#[T, error, getField, getZero, for, int, i, 0, <, i, mainSetDimension, ++, i, final, T, yScale, predictedState, i, abs, final, T, tol, ==, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, i, add, vecAbsoluteTolerance, i, T, variation, getField, getZero, int, sign, ==, %, predictedNordsieck, getRowDimension, 2, 0, -, 1, 1, for, int, k, -, predictedNordsieck, getRowDimension, 1, >=, k, 0, --, k, =, variation, variation, add, predictedNordsieck, getEntry, k, i, multiply, sign, =, sign, -, sign, =, variation, variation, subtract, predictedScaled, i, final, T, ratio, predictedState, i, subtract, previousState, i, add, variation, divide, tol, =, error, error, add, ratio, multiply, ratio, return, error, divide, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[sanityChecks, initialState, finalTime, final, T, t0, initialState, getTime, final, T, y, equations, getMapper, mapState, initialState, setStepStart, initIntegration, equations, t0, y, finalTime, final, boolean, forward, >, finalTime, subtract, initialState, getTime, getReal, 0, start, equations, getStepStart, finalTime, FieldODEStateAndDerivative, T, stepStart, getStepStart, FieldODEStateAndDerivative, T, stepEnd, AdamsFieldStepInterpolator, taylor, stepStart, stepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, setIsLastStep, false, do, T, predictedY, null, final, T, predictedScaled, MathArrays, buildArray, getField, y.length, Array2DRowFieldMatrix, T, predictedNordsieck, null, T, error, getField, getZero, add, 10, while, >=, error, subtract, 1.0, getReal, 0.0, =, predictedY, stepEnd, getState, final, T, yDot, computeDerivatives, stepEnd, getTime, predictedY, for, int, j, 0, <, j, predictedScaled.length, ++, j, =, predictedScaled, j, getStepSize, multiply, yDot, j, =, predictedNordsieck, updateHighOrderDerivativesPhase1, nordsieck, updateHighOrderDerivativesPhase2, scaled, predictedScaled, predictedNordsieck, =, error, errorEstimation, y, predictedY, predictedScaled, predictedNordsieck, if, >=, error, subtract, 1.0, getReal, 0.0, final, T, factor, computeStepGrowShrinkFactor, error, rescale, filterStep, getStepSize, multiply, factor, forward, false, =, stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, setStepStart, acceptStep, new, AdamsFieldStepInterpolator, T, getStepSize, stepEnd, predictedScaled, predictedNordsieck, forward, getStepStart, stepEnd, equations, getMapper, finalTime, =, scaled, predictedScaled, =, nordsieck, predictedNordsieck, if, !, isLastStep, System, arraycopy, predictedY, 0, y, 0, y.length, if, resetOccurred, start, equations, getStepStart, finalTime, final, T, factor, computeStepGrowShrinkFactor, error, final, T, scaledH, getStepSize, multiply, factor, final, T, nextT, getStepStart, getTime, add, scaledH, final, boolean, nextIsLast, forward, >=, nextT, subtract, finalTime, getReal, 0, <=, nextT, subtract, finalTime, getReal, 0, T, hNew, filterStep, scaledH, forward, nextIsLast, final, T, filteredNextT, getStepStart, getTime, add, hNew, final, boolean, filteredNextIsLast, forward, >=, filteredNextT, subtract, finalTime, getReal, 0, <=, filteredNextT, subtract, finalTime, getReal, 0, if, filteredNextIsLast, =, hNew, finalTime, subtract, getStepStart, getTime, rescale, hNew, =, stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, !, isLastStep, final, FieldODEStateAndDerivative, T, finalState, getStepStart, setStepStart, null, setStepSize, null, return, finalState]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthIntegrator:errorEstimation:double[]+double[]+double[]+RealMatrix#[double, error, 0, for, int, i, 0, <, i, mainSetDimension, ++, i, final, double, yScale, FastMath, abs, predictedState, i, final, double, tol, ==, vecAbsoluteTolerance, null, +, scalAbsoluteTolerance, *, scalRelativeTolerance, yScale, +, vecAbsoluteTolerance, i, *, vecRelativeTolerance, i, yScale, double, variation, 0, int, sign, ==, %, predictedNordsieck, getRowDimension, 2, 0, -, 1, 1, for, int, k, -, predictedNordsieck, getRowDimension, 1, >=, k, 0, --, k, +=, variation, *, sign, predictedNordsieck, getEntry, k, i, =, sign, -, sign, -=, variation, predictedScaled, i, final, double, ratio, /, +, -, predictedState, i, previousState, i, variation, tol, +=, error, *, ratio, ratio, return, FastMath, sqrt, /, error, mainSetDimension]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthIntegrator:integrate:ExpandableStatefulODE+double#[sanityChecks, equations, t, setEquations, equations, final, boolean, forward, >, t, equations, getTime, final, double, y, equations, getCompleteState, final, double, yDot, double, y.length, final, NordsieckStepInterpolator, interpolator, new, NordsieckStepInterpolator, interpolator, reinitialize, y, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, initIntegration, equations, getTime, y, t, start, equations, getTime, y, t, interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, interpolator, storeTime, stepStart, double, hNew, stepSize, interpolator, rescale, hNew, =, isLastStep, false, do, interpolator, shift, final, double, predictedY, double, y.length, final, double, predictedScaled, double, y.length, Array2DRowRealMatrix, predictedNordsieck, null, double, error, 10, while, >=, error, 1.0, final, double, stepEnd, +, stepStart, hNew, interpolator, storeTime, stepEnd, final, ExpandableStatefulODE, expandable, getExpandable, final, EquationsMapper, primary, expandable, getPrimaryMapper, primary, insertEquationData, interpolator, getInterpolatedState, predictedY, int, index, 0, for, final, EquationsMapper, secondary, expandable, getSecondaryMappers, secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, index, predictedY, ++, index, computeDerivatives, stepEnd, predictedY, yDot, for, int, j, 0, <, j, predictedScaled.length, ++, j, =, predictedScaled, j, *, hNew, yDot, j, =, predictedNordsieck, updateHighOrderDerivativesPhase1, nordsieck, updateHighOrderDerivativesPhase2, scaled, predictedScaled, predictedNordsieck, =, error, errorEstimation, y, predictedY, predictedScaled, predictedNordsieck, if, >=, error, 1.0, final, double, factor, computeStepGrowShrinkFactor, error, =, hNew, filterStep, *, hNew, factor, forward, false, interpolator, rescale, hNew, =, stepSize, hNew, final, double, stepEnd, +, stepStart, stepSize, interpolator, reinitialize, stepEnd, stepSize, predictedScaled, predictedNordsieck, interpolator, storeTime, stepEnd, System, arraycopy, predictedY, 0, y, 0, y.length, =, stepStart, acceptStep, interpolator, y, yDot, t, =, scaled, predictedScaled, =, nordsieck, predictedNordsieck, interpolator, reinitialize, stepEnd, stepSize, scaled, nordsieck, if, !, isLastStep, interpolator, storeTime, stepStart, if, resetOccurred, start, stepStart, y, t, interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, final, double, factor, computeStepGrowShrinkFactor, error, final, double, scaledH, *, stepSize, factor, final, double, nextT, +, stepStart, scaledH, final, boolean, nextIsLast, forward, >=, nextT, t, <=, nextT, t, =, hNew, filterStep, scaledH, forward, nextIsLast, final, double, filteredNextT, +, stepStart, hNew, final, boolean, filteredNextIsLast, forward, >=, filteredNextT, t, <=, filteredNextT, t, if, filteredNextIsLast, =, hNew, -, t, stepStart, interpolator, rescale, hNew, !, isLastStep, equations, setTime, stepStart, equations, setCompleteState, y, resetInternalState]
org.apache.commons.math4.ode.nonstiff:AdamsFieldIntegrator:initializeHighOrderDerivatives:T+T[]+T[][]+T[][]#[return, transformer, initializeHighOrderDerivatives, h, t, y, yDot]
org.apache.commons.math4.ode.nonstiff:AdamsFieldIntegrator:updateHighOrderDerivativesPhase1:Array2DRowFieldMatrix<T>#[return, transformer, updateHighOrderDerivativesPhase1, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsFieldIntegrator:updateHighOrderDerivativesPhase2:T[]+T[]+Array2DRowFieldMatrix<T>#[transformer, updateHighOrderDerivativesPhase2, start, end, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsFieldStepInterpolator:create:boolean+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, AdamsFieldStepInterpolator, T, scalingH, reference, scaled, nordsieck, newForward, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:AdamsFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[return, taylor, reference, time, scalingH, scaled, nordsieck]
org.apache.commons.math4.ode.nonstiff:AdamsFieldStepInterpolator:taylor:FieldODEStateAndDerivative<S>+S+S+S[]+Array2DRowFieldMatrix<S>#[final, S, x, time, subtract, reference, getTime, final, S, normalizedAbscissa, x, divide, stepSize, S, stateVariation, MathArrays, buildArray, time, getField, scaled.length, Arrays, fill, stateVariation, time, getField, getZero, S, estimatedDerivatives, MathArrays, buildArray, time, getField, scaled.length, Arrays, fill, estimatedDerivatives, time, getField, getZero, final, S, nData, nordsieck, getDataRef, for, int, i, -, nData.length, 1, >=, i, 0, --, i, final, int, order, +, i, 2, final, S, nDataI, nData, i, final, S, power, normalizedAbscissa, pow, order, for, int, j, 0, <, j, nDataI.length, ++, j, final, S, d, nDataI, j, multiply, power, =, stateVariation, j, stateVariation, j, add, d, =, estimatedDerivatives, j, estimatedDerivatives, j, add, d, multiply, order, S, estimatedState, reference, getState, for, int, j, 0, <, j, stateVariation.length, ++, j, =, stateVariation, j, stateVariation, j, add, scaled, j, multiply, normalizedAbscissa, =, estimatedState, j, estimatedState, j, add, stateVariation, j, =, estimatedDerivatives, j, estimatedDerivatives, j, add, scaled, j, multiply, normalizedAbscissa, divide, x, return, new, FieldODEStateAndDerivative, S, time, estimatedState, estimatedDerivatives]
org.apache.commons.math4.ode.nonstiff:AdamsIntegrator:initializeHighOrderDerivatives:double+double[]+double[][]+double[][]#[return, transformer, initializeHighOrderDerivatives, h, t, y, yDot]
org.apache.commons.math4.ode.nonstiff:AdamsIntegrator:updateHighOrderDerivativesPhase1:Array2DRowRealMatrix#[return, transformer, updateHighOrderDerivativesPhase1, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsIntegrator:updateHighOrderDerivativesPhase2:double[]+double[]+Array2DRowRealMatrix#[transformer, updateHighOrderDerivativesPhase2, start, end, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsMoultonFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[sanityChecks, initialState, finalTime, final, T, t0, initialState, getTime, final, T, y, equations, getMapper, mapState, initialState, setStepStart, initIntegration, equations, t0, y, finalTime, final, boolean, forward, >, finalTime, subtract, initialState, getTime, getReal, 0, start, equations, getStepStart, finalTime, FieldODEStateAndDerivative, T, stepStart, getStepStart, FieldODEStateAndDerivative, T, stepEnd, AdamsFieldStepInterpolator, taylor, stepStart, stepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, setIsLastStep, false, do, T, predictedY, null, final, T, predictedScaled, MathArrays, buildArray, getField, y.length, Array2DRowFieldMatrix, T, predictedNordsieck, null, T, error, getField, getZero, add, 10, while, >=, error, subtract, 1.0, getReal, 0.0, =, predictedY, stepEnd, getState, final, T, yDot, computeDerivatives, stepEnd, getTime, predictedY, for, int, j, 0, <, j, predictedScaled.length, ++, j, =, predictedScaled, j, getStepSize, multiply, yDot, j, =, predictedNordsieck, updateHighOrderDerivativesPhase1, nordsieck, updateHighOrderDerivativesPhase2, scaled, predictedScaled, predictedNordsieck, =, error, predictedNordsieck, walkInOptimizedOrder, new, Corrector, y, predictedScaled, predictedY, if, >=, error, subtract, 1.0, getReal, 0.0, final, T, factor, computeStepGrowShrinkFactor, error, rescale, filterStep, getStepSize, multiply, factor, forward, false, =, stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, final, T, correctedYDot, computeDerivatives, stepEnd, getTime, predictedY, final, T, correctedScaled, MathArrays, buildArray, getField, y.length, for, int, j, 0, <, j, correctedScaled.length, ++, j, =, correctedScaled, j, getStepSize, multiply, correctedYDot, j, updateHighOrderDerivativesPhase2, predictedScaled, correctedScaled, predictedNordsieck, =, stepEnd, new, FieldODEStateAndDerivative, T, stepEnd, getTime, predictedY, correctedYDot, setStepStart, acceptStep, new, AdamsFieldStepInterpolator, T, getStepSize, stepEnd, correctedScaled, predictedNordsieck, forward, getStepStart, stepEnd, equations, getMapper, finalTime, =, scaled, correctedScaled, =, nordsieck, predictedNordsieck, if, !, isLastStep, System, arraycopy, predictedY, 0, y, 0, y.length, if, resetOccurred, start, equations, getStepStart, finalTime, final, T, factor, computeStepGrowShrinkFactor, error, final, T, scaledH, getStepSize, multiply, factor, final, T, nextT, getStepStart, getTime, add, scaledH, final, boolean, nextIsLast, forward, >=, nextT, subtract, finalTime, getReal, 0, <=, nextT, subtract, finalTime, getReal, 0, T, hNew, filterStep, scaledH, forward, nextIsLast, final, T, filteredNextT, getStepStart, getTime, add, hNew, final, boolean, filteredNextIsLast, forward, >=, filteredNextT, subtract, finalTime, getReal, 0, <=, filteredNextT, subtract, finalTime, getReal, 0, if, filteredNextIsLast, =, hNew, finalTime, subtract, getStepStart, getTime, rescale, hNew, =, stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, !, isLastStep, final, FieldODEStateAndDerivative, T, finalState, getStepStart, setStepStart, null, setStepSize, null, return, finalState]
org.apache.commons.math4.ode.nonstiff:AdamsMoultonIntegrator:integrate:ExpandableStatefulODE+double#[sanityChecks, equations, t, setEquations, equations, final, boolean, forward, >, t, equations, getTime, final, double, y0, equations, getCompleteState, final, double, y, y0, clone, final, double, yDot, double, y.length, final, double, yTmp, double, y.length, final, double, predictedScaled, double, y.length, Array2DRowRealMatrix, nordsieckTmp, null, final, NordsieckStepInterpolator, interpolator, new, NordsieckStepInterpolator, interpolator, reinitialize, y, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, initIntegration, equations, getTime, y0, t, start, equations, getTime, y, t, interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, interpolator, storeTime, stepStart, double, hNew, stepSize, interpolator, rescale, hNew, =, isLastStep, false, do, double, error, 10, while, >=, error, 1.0, =, stepSize, hNew, final, double, stepEnd, +, stepStart, stepSize, interpolator, setInterpolatedTime, stepEnd, final, ExpandableStatefulODE, expandable, getExpandable, final, EquationsMapper, primary, expandable, getPrimaryMapper, primary, insertEquationData, interpolator, getInterpolatedState, yTmp, int, index, 0, for, final, EquationsMapper, secondary, expandable, getSecondaryMappers, secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, index, yTmp, ++, index, computeDerivatives, stepEnd, yTmp, yDot, for, int, j, 0, <, j, y0.length, ++, j, =, predictedScaled, j, *, stepSize, yDot, j, =, nordsieckTmp, updateHighOrderDerivativesPhase1, nordsieck, updateHighOrderDerivativesPhase2, scaled, predictedScaled, nordsieckTmp, =, error, nordsieckTmp, walkInOptimizedOrder, new, Corrector, y, predictedScaled, yTmp, if, >=, error, 1.0, final, double, factor, computeStepGrowShrinkFactor, error, =, hNew, filterStep, *, stepSize, factor, forward, false, interpolator, rescale, hNew, final, double, stepEnd, +, stepStart, stepSize, computeDerivatives, stepEnd, yTmp, yDot, final, double, correctedScaled, double, y0.length, for, int, j, 0, <, j, y0.length, ++, j, =, correctedScaled, j, *, stepSize, yDot, j, updateHighOrderDerivativesPhase2, predictedScaled, correctedScaled, nordsieckTmp, System, arraycopy, yTmp, 0, y, 0, y.length, interpolator, reinitialize, stepEnd, stepSize, correctedScaled, nordsieckTmp, interpolator, storeTime, stepStart, interpolator, shift, interpolator, storeTime, stepEnd, =, stepStart, acceptStep, interpolator, y, yDot, t, =, scaled, correctedScaled, =, nordsieck, nordsieckTmp, if, !, isLastStep, interpolator, storeTime, stepStart, if, resetOccurred, start, stepStart, y, t, interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, final, double, factor, computeStepGrowShrinkFactor, error, final, double, scaledH, *, stepSize, factor, final, double, nextT, +, stepStart, scaledH, final, boolean, nextIsLast, forward, >=, nextT, t, <=, nextT, t, =, hNew, filterStep, scaledH, forward, nextIsLast, final, double, filteredNextT, +, stepStart, hNew, final, boolean, filteredNextIsLast, forward, >=, filteredNextT, t, <=, filteredNextT, t, if, filteredNextIsLast, =, hNew, -, t, stepStart, interpolator, rescale, hNew, !, isLastStep, equations, setTime, stepStart, equations, setCompleteState, y, resetInternalState]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:getInstance:Field<T>+int#[CACHE, Map, Field, RealFieldElement, AdamsNordsieckFieldTransformer, RealFieldElement, map, CACHE, get, nSteps, if, ==, map, null, =, map, new, HashMap, Field, RealFieldElement, AdamsNordsieckFieldTransformer, RealFieldElement, CACHE, put, nSteps, map, SuppressWarnings, "unchecked", AdamsNordsieckFieldTransformer, T, t, AdamsNordsieckFieldTransformer, T, map, get, field, if, ==, t, null, =, t, new, AdamsNordsieckFieldTransformer, T, field, nSteps, map, put, field, t, return, t]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:buildP:int#[final, T, pData, MathArrays, buildArray, field, rows, rows, for, int, i, 1, <=, i, pData.length, ++, i, final, T, pI, pData, -, i, 1, final, int, factor, -, i, T, aj, field, getZero, add, factor, for, int, j, 1, <=, j, pI.length, ++, j, =, pI, -, j, 1, aj, multiply, +, j, 1, =, aj, aj, multiply, factor, return, new, Array2DRowFieldMatrix, T, pData, false]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:initializeHighOrderDerivatives:T+T[]+T[][]+T[][]#[final, T, a, MathArrays, buildArray, field, +, c1.length, 1, +, c1.length, 1, final, T, b, MathArrays, buildArray, field, +, c1.length, 1, y, 0, length, final, T, y0, y, 0, final, T, yDot0, yDot, 0, for, int, i, 1, <, i, y.length, ++, i, final, T, di, t, i, subtract, t, 0, final, T, ratio, di, divide, h, T, dikM1Ohk, h, reciprocal, final, T, aI, a, -, *, 2, i, 2, final, T, aDotI, <, -, *, 2, i, 1, a.length, a, -, *, 2, i, 1, null, for, int, j, 0, <, j, aI.length, ++, j, =, dikM1Ohk, dikM1Ohk, multiply, ratio, =, aI, j, di, multiply, dikM1Ohk, if, !=, aDotI, null, =, aDotI, j, dikM1Ohk, multiply, +, j, 2, final, T, yI, y, i, final, T, yDotI, yDot, i, final, T, bI, b, -, *, 2, i, 2, final, T, bDotI, <, -, *, 2, i, 1, b.length, b, -, *, 2, i, 1, null, for, int, j, 0, <, j, yI.length, ++, j, =, bI, j, yI, j, subtract, y0, j, subtract, di, multiply, yDot0, j, if, !=, bDotI, null, =, bDotI, j, yDotI, j, subtract, yDot0, j, final, FieldLUDecomposition, T, decomposition, new, FieldLUDecomposition, T, new, Array2DRowFieldMatrix, T, a, false, final, FieldMatrix, T, x, decomposition, getSolver, solve, new, Array2DRowFieldMatrix, T, b, false, final, Array2DRowFieldMatrix, T, truncatedX, new, Array2DRowFieldMatrix, T, field, -, x, getRowDimension, 1, x, getColumnDimension, for, int, i, 0, <, i, truncatedX, getRowDimension, ++, i, for, int, j, 0, <, j, truncatedX, getColumnDimension, ++, j, truncatedX, setEntry, i, j, x, getEntry, i, j, return, truncatedX]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:updateHighOrderDerivativesPhase1:Array2DRowFieldMatrix<T>#[return, update, multiply, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:updateHighOrderDerivativesPhase2:T[]+T[]+Array2DRowFieldMatrix<T>#[final, T, data, highOrder, getDataRef, for, int, i, 0, <, i, data.length, ++, i, final, T, dataI, data, i, final, T, c1I, c1, i, for, int, j, 0, <, j, dataI.length, ++, j, =, dataI, j, dataI, j, add, c1I, multiply, start, j, subtract, end, j]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:getInstance:int#[CACHE, AdamsNordsieckTransformer, t, CACHE, get, nSteps, if, ==, t, null, =, t, new, AdamsNordsieckTransformer, nSteps, CACHE, put, nSteps, t, return, t]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:getNSteps:null#[return, c1.length]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:buildP:int#[final, BigFraction, pData, BigFraction, rows, rows, for, int, i, 1, <=, i, pData.length, ++, i, final, BigFraction, pI, pData, -, i, 1, final, int, factor, -, i, int, aj, factor, for, int, j, 1, <=, j, pI.length, ++, j, =, pI, -, j, 1, new, BigFraction, *, aj, +, j, 1, *=, aj, factor, return, new, Array2DRowFieldMatrix, BigFraction, pData, false]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:initializeHighOrderDerivatives:double+double[]+double[][]+double[][]#[final, double, a, double, +, c1.length, 1, +, c1.length, 1, final, double, b, double, +, c1.length, 1, y, 0, length, final, double, y0, y, 0, final, double, yDot0, yDot, 0, for, int, i, 1, <, i, y.length, ++, i, final, double, di, -, t, i, t, 0, final, double, ratio, /, di, h, double, dikM1Ohk, /, 1, h, final, double, aI, a, -, *, 2, i, 2, final, double, aDotI, <, -, *, 2, i, 1, a.length, a, -, *, 2, i, 1, null, for, int, j, 0, <, j, aI.length, ++, j, *=, dikM1Ohk, ratio, =, aI, j, *, di, dikM1Ohk, if, !=, aDotI, null, =, aDotI, j, *, +, j, 2, dikM1Ohk, final, double, yI, y, i, final, double, yDotI, yDot, i, final, double, bI, b, -, *, 2, i, 2, final, double, bDotI, <, -, *, 2, i, 1, b.length, b, -, *, 2, i, 1, null, for, int, j, 0, <, j, yI.length, ++, j, =, bI, j, -, yI, j, y0, j, *, di, yDot0, j, if, !=, bDotI, null, =, bDotI, j, -, yDotI, j, yDot0, j, final, QRDecomposition, decomposition, new, QRDecomposition, new, Array2DRowRealMatrix, a, false, final, RealMatrix, x, decomposition, getSolver, solve, new, Array2DRowRealMatrix, b, false, final, Array2DRowRealMatrix, truncatedX, new, Array2DRowRealMatrix, -, x, getRowDimension, 1, x, getColumnDimension, for, int, i, 0, <, i, truncatedX, getRowDimension, ++, i, for, int, j, 0, <, j, truncatedX, getColumnDimension, ++, j, truncatedX, setEntry, i, j, x, getEntry, i, j, return, truncatedX]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:updateHighOrderDerivativesPhase1:Array2DRowRealMatrix#[return, update, multiply, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:updateHighOrderDerivativesPhase2:double[]+double[]+Array2DRowRealMatrix#[final, double, data, highOrder, getDataRef, for, int, i, 0, <, i, data.length, ++, i, final, double, dataI, data, i, final, double, c1I, c1, i, for, int, j, 0, <, j, dataI.length, ++, j, +=, dataI, j, *, c1I, -, start, j, end, j]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:setStepSizeControl:double+double+double+double#[=, minStep, getField, getZero, add, FastMath, abs, minimalStep, =, maxStep, getField, getZero, add, FastMath, abs, maximalStep, =, initialStep, getField, getOne, negate, =, scalAbsoluteTolerance, absoluteTolerance, =, scalRelativeTolerance, relativeTolerance, =, vecAbsoluteTolerance, null, =, vecRelativeTolerance, null]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:setStepSizeControl:double+double+double[]+double[]#[=, minStep, getField, getZero, add, FastMath, abs, minimalStep, =, maxStep, getField, getZero, add, FastMath, abs, maximalStep, =, initialStep, getField, getOne, negate, =, scalAbsoluteTolerance, 0, =, scalRelativeTolerance, 0, =, vecAbsoluteTolerance, absoluteTolerance, clone, =, vecRelativeTolerance, relativeTolerance, clone]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:setInitialStepSize:T#[if, ||, <, initialStepSize, subtract, minStep, getReal, 0, >, initialStepSize, subtract, maxStep, getReal, 0, =, initialStep, getField, getOne, negate, =, initialStep, initialStepSize]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:sanityChecks:FieldODEState<T>+T#[super, sanityChecks, eqn, t, =, mainSetDimension, eqn, getStateDimension, if, &&, !=, vecAbsoluteTolerance, null, !=, vecAbsoluteTolerance.length, mainSetDimension, throw, new, DimensionMismatchException, mainSetDimension, vecAbsoluteTolerance.length, if, &&, !=, vecRelativeTolerance, null, !=, vecRelativeTolerance.length, mainSetDimension, throw, new, DimensionMismatchException, mainSetDimension, vecRelativeTolerance.length]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:initializeStep:boolean+int+T[]+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[if, >, initialStep, getReal, 0, return, forward, initialStep, initialStep, negate, final, T, y0, mapper, mapState, state0, final, T, yDot0, mapper, mapDerivative, state0, T, yOnScale2, getField, getZero, T, yDotOnScale2, getField, getZero, for, int, j, 0, <, j, scale.length, ++, j, final, T, ratio, y0, j, divide, scale, j, =, yOnScale2, yOnScale2, add, ratio, multiply, ratio, final, T, ratioDot, yDot0, j, divide, scale, j, =, yDotOnScale2, yDotOnScale2, add, ratioDot, multiply, ratioDot, T, h, ||, <, yOnScale2, getReal, 1.0e-10, <, yDotOnScale2, getReal, 1.0e-10, getField, getZero, add, 1.0e-6, yOnScale2, divide, yDotOnScale2, sqrt, multiply, 0.01, if, !, forward, =, h, h, negate, final, T, y1, MathArrays, buildArray, getField, y0.length, for, int, j, 0, <, j, y0.length, ++, j, =, y1, j, y0, j, add, yDot0, j, multiply, h, final, T, yDot1, computeDerivatives, state0, getTime, add, h, y1, T, yDDotOnScale, getField, getZero, for, int, j, 0, <, j, scale.length, ++, j, final, T, ratioDotDot, yDot1, j, subtract, yDot0, j, divide, scale, j, =, yDDotOnScale, yDDotOnScale, add, ratioDotDot, multiply, ratioDotDot, =, yDDotOnScale, yDDotOnScale, sqrt, divide, h, final, T, maxInv2, MathUtils, max, yDotOnScale2, sqrt, yDDotOnScale, final, T, h1, <, maxInv2, getReal, 1.0e-15, MathUtils, max, getField, getZero, add, 1.0e-6, h, abs, multiply, 0.001, maxInv2, multiply, 100, reciprocal, pow, /, 1.0, order, =, h, MathUtils, min, h, abs, multiply, 100, h1, =, h, MathUtils, max, h, state0, getTime, abs, multiply, 1.0e-12, =, h, MathUtils, max, minStep, MathUtils, min, maxStep, h, if, !, forward, =, h, h, negate, return, h]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:filterStep:T+boolean+boolean#[T, filteredH, h, if, <, h, abs, subtract, minStep, getReal, 0, if, acceptSmall, =, filteredH, forward, minStep, minStep, negate, throw, new, NumberIsTooSmallException, LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, h, abs, getReal, minStep, getReal, true, if, >, filteredH, subtract, maxStep, getReal, 0, =, filteredH, maxStep, if, <, filteredH, add, maxStep, getReal, 0, =, filteredH, maxStep, negate, return, filteredH]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:resetInternalState:null#[setStepStart, null, setStepSize, minStep, multiply, maxStep, sqrt]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:getMinStep:null#[return, minStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:getMaxStep:null#[return, maxStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:setStepSizeControl:double+double+double+double#[=, minStep, FastMath, abs, minimalStep, =, maxStep, FastMath, abs, maximalStep, =, initialStep, -, 1, =, scalAbsoluteTolerance, absoluteTolerance, =, scalRelativeTolerance, relativeTolerance, =, vecAbsoluteTolerance, null, =, vecRelativeTolerance, null]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:setStepSizeControl:double+double+double[]+double[]#[=, minStep, FastMath, abs, minimalStep, =, maxStep, FastMath, abs, maximalStep, =, initialStep, -, 1, =, scalAbsoluteTolerance, 0, =, scalRelativeTolerance, 0, =, vecAbsoluteTolerance, absoluteTolerance, clone, =, vecRelativeTolerance, relativeTolerance, clone]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:setInitialStepSize:double#[if, ||, <, initialStepSize, minStep, >, initialStepSize, maxStep, =, initialStep, -, 1.0, =, initialStep, initialStepSize]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:sanityChecks:ExpandableStatefulODE+double#[super, sanityChecks, equations, t, =, mainSetDimension, equations, getPrimaryMapper, getDimension, if, &&, !=, vecAbsoluteTolerance, null, !=, vecAbsoluteTolerance.length, mainSetDimension, throw, new, DimensionMismatchException, mainSetDimension, vecAbsoluteTolerance.length, if, &&, !=, vecRelativeTolerance, null, !=, vecRelativeTolerance.length, mainSetDimension, throw, new, DimensionMismatchException, mainSetDimension, vecRelativeTolerance.length]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:initializeStep:boolean+int+double[]+double+double[]+double[]+double[]+double[]#[if, >, initialStep, 0, return, forward, initialStep, -, initialStep, double, ratio, double, yOnScale2, 0, double, yDotOnScale2, 0, for, int, j, 0, <, j, scale.length, ++, j, =, ratio, /, y0, j, scale, j, +=, yOnScale2, *, ratio, ratio, =, ratio, /, yDot0, j, scale, j, +=, yDotOnScale2, *, ratio, ratio, double, h, ||, <, yOnScale2, 1.0e-10, <, yDotOnScale2, 1.0e-10, 1.0e-6, *, 0.01, FastMath, sqrt, /, yOnScale2, yDotOnScale2, if, !, forward, =, h, -, h, for, int, j, 0, <, j, y0.length, ++, j, =, y1, j, +, y0, j, *, h, yDot0, j, computeDerivatives, +, t0, h, y1, yDot1, double, yDDotOnScale, 0, for, int, j, 0, <, j, scale.length, ++, j, =, ratio, /, -, yDot1, j, yDot0, j, scale, j, +=, yDDotOnScale, *, ratio, ratio, =, yDDotOnScale, /, FastMath, sqrt, yDDotOnScale, h, final, double, maxInv2, FastMath, max, FastMath, sqrt, yDotOnScale2, yDDotOnScale, final, double, h1, <, maxInv2, 1.0e-15, FastMath, max, 1.0e-6, *, 0.001, FastMath, abs, h, FastMath, pow, /, 0.01, maxInv2, /, 1.0, order, =, h, FastMath, min, *, 100.0, FastMath, abs, h, h1, =, h, FastMath, max, h, *, 1.0e-12, FastMath, abs, t0, if, <, h, getMinStep, =, h, getMinStep, if, >, h, getMaxStep, =, h, getMaxStep, if, !, forward, =, h, -, h, return, h]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:filterStep:double+boolean+boolean#[double, filteredH, h, if, <, FastMath, abs, h, minStep, if, acceptSmall, =, filteredH, forward, minStep, -, minStep, throw, new, NumberIsTooSmallException, LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, FastMath, abs, h, minStep, true, if, >, filteredH, maxStep, =, filteredH, maxStep, if, <, filteredH, -, maxStep, =, filteredH, -, maxStep, return, filteredH]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:getCurrentStepStart:null#[return, stepStart]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:resetInternalState:null#[=, stepStart, Double.NaN, =, stepSize, FastMath, sqrt, *, minStep, maxStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:getMinStep:null#[return, minStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:getMaxStep:null#[return, maxStep]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:getC:null#[final, T, c, MathArrays, buildArray, getField, 3, =, c, 0, getField, getOne, multiply, 0.5, =, c, 1, c, 0, =, c, 2, getField, getOne, return, c]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:getA:null#[final, T, a, MathArrays, buildArray, getField, 3, -, 1, for, int, i, 0, <, i, a.length, ++, i, =, a, i, MathArrays, buildArray, getField, +, i, 1, =, a, 0, 0, fraction, 1, 2, =, a, 1, 0, getField, getZero, =, a, 1, 1, a, 0, 0, =, a, 2, 0, getField, getZero, =, a, 2, 1, getField, getZero, =, a, 2, 2, getField, getOne, return, a]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 4, =, b, 0, fraction, 1, 6, =, b, 1, fraction, 1, 3, =, b, 2, b, 1, =, b, 3, b, 0, return, b]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, ClassicalRungeKuttaFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, ClassicalRungeKuttaFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, one, time, getField, getOne, final, T, oneMinusTheta, one, subtract, theta, final, T, oneMinus2Theta, one, subtract, theta, multiply, 2, final, T, coeffDot1, oneMinusTheta, multiply, oneMinus2Theta, final, T, coeffDot23, theta, multiply, oneMinusTheta, multiply, 2, final, T, coeffDot4, theta, multiply, oneMinus2Theta, negate, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, fourTheta2, theta, multiply, theta, multiply, 4, final, T, s, thetaH, divide, 6.0, final, T, coeff1, s, multiply, fourTheta2, subtract, theta, multiply, 9, add, 6, final, T, coeff23, s, multiply, theta, multiply, 6, subtract, fourTheta2, final, T, coeff4, s, multiply, fourTheta2, subtract, theta, multiply, 3, =, interpolatedState, previousStateLinearCombination, coeff1, coeff23, coeff23, coeff4, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot23, coeffDot23, coeffDot4, final, T, fourTheta, theta, multiply, 4, final, T, s, oneMinusThetaH, divide, 6, final, T, coeff1, s, multiply, theta, multiply, fourTheta, negate, add, 5, subtract, 1, final, T, coeff23, s, multiply, theta, multiply, fourTheta, subtract, 2, subtract, 2, final, T, coeff4, s, multiply, theta, multiply, fourTheta, negate, subtract, 1, subtract, 1, =, interpolatedState, currentStateLinearCombination, coeff1, coeff23, coeff23, coeff4, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot23, coeffDot23, coeffDot4, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaStepInterpolator:doCopy:null#[return, new, ClassicalRungeKuttaStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, double, oneMinusTheta, -, 1, theta, final, double, oneMinus2Theta, -, 1, *, 2, theta, final, double, coeffDot1, *, oneMinusTheta, oneMinus2Theta, final, double, coeffDot23, *, 2, theta, oneMinusTheta, final, double, coeffDot4, *, -, theta, oneMinus2Theta, if, &&, !=, previousState, null, <=, theta, 0.5, final, double, fourTheta2, *, 4, theta, theta, final, double, s, /, *, theta, h, 6.0, final, double, coeff1, *, s, +, -, 6, *, 9, theta, fourTheta2, final, double, coeff23, *, s, -, *, 6, theta, fourTheta2, final, double, coeff4, *, s, +, *, -, 3, theta, fourTheta2, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot23, +, yDotK, 1, i, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, =, interpolatedState, i, +, +, +, previousState, i, *, coeff1, yDot1, *, coeff23, yDot23, *, coeff4, yDot4, =, interpolatedDerivatives, i, +, +, *, coeffDot1, yDot1, *, coeffDot23, yDot23, *, coeffDot4, yDot4, final, double, fourTheta, *, 4, theta, final, double, s, /, oneMinusThetaH, 6.0, final, double, coeff1, *, s, -, *, +, -, fourTheta, 5, theta, 1, final, double, coeff23, *, s, -, *, -, fourTheta, 2, theta, 2, final, double, coeff4, *, s, -, *, -, -, fourTheta, 1, theta, 1, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot23, +, yDotK, 1, i, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, =, interpolatedState, i, +, +, +, currentState, i, *, coeff1, yDot1, *, coeff23, yDot23, *, coeff4, yDot4, =, interpolatedDerivatives, i, +, +, *, coeffDot1, yDot1, *, coeffDot23, yDot23, *, coeffDot4, yDot4]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getC:null#[final, T, c, MathArrays, buildArray, getField, 6, =, c, 0, fraction, 1, 5, =, c, 1, fraction, 3, 10, =, c, 2, fraction, 4, 5, =, c, 3, fraction, 8, 9, =, c, 4, getField, getOne, =, c, 5, getField, getOne, return, c]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getA:null#[final, T, a, MathArrays, buildArray, getField, 6, -, 1, for, int, i, 0, <, i, a.length, ++, i, =, a, i, MathArrays, buildArray, getField, +, i, 1, =, a, 0, 0, fraction, 1, 5, =, a, 1, 0, fraction, 3, 40, =, a, 1, 1, fraction, 9, 40, =, a, 2, 0, fraction, 44, 45, =, a, 2, 1, fraction, -, 56, 15, =, a, 2, 2, fraction, 32, 9, =, a, 3, 0, fraction, 19372, 6561, =, a, 3, 1, fraction, -, 25360, 2187, =, a, 3, 2, fraction, 64448, 6561, =, a, 3, 3, fraction, -, 212, 729, =, a, 4, 0, fraction, 9017, 3168, =, a, 4, 1, fraction, -, 355, 33, =, a, 4, 2, fraction, 46732, 5247, =, a, 4, 3, fraction, 49, 176, =, a, 4, 4, fraction, -, 5103, 18656, =, a, 5, 0, fraction, 35, 384, =, a, 5, 1, getField, getZero, =, a, 5, 2, fraction, 500, 1113, =, a, 5, 3, fraction, 125, 192, =, a, 5, 4, fraction, -, 2187, 6784, =, a, 5, 5, fraction, 11, 84, return, a]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 7, =, b, 0, fraction, 35, 384, =, b, 1, getField, getZero, =, b, 2, fraction, 500, 1113, =, b, 3, fraction, 125, 192, =, b, 4, fraction, -, 2187, 6784, =, b, 5, fraction, 11, 84, =, b, 6, getField, getZero, return, b]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, DormandPrince54FieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getOrder:null#[return, 5]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:estimateError:T[][]+T[]+T[]+T#[T, error, getField, getZero, for, int, j, 0, <, j, mainSetDimension, ++, j, final, T, errSum, yDotK, 0, j, multiply, e1, add, yDotK, 2, j, multiply, e3, add, yDotK, 3, j, multiply, e4, add, yDotK, 4, j, multiply, e5, add, yDotK, 5, j, multiply, e6, add, yDotK, 6, j, multiply, e7, final, T, yScale, MathUtils, max, y0, j, abs, y1, j, abs, final, T, tol, ==, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, j, add, vecAbsoluteTolerance, j, final, T, ratio, h, multiply, errSum, divide, tol, =, error, error, add, ratio, multiply, ratio, return, error, divide, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, DormandPrince54FieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, one, time, getField, getOne, final, T, eta, one, subtract, theta, final, T, twoTheta, theta, multiply, 2, final, T, dot2, one, subtract, twoTheta, final, T, dot3, theta, multiply, theta, multiply, -, 3, add, 2, final, T, dot4, twoTheta, multiply, theta, multiply, twoTheta, subtract, 3, add, 1, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, f1, thetaH, final, T, f2, f1, multiply, eta, final, T, f3, f2, multiply, theta, final, T, f4, f3, multiply, eta, final, T, coeff0, f1, multiply, a70, subtract, f2, multiply, a70, subtract, 1, add, f3, multiply, a70, multiply, 2, subtract, 1, add, f4, multiply, d0, final, T, coeff1, time, getField, getZero, final, T, coeff2, f1, multiply, a72, subtract, f2, multiply, a72, add, f3, multiply, a72, multiply, 2, add, f4, multiply, d2, final, T, coeff3, f1, multiply, a73, subtract, f2, multiply, a73, add, f3, multiply, a73, multiply, 2, add, f4, multiply, d3, final, T, coeff4, f1, multiply, a74, subtract, f2, multiply, a74, add, f3, multiply, a74, multiply, 2, add, f4, multiply, d4, final, T, coeff5, f1, multiply, a75, subtract, f2, multiply, a75, add, f3, multiply, a75, multiply, 2, add, f4, multiply, d5, final, T, coeff6, f4, multiply, d6, subtract, f3, final, T, coeffDot0, a70, subtract, dot2, multiply, a70, subtract, 1, add, dot3, multiply, a70, multiply, 2, subtract, 1, add, dot4, multiply, d0, final, T, coeffDot1, time, getField, getZero, final, T, coeffDot2, a72, subtract, dot2, multiply, a72, add, dot3, multiply, a72, multiply, 2, add, dot4, multiply, d2, final, T, coeffDot3, a73, subtract, dot2, multiply, a73, add, dot3, multiply, a73, multiply, 2, add, dot4, multiply, d3, final, T, coeffDot4, a74, subtract, dot2, multiply, a74, add, dot3, multiply, a74, multiply, 2, add, dot4, multiply, d4, final, T, coeffDot5, a75, subtract, dot2, multiply, a75, add, dot3, multiply, a75, multiply, 2, add, dot4, multiply, d5, final, T, coeffDot6, dot4, multiply, d6, subtract, dot3, =, interpolatedState, previousStateLinearCombination, coeff0, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot0, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, final, T, f1, oneMinusThetaH, negate, final, T, f2, oneMinusThetaH, multiply, theta, final, T, f3, f2, multiply, theta, final, T, f4, f3, multiply, eta, final, T, coeff0, f1, multiply, a70, subtract, f2, multiply, a70, subtract, 1, add, f3, multiply, a70, multiply, 2, subtract, 1, add, f4, multiply, d0, final, T, coeff1, time, getField, getZero, final, T, coeff2, f1, multiply, a72, subtract, f2, multiply, a72, add, f3, multiply, a72, multiply, 2, add, f4, multiply, d2, final, T, coeff3, f1, multiply, a73, subtract, f2, multiply, a73, add, f3, multiply, a73, multiply, 2, add, f4, multiply, d3, final, T, coeff4, f1, multiply, a74, subtract, f2, multiply, a74, add, f3, multiply, a74, multiply, 2, add, f4, multiply, d4, final, T, coeff5, f1, multiply, a75, subtract, f2, multiply, a75, add, f3, multiply, a75, multiply, 2, add, f4, multiply, d5, final, T, coeff6, f4, multiply, d6, subtract, f3, final, T, coeffDot0, a70, subtract, dot2, multiply, a70, subtract, 1, add, dot3, multiply, a70, multiply, 2, subtract, 1, add, dot4, multiply, d0, final, T, coeffDot1, time, getField, getZero, final, T, coeffDot2, a72, subtract, dot2, multiply, a72, add, dot3, multiply, a72, multiply, 2, add, dot4, multiply, d2, final, T, coeffDot3, a73, subtract, dot2, multiply, a73, add, dot3, multiply, a73, multiply, 2, add, dot4, multiply, d3, final, T, coeffDot4, a74, subtract, dot2, multiply, a74, add, dot3, multiply, a74, multiply, 2, add, dot4, multiply, d4, final, T, coeffDot5, a75, subtract, dot2, multiply, a75, add, dot3, multiply, a75, multiply, 2, add, dot4, multiply, d5, final, T, coeffDot6, dot4, multiply, d6, subtract, dot3, =, interpolatedState, currentStateLinearCombination, coeff0, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot0, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:DormandPrince54Integrator:getOrder:null#[return, 5]
org.apache.commons.math4.ode.nonstiff:DormandPrince54Integrator:estimateError:double[][]+double[]+double[]+double#[double, error, 0, for, int, j, 0, <, j, mainSetDimension, ++, j, final, double, errSum, +, +, +, +, +, *, E1, yDotK, 0, j, *, E3, yDotK, 2, j, *, E4, yDotK, 3, j, *, E5, yDotK, 4, j, *, E6, yDotK, 5, j, *, E7, yDotK, 6, j, final, double, yScale, FastMath, max, FastMath, abs, y0, j, FastMath, abs, y1, j, final, double, tol, ==, vecAbsoluteTolerance, null, +, scalAbsoluteTolerance, *, scalRelativeTolerance, yScale, +, vecAbsoluteTolerance, j, *, vecRelativeTolerance, j, yScale, final, double, ratio, /, *, h, errSum, tol, +=, error, *, ratio, ratio, return, FastMath, sqrt, /, error, mainSetDimension]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:doCopy:null#[return, new, DormandPrince54StepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:reinitialize:AbstractIntegrator+double[]+double[][]+boolean+EquationsMapper+EquationsMapper[]#[super, reinitialize, integrator, y, yDotK, forward, primaryMapper, secondaryMappers, =, v1, null, =, v2, null, =, v3, null, =, v4, null, =, vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:storeTime:double#[super, storeTime, t, =, vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[if, !, vectorsInitialized, if, ==, v1, null, =, v1, double, interpolatedState.length, =, v2, double, interpolatedState.length, =, v3, double, interpolatedState.length, =, v4, double, interpolatedState.length, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot0, yDotK, 0, i, final, double, yDot2, yDotK, 2, i, final, double, yDot3, yDotK, 3, i, final, double, yDot4, yDotK, 4, i, final, double, yDot5, yDotK, 5, i, final, double, yDot6, yDotK, 6, i, =, v1, i, +, +, +, +, *, A70, yDot0, *, A72, yDot2, *, A73, yDot3, *, A74, yDot4, *, A75, yDot5, =, v2, i, -, yDot0, v1, i, =, v3, i, -, v1, i, v2, i, yDot6, =, v4, i, +, +, +, +, +, *, D0, yDot0, *, D2, yDot2, *, D3, yDot3, *, D4, yDot4, *, D5, yDot5, *, D6, yDot6, =, vectorsInitialized, true, final, double, eta, -, 1, theta, final, double, twoTheta, *, 2, theta, final, double, dot2, -, 1, twoTheta, final, double, dot3, *, theta, -, 2, *, 3, theta, final, double, dot4, *, twoTheta, +, 1, *, theta, -, twoTheta, 3, if, &&, !=, previousState, null, <=, theta, 0.5, for, int, i, 0, <, i, interpolatedState.length, ++, i, =, interpolatedState, i, +, previousState, i, *, theta, h, +, v1, i, *, eta, +, v2, i, *, theta, +, v3, i, *, eta, v4, i, =, interpolatedDerivatives, i, +, +, +, v1, i, *, dot2, v2, i, *, dot3, v3, i, *, dot4, v4, i, for, int, i, 0, <, i, interpolatedState.length, ++, i, =, interpolatedState, i, -, currentState, i, *, oneMinusThetaH, -, v1, i, *, theta, +, v2, i, *, theta, +, v3, i, *, eta, v4, i, =, interpolatedDerivatives, i, +, +, +, v1, i, *, dot2, v2, i, *, dot3, v3, i, *, dot4, v4, i]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getC:null#[final, T, sqrt6, getField, getOne, multiply, 6, sqrt, final, T, c, MathArrays, buildArray, getField, 15, =, c, 0, sqrt6, add, -, 6, divide, -, 67.5, =, c, 1, sqrt6, add, -, 6, divide, -, 45.0, =, c, 2, sqrt6, add, -, 6, divide, -, 30.0, =, c, 3, sqrt6, add, 6, divide, 30.0, =, c, 4, fraction, 1, 3, =, c, 5, fraction, 1, 4, =, c, 6, fraction, 4, 13, =, c, 7, fraction, 127, 195, =, c, 8, fraction, 3, 5, =, c, 9, fraction, 6, 7, =, c, 10, getField, getOne, =, c, 11, getField, getOne, =, c, 12, fraction, 1.0, 10.0, =, c, 13, fraction, 1.0, 5.0, =, c, 14, fraction, 7.0, 9.0, return, c]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getA:null#[final, T, sqrt6, getField, getOne, multiply, 6, sqrt, final, T, a, MathArrays, buildArray, getField, 15, -, 1, for, int, i, 0, <, i, a.length, ++, i, =, a, i, MathArrays, buildArray, getField, +, i, 1, =, a, 0, 0, sqrt6, add, -, 6, divide, -, 67.5, =, a, 1, 0, sqrt6, add, -, 6, divide, -, 180, =, a, 1, 1, sqrt6, add, -, 6, divide, -, 60, =, a, 2, 0, sqrt6, add, -, 6, divide, -, 120, =, a, 2, 1, getField, getZero, =, a, 2, 2, sqrt6, add, -, 6, divide, -, 40, =, a, 3, 0, sqrt6, multiply, 107, add, 462, divide, 3000, =, a, 3, 1, getField, getZero, =, a, 3, 2, sqrt6, multiply, 197, add, 402, divide, -, 1000, =, a, 3, 3, sqrt6, multiply, 73, add, 168, divide, 375, =, a, 4, 0, fraction, 1, 27, =, a, 4, 1, getField, getZero, =, a, 4, 2, getField, getZero, =, a, 4, 3, sqrt6, add, 16, divide, 108, =, a, 4, 4, sqrt6, add, -, 16, divide, -, 108, =, a, 5, 0, fraction, 19, 512, =, a, 5, 1, getField, getZero, =, a, 5, 2, getField, getZero, =, a, 5, 3, sqrt6, multiply, 23, add, 118, divide, 1024, =, a, 5, 4, sqrt6, multiply, -, 23, add, 118, divide, 1024, =, a, 5, 5, fraction, -, 9, 512, =, a, 6, 0, fraction, 13772, 371293, =, a, 6, 1, getField, getZero, =, a, 6, 2, getField, getZero, =, a, 6, 3, sqrt6, multiply, 4784, add, 51544, divide, 371293, =, a, 6, 4, sqrt6, multiply, -, 4784, add, 51544, divide, 371293, =, a, 6, 5, fraction, -, 5688, 371293, =, a, 6, 6, fraction, 3072, 371293, =, a, 7, 0, fraction, 58656157643.0, 93983540625.0, =, a, 7, 1, getField, getZero, =, a, 7, 2, getField, getZero, =, a, 7, 3, sqrt6, multiply, -, 318801444819.0, add, -, 1324889724104.0, divide, 626556937500.0, =, a, 7, 4, sqrt6, multiply, 318801444819.0, add, -, 1324889724104.0, divide, 626556937500.0, =, a, 7, 5, fraction, 96044563816.0, 3480871875.0, =, a, 7, 6, fraction, 5682451879168.0, 281950621875.0, =, a, 7, 7, fraction, -, 165125654.0, 3796875.0, =, a, 8, 0, fraction, 8909899.0, 18653125.0, =, a, 8, 1, getField, getZero, =, a, 8, 2, getField, getZero, =, a, 8, 3, sqrt6, multiply, -, 1137963.0, add, -, 4521408.0, divide, 2937500.0, =, a, 8, 4, sqrt6, multiply, 1137963.0, add, -, 4521408.0, divide, 2937500.0, =, a, 8, 5, fraction, 96663078.0, 4553125.0, =, a, 8, 6, fraction, 2107245056.0, 137915625.0, =, a, 8, 7, fraction, -, 4913652016.0, 147609375.0, =, a, 8, 8, fraction, -, 78894270.0, 3880452869.0, =, a, 9, 0, fraction, -, 20401265806.0, 21769653311.0, =, a, 9, 1, getField, getZero, =, a, 9, 2, getField, getZero, =, a, 9, 3, sqrt6, multiply, 94326.0, add, 354216.0, divide, 112847.0, =, a, 9, 4, sqrt6, multiply, -, 94326.0, add, 354216.0, divide, 112847.0, =, a, 9, 5, fraction, -, 43306765128.0, 5313852383.0, =, a, 9, 6, fraction, -, 20866708358144.0, 1126708119789.0, =, a, 9, 7, fraction, 14886003438020.0, 654632330667.0, =, a, 9, 8, fraction, 35290686222309375.0, 14152473387134411.0, =, a, 9, 9, fraction, -, 1477884375.0, 485066827.0, =, a, 10, 0, fraction, 39815761.0, 17514443.0, =, a, 10, 1, getField, getZero, =, a, 10, 2, getField, getZero, =, a, 10, 3, sqrt6, multiply, -, 960905.0, add, -, 3457480.0, divide, 551636.0, =, a, 10, 4, sqrt6, multiply, 960905.0, add, -, 3457480.0, divide, 551636.0, =, a, 10, 5, fraction, -, 844554132.0, 47026969.0, =, a, 10, 6, fraction, 8444996352.0, 302158619.0, =, a, 10, 7, fraction, -, 2509602342.0, 877790785.0, =, a, 10, 8, fraction, -, 28388795297996250.0, 3199510091356783.0, =, a, 10, 9, fraction, 226716250.0, 18341897.0, =, a, 10, 10, fraction, 1371316744.0, 2131383595.0, =, a, 11, 0, fraction, 104257.0, 1920240.0, =, a, 11, 1, getField, getZero, =, a, 11, 2, getField, getZero, =, a, 11, 3, getField, getZero, =, a, 11, 4, getField, getZero, =, a, 11, 5, fraction, 3399327.0, 763840.0, =, a, 11, 6, fraction, 66578432.0, 35198415.0, =, a, 11, 7, fraction, -, 1674902723.0, 288716400.0, =, a, 11, 8, fraction, 54980371265625.0, 176692375811392.0, =, a, 11, 9, fraction, -, 734375.0, 4826304.0, =, a, 11, 10, fraction, 171414593.0, 851261400.0, =, a, 11, 11, fraction, 137909.0, 3084480.0, =, a, 12, 0, fraction, 13481885573.0, 240030000000.0, =, a, 12, 1, getField, getZero, =, a, 12, 2, getField, getZero, =, a, 12, 3, getField, getZero, =, a, 12, 4, getField, getZero, =, a, 12, 5, getField, getZero, =, a, 12, 6, fraction, 139418837528.0, 549975234375.0, =, a, 12, 7, fraction, -, 11108320068443.0, 45111937500000.0, =, a, 12, 8, fraction, -, 1769651421925959.0, 14249385146080000.0, =, a, 12, 9, fraction, 57799439.0, 377055000.0, =, a, 12, 10, fraction, 793322643029.0, 96734250000000.0, =, a, 12, 11, fraction, 1458939311.0, 192780000000.0, =, a, 12, 12, fraction, -, 4149.0, 500000.0, =, a, 13, 0, fraction, 1595561272731.0, 50120273500000.0, =, a, 13, 1, getField, getZero, =, a, 13, 2, getField, getZero, =, a, 13, 3, getField, getZero, =, a, 13, 4, getField, getZero, =, a, 13, 5, fraction, 975183916491.0, 34457688031250.0, =, a, 13, 6, fraction, 38492013932672.0, 718912673015625.0, =, a, 13, 7, fraction, -, 1114881286517557.0, 20298710767500000.0, =, a, 13, 8, getField, getZero, =, a, 13, 9, getField, getZero, =, a, 13, 10, fraction, -, 2538710946863.0, 23431227861250000.0, =, a, 13, 11, fraction, 8824659001.0, 23066716781250.0, =, a, 13, 12, fraction, -, 11518334563.0, 33831184612500.0, =, a, 13, 13, fraction, 1912306948.0, 13532473845.0, =, a, 14, 0, fraction, -, 13613986967.0, 31741908048.0, =, a, 14, 1, getField, getZero, =, a, 14, 2, getField, getZero, =, a, 14, 3, getField, getZero, =, a, 14, 4, getField, getZero, =, a, 14, 5, fraction, -, 4755612631.0, 1012344804.0, =, a, 14, 6, fraction, 42939257944576.0, 5588559685701.0, =, a, 14, 7, fraction, 77881972900277.0, 19140370552944.0, =, a, 14, 8, fraction, 22719829234375.0, 63689648654052.0, =, a, 14, 9, getField, getZero, =, a, 14, 10, getField, getZero, =, a, 14, 11, getField, getZero, =, a, 14, 12, fraction, -, 1199007803.0, 857031517296.0, =, a, 14, 13, fraction, 157882067000.0, 53564469831.0, =, a, 14, 14, fraction, -, 290468882375.0, 31741908048.0, return, a]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 16, =, b, 0, fraction, 104257, 1920240, =, b, 1, getField, getZero, =, b, 2, getField, getZero, =, b, 3, getField, getZero, =, b, 4, getField, getZero, =, b, 5, fraction, 3399327.0, 763840.0, =, b, 6, fraction, 66578432.0, 35198415.0, =, b, 7, fraction, -, 1674902723.0, 288716400.0, =, b, 8, fraction, 54980371265625.0, 176692375811392.0, =, b, 9, fraction, -, 734375.0, 4826304.0, =, b, 10, fraction, 171414593.0, 851261400.0, =, b, 11, fraction, 137909.0, 3084480.0, =, b, 12, getField, getZero, =, b, 13, getField, getZero, =, b, 14, getField, getZero, =, b, 15, getField, getZero, return, b]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, DormandPrince853FieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getOrder:null#[return, 8]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:estimateError:T[][]+T[]+T[]+T#[T, error1, h, getField, getZero, T, error2, h, getField, getZero, for, int, j, 0, <, j, mainSetDimension, ++, j, final, T, errSum1, yDotK, 0, j, multiply, e1_01, add, yDotK, 5, j, multiply, e1_06, add, yDotK, 6, j, multiply, e1_07, add, yDotK, 7, j, multiply, e1_08, add, yDotK, 8, j, multiply, e1_09, add, yDotK, 9, j, multiply, e1_10, add, yDotK, 10, j, multiply, e1_11, add, yDotK, 11, j, multiply, e1_12, final, T, errSum2, yDotK, 0, j, multiply, e2_01, add, yDotK, 5, j, multiply, e2_06, add, yDotK, 6, j, multiply, e2_07, add, yDotK, 7, j, multiply, e2_08, add, yDotK, 8, j, multiply, e2_09, add, yDotK, 9, j, multiply, e2_10, add, yDotK, 10, j, multiply, e2_11, add, yDotK, 11, j, multiply, e2_12, final, T, yScale, MathUtils, max, y0, j, abs, y1, j, abs, final, T, tol, ==, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, j, add, vecAbsoluteTolerance, j, final, T, ratio1, errSum1, divide, tol, =, error1, error1, add, ratio1, multiply, ratio1, final, T, ratio2, errSum2, divide, tol, =, error2, error2, add, ratio2, multiply, ratio2, T, den, error1, add, error2, multiply, 0.01, if, <=, den, getReal, 0.0, =, den, h, getField, getOne, return, h, abs, multiply, error1, divide, den, multiply, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, DormandPrince853FieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldStepInterpolator:fraction:Field<T>+double+double#[return, field, getZero, add, p, divide, q]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, one, time, getField, getOne, final, T, eta, one, subtract, theta, final, T, twoTheta, theta, multiply, 2, final, T, theta2, theta, multiply, theta, final, T, dot1, one, subtract, twoTheta, final, T, dot2, theta, multiply, theta, multiply, -, 3, add, 2, final, T, dot3, twoTheta, multiply, theta, multiply, twoTheta, subtract, 3, add, 1, final, T, dot4, theta2, multiply, theta, multiply, theta, multiply, 5, subtract, 8, add, 3, final, T, dot5, theta2, multiply, theta, multiply, theta, multiply, theta, multiply, -, 6, add, 15, subtract, 12, add, 3, final, T, dot6, theta2, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, -, 7, add, 18, subtract, 15, add, 4, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, f0, thetaH, final, T, f1, f0, multiply, eta, final, T, f2, f1, multiply, theta, final, T, f3, f2, multiply, eta, final, T, f4, f3, multiply, theta, final, T, f5, f4, multiply, eta, final, T, f6, f5, multiply, theta, final, T, p, MathArrays, buildArray, time, getField, 16, final, T, q, MathArrays, buildArray, time, getField, 16, for, int, i, 0, <, i, p.length, ++, i, =, p, i, f0, multiply, d, 0, i, add, f1, multiply, d, 1, i, add, f2, multiply, d, 2, i, add, f3, multiply, d, 3, i, add, f4, multiply, d, 4, i, add, f5, multiply, d, 5, i, add, f6, multiply, d, 6, i, =, q, i, d, 0, i, add, dot1, multiply, d, 1, i, add, dot2, multiply, d, 2, i, add, dot3, multiply, d, 3, i, add, dot4, multiply, d, 4, i, add, dot5, multiply, d, 5, i, add, dot6, multiply, d, 6, i, =, interpolatedState, previousStateLinearCombination, p, 0, p, 1, p, 2, p, 3, p, 4, p, 5, p, 6, p, 7, p, 8, p, 9, p, 10, p, 11, p, 12, p, 13, p, 14, p, 15, =, interpolatedDerivatives, derivativeLinearCombination, q, 0, q, 1, q, 2, q, 3, q, 4, q, 5, q, 6, q, 7, q, 8, q, 9, q, 10, q, 11, q, 12, q, 13, q, 14, q, 15, final, T, f0, oneMinusThetaH, negate, final, T, f1, f0, multiply, theta, negate, final, T, f2, f1, multiply, theta, final, T, f3, f2, multiply, eta, final, T, f4, f3, multiply, theta, final, T, f5, f4, multiply, eta, final, T, f6, f5, multiply, theta, final, T, p, MathArrays, buildArray, time, getField, 16, final, T, q, MathArrays, buildArray, time, getField, 16, for, int, i, 0, <, i, p.length, ++, i, =, p, i, f0, multiply, d, 0, i, add, f1, multiply, d, 1, i, add, f2, multiply, d, 2, i, add, f3, multiply, d, 3, i, add, f4, multiply, d, 4, i, add, f5, multiply, d, 5, i, add, f6, multiply, d, 6, i, =, q, i, d, 0, i, add, dot1, multiply, d, 1, i, add, dot2, multiply, d, 2, i, add, dot3, multiply, d, 3, i, add, dot4, multiply, d, 4, i, add, dot5, multiply, d, 5, i, add, dot6, multiply, d, 6, i, =, interpolatedState, currentStateLinearCombination, p, 0, p, 1, p, 2, p, 3, p, 4, p, 5, p, 6, p, 7, p, 8, p, 9, p, 10, p, 11, p, 12, p, 13, p, 14, p, 15, =, interpolatedDerivatives, derivativeLinearCombination, q, 0, q, 1, q, 2, q, 3, q, 4, q, 5, q, 6, q, 7, q, 8, q, 9, q, 10, q, 11, q, 12, q, 13, q, 14, q, 15, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:DormandPrince853Integrator:getOrder:null#[return, 8]
org.apache.commons.math4.ode.nonstiff:DormandPrince853Integrator:estimateError:double[][]+double[]+double[]+double#[double, error1, 0, double, error2, 0, for, int, j, 0, <, j, mainSetDimension, ++, j, final, double, errSum1, +, +, +, +, +, +, +, *, E1_01, yDotK, 0, j, *, E1_06, yDotK, 5, j, *, E1_07, yDotK, 6, j, *, E1_08, yDotK, 7, j, *, E1_09, yDotK, 8, j, *, E1_10, yDotK, 9, j, *, E1_11, yDotK, 10, j, *, E1_12, yDotK, 11, j, final, double, errSum2, +, +, +, +, +, +, +, *, E2_01, yDotK, 0, j, *, E2_06, yDotK, 5, j, *, E2_07, yDotK, 6, j, *, E2_08, yDotK, 7, j, *, E2_09, yDotK, 8, j, *, E2_10, yDotK, 9, j, *, E2_11, yDotK, 10, j, *, E2_12, yDotK, 11, j, final, double, yScale, FastMath, max, FastMath, abs, y0, j, FastMath, abs, y1, j, final, double, tol, ==, vecAbsoluteTolerance, null, +, scalAbsoluteTolerance, *, scalRelativeTolerance, yScale, +, vecAbsoluteTolerance, j, *, vecRelativeTolerance, j, yScale, final, double, ratio1, /, errSum1, tol, +=, error1, *, ratio1, ratio1, final, double, ratio2, /, errSum2, tol, +=, error2, *, ratio2, ratio2, double, den, +, error1, *, 0.01, error2, if, <=, den, 0.0, =, den, 1.0, return, /, *, FastMath, abs, h, error1, FastMath, sqrt, *, mainSetDimension, den]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:doCopy:null#[return, new, DormandPrince853StepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:reinitialize:AbstractIntegrator+double[]+double[][]+boolean+EquationsMapper+EquationsMapper[]#[super, reinitialize, integrator, y, yDotK, forward, primaryMapper, secondaryMappers, final, int, dimension, currentState.length, =, yDotKLast, double, 3, for, int, k, 0, <, k, yDotKLast.length, ++, k, =, yDotKLast, k, double, dimension, =, v, double, 7, for, int, k, 0, <, k, v.length, ++, k, =, v, k, double, dimension, =, vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:storeTime:double#[super, storeTime, t, =, vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[if, !, vectorsInitialized, if, ==, v, null, =, v, double, 7, for, int, k, 0, <, k, 7, ++, k, =, v, k, double, interpolatedState.length, finalizeStep, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot6, yDotK, 5, i, final, double, yDot7, yDotK, 6, i, final, double, yDot8, yDotK, 7, i, final, double, yDot9, yDotK, 8, i, final, double, yDot10, yDotK, 9, i, final, double, yDot11, yDotK, 10, i, final, double, yDot12, yDotK, 11, i, final, double, yDot13, yDotK, 12, i, final, double, yDot14, yDotKLast, 0, i, final, double, yDot15, yDotKLast, 1, i, final, double, yDot16, yDotKLast, 2, i, =, v, 0, i, +, +, +, +, +, +, +, *, B_01, yDot1, *, B_06, yDot6, *, B_07, yDot7, *, B_08, yDot8, *, B_09, yDot9, *, B_10, yDot10, *, B_11, yDot11, *, B_12, yDot12, =, v, 1, i, -, yDot1, v, 0, i, =, v, 2, i, -, v, 0, i, v, 1, i, yDotK, 12, i, for, int, k, 0, <, k, D.length, ++, k, =, v, +, k, 3, i, +, +, +, +, +, +, +, +, +, +, +, *, D, k, 0, yDot1, *, D, k, 1, yDot6, *, D, k, 2, yDot7, *, D, k, 3, yDot8, *, D, k, 4, yDot9, *, D, k, 5, yDot10, *, D, k, 6, yDot11, *, D, k, 7, yDot12, *, D, k, 8, yDot13, *, D, k, 9, yDot14, *, D, k, 10, yDot15, *, D, k, 11, yDot16, =, vectorsInitialized, true, final, double, eta, -, 1, theta, final, double, twoTheta, *, 2, theta, final, double, theta2, *, theta, theta, final, double, dot1, -, 1, twoTheta, final, double, dot2, *, theta, -, 2, *, 3, theta, final, double, dot3, *, twoTheta, +, 1, *, theta, -, twoTheta, 3, final, double, dot4, *, theta2, +, 3, *, theta, -, *, 5, theta, 8, final, double, dot5, *, theta2, +, 3, *, theta, +, -, 12, *, theta, -, 15, *, 6, theta, final, double, dot6, *, theta2, theta, +, 4, *, theta, +, -, 15, *, theta, -, 18, *, 7, theta, if, &&, !=, previousState, null, <=, theta, 0.5, for, int, i, 0, <, i, interpolatedState.length, ++, i, =, interpolatedState, i, +, previousState, i, *, theta, h, +, v, 0, i, *, eta, +, v, 1, i, *, theta, +, v, 2, i, *, eta, +, v, 3, i, *, theta, +, v, 4, i, *, eta, +, v, 5, i, *, theta, v, 6, i, =, interpolatedDerivatives, i, +, +, +, +, +, +, v, 0, i, *, dot1, v, 1, i, *, dot2, v, 2, i, *, dot3, v, 3, i, *, dot4, v, 4, i, *, dot5, v, 5, i, *, dot6, v, 6, i, for, int, i, 0, <, i, interpolatedState.length, ++, i, =, interpolatedState, i, -, currentState, i, *, oneMinusThetaH, -, v, 0, i, *, theta, +, v, 1, i, *, theta, +, v, 2, i, *, eta, +, v, 3, i, *, theta, +, v, 4, i, *, eta, +, v, 5, i, *, theta, v, 6, i, =, interpolatedDerivatives, i, +, +, +, +, +, +, v, 0, i, *, dot1, v, 1, i, *, dot2, v, 2, i, *, dot3, v, 3, i, *, dot4, v, 4, i, *, dot5, v, 5, i, *, dot6, v, 6, i]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:doFinalize:null#[if, ==, currentState, null, return, double, s, final, double, yTmp, double, currentState.length, final, double, pT, getGlobalPreviousTime, for, int, j, 0, <, j, currentState.length, ++, j, =, s, +, +, +, +, +, +, +, +, *, K14_01, yDotK, 0, j, *, K14_06, yDotK, 5, j, *, K14_07, yDotK, 6, j, *, K14_08, yDotK, 7, j, *, K14_09, yDotK, 8, j, *, K14_10, yDotK, 9, j, *, K14_11, yDotK, 10, j, *, K14_12, yDotK, 11, j, *, K14_13, yDotK, 12, j, =, yTmp, j, +, currentState, j, *, h, s, integrator, computeDerivatives, +, pT, *, C14, h, yTmp, yDotKLast, 0, for, int, j, 0, <, j, currentState.length, ++, j, =, s, +, +, +, +, +, +, +, +, +, *, K15_01, yDotK, 0, j, *, K15_06, yDotK, 5, j, *, K15_07, yDotK, 6, j, *, K15_08, yDotK, 7, j, *, K15_09, yDotK, 8, j, *, K15_10, yDotK, 9, j, *, K15_11, yDotK, 10, j, *, K15_12, yDotK, 11, j, *, K15_13, yDotK, 12, j, *, K15_14, yDotKLast, 0, j, =, yTmp, j, +, currentState, j, *, h, s, integrator, computeDerivatives, +, pT, *, C15, h, yTmp, yDotKLast, 1, for, int, j, 0, <, j, currentState.length, ++, j, =, s, +, +, +, +, +, +, +, +, +, +, *, K16_01, yDotK, 0, j, *, K16_06, yDotK, 5, j, *, K16_07, yDotK, 6, j, *, K16_08, yDotK, 7, j, *, K16_09, yDotK, 8, j, *, K16_10, yDotK, 9, j, *, K16_11, yDotK, 10, j, *, K16_12, yDotK, 11, j, *, K16_13, yDotK, 12, j, *, K16_14, yDotKLast, 0, j, *, K16_15, yDotKLast, 1, j, =, yTmp, j, +, currentState, j, *, h, s, integrator, computeDerivatives, +, pT, *, C16, h, yTmp, yDotKLast, 2]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:writeExternal:ObjectOutput#[try, finalizeStep, catch, MaxCountExceededException, mcee, final, IOException, ioe, new, IOException, mcee, getLocalizedMessage, ioe, initCause, mcee, throw, ioe, final, int, dimension, ==, currentState, null, -, 1, currentState.length, out, writeInt, dimension, for, int, i, 0, <, i, dimension, ++, i, out, writeDouble, yDotKLast, 0, i, out, writeDouble, yDotKLast, 1, i, out, writeDouble, yDotKLast, 2, i, super, writeExternal, out]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:readExternal:ObjectInput#[=, yDotKLast, double, 3, final, int, dimension, in, readInt, =, yDotKLast, 0, <, dimension, 0, null, double, dimension, =, yDotKLast, 1, <, dimension, 0, null, double, dimension, =, yDotKLast, 2, <, dimension, 0, null, double, dimension, for, int, i, 0, <, i, dimension, ++, i, =, yDotKLast, 0, i, in, readDouble, =, yDotKLast, 1, i, in, readDouble, =, yDotKLast, 2, i, in, readDouble, super, readExternal, in]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:fraction:int+int#[return, getField, getOne, multiply, p, divide, q]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:fraction:double+double#[return, getField, getOne, multiply, p, divide, q]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:getSafety:null#[return, safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:setSafety:T#[=, this, safety, safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[sanityChecks, initialState, finalTime, final, T, t0, initialState, getTime, final, T, y0, equations, getMapper, mapState, initialState, setStepStart, initIntegration, equations, t0, y0, finalTime, final, boolean, forward, >, finalTime, subtract, initialState, getTime, getReal, 0, final, int, stages, +, c.length, 1, T, y, y0, final, T, yDotK, MathArrays, buildArray, getField, stages, -, 1, final, T, yTmp, MathArrays, buildArray, getField, y0.length, T, hNew, getField, getZero, boolean, firstTime, true, setIsLastStep, false, do, T, error, getField, getZero, add, 10, while, >=, error, subtract, 1.0, getReal, 0, =, y, equations, getMapper, mapState, getStepStart, =, yDotK, 0, equations, getMapper, mapDerivative, getStepStart, if, firstTime, final, T, scale, MathArrays, buildArray, getField, mainSetDimension, if, ==, vecAbsoluteTolerance, null, for, int, i, 0, <, i, scale.length, ++, i, =, scale, i, y, i, abs, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, for, int, i, 0, <, i, scale.length, ++, i, =, scale, i, y, i, abs, multiply, vecRelativeTolerance, i, add, vecAbsoluteTolerance, i, =, hNew, initializeStep, forward, getOrder, scale, getStepStart, equations, getMapper, =, firstTime, false, setStepSize, hNew, if, forward, if, >=, getStepStart, getTime, add, getStepSize, subtract, finalTime, getReal, 0, setStepSize, finalTime, subtract, getStepStart, getTime, if, <=, getStepStart, getTime, add, getStepSize, subtract, finalTime, getReal, 0, setStepSize, finalTime, subtract, getStepStart, getTime, for, int, k, 1, <, k, stages, ++, k, for, int, j, 0, <, j, y0.length, ++, j, T, sum, yDotK, 0, j, multiply, a, -, k, 1, 0, for, int, l, 1, <, l, k, ++, l, =, sum, sum, add, yDotK, l, j, multiply, a, -, k, 1, l, =, yTmp, j, y, j, add, getStepSize, multiply, sum, =, yDotK, k, computeDerivatives, getStepStart, getTime, add, getStepSize, multiply, c, -, k, 1, yTmp, for, int, j, 0, <, j, y0.length, ++, j, T, sum, yDotK, 0, j, multiply, b, 0, for, int, l, 1, <, l, stages, ++, l, =, sum, sum, add, yDotK, l, j, multiply, b, l, =, yTmp, j, y, j, add, getStepSize, multiply, sum, =, error, estimateError, yDotK, y, yTmp, getStepSize, if, >=, error, subtract, 1.0, getReal, 0, final, T, factor, MathUtils, min, maxGrowth, MathUtils, max, minReduction, safety, multiply, error, pow, exp, =, hNew, filterStep, getStepSize, multiply, factor, forward, false, final, T, stepEnd, getStepStart, getTime, add, getStepSize, final, T, yDotTmp, >=, fsal, 0, yDotK, fsal, computeDerivatives, stepEnd, yTmp, final, FieldODEStateAndDerivative, T, stateTmp, new, FieldODEStateAndDerivative, T, stepEnd, yTmp, yDotTmp, System, arraycopy, yTmp, 0, y, 0, y0.length, setStepStart, acceptStep, createInterpolator, forward, yDotK, getStepStart, stateTmp, equations, getMapper, finalTime, if, !, isLastStep, final, T, factor, MathUtils, min, maxGrowth, MathUtils, max, minReduction, safety, multiply, error, pow, exp, final, T, scaledH, getStepSize, multiply, factor, final, T, nextT, getStepStart, getTime, add, scaledH, final, boolean, nextIsLast, forward, >=, nextT, subtract, finalTime, getReal, 0, <=, nextT, subtract, finalTime, getReal, 0, =, hNew, filterStep, scaledH, forward, nextIsLast, final, T, filteredNextT, getStepStart, getTime, add, hNew, final, boolean, filteredNextIsLast, forward, >=, filteredNextT, subtract, finalTime, getReal, 0, <=, filteredNextT, subtract, finalTime, getReal, 0, if, filteredNextIsLast, =, hNew, finalTime, subtract, getStepStart, getTime, !, isLastStep, final, FieldODEStateAndDerivative, T, finalState, getStepStart, resetInternalState, return, finalState]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:getMinReduction:null#[return, minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:setMinReduction:T#[=, this, minReduction, minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:getMaxGrowth:null#[return, maxGrowth]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:setMaxGrowth:T#[=, this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:getSafety:null#[return, safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:setSafety:double#[=, this, safety, safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:integrate:ExpandableStatefulODE+double#[sanityChecks, equations, t, setEquations, equations, final, boolean, forward, >, t, equations, getTime, final, double, y0, equations, getCompleteState, final, double, y, y0, clone, final, int, stages, +, c.length, 1, final, double, yDotK, double, stages, y.length, final, double, yTmp, y0, clone, final, double, yDotTmp, double, y.length, final, RungeKuttaStepInterpolator, interpolator, RungeKuttaStepInterpolator, prototype, copy, interpolator, reinitialize, this, yTmp, yDotK, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, interpolator, storeTime, equations, getTime, =, stepStart, equations, getTime, double, hNew, 0, boolean, firstTime, true, initIntegration, equations, getTime, y0, t, =, isLastStep, false, do, interpolator, shift, double, error, 10, while, >=, error, 1.0, if, ||, firstTime, !, fsal, computeDerivatives, stepStart, y, yDotK, 0, if, firstTime, final, double, scale, double, mainSetDimension, if, ==, vecAbsoluteTolerance, null, for, int, i, 0, <, i, scale.length, ++, i, =, scale, i, +, scalAbsoluteTolerance, *, scalRelativeTolerance, FastMath, abs, y, i, for, int, i, 0, <, i, scale.length, ++, i, =, scale, i, +, vecAbsoluteTolerance, i, *, vecRelativeTolerance, i, FastMath, abs, y, i, =, hNew, initializeStep, forward, getOrder, scale, stepStart, y, yDotK, 0, yTmp, yDotK, 1, =, firstTime, false, =, stepSize, hNew, if, forward, if, >=, +, stepStart, stepSize, t, =, stepSize, -, t, stepStart, if, <=, +, stepStart, stepSize, t, =, stepSize, -, t, stepStart, for, int, k, 1, <, k, stages, ++, k, for, int, j, 0, <, j, y0.length, ++, j, double, sum, *, a, -, k, 1, 0, yDotK, 0, j, for, int, l, 1, <, l, k, ++, l, +=, sum, *, a, -, k, 1, l, yDotK, l, j, =, yTmp, j, +, y, j, *, stepSize, sum, computeDerivatives, +, stepStart, *, c, -, k, 1, stepSize, yTmp, yDotK, k, for, int, j, 0, <, j, y0.length, ++, j, double, sum, *, b, 0, yDotK, 0, j, for, int, l, 1, <, l, stages, ++, l, +=, sum, *, b, l, yDotK, l, j, =, yTmp, j, +, y, j, *, stepSize, sum, =, error, estimateError, yDotK, y, yTmp, stepSize, if, >=, error, 1.0, final, double, factor, FastMath, min, maxGrowth, FastMath, max, minReduction, *, safety, FastMath, pow, error, exp, =, hNew, filterStep, *, stepSize, factor, forward, false, interpolator, storeTime, +, stepStart, stepSize, System, arraycopy, yTmp, 0, y, 0, y0.length, System, arraycopy, yDotK, -, stages, 1, 0, yDotTmp, 0, y0.length, =, stepStart, acceptStep, interpolator, y, yDotTmp, t, System, arraycopy, y, 0, yTmp, 0, y.length, if, !, isLastStep, interpolator, storeTime, stepStart, if, fsal, System, arraycopy, yDotTmp, 0, yDotK, 0, 0, y0.length, final, double, factor, FastMath, min, maxGrowth, FastMath, max, minReduction, *, safety, FastMath, pow, error, exp, final, double, scaledH, *, stepSize, factor, final, double, nextT, +, stepStart, scaledH, final, boolean, nextIsLast, forward, >=, nextT, t, <=, nextT, t, =, hNew, filterStep, scaledH, forward, nextIsLast, final, double, filteredNextT, +, stepStart, hNew, final, boolean, filteredNextIsLast, forward, >=, filteredNextT, t, <=, filteredNextT, t, if, filteredNextIsLast, =, hNew, -, t, stepStart, !, isLastStep, equations, setTime, stepStart, equations, setCompleteState, y, resetInternalState]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:getMinReduction:null#[return, minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:setMinReduction:double#[=, this, minReduction, minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:getMaxGrowth:null#[return, maxGrowth]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:setMaxGrowth:double#[=, this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:getC:null#[return, MathArrays, buildArray, getField, 0]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:getA:null#[return, MathArrays, buildArray, getField, 0, 0]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 1, =, b, 0, getField, getOne, return, b]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, EulerFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:EulerFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, EulerFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:EulerFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, =, interpolatedState, previousStateLinearCombination, thetaH, =, interpolatedDerivatives, derivativeLinearCombination, time, getField, getOne, =, interpolatedState, currentStateLinearCombination, oneMinusThetaH, negate, =, interpolatedDerivatives, derivativeLinearCombination, time, getField, getOne, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:EulerStepInterpolator:doCopy:null#[return, new, EulerStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:EulerStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[if, &&, !=, previousState, null, <=, theta, 0.5, for, int, i, 0, <, i, interpolatedState.length, ++, i, =, interpolatedState, i, +, previousState, i, *, theta, h, yDotK, 0, i, System, arraycopy, yDotK, 0, 0, interpolatedDerivatives, 0, interpolatedDerivatives.length, for, int, i, 0, <, i, interpolatedState.length, ++, i, =, interpolatedState, i, -, currentState, i, *, oneMinusThetaH, yDotK, 0, i, System, arraycopy, yDotK, 0, 0, interpolatedDerivatives, 0, interpolatedDerivatives.length]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:getC:null#[final, T, c, MathArrays, buildArray, getField, 3, =, c, 0, fraction, 1, 2, =, c, 1, c, 0, =, c, 2, getField, getOne, return, c]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:getA:null#[final, T, two, getField, getZero, add, 2, final, T, sqrtTwo, two, sqrt, final, T, a, MathArrays, buildArray, getField, 3, -, 1, for, int, i, 0, <, i, a.length, ++, i, =, a, i, MathArrays, buildArray, getField, +, i, 1, =, a, 0, 0, fraction, 1, 2, =, a, 1, 0, sqrtTwo, subtract, 1, multiply, 0.5, =, a, 1, 1, sqrtTwo, subtract, 2, multiply, -, 0.5, =, a, 2, 0, getField, getZero, =, a, 2, 1, sqrtTwo, multiply, -, 0.5, =, a, 2, 2, sqrtTwo, add, 2, multiply, 0.5, return, a]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:getB:null#[final, T, two, getField, getZero, add, 2, final, T, sqrtTwo, two, sqrt, final, T, b, MathArrays, buildArray, getField, 4, =, b, 0, fraction, 1, 6, =, b, 1, sqrtTwo, subtract, 2, divide, -, 6, =, b, 2, sqrtTwo, add, 2, divide, 6, =, b, 3, b, 0, return, b]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, GillFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:GillFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, GillFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:GillFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, one, time, getField, getOne, final, T, twoTheta, theta, multiply, 2, final, T, fourTheta2, twoTheta, multiply, twoTheta, final, T, coeffDot1, theta, multiply, twoTheta, subtract, 3, add, 1, final, T, cDot23, twoTheta, multiply, one, subtract, theta, final, T, coeffDot2, cDot23, multiply, one_minus_inv_sqrt_2, final, T, coeffDot3, cDot23, multiply, one_plus_inv_sqrt_2, final, T, coeffDot4, theta, multiply, twoTheta, subtract, 1, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, s, thetaH, divide, 6.0, final, T, c23, s, multiply, theta, multiply, 6, subtract, fourTheta2, final, T, coeff1, s, multiply, fourTheta2, subtract, theta, multiply, 9, add, 6, final, T, coeff2, c23, multiply, one_minus_inv_sqrt_2, final, T, coeff3, c23, multiply, one_plus_inv_sqrt_2, final, T, coeff4, s, multiply, fourTheta2, subtract, theta, multiply, 3, =, interpolatedState, previousStateLinearCombination, coeff1, coeff2, coeff3, coeff4, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, final, T, s, oneMinusThetaH, divide, -, 6.0, final, T, c23, s, multiply, twoTheta, add, 2, subtract, fourTheta2, final, T, coeff1, s, multiply, fourTheta2, subtract, theta, multiply, 5, add, 1, final, T, coeff2, c23, multiply, one_minus_inv_sqrt_2, final, T, coeff3, c23, multiply, one_plus_inv_sqrt_2, final, T, coeff4, s, multiply, fourTheta2, add, theta, add, 1, =, interpolatedState, currentStateLinearCombination, coeff1, coeff2, coeff3, coeff4, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:GillStepInterpolator:doCopy:null#[return, new, GillStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:GillStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, double, twoTheta, *, 2, theta, final, double, fourTheta2, *, twoTheta, twoTheta, final, double, coeffDot1, +, *, theta, -, twoTheta, 3, 1, final, double, cDot23, *, twoTheta, -, 1, theta, final, double, coeffDot2, *, cDot23, ONE_MINUS_INV_SQRT_2, final, double, coeffDot3, *, cDot23, ONE_PLUS_INV_SQRT_2, final, double, coeffDot4, *, theta, -, twoTheta, 1, if, &&, !=, previousState, null, <=, theta, 0.5, final, double, s, /, *, theta, h, 6.0, final, double, c23, *, s, -, *, 6, theta, fourTheta2, final, double, coeff1, *, s, +, -, 6, *, 9, theta, fourTheta2, final, double, coeff2, *, c23, ONE_MINUS_INV_SQRT_2, final, double, coeff3, *, c23, ONE_PLUS_INV_SQRT_2, final, double, coeff4, *, s, +, *, -, 3, theta, fourTheta2, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, final, double, yDot3, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, =, interpolatedState, i, +, +, +, +, previousState, i, *, coeff1, yDot1, *, coeff2, yDot2, *, coeff3, yDot3, *, coeff4, yDot4, =, interpolatedDerivatives, i, +, +, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2, *, coeffDot3, yDot3, *, coeffDot4, yDot4, final, double, s, /, oneMinusThetaH, 6.0, final, double, c23, *, s, -, +, 2, twoTheta, fourTheta2, final, double, coeff1, *, s, +, -, 1, *, 5, theta, fourTheta2, final, double, coeff2, *, c23, ONE_MINUS_INV_SQRT_2, final, double, coeff3, *, c23, ONE_PLUS_INV_SQRT_2, final, double, coeff4, *, s, +, 1, theta, fourTheta2, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, final, double, yDot3, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, =, interpolatedState, i, -, -, -, -, currentState, i, *, coeff1, yDot1, *, coeff2, yDot2, *, coeff3, yDot3, *, coeff4, yDot4, =, interpolatedDerivatives, i, +, +, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2, *, coeffDot3, yDot3, *, coeffDot4, yDot4]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setStabilityCheck:boolean+int+int+double#[=, this, performTest, performStabilityCheck, =, this, maxIter, <=, maxNumIter, 0, 2, maxNumIter, =, this, maxChecks, <=, maxNumChecks, 0, 1, maxNumChecks, if, ||, <, stepsizeReductionFactor, 0.0001, >, stepsizeReductionFactor, 0.9999, =, this, stabilityReduction, 0.5, =, this, stabilityReduction, stepsizeReductionFactor]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setControlFactors:double+double+double+double#[if, ||, <, control1, 0.0001, >, control1, 0.9999, =, this, stepControl1, 0.65, =, this, stepControl1, control1, if, ||, <, control2, 0.0001, >, control2, 0.9999, =, this, stepControl2, 0.94, =, this, stepControl2, control2, if, ||, <, control3, 0.0001, >, control3, 0.9999, =, this, stepControl3, 0.02, =, this, stepControl3, control3, if, ||, <, control4, 1.0001, >, control4, 999.9, =, this, stepControl4, 4.0, =, this, stepControl4, control4]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setOrderControl:int+double+double#[if, ||, <=, maximalOrder, 6, !=, %, maximalOrder, 2, 0, =, this, maxOrder, 18, if, ||, <, control1, 0.0001, >, control1, 0.9999, =, this, orderControl1, 0.8, =, this, orderControl1, control1, if, ||, <, control2, 0.0001, >, control2, 0.9999, =, this, orderControl2, 0.9, =, this, orderControl2, control2, initializeArrays]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:addStepHandler:StepHandler#[super, addStepHandler, handler, initializeArrays]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:addEventHandler:EventHandler+double+double+int+UnivariateSolver#[super, addEventHandler, function, maxCheckInterval, convergence, maxIterationCount, solver, initializeArrays]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:initializeArrays:null#[final, int, size, /, maxOrder, 2, if, ||, ==, sequence, null, !=, sequence.length, size, =, sequence, int, size, =, costPerStep, int, size, =, coeff, double, size, =, costPerTimeUnit, double, size, =, optimalStep, double, size, for, int, k, 0, <, k, size, ++, k, =, sequence, k, +, *, 4, k, 2, =, costPerStep, 0, +, sequence, 0, 1, for, int, k, 1, <, k, size, ++, k, =, costPerStep, k, +, costPerStep, -, k, 1, sequence, k, for, int, k, 0, <, k, size, ++, k, =, coeff, k, >, k, 0, double, k, null, for, int, l, 0, <, l, k, ++, l, final, double, ratio, /, double, sequence, k, sequence, -, k, l, 1, =, coeff, k, l, /, 1.0, -, *, ratio, ratio, 1.0]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setInterpolationControl:boolean+int#[=, this, useInterpolationError, useInterpolationErrorForControl, if, ||, <=, mudifControlParameter, 0, >=, mudifControlParameter, 7, =, this, mudif, 4, =, this, mudif, mudifControlParameter]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:rescale:double[]+double[]+double[]#[if, ==, vecAbsoluteTolerance, null, for, int, i, 0, <, i, scale.length, ++, i, final, double, yi, FastMath, max, FastMath, abs, y1, i, FastMath, abs, y2, i, =, scale, i, +, scalAbsoluteTolerance, *, scalRelativeTolerance, yi, for, int, i, 0, <, i, scale.length, ++, i, final, double, yi, FastMath, max, FastMath, abs, y1, i, FastMath, abs, y2, i, =, scale, i, +, vecAbsoluteTolerance, i, *, vecRelativeTolerance, i, yi]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:tryStep:double+double[]+double+int+double[]+double[][]+double[]+double[]+double[]#[final, int, n, sequence, k, final, double, subStep, /, step, n, final, double, subStep2, *, 2, subStep, double, t, +, t0, subStep, for, int, i, 0, <, i, y0.length, ++, i, =, yTmp, i, y0, i, =, yEnd, i, +, y0, i, *, subStep, f, 0, i, computeDerivatives, t, yEnd, f, 1, for, int, j, 1, <, j, n, ++, j, if, ==, *, 2, j, n, System, arraycopy, yEnd, 0, yMiddle, 0, y0.length, +=, t, subStep, for, int, i, 0, <, i, y0.length, ++, i, final, double, middle, yEnd, i, =, yEnd, i, +, yTmp, i, *, subStep2, f, j, i, =, yTmp, i, middle, computeDerivatives, t, yEnd, f, +, j, 1, if, &&, performTest, <=, j, maxChecks, <, k, maxIter, double, initialNorm, 0.0, for, int, l, 0, <, l, scale.length, ++, l, final, double, ratio, /, f, 0, l, scale, l, +=, initialNorm, *, ratio, ratio, double, deltaNorm, 0.0, for, int, l, 0, <, l, scale.length, ++, l, final, double, ratio, /, -, f, +, j, 1, l, f, 0, l, scale, l, +=, deltaNorm, *, ratio, ratio, if, >, deltaNorm, *, 4, FastMath, max, 1.0e-15, initialNorm, return, false, for, int, i, 0, <, i, y0.length, ++, i, =, yEnd, i, *, 0.5, +, yTmp, i, yEnd, i, *, subStep, f, n, i, return, true]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:extrapolate:int+int+double[][]+double[]#[for, int, j, 1, <, j, k, ++, j, for, int, i, 0, <, i, last.length, ++, i, =, diag, -, k, j, 1, i, +, diag, -, k, j, i, *, coeff, +, k, offset, -, j, 1, -, diag, -, k, j, i, diag, -, k, j, 1, i, for, int, i, 0, <, i, last.length, ++, i, =, last, i, +, diag, 0, i, *, coeff, +, k, offset, -, k, 1, -, diag, 0, i, last, i]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:integrate:ExpandableStatefulODE+double#[sanityChecks, equations, t, setEquations, equations, final, boolean, forward, >, t, equations, getTime, final, double, y0, equations, getCompleteState, final, double, y, y0, clone, final, double, yDot0, double, y.length, final, double, y1, double, y.length, final, double, yTmp, double, y.length, final, double, yTmpDot, double, y.length, final, double, diagonal, double, -, sequence.length, 1, final, double, y1Diag, double, -, sequence.length, 1, for, int, k, 0, <, k, -, sequence.length, 1, ++, k, =, diagonal, k, double, y.length, =, y1Diag, k, double, y.length, final, double, fk, double, sequence.length, for, int, k, 0, <, k, sequence.length, ++, k, =, fk, k, double, +, sequence, k, 1, =, fk, k, 0, yDot0, for, int, l, 0, <, l, sequence, k, ++, l, =, fk, k, +, l, 1, double, y0.length, if, !=, y, y0, System, arraycopy, y0, 0, y, 0, y0.length, final, double, yDot1, double, y0.length, final, double, yMidDots, double, +, 1, *, 2, sequence.length, y0.length, final, double, scale, double, mainSetDimension, rescale, y, y, scale, final, double, tol, ==, vecRelativeTolerance, null, scalRelativeTolerance, vecRelativeTolerance, 0, final, double, log10R, FastMath, log10, FastMath, max, 1.0e-10, tol, int, targetIter, FastMath, max, 1, FastMath, min, -, sequence.length, 2, int, FastMath, floor, -, 0.5, *, 0.6, log10R, final, AbstractStepInterpolator, interpolator, new, GraggBulirschStoerStepInterpolator, y, yDot0, y1, yDot1, yMidDots, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, interpolator, storeTime, equations, getTime, =, stepStart, equations, getTime, double, hNew, 0, double, maxError, Double.MAX_VALUE, boolean, previousRejected, false, boolean, firstTime, true, boolean, newStep, true, boolean, firstStepAlreadyComputed, false, initIntegration, equations, getTime, y0, t, =, costPerTimeUnit, 0, 0, =, isLastStep, false, do, double, error, boolean, reject, false, if, newStep, interpolator, shift, if, !, firstStepAlreadyComputed, computeDerivatives, stepStart, y, yDot0, if, firstTime, =, hNew, initializeStep, forward, +, *, 2, targetIter, 1, scale, stepStart, y, yDot0, yTmp, yTmpDot, =, newStep, false, =, stepSize, hNew, if, ||, &&, forward, >, +, stepStart, stepSize, t, &&, !, forward, <, +, stepStart, stepSize, t, =, stepSize, -, t, stepStart, final, double, nextT, +, stepStart, stepSize, =, isLastStep, forward, >=, nextT, t, <=, nextT, t, int, k, -, 1, for, boolean, loop, true, loop, ++, k, if, !, tryStep, stepStart, y, stepSize, k, scale, fk, k, ==, k, 0, yMidDots, 0, diagonal, -, k, 1, ==, k, 0, y1, y1Diag, -, k, 1, yTmp, =, hNew, FastMath, abs, filterStep, *, stepSize, stabilityReduction, forward, false, =, reject, true, =, loop, false, if, >, k, 0, extrapolate, 0, k, y1Diag, y1, rescale, y, y1, scale, =, error, 0, for, int, j, 0, <, j, mainSetDimension, ++, j, final, double, e, /, FastMath, abs, -, y1, j, y1Diag, 0, j, scale, j, +=, error, *, e, e, =, error, FastMath, sqrt, /, error, mainSetDimension, if, ||, >, error, 1.0e15, &&, >, k, 1, >, error, maxError, =, hNew, FastMath, abs, filterStep, *, stepSize, stabilityReduction, forward, false, =, reject, true, =, loop, false, =, maxError, FastMath, max, *, 4, error, 1.0, final, double, exp, /, 1.0, +, *, 2, k, 1, double, fac, /, stepControl2, FastMath, pow, /, error, stepControl1, exp, final, double, pow, FastMath, pow, stepControl3, exp, =, fac, FastMath, max, /, pow, stepControl4, FastMath, min, /, 1, pow, fac, =, optimalStep, k, FastMath, abs, filterStep, *, stepSize, fac, forward, true, =, costPerTimeUnit, k, /, costPerStep, k, optimalStep, k, switch, -, k, targetIter, case, -, 1, if, &&, >, targetIter, 1, !, previousRejected, if, <=, error, 1.0, =, loop, false, final, double, ratio, /, *, double, sequence, targetIter, sequence, +, targetIter, 1, *, sequence, 0, sequence, 0, if, >, error, *, ratio, ratio, =, reject, true, =, loop, false, =, targetIter, k, if, &&, >, targetIter, 1, <, costPerTimeUnit, -, targetIter, 1, *, orderControl1, costPerTimeUnit, targetIter, --, targetIter, =, hNew, optimalStep, targetIter, break, case, 0, if, <=, error, 1.0, =, loop, false, final, double, ratio, /, double, sequence, +, k, 1, sequence, 0, if, >, error, *, ratio, ratio, =, reject, true, =, loop, false, if, &&, >, targetIter, 1, <, costPerTimeUnit, -, targetIter, 1, *, orderControl1, costPerTimeUnit, targetIter, --, targetIter, =, hNew, optimalStep, targetIter, break, case, 1, if, >, error, 1.0, =, reject, true, if, &&, >, targetIter, 1, <, costPerTimeUnit, -, targetIter, 1, *, orderControl1, costPerTimeUnit, targetIter, --, targetIter, =, hNew, optimalStep, targetIter, =, loop, false, break, default, if, &&, ||, firstTime, isLastStep, <=, error, 1.0, =, loop, false, break, if, !, reject, computeDerivatives, +, stepStart, stepSize, y1, yDot1, double, hInt, getMaxStep, if, !, reject, for, int, j, 1, <=, j, k, ++, j, extrapolate, 0, j, diagonal, yMidDots, 0, final, int, mu, +, -, *, 2, k, mudif, 3, for, int, l, 0, <, l, mu, ++, l, final, int, l2, /, l, 2, double, factor, FastMath, pow, *, 0.5, sequence, l2, l, int, middleIndex, /, fk, l2, length, 2, for, int, i, 0, <, i, y0.length, ++, i, =, yMidDots, +, l, 1, i, *, factor, fk, l2, +, middleIndex, l, i, for, int, j, 1, <=, j, -, k, l2, ++, j, =, factor, FastMath, pow, *, 0.5, sequence, +, j, l2, l, =, middleIndex, /, fk, +, l2, j, length, 2, for, int, i, 0, <, i, y0.length, ++, i, =, diagonal, -, j, 1, i, *, factor, fk, +, l2, j, +, middleIndex, l, i, extrapolate, l2, j, diagonal, yMidDots, +, l, 1, for, int, i, 0, <, i, y0.length, ++, i, *=, yMidDots, +, l, 1, i, stepSize, for, int, j, /, +, l, 1, 2, <=, j, k, ++, j, for, int, m, -, fk, j, length, 1, >=, m, *, 2, +, l, 1, --, m, for, int, i, 0, <, i, y0.length, ++, i, -=, fk, j, m, i, fk, j, -, m, 2, i, if, >=, mu, 0, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, GraggBulirschStoerStepInterpolator, interpolator, gbsInterpolator, computeCoefficients, mu, stepSize, if, useInterpolationError, final, double, interpError, gbsInterpolator, estimateError, scale, =, hInt, FastMath, abs, /, stepSize, FastMath, max, FastMath, pow, interpError, /, 1.0, +, mu, 4, 0.01, if, >, interpError, 10.0, =, hNew, hInt, =, reject, true, if, !, reject, interpolator, storeTime, +, stepStart, stepSize, =, stepStart, acceptStep, interpolator, y1, yDot1, t, interpolator, storeTime, stepStart, System, arraycopy, y1, 0, y, 0, y0.length, System, arraycopy, yDot1, 0, yDot0, 0, y0.length, =, firstStepAlreadyComputed, true, int, optimalIter, if, ==, k, 1, =, optimalIter, 2, if, previousRejected, =, optimalIter, 1, if, <=, k, targetIter, =, optimalIter, k, if, <, costPerTimeUnit, -, k, 1, *, orderControl1, costPerTimeUnit, k, =, optimalIter, -, k, 1, if, <, costPerTimeUnit, k, *, orderControl2, costPerTimeUnit, -, k, 1, =, optimalIter, FastMath, min, +, k, 1, -, sequence.length, 2, =, optimalIter, -, k, 1, if, &&, >, k, 2, <, costPerTimeUnit, -, k, 2, *, orderControl1, costPerTimeUnit, -, k, 1, =, optimalIter, -, k, 2, if, <, costPerTimeUnit, k, *, orderControl2, costPerTimeUnit, optimalIter, =, optimalIter, FastMath, min, k, -, sequence.length, 2, if, previousRejected, =, targetIter, FastMath, min, optimalIter, k, =, hNew, FastMath, min, FastMath, abs, stepSize, optimalStep, targetIter, if, <=, optimalIter, k, =, hNew, optimalStep, optimalIter, if, &&, <, k, targetIter, <, costPerTimeUnit, k, *, orderControl2, costPerTimeUnit, -, k, 1, =, hNew, filterStep, /, *, optimalStep, k, costPerStep, +, optimalIter, 1, costPerStep, k, forward, false, =, hNew, filterStep, /, *, optimalStep, k, costPerStep, optimalIter, costPerStep, k, forward, false, =, targetIter, optimalIter, =, newStep, true, =, hNew, FastMath, min, hNew, hInt, if, !, forward, =, hNew, -, hNew, =, firstTime, false, if, reject, =, isLastStep, false, =, previousRejected, true, =, previousRejected, false, !, isLastStep, equations, setTime, stepStart, equations, setCompleteState, y, resetInternalState]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:resetTables:int#[if, <, maxDegree, 0, =, polynomials, null, =, errfac, null, =, currentDegree, -, 1, final, double, newPols, double, +, maxDegree, 1, if, !=, polynomials, null, System, arraycopy, polynomials, 0, newPols, 0, polynomials.length, for, int, i, polynomials.length, <, i, newPols.length, ++, i, =, newPols, i, double, currentState.length, for, int, i, 0, <, i, newPols.length, ++, i, =, newPols, i, double, currentState.length, =, polynomials, newPols, if, <=, maxDegree, 4, =, errfac, null, =, errfac, double, -, maxDegree, 4, for, int, i, 0, <, i, errfac.length, ++, i, final, int, ip5, +, i, 5, =, errfac, i, /, 1.0, *, ip5, ip5, final, double, e, *, 0.5, FastMath, sqrt, /, double, +, i, 1, ip5, for, int, j, 0, <=, j, i, ++, j, *=, errfac, i, /, e, +, j, 1, =, currentDegree, 0]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:doCopy:null#[return, new, GraggBulirschStoerStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:computeCoefficients:int+double#[if, ||, ==, polynomials, null, <=, polynomials.length, +, mu, 4, resetTables, +, mu, 4, =, currentDegree, +, mu, 4, for, int, i, 0, <, i, currentState.length, ++, i, final, double, yp0, *, h, y0Dot, i, final, double, yp1, *, h, y1Dot, i, final, double, ydiff, -, y1, i, currentState, i, final, double, aspl, -, ydiff, yp1, final, double, bspl, -, yp0, ydiff, =, polynomials, 0, i, currentState, i, =, polynomials, 1, i, ydiff, =, polynomials, 2, i, aspl, =, polynomials, 3, i, bspl, if, <, mu, 0, return, final, double, ph0, +, *, 0.5, +, currentState, i, y1, i, *, 0.125, +, aspl, bspl, =, polynomials, 4, i, *, 16, -, yMidDots, 0, i, ph0, if, >, mu, 0, final, double, ph1, +, ydiff, *, 0.25, -, aspl, bspl, =, polynomials, 5, i, *, 16, -, yMidDots, 1, i, ph1, if, >, mu, 1, final, double, ph2, -, yp1, yp0, =, polynomials, 6, i, *, 16, +, -, yMidDots, 2, i, ph2, polynomials, 4, i, if, >, mu, 2, final, double, ph3, *, 6, -, bspl, aspl, =, polynomials, 7, i, *, 16, +, -, yMidDots, 3, i, ph3, *, 3, polynomials, 5, i, for, int, j, 4, <=, j, mu, ++, j, final, double, fac1, *, 0.5, j, -, j, 1, final, double, fac2, *, 2, fac1, -, j, 2, -, j, 3, =, polynomials, +, j, 4, i, *, 16, -, +, yMidDots, j, i, *, fac1, polynomials, +, j, 2, i, *, fac2, polynomials, j, i]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:estimateError:double[]#[double, error, 0, if, >=, currentDegree, 5, for, int, i, 0, <, i, scale.length, ++, i, final, double, e, /, polynomials, currentDegree, i, scale, i, +=, error, *, e, e, =, error, *, FastMath, sqrt, /, error, scale.length, errfac, -, currentDegree, 5, return, error]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, int, dimension, currentState.length, final, double, oneMinusTheta, -, 1.0, theta, final, double, theta05, -, theta, 0.5, final, double, tOmT, *, theta, oneMinusTheta, final, double, t4, *, tOmT, tOmT, final, double, t4Dot, *, 2, tOmT, -, 1, *, 2, theta, final, double, dot1, /, 1.0, h, final, double, dot2, /, *, theta, -, 2, *, 3, theta, h, final, double, dot3, /, +, *, -, *, 3, theta, 4, theta, 1, h, for, int, i, 0, <, i, dimension, ++, i, final, double, p0, polynomials, 0, i, final, double, p1, polynomials, 1, i, final, double, p2, polynomials, 2, i, final, double, p3, polynomials, 3, i, =, interpolatedState, i, +, p0, *, theta, +, p1, *, oneMinusTheta, +, *, p2, theta, *, p3, oneMinusTheta, =, interpolatedDerivatives, i, +, +, *, dot1, p1, *, dot2, p2, *, dot3, p3, if, >, currentDegree, 3, double, cDot, 0, double, c, polynomials, currentDegree, i, for, int, j, -, currentDegree, 1, >, j, 3, --, j, final, double, d, /, 1.0, -, j, 3, =, cDot, *, d, +, *, theta05, cDot, c, =, c, +, polynomials, j, i, *, c, d, theta05, +=, interpolatedState, i, *, t4, c, +=, interpolatedDerivatives, i, /, +, *, t4, cDot, *, t4Dot, c, h, if, ==, h, 0, System, arraycopy, yMidDots, 1, 0, interpolatedDerivatives, 0, dimension]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:writeExternal:ObjectOutput#[final, int, dimension, ==, currentState, null, -, 1, currentState.length, writeBaseExternal, out, out, writeInt, currentDegree, for, int, k, 0, <=, k, currentDegree, ++, k, for, int, l, 0, <, l, dimension, ++, l, out, writeDouble, polynomials, k, l]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:readExternal:ObjectInput#[final, double, t, readBaseExternal, in, final, int, dimension, ==, currentState, null, -, 1, currentState.length, final, int, degree, in, readInt, resetTables, degree, =, currentDegree, degree, for, int, k, 0, <=, k, currentDegree, ++, k, for, int, l, 0, <, l, dimension, ++, l, =, polynomials, k, l, in, readDouble, setInterpolatedTime, t]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getC:null#[final, T, c, MathArrays, buildArray, getField, 6, =, c, 0, fraction, 2, 9, =, c, 1, fraction, 1, 3, =, c, 2, fraction, 1, 2, =, c, 3, fraction, 3, 5, =, c, 4, getField, getOne, =, c, 5, getField, getOne, return, c]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getA:null#[final, T, a, MathArrays, buildArray, getField, 6, -, 1, for, int, i, 0, <, i, a.length, ++, i, =, a, i, MathArrays, buildArray, getField, +, i, 1, =, a, 0, 0, fraction, 2, 9, =, a, 1, 0, fraction, 1, 12, =, a, 1, 1, fraction, 1, 4, =, a, 2, 0, fraction, 1, 8, =, a, 2, 1, getField, getZero, =, a, 2, 2, fraction, 3, 8, =, a, 3, 0, fraction, 91, 500, =, a, 3, 1, fraction, -, 27, 100, =, a, 3, 2, fraction, 78, 125, =, a, 3, 3, fraction, 8, 125, =, a, 4, 0, fraction, -, 11, 20, =, a, 4, 1, fraction, 27, 20, =, a, 4, 2, fraction, 12, 5, =, a, 4, 3, fraction, -, 36, 5, =, a, 4, 4, fraction, 5, 1, =, a, 5, 0, fraction, 1, 12, =, a, 5, 1, getField, getZero, =, a, 5, 2, fraction, 27, 32, =, a, 5, 3, fraction, -, 4, 3, =, a, 5, 4, fraction, 125, 96, =, a, 5, 5, fraction, 5, 48, return, a]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 7, =, b, 0, fraction, 1, 12, =, b, 1, getField, getZero, =, b, 2, fraction, 27, 32, =, b, 3, fraction, -, 4, 3, =, b, 4, fraction, 125, 96, =, b, 5, fraction, 5, 48, =, b, 6, getField, getZero, return, b]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, HighamHall54FieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getOrder:null#[return, 5]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:estimateError:T[][]+T[]+T[]+T#[T, error, getField, getZero, for, int, j, 0, <, j, mainSetDimension, ++, j, T, errSum, yDotK, 0, j, multiply, e, 0, for, int, l, 1, <, l, e.length, ++, l, =, errSum, errSum, add, yDotK, l, j, multiply, e, l, final, T, yScale, MathUtils, max, y0, j, abs, y1, j, abs, final, T, tol, ==, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, j, add, vecAbsoluteTolerance, j, final, T, ratio, h, multiply, errSum, divide, tol, =, error, error, add, ratio, multiply, ratio, return, error, divide, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, HighamHall54FieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, bDot0, theta, multiply, theta, multiply, theta, multiply, -, 10.0, add, 16.0, add, /, -, 15.0, 2.0, add, 1, final, T, bDot1, time, getField, getZero, final, T, bDot2, theta, multiply, theta, multiply, theta, multiply, /, 135.0, 2.0, add, /, -, 729.0, 8.0, add, /, 459.0, 16.0, final, T, bDot3, theta, multiply, theta, multiply, theta, multiply, -, 120.0, add, 152.0, add, -, 44.0, final, T, bDot4, theta, multiply, theta, multiply, theta, multiply, /, 125.0, 2.0, add, /, -, 625.0, 8.0, add, /, 375.0, 16.0, final, T, bDot5, theta, multiply, /, 5.0, 8.0, multiply, theta, multiply, 2, subtract, 1, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, b0, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, /, -, 5.0, 2.0, add, /, 16.0, 3.0, add, /, -, 15.0, 4.0, add, 1, final, T, b1, time, getField, getZero, final, T, b2, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, /, 135.0, 8.0, add, /, -, 243.0, 8.0, add, /, 459.0, 32.0, final, T, b3, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, -, 30.0, add, /, 152.0, 3.0, add, -, 22.0, final, T, b4, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, /, 125.0, 8.0, add, /, -, 625.0, 24.0, add, /, 375.0, 32.0, final, T, b5, thetaH, multiply, theta, multiply, theta, multiply, /, 5.0, 12.0, add, /, -, 5.0, 16.0, =, interpolatedState, previousStateLinearCombination, b0, b1, b2, b3, b4, b5, =, interpolatedDerivatives, derivativeLinearCombination, bDot0, bDot1, bDot2, bDot3, bDot4, bDot5, final, T, theta2, theta, multiply, theta, final, T, h, thetaH, divide, theta, final, T, b0, h, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, -, 5.0, 2.0, add, /, 16.0, 3.0, add, /, -, 15.0, 4.0, add, 1.0, add, /, -, 1.0, 12.0, final, T, b1, time, getField, getZero, final, T, b2, h, multiply, theta2, multiply, theta, multiply, theta, multiply, /, 135.0, 8.0, add, /, -, 243.0, 8.0, add, /, 459.0, 32.0, add, /, -, 27.0, 32.0, final, T, b3, h, multiply, theta2, multiply, theta, multiply, theta, multiply, -, 30.0, add, /, 152.0, 3.0, add, -, 22.0, add, /, 4.0, 3.0, final, T, b4, h, multiply, theta2, multiply, theta, multiply, theta, multiply, /, 125.0, 8.0, add, /, -, 625.0, 24.0, add, /, 375.0, 32.0, add, /, -, 125.0, 96.0, final, T, b5, h, multiply, theta2, multiply, theta, multiply, /, 5.0, 12.0, add, /, -, 5.0, 16.0, add, /, -, 5.0, 48.0, =, interpolatedState, currentStateLinearCombination, b0, b1, b2, b3, b4, b5, =, interpolatedDerivatives, derivativeLinearCombination, bDot0, bDot1, bDot2, bDot3, bDot4, bDot5, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:HighamHall54Integrator:getOrder:null#[return, 5]
org.apache.commons.math4.ode.nonstiff:HighamHall54Integrator:estimateError:double[][]+double[]+double[]+double#[double, error, 0, for, int, j, 0, <, j, mainSetDimension, ++, j, double, errSum, *, STATIC_E, 0, yDotK, 0, j, for, int, l, 1, <, l, STATIC_E.length, ++, l, +=, errSum, *, STATIC_E, l, yDotK, l, j, final, double, yScale, FastMath, max, FastMath, abs, y0, j, FastMath, abs, y1, j, final, double, tol, ==, vecAbsoluteTolerance, null, +, scalAbsoluteTolerance, *, scalRelativeTolerance, yScale, +, vecAbsoluteTolerance, j, *, vecRelativeTolerance, j, yScale, final, double, ratio, /, *, h, errSum, tol, +=, error, *, ratio, ratio, return, FastMath, sqrt, /, error, mainSetDimension]
org.apache.commons.math4.ode.nonstiff:HighamHall54StepInterpolator:doCopy:null#[return, new, HighamHall54StepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:HighamHall54StepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, double, bDot0, +, 1, *, theta, +, /, -, 15.0, 2.0, *, theta, -, 16.0, *, 10.0, theta, final, double, bDot2, *, theta, +, /, 459.0, 16.0, *, theta, +, /, -, 729.0, 8.0, *, /, 135.0, 2.0, theta, final, double, bDot3, *, theta, +, -, 44.0, *, theta, -, 152.0, *, 120.0, theta, final, double, bDot4, *, theta, +, /, 375.0, 16.0, *, theta, +, /, -, 625.0, 8.0, *, /, 125.0, 2.0, theta, final, double, bDot5, *, /, *, theta, 5.0, 8.0, -, *, 2, theta, 1, if, &&, !=, previousState, null, <=, theta, 0.5, final, double, hTheta, *, h, theta, final, double, b0, *, hTheta, +, 1.0, *, theta, +, /, -, 15.0, 4.0, *, theta, -, /, 16.0, 3.0, *, /, 5.0, 2.0, theta, final, double, b2, *, hTheta, *, theta, +, /, 459.0, 32.0, *, theta, +, /, -, 243.0, 8.0, /, *, theta, 135.0, 8.0, final, double, b3, *, hTheta, *, theta, +, -, 22.0, *, theta, +, /, 152.0, 3.0, *, theta, -, 30.0, final, double, b4, *, hTheta, *, theta, +, /, 375.0, 32.0, *, theta, +, /, -, 625.0, 24.0, /, *, theta, 125.0, 8.0, final, double, b5, *, hTheta, *, theta, +, /, -, 5.0, 16.0, /, *, theta, 5.0, 12.0, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot0, yDotK, 0, i, final, double, yDot2, yDotK, 2, i, final, double, yDot3, yDotK, 3, i, final, double, yDot4, yDotK, 4, i, final, double, yDot5, yDotK, 5, i, =, interpolatedState, i, +, +, +, +, +, previousState, i, *, b0, yDot0, *, b2, yDot2, *, b3, yDot3, *, b4, yDot4, *, b5, yDot5, =, interpolatedDerivatives, i, +, +, +, +, *, bDot0, yDot0, *, bDot2, yDot2, *, bDot3, yDot3, *, bDot4, yDot4, *, bDot5, yDot5, final, double, theta2, *, theta, theta, final, double, b0, *, h, +, /, -, 1.0, 12.0, *, theta, +, 1.0, *, theta, +, /, -, 15.0, 4.0, *, theta, +, /, 16.0, 3.0, /, *, theta, -, 5.0, 2.0, final, double, b2, *, h, +, /, -, 27.0, 32.0, *, theta2, +, /, 459.0, 32.0, *, theta, +, /, -, 243.0, 8.0, /, *, theta, 135.0, 8.0, final, double, b3, *, h, +, /, 4.0, 3.0, *, theta2, +, -, 22.0, *, theta, +, /, 152.0, 3.0, *, theta, -, 30.0, final, double, b4, *, h, +, /, -, 125.0, 96.0, *, theta2, +, /, 375.0, 32.0, *, theta, +, /, -, 625.0, 24.0, /, *, theta, 125.0, 8.0, final, double, b5, *, h, +, /, -, 5.0, 48.0, *, theta2, +, /, -, 5.0, 16.0, /, *, theta, 5.0, 12.0, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot0, yDotK, 0, i, final, double, yDot2, yDotK, 2, i, final, double, yDot3, yDotK, 3, i, final, double, yDot4, yDotK, 4, i, final, double, yDot5, yDotK, 5, i, =, interpolatedState, i, +, +, +, +, +, currentState, i, *, b0, yDot0, *, b2, yDot2, *, b3, yDot3, *, b4, yDot4, *, b5, yDot5, =, interpolatedDerivatives, i, +, +, +, +, *, bDot0, yDot0, *, bDot2, yDot2, *, bDot3, yDot3, *, bDot4, yDot4, *, bDot5, yDot5]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:getC:null#[final, T, q, getField, getZero, add, 21, sqrt, final, T, c, MathArrays, buildArray, getField, 6, =, c, 0, getField, getOne, =, c, 1, fraction, 1, 2, =, c, 2, fraction, 2, 3, =, c, 3, q, subtract, 7, divide, -, 14, =, c, 4, q, add, 7, divide, 14, =, c, 5, getField, getOne, return, c]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:getA:null#[final, T, q, getField, getZero, add, 21, sqrt, final, T, a, MathArrays, buildArray, getField, 6, -, 1, for, int, i, 0, <, i, a.length, ++, i, =, a, i, MathArrays, buildArray, getField, +, i, 1, =, a, 0, 0, getField, getOne, =, a, 1, 0, fraction, 3, 8, =, a, 1, 1, fraction, 1, 8, =, a, 2, 0, fraction, 8, 27, =, a, 2, 1, fraction, 2, 27, =, a, 2, 2, a, 2, 0, =, a, 3, 0, q, multiply, 9, add, -, 21, divide, 392, =, a, 3, 1, q, multiply, 8, add, -, 56, divide, 392, =, a, 3, 2, q, multiply, -, 48, add, 336, divide, 392, =, a, 3, 3, q, multiply, 3, add, -, 63, divide, 392, =, a, 4, 0, q, multiply, -, 255, add, -, 1155, divide, 1960, =, a, 4, 1, q, multiply, -, 40, add, -, 280, divide, 1960, =, a, 4, 2, q, multiply, -, 320, divide, 1960, =, a, 4, 3, q, multiply, 363, add, 63, divide, 1960, =, a, 4, 4, q, multiply, 392, add, 2352, divide, 1960, =, a, 5, 0, q, multiply, 105, add, 330, divide, 180, =, a, 5, 1, fraction, 2, 3, =, a, 5, 2, q, multiply, 280, add, -, 200, divide, 180, =, a, 5, 3, q, multiply, -, 189, add, 126, divide, 180, =, a, 5, 4, q, multiply, -, 126, add, -, 686, divide, 180, =, a, 5, 5, q, multiply, -, 70, add, 490, divide, 180, return, a]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 7, =, b, 0, fraction, 1, 20, =, b, 1, getField, getZero, =, b, 2, fraction, 16, 45, =, b, 3, getField, getZero, =, b, 4, fraction, 49, 180, =, b, 5, b, 4, =, b, 6, b, 0, return, b]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, LutherFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:LutherFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, LutherFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:LutherFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, coeffDot1, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 21, add, -, 47, add, 36, add, /, -, 54, 5.0, add, 1, final, T, coeffDot2, time, getField, getZero, final, T, coeffDot3, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 112, add, /, -, 608, 3.0, add, /, 320, 3.0, add, /, -, 208, 15.0, final, T, coeffDot4, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, -, 567, 5.0, add, /, 972, 5.0, add, /, -, 486, 5.0, add, /, 324, 25.0, final, T, coeffDot5, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c5a, divide, 5, add, c5b, divide, 15, add, c5c, divide, 30, add, c5d, divide, 150, final, T, coeffDot6, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c6a, divide, 5, add, c6b, divide, 15, add, c6c, divide, 30, add, c6d, divide, 150, final, T, coeffDot7, theta, multiply, theta, multiply, theta, multiply, 3.0, add, -, 3, add, /, 3, 5.0, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, s, thetaH, final, T, coeff1, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, 21, 5.0, add, /, -, 47, 4.0, add, 12, add, /, -, 27, 5.0, add, 1, final, T, coeff2, time, getField, getZero, final, T, coeff3, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, 112, 5.0, add, /, -, 152, 3.0, add, /, 320, 9.0, add, /, -, 104, 15.0, final, T, coeff4, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, -, 567, 25.0, add, /, 243, 5.0, add, /, -, 162, 5.0, add, /, 162, 25.0, final, T, coeff5, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c5a, divide, 25, add, c5b, divide, 60, add, c5c, divide, 90, add, c5d, divide, 300, final, T, coeff6, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c6a, divide, 25, add, c6b, divide, 60, add, c6c, divide, 90, add, c6d, divide, 300, final, T, coeff7, s, multiply, theta, multiply, theta, multiply, theta, multiply, /, 3, 4.0, add, -, 1, add, /, 3, 10.0, =, interpolatedState, previousStateLinearCombination, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, coeff7, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, coeffDot7, final, T, s, oneMinusThetaH, final, T, coeff1, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, -, 21, 5.0, add, /, 151, 20.0, add, /, -, 89, 20.0, add, /, 19, 20.0, add, /, -, 1, 20.0, final, T, coeff2, time, getField, getZero, final, T, coeff3, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, -, 112, 5.0, add, /, 424, 15.0, add, /, -, 328, 45.0, add, /, -, 16, 45.0, add, /, -, 16, 45.0, final, T, coeff4, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, /, 567, 25.0, add, /, -, 648, 25.0, add, /, 162, 25.0, final, T, coeff5, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, d5a, divide, 25, add, d5b, divide, 300, add, d5c, divide, 900, add, /, -, 49, 180.0, add, /, -, 49, 180.0, final, T, coeff6, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, d6a, divide, 25, add, d6b, divide, 300, add, d6c, divide, 900, add, /, -, 49, 180.0, add, /, -, 49, 180.0, final, T, coeff7, s, multiply, theta, multiply, theta, multiply, theta, multiply, /, -, 3, 4.0, add, /, 1, 4.0, add, /, -, 1, 20.0, add, /, -, 1, 20.0, =, interpolatedState, currentStateLinearCombination, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, coeff7, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, coeffDot7, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:LutherStepInterpolator:doCopy:null#[return, new, LutherStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:LutherStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, double, coeffDot1, +, 1, *, theta, +, /, -, 54, 5.0, *, theta, +, 36, *, theta, +, -, 47, *, theta, 21, final, double, coeffDot2, 0, final, double, coeffDot3, *, theta, +, /, -, 208, 15.0, *, theta, +, /, 320, 3.0, *, theta, +, /, -, 608, 3.0, *, theta, 112, final, double, coeffDot4, *, theta, +, /, 324, 25.0, *, theta, +, /, -, 486, 5.0, *, theta, +, /, 972, 5.0, /, *, theta, -, 567, 5.0, final, double, coeffDot5, *, theta, +, /, +, 833, *, 343, Q, 150.0, *, theta, +, /, -, -, 637, *, 357, Q, 30.0, *, theta, +, /, +, 392, *, 287, Q, 15.0, /, *, theta, -, -, 49, *, 49, Q, 5.0, final, double, coeffDot6, *, theta, +, /, -, 833, *, 343, Q, 150.0, *, theta, +, /, +, -, 637, *, 357, Q, 30.0, *, theta, +, /, -, 392, *, 287, Q, 15.0, /, *, theta, +, -, 49, *, 49, Q, 5.0, final, double, coeffDot7, *, theta, +, /, 3, 5.0, *, theta, +, -, 3, *, theta, 3, if, &&, !=, previousState, null, <=, theta, 0.5, final, double, coeff1, +, 1, *, theta, +, /, -, 27, 5.0, *, theta, +, 12, *, theta, +, /, -, 47, 4.0, /, *, theta, 21, 5.0, final, double, coeff2, 0, final, double, coeff3, *, theta, +, /, -, 104, 15.0, *, theta, +, /, 320, 9.0, *, theta, +, /, -, 152, 3.0, /, *, theta, 112, 5.0, final, double, coeff4, *, theta, +, /, 162, 25.0, *, theta, +, /, -, 162, 5.0, *, theta, +, /, 243, 5.0, /, *, theta, -, 567, 25.0, final, double, coeff5, *, theta, +, /, +, 833, *, 343, Q, 300.0, *, theta, +, /, -, -, 637, *, 357, Q, 90.0, *, theta, +, /, +, 392, *, 287, Q, 60.0, /, *, theta, -, -, 49, *, 49, Q, 25.0, final, double, coeff6, *, theta, +, /, -, 833, *, 343, Q, 300.0, *, theta, +, /, +, -, 637, *, 357, Q, 90.0, *, theta, +, /, -, 392, *, 287, Q, 60.0, /, *, theta, +, -, 49, *, 49, Q, 25.0, final, double, coeff7, *, theta, +, /, 3, 10.0, *, theta, +, -, 1, *, theta, /, 3, 4.0, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, final, double, yDot3, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, final, double, yDot5, yDotK, 4, i, final, double, yDot6, yDotK, 5, i, final, double, yDot7, yDotK, 6, i, =, interpolatedState, i, +, previousState, i, *, theta, h, +, +, +, +, +, +, *, coeff1, yDot1, *, coeff2, yDot2, *, coeff3, yDot3, *, coeff4, yDot4, *, coeff5, yDot5, *, coeff6, yDot6, *, coeff7, yDot7, =, interpolatedDerivatives, i, +, +, +, +, +, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2, *, coeffDot3, yDot3, *, coeffDot4, yDot4, *, coeffDot5, yDot5, *, coeffDot6, yDot6, *, coeffDot7, yDot7, final, double, coeff1, +, /, -, 1, 20.0, *, theta, +, /, 19, 20.0, *, theta, +, /, -, 89, 20.0, *, theta, +, /, 151, 20.0, /, *, theta, -, 21, 5.0, final, double, coeff2, 0, final, double, coeff3, +, /, -, 16, 45.0, *, theta, +, /, -, 16, 45.0, *, theta, +, /, -, 328, 45.0, *, theta, +, /, 424, 15.0, /, *, theta, -, 112, 5.0, final, double, coeff4, *, theta, *, theta, +, /, 162, 25.0, *, theta, +, /, -, 648, 25.0, /, *, theta, 567, 25.0, final, double, coeff5, +, /, -, 49, 180.0, *, theta, +, /, -, 49, 180.0, *, theta, +, /, +, 2254, *, 1029, Q, 900.0, *, theta, +, /, -, -, 1372, *, 847, Q, 300.0, /, *, theta, +, 49, *, 49, Q, 25.0, final, double, coeff6, +, /, -, 49, 180.0, *, theta, +, /, -, 49, 180.0, *, theta, +, /, -, 2254, *, 1029, Q, 900.0, *, theta, +, /, +, -, 1372, *, 847, Q, 300.0, /, *, theta, -, 49, *, 49, Q, 25.0, final, double, coeff7, +, /, -, 1, 20.0, *, theta, +, /, -, 1, 20.0, *, theta, +, /, 1, 4.0, *, theta, /, -, 3, 4.0, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, final, double, yDot3, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, final, double, yDot5, yDotK, 4, i, final, double, yDot6, yDotK, 5, i, final, double, yDot7, yDotK, 6, i, =, interpolatedState, i, +, currentState, i, *, oneMinusThetaH, +, +, +, +, +, +, *, coeff1, yDot1, *, coeff2, yDot2, *, coeff3, yDot3, *, coeff4, yDot4, *, coeff5, yDot5, *, coeff6, yDot6, *, coeff7, yDot7, =, interpolatedDerivatives, i, +, +, +, +, +, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2, *, coeffDot3, yDot3, *, coeffDot4, yDot4, *, coeffDot5, yDot5, *, coeffDot6, yDot6, *, coeffDot7, yDot7]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:getC:null#[final, T, c, MathArrays, buildArray, getField, 1, =, c, 0, getField, getOne, multiply, 0.5, return, c]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:getA:null#[final, T, a, MathArrays, buildArray, getField, 1, 1, =, a, 0, 0, fraction, 1, 2, return, a]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 2, =, b, 0, getField, getZero, =, b, 1, getField, getOne, return, b]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, MidpointFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:MidpointFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, MidpointFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:MidpointFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, coeffDot2, theta, multiply, 2, final, T, coeffDot1, time, getField, getOne, subtract, coeffDot2, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, coeff1, theta, multiply, oneMinusThetaH, final, T, coeff2, theta, multiply, thetaH, =, interpolatedState, previousStateLinearCombination, coeff1, coeff2, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, final, T, coeff1, oneMinusThetaH, multiply, theta, final, T, coeff2, oneMinusThetaH, multiply, theta, add, 1, negate, =, interpolatedState, currentStateLinearCombination, coeff1, coeff2, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:MidpointStepInterpolator:doCopy:null#[return, new, MidpointStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:MidpointStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, double, coeffDot2, *, 2, theta, final, double, coeffDot1, -, 1, coeffDot2, if, &&, !=, previousState, null, <=, theta, 0.5, final, double, coeff1, *, theta, oneMinusThetaH, final, double, coeff2, *, theta, theta, h, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, =, interpolatedState, i, +, +, previousState, i, *, coeff1, yDot1, *, coeff2, yDot2, =, interpolatedDerivatives, i, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2, final, double, coeff1, *, oneMinusThetaH, theta, final, double, coeff2, *, oneMinusThetaH, +, 1.0, theta, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, =, interpolatedState, i, -, +, currentState, i, *, coeff1, yDot1, *, coeff2, yDot2, =, interpolatedDerivatives, i, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldIntegrator:fraction:int+int#[return, getField, getZero, add, p, divide, q]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[sanityChecks, initialState, finalTime, final, T, t0, initialState, getTime, final, T, y0, equations, getMapper, mapState, initialState, setStepStart, initIntegration, equations, t0, y0, finalTime, final, boolean, forward, >, finalTime, subtract, initialState, getTime, getReal, 0, final, int, stages, +, c.length, 1, T, y, y0, final, T, yDotK, MathArrays, buildArray, getField, stages, -, 1, final, T, yTmp, MathArrays, buildArray, getField, y0.length, if, forward, if, >=, getStepStart, getTime, add, step, subtract, finalTime, getReal, 0, setStepSize, finalTime, subtract, getStepStart, getTime, setStepSize, step, if, <=, getStepStart, getTime, subtract, step, subtract, finalTime, getReal, 0, setStepSize, finalTime, subtract, getStepStart, getTime, setStepSize, step, negate, setIsLastStep, false, do, =, y, equations, getMapper, mapState, getStepStart, =, yDotK, 0, equations, getMapper, mapDerivative, getStepStart, for, int, k, 1, <, k, stages, ++, k, for, int, j, 0, <, j, y0.length, ++, j, T, sum, yDotK, 0, j, multiply, a, -, k, 1, 0, for, int, l, 1, <, l, k, ++, l, =, sum, sum, add, yDotK, l, j, multiply, a, -, k, 1, l, =, yTmp, j, y, j, add, getStepSize, multiply, sum, =, yDotK, k, computeDerivatives, getStepStart, getTime, add, getStepSize, multiply, c, -, k, 1, yTmp, for, int, j, 0, <, j, y0.length, ++, j, T, sum, yDotK, 0, j, multiply, b, 0, for, int, l, 1, <, l, stages, ++, l, =, sum, sum, add, yDotK, l, j, multiply, b, l, =, yTmp, j, y, j, add, getStepSize, multiply, sum, final, T, stepEnd, getStepStart, getTime, add, getStepSize, final, T, yDotTmp, computeDerivatives, stepEnd, yTmp, final, FieldODEStateAndDerivative, T, stateTmp, new, FieldODEStateAndDerivative, T, stepEnd, yTmp, yDotTmp, System, arraycopy, yTmp, 0, y, 0, y0.length, setStepStart, acceptStep, createInterpolator, forward, yDotK, getStepStart, stateTmp, equations, getMapper, finalTime, if, !, isLastStep, final, T, nextT, getStepStart, getTime, add, getStepSize, final, boolean, nextIsLast, forward, >=, nextT, subtract, finalTime, getReal, 0, <=, nextT, subtract, finalTime, getReal, 0, if, nextIsLast, setStepSize, finalTime, subtract, getStepStart, getTime, !, isLastStep, final, FieldODEStateAndDerivative, T, finalState, getStepStart, setStepStart, null, setStepSize, null, return, finalState]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldIntegrator:singleStep:FirstOrderFieldDifferentialEquations<T>+T+T[]+T#[final, T, y, y0, clone, final, int, stages, +, c.length, 1, final, T, yDotK, MathArrays, buildArray, getField, stages, -, 1, final, T, yTmp, y0, clone, final, T, h, t, subtract, t0, =, yDotK, 0, equations, computeDerivatives, t0, y, for, int, k, 1, <, k, stages, ++, k, for, int, j, 0, <, j, y0.length, ++, j, T, sum, yDotK, 0, j, multiply, a, -, k, 1, 0, for, int, l, 1, <, l, k, ++, l, =, sum, sum, add, yDotK, l, j, multiply, a, -, k, 1, l, =, yTmp, j, y, j, add, h, multiply, sum, =, yDotK, k, equations, computeDerivatives, t0, add, h, multiply, c, -, k, 1, yTmp, for, int, j, 0, <, j, y0.length, ++, j, T, sum, yDotK, 0, j, multiply, b, 0, for, int, l, 1, <, l, stages, ++, l, =, sum, sum, add, yDotK, l, j, multiply, b, l, =, y, j, y, j, add, h, multiply, sum, return, y]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:create:boolean+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, create, field, newForward, yDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:previousStateLinearCombination:T...#[return, combine, getPreviousState, getState, coefficients]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:currentStateLinearCombination:T...#[return, combine, getCurrentState, getState, coefficients]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:derivativeLinearCombination:T...#[return, combine, MathArrays, buildArray, field, yDotK, 0, length, coefficients]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:combine:T[]+T...#[for, int, i, 0, <, i, a.length, ++, i, for, int, k, 0, <, k, coefficients.length, ++, k, =, a, i, a, i, add, coefficients, k, multiply, yDotK, k, i, return, a]
org.apache.commons.math4.ode.nonstiff:RungeKuttaIntegrator:integrate:ExpandableStatefulODE+double#[sanityChecks, equations, t, setEquations, equations, final, boolean, forward, >, t, equations, getTime, final, double, y0, equations, getCompleteState, final, double, y, y0, clone, final, int, stages, +, c.length, 1, final, double, yDotK, double, stages, for, int, i, 0, <, i, stages, ++, i, =, yDotK, i, double, y0.length, final, double, yTmp, y0, clone, final, double, yDotTmp, double, y0.length, final, RungeKuttaStepInterpolator, interpolator, RungeKuttaStepInterpolator, prototype, copy, interpolator, reinitialize, this, yTmp, yDotK, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, interpolator, storeTime, equations, getTime, =, stepStart, equations, getTime, if, forward, if, >=, +, stepStart, step, t, =, stepSize, -, t, stepStart, =, stepSize, step, if, <=, -, stepStart, step, t, =, stepSize, -, t, stepStart, =, stepSize, -, step, initIntegration, equations, getTime, y0, t, =, isLastStep, false, do, interpolator, shift, computeDerivatives, stepStart, y, yDotK, 0, for, int, k, 1, <, k, stages, ++, k, for, int, j, 0, <, j, y0.length, ++, j, double, sum, *, a, -, k, 1, 0, yDotK, 0, j, for, int, l, 1, <, l, k, ++, l, +=, sum, *, a, -, k, 1, l, yDotK, l, j, =, yTmp, j, +, y, j, *, stepSize, sum, computeDerivatives, +, stepStart, *, c, -, k, 1, stepSize, yTmp, yDotK, k, for, int, j, 0, <, j, y0.length, ++, j, double, sum, *, b, 0, yDotK, 0, j, for, int, l, 1, <, l, stages, ++, l, +=, sum, *, b, l, yDotK, l, j, =, yTmp, j, +, y, j, *, stepSize, sum, interpolator, storeTime, +, stepStart, stepSize, System, arraycopy, yTmp, 0, y, 0, y0.length, System, arraycopy, yDotK, -, stages, 1, 0, yDotTmp, 0, y0.length, =, stepStart, acceptStep, interpolator, y, yDotTmp, t, if, !, isLastStep, interpolator, storeTime, stepStart, final, double, nextT, +, stepStart, stepSize, final, boolean, nextIsLast, forward, >=, nextT, t, <=, nextT, t, if, nextIsLast, =, stepSize, -, t, stepStart, !, isLastStep, equations, setTime, stepStart, equations, setCompleteState, y, =, stepStart, Double.NaN, =, stepSize, Double.NaN]
org.apache.commons.math4.ode.nonstiff:RungeKuttaIntegrator:singleStep:FirstOrderDifferentialEquations+double+double[]+double#[final, double, y, y0, clone, final, int, stages, +, c.length, 1, final, double, yDotK, double, stages, for, int, i, 0, <, i, stages, ++, i, =, yDotK, i, double, y0.length, final, double, yTmp, y0, clone, final, double, h, -, t, t0, equations, computeDerivatives, t0, y, yDotK, 0, for, int, k, 1, <, k, stages, ++, k, for, int, j, 0, <, j, y0.length, ++, j, double, sum, *, a, -, k, 1, 0, yDotK, 0, j, for, int, l, 1, <, l, k, ++, l, +=, sum, *, a, -, k, 1, l, yDotK, l, j, =, yTmp, j, +, y, j, *, h, sum, equations, computeDerivatives, +, t0, *, c, -, k, 1, h, yTmp, yDotK, k, for, int, j, 0, <, j, y0.length, ++, j, double, sum, *, b, 0, yDotK, 0, j, for, int, l, 1, <, l, stages, ++, l, +=, sum, *, b, l, yDotK, l, j, +=, y, j, *, h, sum, return, y]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:reinitialize:AbstractIntegrator+double[]+double[][]+boolean+EquationsMapper+EquationsMapper[]#[reinitialize, y, forward, primaryMapper, secondaryMappers, =, this, previousState, null, =, this, yDotK, yDotArray, =, this, integrator, rkIntegrator]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:shift:null#[=, previousState, currentState, clone, super, shift]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:writeExternal:ObjectOutput#[writeBaseExternal, out, final, int, n, ==, currentState, null, -, 1, currentState.length, for, int, i, 0, <, i, n, ++, i, out, writeDouble, previousState, i, final, int, kMax, ==, yDotK, null, -, 1, yDotK.length, out, writeInt, kMax, for, int, k, 0, <, k, kMax, ++, k, for, int, i, 0, <, i, n, ++, i, out, writeDouble, yDotK, k, i]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:readExternal:ObjectInput#[final, double, t, readBaseExternal, in, final, int, n, ==, currentState, null, -, 1, currentState.length, if, <, n, 0, =, previousState, null, =, previousState, double, n, for, int, i, 0, <, i, n, ++, i, =, previousState, i, in, readDouble, final, int, kMax, in, readInt, =, yDotK, <, kMax, 0, null, double, kMax, for, int, k, 0, <, k, kMax, ++, k, =, yDotK, k, <, n, 0, null, double, n, for, int, i, 0, <, i, n, ++, i, =, yDotK, k, i, in, readDouble, =, integrator, null, if, !=, currentState, null, setInterpolatedTime, t, =, interpolatedTime, t]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:getC:null#[final, T, c, MathArrays, buildArray, getField, 3, =, c, 0, fraction, 1, 3, =, c, 1, c, 0, add, c, 0, =, c, 2, getField, getOne, return, c]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:getA:null#[final, T, a, MathArrays, buildArray, getField, 3, -, 1, for, int, i, 0, <, i, a.length, ++, i, =, a, i, MathArrays, buildArray, getField, +, i, 1, =, a, 0, 0, fraction, 1, 3, =, a, 1, 0, a, 0, 0, negate, =, a, 1, 1, getField, getOne, =, a, 2, 0, getField, getOne, =, a, 2, 1, getField, getOne, negate, =, a, 2, 2, getField, getOne, return, a]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:getB:null#[final, T, b, MathArrays, buildArray, getField, 4, =, b, 0, fraction, 1, 8, =, b, 1, fraction, 3, 8, =, b, 2, b, 1, =, b, 3, b, 0, return, b]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, ThreeEighthesFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[return, new, ThreeEighthesFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[final, T, coeffDot3, theta, multiply, 0.75, final, T, coeffDot1, coeffDot3, multiply, theta, multiply, 4, subtract, 5, add, 1, final, T, coeffDot2, coeffDot3, multiply, theta, multiply, -, 6, add, 5, final, T, coeffDot4, coeffDot3, multiply, theta, multiply, 2, subtract, 1, final, T, interpolatedState, final, T, interpolatedDerivatives, if, &&, !=, getGlobalPreviousState, null, <=, theta, getReal, 0.5, final, T, s, thetaH, divide, 8, final, T, fourTheta2, theta, multiply, theta, multiply, 4, final, T, coeff1, s, multiply, fourTheta2, multiply, 2, subtract, theta, multiply, 15, add, 8, final, T, coeff2, s, multiply, theta, multiply, 5, subtract, fourTheta2, multiply, 3, final, T, coeff3, s, multiply, theta, multiply, 3, final, T, coeff4, s, multiply, fourTheta2, subtract, theta, multiply, 3, =, interpolatedState, previousStateLinearCombination, coeff1, coeff2, coeff3, coeff4, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, final, T, s, oneMinusThetaH, divide, -, 8, final, T, fourTheta2, theta, multiply, theta, multiply, 4, final, T, thetaPlus1, theta, add, 1, final, T, coeff1, s, multiply, fourTheta2, multiply, 2, subtract, theta, multiply, 7, add, 1, final, T, coeff2, s, multiply, thetaPlus1, subtract, fourTheta2, multiply, 3, final, T, coeff3, s, multiply, thetaPlus1, multiply, 3, final, T, coeff4, s, multiply, thetaPlus1, add, fourTheta2, =, interpolatedState, currentStateLinearCombination, coeff1, coeff2, coeff3, coeff4, =, interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, return, new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesStepInterpolator:doCopy:null#[return, new, ThreeEighthesStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, double, coeffDot3, *, 0.75, theta, final, double, coeffDot1, +, *, coeffDot3, -, *, 4, theta, 5, 1, final, double, coeffDot2, *, coeffDot3, -, 5, *, 6, theta, final, double, coeffDot4, *, coeffDot3, -, *, 2, theta, 1, if, &&, !=, previousState, null, <=, theta, 0.5, final, double, s, /, *, theta, h, 8.0, final, double, fourTheta2, *, 4, theta, theta, final, double, coeff1, *, s, +, -, 8, *, 15, theta, *, 2, fourTheta2, final, double, coeff2, *, 3, s, -, *, 5, theta, fourTheta2, final, double, coeff3, *, 3, s, theta, final, double, coeff4, *, s, +, *, -, 3, theta, fourTheta2, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, final, double, yDot3, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, =, interpolatedState, i, +, +, +, +, previousState, i, *, coeff1, yDot1, *, coeff2, yDot2, *, coeff3, yDot3, *, coeff4, yDot4, =, interpolatedDerivatives, i, +, +, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2, *, coeffDot3, yDot3, *, coeffDot4, yDot4, final, double, s, /, oneMinusThetaH, 8.0, final, double, fourTheta2, *, 4, theta, theta, final, double, coeff1, *, s, +, -, 1, *, 7, theta, *, 2, fourTheta2, final, double, coeff2, *, 3, s, -, +, 1, theta, fourTheta2, final, double, coeff3, *, 3, s, +, 1, theta, final, double, coeff4, *, s, +, 1, theta, fourTheta2, for, int, i, 0, <, i, interpolatedState.length, ++, i, final, double, yDot1, yDotK, 0, i, final, double, yDot2, yDotK, 1, i, final, double, yDot3, yDotK, 2, i, final, double, yDot4, yDotK, 3, i, =, interpolatedState, i, -, -, -, -, currentState, i, *, coeff1, yDot1, *, coeff2, yDot2, *, coeff3, yDot3, *, coeff4, yDot4, =, interpolatedDerivatives, i, +, +, +, *, coeffDot1, yDot1, *, coeffDot2, yDot2, *, coeffDot3, yDot3, *, coeffDot4, yDot4]
org.apache.commons.math4.ode:ParameterConfiguration:getParameterName:null#[return, parameterName]
org.apache.commons.math4.ode:ParameterConfiguration:getHP:null#[return, hP]
org.apache.commons.math4.ode:ParameterConfiguration:setHP:double#[=, this, hP, hParam]
org.apache.commons.math4.ode:ParameterizedWrapper:getDimension:null#[return, fode, getDimension]
org.apache.commons.math4.ode:ParameterizedWrapper:computeDerivatives:double+double[]+double[]#[fode, computeDerivatives, t, y, yDot]
org.apache.commons.math4.ode:ParameterizedWrapper:getParametersNames:null#[return, new, ArrayList, String]
org.apache.commons.math4.ode:ParameterizedWrapper:isSupported:String#[return, false]
org.apache.commons.math4.ode:ParameterizedWrapper:getParameter:String#[if, !, isSupported, name, throw, new, UnknownParameterException, name, return, Double.NaN]
org.apache.commons.math4.ode:ParameterJacobianWrapper:getParametersNames:null#[return, pode, getParametersNames]
org.apache.commons.math4.ode:ParameterJacobianWrapper:isSupported:String#[return, pode, isSupported, name]
org.apache.commons.math4.ode:ParameterJacobianWrapper:computeParameterJacobian:double+double[]+double[]+String+double[]#[final, int, n, fode, getDimension, if, pode, isSupported, paramName, final, double, tmpDot, double, n, final, double, p, pode, getParameter, paramName, final, double, hP, hParam, get, paramName, pode, setParameter, paramName, +, p, hP, fode, computeDerivatives, t, y, tmpDot, for, int, i, 0, <, i, n, ++, i, =, dFdP, i, /, -, tmpDot, i, yDot, i, hP, pode, setParameter, paramName, p, Arrays, fill, dFdP, 0, n, 0.0]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:restrictStep:FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>#[return, create, forward, globalPreviousState, globalCurrentState, previousState, currentState, mapper]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getGlobalPreviousState:null#[return, globalPreviousState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getGlobalCurrentState:null#[return, globalCurrentState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getPreviousState:null#[return, softPreviousState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getCurrentState:null#[return, softCurrentState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getInterpolatedState:T#[final, T, thetaH, time, subtract, globalPreviousState, getTime, final, T, oneMinusThetaH, globalCurrentState, getTime, subtract, time, final, T, theta, thetaH, divide, globalCurrentState, getTime, subtract, globalPreviousState, getTime, return, computeInterpolatedStateAndDerivatives, mapper, time, theta, thetaH, oneMinusThetaH]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:isForward:null#[return, forward]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:allocateInterpolatedArrays:int#[if, <, dimension, 0, =, interpolatedState, null, =, interpolatedDerivatives, null, =, interpolatedPrimaryState, null, =, interpolatedPrimaryDerivatives, null, =, interpolatedSecondaryState, null, =, interpolatedSecondaryDerivatives, null, =, interpolatedState, double, dimension, =, interpolatedDerivatives, double, dimension, =, interpolatedPrimaryState, double, primaryMapper, getDimension, =, interpolatedPrimaryDerivatives, double, primaryMapper, getDimension, if, ==, secondaryMappers, null, =, interpolatedSecondaryState, null, =, interpolatedSecondaryDerivatives, null, =, interpolatedSecondaryState, double, secondaryMappers.length, =, interpolatedSecondaryDerivatives, double, secondaryMappers.length, for, int, i, 0, <, i, secondaryMappers.length, ++, i, =, interpolatedSecondaryState, i, double, secondaryMappers, i, getDimension, =, interpolatedSecondaryDerivatives, i, double, secondaryMappers, i, getDimension]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:reinitialize:double[]+boolean+EquationsMapper+EquationsMapper[]#[=, globalPreviousTime, Double.NaN, =, globalCurrentTime, Double.NaN, =, softPreviousTime, Double.NaN, =, softCurrentTime, Double.NaN, =, h, Double.NaN, =, interpolatedTime, Double.NaN, =, currentState, y, =, finalized, false, =, this, forward, isForward, =, this, dirtyState, true, =, this, primaryMapper, primary, =, this, secondaryMappers, secondary, clone, allocateInterpolatedArrays, y.length]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:copy:null#[finalizeStep, return, doCopy]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:shift:null#[=, globalPreviousTime, globalCurrentTime, =, softPreviousTime, globalPreviousTime, =, softCurrentTime, globalCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:storeTime:double#[=, globalCurrentTime, t, =, softCurrentTime, globalCurrentTime, =, h, -, globalCurrentTime, globalPreviousTime, setInterpolatedTime, t, =, finalized, false]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:setSoftPreviousTime:double#[=, this, softPreviousTime, softPreviousTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:setSoftCurrentTime:double#[=, this, softCurrentTime, softCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getGlobalPreviousTime:null#[return, globalPreviousTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getGlobalCurrentTime:null#[return, globalCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getPreviousTime:null#[return, softPreviousTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getCurrentTime:null#[return, softCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedTime:null#[return, interpolatedTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:setInterpolatedTime:double#[=, interpolatedTime, time, =, dirtyState, true]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:isForward:null#[return, forward]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:evaluateCompleteInterpolatedState:null#[if, dirtyState, final, double, oneMinusThetaH, -, globalCurrentTime, interpolatedTime, final, double, theta, ==, h, 0, 0, /, -, h, oneMinusThetaH, h, computeInterpolatedStateAndDerivatives, theta, oneMinusThetaH, =, dirtyState, false]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedState:null#[evaluateCompleteInterpolatedState, primaryMapper, extractEquationData, interpolatedState, interpolatedPrimaryState, return, interpolatedPrimaryState]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedDerivatives:null#[evaluateCompleteInterpolatedState, primaryMapper, extractEquationData, interpolatedDerivatives, interpolatedPrimaryDerivatives, return, interpolatedPrimaryDerivatives]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedSecondaryState:int#[evaluateCompleteInterpolatedState, secondaryMappers, index, extractEquationData, interpolatedState, interpolatedSecondaryState, index, return, interpolatedSecondaryState, index]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedSecondaryDerivatives:int#[evaluateCompleteInterpolatedState, secondaryMappers, index, extractEquationData, interpolatedDerivatives, interpolatedSecondaryDerivatives, index, return, interpolatedSecondaryDerivatives, index]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:finalizeStep:null#[if, !, finalized, doFinalize, =, finalized, true]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:writeBaseExternal:ObjectOutput#[if, ==, currentState, null, out, writeInt, -, 1, out, writeInt, currentState.length, out, writeDouble, globalPreviousTime, out, writeDouble, globalCurrentTime, out, writeDouble, softPreviousTime, out, writeDouble, softCurrentTime, out, writeDouble, h, out, writeBoolean, forward, out, writeObject, primaryMapper, out, write, secondaryMappers.length, for, final, EquationsMapper, mapper, secondaryMappers, out, writeObject, mapper, if, !=, currentState, null, for, int, i, 0, <, i, currentState.length, ++, i, out, writeDouble, currentState, i, out, writeDouble, interpolatedTime, try, finalizeStep, catch, MaxCountExceededException, mcee, final, IOException, ioe, new, IOException, mcee, getLocalizedMessage, ioe, initCause, mcee, throw, ioe]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:readBaseExternal:ObjectInput#[final, int, dimension, in, readInt, =, globalPreviousTime, in, readDouble, =, globalCurrentTime, in, readDouble, =, softPreviousTime, in, readDouble, =, softCurrentTime, in, readDouble, =, h, in, readDouble, =, forward, in, readBoolean, =, primaryMapper, EquationsMapper, in, readObject, =, secondaryMappers, EquationsMapper, in, read, for, int, i, 0, <, i, secondaryMappers.length, ++, i, =, secondaryMappers, i, EquationsMapper, in, readObject, =, dirtyState, true, if, <, dimension, 0, =, currentState, null, =, currentState, double, dimension, for, int, i, 0, <, i, currentState.length, ++, i, =, currentState, i, in, readDouble, =, interpolatedTime, Double.NaN, allocateInterpolatedArrays, dimension, =, finalized, true, return, in, readDouble]
org.apache.commons.math4.ode.sampling:DummyStepHandler:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.ode.sampling:DummyStepHandler:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:init:FieldODEStateAndDerivative<T>+T#[=, first, null, =, last, null, =, forward, true, handler, init, initialState, finalTime]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:handleStep:FieldStepInterpolator<T>+boolean#[if, ==, last, null, =, first, interpolator, getPreviousState, =, last, first, =, forward, interpolator, isForward, if, !, forward, =, h, -, h, T, nextTime, ==, mode, StepNormalizerMode.INCREMENT, last, getTime, add, h, last, getTime, getField, getZero, add, *, +, FastMath, floor, /, last, getTime, getReal, h, 1, h, if, &&, ==, mode, StepNormalizerMode.MULTIPLES, Precision, equals, nextTime, getReal, last, getTime, getReal, 1, =, nextTime, nextTime, add, h, boolean, nextInStep, isNextInStep, nextTime, interpolator, while, nextInStep, doNormalizedStep, false, =, last, interpolator, getInterpolatedState, nextTime, =, nextTime, nextTime, add, h, =, nextInStep, isNextInStep, nextTime, interpolator, if, isLast, final, boolean, addLast, &&, bounds, lastIncluded, !=, last, getTime, getReal, interpolator, getCurrentState, getTime, getReal, doNormalizedStep, !, addLast, if, addLast, =, last, interpolator, getCurrentState, doNormalizedStep, true]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:isNextInStep:T+FieldStepInterpolator<T>#[return, forward, <=, nextTime, getReal, interpolator, getCurrentState, getTime, getReal, >=, nextTime, getReal, interpolator, getCurrentState, getTime, getReal]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:doNormalizedStep:boolean#[if, &&, !, bounds, firstIncluded, ==, first, getTime, getReal, last, getTime, getReal, return, handler, handleStep, last, isLast]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:doCopy:null#[return, new, NordsieckStepInterpolator, this]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:reinitialize:double[]+boolean+EquationsMapper+EquationsMapper[]#[super, reinitialize, y, forward, primaryMapper, secondaryMappers, =, stateVariation, double, y.length]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:reinitialize:double+double+double[]+Array2DRowRealMatrix#[=, this, referenceTime, time, =, this, scalingH, stepSize, =, this, scaled, scaledDerivative, =, this, nordsieck, nordsieckVector, setInterpolatedTime, getInterpolatedTime]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:rescale:double#[final, double, ratio, /, stepSize, scalingH, for, int, i, 0, <, i, scaled.length, ++, i, *=, scaled, i, ratio, final, double, nData, nordsieck, getDataRef, double, power, ratio, for, int, i, 0, <, i, nData.length, ++, i, *=, power, ratio, final, double, nDataI, nData, i, for, int, j, 0, <, j, nDataI.length, ++, j, *=, nDataI, j, power, =, scalingH, stepSize]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:getInterpolatedStateVariation:null#[getInterpolatedState, return, stateVariation]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[final, double, x, -, interpolatedTime, referenceTime, final, double, normalizedAbscissa, /, x, scalingH, Arrays, fill, stateVariation, 0.0, Arrays, fill, interpolatedDerivatives, 0.0, final, double, nData, nordsieck, getDataRef, for, int, i, -, nData.length, 1, >=, i, 0, --, i, final, int, order, +, i, 2, final, double, nDataI, nData, i, final, double, power, FastMath, pow, normalizedAbscissa, order, for, int, j, 0, <, j, nDataI.length, ++, j, final, double, d, *, nDataI, j, power, +=, stateVariation, j, d, +=, interpolatedDerivatives, j, *, order, d, for, int, j, 0, <, j, currentState.length, ++, j, +=, stateVariation, j, *, scaled, j, normalizedAbscissa, =, interpolatedState, j, +, currentState, j, stateVariation, j, =, interpolatedDerivatives, j, /, +, interpolatedDerivatives, j, *, scaled, j, normalizedAbscissa, x]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:writeExternal:ObjectOutput#[writeBaseExternal, out, out, writeDouble, scalingH, out, writeDouble, referenceTime, final, int, n, ==, currentState, null, -, 1, currentState.length, if, ==, scaled, null, out, writeBoolean, false, out, writeBoolean, true, for, int, j, 0, <, j, n, ++, j, out, writeDouble, scaled, j, if, ==, nordsieck, null, out, writeBoolean, false, out, writeBoolean, true, out, writeObject, nordsieck]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:readExternal:ObjectInput#[final, double, t, readBaseExternal, in, =, scalingH, in, readDouble, =, referenceTime, in, readDouble, final, int, n, ==, currentState, null, -, 1, currentState.length, final, boolean, hasScaled, in, readBoolean, if, hasScaled, =, scaled, double, n, for, int, j, 0, <, j, n, ++, j, =, scaled, j, in, readDouble, =, scaled, null, final, boolean, hasNordsieck, in, readBoolean, if, hasNordsieck, =, nordsieck, Array2DRowRealMatrix, in, readObject, =, nordsieck, null, if, &&, hasScaled, hasNordsieck, =, stateVariation, double, n, setInterpolatedTime, t, =, stateVariation, null]
org.apache.commons.math4.ode.sampling:StepNormalizer:init:double+double[]+double#[=, firstTime, Double.NaN, =, lastTime, Double.NaN, =, lastState, null, =, lastDerivatives, null, =, forward, true, handler, init, t0, y0, t]
org.apache.commons.math4.ode.sampling:StepNormalizer:handleStep:StepInterpolator+boolean#[if, ==, lastState, null, =, firstTime, interpolator, getPreviousTime, =, lastTime, interpolator, getPreviousTime, interpolator, setInterpolatedTime, lastTime, =, lastState, interpolator, getInterpolatedState, clone, =, lastDerivatives, interpolator, getInterpolatedDerivatives, clone, =, forward, >=, interpolator, getCurrentTime, lastTime, if, !, forward, =, h, -, h, double, nextTime, ==, mode, StepNormalizerMode.INCREMENT, +, lastTime, h, *, +, FastMath, floor, /, lastTime, h, 1, h, if, &&, ==, mode, StepNormalizerMode.MULTIPLES, Precision, equals, nextTime, lastTime, 1, +=, nextTime, h, boolean, nextInStep, isNextInStep, nextTime, interpolator, while, nextInStep, doNormalizedStep, false, storeStep, interpolator, nextTime, +=, nextTime, h, =, nextInStep, isNextInStep, nextTime, interpolator, if, isLast, boolean, addLast, &&, bounds, lastIncluded, !=, lastTime, interpolator, getCurrentTime, doNormalizedStep, !, addLast, if, addLast, storeStep, interpolator, interpolator, getCurrentTime, doNormalizedStep, true]
org.apache.commons.math4.ode.sampling:StepNormalizer:isNextInStep:double+StepInterpolator#[return, forward, <=, nextTime, interpolator, getCurrentTime, >=, nextTime, interpolator, getCurrentTime]
org.apache.commons.math4.ode.sampling:StepNormalizer:doNormalizedStep:boolean#[if, &&, !, bounds, firstIncluded, ==, firstTime, lastTime, return, handler, handleStep, lastTime, lastState, lastDerivatives, isLast]
org.apache.commons.math4.ode.sampling:StepNormalizer:storeStep:StepInterpolator+double#[=, lastTime, t, interpolator, setInterpolatedTime, lastTime, System, arraycopy, interpolator, getInterpolatedState, 0, lastState, 0, lastState.length, System, arraycopy, interpolator, getInterpolatedDerivatives, 0, lastDerivatives, 0, lastDerivatives.length]
org.apache.commons.math4.ode:UnknownParameterException:getName:null#[return, name]
org.apache.commons.math4.optim:AbstractConvergenceChecker:getRelativeThreshold:null#[return, relativeThreshold]
org.apache.commons.math4.optim:AbstractConvergenceChecker:getAbsoluteThreshold:null#[return, absoluteThreshold]
org.apache.commons.math4.optim:AbstractOptimizationProblem:getEvaluationCounter:null#[return, new, Incrementor, this, maxEvaluations, MAX_EVAL_CALLBACK]
org.apache.commons.math4.optim:AbstractOptimizationProblem:getIterationCounter:null#[return, new, Incrementor, this, maxIterations, MAX_ITER_CALLBACK]
org.apache.commons.math4.optim:AbstractOptimizationProblem:getConvergenceChecker:null#[return, checker]
org.apache.commons.math4.optim:BaseMultiStartMultivariateOptimizer:getEvaluations:null#[return, totalEvaluations]
org.apache.commons.math4.optim:BaseMultiStartMultivariateOptimizer:optimize:OptimizationData...#[=, optimData, optData, return, super, optimize, optData]
org.apache.commons.math4.optim:BaseMultiStartMultivariateOptimizer:doOptimize:null#[for, int, i, 0, <, i, optimData.length, ++, i, if, instanceof, optimData, i, MaxEval, =, optimData, i, null, =, maxEvalIndex, i, if, instanceof, optimData, i, InitialGuess, =, optimData, i, null, =, initialGuessIndex, i, continue, if, ==, maxEvalIndex, -, 1, throw, new, MathIllegalStateException, if, ==, initialGuessIndex, -, 1, throw, new, MathIllegalStateException, RuntimeException, lastException, null, =, totalEvaluations, 0, clear, final, int, maxEval, getMaxEvaluations, final, double, min, getLowerBound, final, double, max, getUpperBound, final, double, startPoint, getStartPoint, for, int, i, 0, <, i, starts, ++, i, try, =, optimData, maxEvalIndex, new, MaxEval, -, maxEval, totalEvaluations, double, s, null, if, ==, i, 0, =, s, startPoint, int, attempts, 0, while, ==, s, null, if, >=, ++, attempts, getMaxEvaluations, throw, new, TooManyEvaluationsException, getMaxEvaluations, =, s, generator, nextVector, for, int, k, 0, &&, !=, s, null, <, k, s.length, ++, k, if, ||, &&, !=, min, null, <, s, k, min, k, &&, !=, max, null, >, s, k, max, k, =, s, null, =, optimData, initialGuessIndex, new, InitialGuess, s, final, PAIR, result, optimizer, optimize, optimData, store, result, catch, RuntimeException, mue, =, lastException, mue, +=, totalEvaluations, optimizer, getEvaluations, final, PAIR, optima, getOptima, if, ==, optima.length, 0, throw, lastException, return, optima, 0]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, for, OptimizationData, data, optData, if, instanceof, data, InitialGuess, =, start, InitialGuess, data, getInitialGuess, continue, if, instanceof, data, SimpleBounds, final, SimpleBounds, bounds, SimpleBounds, data, =, lowerBound, bounds, getLower, =, upperBound, bounds, getUpper, continue, checkParameters]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:getStartPoint:null#[return, ==, start, null, null, start, clone]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:getLowerBound:null#[return, ==, lowerBound, null, null, lowerBound, clone]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:getUpperBound:null#[return, ==, upperBound, null, null, upperBound, clone]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:checkParameters:null#[if, !=, start, null, final, int, dim, start.length, if, !=, lowerBound, null, if, !=, lowerBound.length, dim, throw, new, DimensionMismatchException, lowerBound.length, dim, for, int, i, 0, <, i, dim, ++, i, final, double, v, start, i, final, double, lo, lowerBound, i, if, <, v, lo, throw, new, NumberIsTooSmallException, v, lo, true, if, !=, upperBound, null, if, !=, upperBound.length, dim, throw, new, DimensionMismatchException, upperBound.length, dim, for, int, i, 0, <, i, dim, ++, i, final, double, v, start, i, final, double, hi, upperBound, i, if, >, v, hi, throw, new, NumberIsTooLargeException, v, hi, true]
org.apache.commons.math4.optim:BaseOptimizer:getMaxEvaluations:null#[return, evaluations, getMaximalCount]
org.apache.commons.math4.optim:BaseOptimizer:getEvaluations:null#[return, evaluations, getCount]
org.apache.commons.math4.optim:BaseOptimizer:getMaxIterations:null#[return, iterations, getMaximalCount]
org.apache.commons.math4.optim:BaseOptimizer:getIterations:null#[return, iterations, getCount]
org.apache.commons.math4.optim:BaseOptimizer:getConvergenceChecker:null#[return, checker]
org.apache.commons.math4.optim:BaseOptimizer:optimize:OptimizationData...#[parseOptimizationData, optData, evaluations, resetCount, iterations, resetCount, return, doOptimize]
org.apache.commons.math4.optim:BaseOptimizer:optimize:null#[evaluations, resetCount, iterations, resetCount, return, doOptimize]
org.apache.commons.math4.optim:BaseOptimizer:incrementEvaluationCount:null#[evaluations, incrementCount]
org.apache.commons.math4.optim:BaseOptimizer:incrementIterationCount:null#[iterations, incrementCount]
org.apache.commons.math4.optim:BaseOptimizer:parseOptimizationData:OptimizationData...#[for, OptimizationData, data, optData, if, instanceof, data, MaxEval, evaluations, setMaximalCount, MaxEval, data, getMaxEval, continue, if, instanceof, data, MaxIter, iterations, setMaximalCount, MaxIter, data, getMaxIter, continue]
org.apache.commons.math4.optim:InitialGuess:getInitialGuess:null#[return, init, clone]
org.apache.commons.math4.optim.linear:LinearConstraint:getCoefficients:null#[return, coefficients]
org.apache.commons.math4.optim.linear:LinearConstraint:getRelationship:null#[return, relationship]
org.apache.commons.math4.optim.linear:LinearConstraint:getValue:null#[return, value]
org.apache.commons.math4.optim.linear:LinearConstraint:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, LinearConstraint, LinearConstraint, rhs, LinearConstraint, other, return, &&, &&, ==, relationship, rhs.relationship, ==, value, rhs.value, coefficients, equals, rhs.coefficients, return, false]
org.apache.commons.math4.optim.linear:LinearConstraint:hashCode:null#[return, ^, relationship, hashCode, Double, valueOf, value, hashCode, coefficients, hashCode]
org.apache.commons.math4.optim.linear:LinearConstraint:writeObject:ObjectOutputStream#[oos, defaultWriteObject, MatrixUtils, serializeRealVector, coefficients, oos]
org.apache.commons.math4.optim.linear:LinearConstraint:readObject:ObjectInputStream#[ois, defaultReadObject, MatrixUtils, deserializeRealVector, this, "coefficients", ois]
org.apache.commons.math4.optim.linear:LinearConstraintSet:getConstraints:null#[return, Collections, unmodifiableSet, linearConstraints]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:getCoefficients:null#[return, coefficients]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:getConstantTerm:null#[return, constantTerm]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:value:double[]#[return, value, new, ArrayRealVector, point, false]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:value:RealVector#[return, +, coefficients, dotProduct, point, constantTerm]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, LinearObjectiveFunction, LinearObjectiveFunction, rhs, LinearObjectiveFunction, other, return, &&, ==, constantTerm, rhs.constantTerm, coefficients, equals, rhs.coefficients, return, false]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:hashCode:null#[return, ^, Double, valueOf, constantTerm, hashCode, coefficients, hashCode]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:writeObject:ObjectOutputStream#[oos, defaultWriteObject, MatrixUtils, serializeRealVector, coefficients, oos]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:readObject:ObjectInputStream#[ois, defaultReadObject, MatrixUtils, deserializeRealVector, this, "coefficients", ois]
org.apache.commons.math4.optim.linear:LinearOptimizer:isRestrictedToNonNegative:null#[return, nonNegative]
org.apache.commons.math4.optim.linear:LinearOptimizer:getFunction:null#[return, function]
org.apache.commons.math4.optim.linear:LinearOptimizer:getConstraints:null#[return, Collections, unmodifiableCollection, linearConstraints]
org.apache.commons.math4.optim.linear:LinearOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.linear:LinearOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, for, OptimizationData, data, optData, if, instanceof, data, LinearObjectiveFunction, =, function, LinearObjectiveFunction, data, continue, if, instanceof, data, LinearConstraintSet, =, linearConstraints, LinearConstraintSet, data, getConstraints, continue, if, instanceof, data, NonNegativeConstraint, =, nonNegative, NonNegativeConstraint, data, isRestrictedToNonNegative, continue]
org.apache.commons.math4.optim.linear:NonNegativeConstraint:isRestrictedToNonNegative:null#[return, isRestricted]
org.apache.commons.math4.optim.linear:SimplexSolver:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.linear:SimplexSolver:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, =, solutionCallback, null, for, OptimizationData, data, optData, if, instanceof, data, SolutionCallback, =, solutionCallback, SolutionCallback, data, continue, if, instanceof, data, PivotSelectionRule, =, pivotSelection, PivotSelectionRule, data, continue]
org.apache.commons.math4.optim.linear:SimplexSolver:getPivotColumn:SimplexTableau#[double, minValue, 0, Integer, minPos, null, for, int, i, tableau, getNumObjectiveFunctions, <, i, -, tableau, getWidth, 1, ++, i, final, double, entry, tableau, getEntry, 0, i, if, <, entry, minValue, =, minValue, entry, =, minPos, i, if, &&, ==, pivotSelection, PivotSelectionRule.BLAND, isValidPivotColumn, tableau, i, break, return, minPos]
org.apache.commons.math4.optim.linear:SimplexSolver:isValidPivotColumn:SimplexTableau+int#[for, int, i, tableau, getNumObjectiveFunctions, <, i, tableau, getHeight, ++, i, final, double, entry, tableau, getEntry, i, col, if, >, Precision, compareTo, entry, 0d, cutOff, 0, return, true, return, false]
org.apache.commons.math4.optim.linear:SimplexSolver:getPivotRow:SimplexTableau+int#[List, Integer, minRatioPositions, new, ArrayList, Integer, double, minRatio, Double.MAX_VALUE, for, int, i, tableau, getNumObjectiveFunctions, <, i, tableau, getHeight, ++, i, final, double, rhs, tableau, getEntry, i, -, tableau, getWidth, 1, final, double, entry, tableau, getEntry, i, col, if, >, Precision, compareTo, entry, 0d, cutOff, 0, final, double, ratio, FastMath, abs, /, rhs, entry, final, int, cmp, Double, compare, ratio, minRatio, if, ==, cmp, 0, minRatioPositions, add, i, if, <, cmp, 0, =, minRatio, ratio, minRatioPositions, clear, minRatioPositions, add, i, if, ==, minRatioPositions, size, 0, return, null, if, >, minRatioPositions, size, 1, if, >, tableau, getNumArtificialVariables, 0, for, Integer, row, minRatioPositions, for, int, i, 0, <, i, tableau, getNumArtificialVariables, ++, i, int, column, +, i, tableau, getArtificialVariableOffset, final, double, entry, tableau, getEntry, row, column, if, &&, Precision, equals, entry, 1d, maxUlps, row, equals, tableau, getBasicRow, column, return, row, Integer, minRow, null, int, minIndex, tableau, getWidth, for, Integer, row, minRatioPositions, final, int, basicVar, tableau, getBasicVariable, row, if, <, basicVar, minIndex, =, minIndex, basicVar, =, minRow, row, return, minRow, return, minRatioPositions, get, 0]
org.apache.commons.math4.optim.linear:SimplexSolver:doIteration:SimplexTableau#[incrementIterationCount, Integer, pivotCol, getPivotColumn, tableau, Integer, pivotRow, getPivotRow, tableau, pivotCol, if, ==, pivotRow, null, throw, new, UnboundedSolutionException, tableau, performRowOperations, pivotCol, pivotRow]
org.apache.commons.math4.optim.linear:SimplexSolver:solvePhase1:SimplexTableau#[if, ==, tableau, getNumArtificialVariables, 0, return, while, !, tableau, isOptimal, doIteration, tableau, if, !, Precision, equals, tableau, getEntry, 0, tableau, getRhsOffset, 0d, epsilon, throw, new, NoFeasibleSolutionException]
org.apache.commons.math4.optim.linear:SimplexSolver:doOptimize:null#[if, !=, solutionCallback, null, solutionCallback, setTableau, null, final, SimplexTableau, tableau, new, SimplexTableau, getFunction, getConstraints, getGoalType, isRestrictedToNonNegative, epsilon, maxUlps, solvePhase1, tableau, tableau, dropPhase1Objective, if, !=, solutionCallback, null, solutionCallback, setTableau, tableau, while, !, tableau, isOptimal, doIteration, tableau, final, PointValuePair, solution, tableau, getSolution, if, isRestrictedToNonNegative, final, double, coeff, solution, getPoint, for, int, i, 0, <, i, coeff.length, ++, i, if, <, Precision, compareTo, coeff, i, 0, epsilon, 0, throw, new, NoFeasibleSolutionException, return, solution]
org.apache.commons.math4.optim.linear:SimplexTableau:checkDimensions:LinearObjectiveFunction+Collection<LinearConstraint>#[final, int, dimension, objectiveFunction, getCoefficients, getDimension, for, final, LinearConstraint, constraint, c, final, int, constraintDimension, constraint, getCoefficients, getDimension, if, !=, constraintDimension, dimension, throw, new, DimensionMismatchException, constraintDimension, dimension]
org.apache.commons.math4.optim.linear:SimplexTableau:initializeColumnLabels:null#[if, ==, getNumObjectiveFunctions, 2, columnLabels, add, "W", columnLabels, add, "Z", for, int, i, 0, <, i, getOriginalNumDecisionVariables, ++, i, columnLabels, add, +, "x", i, if, !, restrictToNonNegative, columnLabels, add, NEGATIVE_VAR_COLUMN_LABEL, for, int, i, 0, <, i, getNumSlackVariables, ++, i, columnLabels, add, +, "s", i, for, int, i, 0, <, i, getNumArtificialVariables, ++, i, columnLabels, add, +, "a", i, columnLabels, add, "RHS"]
org.apache.commons.math4.optim.linear:SimplexTableau:createTableau:boolean#[int, width, +, numDecisionVariables, numSlackVariables, numArtificialVariables, getNumObjectiveFunctions, 1, int, height, +, constraints, size, getNumObjectiveFunctions, Array2DRowRealMatrix, matrix, new, Array2DRowRealMatrix, height, width, if, ==, getNumObjectiveFunctions, 2, matrix, setEntry, 0, 0, -, 1, int, zIndex, ==, getNumObjectiveFunctions, 1, 0, 1, matrix, setEntry, zIndex, zIndex, maximize, 1, -, 1, RealVector, objectiveCoefficients, maximize, f, getCoefficients, mapMultiply, -, 1, f, getCoefficients, copyArray, objectiveCoefficients, toArray, matrix, getDataRef, zIndex, matrix, setEntry, zIndex, -, width, 1, maximize, f, getConstantTerm, *, -, 1, f, getConstantTerm, if, !, restrictToNonNegative, matrix, setEntry, zIndex, -, getSlackVariableOffset, 1, getInvertedCoefficientSum, objectiveCoefficients, int, slackVar, 0, int, artificialVar, 0, for, int, i, 0, <, i, constraints, size, ++, i, LinearConstraint, constraint, constraints, get, i, int, row, +, getNumObjectiveFunctions, i, copyArray, constraint, getCoefficients, toArray, matrix, getDataRef, row, if, !, restrictToNonNegative, matrix, setEntry, row, -, getSlackVariableOffset, 1, getInvertedCoefficientSum, constraint, getCoefficients, matrix, setEntry, row, -, width, 1, constraint, getValue, if, ==, constraint, getRelationship, Relationship.LEQ, matrix, setEntry, row, +, getSlackVariableOffset, ++, slackVar, 1, if, ==, constraint, getRelationship, Relationship.GEQ, matrix, setEntry, row, +, getSlackVariableOffset, ++, slackVar, -, 1, if, ||, ==, constraint, getRelationship, Relationship.EQ, ==, constraint, getRelationship, Relationship.GEQ, matrix, setEntry, 0, +, getArtificialVariableOffset, artificialVar, 1, matrix, setEntry, row, +, getArtificialVariableOffset, ++, artificialVar, 1, matrix, setRowVector, 0, matrix, getRowVector, 0, subtract, matrix, getRowVector, row, return, matrix]
org.apache.commons.math4.optim.linear:SimplexTableau:normalizeConstraints:Collection<LinearConstraint>#[List, LinearConstraint, normalized, new, ArrayList, LinearConstraint, originalConstraints, size, for, LinearConstraint, constraint, originalConstraints, normalized, add, normalize, constraint, return, normalized]
org.apache.commons.math4.optim.linear:SimplexTableau:normalize:LinearConstraint#[if, <, constraint, getValue, 0, return, new, LinearConstraint, constraint, getCoefficients, mapMultiply, -, 1, constraint, getRelationship, oppositeRelationship, *, -, 1, constraint, getValue, return, new, LinearConstraint, constraint, getCoefficients, constraint, getRelationship, constraint, getValue]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumObjectiveFunctions:null#[return, >, this, numArtificialVariables, 0, 2, 1]
org.apache.commons.math4.optim.linear:SimplexTableau:getConstraintTypeCounts:Relationship#[int, count, 0, for, final, LinearConstraint, constraint, constraints, if, ==, constraint, getRelationship, relationship, ++, count, return, count]
org.apache.commons.math4.optim.linear:SimplexTableau:getInvertedCoefficientSum:RealVector#[double, sum, 0, for, double, coefficient, coefficients, toArray, -=, sum, coefficient, return, sum]
org.apache.commons.math4.optim.linear:SimplexTableau:getBasicRow:int#[final, int, row, basicVariables, col, return, ==, row, -, 1, null, row]
org.apache.commons.math4.optim.linear:SimplexTableau:getBasicVariable:int#[return, basicRows, row]
org.apache.commons.math4.optim.linear:SimplexTableau:initializeBasicVariables:int#[=, basicVariables, int, -, getWidth, 1, =, basicRows, int, getHeight, Arrays, fill, basicVariables, -, 1, for, int, i, startColumn, <, i, -, getWidth, 1, ++, i, Integer, row, findBasicRow, i, if, !=, row, null, =, basicVariables, i, row, =, basicRows, row, i]
org.apache.commons.math4.optim.linear:SimplexTableau:findBasicRow:int#[Integer, row, null, for, int, i, 0, <, i, getHeight, ++, i, final, double, entry, getEntry, i, col, if, &&, Precision, equals, entry, 1d, maxUlps, ==, row, null, =, row, i, if, !, Precision, equals, entry, 0d, maxUlps, return, null, return, row]
org.apache.commons.math4.optim.linear:SimplexTableau:dropPhase1Objective:null#[if, ==, getNumObjectiveFunctions, 1, return, final, Set, Integer, columnsToDrop, new, TreeSet, Integer, columnsToDrop, add, 0, for, int, i, getNumObjectiveFunctions, <, i, getArtificialVariableOffset, ++, i, final, double, entry, getEntry, 0, i, if, >, Precision, compareTo, entry, 0d, epsilon, 0, columnsToDrop, add, i, for, int, i, 0, <, i, getNumArtificialVariables, ++, i, int, col, +, i, getArtificialVariableOffset, if, ==, getBasicRow, col, null, columnsToDrop, add, col, final, double, matrix, double, -, getHeight, 1, -, getWidth, columnsToDrop, size, for, int, i, 1, <, i, getHeight, ++, i, int, col, 0, for, int, j, 0, <, j, getWidth, ++, j, if, !, columnsToDrop, contains, j, =, matrix, -, i, 1, ++, col, getEntry, i, j, Integer, drop, columnsToDrop, toArray, Integer, columnsToDrop, size, for, int, i, -, drop.length, 1, >=, i, 0, --, i, columnLabels, remove, int, drop, i, =, this, tableau, new, Array2DRowRealMatrix, matrix, =, this, numArtificialVariables, 0, initializeBasicVariables, getNumObjectiveFunctions]
org.apache.commons.math4.optim.linear:SimplexTableau:copyArray:double[]+double[]#[System, arraycopy, src, 0, dest, getNumObjectiveFunctions, src.length]
org.apache.commons.math4.optim.linear:SimplexTableau:isOptimal:null#[final, double, objectiveFunctionRow, getRow, 0, final, int, end, getRhsOffset, for, int, i, getNumObjectiveFunctions, <, i, end, ++, i, final, double, entry, objectiveFunctionRow, i, if, <, Precision, compareTo, entry, 0d, epsilon, 0, return, false, return, true]
org.apache.commons.math4.optim.linear:SimplexTableau:getSolution:null#[int, negativeVarColumn, columnLabels, indexOf, NEGATIVE_VAR_COLUMN_LABEL, Integer, negativeVarBasicRow, >, negativeVarColumn, 0, getBasicRow, negativeVarColumn, null, double, mostNegative, ==, negativeVarBasicRow, null, 0, getEntry, negativeVarBasicRow, getRhsOffset, final, Set, Integer, usedBasicRows, new, HashSet, Integer, final, double, coefficients, double, getOriginalNumDecisionVariables, for, int, i, 0, <, i, coefficients.length, ++, i, int, colIndex, columnLabels, indexOf, +, "x", i, if, <, colIndex, 0, =, coefficients, i, 0, continue, Integer, basicRow, getBasicRow, colIndex, if, &&, !=, basicRow, null, ==, basicRow, 0, =, coefficients, i, 0, if, usedBasicRows, contains, basicRow, =, coefficients, i, -, 0, restrictToNonNegative, 0, mostNegative, usedBasicRows, add, basicRow, =, coefficients, i, -, ==, basicRow, null, 0, getEntry, basicRow, getRhsOffset, restrictToNonNegative, 0, mostNegative, return, new, PointValuePair, coefficients, f, value, coefficients]
org.apache.commons.math4.optim.linear:SimplexTableau:performRowOperations:int+int#[final, double, pivotVal, getEntry, pivotRow, pivotCol, divideRow, pivotRow, pivotVal, for, int, i, 0, <, i, getHeight, ++, i, if, !=, i, pivotRow, final, double, multiplier, getEntry, i, pivotCol, if, !=, multiplier, 0.0, subtractRow, i, pivotRow, multiplier, final, int, previousBasicVariable, getBasicVariable, pivotRow, =, basicVariables, previousBasicVariable, -, 1, =, basicVariables, pivotCol, pivotRow, =, basicRows, pivotRow, pivotCol]
org.apache.commons.math4.optim.linear:SimplexTableau:divideRow:int+double#[final, double, dividendRow, getRow, dividendRowIndex, for, int, j, 0, <, j, getWidth, ++, j, /=, dividendRow, j, divisor]
org.apache.commons.math4.optim.linear:SimplexTableau:subtractRow:int+int+double#[final, double, minuendRow, getRow, minuendRowIndex, final, double, subtrahendRow, getRow, subtrahendRowIndex, for, int, i, 0, <, i, getWidth, ++, i, -=, minuendRow, i, *, subtrahendRow, i, multiplier]
org.apache.commons.math4.optim.linear:SimplexTableau:getWidth:null#[return, tableau, getColumnDimension]
org.apache.commons.math4.optim.linear:SimplexTableau:getHeight:null#[return, tableau, getRowDimension]
org.apache.commons.math4.optim.linear:SimplexTableau:getEntry:int+int#[return, tableau, getEntry, row, column]
org.apache.commons.math4.optim.linear:SimplexTableau:setEntry:int+int+double#[tableau, setEntry, row, column, value]
org.apache.commons.math4.optim.linear:SimplexTableau:getSlackVariableOffset:null#[return, +, getNumObjectiveFunctions, numDecisionVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getArtificialVariableOffset:null#[return, +, getNumObjectiveFunctions, numDecisionVariables, numSlackVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getRhsOffset:null#[return, -, getWidth, 1]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumDecisionVariables:null#[return, numDecisionVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getOriginalNumDecisionVariables:null#[return, f, getCoefficients, getDimension]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumSlackVariables:null#[return, numSlackVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumArtificialVariables:null#[return, numArtificialVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getRow:int#[return, tableau, getDataRef, row]
org.apache.commons.math4.optim.linear:SimplexTableau:getData:null#[return, tableau, getData]
org.apache.commons.math4.optim.linear:SimplexTableau:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, SimplexTableau, SimplexTableau, rhs, SimplexTableau, other, return, &&, ==, restrictToNonNegative, rhs.restrictToNonNegative, ==, numDecisionVariables, rhs.numDecisionVariables, ==, numSlackVariables, rhs.numSlackVariables, ==, numArtificialVariables, rhs.numArtificialVariables, ==, epsilon, rhs.epsilon, ==, maxUlps, rhs.maxUlps, f, equals, rhs.f, constraints, equals, rhs.constraints, tableau, equals, rhs.tableau, return, false]
org.apache.commons.math4.optim.linear:SimplexTableau:hashCode:null#[return, ^, Boolean, valueOf, restrictToNonNegative, hashCode, numDecisionVariables, numSlackVariables, numArtificialVariables, Double, valueOf, epsilon, hashCode, maxUlps, f, hashCode, constraints, hashCode, tableau, hashCode]
org.apache.commons.math4.optim.linear:SimplexTableau:writeObject:ObjectOutputStream#[oos, defaultWriteObject, MatrixUtils, serializeRealMatrix, tableau, oos]
org.apache.commons.math4.optim.linear:SimplexTableau:readObject:ObjectInputStream#[ois, defaultReadObject, MatrixUtils, deserializeRealMatrix, this, "tableau", ois]
org.apache.commons.math4.optim.linear:SolutionCallback:setTableau:SimplexTableau#[=, this, tableau, tableau]
org.apache.commons.math4.optim.linear:SolutionCallback:getSolution:null#[return, !=, tableau, null, tableau, getSolution, null]
org.apache.commons.math4.optim.linear:SolutionCallback:isSolutionOptimal:null#[return, !=, tableau, null, tableau, isOptimal, false]
org.apache.commons.math4.optim:MaxEval:getMaxEval:null#[return, maxEval]
org.apache.commons.math4.optim:MaxEval:unlimited:null#[return, new, MaxEval, Integer.MAX_VALUE]
org.apache.commons.math4.optim:MaxIter:getMaxIter:null#[return, maxIter]
org.apache.commons.math4.optim:MaxIter:unlimited:null#[return, new, MaxIter, Integer.MAX_VALUE]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:doOptimize:null#[final, ConvergenceChecker, PointValuePair, checker, getConvergenceChecker, final, double, point, getStartPoint, final, GoalType, goal, getGoalType, final, int, n, point.length, double, r, computeObjectiveGradient, point, if, ==, goal, GoalType.MINIMIZE, for, int, i, 0, <, i, n, ++, i, =, r, i, -, r, i, double, steepestDescent, preconditioner, precondition, point, r, double, searchDirection, steepestDescent, clone, double, delta, 0, for, int, i, 0, <, i, n, ++, i, +=, delta, *, r, i, searchDirection, i, PointValuePair, current, null, while, true, incrementIterationCount, final, double, objective, computeObjectiveValue, point, PointValuePair, previous, current, =, current, new, PointValuePair, point, objective, if, &&, !=, previous, null, checker, converged, getIterations, previous, current, return, current, final, double, step, line, search, point, searchDirection, getPoint, for, int, i, 0, <, i, point.length, ++, i, +=, point, i, *, step, searchDirection, i, =, r, computeObjectiveGradient, point, if, ==, goal, GoalType.MINIMIZE, for, int, i, 0, <, i, n, ++, i, =, r, i, -, r, i, final, double, deltaOld, delta, final, double, newSteepestDescent, preconditioner, precondition, point, r, =, delta, 0, for, int, i, 0, <, i, n, ++, i, +=, delta, *, r, i, newSteepestDescent, i, final, double, beta, switch, updateFormula, case, FLETCHER_REEVES, =, beta, /, delta, deltaOld, break, case, POLAK_RIBIERE, double, deltaMid, 0, for, int, i, 0, <, i, r.length, ++, i, +=, deltaMid, *, r, i, steepestDescent, i, =, beta, /, -, delta, deltaMid, deltaOld, break, default, throw, new, MathInternalError, =, steepestDescent, newSteepestDescent, if, ||, ==, %, getIterations, n, 0, <, beta, 0, =, searchDirection, steepestDescent, clone, for, int, i, 0, <, i, n, ++, i, =, searchDirection, i, +, steepestDescent, i, *, beta, searchDirection, i]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, checkParameters]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:checkParameters:null#[if, ||, !=, getLowerBound, null, !=, getUpperBound, null, throw, new, MathUnsupportedOperationException, LocalizedFormats.CONSTRAINT]
org.apache.commons.math4.optim.nonlinear.scalar:GradientMultivariateOptimizer:computeObjectiveGradient:double[]#[return, gradient, value, params]
org.apache.commons.math4.optim.nonlinear.scalar:GradientMultivariateOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar:GradientMultivariateOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, for, OptimizationData, data, optData, if, instanceof, data, ObjectiveFunctionGradient, =, gradient, ObjectiveFunctionGradient, data, getObjectiveFunctionGradient, break]
org.apache.commons.math4.optim.nonlinear.scalar:LeastSquaresConverter:value:double[]#[final, double, residuals, function, value, point, if, !=, residuals.length, observations.length, throw, new, DimensionMismatchException, residuals.length, observations.length, for, int, i, 0, <, i, residuals.length, ++, i, -=, residuals, i, observations, i, double, sumSquares, 0, if, !=, weights, null, for, int, i, 0, <, i, residuals.length, ++, i, final, double, ri, residuals, i, +=, sumSquares, *, weights, i, ri, ri, if, !=, scale, null, for, final, double, yi, scale, operate, residuals, +=, sumSquares, *, yi, yi, for, final, double, ri, residuals, +=, sumSquares, *, ri, ri, return, sumSquares]
org.apache.commons.math4.optim.nonlinear.scalar:LineSearch:search:double[]+double[]#[final, int, n, startPoint.length, final, UnivariateFunction, f, new, UnivariateFunction, Override, public, double, value, double, alpha, final, double, x, double, n, for, int, i, 0, <, i, n, ++, i, =, x, i, +, startPoint, i, *, alpha, direction, i, final, double, obj, mainOptimizer, computeObjectiveValue, x, return, obj, final, GoalType, goal, mainOptimizer, getGoalType, bracket, search, f, goal, 0, initialBracketingRange, return, lineOptimizer, optimize, new, MaxEval, Integer.MAX_VALUE, new, UnivariateObjectiveFunction, f, goal, new, SearchInterval, bracket, getLo, bracket, getHi, bracket, getMid]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:getOptima:null#[Collections, sort, optima, getPairComparator, return, optima, toArray, PointValuePair, 0]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:store:PointValuePair#[optima, add, optimum]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:clear:null#[optima, clear]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:getPairComparator:null#[return, new, Comparator, PointValuePair, Override, public, int, compare, final, PointValuePair, o1, final, PointValuePair, o2, if, ==, o1, null, return, ==, o2, null, 0, 1, if, ==, o2, null, return, -, 1, final, double, v1, o1, getValue, final, double, v2, o2, getValue, return, ==, optimizer, getGoalType, GoalType.MINIMIZE, Double, compare, v1, v2, Double, compare, v2, v1]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionMappingAdapter:unboundedToBounded:double[]#[final, double, mapped, double, mappers.length, for, int, i, 0, <, i, mappers.length, ++, i, =, mapped, i, mappers, i, unboundedToBounded, point, i, return, mapped]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionMappingAdapter:boundedToUnbounded:double[]#[final, double, mapped, double, mappers.length, for, int, i, 0, <, i, mappers.length, ++, i, =, mapped, i, mappers, i, boundedToUnbounded, point, i, return, mapped]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionMappingAdapter:value:double[]#[return, bounded, value, unboundedToBounded, point]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionPenaltyAdapter:value:double[]#[for, int, i, 0, <, i, scale.length, ++, i, if, ||, <, point, i, lower, i, >, point, i, upper, i, double, sum, 0, for, int, j, i, <, j, scale.length, ++, j, final, double, overshoot, if, <, point, j, lower, j, =, overshoot, *, scale, j, -, lower, j, point, j, if, >, point, j, upper, j, =, overshoot, *, scale, j, -, point, j, upper, j, =, overshoot, 0, +=, sum, FastMath, sqrt, overshoot, return, +, offset, sum, return, bounded, value, point]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, for, OptimizationData, data, optData, if, instanceof, data, GoalType, =, goal, GoalType, data, continue, if, instanceof, data, ObjectiveFunction, =, function, ObjectiveFunction, data, getObjectiveFunction, continue]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:getGoalType:null#[return, goal]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:computeObjectiveValue:double[]#[super, incrementEvaluationCount, return, function, value, params]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getDimension:null#[return, dimension]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getSize:null#[return, simplex.length]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:build:double[]#[if, !=, dimension, startPoint.length, throw, new, DimensionMismatchException, dimension, startPoint.length, =, simplex, PointValuePair, +, dimension, 1, =, simplex, 0, new, PointValuePair, startPoint, Double.NaN, for, int, i, 0, <, i, dimension, ++, i, final, double, confI, startConfiguration, i, final, double, vertexI, double, dimension, for, int, k, 0, <, k, dimension, ++, k, =, vertexI, k, +, startPoint, k, confI, k, =, simplex, +, i, 1, new, PointValuePair, vertexI, Double.NaN]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:evaluate:MultivariateFunction+Comparator<PointValuePair>#[for, int, i, 0, <, i, simplex.length, ++, i, final, PointValuePair, vertex, simplex, i, final, double, point, vertex, getPointRef, if, Double, isNaN, vertex, getValue, =, simplex, i, new, PointValuePair, point, evaluationFunction, value, point, false, Arrays, sort, simplex, comparator]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:replaceWorstPoint:PointValuePair+Comparator<PointValuePair>#[for, int, i, 0, <, i, dimension, ++, i, if, >, comparator, compare, simplex, i, pointValuePair, 0, PointValuePair, tmp, simplex, i, =, simplex, i, pointValuePair, =, pointValuePair, tmp, =, simplex, dimension, pointValuePair]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getPoints:null#[final, PointValuePair, copy, PointValuePair, simplex.length, System, arraycopy, simplex, 0, copy, 0, simplex.length, return, copy]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getPoint:int#[if, ||, <, index, 0, >=, index, simplex.length, throw, new, OutOfRangeException, index, 0, -, simplex.length, 1, return, simplex, index]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:setPoint:int+PointValuePair#[if, ||, <, index, 0, >=, index, simplex.length, throw, new, OutOfRangeException, index, 0, -, simplex.length, 1, =, simplex, index, point]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:setPoints:PointValuePair[]#[if, !=, points.length, simplex.length, throw, new, DimensionMismatchException, points.length, simplex.length, =, simplex, points]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:createHypercubeSteps:int+double#[final, double, steps, double, n, for, int, i, 0, <, i, n, ++, i, =, steps, i, sideLength, return, steps]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:doOptimize:null#[final, double, lowerBound, getLowerBound, final, double, upperBound, getUpperBound, setup, lowerBound, upperBound, =, isMinimize, ==, getGoalType, GoalType.MINIMIZE, =, currentBest, new, ArrayRealVector, getStartPoint, final, double, value, bobyqa, lowerBound, upperBound, return, new, PointValuePair, currentBest, getDataRef, isMinimize, value, -, value]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:bobyqa:double[]+double[]#[printMethod, final, int, n, currentBest, getDimension, for, int, j, 0, <, j, n, ++, j, final, double, boundDiff, boundDifference, j, lowerDifference, setEntry, j, -, lowerBound, j, currentBest, getEntry, j, upperDifference, setEntry, j, -, upperBound, j, currentBest, getEntry, j, if, >=, lowerDifference, getEntry, j, -, initialTrustRegionRadius, if, >=, lowerDifference, getEntry, j, ZERO, currentBest, setEntry, j, lowerBound, j, lowerDifference, setEntry, j, ZERO, upperDifference, setEntry, j, boundDiff, currentBest, setEntry, j, +, lowerBound, j, initialTrustRegionRadius, lowerDifference, setEntry, j, -, initialTrustRegionRadius, final, double, deltaOne, -, upperBound, j, currentBest, getEntry, j, upperDifference, setEntry, j, FastMath, max, deltaOne, initialTrustRegionRadius, if, <=, upperDifference, getEntry, j, initialTrustRegionRadius, if, <=, upperDifference, getEntry, j, ZERO, currentBest, setEntry, j, upperBound, j, lowerDifference, setEntry, j, -, boundDiff, upperDifference, setEntry, j, ZERO, currentBest, setEntry, j, -, upperBound, j, initialTrustRegionRadius, final, double, deltaOne, -, lowerBound, j, currentBest, getEntry, j, final, double, deltaTwo, -, initialTrustRegionRadius, lowerDifference, setEntry, j, FastMath, min, deltaOne, deltaTwo, upperDifference, setEntry, j, initialTrustRegionRadius, return, bobyqb, lowerBound, upperBound]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:bobyqb:double[]+double[]#[printMethod, final, int, n, currentBest, getDimension, final, int, npt, numberOfInterpolationPoints, final, int, np, +, n, 1, final, int, nptm, -, npt, np, final, int, nh, /, *, n, np, 2, final, ArrayRealVector, work1, new, ArrayRealVector, n, final, ArrayRealVector, work2, new, ArrayRealVector, npt, final, ArrayRealVector, work3, new, ArrayRealVector, npt, double, cauchy, Double.NaN, double, alpha, Double.NaN, double, dsq, Double.NaN, double, crvmin, Double.NaN, =, trustRegionCenterInterpolationPointIndex, 0, prelim, lowerBound, upperBound, double, xoptsq, ZERO, for, int, i, 0, <, i, n, ++, i, trustRegionCenterOffset, setEntry, i, interpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, i, final, double, deltaOne, trustRegionCenterOffset, getEntry, i, +=, xoptsq, *, deltaOne, deltaOne, double, fsave, fAtInterpolationPoints, getEntry, 0, final, int, kbase, 0, int, ntrits, 0, int, itest, 0, int, knew, 0, int, nfsav, getEvaluations, double, rho, initialTrustRegionRadius, double, delta, rho, double, diffa, ZERO, double, diffb, ZERO, double, diffc, ZERO, double, f, ZERO, double, beta, ZERO, double, adelt, ZERO, double, denom, ZERO, double, ratio, ZERO, double, dnorm, ZERO, double, scaden, ZERO, double, biglsq, ZERO, double, distsq, ZERO, int, state, 20, for, switch, state, case, 20, printState, 20, if, !=, trustRegionCenterInterpolationPointIndex, kbase, int, ih, 0, for, int, j, 0, <, j, n, ++, j, for, int, i, 0, <=, i, j, ++, i, if, <, i, j, gradientAtTrustRegionCenter, setEntry, j, +, gradientAtTrustRegionCenter, getEntry, j, *, modelSecondDerivativesValues, getEntry, ih, trustRegionCenterOffset, getEntry, i, gradientAtTrustRegionCenter, setEntry, i, +, gradientAtTrustRegionCenter, getEntry, i, *, modelSecondDerivativesValues, getEntry, ih, trustRegionCenterOffset, getEntry, j, ++, ih, if, >, getEvaluations, npt, for, int, k, 0, <, k, npt, ++, k, double, temp, ZERO, for, int, j, 0, <, j, n, ++, j, +=, temp, *, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, *=, temp, modelSecondDerivativesParameters, getEntry, k, for, int, i, 0, <, i, n, ++, i, gradientAtTrustRegionCenter, setEntry, i, +, gradientAtTrustRegionCenter, getEntry, i, *, temp, interpolationPoints, getEntry, k, i, case, 60, printState, 60, final, ArrayRealVector, gnew, new, ArrayRealVector, n, final, ArrayRealVector, xbdi, new, ArrayRealVector, n, final, ArrayRealVector, s, new, ArrayRealVector, n, final, ArrayRealVector, hs, new, ArrayRealVector, n, final, ArrayRealVector, hred, new, ArrayRealVector, n, final, double, dsqCrvmin, trsbox, delta, gnew, xbdi, s, hs, hred, =, dsq, dsqCrvmin, 0, =, crvmin, dsqCrvmin, 1, double, deltaOne, delta, double, deltaTwo, FastMath, sqrt, dsq, =, dnorm, FastMath, min, deltaOne, deltaTwo, if, <, dnorm, *, HALF, rho, =, ntrits, -, 1, =, deltaOne, *, TEN, rho, =, distsq, *, deltaOne, deltaOne, if, <=, getEvaluations, +, nfsav, 2, =, state, 650, break, =, deltaOne, FastMath, max, diffa, diffb, final, double, errbig, FastMath, max, deltaOne, diffc, final, double, frhosq, *, rho, ONE_OVER_EIGHT, rho, if, &&, >, crvmin, ZERO, >, errbig, *, frhosq, crvmin, =, state, 650, break, final, double, bdtol, /, errbig, rho, for, int, j, 0, <, j, n, ++, j, double, bdtest, bdtol, if, ==, newPoint, getEntry, j, lowerDifference, getEntry, j, =, bdtest, work1, getEntry, j, if, ==, newPoint, getEntry, j, upperDifference, getEntry, j, =, bdtest, -, work1, getEntry, j, if, <, bdtest, bdtol, double, curv, modelSecondDerivativesValues, getEntry, /, +, j, *, j, j, 2, for, int, k, 0, <, k, npt, ++, k, final, double, d1, interpolationPoints, getEntry, k, j, +=, curv, *, modelSecondDerivativesParameters, getEntry, k, *, d1, d1, +=, bdtest, *, HALF, curv, rho, if, <, bdtest, bdtol, =, state, 650, break, =, state, 680, break, ++, ntrits, case, 90, printState, 90, if, <=, dsq, *, xoptsq, ONE_OVER_A_THOUSAND, final, double, fracsq, *, xoptsq, ONE_OVER_FOUR, double, sumpq, ZERO, for, int, k, 0, <, k, npt, ++, k, +=, sumpq, modelSecondDerivativesParameters, getEntry, k, double, sum, *, -, HALF, xoptsq, for, int, i, 0, <, i, n, ++, i, +=, sum, *, interpolationPoints, getEntry, k, i, trustRegionCenterOffset, getEntry, i, work2, setEntry, k, sum, final, double, temp, -, fracsq, *, HALF, sum, for, int, i, 0, <, i, n, ++, i, work1, setEntry, i, bMatrix, getEntry, k, i, lagrangeValuesAtNewPoint, setEntry, i, +, *, sum, interpolationPoints, getEntry, k, i, *, temp, trustRegionCenterOffset, getEntry, i, final, int, ip, +, npt, i, for, int, j, 0, <=, j, i, ++, j, bMatrix, setEntry, ip, j, +, +, bMatrix, getEntry, ip, j, *, work1, getEntry, i, lagrangeValuesAtNewPoint, getEntry, j, *, lagrangeValuesAtNewPoint, getEntry, i, work1, getEntry, j, for, int, m, 0, <, m, nptm, ++, m, double, sumz, ZERO, double, sumw, ZERO, for, int, k, 0, <, k, npt, ++, k, +=, sumz, zMatrix, getEntry, k, m, lagrangeValuesAtNewPoint, setEntry, k, *, work2, getEntry, k, zMatrix, getEntry, k, m, +=, sumw, lagrangeValuesAtNewPoint, getEntry, k, for, int, j, 0, <, j, n, ++, j, double, sum, *, -, *, fracsq, sumz, *, HALF, sumw, trustRegionCenterOffset, getEntry, j, for, int, k, 0, <, k, npt, ++, k, +=, sum, *, lagrangeValuesAtNewPoint, getEntry, k, interpolationPoints, getEntry, k, j, work1, setEntry, j, sum, for, int, k, 0, <, k, npt, ++, k, bMatrix, setEntry, k, j, +, bMatrix, getEntry, k, j, *, sum, zMatrix, getEntry, k, m, for, int, i, 0, <, i, n, ++, i, final, int, ip, +, i, npt, final, double, temp, work1, getEntry, i, for, int, j, 0, <=, j, i, ++, j, bMatrix, setEntry, ip, j, +, bMatrix, getEntry, ip, j, *, temp, work1, getEntry, j, int, ih, 0, for, int, j, 0, <, j, n, ++, j, work1, setEntry, j, *, -, HALF, sumpq, trustRegionCenterOffset, getEntry, j, for, int, k, 0, <, k, npt, ++, k, work1, setEntry, j, +, work1, getEntry, j, *, modelSecondDerivativesParameters, getEntry, k, interpolationPoints, getEntry, k, j, interpolationPoints, setEntry, k, j, -, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, for, int, i, 0, <=, i, j, ++, i, modelSecondDerivativesValues, setEntry, ih, +, +, modelSecondDerivativesValues, getEntry, ih, *, work1, getEntry, i, trustRegionCenterOffset, getEntry, j, *, trustRegionCenterOffset, getEntry, i, work1, getEntry, j, bMatrix, setEntry, +, npt, i, j, bMatrix, getEntry, +, npt, j, i, ++, ih, for, int, i, 0, <, i, n, ++, i, originShift, setEntry, i, +, originShift, getEntry, i, trustRegionCenterOffset, getEntry, i, newPoint, setEntry, i, -, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, lowerDifference, setEntry, i, -, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, upperDifference, setEntry, i, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, trustRegionCenterOffset, setEntry, i, ZERO, =, xoptsq, ZERO, if, ==, ntrits, 0, =, state, 210, break, =, state, 230, break, case, 210, printState, 210, final, double, alphaCauchy, altmov, knew, adelt, =, alpha, alphaCauchy, 0, =, cauchy, alphaCauchy, 1, for, int, i, 0, <, i, n, ++, i, trialStepPoint, setEntry, i, -, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, case, 230, printState, 230, for, int, k, 0, <, k, npt, ++, k, double, suma, ZERO, double, sumb, ZERO, double, sum, ZERO, for, int, j, 0, <, j, n, ++, j, +=, suma, *, interpolationPoints, getEntry, k, j, trialStepPoint, getEntry, j, +=, sumb, *, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, +=, sum, *, bMatrix, getEntry, k, j, trialStepPoint, getEntry, j, work3, setEntry, k, *, suma, +, *, HALF, suma, sumb, lagrangeValuesAtNewPoint, setEntry, k, sum, work2, setEntry, k, suma, =, beta, ZERO, for, int, m, 0, <, m, nptm, ++, m, double, sum, ZERO, for, int, k, 0, <, k, npt, ++, k, +=, sum, *, zMatrix, getEntry, k, m, work3, getEntry, k, -=, beta, *, sum, sum, for, int, k, 0, <, k, npt, ++, k, lagrangeValuesAtNewPoint, setEntry, k, +, lagrangeValuesAtNewPoint, getEntry, k, *, sum, zMatrix, getEntry, k, m, =, dsq, ZERO, double, bsum, ZERO, double, dx, ZERO, for, int, j, 0, <, j, n, ++, j, final, double, d1, trialStepPoint, getEntry, j, +=, dsq, *, d1, d1, double, sum, ZERO, for, int, k, 0, <, k, npt, ++, k, +=, sum, *, work3, getEntry, k, bMatrix, getEntry, k, j, +=, bsum, *, sum, trialStepPoint, getEntry, j, final, int, jp, +, npt, j, for, int, i, 0, <, i, n, ++, i, +=, sum, *, bMatrix, getEntry, jp, i, trialStepPoint, getEntry, i, lagrangeValuesAtNewPoint, setEntry, jp, sum, +=, bsum, *, sum, trialStepPoint, getEntry, j, +=, dx, *, trialStepPoint, getEntry, j, trustRegionCenterOffset, getEntry, j, =, beta, -, +, +, *, dx, dx, *, dsq, +, xoptsq, dx, dx, *, HALF, dsq, beta, bsum, lagrangeValuesAtNewPoint, setEntry, trustRegionCenterInterpolationPointIndex, +, lagrangeValuesAtNewPoint, getEntry, trustRegionCenterInterpolationPointIndex, ONE, if, ==, ntrits, 0, final, double, d1, lagrangeValuesAtNewPoint, getEntry, knew, =, denom, +, *, d1, d1, *, alpha, beta, if, &&, <, denom, cauchy, >, cauchy, ZERO, for, int, i, 0, <, i, n, ++, i, newPoint, setEntry, i, alternativeNewPoint, getEntry, i, trialStepPoint, setEntry, i, -, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, =, cauchy, ZERO, =, state, 230, break, final, double, delsq, *, delta, delta, =, scaden, ZERO, =, biglsq, ZERO, =, knew, 0, for, int, k, 0, <, k, npt, ++, k, if, ==, k, trustRegionCenterInterpolationPointIndex, continue, double, hdiag, ZERO, for, int, m, 0, <, m, nptm, ++, m, final, double, d1, zMatrix, getEntry, k, m, +=, hdiag, *, d1, d1, final, double, d2, lagrangeValuesAtNewPoint, getEntry, k, final, double, den, +, *, beta, hdiag, *, d2, d2, =, distsq, ZERO, for, int, j, 0, <, j, n, ++, j, final, double, d3, -, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, +=, distsq, *, d3, d3, final, double, d4, /, distsq, delsq, final, double, temp, FastMath, max, ONE, *, d4, d4, if, >, *, temp, den, scaden, =, scaden, *, temp, den, =, knew, k, =, denom, den, final, double, d5, lagrangeValuesAtNewPoint, getEntry, k, =, biglsq, FastMath, max, biglsq, *, temp, *, d5, d5, case, 360, printState, 360, for, int, i, 0, <, i, n, ++, i, final, double, d3, lowerBound, i, final, double, d4, +, originShift, getEntry, i, newPoint, getEntry, i, final, double, d1, FastMath, max, d3, d4, final, double, d2, upperBound, i, currentBest, setEntry, i, FastMath, min, d1, d2, if, ==, newPoint, getEntry, i, lowerDifference, getEntry, i, currentBest, setEntry, i, lowerBound, i, if, ==, newPoint, getEntry, i, upperDifference, getEntry, i, currentBest, setEntry, i, upperBound, i, =, f, computeObjectiveValue, currentBest, toArray, if, !, isMinimize, =, f, -, f, if, ==, ntrits, -, 1, =, fsave, f, =, state, 720, break, final, double, fopt, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, double, vquad, ZERO, int, ih, 0, for, int, j, 0, <, j, n, ++, j, +=, vquad, *, trialStepPoint, getEntry, j, gradientAtTrustRegionCenter, getEntry, j, for, int, i, 0, <=, i, j, ++, i, double, temp, *, trialStepPoint, getEntry, i, trialStepPoint, getEntry, j, if, ==, i, j, *=, temp, HALF, +=, vquad, *, modelSecondDerivativesValues, getEntry, ih, temp, ++, ih, for, int, k, 0, <, k, npt, ++, k, final, double, d1, work2, getEntry, k, final, double, d2, *, d1, d1, +=, vquad, *, HALF, modelSecondDerivativesParameters, getEntry, k, d2, final, double, diff, -, f, fopt, vquad, =, diffc, diffb, =, diffb, diffa, =, diffa, FastMath, abs, diff, if, >, dnorm, rho, =, nfsav, getEvaluations, if, >, ntrits, 0, if, >=, vquad, ZERO, throw, new, MathIllegalStateException, LocalizedFormats.TRUST_REGION_STEP_FAILED, vquad, =, ratio, /, -, f, fopt, vquad, final, double, hDelta, *, HALF, delta, if, <=, ratio, ONE_OVER_TEN, =, delta, FastMath, min, hDelta, dnorm, if, <=, ratio, .7, =, delta, FastMath, max, hDelta, dnorm, =, delta, FastMath, max, hDelta, *, 2, dnorm, if, <=, delta, *, rho, 1.5, =, delta, rho, if, <, f, fopt, final, int, ksav, knew, final, double, densav, denom, final, double, delsq, *, delta, delta, =, scaden, ZERO, =, biglsq, ZERO, =, knew, 0, for, int, k, 0, <, k, npt, ++, k, double, hdiag, ZERO, for, int, m, 0, <, m, nptm, ++, m, final, double, d1, zMatrix, getEntry, k, m, +=, hdiag, *, d1, d1, final, double, d1, lagrangeValuesAtNewPoint, getEntry, k, final, double, den, +, *, beta, hdiag, *, d1, d1, =, distsq, ZERO, for, int, j, 0, <, j, n, ++, j, final, double, d2, -, interpolationPoints, getEntry, k, j, newPoint, getEntry, j, +=, distsq, *, d2, d2, final, double, d3, /, distsq, delsq, final, double, temp, FastMath, max, ONE, *, d3, d3, if, >, *, temp, den, scaden, =, scaden, *, temp, den, =, knew, k, =, denom, den, final, double, d4, lagrangeValuesAtNewPoint, getEntry, k, final, double, d5, *, temp, *, d4, d4, =, biglsq, FastMath, max, biglsq, d5, if, <=, scaden, *, HALF, biglsq, =, knew, ksav, =, denom, densav, update, beta, denom, knew, =, ih, 0, final, double, pqold, modelSecondDerivativesParameters, getEntry, knew, modelSecondDerivativesParameters, setEntry, knew, ZERO, for, int, i, 0, <, i, n, ++, i, final, double, temp, *, pqold, interpolationPoints, getEntry, knew, i, for, int, j, 0, <=, j, i, ++, j, modelSecondDerivativesValues, setEntry, ih, +, modelSecondDerivativesValues, getEntry, ih, *, temp, interpolationPoints, getEntry, knew, j, ++, ih, for, int, m, 0, <, m, nptm, ++, m, final, double, temp, *, diff, zMatrix, getEntry, knew, m, for, int, k, 0, <, k, npt, ++, k, modelSecondDerivativesParameters, setEntry, k, +, modelSecondDerivativesParameters, getEntry, k, *, temp, zMatrix, getEntry, k, m, fAtInterpolationPoints, setEntry, knew, f, for, int, i, 0, <, i, n, ++, i, interpolationPoints, setEntry, knew, i, newPoint, getEntry, i, work1, setEntry, i, bMatrix, getEntry, knew, i, for, int, k, 0, <, k, npt, ++, k, double, suma, ZERO, for, int, m, 0, <, m, nptm, ++, m, +=, suma, *, zMatrix, getEntry, knew, m, zMatrix, getEntry, k, m, double, sumb, ZERO, for, int, j, 0, <, j, n, ++, j, +=, sumb, *, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, final, double, temp, *, suma, sumb, for, int, i, 0, <, i, n, ++, i, work1, setEntry, i, +, work1, getEntry, i, *, temp, interpolationPoints, getEntry, k, i, for, int, i, 0, <, i, n, ++, i, gradientAtTrustRegionCenter, setEntry, i, +, gradientAtTrustRegionCenter, getEntry, i, *, diff, work1, getEntry, i, if, <, f, fopt, =, trustRegionCenterInterpolationPointIndex, knew, =, xoptsq, ZERO, =, ih, 0, for, int, j, 0, <, j, n, ++, j, trustRegionCenterOffset, setEntry, j, newPoint, getEntry, j, final, double, d1, trustRegionCenterOffset, getEntry, j, +=, xoptsq, *, d1, d1, for, int, i, 0, <=, i, j, ++, i, if, <, i, j, gradientAtTrustRegionCenter, setEntry, j, +, gradientAtTrustRegionCenter, getEntry, j, *, modelSecondDerivativesValues, getEntry, ih, trialStepPoint, getEntry, i, gradientAtTrustRegionCenter, setEntry, i, +, gradientAtTrustRegionCenter, getEntry, i, *, modelSecondDerivativesValues, getEntry, ih, trialStepPoint, getEntry, j, ++, ih, for, int, k, 0, <, k, npt, ++, k, double, temp, ZERO, for, int, j, 0, <, j, n, ++, j, +=, temp, *, interpolationPoints, getEntry, k, j, trialStepPoint, getEntry, j, *=, temp, modelSecondDerivativesParameters, getEntry, k, for, int, i, 0, <, i, n, ++, i, gradientAtTrustRegionCenter, setEntry, i, +, gradientAtTrustRegionCenter, getEntry, i, *, temp, interpolationPoints, getEntry, k, i, if, >, ntrits, 0, for, int, k, 0, <, k, npt, ++, k, lagrangeValuesAtNewPoint, setEntry, k, -, fAtInterpolationPoints, getEntry, k, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, work3, setEntry, k, ZERO, for, int, j, 0, <, j, nptm, ++, j, double, sum, ZERO, for, int, k, 0, <, k, npt, ++, k, +=, sum, *, zMatrix, getEntry, k, j, lagrangeValuesAtNewPoint, getEntry, k, for, int, k, 0, <, k, npt, ++, k, work3, setEntry, k, +, work3, getEntry, k, *, sum, zMatrix, getEntry, k, j, for, int, k, 0, <, k, npt, ++, k, double, sum, ZERO, for, int, j, 0, <, j, n, ++, j, +=, sum, *, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, work2, setEntry, k, work3, getEntry, k, work3, setEntry, k, *, sum, work3, getEntry, k, double, gqsq, ZERO, double, gisq, ZERO, for, int, i, 0, <, i, n, ++, i, double, sum, ZERO, for, int, k, 0, <, k, npt, ++, k, +=, sum, +, *, bMatrix, getEntry, k, i, lagrangeValuesAtNewPoint, getEntry, k, *, interpolationPoints, getEntry, k, i, work3, getEntry, k, if, ==, trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, final, double, d1, FastMath, min, ZERO, gradientAtTrustRegionCenter, getEntry, i, +=, gqsq, *, d1, d1, final, double, d2, FastMath, min, ZERO, sum, +=, gisq, *, d2, d2, if, ==, trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, final, double, d1, FastMath, max, ZERO, gradientAtTrustRegionCenter, getEntry, i, +=, gqsq, *, d1, d1, final, double, d2, FastMath, max, ZERO, sum, +=, gisq, *, d2, d2, final, double, d1, gradientAtTrustRegionCenter, getEntry, i, +=, gqsq, *, d1, d1, +=, gisq, *, sum, sum, lagrangeValuesAtNewPoint, setEntry, +, npt, i, sum, ++, itest, if, <, gqsq, *, TEN, gisq, =, itest, 0, if, >=, itest, 3, for, int, i, 0, max, FastMath, max, npt, nh, <, i, max, ++, i, if, <, i, n, gradientAtTrustRegionCenter, setEntry, i, lagrangeValuesAtNewPoint, getEntry, +, npt, i, if, <, i, npt, modelSecondDerivativesParameters, setEntry, i, work2, getEntry, i, if, <, i, nh, modelSecondDerivativesValues, setEntry, i, ZERO, =, itest, 0, if, ==, ntrits, 0, =, state, 60, break, if, <=, f, +, fopt, *, ONE_OVER_TEN, vquad, =, state, 60, break, final, double, d1, *, TWO, delta, final, double, d2, *, TEN, rho, =, distsq, FastMath, max, *, d1, d1, *, d2, d2, case, 650, printState, 650, =, knew, -, 1, for, int, k, 0, <, k, npt, ++, k, double, sum, ZERO, for, int, j, 0, <, j, n, ++, j, final, double, d1, -, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, +=, sum, *, d1, d1, if, >, sum, distsq, =, knew, k, =, distsq, sum, if, >=, knew, 0, final, double, dist, FastMath, sqrt, distsq, if, ==, ntrits, -, 1, =, delta, FastMath, min, *, ONE_OVER_TEN, delta, *, HALF, dist, if, <=, delta, *, rho, 1.5, =, delta, rho, =, ntrits, 0, final, double, d1, FastMath, min, *, ONE_OVER_TEN, dist, delta, =, adelt, FastMath, max, d1, rho, =, dsq, *, adelt, adelt, =, state, 90, break, if, ==, ntrits, -, 1, =, state, 680, break, if, >, ratio, ZERO, =, state, 60, break, if, >, FastMath, max, delta, dnorm, rho, =, state, 60, break, case, 680, printState, 680, if, >, rho, stoppingTrustRegionRadius, =, delta, *, HALF, rho, =, ratio, /, rho, stoppingTrustRegionRadius, if, <=, ratio, SIXTEEN, =, rho, stoppingTrustRegionRadius, if, <=, ratio, TWO_HUNDRED_FIFTY, =, rho, *, FastMath, sqrt, ratio, stoppingTrustRegionRadius, *=, rho, ONE_OVER_TEN, =, delta, FastMath, max, delta, rho, =, ntrits, 0, =, nfsav, getEvaluations, =, state, 60, break, if, ==, ntrits, -, 1, =, state, 360, break, case, 720, printState, 720, if, <=, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, fsave, for, int, i, 0, <, i, n, ++, i, final, double, d3, lowerBound, i, final, double, d4, +, originShift, getEntry, i, trustRegionCenterOffset, getEntry, i, final, double, d1, FastMath, max, d3, d4, final, double, d2, upperBound, i, currentBest, setEntry, i, FastMath, min, d1, d2, if, ==, trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, currentBest, setEntry, i, lowerBound, i, if, ==, trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, currentBest, setEntry, i, upperBound, i, =, f, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, return, f, default, throw, new, MathIllegalStateException, LocalizedFormats.SIMPLE_MESSAGE, "bobyqb"]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:altmov:int+double#[printMethod, final, int, n, currentBest, getDimension, final, int, npt, numberOfInterpolationPoints, final, ArrayRealVector, glag, new, ArrayRealVector, n, final, ArrayRealVector, hcol, new, ArrayRealVector, npt, final, ArrayRealVector, work1, new, ArrayRealVector, n, final, ArrayRealVector, work2, new, ArrayRealVector, n, for, int, k, 0, <, k, npt, ++, k, hcol, setEntry, k, ZERO, for, int, j, 0, max, -, npt, n, 1, <, j, max, ++, j, final, double, tmp, zMatrix, getEntry, knew, j, for, int, k, 0, <, k, npt, ++, k, hcol, setEntry, k, +, hcol, getEntry, k, *, tmp, zMatrix, getEntry, k, j, final, double, alpha, hcol, getEntry, knew, final, double, ha, *, HALF, alpha, for, int, i, 0, <, i, n, ++, i, glag, setEntry, i, bMatrix, getEntry, knew, i, for, int, k, 0, <, k, npt, ++, k, double, tmp, ZERO, for, int, j, 0, <, j, n, ++, j, +=, tmp, *, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, *=, tmp, hcol, getEntry, k, for, int, i, 0, <, i, n, ++, i, glag, setEntry, i, +, glag, getEntry, i, *, tmp, interpolationPoints, getEntry, k, i, double, presav, ZERO, double, step, Double.NaN, int, ksav, 0, int, ibdsav, 0, double, stpsav, 0, for, int, k, 0, <, k, npt, ++, k, if, ==, k, trustRegionCenterInterpolationPointIndex, continue, double, dderiv, ZERO, double, distsq, ZERO, for, int, i, 0, <, i, n, ++, i, final, double, tmp, -, interpolationPoints, getEntry, k, i, trustRegionCenterOffset, getEntry, i, +=, dderiv, *, glag, getEntry, i, tmp, +=, distsq, *, tmp, tmp, double, subd, /, adelt, FastMath, sqrt, distsq, double, slbd, -, subd, int, ilbd, 0, int, iubd, 0, final, double, sumin, FastMath, min, ONE, subd, for, int, i, 0, <, i, n, ++, i, final, double, tmp, -, interpolationPoints, getEntry, k, i, trustRegionCenterOffset, getEntry, i, if, >, tmp, ZERO, if, <, *, slbd, tmp, -, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, =, slbd, /, -, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, =, ilbd, -, -, i, 1, if, >, *, subd, tmp, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, =, subd, FastMath, max, sumin, /, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, =, iubd, +, i, 1, if, <, tmp, ZERO, if, >, *, slbd, tmp, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, =, slbd, /, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, =, ilbd, +, i, 1, if, <, *, subd, tmp, -, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, =, subd, FastMath, max, sumin, /, -, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, =, iubd, -, -, i, 1, =, step, slbd, int, isbd, ilbd, double, vlag, Double.NaN, if, ==, k, knew, final, double, diff, -, dderiv, ONE, =, vlag, *, slbd, -, dderiv, *, slbd, diff, final, double, d1, *, subd, -, dderiv, *, subd, diff, if, >, FastMath, abs, d1, FastMath, abs, vlag, =, step, subd, =, vlag, d1, =, isbd, iubd, final, double, d2, *, HALF, dderiv, final, double, d3, -, d2, *, diff, slbd, final, double, d4, -, d2, *, diff, subd, if, <, *, d3, d4, ZERO, final, double, d5, /, *, d2, d2, diff, if, >, FastMath, abs, d5, FastMath, abs, vlag, =, step, /, d2, diff, =, vlag, d5, =, isbd, 0, =, vlag, *, slbd, -, ONE, slbd, final, double, tmp, *, subd, -, ONE, subd, if, >, FastMath, abs, tmp, FastMath, abs, vlag, =, step, subd, =, vlag, tmp, =, isbd, iubd, if, &&, >, subd, HALF, <, FastMath, abs, vlag, ONE_OVER_FOUR, =, step, HALF, =, vlag, ONE_OVER_FOUR, =, isbd, 0, *=, vlag, dderiv, final, double, tmp, *, step, -, ONE, step, distsq, final, double, predsq, *, vlag, vlag, +, *, vlag, vlag, *, ha, tmp, tmp, if, >, predsq, presav, =, presav, predsq, =, ksav, k, =, stpsav, step, =, ibdsav, isbd, for, int, i, 0, <, i, n, ++, i, final, double, tmp, +, trustRegionCenterOffset, getEntry, i, *, stpsav, -, interpolationPoints, getEntry, ksav, i, trustRegionCenterOffset, getEntry, i, newPoint, setEntry, i, FastMath, max, lowerDifference, getEntry, i, FastMath, min, upperDifference, getEntry, i, tmp, if, <, ibdsav, 0, newPoint, setEntry, -, -, ibdsav, 1, lowerDifference, getEntry, -, -, ibdsav, 1, if, >, ibdsav, 0, newPoint, setEntry, -, ibdsav, 1, upperDifference, getEntry, -, ibdsav, 1, final, double, bigstp, +, adelt, adelt, int, iflag, 0, double, cauchy, Double.NaN, double, csave, ZERO, while, true, double, wfixsq, ZERO, double, ggfree, ZERO, for, int, i, 0, <, i, n, ++, i, final, double, glagValue, glag, getEntry, i, work1, setEntry, i, ZERO, if, ||, >, FastMath, min, -, trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, glagValue, ZERO, <, FastMath, max, -, trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, glagValue, ZERO, work1, setEntry, i, bigstp, +=, ggfree, *, glagValue, glagValue, if, ==, ggfree, ZERO, return, double, alpha, ZERO, final, double, tmp1, -, *, adelt, adelt, wfixsq, if, >, tmp1, ZERO, =, step, FastMath, sqrt, /, tmp1, ggfree, =, ggfree, ZERO, for, int, i, 0, <, i, n, ++, i, if, ==, work1, getEntry, i, bigstp, final, double, tmp2, -, trustRegionCenterOffset, getEntry, i, *, step, glag, getEntry, i, if, <=, tmp2, lowerDifference, getEntry, i, work1, setEntry, i, -, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, final, double, d1, work1, getEntry, i, +=, wfixsq, *, d1, d1, if, >=, tmp2, upperDifference, getEntry, i, work1, setEntry, i, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, final, double, d1, work1, getEntry, i, +=, wfixsq, *, d1, d1, final, double, d1, glag, getEntry, i, +=, ggfree, *, d1, d1, double, gw, ZERO, for, int, i, 0, <, i, n, ++, i, final, double, glagValue, glag, getEntry, i, if, ==, work1, getEntry, i, bigstp, work1, setEntry, i, *, -, step, glagValue, final, double, min, FastMath, min, upperDifference, getEntry, i, +, trustRegionCenterOffset, getEntry, i, work1, getEntry, i, alternativeNewPoint, setEntry, i, FastMath, max, lowerDifference, getEntry, i, min, if, ==, work1, getEntry, i, ZERO, alternativeNewPoint, setEntry, i, trustRegionCenterOffset, getEntry, i, if, >, glagValue, ZERO, alternativeNewPoint, setEntry, i, lowerDifference, getEntry, i, alternativeNewPoint, setEntry, i, upperDifference, getEntry, i, +=, gw, *, glagValue, work1, getEntry, i, double, curv, ZERO, for, int, k, 0, <, k, npt, ++, k, double, tmp, ZERO, for, int, j, 0, <, j, n, ++, j, +=, tmp, *, interpolationPoints, getEntry, k, j, work1, getEntry, j, +=, curv, *, hcol, getEntry, k, tmp, tmp, if, ==, iflag, 1, =, curv, -, curv, if, &&, >, curv, -, gw, <, curv, *, -, gw, +, ONE, FastMath, sqrt, TWO, final, double, scale, /, -, gw, curv, for, int, i, 0, <, i, n, ++, i, final, double, tmp, +, trustRegionCenterOffset, getEntry, i, *, scale, work1, getEntry, i, alternativeNewPoint, setEntry, i, FastMath, max, lowerDifference, getEntry, i, FastMath, min, upperDifference, getEntry, i, tmp, final, double, d1, *, HALF, gw, scale, =, cauchy, *, d1, d1, final, double, d1, +, gw, *, HALF, curv, =, cauchy, *, d1, d1, if, ==, iflag, 0, for, int, i, 0, <, i, n, ++, i, glag, setEntry, i, -, glag, getEntry, i, work2, setEntry, i, alternativeNewPoint, getEntry, i, =, csave, cauchy, =, iflag, 1, break, if, >, csave, cauchy, for, int, i, 0, <, i, n, ++, i, alternativeNewPoint, setEntry, i, work2, getEntry, i, =, cauchy, csave, return, double, alpha, cauchy]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:prelim:double[]+double[]#[printMethod, final, int, n, currentBest, getDimension, final, int, npt, numberOfInterpolationPoints, final, int, ndim, bMatrix, getRowDimension, final, double, rhosq, *, initialTrustRegionRadius, initialTrustRegionRadius, final, double, recip, /, 1d, rhosq, final, int, np, +, n, 1, for, int, j, 0, <, j, n, ++, j, originShift, setEntry, j, currentBest, getEntry, j, for, int, k, 0, <, k, npt, ++, k, interpolationPoints, setEntry, k, j, ZERO, for, int, i, 0, <, i, ndim, ++, i, bMatrix, setEntry, i, j, ZERO, for, int, i, 0, max, /, *, n, np, 2, <, i, max, ++, i, modelSecondDerivativesValues, setEntry, i, ZERO, for, int, k, 0, <, k, npt, ++, k, modelSecondDerivativesParameters, setEntry, k, ZERO, for, int, j, 0, max, -, npt, np, <, j, max, ++, j, zMatrix, setEntry, k, j, ZERO, int, ipt, 0, int, jpt, 0, double, fbeg, Double.NaN, do, final, int, nfm, getEvaluations, final, int, nfx, -, nfm, n, final, int, nfmm, -, nfm, 1, final, int, nfxm, -, nfx, 1, double, stepa, 0, double, stepb, 0, if, <=, nfm, *, 2, n, if, &&, >=, nfm, 1, <=, nfm, n, =, stepa, initialTrustRegionRadius, if, ==, upperDifference, getEntry, nfmm, ZERO, =, stepa, -, stepa, interpolationPoints, setEntry, nfm, nfmm, stepa, if, >, nfm, n, =, stepa, interpolationPoints, getEntry, nfx, nfxm, =, stepb, -, initialTrustRegionRadius, if, ==, lowerDifference, getEntry, nfxm, ZERO, =, stepb, FastMath, min, *, TWO, initialTrustRegionRadius, upperDifference, getEntry, nfxm, if, ==, upperDifference, getEntry, nfxm, ZERO, =, stepb, FastMath, max, *, -, TWO, initialTrustRegionRadius, lowerDifference, getEntry, nfxm, interpolationPoints, setEntry, nfm, nfxm, stepb, final, int, tmp1, /, -, nfm, np, n, =, jpt, -, -, nfm, *, tmp1, n, n, =, ipt, +, jpt, tmp1, if, >, ipt, n, final, int, tmp2, jpt, =, jpt, -, ipt, n, =, ipt, tmp2, final, int, iptMinus1, -, ipt, 1, final, int, jptMinus1, -, jpt, 1, interpolationPoints, setEntry, nfm, iptMinus1, interpolationPoints, getEntry, ipt, iptMinus1, interpolationPoints, setEntry, nfm, jptMinus1, interpolationPoints, getEntry, jpt, jptMinus1, for, int, j, 0, <, j, n, ++, j, currentBest, setEntry, j, FastMath, min, FastMath, max, lowerBound, j, +, originShift, getEntry, j, interpolationPoints, getEntry, nfm, j, upperBound, j, if, ==, interpolationPoints, getEntry, nfm, j, lowerDifference, getEntry, j, currentBest, setEntry, j, lowerBound, j, if, ==, interpolationPoints, getEntry, nfm, j, upperDifference, getEntry, j, currentBest, setEntry, j, upperBound, j, final, double, objectiveValue, computeObjectiveValue, currentBest, toArray, final, double, f, isMinimize, objectiveValue, -, objectiveValue, final, int, numEval, getEvaluations, fAtInterpolationPoints, setEntry, nfm, f, if, ==, numEval, 1, =, fbeg, f, =, trustRegionCenterInterpolationPointIndex, 0, if, <, f, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, =, trustRegionCenterInterpolationPointIndex, nfm, if, <=, numEval, +, *, 2, n, 1, if, &&, >=, numEval, 2, <=, numEval, +, n, 1, gradientAtTrustRegionCenter, setEntry, nfmm, /, -, f, fbeg, stepa, if, <, npt, +, numEval, n, final, double, oneOverStepA, /, ONE, stepa, bMatrix, setEntry, 0, nfmm, -, oneOverStepA, bMatrix, setEntry, nfm, nfmm, oneOverStepA, bMatrix, setEntry, +, npt, nfmm, nfmm, *, -, HALF, rhosq, if, >=, numEval, +, n, 2, final, int, ih, -, /, *, nfx, +, nfx, 1, 2, 1, final, double, tmp, /, -, f, fbeg, stepb, final, double, diff, -, stepb, stepa, modelSecondDerivativesValues, setEntry, ih, /, *, TWO, -, tmp, gradientAtTrustRegionCenter, getEntry, nfxm, diff, gradientAtTrustRegionCenter, setEntry, nfxm, /, -, *, gradientAtTrustRegionCenter, getEntry, nfxm, stepb, *, tmp, stepa, diff, if, &&, <, *, stepa, stepb, ZERO, <, f, fAtInterpolationPoints, getEntry, -, nfm, n, fAtInterpolationPoints, setEntry, nfm, fAtInterpolationPoints, getEntry, -, nfm, n, fAtInterpolationPoints, setEntry, -, nfm, n, f, if, ==, trustRegionCenterInterpolationPointIndex, nfm, =, trustRegionCenterInterpolationPointIndex, -, nfm, n, interpolationPoints, setEntry, -, nfm, n, nfxm, stepb, interpolationPoints, setEntry, nfm, nfxm, stepa, bMatrix, setEntry, 0, nfxm, /, -, +, stepa, stepb, *, stepa, stepb, bMatrix, setEntry, nfm, nfxm, /, -, HALF, interpolationPoints, getEntry, -, nfm, n, nfxm, bMatrix, setEntry, -, nfm, n, nfxm, -, -, bMatrix, getEntry, 0, nfxm, bMatrix, getEntry, nfm, nfxm, zMatrix, setEntry, 0, nfxm, /, FastMath, sqrt, TWO, *, stepa, stepb, zMatrix, setEntry, nfm, nfxm, /, FastMath, sqrt, HALF, rhosq, zMatrix, setEntry, -, nfm, n, nfxm, -, -, zMatrix, getEntry, 0, nfxm, zMatrix, getEntry, nfm, nfxm, zMatrix, setEntry, 0, nfxm, recip, zMatrix, setEntry, nfm, nfxm, recip, zMatrix, setEntry, ipt, nfxm, -, recip, zMatrix, setEntry, jpt, nfxm, -, recip, final, int, ih, -, +, /, *, ipt, -, ipt, 1, 2, jpt, 1, final, double, tmp, *, interpolationPoints, getEntry, nfm, -, ipt, 1, interpolationPoints, getEntry, nfm, -, jpt, 1, modelSecondDerivativesValues, setEntry, ih, /, +, -, fbeg, fAtInterpolationPoints, getEntry, ipt, fAtInterpolationPoints, getEntry, jpt, f, tmp, <, getEvaluations, npt]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:trsbox:double+ArrayRealVector+ArrayRealVector+ArrayRealVector+ArrayRealVector+ArrayRealVector#[printMethod, final, int, n, currentBest, getDimension, final, int, npt, numberOfInterpolationPoints, double, dsq, Double.NaN, double, crvmin, Double.NaN, double, ds, int, iu, double, dhd, dhs, cth, shs, sth, ssq, beta, 0, sdec, blen, int, iact, -, 1, int, nact, 0, double, angt, 0, qred, int, isav, double, temp, 0, xsav, 0, xsum, 0, angbd, 0, dredg, 0, sredg, 0, int, iterc, double, resid, 0, delsq, 0, ggsav, 0, tempa, 0, tempb, 0, redmax, 0, dredsq, 0, redsav, 0, gredsq, 0, rednew, 0, int, itcsav, 0, double, rdprev, 0, rdnext, 0, stplen, 0, stepsq, 0, int, itermax, 0, =, iterc, 0, =, nact, 0, for, int, i, 0, <, i, n, ++, i, xbdi, setEntry, i, ZERO, if, <=, trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, if, >=, gradientAtTrustRegionCenter, getEntry, i, ZERO, xbdi, setEntry, i, MINUS_ONE, if, &&, >=, trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, <=, gradientAtTrustRegionCenter, getEntry, i, ZERO, xbdi, setEntry, i, ONE, if, !=, xbdi, getEntry, i, ZERO, ++, nact, trialStepPoint, setEntry, i, ZERO, gnew, setEntry, i, gradientAtTrustRegionCenter, getEntry, i, =, delsq, *, delta, delta, =, qred, ZERO, =, crvmin, MINUS_ONE, int, state, 20, for, switch, state, case, 20, printState, 20, =, beta, ZERO, case, 30, printState, 30, =, stepsq, ZERO, for, int, i, 0, <, i, n, ++, i, if, !=, xbdi, getEntry, i, ZERO, s, setEntry, i, ZERO, if, ==, beta, ZERO, s, setEntry, i, -, gnew, getEntry, i, s, setEntry, i, -, *, beta, s, getEntry, i, gnew, getEntry, i, final, double, d1, s, getEntry, i, +=, stepsq, *, d1, d1, if, ==, stepsq, ZERO, =, state, 190, break, if, ==, beta, ZERO, =, gredsq, stepsq, =, itermax, -, +, iterc, n, nact, if, <=, *, gredsq, delsq, *, qred, 1e-4, qred, =, state, 190, break, =, state, 210, break, case, 50, printState, 50, =, resid, delsq, =, ds, ZERO, =, shs, ZERO, for, int, i, 0, <, i, n, ++, i, if, ==, xbdi, getEntry, i, ZERO, final, double, d1, trialStepPoint, getEntry, i, -=, resid, *, d1, d1, +=, ds, *, s, getEntry, i, trialStepPoint, getEntry, i, +=, shs, *, s, getEntry, i, hs, getEntry, i, if, <=, resid, ZERO, =, state, 90, break, =, temp, FastMath, sqrt, +, *, stepsq, resid, *, ds, ds, if, <, ds, ZERO, =, blen, /, -, temp, ds, stepsq, =, blen, /, resid, +, temp, ds, =, stplen, blen, if, >, shs, ZERO, =, stplen, FastMath, min, blen, /, gredsq, shs, =, iact, -, 1, for, int, i, 0, <, i, n, ++, i, if, !=, s, getEntry, i, ZERO, =, xsum, +, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, if, >, s, getEntry, i, ZERO, =, temp, /, -, upperDifference, getEntry, i, xsum, s, getEntry, i, =, temp, /, -, lowerDifference, getEntry, i, xsum, s, getEntry, i, if, <, temp, stplen, =, stplen, temp, =, iact, i, =, sdec, ZERO, if, >, stplen, ZERO, ++, iterc, =, temp, /, shs, stepsq, if, &&, ==, iact, -, 1, >, temp, ZERO, =, crvmin, FastMath, min, crvmin, temp, if, ==, crvmin, MINUS_ONE, =, crvmin, temp, =, ggsav, gredsq, =, gredsq, ZERO, for, int, i, 0, <, i, n, ++, i, gnew, setEntry, i, +, gnew, getEntry, i, *, stplen, hs, getEntry, i, if, ==, xbdi, getEntry, i, ZERO, final, double, d1, gnew, getEntry, i, +=, gredsq, *, d1, d1, trialStepPoint, setEntry, i, +, trialStepPoint, getEntry, i, *, stplen, s, getEntry, i, final, double, d1, *, stplen, -, ggsav, *, HALF, stplen, shs, =, sdec, FastMath, max, d1, ZERO, +=, qred, sdec, if, >=, iact, 0, ++, nact, xbdi, setEntry, iact, ONE, if, <, s, getEntry, iact, ZERO, xbdi, setEntry, iact, MINUS_ONE, final, double, d1, trialStepPoint, getEntry, iact, -=, delsq, *, d1, d1, if, <=, delsq, ZERO, =, state, 190, break, =, state, 20, break, if, <, stplen, blen, if, ==, iterc, itermax, =, state, 190, break, if, <=, sdec, *, qred, .01, =, state, 190, break, =, beta, /, gredsq, ggsav, =, state, 30, break, case, 90, printState, 90, =, crvmin, ZERO, case, 100, printState, 100, if, >=, nact, -, n, 1, =, state, 190, break, =, dredsq, ZERO, =, dredg, ZERO, =, gredsq, ZERO, for, int, i, 0, <, i, n, ++, i, if, ==, xbdi, getEntry, i, ZERO, double, d1, trialStepPoint, getEntry, i, +=, dredsq, *, d1, d1, +=, dredg, *, trialStepPoint, getEntry, i, gnew, getEntry, i, =, d1, gnew, getEntry, i, +=, gredsq, *, d1, d1, s, setEntry, i, trialStepPoint, getEntry, i, s, setEntry, i, ZERO, =, itcsav, iterc, =, state, 210, break, case, 120, printState, 120, ++, iterc, =, temp, -, *, gredsq, dredsq, *, dredg, dredg, if, <=, temp, *, qred, 1e-4, qred, =, state, 190, break, =, temp, FastMath, sqrt, temp, for, int, i, 0, <, i, n, ++, i, if, ==, xbdi, getEntry, i, ZERO, s, setEntry, i, /, -, *, dredg, trialStepPoint, getEntry, i, *, dredsq, gnew, getEntry, i, temp, s, setEntry, i, ZERO, =, sredg, -, temp, =, angbd, ONE, =, iact, -, 1, for, int, i, 0, <, i, n, ++, i, if, ==, xbdi, getEntry, i, ZERO, =, tempa, -, +, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, lowerDifference, getEntry, i, =, tempb, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, if, <=, tempa, ZERO, ++, nact, xbdi, setEntry, i, MINUS_ONE, =, state, 100, break, if, <=, tempb, ZERO, ++, nact, xbdi, setEntry, i, ONE, =, state, 100, break, double, d1, trialStepPoint, getEntry, i, double, d2, s, getEntry, i, =, ssq, +, *, d1, d1, *, d2, d2, =, d1, -, trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, =, temp, -, ssq, *, d1, d1, if, >, temp, ZERO, =, temp, -, FastMath, sqrt, temp, s, getEntry, i, if, >, *, angbd, temp, tempa, =, angbd, /, tempa, temp, =, iact, i, =, xsav, MINUS_ONE, =, d1, -, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, =, temp, -, ssq, *, d1, d1, if, >, temp, ZERO, =, temp, +, FastMath, sqrt, temp, s, getEntry, i, if, >, *, angbd, temp, tempb, =, angbd, /, tempb, temp, =, iact, i, =, xsav, ONE, =, state, 210, break, case, 150, printState, 150, =, shs, ZERO, =, dhs, ZERO, =, dhd, ZERO, for, int, i, 0, <, i, n, ++, i, if, ==, xbdi, getEntry, i, ZERO, +=, shs, *, s, getEntry, i, hs, getEntry, i, +=, dhs, *, trialStepPoint, getEntry, i, hs, getEntry, i, +=, dhd, *, trialStepPoint, getEntry, i, hred, getEntry, i, =, redmax, ZERO, =, isav, -, 1, =, redsav, ZERO, =, iu, int, +, *, angbd, 17., 3.1, for, int, i, 0, <, i, iu, ++, i, =, angt, /, *, angbd, i, iu, =, sth, /, +, angt, angt, +, ONE, *, angt, angt, =, temp, +, shs, *, angt, -, -, *, angt, dhd, dhs, dhs, =, rednew, *, sth, -, -, *, angt, dredg, sredg, *, HALF, sth, temp, if, >, rednew, redmax, =, redmax, rednew, =, isav, i, =, rdprev, redsav, if, ==, i, +, isav, 1, =, rdnext, rednew, =, redsav, rednew, if, <, isav, 0, =, state, 190, break, if, <, isav, iu, =, temp, /, -, rdnext, rdprev, -, -, +, redmax, redmax, rdprev, rdnext, =, angt, /, *, angbd, +, isav, *, HALF, temp, iu, =, cth, /, -, ONE, *, angt, angt, +, ONE, *, angt, angt, =, sth, /, +, angt, angt, +, ONE, *, angt, angt, =, temp, +, shs, *, angt, -, -, *, angt, dhd, dhs, dhs, =, sdec, *, sth, -, -, *, angt, dredg, sredg, *, HALF, sth, temp, if, <=, sdec, ZERO, =, state, 190, break, =, dredg, ZERO, =, gredsq, ZERO, for, int, i, 0, <, i, n, ++, i, gnew, setEntry, i, +, +, gnew, getEntry, i, *, -, cth, ONE, hred, getEntry, i, *, sth, hs, getEntry, i, if, ==, xbdi, getEntry, i, ZERO, trialStepPoint, setEntry, i, +, *, cth, trialStepPoint, getEntry, i, *, sth, s, getEntry, i, +=, dredg, *, trialStepPoint, getEntry, i, gnew, getEntry, i, final, double, d1, gnew, getEntry, i, +=, gredsq, *, d1, d1, hred, setEntry, i, +, *, cth, hred, getEntry, i, *, sth, hs, getEntry, i, +=, qred, sdec, if, &&, >=, iact, 0, ==, isav, iu, ++, nact, xbdi, setEntry, iact, xsav, =, state, 100, break, if, >, sdec, *, qred, .01, =, state, 120, break, case, 190, printState, 190, =, dsq, ZERO, for, int, i, 0, <, i, n, ++, i, final, double, min, FastMath, min, +, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, upperDifference, getEntry, i, newPoint, setEntry, i, FastMath, max, min, lowerDifference, getEntry, i, if, ==, xbdi, getEntry, i, MINUS_ONE, newPoint, setEntry, i, lowerDifference, getEntry, i, if, ==, xbdi, getEntry, i, ONE, newPoint, setEntry, i, upperDifference, getEntry, i, trialStepPoint, setEntry, i, -, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, final, double, d1, trialStepPoint, getEntry, i, +=, dsq, *, d1, d1, return, double, dsq, crvmin, case, 210, printState, 210, int, ih, 0, for, int, j, 0, <, j, n, ++, j, hs, setEntry, j, ZERO, for, int, i, 0, <=, i, j, ++, i, if, <, i, j, hs, setEntry, j, +, hs, getEntry, j, *, modelSecondDerivativesValues, getEntry, ih, s, getEntry, i, hs, setEntry, i, +, hs, getEntry, i, *, modelSecondDerivativesValues, getEntry, ih, s, getEntry, j, ++, ih, final, RealVector, tmp, interpolationPoints, operate, s, ebeMultiply, modelSecondDerivativesParameters, for, int, k, 0, <, k, npt, ++, k, if, !=, modelSecondDerivativesParameters, getEntry, k, ZERO, for, int, i, 0, <, i, n, ++, i, hs, setEntry, i, +, hs, getEntry, i, *, tmp, getEntry, k, interpolationPoints, getEntry, k, i, if, !=, crvmin, ZERO, =, state, 50, break, if, >, iterc, itcsav, =, state, 150, break, for, int, i, 0, <, i, n, ++, i, hred, setEntry, i, hs, getEntry, i, =, state, 120, break, default, throw, new, MathIllegalStateException, LocalizedFormats.SIMPLE_MESSAGE, "trsbox"]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:update:double+double+int#[printMethod, final, int, n, currentBest, getDimension, final, int, npt, numberOfInterpolationPoints, final, int, nptm, -, npt, n, 1, final, ArrayRealVector, work, new, ArrayRealVector, +, npt, n, double, ztest, ZERO, for, int, k, 0, <, k, npt, ++, k, for, int, j, 0, <, j, nptm, ++, j, =, ztest, FastMath, max, ztest, FastMath, abs, zMatrix, getEntry, k, j, *=, ztest, 1e-20, for, int, j, 1, <, j, nptm, ++, j, final, double, d1, zMatrix, getEntry, knew, j, if, >, FastMath, abs, d1, ztest, final, double, d2, zMatrix, getEntry, knew, 0, final, double, d3, zMatrix, getEntry, knew, j, final, double, d4, FastMath, sqrt, +, *, d2, d2, *, d3, d3, final, double, d5, /, zMatrix, getEntry, knew, 0, d4, final, double, d6, /, zMatrix, getEntry, knew, j, d4, for, int, i, 0, <, i, npt, ++, i, final, double, d7, +, *, d5, zMatrix, getEntry, i, 0, *, d6, zMatrix, getEntry, i, j, zMatrix, setEntry, i, j, -, *, d5, zMatrix, getEntry, i, j, *, d6, zMatrix, getEntry, i, 0, zMatrix, setEntry, i, 0, d7, zMatrix, setEntry, knew, j, ZERO, for, int, i, 0, <, i, npt, ++, i, work, setEntry, i, *, zMatrix, getEntry, knew, 0, zMatrix, getEntry, i, 0, final, double, alpha, work, getEntry, knew, final, double, tau, lagrangeValuesAtNewPoint, getEntry, knew, lagrangeValuesAtNewPoint, setEntry, knew, -, lagrangeValuesAtNewPoint, getEntry, knew, ONE, final, double, sqrtDenom, FastMath, sqrt, denom, final, double, d1, /, tau, sqrtDenom, final, double, d2, /, zMatrix, getEntry, knew, 0, sqrtDenom, for, int, i, 0, <, i, npt, ++, i, zMatrix, setEntry, i, 0, -, *, d1, zMatrix, getEntry, i, 0, *, d2, lagrangeValuesAtNewPoint, getEntry, i, for, int, j, 0, <, j, n, ++, j, final, int, jp, +, npt, j, work, setEntry, jp, bMatrix, getEntry, knew, j, final, double, d3, /, -, *, alpha, lagrangeValuesAtNewPoint, getEntry, jp, *, tau, work, getEntry, jp, denom, final, double, d4, /, -, *, -, beta, work, getEntry, jp, *, tau, lagrangeValuesAtNewPoint, getEntry, jp, denom, for, int, i, 0, <=, i, jp, ++, i, bMatrix, setEntry, i, j, +, +, bMatrix, getEntry, i, j, *, d3, lagrangeValuesAtNewPoint, getEntry, i, *, d4, work, getEntry, i, if, >=, i, npt, bMatrix, setEntry, jp, -, i, npt, bMatrix, getEntry, i, j]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:setup:double[]+double[]#[printMethod, double, init, getStartPoint, final, int, dimension, init.length, if, <, dimension, MINIMUM_PROBLEM_DIMENSION, throw, new, NumberIsTooSmallException, dimension, MINIMUM_PROBLEM_DIMENSION, true, final, int, nPointsInterval, +, dimension, 2, /, *, +, dimension, 2, +, dimension, 1, 2, if, ||, <, numberOfInterpolationPoints, nPointsInterval, 0, >, numberOfInterpolationPoints, nPointsInterval, 1, throw, new, OutOfRangeException, LocalizedFormats.NUMBER_OF_INTERPOLATION_POINTS, numberOfInterpolationPoints, nPointsInterval, 0, nPointsInterval, 1, =, boundDifference, double, dimension, double, requiredMinDiff, *, 2, initialTrustRegionRadius, double, minDiff, Double.POSITIVE_INFINITY, for, int, i, 0, <, i, dimension, ++, i, =, boundDifference, i, -, upperBound, i, lowerBound, i, =, minDiff, FastMath, min, minDiff, boundDifference, i, if, <, minDiff, requiredMinDiff, =, initialTrustRegionRadius, /, minDiff, 3.0, =, bMatrix, new, Array2DRowRealMatrix, +, dimension, numberOfInterpolationPoints, dimension, =, zMatrix, new, Array2DRowRealMatrix, numberOfInterpolationPoints, -, numberOfInterpolationPoints, dimension, 1, =, interpolationPoints, new, Array2DRowRealMatrix, numberOfInterpolationPoints, dimension, =, originShift, new, ArrayRealVector, dimension, =, fAtInterpolationPoints, new, ArrayRealVector, numberOfInterpolationPoints, =, trustRegionCenterOffset, new, ArrayRealVector, dimension, =, gradientAtTrustRegionCenter, new, ArrayRealVector, dimension, =, lowerDifference, new, ArrayRealVector, dimension, =, upperDifference, new, ArrayRealVector, dimension, =, modelSecondDerivativesParameters, new, ArrayRealVector, numberOfInterpolationPoints, =, newPoint, new, ArrayRealVector, dimension, =, alternativeNewPoint, new, ArrayRealVector, dimension, =, trialStepPoint, new, ArrayRealVector, dimension, =, lagrangeValuesAtNewPoint, new, ArrayRealVector, +, dimension, numberOfInterpolationPoints, =, modelSecondDerivativesValues, new, ArrayRealVector, /, *, dimension, +, dimension, 1, 2]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:caller:int#[final, Throwable, t, new, Throwable, final, StackTraceElement, elements, t, getStackTrace, final, StackTraceElement, e, elements, n, return, +, e, getMethodName, " (at line ", e, getLineNumber, ")"]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsSigmaHistory:null#[return, statisticsSigmaHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsMeanHistory:null#[return, statisticsMeanHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsFitnessHistory:null#[return, statisticsFitnessHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsDHistory:null#[return, statisticsDHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:doOptimize:null#[=, isMinimize, getGoalType, equals, GoalType.MINIMIZE, final, FitnessFunction, fitfun, new, FitnessFunction, final, double, guess, getStartPoint, =, dimension, guess.length, initializeCMA, guess, =, iterations, 0, ValuePenaltyPair, valuePenalty, fitfun, value, guess, double, bestValue, +, valuePenalty.value, valuePenalty.penalty, push, fitnessHistory, bestValue, PointValuePair, optimum, new, PointValuePair, getStartPoint, isMinimize, bestValue, -, bestValue, PointValuePair, lastResult, null, generationLoop, for, =, iterations, 1, <=, iterations, maxIterations, ++, iterations, incrementIterationCount, final, RealMatrix, arz, randn1, dimension, lambda, final, RealMatrix, arx, zeros, dimension, lambda, final, double, fitness, double, lambda, final, ValuePenaltyPair, valuePenaltyPairs, ValuePenaltyPair, lambda, for, int, k, 0, <, k, lambda, ++, k, RealMatrix, arxk, null, for, int, i, 0, <, i, +, checkFeasableCount, 1, ++, i, if, <=, diagonalOnly, 0, =, arxk, xmean, add, BD, multiply, arz, getColumnMatrix, k, scalarMultiply, sigma, =, arxk, xmean, add, times, diagD, arz, getColumnMatrix, k, scalarMultiply, sigma, if, ||, >=, i, checkFeasableCount, fitfun, isFeasible, arxk, getColumn, 0, break, arz, setColumn, k, randn, dimension, copyColumn, arxk, 0, arx, k, try, =, valuePenaltyPairs, k, fitfun, value, arx, getColumn, k, catch, TooManyEvaluationsException, e, break, generationLoop, double, valueRange, valueRange, valuePenaltyPairs, for, int, iValue, 0, <, iValue, valuePenaltyPairs.length, ++, iValue, =, fitness, iValue, +, valuePenaltyPairs, iValue, value, *, valuePenaltyPairs, iValue, penalty, valueRange, final, int, arindex, sortedIndices, fitness, final, RealMatrix, xold, xmean, final, RealMatrix, bestArx, selectColumns, arx, MathArrays, copyOf, arindex, mu, =, xmean, bestArx, multiply, weights, final, RealMatrix, bestArz, selectColumns, arz, MathArrays, copyOf, arindex, mu, final, RealMatrix, zmean, bestArz, multiply, weights, final, boolean, hsig, updateEvolutionPaths, zmean, xold, if, <=, diagonalOnly, 0, updateCovariance, hsig, bestArx, arz, arindex, xold, updateCovarianceDiagonalOnly, hsig, bestArz, *=, sigma, FastMath, exp, FastMath, min, 1, /, *, -, /, normps, chiN, 1, cs, damps, final, double, bestFitness, fitness, arindex, 0, final, double, worstFitness, fitness, arindex, -, arindex.length, 1, if, >, bestValue, bestFitness, =, bestValue, bestFitness, =, lastResult, optimum, =, optimum, new, PointValuePair, fitfun, repair, bestArx, getColumn, 0, isMinimize, bestFitness, -, bestFitness, if, &&, &&, !=, getConvergenceChecker, null, !=, lastResult, null, getConvergenceChecker, converged, iterations, optimum, lastResult, break, generationLoop, if, &&, !=, stopFitness, 0, <, bestFitness, isMinimize, stopFitness, -, stopFitness, break, generationLoop, final, double, sqrtDiagC, sqrt, diagC, getColumn, 0, final, double, pcCol, pc, getColumn, 0, for, int, i, 0, <, i, dimension, ++, i, if, >, *, sigma, FastMath, max, FastMath, abs, pcCol, i, sqrtDiagC, i, stopTolX, break, if, >=, i, -, dimension, 1, break, generationLoop, for, int, i, 0, <, i, dimension, ++, i, if, >, *, sigma, sqrtDiagC, i, stopTolUpX, break, generationLoop, final, double, historyBest, min, fitnessHistory, final, double, historyWorst, max, fitnessHistory, if, &&, >, iterations, 2, <, -, FastMath, max, historyWorst, worstFitness, FastMath, min, historyBest, bestFitness, stopTolFun, break, generationLoop, if, &&, >, iterations, fitnessHistory.length, <, -, historyWorst, historyBest, stopTolHistFun, break, generationLoop, if, >, /, max, diagD, min, diagD, 1e7, break, generationLoop, if, !=, getConvergenceChecker, null, final, PointValuePair, current, new, PointValuePair, bestArx, getColumn, 0, isMinimize, bestFitness, -, bestFitness, if, &&, !=, lastResult, null, getConvergenceChecker, converged, iterations, current, lastResult, break, generationLoop, =, lastResult, current, if, ==, bestValue, fitness, arindex, int, +, 0.1, /, lambda, 4., *=, sigma, FastMath, exp, +, 0.2, /, cs, damps, if, &&, >, iterations, 2, ==, -, FastMath, max, historyWorst, bestFitness, FastMath, min, historyBest, bestFitness, 0, *=, sigma, FastMath, exp, +, 0.2, /, cs, damps, push, fitnessHistory, bestFitness, if, generateStatistics, statisticsSigmaHistory, add, sigma, statisticsFitnessHistory, add, bestFitness, statisticsMeanHistory, add, xmean, transpose, statisticsDHistory, add, diagD, transpose, scalarMultiply, 1E5, return, optimum]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, for, OptimizationData, data, optData, if, instanceof, data, Sigma, =, inputSigma, Sigma, data, getSigma, continue, if, instanceof, data, PopulationSize, =, lambda, PopulationSize, data, getPopulationSize, continue, checkParameters]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:checkParameters:null#[if, !=, inputSigma, null, final, double, init, getStartPoint, if, !=, inputSigma.length, init.length, throw, new, DimensionMismatchException, inputSigma.length, init.length, final, double, lB, getLowerBound, final, double, uB, getUpperBound, for, int, i, 0, <, i, init.length, ++, i, if, >, inputSigma, i, -, uB, i, lB, i, throw, new, OutOfRangeException, inputSigma, i, 0, -, uB, i, lB, i]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:initializeCMA:double[]#[if, <=, lambda, 0, throw, new, NotStrictlyPositiveException, lambda, final, double, sigmaArray, double, guess.length, 1, for, int, i, 0, <, i, guess.length, ++, i, =, sigmaArray, i, 0, inputSigma, i, final, RealMatrix, insigma, new, Array2DRowRealMatrix, sigmaArray, false, =, sigma, max, insigma, =, stopTolUpX, *, 1e3, max, insigma, =, stopTolX, *, 1e-11, max, insigma, =, stopTolFun, 1e-12, =, stopTolHistFun, 1e-13, =, mu, /, lambda, 2, =, logMu2, FastMath, log, +, mu, 0.5, =, weights, log, sequence, 1, mu, 1, scalarMultiply, -, 1, scalarAdd, logMu2, double, sumw, 0, double, sumwq, 0, for, int, i, 0, <, i, mu, ++, i, double, w, weights, getEntry, i, 0, +=, sumw, w, +=, sumwq, *, w, w, =, weights, weights, scalarMultiply, /, 1, sumw, =, mueff, /, *, sumw, sumw, sumwq, =, cc, /, +, 4, /, mueff, dimension, +, dimension, 4, /, *, 2, mueff, dimension, =, cs, /, +, mueff, 2, +, dimension, mueff, 3., =, damps, +, *, +, 1, *, 2, FastMath, max, 0, -, FastMath, sqrt, /, -, mueff, 1, +, dimension, 1, 1, FastMath, max, 0.3, -, 1, /, dimension, +, 1e-6, maxIterations, cs, =, ccov1, /, 2, +, *, +, dimension, 1.3, +, dimension, 1.3, mueff, =, ccovmu, FastMath, min, -, 1, ccov1, /, *, 2, +, -, mueff, 2, /, 1, mueff, +, *, +, dimension, 2, +, dimension, 2, mueff, =, ccov1Sep, FastMath, min, 1, /, *, ccov1, +, dimension, 1.5, 3, =, ccovmuSep, FastMath, min, -, 1, ccov1, /, *, ccovmu, +, dimension, 1.5, 3, =, chiN, *, FastMath, sqrt, dimension, +, -, 1, /, 1, *, double, 4, dimension, /, 1, *, double, 21, dimension, dimension, =, xmean, MatrixUtils, createColumnRealMatrix, guess, =, diagD, insigma, scalarMultiply, /, 1, sigma, =, diagC, square, diagD, =, pc, zeros, dimension, 1, =, ps, zeros, dimension, 1, =, normps, ps, getFrobeniusNorm, =, B, eye, dimension, dimension, =, D, ones, dimension, 1, =, BD, times, B, repmat, diagD, transpose, dimension, 1, =, C, B, multiply, diag, square, D, multiply, B, transpose, =, historySize, +, 10, int, /, *, 3, 10, dimension, double, lambda, =, fitnessHistory, double, historySize, for, int, i, 0, <, i, historySize, ++, i, =, fitnessHistory, i, Double.MAX_VALUE]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateEvolutionPaths:RealMatrix+RealMatrix#[=, ps, ps, scalarMultiply, -, 1, cs, add, B, multiply, zmean, scalarMultiply, FastMath, sqrt, *, cs, -, 2, cs, mueff, =, normps, ps, getFrobeniusNorm, final, boolean, hsig, <, /, normps, FastMath, sqrt, -, 1, FastMath, pow, -, 1, cs, *, 2, iterations, chiN, +, 1.4, /, 2, +, double, dimension, 1, =, pc, pc, scalarMultiply, -, 1, cc, if, hsig, =, pc, pc, add, xmean, subtract, xold, scalarMultiply, /, FastMath, sqrt, *, cc, -, 2, cc, mueff, sigma, return, hsig]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateCovarianceDiagonalOnly:boolean+RealMatrix#[double, oldFac, hsig, 0, *, ccov1Sep, cc, -, 2, cc, +=, oldFac, -, 1, ccov1Sep, ccovmuSep, =, diagC, diagC, scalarMultiply, oldFac, add, square, pc, scalarMultiply, ccov1Sep, add, times, diagC, square, bestArz, multiply, weights, scalarMultiply, ccovmuSep, =, diagD, sqrt, diagC, if, &&, >, diagonalOnly, 1, >, iterations, diagonalOnly, =, diagonalOnly, 0, =, B, eye, dimension, dimension, =, BD, diag, diagD, =, C, diag, diagC]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateCovariance:boolean+RealMatrix+RealMatrix+int[]+RealMatrix#[double, negccov, 0, if, >, +, ccov1, ccovmu, 0, final, RealMatrix, arpos, bestArx, subtract, repmat, xold, 1, mu, scalarMultiply, /, 1, sigma, final, RealMatrix, roneu, pc, multiply, pc, transpose, scalarMultiply, ccov1, double, oldFac, hsig, 0, *, ccov1, cc, -, 2, cc, +=, oldFac, -, 1, ccov1, ccovmu, if, isActiveCMA, =, negccov, /, *, -, 1, ccovmu, 0.25, mueff, +, FastMath, pow, +, dimension, 2, 1.5, *, 2, mueff, final, double, negminresidualvariance, 0.66, final, double, negalphaold, 0.5, final, int, arReverseIndex, reverse, arindex, RealMatrix, arzneg, selectColumns, arz, MathArrays, copyOf, arReverseIndex, mu, RealMatrix, arnorms, sqrt, sumRows, square, arzneg, final, int, idxnorms, sortedIndices, arnorms, getRow, 0, final, RealMatrix, arnormsSorted, selectColumns, arnorms, idxnorms, final, int, idxReverse, reverse, idxnorms, final, RealMatrix, arnormsReverse, selectColumns, arnorms, idxReverse, =, arnorms, divide, arnormsReverse, arnormsSorted, final, int, idxInv, inverse, idxnorms, final, RealMatrix, arnormsInv, selectColumns, arnorms, idxInv, final, double, negcovMax, /, -, 1, negminresidualvariance, square, arnormsInv, multiply, weights, getEntry, 0, 0, if, >, negccov, negcovMax, =, negccov, negcovMax, =, arzneg, times, arzneg, repmat, arnormsInv, dimension, 1, final, RealMatrix, artmp, BD, multiply, arzneg, final, RealMatrix, Cneg, artmp, multiply, diag, weights, multiply, artmp, transpose, +=, oldFac, *, negalphaold, negccov, =, C, C, scalarMultiply, oldFac, add, roneu, add, arpos, scalarMultiply, +, ccovmu, *, -, 1, negalphaold, negccov, multiply, times, repmat, weights, 1, dimension, arpos, transpose, subtract, Cneg, scalarMultiply, negccov, =, C, C, scalarMultiply, oldFac, add, roneu, add, arpos, scalarMultiply, ccovmu, multiply, times, repmat, weights, 1, dimension, arpos, transpose, updateBD, negccov]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateBD:double#[if, &&, >, +, ccov1, ccovmu, negccov, 0, <, /, /, /, %, iterations, 1., +, ccov1, ccovmu, negccov, dimension, 10., 1, =, C, triu, C, 0, add, triu, C, 1, transpose, final, EigenDecomposition, eig, new, EigenDecomposition, C, =, B, eig, getV, =, D, eig, getD, =, diagD, diag, D, if, <=, min, diagD, 0, for, int, i, 0, <, i, dimension, ++, i, if, <, diagD, getEntry, i, 0, 0, diagD, setEntry, i, 0, 0, final, double, tfac, /, max, diagD, 1e14, =, C, C, add, eye, dimension, dimension, scalarMultiply, tfac, =, diagD, diagD, add, ones, dimension, 1, scalarMultiply, tfac, if, >, max, diagD, *, 1e14, min, diagD, final, double, tfac, -, /, max, diagD, 1e14, min, diagD, =, C, C, add, eye, dimension, dimension, scalarMultiply, tfac, =, diagD, diagD, add, ones, dimension, 1, scalarMultiply, tfac, =, diagC, diag, C, =, diagD, sqrt, diagD, =, BD, times, B, repmat, diagD, transpose, dimension, 1]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:push:double[]+double#[for, int, i, -, vals.length, 1, >, i, 0, --, i, =, vals, i, vals, -, i, 1, =, vals, 0, val]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sortedIndices:double[]#[final, DoubleIndex, dis, DoubleIndex, doubles.length, for, int, i, 0, <, i, doubles.length, ++, i, =, dis, i, new, DoubleIndex, doubles, i, i, Arrays, sort, dis, final, int, indices, int, doubles.length, for, int, i, 0, <, i, doubles.length, ++, i, =, indices, i, dis, i, index, return, indices]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:valueRange:ValuePenaltyPair[]#[double, max, Double.NEGATIVE_INFINITY, double, min, Double.MAX_VALUE, for, ValuePenaltyPair, vpPair, vpPairs, if, >, vpPair.value, max, =, max, vpPair.value, if, <, vpPair.value, min, =, min, vpPair.value, return, -, max, min]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:log:RealMatrix#[final, double, d, double, m, getRowDimension, m, getColumnDimension, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, =, d, r, c, FastMath, log, m, getEntry, r, c, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sqrt:RealMatrix#[final, double, d, double, m, getRowDimension, m, getColumnDimension, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, =, d, r, c, FastMath, sqrt, m, getEntry, r, c, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:square:RealMatrix#[final, double, d, double, m, getRowDimension, m, getColumnDimension, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, double, e, m, getEntry, r, c, =, d, r, c, *, e, e, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:times:RealMatrix+RealMatrix#[final, double, d, double, m, getRowDimension, m, getColumnDimension, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, =, d, r, c, *, m, getEntry, r, c, n, getEntry, r, c, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:divide:RealMatrix+RealMatrix#[final, double, d, double, m, getRowDimension, m, getColumnDimension, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, =, d, r, c, /, m, getEntry, r, c, n, getEntry, r, c, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:selectColumns:RealMatrix+int[]#[final, double, d, double, m, getRowDimension, cols.length, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, cols.length, ++, c, =, d, r, c, m, getEntry, r, cols, c, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:triu:RealMatrix+int#[final, double, d, double, m, getRowDimension, m, getColumnDimension, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, =, d, r, c, <=, r, -, c, k, m, getEntry, r, c, 0, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sumRows:RealMatrix#[final, double, d, double, 1, m, getColumnDimension, for, int, c, 0, <, c, m, getColumnDimension, ++, c, double, sum, 0, for, int, r, 0, <, r, m, getRowDimension, ++, r, +=, sum, m, getEntry, r, c, =, d, 0, c, sum, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:diag:RealMatrix#[if, ==, m, getColumnDimension, 1, final, double, d, double, m, getRowDimension, m, getRowDimension, for, int, i, 0, <, i, m, getRowDimension, ++, i, =, d, i, i, m, getEntry, i, 0, return, new, Array2DRowRealMatrix, d, false, final, double, d, double, m, getRowDimension, 1, for, int, i, 0, <, i, m, getColumnDimension, ++, i, =, d, i, 0, m, getEntry, i, i, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:copyColumn:RealMatrix+int+RealMatrix+int#[for, int, i, 0, <, i, m1, getRowDimension, ++, i, m2, setEntry, i, col2, m1, getEntry, i, col1]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:ones:int+int#[final, double, d, double, n, m, for, int, r, 0, <, r, n, ++, r, Arrays, fill, d, r, 1, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:eye:int+int#[final, double, d, double, n, m, for, int, r, 0, <, r, n, ++, r, if, <, r, m, =, d, r, r, 1, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:zeros:int+int#[return, new, Array2DRowRealMatrix, n, m]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:repmat:RealMatrix+int+int#[final, int, rd, mat, getRowDimension, final, int, cd, mat, getColumnDimension, final, double, d, double, *, n, rd, *, m, cd, for, int, r, 0, <, r, *, n, rd, ++, r, for, int, c, 0, <, c, *, m, cd, ++, c, =, d, r, c, mat, getEntry, %, r, rd, %, c, cd, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sequence:double+double+double#[final, int, size, int, +, /, -, end, start, step, 1, final, double, d, double, size, 1, double, value, start, for, int, r, 0, <, r, size, ++, r, =, d, r, 0, value, +=, value, step, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:max:RealMatrix#[double, max, -, Double.MAX_VALUE, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, double, e, m, getEntry, r, c, if, <, max, e, =, max, e, return, max]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:min:RealMatrix#[double, min, Double.MAX_VALUE, for, int, r, 0, <, r, m, getRowDimension, ++, r, for, int, c, 0, <, c, m, getColumnDimension, ++, c, double, e, m, getEntry, r, c, if, >, min, e, =, min, e, return, min]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:max:double[]#[double, max, -, Double.MAX_VALUE, for, int, r, 0, <, r, m.length, ++, r, if, <, max, m, r, =, max, m, r, return, max]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:min:double[]#[double, min, Double.MAX_VALUE, for, int, r, 0, <, r, m.length, ++, r, if, >, min, m, r, =, min, m, r, return, min]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:inverse:int[]#[final, int, inverse, int, indices.length, for, int, i, 0, <, i, indices.length, ++, i, =, inverse, indices, i, i, return, inverse]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:reverse:int[]#[final, int, reverse, int, indices.length, for, int, i, 0, <, i, indices.length, ++, i, =, reverse, i, indices, -, indices.length, i, 1, return, reverse]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:randn:int#[final, double, randn, double, size, for, int, i, 0, <, i, size, ++, i, =, randn, i, random, nextGaussian, return, randn]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:randn1:int+int#[final, double, d, double, size, popSize, for, int, r, 0, <, r, size, ++, r, for, int, c, 0, <, c, popSize, ++, c, =, d, r, c, random, nextGaussian, return, new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:MultiDirectionalSimplex:iterate:MultivariateFunction+Comparator<PointValuePair>#[final, PointValuePair, original, getPoints, final, PointValuePair, best, original, 0, final, PointValuePair, reflected, evaluateNewSimplex, evaluationFunction, original, 1, comparator, if, <, comparator, compare, reflected, best, 0, final, PointValuePair, reflectedSimplex, getPoints, final, PointValuePair, expanded, evaluateNewSimplex, evaluationFunction, original, khi, comparator, if, <=, comparator, compare, reflected, expanded, 0, setPoints, reflectedSimplex, return, evaluateNewSimplex, evaluationFunction, original, gamma, comparator]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:MultiDirectionalSimplex:evaluateNewSimplex:MultivariateFunction+PointValuePair[]+double+Comparator<PointValuePair>#[final, double, xSmallest, original, 0, getPointRef, setPoint, 0, original, 0, final, int, dim, getDimension, for, int, i, 1, <, i, getSize, ++, i, final, double, xOriginal, original, i, getPointRef, final, double, xTransformed, double, dim, for, int, j, 0, <, j, dim, ++, j, =, xTransformed, j, +, xSmallest, j, *, coeff, -, xSmallest, j, xOriginal, j, setPoint, i, new, PointValuePair, xTransformed, Double.NaN, false, evaluate, evaluationFunction, comparator, return, getPoint, 0]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:NelderMeadSimplex:iterate:MultivariateFunction+Comparator<PointValuePair>#[final, int, n, getDimension, final, PointValuePair, best, getPoint, 0, final, PointValuePair, secondBest, getPoint, -, n, 1, final, PointValuePair, worst, getPoint, n, final, double, xWorst, worst, getPointRef, final, double, centroid, double, n, for, int, i, 0, <, i, n, ++, i, final, double, x, getPoint, i, getPointRef, for, int, j, 0, <, j, n, ++, j, +=, centroid, j, x, j, final, double, scaling, /, 1.0, n, for, int, j, 0, <, j, n, ++, j, *=, centroid, j, scaling, final, double, xR, double, n, for, int, j, 0, <, j, n, ++, j, =, xR, j, +, centroid, j, *, rho, -, centroid, j, xWorst, j, final, PointValuePair, reflected, new, PointValuePair, xR, evaluationFunction, value, xR, false, if, &&, <=, comparator, compare, best, reflected, 0, <, comparator, compare, reflected, secondBest, 0, replaceWorstPoint, reflected, comparator, if, <, comparator, compare, reflected, best, 0, final, double, xE, double, n, for, int, j, 0, <, j, n, ++, j, =, xE, j, +, centroid, j, *, khi, -, xR, j, centroid, j, final, PointValuePair, expanded, new, PointValuePair, xE, evaluationFunction, value, xE, false, if, <, comparator, compare, expanded, reflected, 0, replaceWorstPoint, expanded, comparator, replaceWorstPoint, reflected, comparator, if, <, comparator, compare, reflected, worst, 0, final, double, xC, double, n, for, int, j, 0, <, j, n, ++, j, =, xC, j, +, centroid, j, *, gamma, -, xR, j, centroid, j, final, PointValuePair, outContracted, new, PointValuePair, xC, evaluationFunction, value, xC, false, if, <=, comparator, compare, outContracted, reflected, 0, replaceWorstPoint, outContracted, comparator, return, final, double, xC, double, n, for, int, j, 0, <, j, n, ++, j, =, xC, j, -, centroid, j, *, gamma, -, centroid, j, xWorst, j, final, PointValuePair, inContracted, new, PointValuePair, xC, evaluationFunction, value, xC, false, if, <, comparator, compare, inContracted, worst, 0, replaceWorstPoint, inContracted, comparator, return, final, double, xSmallest, getPoint, 0, getPointRef, for, int, i, 1, <=, i, n, ++, i, final, double, x, getPoint, i, getPoint, for, int, j, 0, <, j, n, ++, j, =, x, j, +, xSmallest, j, *, sigma, -, x, j, xSmallest, j, setPoint, i, new, PointValuePair, x, Double.NaN, false, evaluate, evaluationFunction, comparator]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:PowellOptimizer:doOptimize:null#[checkParameters, final, GoalType, goal, getGoalType, final, double, guess, getStartPoint, final, int, n, guess.length, final, double, direc, double, n, n, for, int, i, 0, <, i, n, ++, i, =, direc, i, i, 1, final, ConvergenceChecker, PointValuePair, checker, getConvergenceChecker, double, x, guess, double, fVal, computeObjectiveValue, x, double, x1, x, clone, while, true, incrementIterationCount, double, fX, fVal, double, fX2, 0, double, delta, 0, int, bigInd, 0, double, alphaMin, 0, for, int, i, 0, <, i, n, ++, i, final, double, d, MathArrays, copyOf, direc, i, =, fX2, fVal, final, UnivariatePointValuePair, optimum, line, search, x, d, =, fVal, optimum, getValue, =, alphaMin, optimum, getPoint, final, double, result, newPointAndDirection, x, d, alphaMin, =, x, result, 0, if, >, -, fX2, fVal, delta, =, delta, -, fX2, fVal, =, bigInd, i, boolean, stop, <=, *, 2, -, fX, fVal, +, *, relativeThreshold, +, FastMath, abs, fX, FastMath, abs, fVal, absoluteThreshold, final, PointValuePair, previous, new, PointValuePair, x1, fX, final, PointValuePair, current, new, PointValuePair, x, fVal, if, &&, !, stop, !=, checker, null, =, stop, checker, converged, getIterations, previous, current, if, stop, if, ==, goal, GoalType.MINIMIZE, return, <, fVal, fX, current, previous, return, >, fVal, fX, current, previous, final, double, d, double, n, final, double, x2, double, n, for, int, i, 0, <, i, n, ++, i, =, d, i, -, x, i, x1, i, =, x2, i, -, *, 2, x, i, x1, i, =, x1, x, clone, =, fX2, computeObjectiveValue, x2, if, >, fX, fX2, double, t, *, 2, -, +, fX, fX2, *, 2, fVal, double, temp, -, fX, fVal, delta, *=, t, *, temp, temp, =, temp, -, fX, fX2, -=, t, *, delta, temp, temp, if, <, t, 0.0, final, UnivariatePointValuePair, optimum, line, search, x, d, =, fVal, optimum, getValue, =, alphaMin, optimum, getPoint, final, double, result, newPointAndDirection, x, d, alphaMin, =, x, result, 0, final, int, lastInd, -, n, 1, =, direc, bigInd, direc, lastInd, =, direc, lastInd, result, 1]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:PowellOptimizer:newPointAndDirection:double[]+double[]+double#[final, int, n, p.length, final, double, nP, double, n, final, double, nD, double, n, for, int, i, 0, <, i, n, ++, i, =, nD, i, *, d, i, optimum, =, nP, i, +, p, i, nD, i, final, double, result, double, 2, =, result, 0, nP, =, result, 1, nD, return, result]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:PowellOptimizer:checkParameters:null#[if, ||, !=, getLowerBound, null, !=, getUpperBound, null, throw, new, MathUnsupportedOperationException, LocalizedFormats.CONSTRAINT]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:doOptimize:null#[checkParameters, final, MultivariateFunction, evalFunc, new, MultivariateFunction, Override, public, double, value, double, point, return, computeObjectiveValue, point, final, boolean, isMinim, ==, getGoalType, GoalType.MINIMIZE, final, Comparator, PointValuePair, comparator, new, Comparator, PointValuePair, Override, public, int, compare, final, PointValuePair, o1, final, PointValuePair, o2, final, double, v1, o1, getValue, final, double, v2, o2, getValue, return, isMinim, Double, compare, v1, v2, Double, compare, v2, v1, simplex, build, getStartPoint, simplex, evaluate, evalFunc, comparator, PointValuePair, previous, null, int, iteration, 0, final, ConvergenceChecker, PointValuePair, checker, getConvergenceChecker, while, true, if, >, getIterations, 0, boolean, converged, true, for, int, i, 0, <, i, simplex, getSize, ++, i, PointValuePair, prev, previous, i, =, converged, &&, converged, checker, converged, iteration, prev, simplex, getPoint, i, if, converged, return, simplex, getPoint, 0, =, previous, simplex, getPoints, simplex, iterate, evalFunc, comparator, incrementIterationCount]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, for, OptimizationData, data, optData, if, instanceof, data, AbstractSimplex, =, simplex, AbstractSimplex, data, break]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:checkParameters:null#[if, ==, simplex, null, throw, new, NullArgumentException, if, ||, !=, getLowerBound, null, !=, getUpperBound, null, throw, new, MathUnsupportedOperationException, LocalizedFormats.CONSTRAINT]
org.apache.commons.math4.optim.nonlinear.scalar:ObjectiveFunction:getObjectiveFunction:null#[return, function]
org.apache.commons.math4.optim.nonlinear.scalar:ObjectiveFunctionGradient:getObjectiveFunctionGradient:null#[return, gradient]
org.apache.commons.math4.optim:PointValuePair:getPoint:null#[final, double, p, getKey, return, ==, p, null, null, p, clone]
org.apache.commons.math4.optim:PointValuePair:getPointRef:null#[return, getKey]
org.apache.commons.math4.optim:PointValuePair:writeReplace:null#[return, new, DataTransferObject, getKey, getValue]
org.apache.commons.math4.optim:PointVectorValuePair:getPoint:null#[final, double, p, getKey, return, ==, p, null, null, p, clone]
org.apache.commons.math4.optim:PointVectorValuePair:getPointRef:null#[return, getKey]
org.apache.commons.math4.optim:PointVectorValuePair:getValue:null#[final, double, v, super, getValue, return, ==, v, null, null, v, clone]
org.apache.commons.math4.optim:PointVectorValuePair:getValueRef:null#[return, super, getValue]
org.apache.commons.math4.optim:PointVectorValuePair:writeReplace:null#[return, new, DataTransferObject, getKey, getValue]
org.apache.commons.math4.optim:SimpleBounds:getLower:null#[return, lower, clone]
org.apache.commons.math4.optim:SimpleBounds:getUpper:null#[return, upper, clone]
org.apache.commons.math4.optim:SimpleBounds:unbounded:int#[final, double, lB, double, dim, Arrays, fill, lB, Double.NEGATIVE_INFINITY, final, double, uB, double, dim, Arrays, fill, uB, Double.POSITIVE_INFINITY, return, new, SimpleBounds, lB, uB]
org.apache.commons.math4.optim:SimplePointChecker:converged:int+PAIR+PAIR#[if, &&, !=, maxIterationCount, ITERATION_CHECK_DISABLED, >=, iteration, maxIterationCount, return, true, final, double, p, previous, getKey, final, double, c, current, getKey, for, int, i, 0, <, i, p.length, ++, i, final, double, pi, p, i, final, double, ci, c, i, final, double, difference, FastMath, abs, -, pi, ci, final, double, size, FastMath, max, FastMath, abs, pi, FastMath, abs, ci, if, &&, >, difference, *, size, getRelativeThreshold, >, difference, getAbsoluteThreshold, return, false, return, true]
org.apache.commons.math4.optim:SimpleValueChecker:converged:int+PointValuePair+PointValuePair#[if, &&, !=, maxIterationCount, ITERATION_CHECK_DISABLED, >=, iteration, maxIterationCount, return, true, final, double, p, previous, getValue, final, double, c, current, getValue, final, double, difference, FastMath, abs, -, p, c, final, double, size, FastMath, max, FastMath, abs, p, FastMath, abs, c, return, ||, <=, difference, *, size, getRelativeThreshold, <=, difference, getAbsoluteThreshold]
org.apache.commons.math4.optim:SimpleVectorValueChecker:converged:int+PointVectorValuePair+PointVectorValuePair#[if, &&, !=, maxIterationCount, ITERATION_CHECK_DISABLED, >=, iteration, maxIterationCount, return, true, final, double, p, previous, getValueRef, final, double, c, current, getValueRef, for, int, i, 0, <, i, p.length, ++, i, final, double, pi, p, i, final, double, ci, c, i, final, double, difference, FastMath, abs, -, pi, ci, final, double, size, FastMath, max, FastMath, abs, pi, FastMath, abs, ci, if, &&, >, difference, *, size, getRelativeThreshold, >, difference, getAbsoluteThreshold, return, false, return, true]
org.apache.commons.math4.optim.univariate:BracketFinder:search:UnivariateFunction+GoalType+double+double#[final, FunctionEvaluator, eval, new, FunctionEvaluator, func, final, boolean, isMinim, ==, goal, GoalType.MINIMIZE, double, fA, eval, value, xA, double, fB, eval, value, xB, if, isMinim, <, fA, fB, >, fA, fB, double, tmp, xA, =, xA, xB, =, xB, tmp, =, tmp, fA, =, fA, fB, =, fB, tmp, double, xC, +, xB, *, GOLD, -, xB, xA, double, fC, eval, value, xC, while, isMinim, <, fC, fB, >, fC, fB, double, tmp1, *, -, xB, xA, -, fB, fC, double, tmp2, *, -, xB, xC, -, fB, fA, double, val, -, tmp2, tmp1, double, denom, <, FastMath, abs, val, EPS_MIN, *, 2, EPS_MIN, *, 2, val, double, w, -, xB, /, -, *, -, xB, xC, tmp2, *, -, xB, xA, tmp1, denom, double, wLim, +, xB, *, growLimit, -, xC, xB, double, fW, if, >, *, -, w, xC, -, xB, w, 0, =, fW, eval, value, w, if, isMinim, <, fW, fC, >, fW, fC, =, xA, xB, =, xB, w, =, fA, fB, =, fB, fW, break, if, isMinim, >, fW, fB, <, fW, fB, =, xC, w, =, fC, fW, break, =, w, +, xC, *, GOLD, -, xC, xB, =, fW, eval, value, w, if, >=, *, -, w, wLim, -, wLim, xC, 0, =, w, wLim, =, fW, eval, value, w, if, >, *, -, w, wLim, -, xC, w, 0, =, fW, eval, value, w, if, isMinim, <, fW, fC, >, fW, fC, =, xB, xC, =, xC, w, =, w, +, xC, *, GOLD, -, xC, xB, =, fB, fC, =, fC, fW, =, fW, eval, value, w, =, w, +, xC, *, GOLD, -, xC, xB, =, fW, eval, value, w, =, xA, xB, =, fA, fB, =, xB, xC, =, fB, fC, =, xC, w, =, fC, fW, =, lo, xA, =, fLo, fA, =, mid, xB, =, fMid, fB, =, hi, xC, =, fHi, fC, if, >, lo, hi, double, tmp, lo, =, lo, hi, =, hi, tmp, =, tmp, fLo, =, fLo, fHi, =, fHi, tmp]
org.apache.commons.math4.optim.univariate:BracketFinder:getMaxEvaluations:null#[return, maxEvaluations]
org.apache.commons.math4.optim.univariate:BracketFinder:getEvaluations:null#[return, evaluations]
org.apache.commons.math4.optim.univariate:BracketFinder:getLo:null#[return, lo]
org.apache.commons.math4.optim.univariate:BracketFinder:getFLo:null#[return, fLo]
org.apache.commons.math4.optim.univariate:BracketFinder:getHi:null#[return, hi]
org.apache.commons.math4.optim.univariate:BracketFinder:getFHi:null#[return, fHi]
org.apache.commons.math4.optim.univariate:BracketFinder:getMid:null#[return, mid]
org.apache.commons.math4.optim.univariate:BracketFinder:getFMid:null#[return, fMid]
org.apache.commons.math4.optim.univariate:BrentOptimizer:doOptimize:null#[final, boolean, isMinim, ==, getGoalType, GoalType.MINIMIZE, final, double, lo, getMin, final, double, mid, getStartValue, final, double, hi, getMax, final, ConvergenceChecker, UnivariatePointValuePair, checker, getConvergenceChecker, double, a, double, b, if, <, lo, hi, =, a, lo, =, b, hi, =, a, hi, =, b, lo, double, x, mid, double, v, x, double, w, x, double, d, 0, double, e, 0, double, fx, computeObjectiveValue, x, if, !, isMinim, =, fx, -, fx, double, fv, fx, double, fw, fx, UnivariatePointValuePair, previous, null, UnivariatePointValuePair, current, new, UnivariatePointValuePair, x, isMinim, fx, -, fx, UnivariatePointValuePair, best, current, while, true, final, double, m, *, 0.5, +, a, b, final, double, tol1, +, *, relativeThreshold, FastMath, abs, x, absoluteThreshold, final, double, tol2, *, 2, tol1, final, boolean, stop, <=, FastMath, abs, -, x, m, -, tol2, *, 0.5, -, b, a, if, !, stop, double, p, 0, double, q, 0, double, r, 0, double, u, 0, if, >, FastMath, abs, e, tol1, =, r, *, -, x, w, -, fx, fv, =, q, *, -, x, v, -, fx, fw, =, p, -, *, -, x, v, q, *, -, x, w, r, =, q, *, 2, -, q, r, if, >, q, 0, =, p, -, p, =, q, -, q, =, r, e, =, e, d, if, &&, &&, >, p, *, q, -, a, x, <, p, *, q, -, b, x, <, FastMath, abs, p, FastMath, abs, *, 0.5, q, r, =, d, /, p, q, =, u, +, x, d, if, ||, <, -, u, a, tol2, <, -, b, u, tol2, if, <=, x, m, =, d, tol1, =, d, -, tol1, if, <, x, m, =, e, -, b, x, =, e, -, a, x, =, d, *, GOLDEN_SECTION, e, if, <, x, m, =, e, -, b, x, =, e, -, a, x, =, d, *, GOLDEN_SECTION, e, if, <, FastMath, abs, d, tol1, if, >=, d, 0, =, u, +, x, tol1, =, u, -, x, tol1, =, u, +, x, d, double, fu, computeObjectiveValue, u, if, !, isMinim, =, fu, -, fu, =, previous, current, =, current, new, UnivariatePointValuePair, u, isMinim, fu, -, fu, =, best, best, best, best, previous, current, isMinim, isMinim, if, &&, !=, checker, null, checker, converged, getIterations, previous, current, return, best, if, <=, fu, fx, if, <, u, x, =, b, x, =, a, x, =, v, w, =, fv, fw, =, w, x, =, fw, fx, =, x, u, =, fx, fu, if, <, u, x, =, a, u, =, b, u, if, ||, <=, fu, fw, Precision, equals, w, x, =, v, w, =, fv, fw, =, w, u, =, fw, fu, if, ||, ||, <=, fu, fv, Precision, equals, v, x, Precision, equals, v, w, =, v, u, =, fv, fu, return, best, best, best, previous, current, isMinim, isMinim, incrementIterationCount]
org.apache.commons.math4.optim.univariate:BrentOptimizer:best:UnivariatePointValuePair+UnivariatePointValuePair+boolean#[if, ==, a, null, return, b, if, ==, b, null, return, a, if, isMinim, return, <=, a, getValue, b, getValue, a, b, return, >=, a, getValue, b, getValue, a, b]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:getEvaluations:null#[return, totalEvaluations]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:getOptima:null#[if, ==, optima, null, throw, new, MathIllegalStateException, LocalizedFormats.NO_OPTIMUM_COMPUTED_YET, return, optima, clone]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:optimize:OptimizationData...#[=, optimData, optData, return, super, optimize, optData]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:doOptimize:null#[for, int, i, 0, <, i, optimData.length, ++, i, if, instanceof, optimData, i, MaxEval, =, optimData, i, null, =, maxEvalIndex, i, continue, if, instanceof, optimData, i, SearchInterval, =, optimData, i, null, =, searchIntervalIndex, i, continue, if, ==, maxEvalIndex, -, 1, throw, new, MathIllegalStateException, if, ==, searchIntervalIndex, -, 1, throw, new, MathIllegalStateException, RuntimeException, lastException, null, =, optima, UnivariatePointValuePair, starts, =, totalEvaluations, 0, final, int, maxEval, getMaxEvaluations, final, double, min, getMin, final, double, max, getMax, final, double, startValue, getStartValue, for, int, i, 0, <, i, starts, ++, i, try, =, optimData, maxEvalIndex, new, MaxEval, -, maxEval, totalEvaluations, final, double, s, ==, i, 0, startValue, +, min, *, generator, nextDouble, -, max, min, =, optimData, searchIntervalIndex, new, SearchInterval, min, max, s, =, optima, i, optimizer, optimize, optimData, catch, RuntimeException, mue, =, lastException, mue, =, optima, i, null, +=, totalEvaluations, optimizer, getEvaluations, sortPairs, getGoalType, if, ==, optima, 0, null, throw, lastException, return, optima, 0]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:sortPairs:GoalType#[Arrays, sort, optima, new, Comparator, UnivariatePointValuePair, Override, public, int, compare, final, UnivariatePointValuePair, o1, final, UnivariatePointValuePair, o2, if, ==, o1, null, return, ==, o2, null, 0, 1, if, ==, o2, null, return, -, 1, final, double, v1, o1, getValue, final, double, v2, o2, getValue, return, ==, goal, GoalType.MINIMIZE, Double, compare, v1, v2, Double, compare, v2, v1]
org.apache.commons.math4.optim.univariate:SearchInterval:getMin:null#[return, lower]
org.apache.commons.math4.optim.univariate:SearchInterval:getMax:null#[return, upper]
org.apache.commons.math4.optim.univariate:SearchInterval:getStartValue:null#[return, start]
org.apache.commons.math4.optim.univariate:SimpleUnivariateValueChecker:converged:int+UnivariatePointValuePair+UnivariatePointValuePair#[if, &&, !=, maxIterationCount, ITERATION_CHECK_DISABLED, >=, iteration, maxIterationCount, return, true, final, double, p, previous, getValue, final, double, c, current, getValue, final, double, difference, FastMath, abs, -, p, c, final, double, size, FastMath, max, FastMath, abs, p, FastMath, abs, c, return, ||, <=, difference, *, size, getRelativeThreshold, <=, difference, getAbsoluteThreshold]
org.apache.commons.math4.optim.univariate:UnivariateObjectiveFunction:getObjectiveFunction:null#[return, function]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:optimize:OptimizationData...#[return, super, optimize, optData]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getGoalType:null#[return, goal]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:parseOptimizationData:OptimizationData...#[super, parseOptimizationData, optData, for, OptimizationData, data, optData, if, instanceof, data, SearchInterval, final, SearchInterval, interval, SearchInterval, data, =, min, interval, getMin, =, max, interval, getMax, =, start, interval, getStartValue, continue, if, instanceof, data, UnivariateObjectiveFunction, =, function, UnivariateObjectiveFunction, data, getObjectiveFunction, continue, if, instanceof, data, GoalType, =, goal, GoalType, data, continue]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getStartValue:null#[return, start]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getMin:null#[return, min]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getMax:null#[return, max]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:computeObjectiveValue:double#[super, incrementEvaluationCount, return, function, value, x]
org.apache.commons.math4.optim.univariate:UnivariatePointValuePair:getPoint:null#[return, point]
org.apache.commons.math4.optim.univariate:UnivariatePointValuePair:getValue:null#[return, value]
org.apache.commons.math4.primes:Primes:isPrime:int#[if, <, n, 2, return, false, for, int, p, SmallPrimes.PRIMES, if, ==, 0, %, n, p, return, ==, n, p, return, SmallPrimes, millerRabinPrimeTest, n]
org.apache.commons.math4.primes:Primes:nextPrime:int#[if, <, n, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.NUMBER_TOO_SMALL, n, 0, if, ==, n, 2, return, 2, |=, n, 1, if, ==, n, 1, return, 2, if, isPrime, n, return, n, final, int, rem, %, n, 3, if, ==, 0, rem, +=, n, 2, if, ==, 1, rem, +=, n, 4, while, true, if, isPrime, n, return, n, +=, n, 2, if, isPrime, n, return, n, +=, n, 4]
org.apache.commons.math4.primes:Primes:primeFactors:int#[if, <, n, 2, throw, new, MathIllegalArgumentException, LocalizedFormats.NUMBER_TOO_SMALL, n, 2, return, SmallPrimes, trialDivision, n]
org.apache.commons.math4.primes:SmallPrimes:smallTrialDivision:int+List<Integer>#[for, int, p, PRIMES, while, ==, 0, %, n, p, /=, n, p, factors, add, p, return, n]
org.apache.commons.math4.primes:SmallPrimes:boundedTrialDivision:int+int+List<Integer>#[int, f, +, PRIMES_LAST, 2, while, <=, f, maxFactor, if, ==, 0, %, n, f, /=, n, f, factors, add, f, break, +=, f, 4, if, ==, 0, %, n, f, /=, n, f, factors, add, f, break, +=, f, 2, if, !=, n, 1, factors, add, n, return, n]
org.apache.commons.math4.primes:SmallPrimes:trialDivision:int#[final, List, Integer, factors, new, ArrayList, Integer, 32, =, n, smallTrialDivision, n, factors, if, ==, 1, n, return, factors, final, int, bound, int, FastMath, sqrt, n, boundedTrialDivision, n, bound, factors, return, factors]
org.apache.commons.math4.primes:SmallPrimes:millerRabinPrimeTest:int#[final, int, nMinus1, -, n, 1, final, int, s, Integer, numberOfTrailingZeros, nMinus1, final, int, r, >>, nMinus1, s, int, t, 1, if, >=, n, 2047, =, t, 2, if, >=, n, 1373653, =, t, 3, if, >=, n, 25326001, =, t, 4, BigInteger, br, BigInteger, valueOf, r, BigInteger, bn, BigInteger, valueOf, n, for, int, i, 0, <, i, t, ++, i, BigInteger, a, BigInteger, valueOf, SmallPrimes.PRIMES, i, BigInteger, bPow, a, modPow, br, bn, int, y, bPow, intValue, if, &&, !=, 1, y, !=, y, nMinus1, int, j, 1, while, &&, <=, j, -, s, 1, !=, nMinus1, y, long, square, *, long, y, y, =, y, int, %, square, n, if, ==, 1, y, return, false, ++, j, if, !=, nMinus1, y, return, false, return, true]
org.apache.commons.math4.random:AbstractRandomGenerator:clear:null#[=, cachedNormalDeviate, Double.NaN]
org.apache.commons.math4.random:AbstractRandomGenerator:setSeed:int#[setSeed, long, seed]
org.apache.commons.math4.random:AbstractRandomGenerator:setSeed:int[]#[final, long, prime, 4294967291l, long, combined, 0l, for, int, s, seed, =, combined, +, *, combined, prime, s, setSeed, combined]
org.apache.commons.math4.random:AbstractRandomGenerator:nextBytes:byte[]#[final, int, max, &, bytes.length, 0x7ffffffc, int, index, 0, while, <, index, max, final, int, random, nextInt, =, bytes, ++, index, byte, random, =, bytes, ++, index, byte, >>>, random, 8, =, bytes, ++, index, byte, >>>, random, 16, =, bytes, ++, index, byte, >>>, random, 24, if, <, index, bytes.length, int, random, nextInt, while, true, =, bytes, ++, index, byte, random, if, <, index, bytes.length, >>>=, random, 8, break]
org.apache.commons.math4.random:AbstractRandomGenerator:nextInt:null#[return, int, *, -, *, 2d, nextDouble, 1d, Integer.MAX_VALUE]
org.apache.commons.math4.random:AbstractRandomGenerator:nextInt:int#[if, <=, n, 0, throw, new, NotStrictlyPositiveException, n, int, result, int, *, nextDouble, n, return, <, result, n, result, -, n, 1]
org.apache.commons.math4.random:AbstractRandomGenerator:nextLong:null#[return, long, *, -, *, 2d, nextDouble, 1d, Long.MAX_VALUE]
org.apache.commons.math4.random:AbstractRandomGenerator:nextBoolean:null#[return, <=, nextDouble, 0.5]
org.apache.commons.math4.random:AbstractRandomGenerator:nextFloat:null#[return, float, nextDouble]
org.apache.commons.math4.random:AbstractRandomGenerator:nextGaussian:null#[if, !, Double, isNaN, cachedNormalDeviate, double, dev, cachedNormalDeviate, =, cachedNormalDeviate, Double.NaN, return, dev, double, v1, 0, double, v2, 0, double, s, 1, while, >=, s, 1, =, v1, -, *, 2, nextDouble, 1, =, v2, -, *, 2, nextDouble, 1, =, s, +, *, v1, v1, *, v2, v2, if, !=, s, 0, =, s, FastMath, sqrt, /, *, -, 2, FastMath, log, s, s, =, cachedNormalDeviate, *, v2, s, return, *, v1, s]
org.apache.commons.math4.random:AbstractWell:setSeed:int#[setSeed, int, seed]
org.apache.commons.math4.random:AbstractWell:setSeed:int[]#[if, ==, seed, null, setSeed, +, System, currentTimeMillis, System, identityHashCode, this, return, System, arraycopy, seed, 0, v, 0, FastMath, min, seed.length, v.length, if, <, seed.length, v.length, for, int, i, seed.length, <, i, v.length, ++, i, final, long, l, v, -, i, seed.length, =, v, i, int, &, +, *, 1812433253l, ^, l, >>, l, 30, i, 0xffffffffL, =, index, 0, clear]
org.apache.commons.math4.random:AbstractWell:setSeed:long#[setSeed, int, int, >>>, seed, 32, int, &, seed, 0xffffffffl]
org.apache.commons.math4.random:AbstractWell:calculateBlockCount:int#[final, int, w, 32, final, int, r, /, -, +, k, w, 1, w, return, r]
org.apache.commons.math4.random:BitsStreamGenerator:nextBoolean:null#[return, !=, next, 1, 0]
org.apache.commons.math4.random:BitsStreamGenerator:nextBytes:byte[]#[final, int, max, &, bytes.length, 0x7ffffffc, int, index, 0, while, <, index, max, final, int, random, next, 32, =, bytes, ++, index, byte, random, =, bytes, ++, index, byte, >>>, random, 8, =, bytes, ++, index, byte, >>>, random, 16, =, bytes, ++, index, byte, >>>, random, 24, if, <, index, bytes.length, int, random, next, 32, while, true, =, bytes, ++, index, byte, random, if, <, index, bytes.length, >>>=, random, 8, break]
org.apache.commons.math4.random:BitsStreamGenerator:nextGaussian:null#[final, double, random, if, Double, isNaN, nextGaussian, final, double, x, nextDouble, final, double, y, nextDouble, final, double, alpha, *, 2, FastMath.PI, x, final, double, r, FastMath, sqrt, *, -, 2, FastMath, log, y, =, random, *, r, FastMath, cos, alpha, =, nextGaussian, *, r, FastMath, sin, alpha, =, random, nextGaussian, =, nextGaussian, Double.NaN, return, random]
org.apache.commons.math4.random:BitsStreamGenerator:nextInt:null#[return, next, 32]
org.apache.commons.math4.random:BitsStreamGenerator:nextInt:int#[if, >, n, 0, if, ==, &, n, -, n, n, return, int, >>, *, n, long, next, 31, 31, int, bits, int, val, do, =, bits, next, 31, =, val, %, bits, n, <, +, -, bits, val, -, n, 1, 0, return, val, throw, new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:BitsStreamGenerator:nextLong:null#[final, long, high, <<, long, next, 32, 32, final, long, low, &, next, 32, 0xffffffffL, return, |, high, low]
org.apache.commons.math4.random:BitsStreamGenerator:nextLong:long#[if, >, n, 0, long, bits, long, val, do, =, bits, <<, long, next, 31, 32, |=, bits, &, long, next, 32, 0xffffffffL, =, val, %, bits, n, <, +, -, bits, val, -, n, 1, 0, return, val, throw, new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:BitsStreamGenerator:clear:null#[=, nextGaussian, Double.NaN]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:getGenerator:null#[return, generator]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:getRank:null#[return, normalized.length]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:getRootMatrix:null#[return, root]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:nextVector:null#[for, int, i, 0, <, i, normalized.length, ++, i, =, normalized, i, generator, nextNormalizedDouble, double, correlated, double, mean.length, for, int, i, 0, <, i, correlated.length, ++, i, =, correlated, i, mean, i, for, int, j, 0, <, j, root, getColumnDimension, ++, j, +=, correlated, i, *, root, getEntry, i, j, normalized, j, return, correlated]
org.apache.commons.math4.random:EmpiricalDistribution:load:double[]#[DataAdapter, da, new, ArrayDataAdapter, in, try, da, computeStats, fillBinStats, new, ArrayDataAdapter, in, catch, IOException, ex, throw, new, MathInternalError, =, loaded, true]
org.apache.commons.math4.random:EmpiricalDistribution:load:URL#[MathUtils, checkNotNull, url, Charset, charset, Charset, forName, FILE_CHARSET, BufferedReader, in, new, BufferedReader, new, InputStreamReader, url, openStream, charset, try, DataAdapter, da, new, StreamDataAdapter, in, da, computeStats, if, ==, sampleStats, getN, 0, throw, new, ZeroException, LocalizedFormats.URL_CONTAINS_NO_DATA, url, =, in, new, BufferedReader, new, InputStreamReader, url, openStream, charset, fillBinStats, new, StreamDataAdapter, in, =, loaded, true, try, in, close, catch, IOException, ex]
org.apache.commons.math4.random:EmpiricalDistribution:load:File#[MathUtils, checkNotNull, file, Charset, charset, Charset, forName, FILE_CHARSET, InputStream, is, new, FileInputStream, file, BufferedReader, in, new, BufferedReader, new, InputStreamReader, is, charset, try, DataAdapter, da, new, StreamDataAdapter, in, da, computeStats, =, is, new, FileInputStream, file, =, in, new, BufferedReader, new, InputStreamReader, is, charset, fillBinStats, new, StreamDataAdapter, in, =, loaded, true, try, in, close, catch, IOException, ex]
org.apache.commons.math4.random:EmpiricalDistribution:fillBinStats:DataAdapter#[=, min, sampleStats, getMin, =, max, sampleStats, getMax, =, delta, /, -, max, min, binCount, if, !, binStats, isEmpty, binStats, clear, for, int, i, 0, <, i, binCount, ++, i, SummaryStatistics, stats, new, SummaryStatistics, binStats, add, i, stats, da, computeBinStats, =, upperBounds, double, binCount, =, upperBounds, 0, /, double, binStats, get, 0, getN, double, sampleStats, getN, for, int, i, 1, <, i, -, binCount, 1, ++, i, =, upperBounds, i, +, upperBounds, -, i, 1, /, double, binStats, get, i, getN, double, sampleStats, getN, =, upperBounds, -, binCount, 1, 1.0d]
org.apache.commons.math4.random:EmpiricalDistribution:findBin:double#[return, FastMath, min, FastMath, max, -, int, FastMath, ceil, /, -, value, min, delta, 1, 0, -, binCount, 1]
org.apache.commons.math4.random:EmpiricalDistribution:getNextValue:null#[if, !, loaded, throw, new, MathIllegalStateException, LocalizedFormats.DISTRIBUTION_NOT_LOADED, return, sample]
org.apache.commons.math4.random:EmpiricalDistribution:getSampleStats:null#[return, sampleStats]
org.apache.commons.math4.random:EmpiricalDistribution:getBinCount:null#[return, binCount]
org.apache.commons.math4.random:EmpiricalDistribution:getBinStats:null#[return, binStats]
org.apache.commons.math4.random:EmpiricalDistribution:getUpperBounds:null#[double, binUpperBounds, double, binCount, for, int, i, 0, <, i, -, binCount, 1, ++, i, =, binUpperBounds, i, +, min, *, delta, +, i, 1, =, binUpperBounds, -, binCount, 1, max, return, binUpperBounds]
org.apache.commons.math4.random:EmpiricalDistribution:getGeneratorUpperBounds:null#[int, len, upperBounds.length, double, out, double, len, System, arraycopy, upperBounds, 0, out, 0, len, return, out]
org.apache.commons.math4.random:EmpiricalDistribution:isLoaded:null#[return, loaded]
org.apache.commons.math4.random:EmpiricalDistribution:reSeed:long#[randomData, reSeed, seed]
org.apache.commons.math4.random:EmpiricalDistribution:probability:double#[return, 0]
org.apache.commons.math4.random:EmpiricalDistribution:density:double#[if, ||, <, x, min, >, x, max, return, 0d, final, int, binIndex, findBin, x, final, RealDistribution, kernel, getKernel, binStats, get, binIndex, return, /, *, kernel, density, x, pB, binIndex, kB, binIndex]
org.apache.commons.math4.random:EmpiricalDistribution:cumulativeProbability:double#[if, <, x, min, return, 0d, if, >=, x, max, return, 1d, final, int, binIndex, findBin, x, final, double, pBminus, pBminus, binIndex, final, double, pB, pB, binIndex, final, RealDistribution, kernel, k, x, if, instanceof, kernel, ConstantRealDistribution, if, <, x, kernel, getNumericalMean, return, pBminus, return, +, pBminus, pB, final, double, binBounds, getUpperBounds, final, double, kB, kB, binIndex, final, double, lower, ==, binIndex, 0, min, binBounds, -, binIndex, 1, final, double, withinBinCum, /, -, kernel, cumulativeProbability, x, kernel, cumulativeProbability, lower, kB, return, +, pBminus, *, pB, withinBinCum]
org.apache.commons.math4.random:EmpiricalDistribution:inverseCumulativeProbability:double#[if, ||, <, p, 0.0, >, p, 1.0, throw, new, OutOfRangeException, p, 0, 1, if, ==, p, 0.0, return, getSupportLowerBound, if, ==, p, 1.0, return, getSupportUpperBound, int, i, 0, while, <, cumBinP, i, p, ++, i, final, RealDistribution, kernel, getKernel, binStats, get, i, final, double, kB, kB, i, final, double, binBounds, getUpperBounds, final, double, lower, ==, i, 0, min, binBounds, -, i, 1, final, double, kBminus, kernel, cumulativeProbability, lower, final, double, pB, pB, i, final, double, pBminus, pBminus, i, final, double, pCrit, -, p, pBminus, if, <=, pCrit, 0, return, lower, return, kernel, inverseCumulativeProbability, +, kBminus, /, *, pCrit, kB, pB]
org.apache.commons.math4.random:EmpiricalDistribution:getNumericalMean:null#[return, sampleStats, getMean]
org.apache.commons.math4.random:EmpiricalDistribution:getNumericalVariance:null#[return, sampleStats, getVariance]
org.apache.commons.math4.random:EmpiricalDistribution:getSupportLowerBound:null#[return, min]
org.apache.commons.math4.random:EmpiricalDistribution:getSupportUpperBound:null#[return, max]
org.apache.commons.math4.random:EmpiricalDistribution:isSupportConnected:null#[return, true]
org.apache.commons.math4.random:EmpiricalDistribution:reseedRandomGenerator:long#[randomData, reSeed, seed]
org.apache.commons.math4.random:EmpiricalDistribution:pB:int#[return, ==, i, 0, upperBounds, 0, -, upperBounds, i, upperBounds, -, i, 1]
org.apache.commons.math4.random:EmpiricalDistribution:pBminus:int#[return, ==, i, 0, 0, upperBounds, -, i, 1]
org.apache.commons.math4.random:EmpiricalDistribution:kB:int#[final, double, binBounds, getUpperBounds, final, RealDistribution, kernel, getKernel, binStats, get, i, return, ==, i, 0, kernel, probability, min, binBounds, 0, kernel, probability, binBounds, -, i, 1, binBounds, i]
org.apache.commons.math4.random:EmpiricalDistribution:k:double#[final, int, binIndex, findBin, x, return, getKernel, binStats, get, binIndex]
org.apache.commons.math4.random:EmpiricalDistribution:cumBinP:int#[return, upperBounds, binIndex]
org.apache.commons.math4.random:EmpiricalDistribution:getKernel:SummaryStatistics#[if, ||, ==, bStats, getN, 1, ==, bStats, getVariance, 0, return, new, ConstantRealDistribution, bStats, getMean, return, new, NormalDistribution, randomData, getRandomGenerator, bStats, getMean, bStats, getStandardDeviation, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY]
org.apache.commons.math4.random:GaussianRandomGenerator:nextNormalizedDouble:null#[return, generator, nextGaussian]
org.apache.commons.math4.random:HaltonSequenceGenerator:nextVector:null#[final, double, v, double, dimension, for, int, i, 0, <, i, dimension, ++, i, int, index, count, double, f, /, 1.0, base, i, int, j, 0, while, >, index, 0, final, int, digit, scramble, i, j, base, i, %, index, base, i, +=, v, i, *, f, digit, /=, index, base, i, /=, f, base, i, ++, count, return, v]
org.apache.commons.math4.random:HaltonSequenceGenerator:scramble:int+int+int+int#[return, !=, weight, null, %, *, weight, i, digit, b, digit]
org.apache.commons.math4.random:HaltonSequenceGenerator:skipTo:int#[=, count, index, return, nextVector]
org.apache.commons.math4.random:HaltonSequenceGenerator:getNextIndex:null#[return, count]
org.apache.commons.math4.random:ISAACRandom:setSeed:int#[setSeed, int, seed]
org.apache.commons.math4.random:ISAACRandom:setSeed:long#[setSeed, int, int, >>>, seed, 32, int, &, seed, 0xffffffffL]
org.apache.commons.math4.random:ISAACRandom:setSeed:int[]#[if, ==, seed, null, setSeed, +, System, currentTimeMillis, System, identityHashCode, this, return, final, int, seedLen, seed.length, final, int, rslLen, rsl.length, System, arraycopy, seed, 0, rsl, 0, FastMath, min, seedLen, rslLen, if, <, seedLen, rslLen, for, int, j, seedLen, <, j, rslLen, ++, j, long, k, rsl, -, j, seedLen, =, rsl, j, int, &, +, *, 0x6c078965L, ^, k, >>, k, 30, j, 0xffffffffL, initState]
org.apache.commons.math4.random:ISAACRandom:next:int#[if, <, count, 0, isaac, =, count, -, SIZE, 1, return, >>>, rsl, --, count, -, 32, bits]
org.apache.commons.math4.random:ISAACRandom:isaac:null#[=, isaacI, 0, =, isaacJ, H_SIZE, +=, isaacB, ++, isaacC, while, <, isaacI, H_SIZE, isaac2, =, isaacJ, 0, while, <, isaacJ, H_SIZE, isaac2]
org.apache.commons.math4.random:ISAACRandom:isaac2:null#[=, isaacX, mem, isaacI, ^=, isaacA, <<, isaacA, 13, +=, isaacA, mem, ++, isaacJ, isaac3, =, isaacX, mem, isaacI, ^=, isaacA, >>>, isaacA, 6, +=, isaacA, mem, ++, isaacJ, isaac3, =, isaacX, mem, isaacI, ^=, isaacA, <<, isaacA, 2, +=, isaacA, mem, ++, isaacJ, isaac3, =, isaacX, mem, isaacI, ^=, isaacA, >>>, isaacA, 16, +=, isaacA, mem, ++, isaacJ, isaac3]
org.apache.commons.math4.random:ISAACRandom:isaac3:null#[=, mem, isaacI, +, mem, >>, &, isaacX, MASK, 2, isaacA, isaacB, =, isaacB, +, mem, >>, &, >>, mem, isaacI, SIZE_L, MASK, 2, isaacX, =, rsl, ++, isaacI, isaacB]
org.apache.commons.math4.random:ISAACRandom:initState:null#[=, isaacA, 0, =, isaacB, 0, =, isaacC, 0, for, int, j, 0, <, j, arr.length, ++, j, =, arr, j, GLD_RATIO, for, int, j, 0, <, j, 4, ++, j, shuffle, for, int, j, 0, <, j, SIZE, +=, j, 8, +=, arr, 0, rsl, j, +=, arr, 1, rsl, +, j, 1, +=, arr, 2, rsl, +, j, 2, +=, arr, 3, rsl, +, j, 3, +=, arr, 4, rsl, +, j, 4, +=, arr, 5, rsl, +, j, 5, +=, arr, 6, rsl, +, j, 6, +=, arr, 7, rsl, +, j, 7, shuffle, setState, j, for, int, j, 0, <, j, SIZE, +=, j, 8, +=, arr, 0, mem, j, +=, arr, 1, mem, +, j, 1, +=, arr, 2, mem, +, j, 2, +=, arr, 3, mem, +, j, 3, +=, arr, 4, mem, +, j, 4, +=, arr, 5, mem, +, j, 5, +=, arr, 6, mem, +, j, 6, +=, arr, 7, mem, +, j, 7, shuffle, setState, j, isaac, =, count, -, SIZE, 1, clear]
org.apache.commons.math4.random:ISAACRandom:shuffle:null#[^=, arr, 0, <<, arr, 1, 11, +=, arr, 3, arr, 0, +=, arr, 1, arr, 2, ^=, arr, 1, >>>, arr, 2, 2, +=, arr, 4, arr, 1, +=, arr, 2, arr, 3, ^=, arr, 2, <<, arr, 3, 8, +=, arr, 5, arr, 2, +=, arr, 3, arr, 4, ^=, arr, 3, >>>, arr, 4, 16, +=, arr, 6, arr, 3, +=, arr, 4, arr, 5, ^=, arr, 4, <<, arr, 5, 10, +=, arr, 7, arr, 4, +=, arr, 5, arr, 6, ^=, arr, 5, >>>, arr, 6, 4, +=, arr, 0, arr, 5, +=, arr, 6, arr, 7, ^=, arr, 6, <<, arr, 7, 8, +=, arr, 1, arr, 6, +=, arr, 7, arr, 0, ^=, arr, 7, >>>, arr, 0, 9, +=, arr, 2, arr, 7, +=, arr, 0, arr, 1]
org.apache.commons.math4.random:ISAACRandom:setState:int#[=, mem, start, arr, 0, =, mem, +, start, 1, arr, 1, =, mem, +, start, 2, arr, 2, =, mem, +, start, 3, arr, 3, =, mem, +, start, 4, arr, 4, =, mem, +, start, 5, arr, 5, =, mem, +, start, 6, arr, 6, =, mem, +, start, 7, arr, 7]
org.apache.commons.math4.random:JDKRandomGenerator:setSeed:int#[delegate, setSeed, long, seed]
org.apache.commons.math4.random:JDKRandomGenerator:setSeed:long#[delegate, setSeed, seed]
org.apache.commons.math4.random:JDKRandomGenerator:setSeed:int[]#[delegate, setSeed, RandomGeneratorFactory, convertToLong, seed]
org.apache.commons.math4.random:JDKRandomGenerator:nextBytes:byte[]#[delegate, nextBytes, bytes]
org.apache.commons.math4.random:JDKRandomGenerator:nextInt:null#[return, delegate, nextInt]
org.apache.commons.math4.random:JDKRandomGenerator:nextLong:null#[return, delegate, nextLong]
org.apache.commons.math4.random:JDKRandomGenerator:nextBoolean:null#[return, delegate, nextBoolean]
org.apache.commons.math4.random:JDKRandomGenerator:nextFloat:null#[return, delegate, nextFloat]
org.apache.commons.math4.random:JDKRandomGenerator:nextDouble:null#[return, delegate, nextDouble]
org.apache.commons.math4.random:JDKRandomGenerator:nextGaussian:null#[return, delegate, nextGaussian]
org.apache.commons.math4.random:JDKRandomGenerator:nextInt:int#[try, return, delegate, nextInt, n, catch, IllegalArgumentException, e, throw, new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:MersenneTwister:setSeed:int#[long, longMT, seed, =, mt, 0, int, longMT, for, =, mti, 1, <, mti, N, ++, mti, =, longMT, &, +, *, 1812433253l, ^, longMT, >>, longMT, 30, mti, 0xffffffffL, =, mt, mti, int, longMT, clear]
org.apache.commons.math4.random:MersenneTwister:setSeed:int[]#[if, ==, seed, null, setSeed, +, System, currentTimeMillis, System, identityHashCode, this, return, setSeed, 19650218, int, i, 1, int, j, 0, for, int, k, FastMath, max, N, seed.length, !=, k, 0, --, k, long, l0, |, &, mt, i, 0x7fffffffl, <, mt, i, 0, 0x80000000l, 0x0l, long, l1, |, &, mt, -, i, 1, 0x7fffffffl, <, mt, -, i, 1, 0, 0x80000000l, 0x0l, long, l, +, ^, l0, *, ^, l1, >>, l1, 30, 1664525l, seed, j, j, =, mt, i, int, &, l, 0xffffffffl, ++, i, ++, j, if, >=, i, N, =, mt, 0, mt, -, N, 1, =, i, 1, if, >=, j, seed.length, =, j, 0, for, int, k, -, N, 1, !=, k, 0, --, k, long, l0, |, &, mt, i, 0x7fffffffl, <, mt, i, 0, 0x80000000l, 0x0l, long, l1, |, &, mt, -, i, 1, 0x7fffffffl, <, mt, -, i, 1, 0, 0x80000000l, 0x0l, long, l, -, ^, l0, *, ^, l1, >>, l1, 30, 1566083941l, i, =, mt, i, int, &, l, 0xffffffffL, ++, i, if, >=, i, N, =, mt, 0, mt, -, N, 1, =, i, 1, =, mt, 0, 0x80000000, clear]
org.apache.commons.math4.random:MersenneTwister:setSeed:long#[setSeed, int, int, >>>, seed, 32, int, &, seed, 0xffffffffl]
org.apache.commons.math4.random:MersenneTwister:next:int#[int, y, if, >=, mti, N, int, mtNext, mt, 0, for, int, k, 0, <, k, -, N, M, ++, k, int, mtCurr, mtNext, =, mtNext, mt, +, k, 1, =, y, |, &, mtCurr, 0x80000000, &, mtNext, 0x7fffffff, =, mt, k, ^, mt, +, k, M, >>>, y, 1, MAG01, &, y, 0x1, for, int, k, -, N, M, <, k, -, N, 1, ++, k, int, mtCurr, mtNext, =, mtNext, mt, +, k, 1, =, y, |, &, mtCurr, 0x80000000, &, mtNext, 0x7fffffff, =, mt, k, ^, mt, +, k, -, M, N, >>>, y, 1, MAG01, &, y, 0x1, =, y, |, &, mtNext, 0x80000000, &, mt, 0, 0x7fffffff, =, mt, -, N, 1, ^, mt, -, M, 1, >>>, y, 1, MAG01, &, y, 0x1, =, mti, 0, =, y, mt, ++, mti, ^=, y, >>>, y, 11, ^=, y, &, <<, y, 7, 0x9d2c5680, ^=, y, &, <<, y, 15, 0xefc60000, ^=, y, >>>, y, 18, return, >>>, y, -, 32, bits]
org.apache.commons.math4.random:RandomAdaptor:createAdaptor:RandomGenerator#[return, new, RandomAdaptor, randomGenerator]
org.apache.commons.math4.random:RandomAdaptor:nextBoolean:null#[return, randomGenerator, nextBoolean]
org.apache.commons.math4.random:RandomAdaptor:nextBytes:byte[]#[randomGenerator, nextBytes, bytes]
org.apache.commons.math4.random:RandomAdaptor:nextDouble:null#[return, randomGenerator, nextDouble]
org.apache.commons.math4.random:RandomAdaptor:nextFloat:null#[return, randomGenerator, nextFloat]
org.apache.commons.math4.random:RandomAdaptor:nextGaussian:null#[return, randomGenerator, nextGaussian]
org.apache.commons.math4.random:RandomAdaptor:nextInt:null#[return, randomGenerator, nextInt]
org.apache.commons.math4.random:RandomAdaptor:nextInt:int#[return, randomGenerator, nextInt, n]
org.apache.commons.math4.random:RandomAdaptor:nextLong:null#[return, randomGenerator, nextLong]
org.apache.commons.math4.random:RandomAdaptor:setSeed:int#[if, !=, randomGenerator, null, randomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomAdaptor:setSeed:int[]#[if, !=, randomGenerator, null, randomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomAdaptor:setSeed:long#[if, !=, randomGenerator, null, randomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomDataGenerator:nextHexString:int#[if, <=, len, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.LENGTH, len, RandomGenerator, ran, getRandomGenerator, StringBuilder, outBuffer, new, StringBuilder, byte, randomBytes, byte, +, /, len, 2, 1, ran, nextBytes, randomBytes, for, int, i, 0, <, i, randomBytes.length, ++, i, Integer, c, Integer, valueOf, randomBytes, i, String, hex, Integer, toHexString, +, c, intValue, 128, if, ==, hex, length, 1, =, hex, +, "0", hex, outBuffer, append, hex, return, outBuffer, toString, substring, 0, len]
org.apache.commons.math4.random:RandomDataGenerator:nextInt:int+int#[return, new, UniformIntegerDistribution, getRandomGenerator, lower, upper, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextLong:long+long#[if, >=, lower, upper, throw, new, NumberIsTooLargeException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false, final, long, max, +, -, upper, lower, 1, if, <=, max, 0, final, RandomGenerator, rng, getRandomGenerator, while, true, final, long, r, rng, nextLong, if, &&, >=, r, lower, <=, r, upper, return, r, if, <, max, Integer.MAX_VALUE, return, +, lower, getRandomGenerator, nextInt, int, max, return, +, lower, nextLong, getRandomGenerator, max]
org.apache.commons.math4.random:RandomDataGenerator:nextLong:RandomGenerator+long#[if, >, n, 0, final, byte, byteArray, byte, 8, long, bits, long, val, do, rng, nextBytes, byteArray, =, bits, 0, for, final, byte, b, byteArray, =, bits, |, <<, bits, 8, &, long, b, 0xffL, &=, bits, 0x7fffffffffffffffL, =, val, %, bits, n, <, +, -, bits, val, -, n, 1, 0, return, val, throw, new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:RandomDataGenerator:nextSecureHexString:int#[if, <=, len, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.LENGTH, len, final, RandomGenerator, secRan, getSecRan, MessageDigest, alg, null, try, =, alg, MessageDigest, getInstance, "SHA-1", catch, NoSuchAlgorithmException, ex, throw, new, MathInternalError, ex, alg, reset, int, numIter, +, /, len, 40, 1, StringBuilder, outBuffer, new, StringBuilder, for, int, iter, 1, <, iter, +, numIter, 1, ++, iter, byte, randomBytes, byte, 40, secRan, nextBytes, randomBytes, alg, update, randomBytes, byte, hash, alg, digest, for, int, i, 0, <, i, hash.length, ++, i, Integer, c, Integer, valueOf, hash, i, String, hex, Integer, toHexString, +, c, intValue, 128, if, ==, hex, length, 1, =, hex, +, "0", hex, outBuffer, append, hex, return, outBuffer, toString, substring, 0, len]
org.apache.commons.math4.random:RandomDataGenerator:nextSecureInt:int+int#[return, new, UniformIntegerDistribution, getSecRan, lower, upper, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextSecureLong:long+long#[if, >=, lower, upper, throw, new, NumberIsTooLargeException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false, final, RandomGenerator, rng, getSecRan, final, long, max, +, -, upper, lower, 1, if, <=, max, 0, while, true, final, long, r, rng, nextLong, if, &&, >=, r, lower, <=, r, upper, return, r, if, <, max, Integer.MAX_VALUE, return, +, lower, rng, nextInt, int, max, return, +, lower, nextLong, rng, max]
org.apache.commons.math4.random:RandomDataGenerator:nextPoisson:double#[return, new, PoissonDistribution, getRandomGenerator, mean, PoissonDistribution.DEFAULT_EPSILON, PoissonDistribution.DEFAULT_MAX_ITERATIONS, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextGaussian:double+double#[if, <=, sigma, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.STANDARD_DEVIATION, sigma, return, +, *, sigma, getRandomGenerator, nextGaussian, mu]
org.apache.commons.math4.random:RandomDataGenerator:nextExponential:double#[return, new, ExponentialDistribution, getRandomGenerator, mean, ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextGamma:double+double#[return, new, GammaDistribution, getRandomGenerator, shape, scale, GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextHypergeometric:int+int+int#[return, new, HypergeometricDistribution, getRandomGenerator, populationSize, numberOfSuccesses, sampleSize, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextPascal:int+double#[return, new, PascalDistribution, getRandomGenerator, r, p, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextT:double#[return, new, TDistribution, getRandomGenerator, df, TDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextWeibull:double+double#[return, new, WeibullDistribution, getRandomGenerator, shape, scale, WeibullDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextZipf:int+double#[return, new, ZipfDistribution, getRandomGenerator, numberOfElements, exponent, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextBeta:double+double#[return, new, BetaDistribution, getRandomGenerator, alpha, beta, BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextBinomial:int+double#[return, new, BinomialDistribution, getRandomGenerator, numberOfTrials, probabilityOfSuccess, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextCauchy:double+double#[return, new, CauchyDistribution, getRandomGenerator, median, scale, CauchyDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextChiSquare:double#[return, new, ChiSquaredDistribution, getRandomGenerator, df, ChiSquaredDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextF:double+double#[return, new, FDistribution, getRandomGenerator, numeratorDf, denominatorDf, FDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextUniform:double+double#[return, nextUniform, lower, upper, false]
org.apache.commons.math4.random:RandomDataGenerator:nextUniform:double+double+boolean#[if, >=, lower, upper, throw, new, NumberIsTooLargeException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false, if, Double, isInfinite, lower, throw, new, NotFiniteNumberException, LocalizedFormats.INFINITE_BOUND, lower, if, Double, isInfinite, upper, throw, new, NotFiniteNumberException, LocalizedFormats.INFINITE_BOUND, upper, if, ||, Double, isNaN, lower, Double, isNaN, upper, throw, new, NotANumberException, final, RandomGenerator, generator, getRandomGenerator, double, u, generator, nextDouble, while, &&, !, lowerInclusive, <=, u, 0.0, =, u, generator, nextDouble, return, +, *, u, upper, *, -, 1.0, u, lower]
org.apache.commons.math4.random:RandomDataGenerator:nextPermutation:int+int#[if, >, k, n, throw, new, NumberIsTooLargeException, LocalizedFormats.PERMUTATION_EXCEEDS_N, k, n, true, if, <=, k, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.PERMUTATION_SIZE, k, int, index, MathArrays, natural, n, MathArrays, shuffle, index, getRandomGenerator, return, MathArrays, copyOf, index, k]
org.apache.commons.math4.random:RandomDataGenerator:nextSample:Collection<?>+int#[int, len, c, size, if, >, k, len, throw, new, NumberIsTooLargeException, LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, k, len, true, if, <=, k, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, k, Object, objects, c, toArray, int, index, nextPermutation, len, k, Object, result, Object, k, for, int, i, 0, <, i, k, ++, i, =, result, i, objects, index, i, return, result]
org.apache.commons.math4.random:RandomDataGenerator:reSeed:long#[getRandomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomDataGenerator:reSeedSecure:null#[getSecRan, setSeed, System, currentTimeMillis]
org.apache.commons.math4.random:RandomDataGenerator:reSeedSecure:long#[getSecRan, setSeed, seed]
org.apache.commons.math4.random:RandomDataGenerator:reSeed:null#[getRandomGenerator, setSeed, +, System, currentTimeMillis, System, identityHashCode, this]
org.apache.commons.math4.random:RandomDataGenerator:setSecureAlgorithm:String+String#[=, secRand, RandomGeneratorFactory, createRandomGenerator, SecureRandom, getInstance, algorithm, provider]
org.apache.commons.math4.random:RandomDataGenerator:getRandomGenerator:null#[if, ==, rand, null, initRan, return, rand]
org.apache.commons.math4.random:RandomDataGenerator:initRan:null#[=, rand, new, Well19937c, +, System, currentTimeMillis, System, identityHashCode, this]
org.apache.commons.math4.random:RandomDataGenerator:getSecRan:null#[if, ==, secRand, null, =, secRand, RandomGeneratorFactory, createRandomGenerator, new, SecureRandom, secRand, setSeed, +, System, currentTimeMillis, System, identityHashCode, this, return, secRand]
org.apache.commons.math4.random:RandomGeneratorFactory:createRandomGenerator:Random#[return, new, RandomGenerator, Override, public, void, setSeed, int, seed, rng, setSeed, long, seed, Override, public, void, setSeed, int, seed, rng, setSeed, convertToLong, seed, Override, public, void, setSeed, long, seed, rng, setSeed, seed, Override, public, void, nextBytes, byte, bytes, rng, nextBytes, bytes, Override, public, int, nextInt, return, rng, nextInt, Override, public, int, nextInt, int, n, if, <=, n, 0, throw, new, NotStrictlyPositiveException, n, return, rng, nextInt, n, Override, public, long, nextLong, return, rng, nextLong, Override, public, boolean, nextBoolean, return, rng, nextBoolean, Override, public, float, nextFloat, return, rng, nextFloat, Override, public, double, nextDouble, return, rng, nextDouble, Override, public, double, nextGaussian, return, rng, nextGaussian]
org.apache.commons.math4.random:RandomGeneratorFactory:convertToLong:int[]#[final, long, prime, 4294967291l, long, combined, 0l, for, int, s, seed, =, combined, +, *, combined, prime, s, return, combined]
org.apache.commons.math4.random:SobolSequenceGenerator:initFromStream:InputStream#[for, int, i, 1, <=, i, BITS, ++, i, =, direction, 0, i, <<, 1l, -, BITS, i, final, Charset, charset, Charset, forName, FILE_CHARSET, final, BufferedReader, reader, new, BufferedReader, new, InputStreamReader, is, charset, int, dim, -, 1, try, reader, readLine, int, lineNumber, 2, int, index, 1, String, line, null, while, !=, =, line, reader, readLine, null, StringTokenizer, st, new, StringTokenizer, line, " ", try, =, dim, Integer, parseInt, st, nextToken, if, &&, >=, dim, 2, <=, dim, dimension, final, int, s, Integer, parseInt, st, nextToken, final, int, a, Integer, parseInt, st, nextToken, final, int, m, int, +, s, 1, for, int, i, 1, <=, i, s, ++, i, =, m, i, Integer, parseInt, st, nextToken, initDirectionVector, ++, index, a, m, if, >, dim, dimension, return, dim, catch, NoSuchElementException, e, throw, new, MathParseException, line, lineNumber, catch, NumberFormatException, e, throw, new, MathParseException, line, lineNumber, ++, lineNumber, reader, close, return, dim]
org.apache.commons.math4.random:SobolSequenceGenerator:initDirectionVector:int+int+int[]#[final, int, s, -, m.length, 1, for, int, i, 1, <=, i, s, ++, i, =, direction, d, i, <<, long, m, i, -, BITS, i, for, int, i, +, s, 1, <=, i, BITS, ++, i, =, direction, d, i, ^, direction, d, -, i, s, >>, direction, d, -, i, s, s, for, int, k, 1, <=, k, -, s, 1, ++, k, ^=, direction, d, i, *, &, >>, a, -, s, 1, k, 1, direction, d, -, i, k]
org.apache.commons.math4.random:SobolSequenceGenerator:nextVector:null#[final, double, v, double, dimension, if, ==, count, 0, ++, count, return, v, int, c, 1, int, value, -, count, 1, while, ==, &, value, 1, 1, >>=, value, 1, ++, c, for, int, i, 0, <, i, dimension, ++, i, ^=, x, i, direction, i, c, =, v, i, /, double, x, i, SCALE, ++, count, return, v]
org.apache.commons.math4.random:SobolSequenceGenerator:skipTo:int#[if, ==, index, 0, Arrays, fill, x, 0, final, int, i, -, index, 1, final, long, grayCode, ^, i, >>, i, 1, for, int, j, 0, <, j, dimension, ++, j, long, result, 0, for, int, k, 1, <=, k, BITS, ++, k, final, long, shift, >>, grayCode, -, k, 1, if, ==, shift, 0, break, final, long, ik, &, shift, 1, ^=, result, *, ik, direction, j, k, =, x, j, result, =, count, index, return, nextVector]
org.apache.commons.math4.random:SobolSequenceGenerator:getNextIndex:null#[return, count]
org.apache.commons.math4.random:StableRandomGenerator:nextNormalizedDouble:null#[double, omega, -, FastMath, log, generator, nextDouble, double, phi, *, FastMath.PI, -, generator, nextDouble, 0.5, if, ==, alpha, 2d, return, *, FastMath, sqrt, *, 2d, omega, FastMath, sin, phi, double, x, if, ==, beta, 0d, if, ==, alpha, 1d, =, x, FastMath, tan, phi, =, x, /, *, FastMath, pow, *, omega, FastMath, cos, *, -, 1, alpha, phi, -, /, 1d, alpha, 1d, FastMath, sin, *, alpha, phi, FastMath, pow, FastMath, cos, phi, /, 1d, alpha, double, cosPhi, FastMath, cos, phi, if, >, FastMath, abs, -, alpha, 1d, 1e-8, double, alphaPhi, *, alpha, phi, double, invAlphaPhi, -, phi, alphaPhi, =, x, /, *, /, +, FastMath, sin, alphaPhi, *, zeta, FastMath, cos, alphaPhi, cosPhi, +, FastMath, cos, invAlphaPhi, *, zeta, FastMath, sin, invAlphaPhi, FastMath, pow, *, omega, cosPhi, /, -, 1, alpha, alpha, double, betaPhi, +, /, FastMath.PI, 2, *, beta, phi, =, x, *, /, 2d, FastMath.PI, -, *, betaPhi, FastMath, tan, phi, *, beta, FastMath, log, /, *, *, /, FastMath.PI, 2d, omega, cosPhi, betaPhi, if, !=, alpha, 1d, +=, x, *, beta, FastMath, tan, /, *, FastMath.PI, alpha, 2, return, x]
org.apache.commons.math4.random:SynchronizedRandomGenerator:setSeed:int#[wrapped, setSeed, seed]
org.apache.commons.math4.random:SynchronizedRandomGenerator:setSeed:int[]#[wrapped, setSeed, seed]
org.apache.commons.math4.random:SynchronizedRandomGenerator:setSeed:long#[wrapped, setSeed, seed]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextBytes:byte[]#[wrapped, nextBytes, bytes]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextInt:null#[return, wrapped, nextInt]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextInt:int#[return, wrapped, nextInt, n]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextLong:null#[return, wrapped, nextLong]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextBoolean:null#[return, wrapped, nextBoolean]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextFloat:null#[return, wrapped, nextFloat]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextDouble:null#[return, wrapped, nextDouble]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextGaussian:null#[return, wrapped, nextGaussian]
org.apache.commons.math4.random:UncorrelatedRandomVectorGenerator:nextVector:null#[double, random, double, mean.length, for, int, i, 0, <, i, random.length, ++, i, =, random, i, +, mean, i, *, standardDeviation, i, generator, nextNormalizedDouble, return, random]
org.apache.commons.math4.random:UniformRandomGenerator:nextNormalizedDouble:null#[return, *, SQRT3, -, *, 2, generator, nextDouble, 1.0]
org.apache.commons.math4.random:UnitSphereRandomVectorGenerator:nextVector:null#[final, double, v, double, dimension, double, normSq, 0, for, int, i, 0, <, i, dimension, ++, i, final, double, comp, rand, nextGaussian, =, v, i, comp, +=, normSq, *, comp, comp, final, double, f, /, 1, FastMath, sqrt, normSq, for, int, i, 0, <, i, dimension, ++, i, *=, v, i, f, return, v]
org.apache.commons.math4.random:ValueServer:getNext:null#[switch, mode, case, DIGEST_MODE, return, getNextDigest, case, REPLAY_MODE, return, getNextReplay, case, UNIFORM_MODE, return, getNextUniform, case, EXPONENTIAL_MODE, return, getNextExponential, case, GAUSSIAN_MODE, return, getNextGaussian, case, CONSTANT_MODE, return, mu, default, throw, new, MathIllegalStateException, LocalizedFormats.UNKNOWN_MODE, mode, "DIGEST_MODE", DIGEST_MODE, "REPLAY_MODE", REPLAY_MODE, "UNIFORM_MODE", UNIFORM_MODE, "EXPONENTIAL_MODE", EXPONENTIAL_MODE, "GAUSSIAN_MODE", GAUSSIAN_MODE, "CONSTANT_MODE", CONSTANT_MODE]
org.apache.commons.math4.random:ValueServer:fill:double[]#[for, int, i, 0, <, i, values.length, ++, i, =, values, i, getNext]
org.apache.commons.math4.random:ValueServer:fill:int#[double, out, double, length, for, int, i, 0, <, i, length, ++, i, =, out, i, getNext, return, out]
org.apache.commons.math4.random:ValueServer:computeDistribution:null#[computeDistribution, EmpiricalDistribution.DEFAULT_BIN_COUNT]
org.apache.commons.math4.random:ValueServer:computeDistribution:int#[=, empiricalDistribution, new, EmpiricalDistribution, binCount, randomData, getRandomGenerator, empiricalDistribution, load, valuesFileURL, =, mu, empiricalDistribution, getSampleStats, getMean, =, sigma, empiricalDistribution, getSampleStats, getStandardDeviation]
org.apache.commons.math4.random:ValueServer:getMode:null#[return, mode]
org.apache.commons.math4.random:ValueServer:setMode:int#[=, this, mode, mode]
org.apache.commons.math4.random:ValueServer:getValuesFileURL:null#[return, valuesFileURL]
org.apache.commons.math4.random:ValueServer:setValuesFileURL:String#[=, this, valuesFileURL, new, URL, url]
org.apache.commons.math4.random:ValueServer:setValuesFileURL:URL#[=, this, valuesFileURL, url]
org.apache.commons.math4.random:ValueServer:getEmpiricalDistribution:null#[return, empiricalDistribution]
org.apache.commons.math4.random:ValueServer:resetReplayFile:null#[if, !=, filePointer, null, try, filePointer, close, =, filePointer, null, catch, IOException, ex, =, filePointer, new, BufferedReader, new, InputStreamReader, valuesFileURL, openStream, "UTF-8"]
org.apache.commons.math4.random:ValueServer:closeReplayFile:null#[if, !=, filePointer, null, filePointer, close, =, filePointer, null]
org.apache.commons.math4.random:ValueServer:getMu:null#[return, mu]
org.apache.commons.math4.random:ValueServer:setMu:double#[=, this, mu, mu]
org.apache.commons.math4.random:ValueServer:getSigma:null#[return, sigma]
org.apache.commons.math4.random:ValueServer:setSigma:double#[=, this, sigma, sigma]
org.apache.commons.math4.random:ValueServer:reSeed:long#[randomData, reSeed, seed]
org.apache.commons.math4.random:ValueServer:getNextDigest:null#[if, ||, ==, empiricalDistribution, null, ==, empiricalDistribution, getBinStats, size, 0, throw, new, MathIllegalStateException, LocalizedFormats.DIGEST_NOT_INITIALIZED, return, empiricalDistribution, getNextValue]
org.apache.commons.math4.random:ValueServer:getNextReplay:null#[String, str, null, if, ==, filePointer, null, resetReplayFile, if, ==, =, str, filePointer, readLine, null, closeReplayFile, resetReplayFile, if, ==, =, str, filePointer, readLine, null, throw, new, MathIllegalStateException, LocalizedFormats.URL_CONTAINS_NO_DATA, valuesFileURL, return, Double, parseDouble, str]
org.apache.commons.math4.random:ValueServer:getNextUniform:null#[return, randomData, nextUniform, 0, *, 2, mu]
org.apache.commons.math4.random:ValueServer:getNextExponential:null#[return, randomData, nextExponential, mu]
org.apache.commons.math4.random:ValueServer:getNextGaussian:null#[return, randomData, nextGaussian, mu, sigma]
org.apache.commons.math4.random:Well1024a:next:int#[final, int, indexRm1, TABLE, getIndexPred, index, final, int, v0, v, index, final, int, vM1, v, TABLE, getIndexM1, index, final, int, vM2, v, TABLE, getIndexM2, index, final, int, vM3, v, TABLE, getIndexM3, index, final, int, z0, v, indexRm1, final, int, z1, ^, v0, ^, vM1, >>>, vM1, 8, final, int, z2, ^, ^, vM2, <<, vM2, 19, ^, vM3, <<, vM3, 14, final, int, z3, ^, z1, z2, final, int, z4, ^, ^, z0, <<, z0, 11, ^, z1, <<, z1, 7, ^, z2, <<, z2, 13, =, v, index, z3, =, v, indexRm1, z4, =, index, indexRm1, return, >>>, z4, -, 32, bits]
org.apache.commons.math4.random:Well19937a:next:int#[final, int, indexRm1, TABLE, getIndexPred, index, final, int, indexRm2, TABLE, getIndexPred2, index, final, int, v0, v, index, final, int, vM1, v, TABLE, getIndexM1, index, final, int, vM2, v, TABLE, getIndexM2, index, final, int, vM3, v, TABLE, getIndexM3, index, final, int, z0, ^, &, 0x80000000, v, indexRm1, &, 0x7FFFFFFF, v, indexRm2, final, int, z1, ^, ^, v0, <<, v0, 25, ^, vM1, >>>, vM1, 27, final, int, z2, ^, >>>, vM2, 9, ^, vM3, >>>, vM3, 1, final, int, z3, ^, z1, z2, final, int, z4, ^, z0, ^, z1, <<, z1, 9, ^, z2, <<, z2, 21, ^, z3, >>>, z3, 21, =, v, index, z3, =, v, indexRm1, z4, &=, v, indexRm2, 0x80000000, =, index, indexRm1, return, >>>, z4, -, 32, bits]
org.apache.commons.math4.random:Well19937c:next:int#[final, int, indexRm1, TABLE, getIndexPred, index, final, int, indexRm2, TABLE, getIndexPred2, index, final, int, v0, v, index, final, int, vM1, v, TABLE, getIndexM1, index, final, int, vM2, v, TABLE, getIndexM2, index, final, int, vM3, v, TABLE, getIndexM3, index, final, int, z0, ^, &, 0x80000000, v, indexRm1, &, 0x7FFFFFFF, v, indexRm2, final, int, z1, ^, ^, v0, <<, v0, 25, ^, vM1, >>>, vM1, 27, final, int, z2, ^, >>>, vM2, 9, ^, vM3, >>>, vM3, 1, final, int, z3, ^, z1, z2, int, z4, ^, z0, ^, z1, <<, z1, 9, ^, z2, <<, z2, 21, ^, z3, >>>, z3, 21, =, v, index, z3, =, v, indexRm1, z4, &=, v, indexRm2, 0x80000000, =, index, indexRm1, ^=, z4, &, <<, z4, 7, 0xe46e1700, ^=, z4, &, <<, z4, 15, 0x9b868000, return, >>>, z4, -, 32, bits]
org.apache.commons.math4.random:Well44497a:next:int#[final, int, indexRm1, TABLE, getIndexPred, index, final, int, indexRm2, TABLE, getIndexPred2, index, final, int, v0, v, index, final, int, vM1, v, TABLE, getIndexM1, index, final, int, vM2, v, TABLE, getIndexM2, index, final, int, vM3, v, TABLE, getIndexM3, index, final, int, z0, ^, &, 0xFFFF8000, v, indexRm1, &, 0x00007FFF, v, indexRm2, final, int, z1, ^, ^, v0, <<, v0, 24, ^, vM1, >>>, vM1, 30, final, int, z2, ^, ^, vM2, <<, vM2, 10, <<, vM3, 26, final, int, z3, ^, z1, z2, final, int, z2Prime, &, ^, <<, z2, 9, >>>, z2, 23, 0xfbffffff, final, int, z2Second, !=, &, z2, 0x00020000, 0, ^, z2Prime, 0xb729fcec, z2Prime, final, int, z4, ^, z0, ^, z1, >>>, z1, 20, z2Second, z3, =, v, index, z3, =, v, indexRm1, z4, &=, v, indexRm2, 0xFFFF8000, =, index, indexRm1, return, >>>, z4, -, 32, bits]
org.apache.commons.math4.random:Well44497b:next:int#[final, int, indexRm1, TABLE, getIndexPred, index, final, int, indexRm2, TABLE, getIndexPred2, index, final, int, v0, v, index, final, int, vM1, v, TABLE, getIndexM1, index, final, int, vM2, v, TABLE, getIndexM2, index, final, int, vM3, v, TABLE, getIndexM3, index, final, int, z0, ^, &, 0xFFFF8000, v, indexRm1, &, 0x00007FFF, v, indexRm2, final, int, z1, ^, ^, v0, <<, v0, 24, ^, vM1, >>>, vM1, 30, final, int, z2, ^, ^, vM2, <<, vM2, 10, <<, vM3, 26, final, int, z3, ^, z1, z2, final, int, z2Prime, &, ^, <<, z2, 9, >>>, z2, 23, 0xfbffffff, final, int, z2Second, !=, &, z2, 0x00020000, 0, ^, z2Prime, 0xb729fcec, z2Prime, int, z4, ^, z0, ^, z1, >>>, z1, 20, z2Second, z3, =, v, index, z3, =, v, indexRm1, z4, &=, v, indexRm2, 0xFFFF8000, =, index, indexRm1, ^=, z4, &, <<, z4, 7, 0x93dd1400, ^=, z4, &, <<, z4, 15, 0xfa118000, return, >>>, z4, -, 32, bits]
org.apache.commons.math4.random:Well512a:next:int#[final, int, indexRm1, TABLE, getIndexPred, index, final, int, vi, v, index, final, int, vi1, v, TABLE, getIndexM1, index, final, int, vi2, v, TABLE, getIndexM2, index, final, int, z0, v, indexRm1, final, int, z1, ^, ^, vi, <<, vi, 16, ^, vi1, <<, vi1, 15, final, int, z2, ^, vi2, >>>, vi2, 11, final, int, z3, ^, z1, z2, final, int, z4, ^, ^, z0, <<, z0, 2, ^, z1, <<, z1, 18, <<, z2, 28, ^, z3, &, <<, z3, 5, 0xda442d24, =, v, index, z3, =, v, indexRm1, z4, =, index, indexRm1, return, >>>, z4, -, 32, bits]
org.apache.commons.math4.special:BesselJ:value:double#[return, BesselJ, value, order, x]
org.apache.commons.math4.special:BesselJ:value:double+double#[final, int, n, int, order, final, double, alpha, -, order, n, final, int, nb, +, n, 1, final, BesselJResult, res, rjBesl, x, alpha, nb, if, >=, res.nVals, nb, return, res.vals, n, if, <, res.nVals, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.BESSEL_FUNCTION_BAD_ARGUMENT, order, x, if, <, FastMath, abs, res.vals, -, res.nVals, 1, 1e-100, return, res.vals, n, throw, new, ConvergenceException, LocalizedFormats.BESSEL_FUNCTION_FAILED_CONVERGENCE, order, x]
org.apache.commons.math4.special:BesselJ:rjBesl:double+double+int#[final, double, b, double, nb, int, ncalc, 0, double, alpem, 0, double, alp2em, 0, final, int, magx, int, x, if, &&, >, nb, 0, >=, x, X_MIN, <=, x, X_MAX, >=, alpha, 0, <, alpha, 1, =, ncalc, nb, for, int, i, 0, <, i, nb, ++, i, =, b, i, 0, double, tempa, double, tempb, double, tempc, double, tover, if, <, x, RTNSIG, =, tempa, 1, =, alpem, +, 1, alpha, double, halfx, 0, if, >, x, ENMTEN, =, halfx, *, 0.5, x, if, !=, alpha, 0, =, tempa, /, FastMath, pow, halfx, alpha, *, alpha, Gamma, gamma, alpha, =, tempb, 0, if, >, +, x, 1, 1, =, tempb, *, -, halfx, halfx, =, b, 0, +, tempa, /, *, tempa, tempb, alpem, if, &&, !=, x, 0, ==, b, 0, 0, =, ncalc, 0, if, !=, nb, 1, if, <=, x, 0, for, int, n, 1, <, n, nb, ++, n, =, b, n, 0, =, tempc, halfx, =, tover, !=, tempb, 0, /, ENMTEN, tempb, /, *, 2, ENMTEN, x, for, int, n, 1, <, n, nb, ++, n, /=, tempa, alpem, +=, alpem, 1, *=, tempa, tempc, if, <=, tempa, *, tover, alpem, =, tempa, 0, =, b, n, +, tempa, /, *, tempa, tempb, alpem, if, &&, ==, b, n, 0, >, ncalc, n, =, ncalc, n, if, &&, >, x, 25.0, <=, nb, +, magx, 1, final, double, xc, FastMath, sqrt, /, PI2, x, final, double, mul, /, 0.125, x, final, double, xin, *, mul, mul, int, m, 0, if, >=, x, 130.0, =, m, 4, if, >=, x, 35.0, =, m, 8, =, m, 11, final, double, xm, *, 4.0, m, double, t, double, int, +, /, x, TWOPI, 0.5, final, double, z, -, -, -, x, *, t, TOWPI1, *, t, TWOPI2, /, +, alpha, 0.5, PI2, double, vsin, FastMath, sin, z, double, vcos, FastMath, cos, z, double, gnu, *, 2, alpha, double, capq, double, capp, double, s, double, t1, double, xk, for, int, i, 1, <=, i, 2, ++, i, =, s, *, -, xm, 1, gnu, +, -, xm, 1, gnu, xin, 0.5, =, t, *, -, gnu, -, xm, 3.0, +, gnu, -, xm, 3.0, =, capp, /, *, s, t, FACT, *, 2, m, =, t1, *, -, gnu, +, xm, 1, +, gnu, +, xm, 1, =, capq, /, *, s, t1, FACT, +, *, 2, m, 1, =, xk, xm, int, k, *, 2, m, =, t1, t, for, int, j, 2, <=, j, m, ++, j, -=, xk, 4.0, =, s, *, -, xk, 1, gnu, +, -, xk, 1, gnu, =, t, *, -, gnu, -, xk, 3.0, +, gnu, -, xk, 3.0, =, capp, *, +, capp, /, 1, FACT, -, k, 2, s, t, xin, =, capq, *, +, capq, /, 1, FACT, -, k, 1, s, t1, xin, -=, k, 2, =, t1, t, +=, capp, 1, =, capq, *, +, capq, 1, -, *, gnu, gnu, 1, /, 0.125, x, =, b, -, i, 1, *, xc, -, *, capp, vcos, *, capq, vsin, if, ==, nb, 1, return, new, BesselJResult, MathArrays, copyOf, b, b.length, ncalc, =, t, vsin, =, vsin, -, vcos, =, vcos, t, +=, gnu, 2.0, if, >, nb, 2, =, gnu, +, *, 2, alpha, 2.0, for, int, j, 2, <, j, nb, ++, j, =, b, j, -, /, *, gnu, b, -, j, 1, x, b, -, j, 2, +=, gnu, 2.0, final, int, nbmx, -, nb, magx, int, n, +, magx, 1, int, nstart, 0, int, nend, 0, double, en, *, 2, +, n, alpha, double, plast, 1, double, p, /, en, x, double, pold, double, test, *, 2, ENSIG, boolean, readyToInitialize, false, if, >=, nbmx, 3, =, tover, /, ENTEN, ENSIG, =, nstart, +, magx, 2, =, nend, -, nb, 1, =, en, *, 2, +, -, nstart, 1, alpha, double, psave, double, psavel, for, int, k, nstart, <=, k, nend, ++, k, =, n, k, +=, en, 2.0, =, pold, plast, =, plast, p, =, p, -, /, *, en, plast, x, pold, if, >, p, tover, =, tover, ENTEN, /=, p, tover, /=, plast, tover, =, psave, p, =, psavel, plast, =, nstart, +, n, 1, do, +=, n, 1, +=, en, 2.0, =, pold, plast, =, plast, p, =, p, -, /, *, en, plast, x, pold, <=, p, 1, =, tempb, /, en, x, =, test, *, pold, plast, -, 0.5, /, 0.5, *, tempb, tempb, /=, test, ENSIG, =, p, *, plast, tover, -=, n, 1, -=, en, 2.0, =, nend, FastMath, min, nb, n, for, int, l, nstart, <=, l, nend, ++, l, =, pold, psavel, =, psavel, psave, =, psave, -, /, *, en, psavel, x, pold, if, >, *, psave, psavel, test, =, ncalc, -, l, 1, =, readyToInitialize, true, break, =, ncalc, nend, =, readyToInitialize, true, break, if, !, readyToInitialize, =, n, nend, =, en, *, 2, +, n, alpha, =, test, FastMath, max, test, *, FastMath, sqrt, *, plast, ENSIG, FastMath, sqrt, *, 2, p, if, !, readyToInitialize, do, +=, n, 1, +=, en, 2.0, =, pold, plast, =, plast, p, =, p, -, /, *, en, plast, x, pold, <, p, test, +=, n, 1, +=, en, 2.0, =, tempb, 0, =, tempa, /, 1, p, int, m, -, *, 2, n, *, 4, /, n, 2, double, sum, 0, double, em, double, /, n, 2, =, alpem, +, -, em, 1, alpha, =, alp2em, +, *, 2, em, alpha, if, !=, m, 0, =, sum, /, *, tempa, alpem, alp2em, em, =, nend, -, n, nb, boolean, readyToNormalize, false, boolean, calculatedB0, false, for, int, l, 1, <=, l, nend, ++, l, -=, n, 1, -=, en, 2.0, =, tempc, tempb, =, tempb, tempa, =, tempa, -, /, *, en, tempb, x, tempc, =, m, -, 2, m, if, !=, m, 0, -=, em, 1, =, alp2em, +, *, 2, em, alpha, if, ==, n, 1, break, =, alpem, +, -, em, 1, alpha, if, ==, alpem, 0, =, alpem, 1, =, sum, /, *, +, sum, *, tempa, alp2em, alpem, em, =, b, -, n, 1, tempa, if, >=, nend, 0, if, <=, nb, 1, =, alp2em, alpha, if, ==, +, alpha, 1, 1, =, alp2em, 1, +=, sum, *, b, 0, alp2em, =, readyToNormalize, true, -=, n, 1, -=, en, 2.0, =, b, -, n, 1, -, /, *, en, tempa, x, tempb, if, ==, n, 1, =, calculatedB0, true, =, m, -, 2, m, if, !=, m, 0, -=, em, 1, =, alp2em, +, *, 2, em, alpha, =, alpem, +, -, em, 1, alpha, if, ==, alpem, 0, =, alpem, 1, =, sum, /, *, +, sum, *, b, -, n, 1, alp2em, alpem, em, if, &&, !, readyToNormalize, !, calculatedB0, =, nend, -, n, 2, if, !=, nend, 0, for, int, l, 1, <=, l, nend, ++, l, -=, n, 1, -=, en, 2.0, =, b, -, n, 1, -, /, *, en, b, n, x, b, +, n, 1, =, m, -, 2, m, if, !=, m, 0, -=, em, 1, =, alp2em, +, *, 2, em, alpha, =, alpem, +, -, em, 1, alpha, if, ==, alpem, 0, =, alpem, 1, =, sum, /, *, +, sum, *, b, -, n, 1, alp2em, alpem, em, if, !, readyToNormalize, if, !, calculatedB0, =, b, 0, -, /, *, 2.0, +, alpha, 1, b, 1, x, b, 2, -=, em, 1, =, alp2em, +, *, 2, em, alpha, if, ==, alp2em, 0, =, alp2em, 1, +=, sum, *, b, 0, alp2em, if, >, FastMath, abs, alpha, 1e-16, *=, sum, *, Gamma, gamma, alpha, FastMath, pow, *, x, 0.5, -, alpha, =, tempa, ENMTEN, if, >, sum, 1, *=, tempa, sum, for, =, n, 0, <, n, nb, ++, n, if, <, FastMath, abs, b, n, tempa, =, b, n, 0, /=, b, n, sum, if, >, b.length, 0, =, b, 0, 0, =, ncalc, -, FastMath, min, nb, 0, 1, return, new, BesselJResult, MathArrays, copyOf, b, b.length, ncalc]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double#[return, regularizedBeta, x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double+double#[return, regularizedBeta, x, a, b, epsilon, Integer.MAX_VALUE]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double+int#[return, regularizedBeta, x, a, b, DEFAULT_EPSILON, maxIterations]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double+double+int#[double, ret, if, ||, ||, ||, ||, Double, isNaN, x, Double, isNaN, a, Double, isNaN, b, <, x, 0, >, x, 1, <=, a, 0, <=, b, 0, =, ret, Double.NaN, if, &&, >, x, /, +, a, 1, +, 2, b, a, <=, -, 1, x, /, +, b, 1, +, 2, b, a, =, ret, -, 1, regularizedBeta, -, 1, x, b, a, epsilon, maxIterations, ContinuedFraction, fraction, new, ContinuedFraction, Override, protected, double, getB, int, n, double, x, double, ret, double, m, if, ==, %, n, 2, 0, =, m, /, n, 2.0, =, ret, /, *, m, -, b, m, x, *, -, +, a, *, 2, m, 1, +, a, *, 2, m, =, m, /, -, n, 1.0, 2.0, =, ret, /, -, *, +, a, m, +, a, b, m, x, *, +, a, *, 2, m, +, a, *, 2, m, 1.0, return, ret, Override, protected, double, getA, int, n, double, x, return, 1.0, =, ret, /, *, FastMath, exp, -, -, +, *, a, FastMath, log, x, *, b, FastMath, log1p, -, x, FastMath, log, a, logBeta, a, b, 1.0, fraction, evaluate, x, epsilon, maxIterations, return, ret]
org.apache.commons.math4.special:Beta:logGammaSum:double+double#[if, ||, <, a, 1.0, >, a, 2.0, throw, new, OutOfRangeException, a, 1.0, 2.0, if, ||, <, b, 1.0, >, b, 2.0, throw, new, OutOfRangeException, b, 1.0, 2.0, final, double, x, +, -, a, 1.0, -, b, 1.0, if, <=, x, 0.5, return, Gamma, logGamma1p, +, 1.0, x, if, <=, x, 1.5, return, +, Gamma, logGamma1p, x, FastMath, log1p, x, return, +, Gamma, logGamma1p, -, x, 1.0, FastMath, log, *, x, +, 1.0, x]
org.apache.commons.math4.special:Beta:logGammaMinusLogGammaSum:double+double#[if, <, a, 0.0, throw, new, NumberIsTooSmallException, a, 0.0, true, if, <, b, 10.0, throw, new, NumberIsTooSmallException, b, 10.0, true, final, double, d, final, double, w, if, <=, a, b, =, d, +, b, -, a, 0.5, =, w, deltaMinusDeltaSum, a, b, =, d, +, a, -, b, 0.5, =, w, deltaMinusDeltaSum, b, a, final, double, u, *, d, FastMath, log1p, /, a, b, final, double, v, *, a, -, FastMath, log, b, 1.0, return, <=, u, v, -, -, w, u, v, -, -, w, v, u]
org.apache.commons.math4.special:Beta:deltaMinusDeltaSum:double+double#[if, ||, <, a, 0, >, a, b, throw, new, OutOfRangeException, a, 0, b, if, <, b, 10, throw, new, NumberIsTooSmallException, b, 10, true, final, double, h, /, a, b, final, double, p, /, h, +, 1.0, h, final, double, q, /, 1.0, +, 1.0, h, final, double, q2, *, q, q, final, double, s, double, DELTA.length, =, s, 0, 1.0, for, int, i, 1, <, i, s.length, ++, i, =, s, i, +, 1.0, +, q, *, q2, s, -, i, 1, final, double, sqrtT, /, 10.0, b, final, double, t, *, sqrtT, sqrtT, double, w, *, DELTA, -, DELTA.length, 1, s, -, s.length, 1, for, int, i, -, DELTA.length, 2, >=, i, 0, --, i, =, w, +, *, t, w, *, DELTA, i, s, i, return, /, *, w, p, b]
org.apache.commons.math4.special:Beta:sumDeltaMinusDeltaSum:double+double#[if, <, p, 10.0, throw, new, NumberIsTooSmallException, p, 10.0, true, if, <, q, 10.0, throw, new, NumberIsTooSmallException, q, 10.0, true, final, double, a, FastMath, min, p, q, final, double, b, FastMath, max, p, q, final, double, sqrtT, /, 10.0, a, final, double, t, *, sqrtT, sqrtT, double, z, DELTA, -, DELTA.length, 1, for, int, i, -, DELTA.length, 2, >=, i, 0, --, i, =, z, +, *, t, z, DELTA, i, return, +, /, z, a, deltaMinusDeltaSum, a, b]
org.apache.commons.math4.special:Beta:logBeta:double+double#[if, ||, Double, isNaN, p, Double, isNaN, q, <=, p, 0.0, <=, q, 0.0, return, Double.NaN, final, double, a, FastMath, min, p, q, final, double, b, FastMath, max, p, q, if, >=, a, 10.0, final, double, w, sumDeltaMinusDeltaSum, a, b, final, double, h, /, a, b, final, double, c, /, h, +, 1.0, h, final, double, u, *, -, -, a, 0.5, FastMath, log, c, final, double, v, *, b, FastMath, log1p, h, if, <=, u, v, return, -, -, +, +, *, -, 0.5, FastMath, log, b, HALF_LOG_TWO_PI, w, u, v, return, -, -, +, +, *, -, 0.5, FastMath, log, b, HALF_LOG_TWO_PI, w, v, u, if, >, a, 2.0, if, >, b, 1000.0, final, int, n, int, FastMath, floor, -, a, 1.0, double, prod, 1.0, double, ared, a, for, int, i, 0, <, i, n, ++, i, -=, ared, 1.0, *=, prod, /, ared, +, 1.0, /, ared, b, return, +, -, FastMath, log, prod, *, n, FastMath, log, b, +, Gamma, logGamma, ared, logGammaMinusLogGammaSum, ared, b, double, prod1, 1.0, double, ared, a, while, >, ared, 2.0, -=, ared, 1.0, final, double, h, /, ared, b, *=, prod1, /, h, +, 1.0, h, if, <, b, 10.0, double, prod2, 1.0, double, bred, b, while, >, bred, 2.0, -=, bred, 1.0, *=, prod2, /, bred, +, ared, bred, return, +, FastMath, log, prod1, FastMath, log, prod2, +, Gamma, logGamma, ared, -, Gamma, logGamma, bred, logGammaSum, ared, bred, return, +, FastMath, log, prod1, Gamma, logGamma, ared, logGammaMinusLogGammaSum, ared, b, if, >=, a, 1.0, if, >, b, 2.0, if, <, b, 10.0, double, prod, 1.0, double, bred, b, while, >, bred, 2.0, -=, bred, 1.0, *=, prod, /, bred, +, a, bred, return, +, FastMath, log, prod, +, Gamma, logGamma, a, -, Gamma, logGamma, bred, logGammaSum, a, bred, return, +, Gamma, logGamma, a, logGammaMinusLogGammaSum, a, b, return, -, +, Gamma, logGamma, a, Gamma, logGamma, b, logGammaSum, a, b, if, >=, b, 10.0, return, +, Gamma, logGamma, a, logGammaMinusLogGammaSum, a, b, return, FastMath, log, /, *, Gamma, gamma, a, Gamma, gamma, b, Gamma, gamma, +, a, b]
org.apache.commons.math4.special:Erf:erf:double#[if, >, FastMath, abs, x, 40, return, >, x, 0, 1, -, 1, final, double, ret, Gamma, regularizedGammaP, 0.5, *, x, x, 1.0e-15, 10000, return, <, x, 0, -, ret, ret]
org.apache.commons.math4.special:Erf:erfc:double#[if, >, FastMath, abs, x, 40, return, >, x, 0, 0, 2, final, double, ret, Gamma, regularizedGammaQ, 0.5, *, x, x, 1.0e-15, 10000, return, <, x, 0, -, 2, ret, ret]
org.apache.commons.math4.special:Erf:erf:double+double#[if, >, x1, x2, return, -, erf, x2, x1, return, <, x1, -, X_CRIT, <, x2, 0.0, -, erfc, -, x2, erfc, -, x1, -, erf, x2, erf, x1, &&, >, x2, X_CRIT, >, x1, 0.0, -, erfc, x1, erfc, x2, -, erf, x2, erf, x1]
org.apache.commons.math4.special:Erf:erfInv:double#[double, w, -, FastMath, log, *, -, 1.0, x, +, 1.0, x, double, p, if, <, w, 6.25, -=, w, 3.125, =, p, -, 3.6444120640178196996e-21, =, p, +, -, 1.685059138182016589e-19, *, p, w, =, p, +, 1.2858480715256400167e-18, *, p, w, =, p, +, 1.115787767802518096e-17, *, p, w, =, p, +, -, 1.333171662854620906e-16, *, p, w, =, p, +, 2.0972767875968561637e-17, *, p, w, =, p, +, 6.6376381343583238325e-15, *, p, w, =, p, +, -, 4.0545662729752068639e-14, *, p, w, =, p, +, -, 8.1519341976054721522e-14, *, p, w, =, p, +, 2.6335093153082322977e-12, *, p, w, =, p, +, -, 1.2975133253453532498e-11, *, p, w, =, p, +, -, 5.4154120542946279317e-11, *, p, w, =, p, +, 1.051212273321532285e-09, *, p, w, =, p, +, -, 4.1126339803469836976e-09, *, p, w, =, p, +, -, 2.9070369957882005086e-08, *, p, w, =, p, +, 4.2347877827932403518e-07, *, p, w, =, p, +, -, 1.3654692000834678645e-06, *, p, w, =, p, +, -, 1.3882523362786468719e-05, *, p, w, =, p, +, 0.0001867342080340571352, *, p, w, =, p, +, -, 0.00074070253416626697512, *, p, w, =, p, +, -, 0.0060336708714301490533, *, p, w, =, p, +, 0.24015818242558961693, *, p, w, =, p, +, 1.6536545626831027356, *, p, w, if, <, w, 16.0, =, w, -, FastMath, sqrt, w, 3.25, =, p, 2.2137376921775787049e-09, =, p, +, 9.0756561938885390979e-08, *, p, w, =, p, +, -, 2.7517406297064545428e-07, *, p, w, =, p, +, 1.8239629214389227755e-08, *, p, w, =, p, +, 1.5027403968909827627e-06, *, p, w, =, p, +, -, 4.013867526981545969e-06, *, p, w, =, p, +, 2.9234449089955446044e-06, *, p, w, =, p, +, 1.2475304481671778723e-05, *, p, w, =, p, +, -, 4.7318229009055733981e-05, *, p, w, =, p, +, 6.8284851459573175448e-05, *, p, w, =, p, +, 2.4031110387097893999e-05, *, p, w, =, p, +, -, 0.0003550375203628474796, *, p, w, =, p, +, 0.00095328937973738049703, *, p, w, =, p, +, -, 0.0016882755560235047313, *, p, w, =, p, +, 0.0024914420961078508066, *, p, w, =, p, +, -, 0.0037512085075692412107, *, p, w, =, p, +, 0.005370914553590063617, *, p, w, =, p, +, 1.0052589676941592334, *, p, w, =, p, +, 3.0838856104922207635, *, p, w, if, !, Double, isInfinite, w, =, w, -, FastMath, sqrt, w, 5.0, =, p, -, 2.7109920616438573243e-11, =, p, +, -, 2.5556418169965252055e-10, *, p, w, =, p, +, 1.5076572693500548083e-09, *, p, w, =, p, +, -, 3.7894654401267369937e-09, *, p, w, =, p, +, 7.6157012080783393804e-09, *, p, w, =, p, +, -, 1.4960026627149240478e-08, *, p, w, =, p, +, 2.9147953450901080826e-08, *, p, w, =, p, +, -, 6.7711997758452339498e-08, *, p, w, =, p, +, 2.2900482228026654717e-07, *, p, w, =, p, +, -, 9.9298272942317002539e-07, *, p, w, =, p, +, 4.5260625972231537039e-06, *, p, w, =, p, +, -, 1.9681778105531670567e-05, *, p, w, =, p, +, 7.5995277030017761139e-05, *, p, w, =, p, +, -, 0.00021503011930044477347, *, p, w, =, p, +, -, 0.00013871931833623122026, *, p, w, =, p, +, 1.0103004648645343977, *, p, w, =, p, +, 4.8499064014085844221, *, p, w, =, p, Double.POSITIVE_INFINITY, return, *, p, x]
org.apache.commons.math4.special:Erf:erfcInv:double#[return, erfInv, -, 1, x]
org.apache.commons.math4.special:Gamma:logGamma:double#[double, ret, if, ||, Double, isNaN, x, <=, x, 0.0, =, ret, Double.NaN, if, <, x, 0.5, return, -, logGamma1p, x, FastMath, log, x, if, <=, x, 2.5, return, logGamma1p, -, -, x, 0.5, 0.5, if, <=, x, 8.0, final, int, n, int, FastMath, floor, -, x, 1.5, double, prod, 1.0, for, int, i, 1, <=, i, n, ++, i, *=, prod, -, x, i, return, +, logGamma1p, -, x, +, n, 1, FastMath, log, prod, double, sum, lanczos, x, double, tmp, +, x, LANCZOS_G, .5, =, ret, +, +, -, *, +, x, .5, FastMath, log, tmp, tmp, HALF_LOG_2_PI, FastMath, log, /, sum, x, return, ret]
org.apache.commons.math4.special:Gamma:regularizedGammaP:double+double#[return, regularizedGammaP, a, x, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.special:Gamma:regularizedGammaP:double+double+double+int#[double, ret, if, ||, Double, isNaN, a, Double, isNaN, x, <=, a, 0.0, <, x, 0.0, =, ret, Double.NaN, if, ==, x, 0.0, =, ret, 0.0, if, >=, x, +, a, 1, =, ret, -, 1.0, regularizedGammaQ, a, x, epsilon, maxIterations, double, n, 0.0, double, an, /, 1.0, a, double, sum, an, while, &&, &&, >, FastMath, abs, /, an, sum, epsilon, <, n, maxIterations, <, sum, Double.POSITIVE_INFINITY, +=, n, 1.0, *=, an, /, x, +, a, n, +=, sum, an, if, >=, n, maxIterations, throw, new, MaxCountExceededException, maxIterations, if, Double, isInfinite, sum, =, ret, 1.0, =, ret, *, FastMath, exp, -, +, -, x, *, a, FastMath, log, x, logGamma, a, sum, return, ret]
org.apache.commons.math4.special:Gamma:regularizedGammaQ:double+double#[return, regularizedGammaQ, a, x, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.special:Gamma:regularizedGammaQ:double+double+double+int#[double, ret, if, ||, Double, isNaN, a, Double, isNaN, x, <=, a, 0.0, <, x, 0.0, =, ret, Double.NaN, if, ==, x, 0.0, =, ret, 1.0, if, <, x, +, a, 1.0, =, ret, -, 1.0, regularizedGammaP, a, x, epsilon, maxIterations, ContinuedFraction, cf, new, ContinuedFraction, Override, protected, double, getA, int, n, double, x, return, +, -, +, *, 2.0, n, 1.0, a, x, Override, protected, double, getB, int, n, double, x, return, *, n, -, a, n, =, ret, /, 1.0, cf, evaluate, x, epsilon, maxIterations, =, ret, *, FastMath, exp, -, +, -, x, *, a, FastMath, log, x, logGamma, a, ret, return, ret]
org.apache.commons.math4.special:Gamma:digamma:double#[if, ||, Double, isNaN, x, Double, isInfinite, x, return, x, if, &&, >, x, 0, <=, x, S_LIMIT, return, -, -, GAMMA, /, 1, x, if, >=, x, C_LIMIT, double, inv, /, 1, *, x, x, return, -, -, FastMath, log, x, /, 0.5, x, *, inv, +, /, 1.0, 12, *, inv, -, /, 1.0, 120, /, inv, 252, return, -, digamma, +, x, 1, /, 1, x]
org.apache.commons.math4.special:Gamma:trigamma:double#[if, ||, Double, isNaN, x, Double, isInfinite, x, return, x, if, &&, >, x, 0, <=, x, S_LIMIT, return, /, 1, *, x, x, if, >=, x, C_LIMIT, double, inv, /, 1, *, x, x, return, +, +, /, 1, x, /, inv, 2, *, /, inv, x, -, /, 1.0, 6, *, inv, +, /, 1.0, 30, /, inv, 42, return, +, trigamma, +, x, 1, /, 1, *, x, x]
org.apache.commons.math4.special:Gamma:lanczos:double#[double, sum, 0.0, for, int, i, -, LANCZOS.length, 1, >, i, 0, --, i, +=, sum, /, LANCZOS, i, +, x, i, return, +, sum, LANCZOS, 0]
org.apache.commons.math4.special:Gamma:invGamma1pm1:double#[if, <, x, -, 0.5, throw, new, NumberIsTooSmallException, x, -, 0.5, true, if, >, x, 1.5, throw, new, NumberIsTooLargeException, x, 1.5, true, final, double, ret, final, double, t, <=, x, 0.5, x, -, -, x, 0.5, 0.5, if, <, t, 0.0, final, double, a, +, INV_GAMMA1P_M1_A0, *, t, INV_GAMMA1P_M1_A1, double, b, INV_GAMMA1P_M1_B8, =, b, +, INV_GAMMA1P_M1_B7, *, t, b, =, b, +, INV_GAMMA1P_M1_B6, *, t, b, =, b, +, INV_GAMMA1P_M1_B5, *, t, b, =, b, +, INV_GAMMA1P_M1_B4, *, t, b, =, b, +, INV_GAMMA1P_M1_B3, *, t, b, =, b, +, INV_GAMMA1P_M1_B2, *, t, b, =, b, +, INV_GAMMA1P_M1_B1, *, t, b, =, b, +, 1.0, *, t, b, double, c, +, INV_GAMMA1P_M1_C13, *, t, /, a, b, =, c, +, INV_GAMMA1P_M1_C12, *, t, c, =, c, +, INV_GAMMA1P_M1_C11, *, t, c, =, c, +, INV_GAMMA1P_M1_C10, *, t, c, =, c, +, INV_GAMMA1P_M1_C9, *, t, c, =, c, +, INV_GAMMA1P_M1_C8, *, t, c, =, c, +, INV_GAMMA1P_M1_C7, *, t, c, =, c, +, INV_GAMMA1P_M1_C6, *, t, c, =, c, +, INV_GAMMA1P_M1_C5, *, t, c, =, c, +, INV_GAMMA1P_M1_C4, *, t, c, =, c, +, INV_GAMMA1P_M1_C3, *, t, c, =, c, +, INV_GAMMA1P_M1_C2, *, t, c, =, c, +, INV_GAMMA1P_M1_C1, *, t, c, =, c, +, INV_GAMMA1P_M1_C, *, t, c, if, >, x, 0.5, =, ret, /, *, t, c, x, =, ret, *, x, +, +, c, 0.5, 0.5, double, p, INV_GAMMA1P_M1_P6, =, p, +, INV_GAMMA1P_M1_P5, *, t, p, =, p, +, INV_GAMMA1P_M1_P4, *, t, p, =, p, +, INV_GAMMA1P_M1_P3, *, t, p, =, p, +, INV_GAMMA1P_M1_P2, *, t, p, =, p, +, INV_GAMMA1P_M1_P1, *, t, p, =, p, +, INV_GAMMA1P_M1_P0, *, t, p, double, q, INV_GAMMA1P_M1_Q4, =, q, +, INV_GAMMA1P_M1_Q3, *, t, q, =, q, +, INV_GAMMA1P_M1_Q2, *, t, q, =, q, +, INV_GAMMA1P_M1_Q1, *, t, q, =, q, +, 1.0, *, t, q, double, c, +, INV_GAMMA1P_M1_C13, *, /, p, q, t, =, c, +, INV_GAMMA1P_M1_C12, *, t, c, =, c, +, INV_GAMMA1P_M1_C11, *, t, c, =, c, +, INV_GAMMA1P_M1_C10, *, t, c, =, c, +, INV_GAMMA1P_M1_C9, *, t, c, =, c, +, INV_GAMMA1P_M1_C8, *, t, c, =, c, +, INV_GAMMA1P_M1_C7, *, t, c, =, c, +, INV_GAMMA1P_M1_C6, *, t, c, =, c, +, INV_GAMMA1P_M1_C5, *, t, c, =, c, +, INV_GAMMA1P_M1_C4, *, t, c, =, c, +, INV_GAMMA1P_M1_C3, *, t, c, =, c, +, INV_GAMMA1P_M1_C2, *, t, c, =, c, +, INV_GAMMA1P_M1_C1, *, t, c, =, c, +, INV_GAMMA1P_M1_C0, *, t, c, if, >, x, 0.5, =, ret, *, /, t, x, -, -, c, 0.5, 0.5, =, ret, *, x, c, return, ret]
org.apache.commons.math4.special:Gamma:logGamma1p:double#[if, <, x, -, 0.5, throw, new, NumberIsTooSmallException, x, -, 0.5, true, if, >, x, 1.5, throw, new, NumberIsTooLargeException, x, 1.5, true, return, -, FastMath, log1p, invGamma1pm1, x]
org.apache.commons.math4.special:Gamma:gamma:double#[if, &&, ==, x, FastMath, rint, x, <=, x, 0.0, return, Double.NaN, final, double, ret, final, double, absX, FastMath, abs, x, if, <=, absX, 20.0, if, >=, x, 1.0, double, prod, 1.0, double, t, x, while, >, t, 2.5, -=, t, 1.0, *=, prod, t, =, ret, /, prod, +, 1.0, invGamma1pm1, -, t, 1.0, double, prod, x, double, t, x, while, <, t, -, 0.5, +=, t, 1.0, *=, prod, t, =, ret, /, 1.0, *, prod, +, 1.0, invGamma1pm1, t, final, double, y, +, absX, LANCZOS_G, 0.5, final, double, gammaAbs, *, *, *, /, SQRT_TWO_PI, absX, FastMath, pow, y, +, absX, 0.5, FastMath, exp, -, y, lanczos, absX, if, >, x, 0.0, =, ret, gammaAbs, =, ret, /, -, FastMath.PI, *, x, FastMath, sin, *, FastMath.PI, x, gammaAbs, return, ret]
org.apache.commons.math4.stat.correlation:Covariance:getCovarianceMatrix:null#[return, covarianceMatrix]
org.apache.commons.math4.stat.correlation:Covariance:getN:null#[return, n]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:RealMatrix+boolean#[int, dimension, matrix, getColumnDimension, Variance, variance, new, Variance, biasCorrected, RealMatrix, outMatrix, new, BlockRealMatrix, dimension, dimension, for, int, i, 0, <, i, dimension, ++, i, for, int, j, 0, <, j, i, ++, j, double, cov, covariance, matrix, getColumn, i, matrix, getColumn, j, biasCorrected, outMatrix, setEntry, i, j, cov, outMatrix, setEntry, j, i, cov, outMatrix, setEntry, i, i, variance, evaluate, matrix, getColumn, i, return, outMatrix]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:RealMatrix#[return, computeCovarianceMatrix, matrix, true]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:double[][]+boolean#[return, computeCovarianceMatrix, new, BlockRealMatrix, data, biasCorrected]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:double[][]#[return, computeCovarianceMatrix, data, true]
org.apache.commons.math4.stat.correlation:Covariance:covariance:double[]+double[]+boolean#[Mean, mean, new, Mean, double, result, 0d, int, length, xArray.length, if, !=, length, yArray.length, throw, new, MathIllegalArgumentException, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, length, yArray.length, if, <, length, 2, throw, new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, length, 2, double, xMean, mean, evaluate, xArray, double, yMean, mean, evaluate, yArray, for, int, i, 0, <, i, length, ++, i, double, xDev, -, xArray, i, xMean, double, yDev, -, yArray, i, yMean, +=, result, /, -, *, xDev, yDev, result, +, i, 1, return, biasCorrected, *, result, /, double, length, double, -, length, 1, result]
org.apache.commons.math4.stat.correlation:Covariance:covariance:double[]+double[]#[return, covariance, xArray, yArray, true]
org.apache.commons.math4.stat.correlation:Covariance:checkSufficientData:RealMatrix#[int, nRows, matrix, getRowDimension, int, nCols, matrix, getColumnDimension, if, ||, <, nRows, 2, <, nCols, 1, throw, new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:getCorrelationMatrix:null#[return, correlationMatrix]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:computeCorrelationMatrix:RealMatrix#[int, nVars, matrix, getColumnDimension, RealMatrix, outMatrix, new, BlockRealMatrix, nVars, nVars, for, int, i, 0, <, i, nVars, ++, i, for, int, j, 0, <, j, i, ++, j, double, corr, correlation, matrix, getColumn, i, matrix, getColumn, j, outMatrix, setEntry, i, j, corr, outMatrix, setEntry, j, i, corr, outMatrix, setEntry, i, i, 1d, return, outMatrix]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:computeCorrelationMatrix:double[][]#[return, computeCorrelationMatrix, new, BlockRealMatrix, matrix]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:correlation:double[]+double[]#[if, !=, xArray.length, yArray.length, throw, new, DimensionMismatchException, xArray.length, yArray.length, final, int, n, xArray.length, final, long, numPairs, sum, -, n, 1, SuppressWarnings, "unchecked", Pair, Double, Double, pairs, Pair, n, for, int, i, 0, <, i, n, ++, i, =, pairs, i, new, Pair, Double, Double, xArray, i, yArray, i, Arrays, sort, pairs, new, Comparator, Pair, Double, Double, Override, public, int, compare, Pair, Double, Double, pair1, Pair, Double, Double, pair2, int, compareFirst, pair1, getFirst, compareTo, pair2, getFirst, return, !=, compareFirst, 0, compareFirst, pair1, getSecond, compareTo, pair2, getSecond, long, tiedXPairs, 0, long, tiedXYPairs, 0, long, consecutiveXTies, 1, long, consecutiveXYTies, 1, Pair, Double, Double, prev, pairs, 0, for, int, i, 1, <, i, n, ++, i, final, Pair, Double, Double, curr, pairs, i, if, curr, getFirst, equals, prev, getFirst, ++, consecutiveXTies, if, curr, getSecond, equals, prev, getSecond, ++, consecutiveXYTies, +=, tiedXYPairs, sum, -, consecutiveXYTies, 1, =, consecutiveXYTies, 1, +=, tiedXPairs, sum, -, consecutiveXTies, 1, =, consecutiveXTies, 1, +=, tiedXYPairs, sum, -, consecutiveXYTies, 1, =, consecutiveXYTies, 1, =, prev, curr, +=, tiedXPairs, sum, -, consecutiveXTies, 1, +=, tiedXYPairs, sum, -, consecutiveXYTies, 1, long, swaps, 0, SuppressWarnings, "unchecked", Pair, Double, Double, pairsDestination, Pair, n, for, int, segmentSize, 1, <, segmentSize, n, <<=, segmentSize, 1, for, int, offset, 0, <, offset, n, +=, offset, *, 2, segmentSize, int, i, offset, final, int, iEnd, FastMath, min, +, i, segmentSize, n, int, j, iEnd, final, int, jEnd, FastMath, min, +, j, segmentSize, n, int, copyLocation, offset, while, ||, <, i, iEnd, <, j, jEnd, if, <, i, iEnd, if, <, j, jEnd, if, <=, pairs, i, getSecond, compareTo, pairs, j, getSecond, 0, =, pairsDestination, copyLocation, pairs, i, ++, i, =, pairsDestination, copyLocation, pairs, j, ++, j, +=, swaps, -, iEnd, i, =, pairsDestination, copyLocation, pairs, i, ++, i, =, pairsDestination, copyLocation, pairs, j, ++, j, ++, copyLocation, final, Pair, Double, Double, pairsTemp, pairs, =, pairs, pairsDestination, =, pairsDestination, pairsTemp, long, tiedYPairs, 0, long, consecutiveYTies, 1, =, prev, pairs, 0, for, int, i, 1, <, i, n, ++, i, final, Pair, Double, Double, curr, pairs, i, if, curr, getSecond, equals, prev, getSecond, ++, consecutiveYTies, +=, tiedYPairs, sum, -, consecutiveYTies, 1, =, consecutiveYTies, 1, =, prev, curr, +=, tiedYPairs, sum, -, consecutiveYTies, 1, final, long, concordantMinusDiscordant, -, +, -, numPairs, tiedXPairs, tiedYPairs, tiedXYPairs, *, 2, swaps, final, double, nonTiedPairsMultiplied, *, -, numPairs, tiedXPairs, double, -, numPairs, tiedYPairs, return, /, concordantMinusDiscordant, FastMath, sqrt, nonTiedPairsMultiplied]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:sum:long#[return, /, *, n, +, n, 1, 2l]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:getCorrelationMatrix:null#[return, correlationMatrix]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:getCorrelationStandardErrors:null#[int, nVars, correlationMatrix, getColumnDimension, double, out, double, nVars, nVars, for, int, i, 0, <, i, nVars, ++, i, for, int, j, 0, <, j, nVars, ++, j, double, r, correlationMatrix, getEntry, i, j, =, out, i, j, FastMath, sqrt, /, -, 1, *, r, r, -, nObs, 2, return, new, BlockRealMatrix, out]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:getCorrelationPValues:null#[TDistribution, tDistribution, new, TDistribution, -, nObs, 2, int, nVars, correlationMatrix, getColumnDimension, double, out, double, nVars, nVars, for, int, i, 0, <, i, nVars, ++, i, for, int, j, 0, <, j, nVars, ++, j, if, ==, i, j, =, out, i, j, 0d, double, r, correlationMatrix, getEntry, i, j, double, t, FastMath, abs, *, r, FastMath, sqrt, /, -, nObs, 2, -, 1, *, r, r, =, out, i, j, *, 2, tDistribution, cumulativeProbability, -, t, return, new, BlockRealMatrix, out]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:computeCorrelationMatrix:RealMatrix#[checkSufficientData, matrix, int, nVars, matrix, getColumnDimension, RealMatrix, outMatrix, new, BlockRealMatrix, nVars, nVars, for, int, i, 0, <, i, nVars, ++, i, for, int, j, 0, <, j, i, ++, j, double, corr, correlation, matrix, getColumn, i, matrix, getColumn, j, outMatrix, setEntry, i, j, corr, outMatrix, setEntry, j, i, corr, outMatrix, setEntry, i, i, 1d, return, outMatrix]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:computeCorrelationMatrix:double[][]#[return, computeCorrelationMatrix, new, BlockRealMatrix, data]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:correlation:double[]+double[]#[SimpleRegression, regression, new, SimpleRegression, if, !=, xArray.length, yArray.length, throw, new, DimensionMismatchException, xArray.length, yArray.length, if, <, xArray.length, 2, throw, new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2, for, int, i, 0, <, i, xArray.length, ++, i, regression, addData, xArray, i, yArray, i, return, regression, getR]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:covarianceToCorrelation:RealMatrix#[int, nVars, covarianceMatrix, getColumnDimension, RealMatrix, outMatrix, new, BlockRealMatrix, nVars, nVars, for, int, i, 0, <, i, nVars, ++, i, double, sigma, FastMath, sqrt, covarianceMatrix, getEntry, i, i, outMatrix, setEntry, i, i, 1d, for, int, j, 0, <, j, i, ++, j, double, entry, /, covarianceMatrix, getEntry, i, j, *, sigma, FastMath, sqrt, covarianceMatrix, getEntry, j, j, outMatrix, setEntry, i, j, entry, outMatrix, setEntry, j, i, entry, return, outMatrix]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:checkSufficientData:RealMatrix#[int, nRows, matrix, getRowDimension, int, nCols, matrix, getColumnDimension, if, ||, <, nRows, 2, <, nCols, 2, throw, new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:getCorrelationMatrix:null#[return, rankCorrelation, getCorrelationMatrix]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:getRankCorrelation:null#[return, rankCorrelation]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:computeCorrelationMatrix:RealMatrix#[final, RealMatrix, matrixCopy, rankTransform, matrix, return, new, PearsonsCorrelation, computeCorrelationMatrix, matrixCopy]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:computeCorrelationMatrix:double[][]#[return, computeCorrelationMatrix, new, BlockRealMatrix, matrix]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:correlation:double[]+double[]#[if, !=, xArray.length, yArray.length, throw, new, DimensionMismatchException, xArray.length, yArray.length, if, <, xArray.length, 2, throw, new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2, return, new, PearsonsCorrelation, correlation, rankingAlgorithm, rank, xArray, rankingAlgorithm, rank, yArray]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:rankTransform:RealMatrix#[RealMatrix, transformed, matrix, copy, for, int, i, 0, <, i, transformed, getColumnDimension, ++, i, transformed, setColumn, i, rankingAlgorithm, rank, transformed, getColumn, i, return, transformed]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:increment:double+double#[++, n, final, double, deltaX, -, x, meanX, final, double, deltaY, -, y, meanY, +=, meanX, /, deltaX, n, +=, meanY, /, deltaY, n, +=, covarianceNumerator, *, /, -, n, 1.0, n, deltaX, deltaY]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:append:StorelessBivariateCovariance#[double, oldN, n, +=, n, cov.n, final, double, deltaX, -, cov.meanX, meanX, final, double, deltaY, -, cov.meanY, meanY, +=, meanX, /, *, deltaX, cov.n, n, +=, meanY, /, *, deltaY, cov.n, n, +=, covarianceNumerator, +, cov.covarianceNumerator, *, *, /, *, oldN, cov.n, n, deltaX, deltaY]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:getN:null#[return, n]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:getResult:null#[if, <, n, 2, throw, new, NumberIsTooSmallException, LocalizedFormats.INSUFFICIENT_DIMENSION, n, 2, true, if, biasCorrected, return, /, covarianceNumerator, -, n, 1d, return, /, covarianceNumerator, n]
org.apache.commons.math4.stat.correlation:StorelessCovariance:initializeMatrix:boolean#[for, int, i, 0, <, i, dimension, ++, i, for, int, j, 0, <, j, dimension, ++, j, setElement, i, j, new, StorelessBivariateCovariance, biasCorrected]
org.apache.commons.math4.stat.correlation:StorelessCovariance:indexOf:int+int#[return, <, j, i, +, /, *, i, +, i, 1, 2, j, +, /, *, j, +, j, 1, 2, i]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getElement:int+int#[return, covMatrix, indexOf, i, j]
org.apache.commons.math4.stat.correlation:StorelessCovariance:setElement:int+int+StorelessBivariateCovariance#[=, covMatrix, indexOf, i, j, cov]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getCovariance:int+int#[return, getElement, xIndex, yIndex, getResult]
org.apache.commons.math4.stat.correlation:StorelessCovariance:increment:double[]#[int, length, data.length, if, !=, length, dimension, throw, new, DimensionMismatchException, length, dimension, for, int, i, 0, <, i, length, ++, i, for, int, j, i, <, j, length, ++, j, getElement, i, j, increment, data, i, data, j]
org.apache.commons.math4.stat.correlation:StorelessCovariance:append:StorelessCovariance#[if, !=, sc.dimension, dimension, throw, new, DimensionMismatchException, sc.dimension, dimension, for, int, i, 0, <, i, dimension, ++, i, for, int, j, i, <, j, dimension, ++, j, getElement, i, j, append, sc, getElement, i, j]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getCovarianceMatrix:null#[return, MatrixUtils, createRealMatrix, getData]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getData:null#[final, double, data, double, dimension, dimension, for, int, i, 0, <, i, dimension, ++, i, for, int, j, 0, <, j, dimension, ++, j, =, data, i, j, getElement, i, j, getResult, return, data]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getN:null#[throw, new, MathUnsupportedOperationException]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:evaluate:double[]#[if, ==, values, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, return, evaluate, values, 0, values.length]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:evaluate:double[]+int+int#[if, MathArrays, verifyValues, values, begin, length, final, StorelessUnivariateStatistic, stat, copy, stat, clear, stat, incrementAll, values, begin, length, return, stat, getResult, return, Double.NaN]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:incrementAll:double[]#[if, ==, values, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, incrementAll, values, 0, values.length]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:incrementAll:double[]+int+int#[if, MathArrays, verifyValues, values, begin, length, int, k, +, begin, length, for, int, i, begin, <, i, k, ++, i, increment, values, i]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:equals:Object#[if, ==, object, this, return, true, if, ||, ==, object, null, !=, object, getClass, this, getClass, return, false, StorelessUnivariateStatistic, stat, StorelessUnivariateStatistic, object, return, &&, Precision, equalsIncludingNaN, stat, getResult, this, getResult, Precision, equalsIncludingNaN, stat, getN, this, getN]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:hashCode:null#[return, +, *, 31, +, 31, MathUtils, hash, getResult, MathUtils, hash, getN]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:evaluate:double[]#[MathArrays, verifyValues, values, 0, 0, return, evaluate, values, 0, values.length]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:setData:double[]#[=, storedData, ==, values, null, null, values, clone]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:getData:null#[return, ==, storedData, null, null, storedData, clone]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:getDataRef:null#[return, storedData]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:setData:double[]+int+int#[if, ==, values, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, if, <, begin, 0, throw, new, NotPositiveException, LocalizedFormats.START_POSITION, begin, if, <, length, 0, throw, new, NotPositiveException, LocalizedFormats.LENGTH, length, if, >, +, begin, length, values.length, throw, new, NumberIsTooLargeException, LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END, +, begin, length, values.length, true, =, storedData, double, length, System, arraycopy, values, begin, storedData, 0, length]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:evaluate:null#[return, evaluate, storedData]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getMax:null#[statistics, return, statistics, getMax]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getMean:null#[statistics, return, statistics, getMean]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getMin:null#[statistics, return, statistics, getMin]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getN:null#[statistics, return, statistics, getN]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getStandardDeviation:null#[statistics, return, statistics, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSum:null#[statistics, return, statistics, getSum]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getVariance:null#[statistics, return, statistics, getVariance]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSumOfLogs:null#[statistics, return, statistics, getSumOfLogs]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getGeometricMean:null#[statistics, return, statistics, getGeometricMean]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSumsq:null#[statistics, return, statistics, getSumsq]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSecondMoment:null#[statistics, return, statistics, getSecondMoment]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSummary:null#[statistics, return, new, StatisticalSummaryValues, getMean, getVariance, getN, getMax, getMin, getSum]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:createContributingStatistics:null#[SummaryStatistics, contributingStatistics, new, AggregatingSummaryStatistics, statistics, SummaryStatistics, copy, statisticsPrototype, contributingStatistics, return, contributingStatistics]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:aggregate:StatisticalSummary>#[if, ==, statistics, null, return, null, Iterator, StatisticalSummary, iterator, statistics, iterator, if, !, iterator, hasNext, return, null, StatisticalSummary, current, iterator, next, long, n, current, getN, double, min, current, getMin, double, sum, current, getSum, double, max, current, getMax, double, var, current, getVariance, double, m2, *, var, -, n, 1d, double, mean, current, getMean, while, iterator, hasNext, =, current, iterator, next, if, ||, <, current, getMin, min, Double, isNaN, min, =, min, current, getMin, if, ||, >, current, getMax, max, Double, isNaN, max, =, max, current, getMax, +=, sum, current, getSum, final, double, oldN, n, final, double, curN, current, getN, +=, n, curN, final, double, meanDiff, -, current, getMean, mean, =, mean, /, sum, n, final, double, curM2, *, current, getVariance, -, curN, 1d, =, m2, +, m2, curM2, /, *, meanDiff, meanDiff, oldN, curN, n, final, double, variance, if, ==, n, 0, =, variance, Double.NaN, if, ==, n, 1, =, variance, 0d, =, variance, /, m2, -, n, 1, return, new, StatisticalSummaryValues, mean, variance, n, max, min, sum]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:addValue:double#[if, !=, windowSize, INFINITE_WINDOW, if, ==, getN, windowSize, eDA, addElementRolling, v, if, <, getN, windowSize, eDA, addElement, v, eDA, addElement, v]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:removeMostRecentValue:null#[try, eDA, discardMostRecentElements, 1, catch, MathIllegalArgumentException, ex, throw, new, MathIllegalStateException, LocalizedFormats.NO_DATA]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:replaceMostRecentValue:double#[return, eDA, substituteMostRecentElement, v]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMean:null#[return, apply, meanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getGeometricMean:null#[return, apply, geometricMeanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getVariance:null#[return, apply, varianceImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getPopulationVariance:null#[return, apply, new, Variance, false]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getStandardDeviation:null#[double, stdDev, Double.NaN, if, >, getN, 0, if, >, getN, 1, =, stdDev, FastMath, sqrt, getVariance, =, stdDev, 0.0, return, stdDev]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getQuadraticMean:null#[final, long, n, getN, return, >, n, 0, FastMath, sqrt, /, getSumsq, n, Double.NaN]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSkewness:null#[return, apply, skewnessImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getKurtosis:null#[return, apply, kurtosisImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMax:null#[return, apply, maxImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMin:null#[return, apply, minImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getN:null#[return, eDA, getNumElements]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSum:null#[return, apply, sumImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSumsq:null#[return, apply, sumsqImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:clear:null#[eDA, clear]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getWindowSize:null#[return, windowSize]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setWindowSize:int#[if, &&, <, windowSize, 1, !=, windowSize, INFINITE_WINDOW, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_POSITIVE_WINDOW_SIZE, windowSize, =, this, windowSize, windowSize, if, &&, !=, windowSize, INFINITE_WINDOW, <, windowSize, eDA, getNumElements, eDA, discardFrontElements, -, eDA, getNumElements, windowSize]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getValues:null#[return, eDA, getElements]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSortedValues:null#[double, sort, getValues, Arrays, sort, sort, return, sort]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getElement:int#[return, eDA, getElement, index]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getPercentile:double#[if, instanceof, percentileImpl, Percentile, Percentile, percentileImpl, setQuantile, p, try, percentileImpl, getClass, getMethod, SET_QUANTILE_METHOD_NAME, Class, Double.TYPE, invoke, percentileImpl, Object, Double, valueOf, p, catch, NoSuchMethodException, e1, throw, new, MathIllegalStateException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD, percentileImpl, getClass, getName, SET_QUANTILE_METHOD_NAME, catch, IllegalAccessException, e2, throw, new, MathIllegalStateException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD, SET_QUANTILE_METHOD_NAME, percentileImpl, getClass, getName, catch, InvocationTargetException, e3, throw, new, IllegalStateException, e3, getCause, return, apply, percentileImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:toString:null#[StringBuilder, outBuffer, new, StringBuilder, String, endl, "\n", outBuffer, append, "DescriptiveStatistics:", append, endl, outBuffer, append, "n: ", append, getN, append, endl, outBuffer, append, "min: ", append, getMin, append, endl, outBuffer, append, "max: ", append, getMax, append, endl, outBuffer, append, "mean: ", append, getMean, append, endl, outBuffer, append, "std dev: ", append, getStandardDeviation, append, endl, try, outBuffer, append, "median: ", append, getPercentile, 50, append, endl, catch, MathIllegalStateException, ex, outBuffer, append, "median: unavailable", append, endl, outBuffer, append, "skewness: ", append, getSkewness, append, endl, outBuffer, append, "kurtosis: ", append, getKurtosis, append, endl, return, outBuffer, toString]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:apply:UnivariateStatistic#[return, eDA, compute, stat]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMeanImpl:null#[return, meanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setMeanImpl:UnivariateStatistic#[=, this, meanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getGeometricMeanImpl:null#[return, geometricMeanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setGeometricMeanImpl:UnivariateStatistic#[=, this, geometricMeanImpl, geometricMeanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getKurtosisImpl:null#[return, kurtosisImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setKurtosisImpl:UnivariateStatistic#[=, this, kurtosisImpl, kurtosisImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMaxImpl:null#[return, maxImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setMaxImpl:UnivariateStatistic#[=, this, maxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMinImpl:null#[return, minImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setMinImpl:UnivariateStatistic#[=, this, minImpl, minImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getPercentileImpl:null#[return, percentileImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setPercentileImpl:UnivariateStatistic#[try, percentileImpl, getClass, getMethod, SET_QUANTILE_METHOD_NAME, Class, Double.TYPE, invoke, percentileImpl, Object, Double, valueOf, 50.0d, catch, NoSuchMethodException, e1, throw, new, MathIllegalArgumentException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD, percentileImpl, getClass, getName, SET_QUANTILE_METHOD_NAME, catch, IllegalAccessException, e2, throw, new, MathIllegalArgumentException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD, SET_QUANTILE_METHOD_NAME, percentileImpl, getClass, getName, catch, InvocationTargetException, e3, throw, new, IllegalArgumentException, e3, getCause, =, this, percentileImpl, percentileImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSkewnessImpl:null#[return, skewnessImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setSkewnessImpl:UnivariateStatistic#[=, this, skewnessImpl, skewnessImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getVarianceImpl:null#[return, varianceImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setVarianceImpl:UnivariateStatistic#[=, this, varianceImpl, varianceImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSumsqImpl:null#[return, sumsqImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setSumsqImpl:UnivariateStatistic#[=, this, sumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSumImpl:null#[return, sumImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setSumImpl:UnivariateStatistic#[=, this, sumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:copy:null#[DescriptiveStatistics, result, new, DescriptiveStatistics, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:copy:DescriptiveStatistics+DescriptiveStatistics#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.eDA, source.eDA, copy, =, dest.windowSize, source.windowSize, =, dest.maxImpl, source.maxImpl, copy, =, dest.meanImpl, source.meanImpl, copy, =, dest.minImpl, source.minImpl, copy, =, dest.sumImpl, source.sumImpl, copy, =, dest.varianceImpl, source.varianceImpl, copy, =, dest.sumsqImpl, source.sumsqImpl, copy, =, dest.geometricMeanImpl, source.geometricMeanImpl, copy, =, dest.kurtosisImpl, source.kurtosisImpl, =, dest.skewnessImpl, source.skewnessImpl, =, dest.percentileImpl, source.percentileImpl]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:increment:double#[if, ==, n, 0, =, m1, 0.0, ++, n, double, n0, n, =, dev, -, d, m1, =, nDev, /, dev, n0, +=, m1, nDev]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:clear:null#[=, m1, Double.NaN, =, n, 0, =, dev, Double.NaN, =, nDev, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:getResult:null#[return, m1]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:copy:null#[FirstMoment, result, new, FirstMoment, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:copy:FirstMoment+FirstMoment#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.n, source.n, =, dest.m1, source.m1, =, dest.dev, source.dev, =, dest.nDev, source.nDev]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:increment:double#[if, <, n, 1, =, m4, 0.0, =, m3, 0.0, =, m2, 0.0, =, m1, 0.0, double, prevM3, m3, double, prevM2, m2, super, increment, d, double, n0, n, =, m4, +, +, -, m4, *, 4.0, nDev, prevM3, *, 6.0, nDevSq, prevM2, *, -, *, n0, n0, *, 3, -, n0, 1, *, nDevSq, nDevSq, -, n0, 1, n0]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:getResult:null#[return, m4]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:clear:null#[super, clear, =, m4, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:copy:null#[FourthMoment, result, new, FourthMoment, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:copy:FourthMoment+FourthMoment#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, ThirdMoment, copy, source, dest, =, dest.m4, source.m4]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:copy:null#[GeometricMean, result, new, GeometricMean, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:increment:double#[sumOfLogs, increment, d]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:getResult:null#[if, >, sumOfLogs, getN, 0, return, FastMath, exp, /, sumOfLogs, getResult, sumOfLogs, getN, return, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:clear:null#[sumOfLogs, clear]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:evaluate:double[]+int+int#[return, FastMath, exp, /, sumOfLogs, evaluate, values, begin, length, length]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:getN:null#[return, sumOfLogs, getN]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:setSumLogImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, sumOfLogs, sumLogImpl]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:getSumLogImpl:null#[return, sumOfLogs]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:copy:GeometricMean+GeometricMean#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.sumOfLogs, source.sumOfLogs, copy]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:checkEmpty:null#[if, >, getN, 0, throw, new, MathIllegalStateException, LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, getN]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:increment:double#[if, incMoment, moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:getResult:null#[double, kurtosis, Double.NaN, if, >, moment, getN, 3, double, variance, /, moment.m2, -, moment.n, 1, if, ||, <=, moment.n, 3, <, variance, 10E-20, =, kurtosis, 0.0, double, n, moment.n, =, kurtosis, /, -, *, n, +, n, 1, moment, getResult, *, 3, moment.m2, moment.m2, -, n, 1, *, -, n, 1, -, n, 2, -, n, 3, variance, variance, return, kurtosis]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:clear:null#[if, incMoment, moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:getN:null#[return, moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:evaluate:double[]+int+int#[double, kurt, Double.NaN, if, &&, MathArrays, verifyValues, values, begin, length, >, length, 3, Variance, variance, new, Variance, variance, incrementAll, values, begin, length, double, mean, variance.moment.m1, double, stdDev, FastMath, sqrt, variance, getResult, double, accum3, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, accum3, FastMath, pow, -, values, i, mean, 4.0, /=, accum3, FastMath, pow, stdDev, 4.0d, double, n0, length, double, coefficientOne, /, *, n0, +, n0, 1, *, -, n0, 1, -, n0, 2, -, n0, 3, double, termTwo, /, *, 3, FastMath, pow, -, n0, 1, 2.0, *, -, n0, 2, -, n0, 3, =, kurt, -, *, coefficientOne, accum3, termTwo, return, kurt]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:copy:null#[Kurtosis, result, new, Kurtosis, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:copy:Kurtosis+Kurtosis#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.moment, source.moment, copy, =, dest.incMoment, source.incMoment]
org.apache.commons.math4.stat.descriptive.moment:Mean:increment:double#[if, incMoment, moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Mean:clear:null#[if, incMoment, moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Mean:getResult:null#[return, moment.m1]
org.apache.commons.math4.stat.descriptive.moment:Mean:getN:null#[return, moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Mean:evaluate:double[]+int+int#[if, MathArrays, verifyValues, values, begin, length, Sum, sum, new, Sum, double, sampleSize, length, double, xbar, /, sum, evaluate, values, begin, length, sampleSize, double, correction, 0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, correction, -, values, i, xbar, return, +, xbar, /, correction, sampleSize, return, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:Mean:evaluate:double[]+double[]+int+int#[if, MathArrays, verifyValues, values, weights, begin, length, Sum, sum, new, Sum, double, sumw, sum, evaluate, weights, begin, length, double, xbarw, /, sum, evaluate, values, weights, begin, length, sumw, double, correction, 0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, correction, *, weights, i, -, values, i, xbarw, return, +, xbarw, /, correction, sumw, return, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:Mean:evaluate:double[]+double[]#[return, evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Mean:copy:null#[Mean, result, new, Mean, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:Mean:copy:Mean+Mean#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.incMoment, source.incMoment, =, dest.moment, source.moment, copy]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:increment:double#[if, <, n, 1, =, m1, =, m2, 0.0, super, increment, d, +=, m2, *, -, double, n, 1, dev, nDev]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:clear:null#[super, clear, =, m2, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:getResult:null#[return, m2]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:copy:null#[SecondMoment, result, new, SecondMoment, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:copy:SecondMoment+SecondMoment#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, FirstMoment, copy, source, dest, =, dest.m2, source.m2]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:copy:null#[SemiVariance, result, new, SemiVariance, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:copy:SemiVariance+SemiVariance#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.biasCorrected, source.biasCorrected, =, dest.varianceDirection, source.varianceDirection]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+int+int#[double, m, new, Mean, evaluate, values, start, length, return, evaluate, values, m, varianceDirection, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+Direction#[double, m, new, Mean, evaluate, values, return, evaluate, values, m, direction, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+double#[return, evaluate, values, cutoff, varianceDirection, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+double+Direction#[return, evaluate, values, cutoff, direction, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+double+Direction+boolean+int+int#[MathArrays, verifyValues, values, start, length, if, ==, values.length, 0, return, Double.NaN, if, ==, values.length, 1, return, 0.0, final, boolean, booleanDirection, direction, getDirection, double, dev, 0.0, double, sumsq, 0.0, for, int, i, start, <, i, length, ++, i, if, ==, >, values, i, cutoff, booleanDirection, =, dev, -, values, i, cutoff, +=, sumsq, *, dev, dev, if, corrected, return, /, sumsq, -, length, 1.0, return, /, sumsq, length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:isBiasCorrected:null#[return, biasCorrected]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:setBiasCorrected:boolean#[=, this, biasCorrected, biasCorrected]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:getVarianceDirection:null#[return, varianceDirection]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:setVarianceDirection:Direction#[=, this, varianceDirection, varianceDirection]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:Direction:boolean#[=, direction, b]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:getDirection:null#[return, direction]
org.apache.commons.math4.stat.descriptive.moment:Skewness:increment:double#[if, incMoment, moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Skewness:getResult:null#[if, <, moment.n, 3, return, Double.NaN, double, variance, /, moment.m2, -, moment.n, 1, if, <, variance, 10E-20, return, 0.0d, double, n0, moment, getN, return, /, *, n0, moment.m3, *, -, n0, 1, -, n0, 2, FastMath, sqrt, variance, variance]
org.apache.commons.math4.stat.descriptive.moment:Skewness:getN:null#[return, moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Skewness:clear:null#[if, incMoment, moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Skewness:evaluate:double[]+int+int#[double, skew, Double.NaN, if, &&, MathArrays, verifyValues, values, begin, length, >, length, 2, Mean, mean, new, Mean, double, m, mean, evaluate, values, begin, length, double, accum, 0.0, double, accum2, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, final, double, d, -, values, i, m, +=, accum, *, d, d, +=, accum2, d, final, double, variance, /, -, accum, /, *, accum2, accum2, length, -, length, 1, double, accum3, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, final, double, d, -, values, i, m, +=, accum3, *, d, d, d, /=, accum3, *, variance, FastMath, sqrt, variance, double, n0, length, =, skew, *, /, n0, *, -, n0, 1, -, n0, 2, accum3, return, skew]
org.apache.commons.math4.stat.descriptive.moment:Skewness:copy:null#[Skewness, result, new, Skewness, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:Skewness:copy:Skewness+Skewness#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.moment, new, ThirdMoment, source.moment, copy, =, dest.incMoment, source.incMoment]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:increment:double#[variance, increment, d]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:getN:null#[return, variance, getN]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:getResult:null#[return, FastMath, sqrt, variance, getResult]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:clear:null#[variance, clear]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]#[return, FastMath, sqrt, variance, evaluate, values]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]+int+int#[return, FastMath, sqrt, variance, evaluate, values, begin, length]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]+double+int+int#[return, FastMath, sqrt, variance, evaluate, values, mean, begin, length]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]+double#[return, FastMath, sqrt, variance, evaluate, values, mean]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:isBiasCorrected:null#[return, variance, isBiasCorrected]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:setBiasCorrected:boolean#[variance, setBiasCorrected, isBiasCorrected]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:copy:null#[StandardDeviation, result, new, StandardDeviation, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:copy:StandardDeviation+StandardDeviation#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.variance, source.variance, copy]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:increment:double#[if, <, n, 1, =, m3, =, m2, =, m1, 0.0, double, prevM2, m2, super, increment, d, =, nDevSq, *, nDev, nDev, double, n0, n, =, m3, +, -, m3, *, 3.0, nDev, prevM2, *, -, n0, 1, -, n0, 2, nDevSq, dev]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:getResult:null#[return, m3]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:clear:null#[super, clear, =, m3, Double.NaN, =, nDevSq, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:copy:null#[ThirdMoment, result, new, ThirdMoment, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:copy:ThirdMoment+ThirdMoment#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, SecondMoment, copy, source, dest, =, dest.m3, source.m3, =, dest.nDevSq, source.nDevSq]
org.apache.commons.math4.stat.descriptive.moment:Variance:increment:double#[if, incMoment, moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Variance:getResult:null#[if, ==, moment.n, 0, return, Double.NaN, if, ==, moment.n, 1, return, 0d, if, isBiasCorrected, return, /, moment.m2, -, moment.n, 1d, return, /, moment.m2, moment.n]
org.apache.commons.math4.stat.descriptive.moment:Variance:getN:null#[return, moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Variance:clear:null#[if, incMoment, moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]#[if, ==, values, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, return, evaluate, values, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+int+int#[double, var, Double.NaN, if, MathArrays, verifyValues, values, begin, length, if, ==, length, 1, =, var, 0.0, if, >, length, 1, Mean, mean, new, Mean, double, m, mean, evaluate, values, begin, length, =, var, evaluate, values, m, begin, length, return, var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]+int+int#[double, var, Double.NaN, if, MathArrays, verifyValues, values, weights, begin, length, if, ==, length, 1, =, var, 0.0, if, >, length, 1, Mean, mean, new, Mean, double, m, mean, evaluate, values, weights, begin, length, =, var, evaluate, values, weights, m, begin, length, return, var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]#[return, evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double+int+int#[double, var, Double.NaN, if, MathArrays, verifyValues, values, begin, length, if, ==, length, 1, =, var, 0.0, if, >, length, 1, double, accum, 0.0, double, dev, 0.0, double, accum2, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, =, dev, -, values, i, mean, +=, accum, *, dev, dev, +=, accum2, dev, double, len, length, if, isBiasCorrected, =, var, /, -, accum, /, *, accum2, accum2, len, -, len, 1.0, =, var, /, -, accum, /, *, accum2, accum2, len, len, return, var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double#[return, evaluate, values, mean, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]+double+int+int#[double, var, Double.NaN, if, MathArrays, verifyValues, values, weights, begin, length, if, ==, length, 1, =, var, 0.0, if, >, length, 1, double, accum, 0.0, double, dev, 0.0, double, accum2, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, =, dev, -, values, i, mean, +=, accum, *, weights, i, *, dev, dev, +=, accum2, *, weights, i, dev, double, sumWts, 0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, sumWts, weights, i, if, isBiasCorrected, =, var, /, -, accum, /, *, accum2, accum2, sumWts, -, sumWts, 1.0, =, var, /, -, accum, /, *, accum2, accum2, sumWts, sumWts, return, var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]+double#[return, evaluate, values, weights, mean, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:isBiasCorrected:null#[return, isBiasCorrected]
org.apache.commons.math4.stat.descriptive.moment:Variance:setBiasCorrected:boolean#[=, this, isBiasCorrected, biasCorrected]
org.apache.commons.math4.stat.descriptive.moment:Variance:copy:null#[Variance, result, new, Variance, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.moment:Variance:copy:Variance+Variance#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.moment, source.moment, copy, =, dest.isBiasCorrected, source.isBiasCorrected, =, dest.incMoment, source.incMoment]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:increment:double[]#[if, !=, v.length, sums.length, throw, new, DimensionMismatchException, v.length, sums.length, int, k, 0, for, int, i, 0, <, i, v.length, ++, i, +=, sums, i, v, i, for, int, j, 0, <=, j, i, ++, j, +=, productsSums, ++, k, *, v, i, v, j, ++, n]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:getResult:null#[int, dimension, sums.length, RealMatrix, result, MatrixUtils, createRealMatrix, dimension, dimension, if, >, n, 1, double, c, /, 1.0, *, n, isBiasCorrected, -, n, 1, n, int, k, 0, for, int, i, 0, <, i, dimension, ++, i, for, int, j, 0, <=, j, i, ++, j, double, e, *, c, -, *, n, productsSums, ++, k, *, sums, i, sums, j, result, setEntry, i, j, e, result, setEntry, j, i, e, return, result]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:clear:null#[=, n, 0, Arrays, fill, sums, 0.0, Arrays, fill, productsSums, 0.0]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:hashCode:null#[final, int, prime, 31, int, result, 1, =, result, +, *, prime, result, isBiasCorrected, 1231, 1237, =, result, +, *, prime, result, int, ^, n, >>>, n, 32, =, result, +, *, prime, result, Arrays, hashCode, productsSums, =, result, +, *, prime, result, Arrays, hashCode, sums, return, result]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:equals:Object#[if, ==, this, obj, return, true, if, !, instanceof, obj, VectorialCovariance, return, false, VectorialCovariance, other, VectorialCovariance, obj, if, !=, isBiasCorrected, other.isBiasCorrected, return, false, if, !=, n, other.n, return, false, if, !, Arrays, equals, productsSums, other.productsSums, return, false, if, !, Arrays, equals, sums, other.sums, return, false, return, true]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:increment:double[]#[if, !=, v.length, means.length, throw, new, DimensionMismatchException, v.length, means.length, for, int, i, 0, <, i, v.length, ++, i, means, i, increment, v, i]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:getResult:null#[double, result, double, means.length, for, int, i, 0, <, i, result.length, ++, i, =, result, i, means, i, getResult, return, result]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:getN:null#[return, ==, means.length, 0, 0, means, 0, getN]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:hashCode:null#[final, int, prime, 31, int, result, 1, =, result, +, *, prime, result, Arrays, hashCode, means, return, result]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:equals:Object#[if, ==, this, obj, return, true, if, !, instanceof, obj, VectorialMean, return, false, VectorialMean, other, VectorialMean, obj, if, !, Arrays, equals, means, other.means, return, false, return, true]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:addValue:double[]#[checkDimension, value.length, for, int, i, 0, <, i, k, ++, i, double, v, value, i, sumImpl, i, increment, v, sumSqImpl, i, increment, v, minImpl, i, increment, v, maxImpl, i, increment, v, sumLogImpl, i, increment, v, geoMeanImpl, i, increment, v, meanImpl, i, increment, v, covarianceImpl, increment, value, ++, n]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getDimension:null#[return, k]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getResults:StorelessUnivariateStatistic[]#[double, results, double, stats.length, for, int, i, 0, <, i, results.length, ++, i, =, results, i, stats, i, getResult, return, results]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSum:null#[return, getResults, sumImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumSq:null#[return, getResults, sumSqImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumLog:null#[return, getResults, sumLogImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMean:null#[return, getResults, meanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getStandardDeviation:null#[double, stdDev, double, k, if, <, getN, 1, Arrays, fill, stdDev, Double.NaN, if, <, getN, 2, Arrays, fill, stdDev, 0.0, RealMatrix, matrix, covarianceImpl, getResult, for, int, i, 0, <, i, k, ++, i, =, stdDev, i, FastMath, sqrt, matrix, getEntry, i, i, return, stdDev]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getCovariance:null#[return, covarianceImpl, getResult]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMax:null#[return, getResults, maxImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMin:null#[return, getResults, minImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getGeometricMean:null#[return, getResults, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:toString:null#[final, String, separator, ", ", final, String, suffix, System, getProperty, "line.separator", StringBuilder, outBuffer, new, StringBuilder, outBuffer, append, +, "MultivariateSummaryStatistics:", suffix, outBuffer, append, +, "n: ", getN, suffix, append, outBuffer, getMin, "min: ", separator, suffix, append, outBuffer, getMax, "max: ", separator, suffix, append, outBuffer, getMean, "mean: ", separator, suffix, append, outBuffer, getGeometricMean, "geometric mean: ", separator, suffix, append, outBuffer, getSumSq, "sum of squares: ", separator, suffix, append, outBuffer, getSumLog, "sum of logarithms: ", separator, suffix, append, outBuffer, getStandardDeviation, "standard deviation: ", separator, suffix, outBuffer, append, +, "covariance: ", getCovariance, toString, suffix, return, outBuffer, toString]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:append:StringBuilder+double[]+String+String+String#[buffer, append, prefix, for, int, i, 0, <, i, data.length, ++, i, if, >, i, 0, buffer, append, separator, buffer, append, data, i, buffer, append, suffix]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:clear:null#[=, this, n, 0, for, int, i, 0, <, i, k, ++, i, minImpl, i, clear, maxImpl, i, clear, sumImpl, i, clear, sumLogImpl, i, clear, sumSqImpl, i, clear, geoMeanImpl, i, clear, meanImpl, i, clear, covarianceImpl, clear]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:equals:Object#[if, ==, object, this, return, true, if, ==, instanceof, object, MultivariateSummaryStatistics, false, return, false, MultivariateSummaryStatistics, stat, MultivariateSummaryStatistics, object, return, &&, MathArrays, equalsIncludingNaN, stat, getGeometricMean, getGeometricMean, MathArrays, equalsIncludingNaN, stat, getMax, getMax, MathArrays, equalsIncludingNaN, stat, getMean, getMean, MathArrays, equalsIncludingNaN, stat, getMin, getMin, Precision, equalsIncludingNaN, stat, getN, getN, MathArrays, equalsIncludingNaN, stat, getSum, getSum, MathArrays, equalsIncludingNaN, stat, getSumSq, getSumSq, MathArrays, equalsIncludingNaN, stat, getSumLog, getSumLog, stat, getCovariance, equals, getCovariance]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:hashCode:null#[int, result, +, 31, MathUtils, hash, getGeometricMean, =, result, +, *, result, 31, MathUtils, hash, getGeometricMean, =, result, +, *, result, 31, MathUtils, hash, getMax, =, result, +, *, result, 31, MathUtils, hash, getMean, =, result, +, *, result, 31, MathUtils, hash, getMin, =, result, +, *, result, 31, MathUtils, hash, getN, =, result, +, *, result, 31, MathUtils, hash, getSum, =, result, +, *, result, 31, MathUtils, hash, getSumSq, =, result, +, *, result, 31, MathUtils, hash, getSumLog, =, result, +, *, result, 31, getCovariance, hashCode, return, result]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setImpl:StorelessUnivariateStatistic[]+StorelessUnivariateStatistic[]#[checkEmpty, checkDimension, newImpl.length, System, arraycopy, newImpl, 0, oldImpl, 0, newImpl.length]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumImpl:null#[return, sumImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setSumImpl:StorelessUnivariateStatistic[]#[setImpl, sumImpl, this, sumImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumsqImpl:null#[return, sumSqImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic[]#[setImpl, sumsqImpl, this, sumSqImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMinImpl:null#[return, minImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setMinImpl:StorelessUnivariateStatistic[]#[setImpl, minImpl, this, minImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMaxImpl:null#[return, maxImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setMaxImpl:StorelessUnivariateStatistic[]#[setImpl, maxImpl, this, maxImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumLogImpl:null#[return, sumLogImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic[]#[setImpl, sumLogImpl, this, sumLogImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getGeoMeanImpl:null#[return, geoMeanImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic[]#[setImpl, geoMeanImpl, this, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMeanImpl:null#[return, meanImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setMeanImpl:StorelessUnivariateStatistic[]#[setImpl, meanImpl, this, meanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:checkEmpty:null#[if, >, n, 0, throw, new, MathIllegalStateException, LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, n]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:checkDimension:int#[if, !=, dimension, k, throw, new, DimensionMismatchException, dimension, k]
org.apache.commons.math4.stat.descriptive.rank:Max:increment:double#[if, ||, >, d, value, Double, isNaN, value, =, value, d, ++, n]
org.apache.commons.math4.stat.descriptive.rank:Max:clear:null#[=, value, Double.NaN, =, n, 0]
org.apache.commons.math4.stat.descriptive.rank:Max:getResult:null#[return, value]
org.apache.commons.math4.stat.descriptive.rank:Max:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.rank:Max:evaluate:double[]+int+int#[double, max, Double.NaN, if, MathArrays, verifyValues, values, begin, length, =, max, values, begin, for, int, i, begin, <, i, +, begin, length, ++, i, if, !, Double, isNaN, values, i, =, max, >, max, values, i, max, values, i, return, max]
org.apache.commons.math4.stat.descriptive.rank:Max:copy:null#[Max, result, new, Max, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.rank:Max:copy:Max+Max#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.n, source.n, =, dest.value, source.value]
org.apache.commons.math4.stat.descriptive.rank:Median:withEstimationType:EstimationType#[return, new, Median, newEstimationType, getNaNStrategy, getKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Median:withNaNStrategy:NaNStrategy#[return, new, Median, getEstimationType, newNaNStrategy, getKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Median:withKthSelector:KthSelector#[return, new, Median, getEstimationType, getNaNStrategy, newKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Min:increment:double#[if, ||, <, d, value, Double, isNaN, value, =, value, d, ++, n]
org.apache.commons.math4.stat.descriptive.rank:Min:clear:null#[=, value, Double.NaN, =, n, 0]
org.apache.commons.math4.stat.descriptive.rank:Min:getResult:null#[return, value]
org.apache.commons.math4.stat.descriptive.rank:Min:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.rank:Min:evaluate:double[]+int+int#[double, min, Double.NaN, if, MathArrays, verifyValues, values, begin, length, =, min, values, begin, for, int, i, begin, <, i, +, begin, length, ++, i, if, !, Double, isNaN, values, i, =, min, <, min, values, i, min, values, i, return, min]
org.apache.commons.math4.stat.descriptive.rank:Min:copy:null#[Min, result, new, Min, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.rank:Min:copy:Min+Min#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.n, source.n, =, dest.value, source.value]
org.apache.commons.math4.stat.descriptive.rank:Percentile:setData:double[]#[if, ==, values, null, =, cachedPivots, null, =, cachedPivots, int, PIVOTS_HEAP_LENGTH, Arrays, fill, cachedPivots, -, 1, super, setData, values]
org.apache.commons.math4.stat.descriptive.rank:Percentile:setData:double[]+int+int#[if, ==, values, null, =, cachedPivots, null, =, cachedPivots, int, PIVOTS_HEAP_LENGTH, Arrays, fill, cachedPivots, -, 1, super, setData, values, begin, length]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double#[return, evaluate, getDataRef, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+double#[MathArrays, verifyValues, values, 0, 0, return, evaluate, values, 0, values.length, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+int+int#[return, evaluate, values, start, length, quantile]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+int+int+double#[MathArrays, verifyValues, values, begin, length, if, ||, >, p, 100, <=, p, 0, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100, if, ==, length, 0, return, Double.NaN, if, ==, length, 1, return, values, begin, final, double, work, getWorkArray, values, begin, length, final, int, pivotsHeap, getPivots, values, return, ==, work.length, 0, Double.NaN, estimationType, evaluate, work, pivotsHeap, p, kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getQuantile:null#[return, quantile]
org.apache.commons.math4.stat.descriptive.rank:Percentile:setQuantile:double#[if, ||, <=, p, 0, >, p, 100, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100, =, quantile, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:copy:null#[return, new, Percentile, this]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getWorkArray:double[]+int+int#[final, double, work, if, ==, values, getDataRef, =, work, getDataRef, switch, nanStrategy, case, MAXIMAL, =, work, replaceAndSlice, values, begin, length, Double.NaN, Double.POSITIVE_INFINITY, break, case, MINIMAL, =, work, replaceAndSlice, values, begin, length, Double.NaN, Double.NEGATIVE_INFINITY, break, case, REMOVED, =, work, removeAndSlice, values, begin, length, Double.NaN, break, case, FAILED, =, work, copyOf, values, begin, length, MathArrays, checkNotNaN, work, break, default, =, work, copyOf, values, begin, length, break, return, work]
org.apache.commons.math4.stat.descriptive.rank:Percentile:copyOf:double[]+int+int#[MathArrays, verifyValues, values, begin, length, return, MathArrays, copyOfRange, values, begin, +, begin, length]
org.apache.commons.math4.stat.descriptive.rank:Percentile:replaceAndSlice:double[]+int+int+double+double#[final, double, temp, copyOf, values, begin, length, for, int, i, 0, <, i, length, ++, i, =, temp, i, Precision, equalsIncludingNaN, original, temp, i, replacement, temp, i, return, temp]
org.apache.commons.math4.stat.descriptive.rank:Percentile:removeAndSlice:double[]+int+int+double#[MathArrays, verifyValues, values, begin, length, final, double, temp, final, BitSet, bits, new, BitSet, length, for, int, i, begin, <, i, +, begin, length, ++, i, if, Precision, equalsIncludingNaN, removedValue, values, i, bits, set, -, i, begin, if, bits, isEmpty, =, temp, copyOf, values, begin, length, if, ==, bits, cardinality, length, =, temp, double, 0, =, temp, double, -, length, bits, cardinality, int, start, begin, int, dest, 0, int, nextOne, -, 1, int, bitSetPtr, 0, while, !=, =, nextOne, bits, nextSetBit, bitSetPtr, -, 1, final, int, lengthToCopy, -, nextOne, bitSetPtr, System, arraycopy, values, start, temp, dest, lengthToCopy, +=, dest, lengthToCopy, =, start, +, begin, =, bitSetPtr, bits, nextClearBit, nextOne, if, <, start, +, begin, length, System, arraycopy, values, start, temp, dest, -, +, begin, length, start, return, temp]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getPivots:double[]#[final, int, pivotsHeap, if, ==, values, getDataRef, =, pivotsHeap, cachedPivots, =, pivotsHeap, int, PIVOTS_HEAP_LENGTH, Arrays, fill, pivotsHeap, -, 1, return, pivotsHeap]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getEstimationType:null#[return, estimationType]
org.apache.commons.math4.stat.descriptive.rank:Percentile:withEstimationType:EstimationType#[return, new, Percentile, quantile, newEstimationType, nanStrategy, kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getNaNStrategy:null#[return, nanStrategy]
org.apache.commons.math4.stat.descriptive.rank:Percentile:withNaNStrategy:NaNStrategy#[return, new, Percentile, quantile, estimationType, newNaNStrategy, kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getKthSelector:null#[return, kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getPivotingStrategy:null#[return, kthSelector, getPivotingStrategy]
org.apache.commons.math4.stat.descriptive.rank:Percentile:withKthSelector:KthSelector#[return, new, Percentile, quantile, estimationType, nanStrategy, newKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, 0d, final, double, maxLimit, 1d, return, ==, Double, compare, p, minLimit, 0, 0, ==, Double, compare, p, maxLimit, 0, length, *, p, +, length, 1]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, 0d, return, ==, Double, compare, p, minLimit, 0, 0, +, *, length, p, 0.5]
org.apache.commons.math4.stat.descriptive.rank:Percentile:estimate:double[]+int[]+double+int+KthSelector#[return, super, estimate, values, pivotsHeap, FastMath, ceil, -, pos, 0.5, length, selector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, 0d, final, double, maxLimit, 1d, return, ==, Double, compare, p, maxLimit, 0, length, ==, Double, compare, p, minLimit, 0, 0, +, *, length, p, 0.5]
org.apache.commons.math4.stat.descriptive.rank:Percentile:estimate:double[]+int[]+double+int+KthSelector#[final, double, low, super, estimate, values, pivotsHeap, FastMath, ceil, -, pos, 0.5, length, selector, final, double, high, super, estimate, values, pivotsHeap, FastMath, floor, +, pos, 0.5, length, selector, return, /, +, low, high, 2]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, /, 1d, 2, length, return, <=, Double, compare, p, minLimit, 0, 0, FastMath, rint, *, length, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, /, 1d, length, final, double, maxLimit, 1d, return, <, Double, compare, p, minLimit, 0, 0, ==, Double, compare, p, maxLimit, 0, length, *, length, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, /, 1d, 2, length, final, double, maxLimit, /, -, length, 0.5, length, return, <, Double, compare, p, minLimit, 0, 0, >=, Double, compare, p, maxLimit, 0, length, +, *, length, p, 0.5]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, /, 1d, +, length, 1, final, double, maxLimit, /, *, 1d, length, +, length, 1, return, <, Double, compare, p, minLimit, 0, 0, >=, Double, compare, p, maxLimit, 0, length, *, +, length, 1, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, 0d, final, double, maxLimit, 1d, return, ==, Double, compare, p, minLimit, 0, 0, ==, Double, compare, p, maxLimit, 0, length, +, 1, *, -, length, 1, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, /, *, 2, /, 1d, 3, +, length, /, 1d, 3, final, double, maxLimit, /, -, length, /, 1d, 3, +, length, /, 1d, 3, return, <, Double, compare, p, minLimit, 0, 0, >=, Double, compare, p, maxLimit, 0, length, +, *, +, length, /, 1d, 3, p, /, 1d, 3]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[final, double, minLimit, /, 5d, 8, +, length, 0.25, final, double, maxLimit, /, -, length, /, 3d, 8, +, length, 0.25, return, <, Double, compare, p, minLimit, 0, 0, >=, Double, compare, p, maxLimit, 0, length, +, *, +, length, 0.25, p, /, 3d, 8]
org.apache.commons.math4.stat.descriptive.rank:Percentile:EstimationType:String#[=, this, name, type]
org.apache.commons.math4.stat.descriptive.rank:Percentile:estimate:double[]+int[]+double+int+KthSelector#[final, double, fpos, FastMath, floor, pos, final, int, intPos, int, fpos, final, double, dif, -, pos, fpos, if, <, pos, 1, return, selector, select, work, pivotsHeap, 0, if, >=, pos, length, return, selector, select, work, pivotsHeap, -, length, 1, final, double, lower, selector, select, work, pivotsHeap, -, intPos, 1, final, double, upper, selector, select, work, pivotsHeap, intPos, return, +, lower, *, dif, -, upper, lower]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+int[]+double+KthSelector#[MathUtils, checkNotNull, work, if, ||, >, p, 100, <=, p, 0, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100, return, estimate, work, pivotsHeap, index, /, p, 100d, work.length, work.length, selector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+double+KthSelector#[return, this, evaluate, work, null, p, selector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getName:null#[return, name]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:hashCode:null#[double, result, getResult, =, result, Double, isNaN, result, 37, result, final, double, markersHash, ==, markers, null, 0, markers, hashCode, final, double, toHash, result, quantile, markersHash, countOfObservations, return, Arrays, hashCode, toHash]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:equals:Object#[boolean, result, false, if, ==, this, o, =, result, true, if, instanceof, o, PSquarePercentile, PSquarePercentile, that, PSquarePercentile, o, boolean, isNotNull, &&, !=, markers, null, !=, that.markers, null, boolean, isNull, &&, ==, markers, null, ==, that.markers, null, =, result, isNotNull, markers, equals, that.markers, isNull, =, result, &&, result, ==, getN, that, getN, return, result]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:increment:double#[++, countOfObservations, =, this, lastObservation, observation, if, ==, markers, null, if, initialFive, add, observation, Collections, sort, initialFive, =, pValue, initialFive, get, int, *, quantile, -, initialFive, size, 1, return, =, markers, newMarkers, initialFive, quantile, =, pValue, markers, processDataPoint, observation]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:toString:null#[if, ==, markers, null, return, String, format, "obs=%s pValue=%s", DECIMAL_FORMAT, format, lastObservation, DECIMAL_FORMAT, format, pValue, return, String, format, "obs=%s markers=%s", DECIMAL_FORMAT, format, lastObservation, markers, toString]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:getN:null#[return, countOfObservations]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:copy:null#[PSquarePercentile, copy, new, PSquarePercentile, *, 100d, quantile, if, !=, markers, null, =, copy.markers, PSquareMarkers, markers, clone, =, copy.countOfObservations, countOfObservations, =, copy.pValue, pValue, copy.initialFive, clear, copy.initialFive, addAll, initialFive, return, copy]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:quantile:null#[return, quantile]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:clear:null#[=, markers, null, initialFive, clear, =, countOfObservations, 0L, =, pValue, Double.NaN]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:getResult:null#[if, ==, Double, compare, quantile, 1d, 0, =, pValue, maximum, if, ==, Double, compare, quantile, 0d, 0, =, pValue, minimum, return, pValue]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:maximum:null#[double, val, Double.NaN, if, !=, markers, null, =, val, markers, height, PSQUARE_CONSTANT, if, !, initialFive, isEmpty, =, val, initialFive, get, -, initialFive, size, 1, return, val]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:minimum:null#[double, val, Double.NaN, if, !=, markers, null, =, val, markers, height, 1, if, !, initialFive, isEmpty, =, val, initialFive, get, 0, return, val]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:newMarkers:List<Double>+double#[return, new, Markers, initialFive, p]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getMax:null#[return, max]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getMean:null#[return, mean]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getMin:null#[return, min]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getSum:null#[return, sum]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getStandardDeviation:null#[return, FastMath, sqrt, variance]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getVariance:null#[return, variance]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:equals:Object#[if, ==, object, this, return, true, if, ==, instanceof, object, StatisticalSummaryValues, false, return, false, StatisticalSummaryValues, stat, StatisticalSummaryValues, object, return, &&, Precision, equalsIncludingNaN, stat, getMax, getMax, Precision, equalsIncludingNaN, stat, getMean, getMean, Precision, equalsIncludingNaN, stat, getMin, getMin, Precision, equalsIncludingNaN, stat, getN, getN, Precision, equalsIncludingNaN, stat, getSum, getSum, Precision, equalsIncludingNaN, stat, getVariance, getVariance]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:hashCode:null#[int, result, +, 31, MathUtils, hash, getMax, =, result, +, *, result, 31, MathUtils, hash, getMean, =, result, +, *, result, 31, MathUtils, hash, getMin, =, result, +, *, result, 31, MathUtils, hash, getN, =, result, +, *, result, 31, MathUtils, hash, getSum, =, result, +, *, result, 31, MathUtils, hash, getVariance, return, result]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:toString:null#[StringBuffer, outBuffer, new, StringBuffer, String, endl, "\n", outBuffer, append, "StatisticalSummaryValues:", append, endl, outBuffer, append, "n: ", append, getN, append, endl, outBuffer, append, "min: ", append, getMin, append, endl, outBuffer, append, "max: ", append, getMax, append, endl, outBuffer, append, "mean: ", append, getMean, append, endl, outBuffer, append, "std dev: ", append, getStandardDeviation, append, endl, outBuffer, append, "variance: ", append, getVariance, append, endl, outBuffer, append, "sum: ", append, getSum, append, endl, return, outBuffer, toString]
org.apache.commons.math4.stat.descriptive.summary:Product:increment:double#[*=, value, d, ++, n]
org.apache.commons.math4.stat.descriptive.summary:Product:getResult:null#[return, value]
org.apache.commons.math4.stat.descriptive.summary:Product:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.summary:Product:clear:null#[=, value, 1, =, n, 0]
org.apache.commons.math4.stat.descriptive.summary:Product:evaluate:double[]+int+int#[double, product, Double.NaN, if, MathArrays, verifyValues, values, begin, length, true, =, product, 1.0, for, int, i, begin, <, i, +, begin, length, ++, i, *=, product, values, i, return, product]
org.apache.commons.math4.stat.descriptive.summary:Product:evaluate:double[]+double[]+int+int#[double, product, Double.NaN, if, MathArrays, verifyValues, values, weights, begin, length, true, =, product, 1.0, for, int, i, begin, <, i, +, begin, length, ++, i, *=, product, FastMath, pow, values, i, weights, i, return, product]
org.apache.commons.math4.stat.descriptive.summary:Product:evaluate:double[]+double[]#[return, evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.summary:Product:copy:null#[Product, result, new, Product, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.summary:Product:copy:Product+Product#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.n, source.n, =, dest.value, source.value]
org.apache.commons.math4.stat.descriptive.summary:Sum:increment:double#[+=, value, d, ++, n]
org.apache.commons.math4.stat.descriptive.summary:Sum:getResult:null#[return, value]
org.apache.commons.math4.stat.descriptive.summary:Sum:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.summary:Sum:clear:null#[=, value, 0, =, n, 0]
org.apache.commons.math4.stat.descriptive.summary:Sum:evaluate:double[]+int+int#[double, sum, Double.NaN, if, MathArrays, verifyValues, values, begin, length, true, =, sum, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, sum, values, i, return, sum]
org.apache.commons.math4.stat.descriptive.summary:Sum:evaluate:double[]+double[]+int+int#[double, sum, Double.NaN, if, MathArrays, verifyValues, values, weights, begin, length, true, =, sum, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, sum, *, values, i, weights, i, return, sum]
org.apache.commons.math4.stat.descriptive.summary:Sum:evaluate:double[]+double[]#[return, evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.summary:Sum:copy:null#[Sum, result, new, Sum, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.summary:Sum:copy:Sum+Sum#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.n, source.n, =, dest.value, source.value]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:increment:double#[+=, value, FastMath, log, d, ++, n]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:getResult:null#[return, value]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:clear:null#[=, value, 0d, =, n, 0]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:evaluate:double[]+int+int#[double, sumLog, Double.NaN, if, MathArrays, verifyValues, values, begin, length, true, =, sumLog, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, sumLog, FastMath, log, values, i, return, sumLog]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:copy:null#[SumOfLogs, result, new, SumOfLogs, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:copy:SumOfLogs+SumOfLogs#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.n, source.n, =, dest.value, source.value]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:increment:double#[+=, value, *, d, d, ++, n]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:getResult:null#[return, value]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:clear:null#[=, value, 0, =, n, 0]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:evaluate:double[]+int+int#[double, sumSq, Double.NaN, if, MathArrays, verifyValues, values, begin, length, true, =, sumSq, 0.0, for, int, i, begin, <, i, +, begin, length, ++, i, +=, sumSq, *, values, i, values, i, return, sumSq]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:copy:null#[SumOfSquares, result, new, SumOfSquares, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:copy:SumOfSquares+SumOfSquares#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.n, source.n, =, dest.value, source.value]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSummary:null#[return, new, StatisticalSummaryValues, getMean, getVariance, getN, getMax, getMin, getSum]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:addValue:double#[sumImpl, increment, value, sumsqImpl, increment, value, minImpl, increment, value, maxImpl, increment, value, sumLogImpl, increment, value, secondMoment, increment, value, if, !=, meanImpl, mean, meanImpl, increment, value, if, !=, varianceImpl, variance, varianceImpl, increment, value, if, !=, geoMeanImpl, geoMean, geoMeanImpl, increment, value, ++, n]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getN:null#[return, n]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSum:null#[return, sumImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumsq:null#[return, sumsqImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMean:null#[return, meanImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getStandardDeviation:null#[double, stdDev, Double.NaN, if, >, getN, 0, if, >, getN, 1, =, stdDev, FastMath, sqrt, getVariance, =, stdDev, 0.0, return, stdDev]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getQuadraticMean:null#[final, long, size, getN, return, >, size, 0, FastMath, sqrt, /, getSumsq, size, Double.NaN]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getVariance:null#[return, varianceImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getPopulationVariance:null#[Variance, populationVariance, new, Variance, secondMoment, populationVariance, setBiasCorrected, false, return, populationVariance, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMax:null#[return, maxImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMin:null#[return, minImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getGeometricMean:null#[return, geoMeanImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumOfLogs:null#[return, sumLogImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSecondMoment:null#[return, secondMoment, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:toString:null#[StringBuilder, outBuffer, new, StringBuilder, String, endl, "\n", outBuffer, append, "SummaryStatistics:", append, endl, outBuffer, append, "n: ", append, getN, append, endl, outBuffer, append, "min: ", append, getMin, append, endl, outBuffer, append, "max: ", append, getMax, append, endl, outBuffer, append, "sum: ", append, getSum, append, endl, outBuffer, append, "mean: ", append, getMean, append, endl, outBuffer, append, "geometric mean: ", append, getGeometricMean, append, endl, outBuffer, append, "variance: ", append, getVariance, append, endl, outBuffer, append, "population variance: ", append, getPopulationVariance, append, endl, outBuffer, append, "second moment: ", append, getSecondMoment, append, endl, outBuffer, append, "sum of squares: ", append, getSumsq, append, endl, outBuffer, append, "standard deviation: ", append, getStandardDeviation, append, endl, outBuffer, append, "sum of logs: ", append, getSumOfLogs, append, endl, return, outBuffer, toString]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:clear:null#[=, this, n, 0, minImpl, clear, maxImpl, clear, sumImpl, clear, sumLogImpl, clear, sumsqImpl, clear, geoMeanImpl, clear, secondMoment, clear, if, !=, meanImpl, mean, meanImpl, clear, if, !=, varianceImpl, variance, varianceImpl, clear]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:equals:Object#[if, ==, object, this, return, true, if, ==, instanceof, object, SummaryStatistics, false, return, false, SummaryStatistics, stat, SummaryStatistics, object, return, &&, Precision, equalsIncludingNaN, stat, getGeometricMean, getGeometricMean, Precision, equalsIncludingNaN, stat, getMax, getMax, Precision, equalsIncludingNaN, stat, getMean, getMean, Precision, equalsIncludingNaN, stat, getMin, getMin, Precision, equalsIncludingNaN, stat, getN, getN, Precision, equalsIncludingNaN, stat, getSum, getSum, Precision, equalsIncludingNaN, stat, getSumsq, getSumsq, Precision, equalsIncludingNaN, stat, getVariance, getVariance]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:hashCode:null#[int, result, +, 31, MathUtils, hash, getGeometricMean, =, result, +, *, result, 31, MathUtils, hash, getGeometricMean, =, result, +, *, result, 31, MathUtils, hash, getMax, =, result, +, *, result, 31, MathUtils, hash, getMean, =, result, +, *, result, 31, MathUtils, hash, getMin, =, result, +, *, result, 31, MathUtils, hash, getN, =, result, +, *, result, 31, MathUtils, hash, getSum, =, result, +, *, result, 31, MathUtils, hash, getSumsq, =, result, +, *, result, 31, MathUtils, hash, getVariance, return, result]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumImpl:null#[return, sumImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setSumImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, sumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumsqImpl:null#[return, sumsqImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, sumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMinImpl:null#[return, minImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setMinImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, minImpl, minImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMaxImpl:null#[return, maxImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setMaxImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, maxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumLogImpl:null#[return, sumLogImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, sumLogImpl, sumLogImpl, geoMean, setSumLogImpl, sumLogImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getGeoMeanImpl:null#[return, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, geoMeanImpl, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMeanImpl:null#[return, meanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setMeanImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, meanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getVarianceImpl:null#[return, varianceImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setVarianceImpl:StorelessUnivariateStatistic#[checkEmpty, =, this, varianceImpl, varianceImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:checkEmpty:null#[if, >, n, 0, throw, new, MathIllegalStateException, LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, n]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:copy:null#[SummaryStatistics, result, new, SummaryStatistics, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:copy:SummaryStatistics+SummaryStatistics#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, =, dest.maxImpl, source.maxImpl, copy, =, dest.minImpl, source.minImpl, copy, =, dest.sumImpl, source.sumImpl, copy, =, dest.sumLogImpl, source.sumLogImpl, copy, =, dest.sumsqImpl, source.sumsqImpl, copy, =, dest.secondMoment, source.secondMoment, copy, =, dest.n, source.n, if, instanceof, source, getVarianceImpl, Variance, =, dest.varianceImpl, new, Variance, dest.secondMoment, =, dest.varianceImpl, source.varianceImpl, copy, if, instanceof, source.meanImpl, Mean, =, dest.meanImpl, new, Mean, dest.secondMoment, =, dest.meanImpl, source.meanImpl, copy, if, instanceof, source, getGeoMeanImpl, GeometricMean, =, dest.geoMeanImpl, new, GeometricMean, SumOfLogs, dest.sumLogImpl, =, dest.geoMeanImpl, source.geoMeanImpl, copy, if, ==, source.geoMean, source.geoMeanImpl, =, dest.geoMean, GeometricMean, dest.geoMeanImpl, GeometricMean, copy, source.geoMean, dest.geoMean, if, ==, source.max, source.maxImpl, =, dest.max, Max, dest.maxImpl, Max, copy, source.max, dest.max, if, ==, source.mean, source.meanImpl, =, dest.mean, Mean, dest.meanImpl, Mean, copy, source.mean, dest.mean, if, ==, source.min, source.minImpl, =, dest.min, Min, dest.minImpl, Min, copy, source.min, dest.min, if, ==, source.sum, source.sumImpl, =, dest.sum, Sum, dest.sumImpl, Sum, copy, source.sum, dest.sum, if, ==, source.variance, source.varianceImpl, =, dest.variance, Variance, dest.varianceImpl, Variance, copy, source.variance, dest.variance, if, ==, source.sumLog, source.sumLogImpl, =, dest.sumLog, SumOfLogs, dest.sumLogImpl, SumOfLogs, copy, source.sumLog, dest.sumLog, if, ==, source.sumsq, source.sumsqImpl, =, dest.sumsq, SumOfSquares, dest.sumsqImpl, SumOfSquares, copy, source.sumsq, dest.sumsq]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:addValue:double#[super, addValue, v]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:apply:UnivariateStatistic#[return, super, apply, stat]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:clear:null#[super, clear]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getElement:int#[return, super, getElement, index]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getN:null#[return, super, getN]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getStandardDeviation:null#[return, super, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getQuadraticMean:null#[return, super, getQuadraticMean]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getValues:null#[return, super, getValues]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getWindowSize:null#[return, super, getWindowSize]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:setWindowSize:int#[super, setWindowSize, windowSize]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:toString:null#[return, super, toString]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:copy:null#[SynchronizedDescriptiveStatistics, result, new, SynchronizedDescriptiveStatistics, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:copy:SynchronizedDescriptiveStatistics+SynchronizedDescriptiveStatistics#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, source, dest, DescriptiveStatistics, copy, source, dest]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:addValue:double[]#[super, addValue, value]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getDimension:null#[return, super, getDimension]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getN:null#[return, super, getN]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSum:null#[return, super, getSum]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumSq:null#[return, super, getSumSq]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumLog:null#[return, super, getSumLog]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMean:null#[return, super, getMean]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getStandardDeviation:null#[return, super, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getCovariance:null#[return, super, getCovariance]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMax:null#[return, super, getMax]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMin:null#[return, super, getMin]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getGeometricMean:null#[return, super, getGeometricMean]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:toString:null#[return, super, toString]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:clear:null#[super, clear]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:equals:Object#[return, super, equals, object]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:hashCode:null#[return, super, hashCode]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumImpl:null#[return, super, getSumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setSumImpl:StorelessUnivariateStatistic[]#[super, setSumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumsqImpl:null#[return, super, getSumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic[]#[super, setSumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMinImpl:null#[return, super, getMinImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setMinImpl:StorelessUnivariateStatistic[]#[super, setMinImpl, minImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMaxImpl:null#[return, super, getMaxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setMaxImpl:StorelessUnivariateStatistic[]#[super, setMaxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumLogImpl:null#[return, super, getSumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic[]#[super, setSumLogImpl, sumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getGeoMeanImpl:null#[return, super, getGeoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic[]#[super, setGeoMeanImpl, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMeanImpl:null#[return, super, getMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setMeanImpl:StorelessUnivariateStatistic[]#[super, setMeanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSummary:null#[return, super, getSummary]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:addValue:double#[super, addValue, value]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getN:null#[return, super, getN]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSum:null#[return, super, getSum]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumsq:null#[return, super, getSumsq]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMean:null#[return, super, getMean]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getStandardDeviation:null#[return, super, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getQuadraticMean:null#[return, super, getQuadraticMean]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getVariance:null#[return, super, getVariance]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getPopulationVariance:null#[return, super, getPopulationVariance]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMax:null#[return, super, getMax]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMin:null#[return, super, getMin]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getGeometricMean:null#[return, super, getGeometricMean]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:toString:null#[return, super, toString]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:clear:null#[super, clear]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:equals:Object#[return, super, equals, object]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:hashCode:null#[return, super, hashCode]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumImpl:null#[return, super, getSumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setSumImpl:StorelessUnivariateStatistic#[super, setSumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumsqImpl:null#[return, super, getSumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic#[super, setSumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMinImpl:null#[return, super, getMinImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setMinImpl:StorelessUnivariateStatistic#[super, setMinImpl, minImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMaxImpl:null#[return, super, getMaxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setMaxImpl:StorelessUnivariateStatistic#[super, setMaxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumLogImpl:null#[return, super, getSumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic#[super, setSumLogImpl, sumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getGeoMeanImpl:null#[return, super, getGeoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic#[super, setGeoMeanImpl, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMeanImpl:null#[return, super, getMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setMeanImpl:StorelessUnivariateStatistic#[super, setMeanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getVarianceImpl:null#[return, super, getVarianceImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setVarianceImpl:StorelessUnivariateStatistic#[super, setVarianceImpl, varianceImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:copy:null#[SynchronizedSummaryStatistics, result, new, SynchronizedSummaryStatistics, copy, this, result, return, result]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:copy:SynchronizedSummaryStatistics+SynchronizedSummaryStatistics#[MathUtils, checkNotNull, source, MathUtils, checkNotNull, dest, source, dest, SummaryStatistics, copy, source, dest]
org.apache.commons.math4.stat:Frequency:toString:null#[NumberFormat, nf, NumberFormat, getPercentInstance, StringBuilder, outBuffer, new, StringBuilder, outBuffer, append, "Value \t Freq. \t Pct. \t Cum Pct. \n", Iterator, Comparable, iter, freqTable, keySet, iterator, while, iter, hasNext, Comparable, value, iter, next, outBuffer, append, value, outBuffer, append, '\t', outBuffer, append, getCount, value, outBuffer, append, '\t', outBuffer, append, nf, format, getPct, value, outBuffer, append, '\t', outBuffer, append, nf, format, getCumPct, value, outBuffer, append, '\n', return, outBuffer, toString]
org.apache.commons.math4.stat:Frequency:addValue:Comparable<?>#[incrementValue, v, 1]
org.apache.commons.math4.stat:Frequency:addValue:int#[addValue, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:addValue:long#[addValue, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:addValue:char#[addValue, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:incrementValue:Comparable<?>+long#[Comparable, obj, v, if, instanceof, v, Integer, =, obj, Long, valueOf, Integer, v, longValue, try, Long, count, freqTable, get, obj, if, ==, count, null, freqTable, put, obj, Long, valueOf, increment, freqTable, put, obj, Long, valueOf, +, count, longValue, increment, catch, ClassCastException, ex, throw, new, MathIllegalArgumentException, LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES, v, getClass, getName]
org.apache.commons.math4.stat:Frequency:incrementValue:int+long#[incrementValue, Long, valueOf, v, increment]
org.apache.commons.math4.stat:Frequency:incrementValue:long+long#[incrementValue, Long, valueOf, v, increment]
org.apache.commons.math4.stat:Frequency:incrementValue:char+long#[incrementValue, Character, valueOf, v, increment]
org.apache.commons.math4.stat:Frequency:clear:null#[freqTable, clear]
org.apache.commons.math4.stat:Frequency:valuesIterator:null#[return, freqTable, keySet, iterator]
org.apache.commons.math4.stat:Frequency:entrySetIterator:null#[return, freqTable, entrySet, iterator]
org.apache.commons.math4.stat:Frequency:getSumFreq:null#[long, result, 0, Iterator, Long, iterator, freqTable, values, iterator, while, iterator, hasNext, +=, result, iterator, next, longValue, return, result]
org.apache.commons.math4.stat:Frequency:getCount:Comparable<?>#[if, instanceof, v, Integer, return, getCount, Integer, v, longValue, long, result, 0, try, Long, count, freqTable, get, v, if, !=, count, null, =, result, count, longValue, catch, ClassCastException, ex, return, result]
org.apache.commons.math4.stat:Frequency:getCount:int#[return, getCount, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCount:long#[return, getCount, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCount:char#[return, getCount, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getUniqueCount:null#[return, freqTable, keySet, size]
org.apache.commons.math4.stat:Frequency:getPct:Comparable<?>#[final, long, sumFreq, getSumFreq, if, ==, sumFreq, 0, return, Double.NaN, return, /, double, getCount, v, double, sumFreq]
org.apache.commons.math4.stat:Frequency:getPct:int#[return, getPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getPct:long#[return, getPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getPct:char#[return, getPct, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumFreq:Comparable<?>#[if, ==, getSumFreq, 0, return, 0, if, instanceof, v, Integer, return, getCumFreq, Integer, v, longValue, Comparator, Comparable, c, Comparator, Comparable, freqTable, comparator, if, ==, c, null, =, c, new, NaturalComparator, long, result, 0, try, Long, value, freqTable, get, v, if, !=, value, null, =, result, value, longValue, catch, ClassCastException, ex, return, result, if, <, c, compare, v, freqTable, firstKey, 0, return, 0, if, >=, c, compare, v, freqTable, lastKey, 0, return, getSumFreq, Iterator, Comparable, values, valuesIterator, while, values, hasNext, Comparable, nextValue, values, next, if, >, c, compare, v, nextValue, 0, +=, result, getCount, nextValue, return, result, return, result]
org.apache.commons.math4.stat:Frequency:getCumFreq:int#[return, getCumFreq, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumFreq:long#[return, getCumFreq, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumFreq:char#[return, getCumFreq, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumPct:Comparable<?>#[final, long, sumFreq, getSumFreq, if, ==, sumFreq, 0, return, Double.NaN, return, /, double, getCumFreq, v, double, sumFreq]
org.apache.commons.math4.stat:Frequency:getCumPct:int#[return, getCumPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumPct:long#[return, getCumPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumPct:char#[return, getCumPct, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getMode:null#[long, mostPopular, 0, for, Long, l, freqTable, values, long, frequency, l, longValue, if, >, frequency, mostPopular, =, mostPopular, frequency, List, Comparable, modeList, new, ArrayList, Comparable, for, Entry, Comparable, Long, ent, freqTable, entrySet, long, frequency, ent, getValue, longValue, if, ==, frequency, mostPopular, modeList, add, ent, getKey, return, modeList]
org.apache.commons.math4.stat:Frequency:merge:Frequency#[MathUtils, checkNotNull, other, LocalizedFormats.NULL_NOT_ALLOWED, final, Iterator, Map.Entry, Comparable, Long, iter, other, entrySetIterator, while, iter, hasNext, final, Map.Entry, Comparable, Long, entry, iter, next, incrementValue, entry, getKey, entry, getValue, longValue]
org.apache.commons.math4.stat:Frequency:merge:Collection<Frequency>#[MathUtils, checkNotNull, others, LocalizedFormats.NULL_NOT_ALLOWED, for, final, Frequency, freq, others, merge, freq]
org.apache.commons.math4.stat:Frequency:hashCode:null#[final, int, prime, 31, int, result, 1, =, result, +, *, prime, result, ==, freqTable, null, 0, freqTable, hashCode, return, result]
org.apache.commons.math4.stat:Frequency:equals:Object#[if, ==, this, obj, return, true, if, !, instanceof, obj, Frequency, return, false, Frequency, other, Frequency, obj, if, ==, freqTable, null, if, !=, other.freqTable, null, return, false, if, !, freqTable, equals, other.freqTable, return, false, return, true]
org.apache.commons.math4.stat.inference:BinomialTest:binomialTest:int+int+double+AlternativeHypothesis+double#[double, pValue, binomialTest, numberOfTrials, numberOfSuccesses, probability, alternativeHypothesis, return, <, pValue, alpha]
org.apache.commons.math4.stat.inference:BinomialTest:binomialTest:int+int+double+AlternativeHypothesis#[if, <, numberOfTrials, 0, throw, new, NotPositiveException, numberOfTrials, if, <, numberOfSuccesses, 0, throw, new, NotPositiveException, numberOfSuccesses, if, ||, <, probability, 0, >, probability, 1, throw, new, OutOfRangeException, probability, 0, 1, if, <, numberOfTrials, numberOfSuccesses, throw, new, MathIllegalArgumentException, LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, numberOfTrials, numberOfSuccesses, if, ==, alternativeHypothesis, null, throw, new, NullArgumentException, final, BinomialDistribution, distribution, new, BinomialDistribution, null, numberOfTrials, probability, switch, alternativeHypothesis, case, GREATER_THAN, return, -, 1, distribution, cumulativeProbability, -, numberOfSuccesses, 1, case, LESS_THAN, return, distribution, cumulativeProbability, numberOfSuccesses, case, TWO_SIDED, int, criticalValueLow, 0, int, criticalValueHigh, numberOfTrials, double, pTotal, 0, while, true, double, pLow, distribution, probability, criticalValueLow, double, pHigh, distribution, probability, criticalValueHigh, if, ==, pLow, pHigh, +=, pTotal, *, 2, pLow, ++, criticalValueLow, --, criticalValueHigh, if, <, pLow, pHigh, +=, pTotal, pLow, ++, criticalValueLow, +=, pTotal, pHigh, --, criticalValueHigh, if, ||, >, criticalValueLow, numberOfSuccesses, <, criticalValueHigh, numberOfSuccesses, break, return, pTotal, default, throw, new, MathInternalError, LocalizedFormats.OUT_OF_RANGE_SIMPLE, alternativeHypothesis, AlternativeHypothesis.TWO_SIDED, AlternativeHypothesis.LESS_THAN]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquare:double[]+long[]#[if, <, expected.length, 2, throw, new, DimensionMismatchException, expected.length, 2, if, !=, expected.length, observed.length, throw, new, DimensionMismatchException, expected.length, observed.length, MathArrays, checkPositive, expected, MathArrays, checkNonNegative, observed, double, sumExpected, 0d, double, sumObserved, 0d, for, int, i, 0, <, i, observed.length, ++, i, +=, sumExpected, expected, i, +=, sumObserved, observed, i, double, ratio, 1.0d, boolean, rescale, false, if, >, FastMath, abs, -, sumExpected, sumObserved, 10E-6, =, ratio, /, sumObserved, sumExpected, =, rescale, true, double, sumSq, 0.0d, for, int, i, 0, <, i, observed.length, ++, i, if, rescale, final, double, dev, -, observed, i, *, ratio, expected, i, +=, sumSq, /, *, dev, dev, *, ratio, expected, i, final, double, dev, -, observed, i, expected, i, +=, sumSq, /, *, dev, dev, expected, i, return, sumSq]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:double[]+long[]#[final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, -, expected.length, 1.0, return, -, 1.0, distribution, cumulativeProbability, chiSquare, expected, observed]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:double[]+long[]+double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, return, <, chiSquareTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquare:long[][]#[checkArray, counts, int, nRows, counts.length, int, nCols, counts, 0, length, double, rowSum, double, nRows, double, colSum, double, nCols, double, total, 0.0d, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, +=, rowSum, row, counts, row, col, +=, colSum, col, counts, row, col, +=, total, counts, row, col, double, sumSq, 0.0d, double, expected, 0.0d, for, int, row, 0, <, row, nRows, ++, row, for, int, col, 0, <, col, nCols, ++, col, =, expected, /, *, rowSum, row, colSum, col, total, +=, sumSq, /, *, -, counts, row, col, expected, -, counts, row, col, expected, expected, return, sumSq]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:long[][]#[checkArray, counts, double, df, *, -, double, counts.length, 1, -, double, counts, 0, length, 1, final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, df, return, -, 1, distribution, cumulativeProbability, chiSquare, counts]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:long[][]+double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, return, <, chiSquareTest, counts, alpha]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareDataSetsComparison:long[]+long[]#[if, <, observed1.length, 2, throw, new, DimensionMismatchException, observed1.length, 2, if, !=, observed1.length, observed2.length, throw, new, DimensionMismatchException, observed1.length, observed2.length, MathArrays, checkNonNegative, observed1, MathArrays, checkNonNegative, observed2, long, countSum1, 0, long, countSum2, 0, boolean, unequalCounts, false, double, weight, 0.0, for, int, i, 0, <, i, observed1.length, ++, i, +=, countSum1, observed1, i, +=, countSum2, observed2, i, if, ||, ==, countSum1, 0, ==, countSum2, 0, throw, new, ZeroException, =, unequalCounts, !=, countSum1, countSum2, if, unequalCounts, =, weight, FastMath, sqrt, /, double, countSum1, double, countSum2, double, sumSq, 0.0d, double, dev, 0.0d, double, obs1, 0.0d, double, obs2, 0.0d, for, int, i, 0, <, i, observed1.length, ++, i, if, &&, ==, observed1, i, 0, ==, observed2, i, 0, throw, new, ZeroException, LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i, =, obs1, observed1, i, =, obs2, observed2, i, if, unequalCounts, =, dev, -, /, obs1, weight, *, obs2, weight, =, dev, -, obs1, obs2, +=, sumSq, /, *, dev, dev, +, obs1, obs2, return, sumSq]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTestDataSetsComparison:long[]+long[]#[final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, -, double, observed1.length, 1, return, -, 1, distribution, cumulativeProbability, chiSquareDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTestDataSetsComparison:long[]+long[]+double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, return, <, chiSquareTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:ChiSquareTest:checkArray:long[][]#[if, <, in.length, 2, throw, new, DimensionMismatchException, in.length, 2, if, <, in, 0, length, 2, throw, new, DimensionMismatchException, in, 0, length, 2, MathArrays, checkRectangular, in, MathArrays, checkNonNegative, in]
org.apache.commons.math4.stat.inference:GTest:g:double[]+long[]#[if, <, expected.length, 2, throw, new, DimensionMismatchException, expected.length, 2, if, !=, expected.length, observed.length, throw, new, DimensionMismatchException, expected.length, observed.length, MathArrays, checkPositive, expected, MathArrays, checkNonNegative, observed, double, sumExpected, 0d, double, sumObserved, 0d, for, int, i, 0, <, i, observed.length, ++, i, +=, sumExpected, expected, i, +=, sumObserved, observed, i, double, ratio, 1d, boolean, rescale, false, if, >, FastMath, abs, -, sumExpected, sumObserved, 10E-6, =, ratio, /, sumObserved, sumExpected, =, rescale, true, double, sum, 0d, for, int, i, 0, <, i, observed.length, ++, i, final, double, dev, rescale, FastMath, log, /, double, observed, i, *, ratio, expected, i, FastMath, log, /, double, observed, i, expected, i, +=, sum, *, double, observed, i, dev, return, *, 2d, sum]
org.apache.commons.math4.stat.inference:GTest:gTest:double[]+long[]#[final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, -, expected.length, 1.0, return, -, 1.0, distribution, cumulativeProbability, g, expected, observed]
org.apache.commons.math4.stat.inference:GTest:gTestIntrinsic:double[]+long[]#[final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, -, expected.length, 2.0, return, -, 1.0, distribution, cumulativeProbability, g, expected, observed]
org.apache.commons.math4.stat.inference:GTest:gTest:double[]+long[]+double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, return, <, gTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:GTest:entropy:long[][]#[double, h, 0d, double, sum_k, 0d, for, int, i, 0, <, i, k.length, ++, i, for, int, j, 0, <, j, k, i, length, ++, j, +=, sum_k, double, k, i, j, for, int, i, 0, <, i, k.length, ++, i, for, int, j, 0, <, j, k, i, length, ++, j, if, !=, k, i, j, 0, final, double, p_ij, /, double, k, i, j, sum_k, +=, h, *, p_ij, FastMath, log, p_ij, return, -, h]
org.apache.commons.math4.stat.inference:GTest:entropy:long[]#[double, h, 0d, double, sum_k, 0d, for, int, i, 0, <, i, k.length, ++, i, +=, sum_k, double, k, i, for, int, i, 0, <, i, k.length, ++, i, if, !=, k, i, 0, final, double, p_i, /, double, k, i, sum_k, +=, h, *, p_i, FastMath, log, p_i, return, -, h]
org.apache.commons.math4.stat.inference:GTest:gDataSetsComparison:long[]+long[]#[if, <, observed1.length, 2, throw, new, DimensionMismatchException, observed1.length, 2, if, !=, observed1.length, observed2.length, throw, new, DimensionMismatchException, observed1.length, observed2.length, MathArrays, checkNonNegative, observed1, MathArrays, checkNonNegative, observed2, long, countSum1, 0, long, countSum2, 0, final, long, collSums, long, observed1.length, final, long, k, long, 2, observed1.length, for, int, i, 0, <, i, observed1.length, ++, i, if, &&, ==, observed1, i, 0, ==, observed2, i, 0, throw, new, ZeroException, LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i, +=, countSum1, observed1, i, +=, countSum2, observed2, i, =, collSums, i, +, observed1, i, observed2, i, =, k, 0, i, observed1, i, =, k, 1, i, observed2, i, if, ||, ==, countSum1, 0, ==, countSum2, 0, throw, new, ZeroException, final, long, rowSums, countSum1, countSum2, final, double, sum, +, double, countSum1, double, countSum2, return, *, 2, sum, -, +, entropy, rowSums, entropy, collSums, entropy, k]
org.apache.commons.math4.stat.inference:GTest:rootLogLikelihoodRatio:long+long+long+long#[final, double, llr, gDataSetsComparison, long, k11, k12, long, k21, k22, double, sqrt, FastMath, sqrt, llr, if, <, /, double, k11, +, k11, k12, /, double, k21, +, k21, k22, =, sqrt, -, sqrt, return, sqrt]
org.apache.commons.math4.stat.inference:GTest:gTestDataSetsComparison:long[]+long[]#[final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, -, double, observed1.length, 1, return, -, 1, distribution, cumulativeProbability, gDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:GTest:gTestDataSetsComparison:long[]+long[]+double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, return, <, gTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:RealDistribution+double[]+boolean#[return, -, 1d, cdf, kolmogorovSmirnovStatistic, distribution, data, data.length, exact]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovStatistic:RealDistribution+double[]#[checkArray, data, final, int, n, data.length, final, double, nd, n, final, double, dataCopy, double, n, System, arraycopy, data, 0, dataCopy, 0, n, Arrays, sort, dataCopy, double, d, 0d, for, int, i, 1, <=, i, n, ++, i, final, double, yi, distribution, cumulativeProbability, dataCopy, -, i, 1, final, double, currD, FastMath, max, -, yi, /, -, i, 1, nd, -, /, i, nd, yi, if, >, currD, d, =, d, currD, return, d]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:double[]+double[]+boolean#[final, long, lengthProduct, *, long, x.length, y.length, double, xa, null, double, ya, null, if, &&, <, lengthProduct, LARGE_SAMPLE_PRODUCT, hasTies, x, y, =, xa, MathArrays, copyOf, x, =, ya, MathArrays, copyOf, y, fixTies, xa, ya, =, xa, x, =, ya, y, if, <, lengthProduct, LARGE_SAMPLE_PRODUCT, return, exactP, kolmogorovSmirnovStatistic, xa, ya, x.length, y.length, strict, return, approximateP, kolmogorovSmirnovStatistic, x, y, x.length, y.length]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:double[]+double[]#[return, kolmogorovSmirnovTest, x, y, true]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovStatistic:double[]+double[]#[return, /, integralKolmogorovSmirnovStatistic, x, y, double, *, x.length, long, y.length]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:integralKolmogorovSmirnovStatistic:double[]+double[]#[checkArray, x, checkArray, y, final, double, sx, MathArrays, copyOf, x, final, double, sy, MathArrays, copyOf, y, Arrays, sort, sx, Arrays, sort, sy, final, int, n, sx.length, final, int, m, sy.length, int, rankX, 0, int, rankY, 0, long, curD, 0l, long, supD, 0l, do, double, z, <=, Double, compare, sx, rankX, sy, rankY, 0, sx, rankX, sy, rankY, while, &&, <, rankX, n, ==, Double, compare, sx, rankX, z, 0, +=, rankX, 1, +=, curD, m, while, &&, <, rankY, m, ==, Double, compare, sy, rankY, z, 0, +=, rankY, 1, -=, curD, n, if, >, curD, supD, =, supD, curD, if, >, -, curD, supD, =, supD, -, curD, &&, <, rankX, n, <, rankY, m, return, supD]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:RealDistribution+double[]#[return, kolmogorovSmirnovTest, distribution, data, false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:RealDistribution+double[]+double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, return, <, kolmogorovSmirnovTest, distribution, data, alpha]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:bootstrap:double[]+double[]+int+boolean#[final, int, xLength, x.length, final, int, yLength, y.length, final, double, combined, double, +, xLength, yLength, System, arraycopy, x, 0, combined, 0, xLength, System, arraycopy, y, 0, combined, xLength, yLength, final, EnumeratedRealDistribution, dist, new, EnumeratedRealDistribution, rng, combined, final, long, d, integralKolmogorovSmirnovStatistic, x, y, int, greaterCount, 0, int, equalCount, 0, double, curX, double, curY, long, curD, for, int, i, 0, <, i, iterations, ++, i, =, curX, dist, sample, xLength, =, curY, dist, sample, yLength, =, curD, integralKolmogorovSmirnovStatistic, curX, curY, if, >, curD, d, ++, greaterCount, if, ==, curD, d, ++, equalCount, return, strict, /, greaterCount, double, iterations, /, +, greaterCount, equalCount, double, iterations]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:bootstrap:double[]+double[]+int#[return, bootstrap, x, y, iterations, true]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:cdf:double+int#[return, cdf, d, n, false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:cdfExact:double+int#[return, cdf, d, n, true]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:cdf:double+int+boolean#[final, double, ninv, /, 1, double, n, final, double, ninvhalf, *, 0.5, ninv, if, <=, d, ninvhalf, return, 0, if, &&, <, ninvhalf, d, <=, d, ninv, double, res, 1, final, double, f, -, *, 2, d, ninv, for, int, i, 1, <=, i, n, ++, i, *=, res, *, i, f, return, res, if, &&, <=, -, 1, ninv, d, <, d, 1, return, -, 1, *, 2, Math, pow, -, 1, d, n, if, <=, 1, d, return, 1, if, exact, return, exactK, d, n, if, <=, n, 140, return, roundedK, d, n, return, pelzGood, d, n]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:exactK:double+int#[final, int, k, int, Math, ceil, *, n, d, final, FieldMatrix, BigFraction, H, this, createExactH, d, n, final, FieldMatrix, BigFraction, Hpower, H, power, n, BigFraction, pFrac, Hpower, getEntry, -, k, 1, -, k, 1, for, int, i, 1, <=, i, n, ++, i, =, pFrac, pFrac, multiply, i, divide, n, return, pFrac, bigDecimalValue, 20, BigDecimal.ROUND_HALF_UP, doubleValue]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:roundedK:double+int#[final, int, k, int, Math, ceil, *, n, d, final, RealMatrix, H, this, createRoundedH, d, n, final, RealMatrix, Hpower, H, power, n, double, pFrac, Hpower, getEntry, -, k, 1, -, k, 1, for, int, i, 1, <=, i, n, ++, i, *=, pFrac, /, double, i, double, n, return, pFrac]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:pelzGood:double+int#[final, double, sqrtN, FastMath, sqrt, n, final, double, z, *, d, sqrtN, final, double, z2, *, d, d, n, final, double, z4, *, z2, z2, final, double, z6, *, z4, z2, final, double, z8, *, z4, z4, double, ret, 0, double, sum, 0, double, increment, 0, double, kTerm, 0, double, z2Term, /, MathUtils.PI_SQUARED, *, 8, z2, int, k, 1, for, <, k, MAXIMUM_PARTIAL_SUM_COUNT, ++, k, =, kTerm, -, *, 2, k, 1, =, increment, FastMath, exp, *, -, z2Term, kTerm, kTerm, +=, sum, increment, if, <=, increment, *, PG_SUM_RELATIVE_ERROR, sum, break, if, ==, k, MAXIMUM_PARTIAL_SUM_COUNT, throw, new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, =, ret, /, *, sum, FastMath, sqrt, *, 2, FastMath.PI, z, final, double, twoZ2, *, 2, z2, =, sum, 0, =, kTerm, 0, double, kTerm2, 0, for, =, k, 0, <, k, MAXIMUM_PARTIAL_SUM_COUNT, ++, k, =, kTerm, +, k, 0.5, =, kTerm2, *, kTerm, kTerm, =, increment, *, -, *, MathUtils.PI_SQUARED, kTerm2, z2, FastMath, exp, /, *, -, MathUtils.PI_SQUARED, kTerm2, twoZ2, +=, sum, increment, if, <, FastMath, abs, increment, *, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum, break, if, ==, k, MAXIMUM_PARTIAL_SUM_COUNT, throw, new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, final, double, sqrtHalfPi, FastMath, sqrt, /, FastMath.PI, 2, +=, ret, /, *, sum, sqrtHalfPi, *, 3, z4, sqrtN, final, double, z4Term, *, 2, z4, final, double, z6Term, *, 6, z6, =, z2Term, *, 5, z2, final, double, pi4, *, MathUtils.PI_SQUARED, MathUtils.PI_SQUARED, =, sum, 0, =, kTerm, 0, =, kTerm2, 0, for, =, k, 0, <, k, MAXIMUM_PARTIAL_SUM_COUNT, ++, k, =, kTerm, +, k, 0.5, =, kTerm2, *, kTerm, kTerm, =, increment, *, +, +, z6Term, z4Term, *, MathUtils.PI_SQUARED, -, z4Term, z2Term, kTerm2, *, pi4, -, 1, twoZ2, kTerm2, kTerm2, FastMath, exp, /, *, -, MathUtils.PI_SQUARED, kTerm2, twoZ2, +=, sum, increment, if, <, FastMath, abs, increment, *, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum, break, if, ==, k, MAXIMUM_PARTIAL_SUM_COUNT, throw, new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, double, sum2, 0, =, kTerm2, 0, for, =, k, 1, <, k, MAXIMUM_PARTIAL_SUM_COUNT, ++, k, =, kTerm2, *, k, k, =, increment, *, MathUtils.PI_SQUARED, kTerm2, FastMath, exp, /, *, -, MathUtils.PI_SQUARED, kTerm2, twoZ2, +=, sum2, increment, if, <, FastMath, abs, increment, *, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum2, break, if, ==, k, MAXIMUM_PARTIAL_SUM_COUNT, throw, new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, +=, ret, *, /, sqrtHalfPi, n, -, /, sum, *, 36, z2, z2, z2, z, /, sum2, *, 18, z2, z, final, double, pi6, *, pi4, MathUtils.PI_SQUARED, =, sum, 0, double, kTerm4, 0, double, kTerm6, 0, for, =, k, 0, <, k, MAXIMUM_PARTIAL_SUM_COUNT, ++, k, =, kTerm, +, k, 0.5, =, kTerm2, *, kTerm, kTerm, =, kTerm4, *, kTerm2, kTerm2, =, kTerm6, *, kTerm4, kTerm2, =, increment, *, -, -, +, +, *, pi6, kTerm6, -, 5, *, 30, z2, *, pi4, kTerm4, +, *, -, 60, z2, *, 212, z4, *, MathUtils.PI_SQUARED, kTerm2, -, *, 135, z4, *, 96, z6, *, 30, z6, *, 90, z8, FastMath, exp, /, *, -, MathUtils.PI_SQUARED, kTerm2, twoZ2, +=, sum, increment, if, <, FastMath, abs, increment, *, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum, break, if, ==, k, MAXIMUM_PARTIAL_SUM_COUNT, throw, new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, =, sum2, 0, for, =, k, 1, <, k, MAXIMUM_PARTIAL_SUM_COUNT, ++, k, =, kTerm2, *, k, k, =, kTerm4, *, kTerm2, kTerm2, =, increment, *, +, *, -, pi4, kTerm4, *, 3, MathUtils.PI_SQUARED, kTerm2, z2, FastMath, exp, /, *, -, MathUtils.PI_SQUARED, kTerm2, twoZ2, +=, sum2, increment, if, <, FastMath, abs, increment, *, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum2, break, if, ==, k, MAXIMUM_PARTIAL_SUM_COUNT, throw, new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, return, +, ret, *, /, sqrtHalfPi, *, sqrtN, n, +, /, sum, *, 3240, z6, z4, /, +, sum2, *, 108, z6]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:createExactH:double+int#[final, int, k, int, Math, ceil, *, n, d, final, int, m, -, *, 2, k, 1, final, double, hDouble, -, k, *, n, d, if, >=, hDouble, 1, throw, new, NumberIsTooLargeException, hDouble, 1.0, false, BigFraction, h, null, try, =, h, new, BigFraction, hDouble, 1.0e-20, 10000, catch, final, FractionConversionException, e1, try, =, h, new, BigFraction, hDouble, 1.0e-10, 10000, catch, final, FractionConversionException, e2, =, h, new, BigFraction, hDouble, 1.0e-5, 10000, final, BigFraction, Hdata, BigFraction, m, m, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, m, ++, j, if, <, +, -, i, j, 1, 0, =, Hdata, i, j, BigFraction.ZERO, =, Hdata, i, j, BigFraction.ONE, final, BigFraction, hPowers, BigFraction, m, =, hPowers, 0, h, for, int, i, 1, <, i, m, ++, i, =, hPowers, i, h, multiply, hPowers, -, i, 1, for, int, i, 0, <, i, m, ++, i, =, Hdata, i, 0, Hdata, i, 0, subtract, hPowers, i, =, Hdata, -, m, 1, i, Hdata, -, m, 1, i, subtract, hPowers, -, m, i, 1, if, ==, h, compareTo, BigFraction.ONE_HALF, 1, =, Hdata, -, m, 1, 0, Hdata, -, m, 1, 0, add, h, multiply, 2, subtract, 1, pow, m, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, +, i, 1, ++, j, if, >, +, -, i, j, 1, 0, for, int, g, 2, <=, g, +, -, i, j, 1, ++, g, =, Hdata, i, j, Hdata, i, j, divide, g, return, new, Array2DRowFieldMatrix, BigFraction, BigFractionField, getInstance, Hdata]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:createRoundedH:double+int#[final, int, k, int, Math, ceil, *, n, d, final, int, m, -, *, 2, k, 1, final, double, h, -, k, *, n, d, if, >=, h, 1, throw, new, NumberIsTooLargeException, h, 1.0, false, final, double, Hdata, double, m, m, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, m, ++, j, if, <, +, -, i, j, 1, 0, =, Hdata, i, j, 0, =, Hdata, i, j, 1, final, double, hPowers, double, m, =, hPowers, 0, h, for, int, i, 1, <, i, m, ++, i, =, hPowers, i, *, h, hPowers, -, i, 1, for, int, i, 0, <, i, m, ++, i, =, Hdata, i, 0, -, Hdata, i, 0, hPowers, i, -=, Hdata, -, m, 1, i, hPowers, -, m, i, 1, if, >, Double, compare, h, 0.5, 0, +=, Hdata, -, m, 1, 0, FastMath, pow, -, *, 2, h, 1, m, for, int, i, 0, <, i, m, ++, i, for, int, j, 0, <, j, +, i, 1, ++, j, if, >, +, -, i, j, 1, 0, for, int, g, 2, <=, g, +, -, i, j, 1, ++, g, /=, Hdata, i, j, g, return, MatrixUtils, createRealMatrix, Hdata]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:checkArray:double[]#[if, ==, array, null, throw, new, NullArgumentException, LocalizedFormats.NULL_NOT_ALLOWED, if, <, array.length, 2, throw, new, InsufficientDataException, LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, array.length, 2]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:ksSum:double+double+int#[if, ==, t, 0.0, return, 0.0, final, double, x, *, -, 2, t, t, int, sign, -, 1, long, i, 1, double, partialSum, 0.5d, double, delta, 1, while, &&, >, delta, tolerance, <, i, maxIterations, =, delta, FastMath, exp, *, x, i, i, +=, partialSum, *, sign, delta, *=, sign, -, 1, ++, i, if, ==, i, maxIterations, throw, new, TooManyIterationsException, maxIterations, return, *, partialSum, 2]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:calculateIntegralD:double+int+int+boolean#[final, double, tol, 1e-12, long, nm, *, n, long, m, long, upperBound, long, FastMath, ceil, *, -, d, tol, nm, long, lowerBound, long, FastMath, floor, *, +, d, tol, nm, if, &&, strict, ==, lowerBound, upperBound, return, +, upperBound, 1l, return, upperBound]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:exactP:double+int+int+boolean#[return, -, 1, /, n, m, n, m, n, calculateIntegralD, d, m, n, strict, strict, CombinatoricsUtils, binomialCoefficientDouble, +, n, m, m]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:approximateP:double+int+int#[final, double, dm, m, final, double, dn, n, return, -, 1, ksSum, *, d, FastMath, sqrt, /, *, dm, dn, +, dm, dn, KS_SUM_CAUCHY_CRITERION, MAXIMUM_PARTIAL_SUM_COUNT]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:fillBooleanArrayRandomlyWithFixedNumberTrueValues:boolean[]+int+RandomGenerator#[Arrays, fill, b, true, for, int, k, numberOfTrueValues, <, k, b.length, ++, k, final, int, r, rng, nextInt, +, k, 1, =, b, b, r, r, k, false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:monteCarloP:double+int+int+boolean+int#[return, integralMonteCarloP, calculateIntegralD, d, n, m, strict, n, m, iterations]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:integralMonteCarloP:long+int+int+int#[final, int, nn, FastMath, max, n, m, final, int, mm, FastMath, min, n, m, final, int, sum, +, nn, mm, int, tail, 0, final, boolean, b, boolean, sum, for, int, i, 0, <, i, iterations, ++, i, fillBooleanArrayRandomlyWithFixedNumberTrueValues, b, nn, rng, long, curD, 0l, for, int, j, 0, <, j, b.length, ++, j, if, b, j, +=, curD, mm, if, >=, curD, d, ++, tail, break, -=, curD, nn, if, <=, curD, -, d, ++, tail, break, return, /, double, tail, iterations]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:fixTies:double[]+double[]#[final, double, values, MathArrays, unique, MathArrays, concatenate, x, y, if, ==, values.length, +, x.length, y.length, return, double, minDelta, 1, double, prev, values, 0, double, delta, 1, for, int, i, 1, <, i, values.length, ++, i, =, delta, -, prev, values, i, if, <, delta, minDelta, =, minDelta, delta, =, prev, values, i, /=, minDelta, 2, final, RealDistribution, dist, new, UniformRealDistribution, new, JDKRandomGenerator, 100, -, minDelta, minDelta, int, ct, 0, boolean, ties, true, do, jitter, x, dist, jitter, y, dist, =, ties, hasTies, x, y, ++, ct, &&, ties, <, ct, 1000, if, ties, throw, new, MathInternalError]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:hasTies:double[]+double[]#[final, HashSet, Double, values, new, HashSet, Double, for, int, i, 0, <, i, x.length, ++, i, if, !, values, add, x, i, return, true, for, int, i, 0, <, i, y.length, ++, i, if, !, values, add, y, i, return, true, return, false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:jitter:double[]+RealDistribution#[for, int, i, 0, <, i, data.length, ++, i, +=, data, i, dist, sample]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:c:int+int+int+int+long+boolean#[if, strict, return, <=, FastMath, abs, -, *, i, long, n, *, j, long, m, cmn, 1, 0, return, <, FastMath, abs, -, *, i, long, n, *, j, long, m, cmn, 1, 0]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:n:int+int+int+int+long+boolean#[final, double, lag, double, n, double, last, 0, for, int, k, 0, <, k, n, ++, k, =, lag, k, c, 0, +, k, 1, m, n, cnm, strict, for, int, k, 1, <=, k, i, ++, k, =, last, c, k, 0, m, n, cnm, strict, for, int, l, 1, <=, l, j, ++, l, =, lag, -, l, 1, *, c, k, l, m, n, cnm, strict, +, last, lag, -, l, 1, =, last, lag, -, l, 1, return, last]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:ensureDataConformance:double[]+double[]#[if, ||, ==, x, null, ==, y, null, throw, new, NullArgumentException, if, ||, ==, x.length, 0, ==, y.length, 0, throw, new, NoDataException]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:concatenateSamples:double[]+double[]#[final, double, z, double, +, x.length, y.length, System, arraycopy, x, 0, z, 0, x.length, System, arraycopy, y, 0, z, x.length, y.length, return, z]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:mannWhitneyU:double[]+double[]#[ensureDataConformance, x, y, final, double, z, concatenateSamples, x, y, final, double, ranks, naturalRanking, rank, z, double, sumRankX, 0, for, int, i, 0, <, i, x.length, ++, i, +=, sumRankX, ranks, i, final, double, U1, -, sumRankX, /, *, long, x.length, +, x.length, 1, 2, final, double, U2, -, *, long, x.length, y.length, U1, return, FastMath, max, U1, U2]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:calculateAsymptoticPValue:double+int+int#[final, long, n1n2prod, *, long, n1, n2, final, double, EU, /, n1n2prod, 2.0, final, double, VarU, /, *, n1n2prod, +, n1, n2, 1, 12.0, final, double, z, /, -, Umin, EU, FastMath, sqrt, VarU, final, NormalDistribution, standardNormal, new, NormalDistribution, null, 0, 1, return, *, 2, standardNormal, cumulativeProbability, z]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:mannWhitneyUTest:double[]+double[]#[ensureDataConformance, x, y, final, double, Umax, mannWhitneyU, x, y, final, double, Umin, -, *, long, x.length, y.length, Umax, return, calculateAsymptoticPValue, Umin, x.length, y.length]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaFValue:Collection<double[]>#[AnovaStats, a, anovaStats, categoryData, return, a.F]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaPValue:Collection<double[]>#[final, AnovaStats, a, anovaStats, categoryData, final, FDistribution, fdist, new, FDistribution, null, a.dfbg, a.dfwg, return, -, 1.0, fdist, cumulativeProbability, a.F]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaPValue:Collection<SummaryStatistics>+boolean#[final, AnovaStats, a, anovaStats, categoryData, allowOneElementData, final, FDistribution, fdist, new, FDistribution, null, a.dfbg, a.dfwg, return, -, 1.0, fdist, cumulativeProbability, a.F]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaStats:Collection<double[]>#[MathUtils, checkNotNull, categoryData, final, Collection, SummaryStatistics, categoryDataSummaryStatistics, new, ArrayList, SummaryStatistics, categoryData, size, for, final, double, data, categoryData, final, SummaryStatistics, dataSummaryStatistics, new, SummaryStatistics, categoryDataSummaryStatistics, add, dataSummaryStatistics, for, final, double, val, data, dataSummaryStatistics, addValue, val, return, anovaStats, categoryDataSummaryStatistics, false]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaTest:Collection<double[]>+double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, return, <, anovaPValue, categoryData, alpha]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaStats:Collection<SummaryStatistics>+boolean#[MathUtils, checkNotNull, categoryData, if, !, allowOneElementData, if, <, categoryData, size, 2, throw, new, DimensionMismatchException, LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED, categoryData, size, 2, for, final, SummaryStatistics, array, categoryData, if, <=, array, getN, 1, throw, new, DimensionMismatchException, LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, int, array, getN, 2, int, dfwg, 0, double, sswg, 0, double, totsum, 0, double, totsumsq, 0, int, totnum, 0, for, final, SummaryStatistics, data, categoryData, final, double, sum, data, getSum, final, double, sumsq, data, getSumsq, final, int, num, int, data, getN, +=, totnum, num, +=, totsum, sum, +=, totsumsq, sumsq, +=, dfwg, -, num, 1, final, double, ss, -, sumsq, /, *, sum, sum, num, +=, sswg, ss, final, double, sst, -, totsumsq, /, *, totsum, totsum, totnum, final, double, ssbg, -, sst, sswg, final, int, dfbg, -, categoryData, size, 1, final, double, msbg, /, ssbg, dfbg, final, double, mswg, /, sswg, dfwg, final, double, F, /, msbg, mswg, return, new, AnovaStats, dfbg, dfwg, F]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticT:double[]+double[]#[return, T_TEST, homoscedasticT, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticT:StatisticalSummary+StatisticalSummary#[return, T_TEST, homoscedasticT, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticTTest:double[]+double[]+double#[return, T_TEST, homoscedasticTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticTTest:double[]+double[]#[return, T_TEST, homoscedasticTTest, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticTTest:StatisticalSummary+StatisticalSummary#[return, T_TEST, homoscedasticTTest, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:pairedT:double[]+double[]#[return, T_TEST, pairedT, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:pairedTTest:double[]+double[]+double#[return, T_TEST, pairedTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:pairedTTest:double[]+double[]#[return, T_TEST, pairedTTest, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:t:double+double[]#[return, T_TEST, t, mu, observed]
org.apache.commons.math4.stat.inference:TestUtils:t:double+StatisticalSummary#[return, T_TEST, t, mu, sampleStats]
org.apache.commons.math4.stat.inference:TestUtils:t:double[]+double[]#[return, T_TEST, t, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:t:StatisticalSummary+StatisticalSummary#[return, T_TEST, t, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+double[]+double#[return, T_TEST, tTest, mu, sample, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+double[]#[return, T_TEST, tTest, mu, sample]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+StatisticalSummary+double#[return, T_TEST, tTest, mu, sampleStats, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+StatisticalSummary#[return, T_TEST, tTest, mu, sampleStats]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double[]+double[]+double#[return, T_TEST, tTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double[]+double[]#[return, T_TEST, tTest, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:tTest:StatisticalSummary+StatisticalSummary+double#[return, T_TEST, tTest, sampleStats1, sampleStats2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:StatisticalSummary+StatisticalSummary#[return, T_TEST, tTest, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:chiSquare:double[]+long[]#[return, CHI_SQUARE_TEST, chiSquare, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:chiSquare:long[][]#[return, CHI_SQUARE_TEST, chiSquare, counts]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:double[]+long[]+double#[return, CHI_SQUARE_TEST, chiSquareTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:double[]+long[]#[return, CHI_SQUARE_TEST, chiSquareTest, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:long[][]+double#[return, CHI_SQUARE_TEST, chiSquareTest, counts, alpha]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:long[][]#[return, CHI_SQUARE_TEST, chiSquareTest, counts]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareDataSetsComparison:long[]+long[]#[return, CHI_SQUARE_TEST, chiSquareDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTestDataSetsComparison:long[]+long[]#[return, CHI_SQUARE_TEST, chiSquareTestDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTestDataSetsComparison:long[]+long[]+double#[return, CHI_SQUARE_TEST, chiSquareTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:oneWayAnovaFValue:Collection<double[]>#[return, ONE_WAY_ANANOVA, anovaFValue, categoryData]
org.apache.commons.math4.stat.inference:TestUtils:oneWayAnovaPValue:Collection<double[]>#[return, ONE_WAY_ANANOVA, anovaPValue, categoryData]
org.apache.commons.math4.stat.inference:TestUtils:oneWayAnovaTest:Collection<double[]>+double#[return, ONE_WAY_ANANOVA, anovaTest, categoryData, alpha]
org.apache.commons.math4.stat.inference:TestUtils:g:double[]+long[]#[return, G_TEST, g, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:gTest:double[]+long[]#[return, G_TEST, gTest, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:gTestIntrinsic:double[]+long[]#[return, G_TEST, gTestIntrinsic, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:gTest:double[]+long[]+double#[return, G_TEST, gTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:TestUtils:gDataSetsComparison:long[]+long[]#[return, G_TEST, gDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:rootLogLikelihoodRatio:long+long+long+long#[return, G_TEST, rootLogLikelihoodRatio, k11, k12, k21, k22]
org.apache.commons.math4.stat.inference:TestUtils:gTestDataSetsComparison:long[]+long[]#[return, G_TEST, gTestDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:gTestDataSetsComparison:long[]+long[]+double#[return, G_TEST, gTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovStatistic:RealDistribution+double[]#[return, KS_TEST, kolmogorovSmirnovStatistic, dist, data]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:RealDistribution+double[]#[return, KS_TEST, kolmogorovSmirnovTest, dist, data]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:RealDistribution+double[]+boolean#[return, KS_TEST, kolmogorovSmirnovTest, dist, data, strict]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:RealDistribution+double[]+double#[return, KS_TEST, kolmogorovSmirnovTest, dist, data, alpha]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovStatistic:double[]+double[]#[return, KS_TEST, kolmogorovSmirnovStatistic, x, y]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:double[]+double[]#[return, KS_TEST, kolmogorovSmirnovTest, x, y]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:double[]+double[]+boolean#[return, KS_TEST, kolmogorovSmirnovTest, x, y, strict]
org.apache.commons.math4.stat.inference:TestUtils:exactP:double+int+int+boolean#[return, KS_TEST, exactP, d, n, m, strict]
org.apache.commons.math4.stat.inference:TestUtils:approximateP:double+int+int#[return, KS_TEST, approximateP, d, n, m]
org.apache.commons.math4.stat.inference:TestUtils:monteCarloP:double+int+int+boolean+int#[return, KS_TEST, monteCarloP, d, n, m, strict, iterations]
org.apache.commons.math4.stat.inference:TTest:pairedT:double[]+double[]#[checkSampleData, sample1, checkSampleData, sample2, double, meanDifference, StatUtils, meanDifference, sample1, sample2, return, t, meanDifference, 0, StatUtils, varianceDifference, sample1, sample2, meanDifference, sample1.length]
org.apache.commons.math4.stat.inference:TTest:pairedTTest:double[]+double[]#[double, meanDifference, StatUtils, meanDifference, sample1, sample2, return, tTest, meanDifference, 0, StatUtils, varianceDifference, sample1, sample2, meanDifference, sample1.length]
org.apache.commons.math4.stat.inference:TTest:pairedTTest:double[]+double[]+double#[checkSignificanceLevel, alpha, return, <, pairedTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TTest:t:double+double[]#[checkSampleData, observed, return, t, StatUtils, mean, observed, mu, StatUtils, variance, observed, observed.length]
org.apache.commons.math4.stat.inference:TTest:t:double+StatisticalSummary#[checkSampleData, sampleStats, return, t, sampleStats, getMean, mu, sampleStats, getVariance, sampleStats, getN]
org.apache.commons.math4.stat.inference:TTest:homoscedasticT:double[]+double[]#[checkSampleData, sample1, checkSampleData, sample2, return, homoscedasticT, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:t:double[]+double[]#[checkSampleData, sample1, checkSampleData, sample2, return, t, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:t:StatisticalSummary+StatisticalSummary#[checkSampleData, sampleStats1, checkSampleData, sampleStats2, return, t, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:homoscedasticT:StatisticalSummary+StatisticalSummary#[checkSampleData, sampleStats1, checkSampleData, sampleStats2, return, homoscedasticT, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double[]#[checkSampleData, sample, return, tTest, StatUtils, mean, sample, mu, StatUtils, variance, sample, sample.length]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double[]+double#[checkSignificanceLevel, alpha, return, <, tTest, mu, sample, alpha]
org.apache.commons.math4.stat.inference:TTest:tTest:double+StatisticalSummary#[checkSampleData, sampleStats, return, tTest, sampleStats, getMean, mu, sampleStats, getVariance, sampleStats, getN]
org.apache.commons.math4.stat.inference:TTest:tTest:double+StatisticalSummary+double#[checkSignificanceLevel, alpha, return, <, tTest, mu, sampleStats, alpha]
org.apache.commons.math4.stat.inference:TTest:tTest:double[]+double[]#[checkSampleData, sample1, checkSampleData, sample2, return, tTest, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:double[]+double[]#[checkSampleData, sample1, checkSampleData, sample2, return, homoscedasticTTest, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:tTest:double[]+double[]+double#[checkSignificanceLevel, alpha, return, <, tTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:double[]+double[]+double#[checkSignificanceLevel, alpha, return, <, homoscedasticTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TTest:tTest:StatisticalSummary+StatisticalSummary#[checkSampleData, sampleStats1, checkSampleData, sampleStats2, return, tTest, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:StatisticalSummary+StatisticalSummary#[checkSampleData, sampleStats1, checkSampleData, sampleStats2, return, homoscedasticTTest, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:tTest:StatisticalSummary+StatisticalSummary+double#[checkSignificanceLevel, alpha, return, <, tTest, sampleStats1, sampleStats2, alpha]
org.apache.commons.math4.stat.inference:TTest:df:double+double+double+double#[return, /, *, +, /, v1, n1, /, v2, n2, +, /, v1, n1, /, v2, n2, +, /, *, v1, v1, *, n1, n1, -, n1, 1d, /, *, v2, v2, *, n2, n2, -, n2, 1d]
org.apache.commons.math4.stat.inference:TTest:t:double+double+double+double#[return, /, -, m, mu, FastMath, sqrt, /, v, n]
org.apache.commons.math4.stat.inference:TTest:t:double+double+double+double+double+double#[return, /, -, m1, m2, FastMath, sqrt, +, /, v1, n1, /, v2, n2]
org.apache.commons.math4.stat.inference:TTest:homoscedasticT:double+double+double+double+double+double#[final, double, pooledVariance, /, +, *, -, n1, 1, v1, *, -, n2, 1, v2, -, +, n1, n2, 2, return, /, -, m1, m2, FastMath, sqrt, *, pooledVariance, +, /, 1d, n1, /, 1d, n2]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double+double+double#[final, double, t, FastMath, abs, t, m, mu, v, n, final, TDistribution, distribution, new, TDistribution, null, -, n, 1, return, *, 2.0, distribution, cumulativeProbability, -, t]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double+double+double+double+double#[final, double, t, FastMath, abs, t, m1, m2, v1, v2, n1, n2, final, double, degreesOfFreedom, df, v1, v2, n1, n2, final, TDistribution, distribution, new, TDistribution, null, degreesOfFreedom, return, *, 2.0, distribution, cumulativeProbability, -, t]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:double+double+double+double+double+double#[final, double, t, FastMath, abs, homoscedasticT, m1, m2, v1, v2, n1, n2, final, double, degreesOfFreedom, -, +, n1, n2, 2, final, TDistribution, distribution, new, TDistribution, null, degreesOfFreedom, return, *, 2.0, distribution, cumulativeProbability, -, t]
org.apache.commons.math4.stat.inference:TTest:checkSignificanceLevel:double#[if, ||, <=, alpha, 0, >, alpha, 0.5, throw, new, OutOfRangeException, LocalizedFormats.SIGNIFICANCE_LEVEL, alpha, 0.0, 0.5]
org.apache.commons.math4.stat.inference:TTest:checkSampleData:double[]#[if, ==, data, null, throw, new, NullArgumentException, if, <, data.length, 2, throw, new, NumberIsTooSmallException, LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC, data.length, 2, true]
org.apache.commons.math4.stat.inference:TTest:checkSampleData:StatisticalSummary#[if, ==, stat, null, throw, new, NullArgumentException, if, <, stat, getN, 2, throw, new, NumberIsTooSmallException, LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC, stat, getN, 2, true]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:ensureDataConformance:double[]+double[]#[if, ||, ==, x, null, ==, y, null, throw, new, NullArgumentException, if, ||, ==, x.length, 0, ==, y.length, 0, throw, new, NoDataException, if, !=, y.length, x.length, throw, new, DimensionMismatchException, y.length, x.length]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateDifferences:double[]+double[]#[final, double, z, double, x.length, for, int, i, 0, <, i, x.length, ++, i, =, z, i, -, y, i, x, i, return, z]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateAbsoluteDifferences:double[]#[if, ==, z, null, throw, new, NullArgumentException, if, ==, z.length, 0, throw, new, NoDataException, final, double, zAbs, double, z.length, for, int, i, 0, <, i, z.length, ++, i, =, zAbs, i, FastMath, abs, z, i, return, zAbs]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:wilcoxonSignedRank:double[]+double[]#[ensureDataConformance, x, y, final, double, z, calculateDifferences, x, y, final, double, zAbs, calculateAbsoluteDifferences, z, final, double, ranks, naturalRanking, rank, zAbs, double, Wplus, 0, for, int, i, 0, <, i, z.length, ++, i, if, >, z, i, 0, +=, Wplus, ranks, i, final, int, N, x.length, final, double, Wminus, -, /, double, *, N, +, N, 1, 2.0, Wplus, return, FastMath, max, Wplus, Wminus]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateExactPValue:double+int#[final, int, m, <<, 1, N, int, largerRankSums, 0, for, int, i, 0, <, i, m, ++, i, int, rankSum, 0, for, int, j, 0, <, j, N, ++, j, if, ==, &, >>, i, j, 1, 1, +=, rankSum, +, j, 1, if, >=, rankSum, Wmax, ++, largerRankSums, return, /, *, 2, double, largerRankSums, double, m]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateAsymptoticPValue:double+int#[final, double, ES, /, double, *, N, +, N, 1, 4.0, final, double, VarS, *, ES, /, double, +, *, 2, N, 1, 6.0, final, double, z, /, -, Wmin, ES, 0.5, FastMath, sqrt, VarS, final, NormalDistribution, standardNormal, new, NormalDistribution, null, 0, 1, return, *, 2, standardNormal, cumulativeProbability, z]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:wilcoxonSignedRankTest:double[]+double[]+boolean#[ensureDataConformance, x, y, final, int, N, x.length, final, double, Wmax, wilcoxonSignedRank, x, y, if, &&, exactPValue, >, N, 30, throw, new, NumberIsTooLargeException, N, 30, true, if, exactPValue, return, calculateExactPValue, Wmax, N, final, double, Wmin, -, /, double, *, N, +, N, 1, 2.0, Wmax, return, calculateAsymptoticPValue, Wmin, N]
org.apache.commons.math4.stat.interval:AgrestiCoullInterval:createInterval:int+int+double#[IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, final, double, alpha, /, -, 1.0, confidenceLevel, 2, final, NormalDistribution, normalDistribution, new, NormalDistribution, final, double, z, normalDistribution, inverseCumulativeProbability, -, 1, alpha, final, double, zSquared, FastMath, pow, z, 2, final, double, modifiedNumberOfTrials, +, numberOfTrials, zSquared, final, double, modifiedSuccessesRatio, *, /, 1.0, modifiedNumberOfTrials, +, numberOfSuccesses, *, 0.5, zSquared, final, double, difference, *, z, FastMath, sqrt, *, *, /, 1.0, modifiedNumberOfTrials, modifiedSuccessesRatio, -, 1, modifiedSuccessesRatio, return, new, ConfidenceInterval, -, modifiedSuccessesRatio, difference, +, modifiedSuccessesRatio, difference, confidenceLevel]
org.apache.commons.math4.stat.interval:ClopperPearsonInterval:createInterval:int+int+double#[IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, double, lowerBound, 0, double, upperBound, 0, final, double, alpha, /, -, 1.0, confidenceLevel, 2.0, final, FDistribution, distributionLowerBound, new, FDistribution, *, 2, +, -, numberOfTrials, numberOfSuccesses, 1, *, 2, numberOfSuccesses, if, >, numberOfSuccesses, 0, final, double, fValueLowerBound, distributionLowerBound, inverseCumulativeProbability, -, 1, alpha, =, lowerBound, /, numberOfSuccesses, +, numberOfSuccesses, *, +, -, numberOfTrials, numberOfSuccesses, 1, fValueLowerBound, final, FDistribution, distributionUpperBound, new, FDistribution, *, 2, +, numberOfSuccesses, 1, *, 2, -, numberOfTrials, numberOfSuccesses, if, >, numberOfSuccesses, 0, final, double, fValueUpperBound, distributionUpperBound, inverseCumulativeProbability, -, 1, alpha, =, upperBound, /, *, +, numberOfSuccesses, 1, fValueUpperBound, +, -, numberOfTrials, numberOfSuccesses, *, +, numberOfSuccesses, 1, fValueUpperBound, return, new, ConfidenceInterval, lowerBound, upperBound, confidenceLevel]
org.apache.commons.math4.stat.interval:ConfidenceInterval:getLowerBound:null#[return, lowerBound]
org.apache.commons.math4.stat.interval:ConfidenceInterval:getUpperBound:null#[return, upperBound]
org.apache.commons.math4.stat.interval:ConfidenceInterval:getConfidenceLevel:null#[return, confidenceLevel]
org.apache.commons.math4.stat.interval:ConfidenceInterval:toString:null#[return, +, "[", lowerBound, ";", upperBound, "] (confidence level:", confidenceLevel, ")"]
org.apache.commons.math4.stat.interval:ConfidenceInterval:checkParameters:double+double+double#[if, >=, lower, upper, throw, new, MathIllegalArgumentException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, if, ||, <=, confidence, 0, >=, confidence, 1, throw, new, MathIllegalArgumentException, LocalizedFormats.OUT_OF_BOUNDS_CONFIDENCE_LEVEL, confidence, 0, 1]
org.apache.commons.math4.stat.interval:IntervalUtils:getAgrestiCoullInterval:int+int+double#[return, AGRESTI_COULL, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:getClopperPearsonInterval:int+int+double#[return, CLOPPER_PEARSON, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:getNormalApproximationInterval:int+int+double#[return, NORMAL_APPROXIMATION, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:getWilsonScoreInterval:int+int+double#[return, WILSON_SCORE, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:checkParameters:int+int+double#[if, <=, numberOfTrials, 0, throw, new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_TRIALS, numberOfTrials, if, <, numberOfSuccesses, 0, throw, new, NotPositiveException, LocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES, numberOfSuccesses, if, >, numberOfSuccesses, numberOfTrials, throw, new, NumberIsTooLargeException, LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, numberOfTrials, true, if, ||, <=, confidenceLevel, 0, >=, confidenceLevel, 1, throw, new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_CONFIDENCE_LEVEL, confidenceLevel, 0, 1]
org.apache.commons.math4.stat.interval:NormalApproximationInterval:createInterval:int+int+double#[IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, final, double, mean, /, double, numberOfSuccesses, double, numberOfTrials, final, double, alpha, /, -, 1.0, confidenceLevel, 2, final, NormalDistribution, normalDistribution, new, NormalDistribution, final, double, difference, *, normalDistribution, inverseCumulativeProbability, -, 1, alpha, FastMath, sqrt, *, *, /, 1.0, numberOfTrials, mean, -, 1, mean, return, new, ConfidenceInterval, -, mean, difference, +, mean, difference, confidenceLevel]
org.apache.commons.math4.stat.interval:WilsonScoreInterval:createInterval:int+int+double#[IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, final, double, alpha, /, -, 1.0, confidenceLevel, 2, final, NormalDistribution, normalDistribution, new, NormalDistribution, final, double, z, normalDistribution, inverseCumulativeProbability, -, 1, alpha, final, double, zSquared, FastMath, pow, z, 2, final, double, mean, /, double, numberOfSuccesses, double, numberOfTrials, final, double, factor, /, 1.0, +, 1, *, /, 1.0, numberOfTrials, zSquared, final, double, modifiedSuccessRatio, +, mean, *, /, 1.0, *, 2, numberOfTrials, zSquared, final, double, difference, *, z, FastMath, sqrt, +, *, *, /, 1.0, numberOfTrials, mean, -, 1, mean, *, /, 1.0, *, 4, FastMath, pow, numberOfTrials, 2, zSquared, final, double, lowerBound, *, factor, -, modifiedSuccessRatio, difference, final, double, upperBound, *, factor, +, modifiedSuccessRatio, difference, return, new, ConfidenceInterval, lowerBound, upperBound, confidenceLevel]
org.apache.commons.math4.stat.ranking:NaturalRanking:getNanStrategy:null#[return, nanStrategy]
org.apache.commons.math4.stat.ranking:NaturalRanking:getTiesStrategy:null#[return, tiesStrategy]
org.apache.commons.math4.stat.ranking:NaturalRanking:rank:double[]#[IntDoublePair, ranks, IntDoublePair, data.length, for, int, i, 0, <, i, data.length, ++, i, =, ranks, i, new, IntDoublePair, data, i, i, List, Integer, nanPositions, null, switch, nanStrategy, case, MAXIMAL, recodeNaNs, ranks, Double.POSITIVE_INFINITY, break, case, MINIMAL, recodeNaNs, ranks, Double.NEGATIVE_INFINITY, break, case, REMOVED, =, ranks, removeNaNs, ranks, break, case, FIXED, =, nanPositions, getNanPositions, ranks, break, case, FAILED, =, nanPositions, getNanPositions, ranks, if, >, nanPositions, size, 0, throw, new, NotANumberException, break, default, throw, new, MathInternalError, Arrays, sort, ranks, double, out, double, ranks.length, int, pos, 1, =, out, ranks, 0, getPosition, pos, List, Integer, tiesTrace, new, ArrayList, Integer, tiesTrace, add, ranks, 0, getPosition, for, int, i, 1, <, i, ranks.length, ++, i, if, >, Double, compare, ranks, i, getValue, ranks, -, i, 1, getValue, 0, =, pos, +, i, 1, if, >, tiesTrace, size, 1, resolveTie, out, tiesTrace, =, tiesTrace, new, ArrayList, Integer, tiesTrace, add, ranks, i, getPosition, tiesTrace, add, ranks, i, getPosition, =, out, ranks, i, getPosition, pos, if, >, tiesTrace, size, 1, resolveTie, out, tiesTrace, if, ==, nanStrategy, NaNStrategy.FIXED, restoreNaNs, out, nanPositions, return, out]
org.apache.commons.math4.stat.ranking:NaturalRanking:removeNaNs:IntDoublePair[]#[if, !, containsNaNs, ranks, return, ranks, IntDoublePair, outRanks, IntDoublePair, ranks.length, int, j, 0, for, int, i, 0, <, i, ranks.length, ++, i, if, Double, isNaN, ranks, i, getValue, for, int, k, +, i, 1, <, k, ranks.length, ++, k, =, ranks, k, new, IntDoublePair, ranks, k, getValue, -, ranks, k, getPosition, 1, =, outRanks, j, new, IntDoublePair, ranks, i, getValue, ranks, i, getPosition, ++, j, IntDoublePair, returnRanks, IntDoublePair, j, System, arraycopy, outRanks, 0, returnRanks, 0, j, return, returnRanks]
org.apache.commons.math4.stat.ranking:NaturalRanking:recodeNaNs:IntDoublePair[]+double#[for, int, i, 0, <, i, ranks.length, ++, i, if, Double, isNaN, ranks, i, getValue, =, ranks, i, new, IntDoublePair, value, ranks, i, getPosition]
org.apache.commons.math4.stat.ranking:NaturalRanking:containsNaNs:IntDoublePair[]#[for, int, i, 0, <, i, ranks.length, ++, i, if, Double, isNaN, ranks, i, getValue, return, true, return, false]
org.apache.commons.math4.stat.ranking:NaturalRanking:resolveTie:double[]+List<Integer>#[final, double, c, ranks, tiesTrace, get, 0, final, int, length, tiesTrace, size, switch, tiesStrategy, case, AVERAGE, fill, ranks, tiesTrace, /, -, +, *, 2, c, length, 1, 2d, break, case, MAXIMUM, fill, ranks, tiesTrace, -, +, c, length, 1, break, case, MINIMUM, fill, ranks, tiesTrace, c, break, case, RANDOM, Iterator, Integer, iterator, tiesTrace, iterator, long, f, FastMath, round, c, while, iterator, hasNext, =, ranks, iterator, next, randomData, nextLong, f, -, +, f, length, 1, break, case, SEQUENTIAL, =, iterator, tiesTrace, iterator, =, f, FastMath, round, c, int, i, 0, while, iterator, hasNext, =, ranks, iterator, next, +, f, ++, i, break, default, throw, new, MathInternalError]
org.apache.commons.math4.stat.ranking:NaturalRanking:fill:double[]+List<Integer>+double#[Iterator, Integer, iterator, tiesTrace, iterator, while, iterator, hasNext, =, data, iterator, next, value]
org.apache.commons.math4.stat.ranking:NaturalRanking:restoreNaNs:double[]+List<Integer>#[if, ==, nanPositions, size, 0, return, Iterator, Integer, iterator, nanPositions, iterator, while, iterator, hasNext, =, ranks, iterator, next, intValue, Double.NaN]
org.apache.commons.math4.stat.ranking:NaturalRanking:getNanPositions:IntDoublePair[]#[ArrayList, Integer, out, new, ArrayList, Integer, for, int, i, 0, <, i, ranks.length, ++, i, if, Double, isNaN, ranks, i, getValue, out, add, Integer, valueOf, i, return, out]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:getX:null#[return, xMatrix]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:getY:null#[return, yVector]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:isNoIntercept:null#[return, noIntercept]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:setNoIntercept:boolean#[=, this, noIntercept, noIntercept]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:newSampleData:double[]+int+int#[if, ==, data, null, throw, new, NullArgumentException, if, !=, data.length, *, nobs, +, nvars, 1, throw, new, DimensionMismatchException, data.length, *, nobs, +, nvars, 1, if, <=, nobs, nvars, throw, new, InsufficientDataException, LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, nobs, +, nvars, 1, double, y, double, nobs, final, int, cols, noIntercept, nvars, +, nvars, 1, double, x, double, nobs, cols, int, pointer, 0, for, int, i, 0, <, i, nobs, ++, i, =, y, i, data, ++, pointer, if, !, noIntercept, =, x, i, 0, 1.0d, for, int, j, noIntercept, 0, 1, <, j, cols, ++, j, =, x, i, j, data, ++, pointer, =, this, xMatrix, new, Array2DRowRealMatrix, x, =, this, yVector, new, ArrayRealVector, y]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:newYSampleData:double[]#[if, ==, y, null, throw, new, NullArgumentException, if, ==, y.length, 0, throw, new, NoDataException, =, this, yVector, new, ArrayRealVector, y]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:newXSampleData:double[][]#[if, ==, x, null, throw, new, NullArgumentException, if, ==, x.length, 0, throw, new, NoDataException, if, noIntercept, =, this, xMatrix, new, Array2DRowRealMatrix, x, true, final, int, nVars, x, 0, length, final, double, xAug, double, x.length, +, nVars, 1, for, int, i, 0, <, i, x.length, ++, i, if, !=, x, i, length, nVars, throw, new, DimensionMismatchException, x, i, length, nVars, =, xAug, i, 0, 1.0d, System, arraycopy, x, i, 0, xAug, i, 1, nVars, =, this, xMatrix, new, Array2DRowRealMatrix, xAug, false]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:validateSampleData:double[][]+double[]#[if, ||, ==, x, null, ==, y, null, throw, new, NullArgumentException, if, !=, x.length, y.length, throw, new, DimensionMismatchException, y.length, x.length, if, ==, x.length, 0, throw, new, NoDataException, if, >, +, x, 0, length, 1, x.length, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, x.length, x, 0, length]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:validateCovarianceData:double[][]+double[][]#[if, !=, x.length, covariance.length, throw, new, DimensionMismatchException, x.length, covariance.length, if, &&, >, covariance.length, 0, !=, covariance.length, covariance, 0, length, throw, new, NonSquareMatrixException, covariance.length, covariance, 0, length]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionParameters:null#[RealVector, b, calculateBeta, return, b, toArray]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateResiduals:null#[RealVector, b, calculateBeta, RealVector, e, yVector, subtract, xMatrix, operate, b, return, e, toArray]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionParametersVariance:null#[return, calculateBetaVariance, getData]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionParametersStandardErrors:null#[double, betaVariance, estimateRegressionParametersVariance, double, sigma, calculateErrorVariance, int, length, betaVariance, 0, length, double, result, double, length, for, int, i, 0, <, i, length, ++, i, =, result, i, FastMath, sqrt, *, sigma, betaVariance, i, i, return, result]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressandVariance:null#[return, calculateYVariance]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateErrorVariance:null#[return, calculateErrorVariance]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionStandardError:null#[return, FastMath, sqrt, estimateErrorVariance]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:calculateYVariance:null#[return, new, Variance, evaluate, yVector, toArray]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:calculateErrorVariance:null#[RealVector, residuals, calculateResiduals, return, /, residuals, dotProduct, residuals, -, xMatrix, getRowDimension, xMatrix, getColumnDimension]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:calculateResiduals:null#[RealVector, b, calculateBeta, return, yVector, subtract, xMatrix, operate, b]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:newSampleData:double[]+double[][]+double[][]#[validateSampleData, x, y, newYSampleData, y, newXSampleData, x, validateCovarianceData, x, covariance, newCovarianceData, covariance]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:newCovarianceData:double[][]#[=, this, Omega, new, Array2DRowRealMatrix, omega, =, this, OmegaInverse, null]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:getOmegaInverse:null#[if, ==, OmegaInverse, null, =, OmegaInverse, new, LUDecomposition, Omega, getSolver, getInverse, return, OmegaInverse]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:calculateBeta:null#[RealMatrix, OI, getOmegaInverse, RealMatrix, XT, getX, transpose, RealMatrix, XTOIX, XT, multiply, OI, multiply, getX, RealMatrix, inverse, new, LUDecomposition, XTOIX, getSolver, getInverse, return, inverse, multiply, XT, multiply, OI, operate, getY]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:calculateBetaVariance:null#[RealMatrix, OI, getOmegaInverse, RealMatrix, XTOIX, getX, transpose, multiply, OI, multiply, getX, return, new, LUDecomposition, XTOIX, getSolver, getInverse]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:calculateErrorVariance:null#[RealVector, residuals, calculateResiduals, double, t, residuals, dotProduct, getOmegaInverse, operate, residuals, return, /, t, -, getX, getRowDimension, getX, getColumnDimension]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:hasIntercept:null#[return, this, hasIntercept]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getN:null#[return, this, nobs]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:addObservation:double[]+double#[if, ||, &&, !, this, hasIntercept, !=, x.length, nvars, &&, this, hasIntercept, !=, +, x.length, 1, nvars, throw, new, ModelSpecificationException, LocalizedFormats.INVALID_REGRESSION_OBSERVATION, x.length, nvars, if, !, this, hasIntercept, include, MathArrays, copyOf, x, x.length, 1.0, y, final, double, tmp, double, +, x.length, 1, System, arraycopy, x, 0, tmp, 1, x.length, =, tmp, 0, 1.0, include, tmp, 1.0, y, ++, nobs]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:addObservations:double[][]+double[]#[if, ||, ==, x, null, ==, y, null, !=, x.length, y.length, throw, new, ModelSpecificationException, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, ==, x, null, 0, x.length, ==, y, null, 0, y.length, if, ==, x.length, 0, throw, new, ModelSpecificationException, LocalizedFormats.NO_DATA, if, >, +, x, 0, length, 1, x.length, throw, new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, x.length, x, 0, length, for, int, i, 0, <, i, x.length, ++, i, addObservation, x, i, y, i]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:include:double[]+double+double#[int, nextr, 0, double, w, wi, double, y, yi, double, xi, double, di, double, wxi, double, dpi, double, xk, double, _w, =, this, rss_set, false, =, sumy, smartAdd, yi, sumy, =, sumsqy, smartAdd, sumsqy, *, yi, yi, for, int, i, 0, <, i, x.length, ++, i, if, ==, w, 0.0, return, =, xi, x, i, if, ==, xi, 0.0, +=, nextr, -, nvars, i, 1, continue, =, di, d, i, =, wxi, *, w, xi, =, _w, w, if, !=, di, 0.0, =, dpi, smartAdd, di, *, wxi, xi, final, double, tmp, /, *, wxi, xi, di, if, >, FastMath, abs, tmp, Precision.EPSILON, =, w, /, *, di, w, dpi, =, dpi, *, wxi, xi, =, w, 0.0, =, d, i, dpi, for, int, k, +, i, 1, <, k, nvars, ++, k, =, xk, x, k, =, x, k, smartAdd, xk, *, -, xi, r, nextr, if, !=, di, 0.0, =, r, nextr, /, smartAdd, *, di, r, nextr, *, *, _w, xi, xk, dpi, =, r, nextr, /, xk, xi, ++, nextr, =, xk, y, =, y, smartAdd, xk, *, -, xi, rhs, i, if, !=, di, 0.0, =, rhs, i, /, smartAdd, *, di, rhs, i, *, wxi, xk, dpi, =, rhs, i, /, xk, xi, =, sserr, smartAdd, sserr, *, w, y, y]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:smartAdd:double+double#[final, double, _a, FastMath, abs, a, final, double, _b, FastMath, abs, b, if, >, _a, _b, final, double, eps, *, _a, Precision.EPSILON, if, >, _b, eps, return, +, a, b, return, a, final, double, eps, *, _b, Precision.EPSILON, if, >, _a, eps, return, +, a, b, return, b]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:clear:null#[Arrays, fill, this, d, 0.0, Arrays, fill, this, rhs, 0.0, Arrays, fill, this, r, 0.0, Arrays, fill, this, tol, 0.0, Arrays, fill, this, rss, 0.0, Arrays, fill, this, work_tolset, 0.0, Arrays, fill, this, work_sing, 0.0, Arrays, fill, this, x_sing, 0.0, Arrays, fill, this, lindep, false, for, int, i, 0, <, i, nvars, ++, i, =, this, vorder, i, i, =, this, nobs, 0, =, this, sserr, 0.0, =, this, sumy, 0.0, =, this, sumsqy, 0.0, =, this, rss_set, false, =, this, tol_set, false]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:tolset:null#[int, pos, double, total, final, double, eps, this, epsilon, for, int, i, 0, <, i, nvars, ++, i, =, this, work_tolset, i, FastMath, sqrt, d, i, =, tol, 0, *, eps, this, work_tolset, 0, for, int, col, 1, <, col, nvars, ++, col, =, pos, -, col, 1, =, total, work_tolset, col, for, int, row, 0, <, row, col, ++, row, +=, total, *, FastMath, abs, r, pos, work_tolset, row, +=, pos, -, nvars, row, 2, =, tol, col, *, eps, total, =, tol_set, true]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regcf:int#[int, nextr, if, <, nreq, 1, throw, new, ModelSpecificationException, LocalizedFormats.NO_REGRESSORS, if, >, nreq, this, nvars, throw, new, ModelSpecificationException, LocalizedFormats.TOO_MANY_REGRESSORS, nreq, this, nvars, if, !, this, tol_set, tolset, final, double, ret, double, nreq, boolean, rankProblem, false, for, int, i, -, nreq, 1, >, i, -, 1, --, i, if, <, FastMath, sqrt, d, i, tol, i, =, ret, i, 0.0, =, d, i, 0.0, =, rankProblem, true, =, ret, i, rhs, i, =, nextr, /, *, i, -, -, +, nvars, nvars, i, 1, 2, for, int, j, +, i, 1, <, j, nreq, ++, j, =, ret, i, smartAdd, ret, i, *, -, r, nextr, ret, j, ++, nextr, if, rankProblem, for, int, i, 0, <, i, nreq, ++, i, if, this, lindep, i, =, ret, i, Double.NaN, return, ret]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:singcheck:null#[int, pos, for, int, i, 0, <, i, nvars, ++, i, =, work_sing, i, FastMath, sqrt, d, i, for, int, col, 0, <, col, nvars, ++, col, final, double, temp, tol, col, =, pos, -, col, 1, for, int, row, 0, <, row, -, col, 1, ++, row, if, <, *, FastMath, abs, r, pos, work_sing, row, temp, =, r, pos, 0.0, +=, pos, -, nvars, row, 2, =, lindep, col, false, if, <, work_sing, col, temp, =, lindep, col, true, if, <, col, -, nvars, 1, Arrays, fill, x_sing, 0.0, int, _pi, /, *, col, -, -, +, nvars, nvars, col, 1, 2, for, int, _xi, +, col, 1, <, _xi, nvars, ++, _xi, ++, _pi, =, x_sing, _xi, r, _pi, =, r, _pi, 0.0, final, double, y, rhs, col, final, double, weight, d, col, =, d, col, 0.0, =, rhs, col, 0.0, this, include, x_sing, weight, y, +=, sserr, *, d, col, rhs, col, rhs, col]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:ss:null#[double, total, sserr, =, rss, -, nvars, 1, sserr, for, int, i, -, nvars, 1, >, i, 0, --, i, +=, total, *, d, i, rhs, i, rhs, i, =, rss, -, i, 1, total, =, rss_set, true]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:cov:int#[if, <=, this, nobs, nreq, return, null, double, rnk, 0.0, for, int, i, 0, <, i, nreq, ++, i, if, !, this, lindep, i, +=, rnk, 1.0, final, double, var, /, rss, -, nreq, 1, -, nobs, rnk, final, double, rinv, double, /, *, nreq, -, nreq, 1, 2, inverse, rinv, nreq, final, double, covmat, double, /, *, nreq, +, nreq, 1, 2, Arrays, fill, covmat, Double.NaN, int, pos2, int, pos1, int, start, 0, double, total, 0, for, int, row, 0, <, row, nreq, ++, row, =, pos2, start, if, !, this, lindep, row, for, int, col, row, <, col, nreq, ++, col, if, !, this, lindep, col, =, pos1, -, +, start, col, row, if, ==, row, col, =, total, /, 1.0, d, col, =, total, /, rinv, -, pos1, 1, d, col, for, int, k, +, col, 1, <, k, nreq, ++, k, if, !, this, lindep, k, +=, total, /, *, rinv, pos1, rinv, pos2, d, k, ++, pos1, ++, pos2, =, covmat, +, /, *, +, col, 1, col, 2, row, *, total, var, +=, pos2, -, nreq, col, 1, +=, start, -, nreq, row, 1, return, covmat]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:inverse:double[]+int#[int, pos, -, /, *, nreq, -, nreq, 1, 2, 1, int, pos1, -, 1, int, pos2, -, 1, double, total, 0.0, Arrays, fill, rinv, Double.NaN, for, int, row, -, nreq, 1, >, row, 0, --, row, if, !, this, lindep, row, final, int, start, /, *, -, row, 1, -, +, nvars, nvars, row, 2, for, int, col, nreq, >, col, row, --, col, =, pos1, start, =, pos2, pos, =, total, 0.0, for, int, k, row, <, k, -, col, 1, ++, k, +=, pos2, -, nreq, k, 1, if, !, this, lindep, k, +=, total, *, -, r, pos1, rinv, pos2, ++, pos1, =, rinv, pos, -, total, r, pos1, --, pos, -=, pos, -, nreq, row]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getPartialCorrelations:int#[final, double, output, double, /, *, +, -, nvars, in, 1, -, nvars, in, 2, int, pos, int, pos1, int, pos2, final, int, rms_off, -, in, final, int, wrk_off, -, +, in, 1, final, double, rms, double, -, nvars, in, final, double, work, double, -, nvars, in, 1, double, sumxx, double, sumxy, double, sumyy, final, int, offXX, /, *, -, nvars, in, -, nvars, in, 1, 2, if, ||, <, in, -, 1, >=, in, nvars, return, null, final, int, nvm, -, nvars, 1, final, int, base_pos, -, r.length, /, *, -, nvm, in, +, -, nvm, in, 1, 2, if, >, d, in, 0.0, =, rms, +, in, rms_off, /, 1.0, FastMath, sqrt, d, in, for, int, col, +, in, 1, <, col, nvars, ++, col, =, pos, -, -, +, base_pos, col, 1, in, =, sumxx, d, col, for, int, row, in, <, row, col, ++, row, +=, sumxx, *, d, row, r, pos, r, pos, +=, pos, -, nvars, row, 2, if, >, sumxx, 0.0, =, rms, +, col, rms_off, /, 1.0, FastMath, sqrt, sumxx, =, rms, +, col, rms_off, 0.0, =, sumyy, sserr, for, int, row, in, <, row, nvars, ++, row, +=, sumyy, *, d, row, rhs, row, rhs, row, if, >, sumyy, 0.0, =, sumyy, /, 1.0, FastMath, sqrt, sumyy, =, pos, 0, for, int, col1, in, <, col1, nvars, ++, col1, =, sumxy, 0.0, Arrays, fill, work, 0.0, =, pos1, -, -, +, base_pos, col1, in, 1, for, int, row, in, <, row, col1, ++, row, =, pos2, +, pos1, 1, for, int, col2, +, col1, 1, <, col2, nvars, ++, col2, +=, work, +, col2, wrk_off, *, d, row, r, pos1, r, pos2, ++, pos2, +=, sumxy, *, d, row, r, pos1, rhs, row, +=, pos1, -, nvars, row, 2, =, pos2, +, pos1, 1, for, int, col2, +, col1, 1, <, col2, nvars, ++, col2, +=, work, +, col2, wrk_off, *, d, col1, r, pos2, ++, pos2, =, output, -, +, /, *, -, col2, 1, in, -, col2, in, 2, col1, in, *, work, +, col2, wrk_off, rms, +, col1, rms_off, rms, +, col2, rms_off, ++, pos, +=, sumxy, *, d, col1, rhs, col1, =, output, +, col1, rms_off, offXX, *, sumxy, rms, +, col1, rms_off, sumyy, return, output]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:vmove:int+int#[double, d1, double, d2, double, X, double, d1new, double, d2new, double, cbar, double, sbar, double, Y, int, first, int, inc, int, m1, int, m2, int, mp1, int, pos, boolean, bSkipTo40, false, if, ==, from, to, return, if, !, this, rss_set, ss, int, count, 0, if, <, from, to, =, first, from, =, inc, 1, =, count, -, to, from, =, first, -, from, 1, =, inc, -, 1, =, count, -, from, to, int, m, first, int, idx, 0, while, <, idx, count, =, m1, /, *, m, -, -, +, nvars, nvars, m, 1, 2, =, m2, -, -, +, m1, nvars, m, 1, =, mp1, +, m, 1, =, d1, d, m, =, d2, d, mp1, if, ||, >, d1, this, epsilon, >, d2, this, epsilon, =, X, r, m1, if, <, *, FastMath, abs, X, FastMath, sqrt, d1, tol, mp1, =, X, 0.0, if, ||, <, d1, this, epsilon, <, FastMath, abs, X, this, epsilon, =, d, m, d2, =, d, mp1, d1, =, r, m1, 0.0, for, int, col, +, m, 2, <, col, nvars, ++, col, ++, m1, =, X, r, m1, =, r, m1, r, m2, =, r, m2, X, ++, m2, =, X, rhs, m, =, rhs, m, rhs, mp1, =, rhs, mp1, X, =, bSkipTo40, true, if, <, d2, this, epsilon, =, d, m, *, d1, X, X, =, r, m1, /, 1.0, X, for, int, _i, +, m1, 1, <, _i, -, -, +, m1, nvars, m, 1, ++, _i, /=, r, _i, X, /=, rhs, m, X, =, bSkipTo40, true, if, !, bSkipTo40, =, d1new, +, d2, *, d1, X, X, =, cbar, /, d2, d1new, =, sbar, /, *, X, d1, d1new, =, d2new, *, d1, cbar, =, d, m, d1new, =, d, mp1, d2new, =, r, m1, sbar, for, int, col, +, m, 2, <, col, nvars, ++, col, ++, m1, =, Y, r, m1, =, r, m1, +, *, cbar, r, m2, *, sbar, Y, =, r, m2, -, Y, *, X, r, m2, ++, m2, =, Y, rhs, m, =, rhs, m, +, *, cbar, rhs, mp1, *, sbar, Y, =, rhs, mp1, -, Y, *, X, rhs, mp1, if, >, m, 0, =, pos, m, for, int, row, 0, <, row, m, ++, row, =, X, r, pos, =, r, pos, r, -, pos, 1, =, r, -, pos, 1, X, +=, pos, -, nvars, row, 2, =, m1, vorder, m, =, vorder, m, vorder, mp1, =, vorder, mp1, m1, =, X, tol, m, =, tol, m, tol, mp1, =, tol, mp1, X, =, rss, m, +, rss, mp1, *, d, mp1, rhs, mp1, rhs, mp1, +=, m, inc, ++, idx]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:reorderRegressors:int[]+int#[int, next, int, i, int, l, if, ||, <, list.length, 1, >, list.length, -, +, nvars, 1, pos1, return, -, 1, =, next, pos1, =, i, pos1, while, <, i, nvars, =, l, vorder, i, for, int, j, 0, <, j, list.length, ++, j, if, &&, ==, l, list, j, >, i, next, this, vmove, i, next, ++, next, if, >=, next, +, list.length, pos1, return, 0, break, ++, i, return, 0]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getDiagonalOfHatMatrix:double[]#[double, wk, double, this, nvars, int, pos, double, total, if, >, row_data.length, nvars, return, Double.NaN, double, xrow, if, this, hasIntercept, =, xrow, double, +, row_data.length, 1, =, xrow, 0, 1.0, System, arraycopy, row_data, 0, xrow, 1, row_data.length, =, xrow, row_data, double, hii, 0.0, for, int, col, 0, <, col, xrow.length, ++, col, if, <, FastMath, sqrt, d, col, tol, col, =, wk, col, 0.0, =, pos, -, col, 1, =, total, xrow, col, for, int, row, 0, <, row, col, ++, row, =, total, smartAdd, total, *, -, wk, row, r, pos, +=, pos, -, nvars, row, 2, =, wk, col, total, =, hii, smartAdd, hii, /, *, total, total, d, col, return, hii]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getOrderOfRegressors:null#[return, MathArrays, copyOf, vorder]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regress:null#[return, regress, this, nvars]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regress:int#[if, <=, this, nobs, numberOfRegressors, throw, new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, this, nobs, numberOfRegressors, if, >, numberOfRegressors, this, nvars, throw, new, ModelSpecificationException, LocalizedFormats.TOO_MANY_REGRESSORS, numberOfRegressors, this, nvars, tolset, singcheck, double, beta, this, regcf, numberOfRegressors, ss, double, cov, this, cov, numberOfRegressors, int, rnk, 0, for, int, i, 0, <, i, this, lindep, length, ++, i, if, !, this, lindep, i, ++, rnk, boolean, needsReorder, false, for, int, i, 0, <, i, numberOfRegressors, ++, i, if, !=, this, vorder, i, i, =, needsReorder, true, break, if, !, needsReorder, return, new, RegressionResults, beta, double, cov, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false, double, betaNew, double, beta.length, double, covNew, double, cov.length, int, newIndices, int, beta.length, for, int, i, 0, <, i, nvars, ++, i, for, int, j, 0, <, j, numberOfRegressors, ++, j, if, ==, this, vorder, j, i, =, betaNew, i, beta, j, =, newIndices, i, j, int, idx1, 0, int, idx2, int, _i, int, _j, for, int, i, 0, <, i, beta.length, ++, i, =, _i, newIndices, i, for, int, j, 0, <=, j, i, ++, j, ++, idx1, =, _j, newIndices, j, if, >, _i, _j, =, idx2, +, /, *, _i, +, _i, 1, 2, _j, =, idx2, +, /, *, _j, +, _j, 1, 2, _i, =, covNew, idx1, cov, idx2, return, new, RegressionResults, betaNew, double, covNew, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regress:int[]#[if, >, variablesToInclude.length, this, nvars, throw, new, ModelSpecificationException, LocalizedFormats.TOO_MANY_REGRESSORS, variablesToInclude.length, this, nvars, if, <=, this, nobs, this, nvars, throw, new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, this, nobs, this, nvars, Arrays, sort, variablesToInclude, int, iExclude, 0, for, int, i, 0, <, i, variablesToInclude.length, ++, i, if, >=, i, this, nvars, throw, new, ModelSpecificationException, LocalizedFormats.INDEX_LARGER_THAN_MAX, i, this, nvars, if, &&, >, i, 0, ==, variablesToInclude, i, variablesToInclude, -, i, 1, =, variablesToInclude, i, -, 1, ++, iExclude, int, series, if, >, iExclude, 0, int, j, 0, =, series, int, -, variablesToInclude.length, iExclude, for, int, i, 0, <, i, variablesToInclude.length, ++, i, if, >, variablesToInclude, i, -, 1, =, series, j, variablesToInclude, i, ++, j, =, series, variablesToInclude, reorderRegressors, series, 0, tolset, singcheck, double, beta, this, regcf, series.length, ss, double, cov, this, cov, series.length, int, rnk, 0, for, int, i, 0, <, i, this, lindep, length, ++, i, if, !, this, lindep, i, ++, rnk, boolean, needsReorder, false, for, int, i, 0, <, i, this, nvars, ++, i, if, !=, this, vorder, i, series, i, =, needsReorder, true, break, if, !, needsReorder, return, new, RegressionResults, beta, double, cov, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false, double, betaNew, double, beta.length, int, newIndices, int, beta.length, for, int, i, 0, <, i, series.length, ++, i, for, int, j, 0, <, j, this, vorder, length, ++, j, if, ==, this, vorder, j, series, i, =, betaNew, i, beta, j, =, newIndices, i, j, double, covNew, double, cov.length, int, idx1, 0, int, idx2, int, _i, int, _j, for, int, i, 0, <, i, beta.length, ++, i, =, _i, newIndices, i, for, int, j, 0, <=, j, i, ++, j, ++, idx1, =, _j, newIndices, j, if, >, _i, _j, =, idx2, +, /, *, _i, +, _i, 1, 2, _j, =, idx2, +, /, *, _j, +, _j, 1, 2, _i, =, covNew, idx1, cov, idx2, return, new, RegressionResults, betaNew, double, covNew, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:newSampleData:double[]+double[][]#[validateSampleData, x, y, newYSampleData, y, newXSampleData, x]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:newSampleData:double[]+int+int#[super, newSampleData, data, nobs, nvars, =, qr, new, QRDecomposition, getX, threshold]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateHat:null#[RealMatrix, Q, qr, getQ, final, int, p, qr, getR, getColumnDimension, final, int, n, Q, getColumnDimension, Array2DRowRealMatrix, augI, new, Array2DRowRealMatrix, n, n, double, augIData, augI, getDataRef, for, int, i, 0, <, i, n, ++, i, for, int, j, 0, <, j, n, ++, j, if, &&, ==, i, j, <, i, p, =, augIData, i, j, 1d, =, augIData, i, j, 0d, return, Q, multiply, augI, multiply, Q, transpose]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateTotalSumOfSquares:null#[if, isNoIntercept, return, StatUtils, sumSq, getY, toArray, return, new, SecondMoment, evaluate, getY, toArray]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateResidualSumOfSquares:null#[final, RealVector, residuals, calculateResiduals, return, residuals, dotProduct, residuals]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateRSquared:null#[return, -, 1, /, calculateResidualSumOfSquares, calculateTotalSumOfSquares]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateAdjustedRSquared:null#[final, double, n, getX, getRowDimension, if, isNoIntercept, return, -, 1, *, -, 1, calculateRSquared, /, n, -, n, getX, getColumnDimension, return, -, 1, /, *, calculateResidualSumOfSquares, -, n, 1, *, calculateTotalSumOfSquares, -, n, getX, getColumnDimension]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:newXSampleData:double[][]#[super, newXSampleData, x, =, qr, new, QRDecomposition, getX, threshold]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateBeta:null#[return, qr, getSolver, solve, getY]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateBetaVariance:null#[int, p, getX, getColumnDimension, RealMatrix, Raug, qr, getR, getSubMatrix, 0, -, p, 1, 0, -, p, 1, RealMatrix, Rinv, new, LUDecomposition, Raug, getSolver, getInverse, return, Rinv, multiply, Rinv, transpose]
org.apache.commons.math4.stat.regression:RegressionResults:getParameterEstimate:int#[if, ==, parameters, null, return, Double.NaN, if, ||, <, index, 0, >=, index, this, parameters, length, throw, new, OutOfRangeException, index, 0, -, this, parameters, length, 1, return, this, parameters, index]
org.apache.commons.math4.stat.regression:RegressionResults:getParameterEstimates:null#[if, ==, this, parameters, null, return, null, return, MathArrays, copyOf, parameters]
org.apache.commons.math4.stat.regression:RegressionResults:getStdErrorOfEstimate:int#[if, ==, parameters, null, return, Double.NaN, if, ||, <, index, 0, >=, index, this, parameters, length, throw, new, OutOfRangeException, index, 0, -, this, parameters, length, 1, double, var, this, getVcvElement, index, index, if, &&, !, Double, isNaN, var, >, var, Double.MIN_VALUE, return, FastMath, sqrt, var, return, Double.NaN]
org.apache.commons.math4.stat.regression:RegressionResults:getStdErrorOfEstimates:null#[if, ==, parameters, null, return, null, double, se, double, this, parameters, length, for, int, i, 0, <, i, this, parameters, length, ++, i, double, var, this, getVcvElement, i, i, if, &&, !, Double, isNaN, var, >, var, Double.MIN_VALUE, =, se, i, FastMath, sqrt, var, continue, =, se, i, Double.NaN, return, se]
org.apache.commons.math4.stat.regression:RegressionResults:getCovarianceOfParameters:int+int#[if, ==, parameters, null, return, Double.NaN, if, ||, <, i, 0, >=, i, this, parameters, length, throw, new, OutOfRangeException, i, 0, -, this, parameters, length, 1, if, ||, <, j, 0, >=, j, this, parameters, length, throw, new, OutOfRangeException, j, 0, -, this, parameters, length, 1, return, this, getVcvElement, i, j]
org.apache.commons.math4.stat.regression:RegressionResults:getNumberOfParameters:null#[if, ==, this, parameters, null, return, -, 1, return, this, parameters, length]
org.apache.commons.math4.stat.regression:RegressionResults:getN:null#[return, this, nobs]
org.apache.commons.math4.stat.regression:RegressionResults:getTotalSumSquares:null#[return, this, globalFitInfo, SST_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getRegressionSumSquares:null#[return, -, this, globalFitInfo, SST_IDX, this, globalFitInfo, SSE_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getErrorSumSquares:null#[return, this, globalFitInfo, SSE_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getMeanSquareError:null#[return, this, globalFitInfo, MSE_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getRSquared:null#[return, this, globalFitInfo, RSQ_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getAdjustedRSquared:null#[return, this, globalFitInfo, ADJRSQ_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:hasIntercept:null#[return, this, containsConstant]
org.apache.commons.math4.stat.regression:RegressionResults:getVcvElement:int+int#[if, this, isSymmetricVCD, if, >, this, varCovData, length, 1, if, ==, i, j, return, varCovData, i, i, if, >=, i, varCovData, j, length, return, varCovData, i, j, return, varCovData, j, i, if, >, i, j, return, varCovData, 0, +, /, *, +, i, 1, i, 2, j, return, varCovData, 0, +, /, *, +, j, 1, j, 2, i, return, this, varCovData, i, j]
org.apache.commons.math4.stat.regression:SimpleRegression:addData:double+double#[if, ==, n, 0, =, xbar, x, =, ybar, y, if, hasIntercept, final, double, fact1, +, 1.0, n, final, double, fact2, /, n, +, 1.0, n, final, double, dx, -, x, xbar, final, double, dy, -, y, ybar, +=, sumXX, *, dx, dx, fact2, +=, sumYY, *, dy, dy, fact2, +=, sumXY, *, dx, dy, fact2, +=, xbar, /, dx, fact1, +=, ybar, /, dy, fact1, if, !, hasIntercept, +=, sumXX, *, x, x, +=, sumYY, *, y, y, +=, sumXY, *, x, y, +=, sumX, x, +=, sumY, y, ++, n]
org.apache.commons.math4.stat.regression:SimpleRegression:append:SimpleRegression#[if, ==, n, 0, =, xbar, reg.xbar, =, ybar, reg.ybar, =, sumXX, reg.sumXX, =, sumYY, reg.sumYY, =, sumXY, reg.sumXY, if, hasIntercept, final, double, fact1, /, reg.n, double, +, reg.n, n, final, double, fact2, /, *, n, reg.n, double, +, reg.n, n, final, double, dx, -, reg.xbar, xbar, final, double, dy, -, reg.ybar, ybar, +=, sumXX, +, reg.sumXX, *, dx, dx, fact2, +=, sumYY, +, reg.sumYY, *, dy, dy, fact2, +=, sumXY, +, reg.sumXY, *, dx, dy, fact2, +=, xbar, *, dx, fact1, +=, ybar, *, dy, fact1, +=, sumXX, reg.sumXX, +=, sumYY, reg.sumYY, +=, sumXY, reg.sumXY, +=, sumX, reg.sumX, +=, sumY, reg.sumY, +=, n, reg.n]
org.apache.commons.math4.stat.regression:SimpleRegression:removeData:double+double#[if, >, n, 0, if, hasIntercept, final, double, fact1, -, n, 1.0, final, double, fact2, /, n, -, n, 1.0, final, double, dx, -, x, xbar, final, double, dy, -, y, ybar, -=, sumXX, *, dx, dx, fact2, -=, sumYY, *, dy, dy, fact2, -=, sumXY, *, dx, dy, fact2, -=, xbar, /, dx, fact1, -=, ybar, /, dy, fact1, final, double, fact1, -, n, 1.0, -=, sumXX, *, x, x, -=, sumYY, *, y, y, -=, sumXY, *, x, y, -=, xbar, /, x, fact1, -=, ybar, /, y, fact1, -=, sumX, x, -=, sumY, y, --, n]
org.apache.commons.math4.stat.regression:SimpleRegression:addData:double[][]#[for, int, i, 0, <, i, data.length, ++, i, if, <, data, i, length, 2, throw, new, ModelSpecificationException, LocalizedFormats.INVALID_REGRESSION_OBSERVATION, data, i, length, 2, addData, data, i, 0, data, i, 1]
org.apache.commons.math4.stat.regression:SimpleRegression:addObservation:double[]+double#[if, ||, ==, x, null, ==, x.length, 0, throw, new, ModelSpecificationException, LocalizedFormats.INVALID_REGRESSION_OBSERVATION, !=, x, null, x.length, 0, 1, addData, x, 0, y]
org.apache.commons.math4.stat.regression:SimpleRegression:addObservations:double[][]+double[]#[if, ||, ==, x, null, ==, y, null, !=, x.length, y.length, throw, new, ModelSpecificationException, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, ==, x, null, 0, x.length, ==, y, null, 0, y.length, boolean, obsOk, true, for, int, i, 0, <, i, x.length, ++, i, if, ||, ==, x, i, null, ==, x, i, length, 0, =, obsOk, false, if, !, obsOk, throw, new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, 0, 1, for, int, i, 0, <, i, x.length, ++, i, addData, x, i, 0, y, i]
org.apache.commons.math4.stat.regression:SimpleRegression:removeData:double[][]#[for, int, i, 0, &&, <, i, data.length, >, n, 0, ++, i, removeData, data, i, 0, data, i, 1]
org.apache.commons.math4.stat.regression:SimpleRegression:clear:null#[=, sumX, 0d, =, sumXX, 0d, =, sumY, 0d, =, sumYY, 0d, =, sumXY, 0d, =, n, 0]
org.apache.commons.math4.stat.regression:SimpleRegression:getN:null#[return, n]
org.apache.commons.math4.stat.regression:SimpleRegression:predict:double#[final, double, b1, getSlope, if, hasIntercept, return, +, getIntercept, b1, *, b1, x, return, *, b1, x]
org.apache.commons.math4.stat.regression:SimpleRegression:getIntercept:null#[return, hasIntercept, getIntercept, getSlope, 0.0]
org.apache.commons.math4.stat.regression:SimpleRegression:hasIntercept:null#[return, hasIntercept]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlope:null#[if, <, n, 2, return, Double.NaN, if, <, FastMath, abs, sumXX, *, 10, Double.MIN_VALUE, return, Double.NaN, return, /, sumXY, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSumSquaredErrors:null#[return, FastMath, max, 0d, -, sumYY, /, *, sumXY, sumXY, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getTotalSumSquares:null#[if, <, n, 2, return, Double.NaN, return, sumYY]
org.apache.commons.math4.stat.regression:SimpleRegression:getXSumSquares:null#[if, <, n, 2, return, Double.NaN, return, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSumOfCrossProducts:null#[return, sumXY]
org.apache.commons.math4.stat.regression:SimpleRegression:getRegressionSumSquares:null#[return, getRegressionSumSquares, getSlope]
org.apache.commons.math4.stat.regression:SimpleRegression:getMeanSquareError:null#[if, <, n, 3, return, Double.NaN, return, hasIntercept, /, getSumSquaredErrors, -, n, 2, /, getSumSquaredErrors, -, n, 1]
org.apache.commons.math4.stat.regression:SimpleRegression:getR:null#[double, b1, getSlope, double, result, FastMath, sqrt, getRSquare, if, <, b1, 0, =, result, -, result, return, result]
org.apache.commons.math4.stat.regression:SimpleRegression:getRSquare:null#[double, ssto, getTotalSumSquares, return, /, -, ssto, getSumSquaredErrors, ssto]
org.apache.commons.math4.stat.regression:SimpleRegression:getInterceptStdErr:null#[if, !, hasIntercept, return, Double.NaN, return, FastMath, sqrt, *, getMeanSquareError, +, /, 1d, n, /, *, xbar, xbar, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlopeStdErr:null#[return, FastMath, sqrt, /, getMeanSquareError, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlopeConfidenceInterval:null#[return, getSlopeConfidenceInterval, 0.05d]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlopeConfidenceInterval:double#[if, <, n, 3, return, Double.NaN, if, ||, >=, alpha, 1, <=, alpha, 0, throw, new, OutOfRangeException, LocalizedFormats.SIGNIFICANCE_LEVEL, alpha, 0, 1, TDistribution, distribution, new, TDistribution, -, n, 2, return, *, getSlopeStdErr, distribution, inverseCumulativeProbability, -, 1d, /, alpha, 2d]
org.apache.commons.math4.stat.regression:SimpleRegression:getSignificance:null#[if, <, n, 3, return, Double.NaN, TDistribution, distribution, new, TDistribution, -, n, 2, return, *, 2d, -, 1.0, distribution, cumulativeProbability, /, FastMath, abs, getSlope, getSlopeStdErr]
org.apache.commons.math4.stat.regression:SimpleRegression:getIntercept:double#[if, hasIntercept, return, /, -, sumY, *, slope, sumX, n, return, 0.0]
org.apache.commons.math4.stat.regression:SimpleRegression:getRegressionSumSquares:double#[return, *, slope, slope, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:regress:null#[if, hasIntercept, if, <, n, 3, throw, new, NoDataException, LocalizedFormats.NOT_ENOUGH_DATA_REGRESSION, if, >, FastMath, abs, sumXX, Precision.SAFE_MIN, final, double, params, double, getIntercept, getSlope, final, double, mse, getMeanSquareError, final, double, _syy, +, sumYY, /, *, sumY, sumY, n, final, double, vcv, double, *, mse, +, /, *, xbar, xbar, sumXX, /, 1.0, n, /, *, -, xbar, mse, sumXX, /, mse, sumXX, return, new, RegressionResults, params, double, vcv, true, n, 2, sumY, _syy, getSumSquaredErrors, true, false, final, double, params, double, /, sumY, n, Double.NaN, final, double, vcv, double, /, ybar, -, n, 1.0, Double.NaN, Double.NaN, return, new, RegressionResults, params, double, vcv, true, n, 1, sumY, sumYY, getSumSquaredErrors, true, false, if, <, n, 2, throw, new, NoDataException, LocalizedFormats.NOT_ENOUGH_DATA_REGRESSION, if, !, Double, isNaN, sumXX, final, double, vcv, double, /, getMeanSquareError, sumXX, final, double, params, double, /, sumXY, sumXX, return, new, RegressionResults, params, double, vcv, true, n, 1, sumY, sumYY, getSumSquaredErrors, false, false, final, double, vcv, double, Double.NaN, final, double, params, double, Double.NaN, return, new, RegressionResults, params, double, vcv, true, n, 1, Double.NaN, Double.NaN, Double.NaN, false, false]
org.apache.commons.math4.stat.regression:SimpleRegression:regress:int[]#[if, ||, ==, variablesToInclude, null, ==, variablesToInclude.length, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, if, ||, >, variablesToInclude.length, 2, &&, >, variablesToInclude.length, 1, !, hasIntercept, throw, new, ModelSpecificationException, LocalizedFormats.ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, &&, >, variablesToInclude.length, 1, !, hasIntercept, 1, 2, if, hasIntercept, if, ==, variablesToInclude.length, 2, if, ==, variablesToInclude, 0, 1, throw, new, ModelSpecificationException, LocalizedFormats.NOT_INCREASING_SEQUENCE, if, !=, variablesToInclude, 0, 0, throw, new, OutOfRangeException, variablesToInclude, 0, 0, 1, if, !=, variablesToInclude, 1, 1, throw, new, OutOfRangeException, variablesToInclude, 0, 0, 1, return, regress, if, &&, !=, variablesToInclude, 0, 1, !=, variablesToInclude, 0, 0, throw, new, OutOfRangeException, variablesToInclude, 0, 0, 1, final, double, _mean, /, *, sumY, sumY, n, final, double, _syy, +, sumYY, _mean, if, ==, variablesToInclude, 0, 0, final, double, vcv, double, /, sumYY, *, -, n, 1, n, final, double, params, double, ybar, return, new, RegressionResults, params, double, vcv, true, n, 1, sumY, +, _syy, _mean, sumYY, true, false, if, ==, variablesToInclude, 0, 1, final, double, _sxx, +, sumXX, /, *, sumX, sumX, n, final, double, _sxy, +, sumXY, /, *, sumX, sumY, n, final, double, _sse, FastMath, max, 0d, -, _syy, /, *, _sxy, _sxy, _sxx, final, double, _mse, /, _sse, -, n, 1, if, !, Double, isNaN, _sxx, final, double, vcv, double, /, _mse, _sxx, final, double, params, double, /, _sxy, _sxx, return, new, RegressionResults, params, double, vcv, true, n, 1, sumY, _syy, _sse, false, false, final, double, vcv, double, Double.NaN, final, double, params, double, Double.NaN, return, new, RegressionResults, params, double, vcv, true, n, 1, Double.NaN, Double.NaN, Double.NaN, false, false, if, !=, variablesToInclude, 0, 0, throw, new, OutOfRangeException, variablesToInclude, 0, 0, 0, return, regress, return, null]
org.apache.commons.math4.stat:StatUtils:sum:double[]#[return, SUM, evaluate, values]
org.apache.commons.math4.stat:StatUtils:sum:double[]+int+int#[return, SUM, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:sumSq:double[]#[return, SUM_OF_SQUARES, evaluate, values]
org.apache.commons.math4.stat:StatUtils:sumSq:double[]+int+int#[return, SUM_OF_SQUARES, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:product:double[]#[return, PRODUCT, evaluate, values]
org.apache.commons.math4.stat:StatUtils:product:double[]+int+int#[return, PRODUCT, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:sumLog:double[]#[return, SUM_OF_LOGS, evaluate, values]
org.apache.commons.math4.stat:StatUtils:sumLog:double[]+int+int#[return, SUM_OF_LOGS, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:mean:double[]#[return, MEAN, evaluate, values]
org.apache.commons.math4.stat:StatUtils:mean:double[]+int+int#[return, MEAN, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:geometricMean:double[]#[return, GEOMETRIC_MEAN, evaluate, values]
org.apache.commons.math4.stat:StatUtils:geometricMean:double[]+int+int#[return, GEOMETRIC_MEAN, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:variance:double[]#[return, VARIANCE, evaluate, values]
org.apache.commons.math4.stat:StatUtils:variance:double[]+int+int#[return, VARIANCE, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:variance:double[]+double+int+int#[return, VARIANCE, evaluate, values, mean, begin, length]
org.apache.commons.math4.stat:StatUtils:variance:double[]+double#[return, VARIANCE, evaluate, values, mean]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]#[return, new, Variance, false, evaluate, values]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]+int+int#[return, new, Variance, false, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]+double+int+int#[return, new, Variance, false, evaluate, values, mean, begin, length]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]+double#[return, new, Variance, false, evaluate, values, mean]
org.apache.commons.math4.stat:StatUtils:max:double[]#[return, MAX, evaluate, values]
org.apache.commons.math4.stat:StatUtils:max:double[]+int+int#[return, MAX, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:min:double[]#[return, MIN, evaluate, values]
org.apache.commons.math4.stat:StatUtils:min:double[]+int+int#[return, MIN, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:percentile:double[]+double#[return, PERCENTILE, evaluate, values, p]
org.apache.commons.math4.stat:StatUtils:percentile:double[]+int+int+double#[return, PERCENTILE, evaluate, values, begin, length, p]
org.apache.commons.math4.stat:StatUtils:sumDifference:double[]+double[]#[int, n, sample1.length, if, !=, n, sample2.length, throw, new, DimensionMismatchException, n, sample2.length, if, <=, n, 0, throw, new, NoDataException, LocalizedFormats.INSUFFICIENT_DIMENSION, double, result, 0, for, int, i, 0, <, i, n, ++, i, +=, result, -, sample1, i, sample2, i, return, result]
org.apache.commons.math4.stat:StatUtils:meanDifference:double[]+double[]#[return, /, sumDifference, sample1, sample2, sample1.length]
org.apache.commons.math4.stat:StatUtils:varianceDifference:double[]+double[]+double#[double, sum1, 0d, double, sum2, 0d, double, diff, 0d, int, n, sample1.length, if, !=, n, sample2.length, throw, new, DimensionMismatchException, n, sample2.length, if, <, n, 2, throw, new, NumberIsTooSmallException, n, 2, true, for, int, i, 0, <, i, n, ++, i, =, diff, -, sample1, i, sample2, i, +=, sum1, *, -, diff, meanDifference, -, diff, meanDifference, +=, sum2, -, diff, meanDifference, return, /, -, sum1, /, *, sum2, sum2, n, -, n, 1]
org.apache.commons.math4.stat:StatUtils:normalize:double[]#[DescriptiveStatistics, stats, new, DescriptiveStatistics, for, int, i, 0, <, i, sample.length, ++, i, stats, addValue, sample, i, double, mean, stats, getMean, double, standardDeviation, stats, getStandardDeviation, double, standardizedSample, double, sample.length, for, int, i, 0, <, i, sample.length, ++, i, =, standardizedSample, i, /, -, sample, i, mean, standardDeviation, return, standardizedSample]
org.apache.commons.math4.stat:StatUtils:mode:double[]#[if, ==, sample, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, return, getMode, sample, 0, sample.length]
org.apache.commons.math4.stat:StatUtils:mode:double[]+int+int#[if, ==, sample, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, if, <, begin, 0, throw, new, NotPositiveException, LocalizedFormats.START_POSITION, Integer, valueOf, begin, if, <, length, 0, throw, new, NotPositiveException, LocalizedFormats.LENGTH, Integer, valueOf, length, return, getMode, sample, begin, length]
org.apache.commons.math4.stat:StatUtils:getMode:double[]+int+int#[Frequency, freq, new, Frequency, for, int, i, begin, <, i, +, begin, length, ++, i, final, double, value, values, i, if, !, Double, isNaN, value, freq, addValue, Double, valueOf, value, List, Comparable, list, freq, getMode, double, modes, double, list, size, int, i, 0, for, Comparable, c, list, =, modes, ++, i, Double, c, doubleValue, return, modes]
org.apache.commons.math4.transform:FastCosineTransformer:transform:double[]+TransformType#[if, ==, type, TransformType.FORWARD, if, ==, normalization, DctNormalization.ORTHOGONAL_DCT_I, final, double, s, FastMath, sqrt, /, 2.0, -, f.length, 1, return, TransformUtils, scaleArray, fct, f, s, return, fct, f, final, double, s2, /, 2.0, -, f.length, 1, final, double, s1, if, ==, normalization, DctNormalization.ORTHOGONAL_DCT_I, =, s1, FastMath, sqrt, s2, =, s1, s2, return, TransformUtils, scaleArray, fct, f, s1]
org.apache.commons.math4.transform:FastCosineTransformer:transform:UnivariateFunction+double+double+int+TransformType#[final, double, data, FunctionUtils, sample, f, min, max, n, return, transform, data, type]
org.apache.commons.math4.transform:FastCosineTransformer:fct:double[]#[final, double, transformed, double, f.length, final, int, n, -, f.length, 1, if, !, ArithmeticUtils, isPowerOfTwo, n, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE, Integer, valueOf, f.length, if, ==, n, 1, =, transformed, 0, *, 0.5, +, f, 0, f, 1, =, transformed, 1, *, 0.5, -, f, 0, f, 1, return, transformed, final, double, x, double, n, =, x, 0, *, 0.5, +, f, 0, f, n, =, x, >>, n, 1, f, >>, n, 1, double, t1, *, 0.5, -, f, 0, f, n, for, int, i, 1, <, i, >>, n, 1, ++, i, final, double, a, *, 0.5, +, f, i, f, -, n, i, final, double, b, *, FastMath, sin, /, *, i, FastMath.PI, n, -, f, i, f, -, n, i, final, double, c, *, FastMath, cos, /, *, i, FastMath.PI, n, -, f, i, f, -, n, i, =, x, i, -, a, b, =, x, -, n, i, +, a, b, +=, t1, c, FastFourierTransformer, transformer, =, transformer, new, FastFourierTransformer, DftNormalization.STANDARD, Complex, y, transformer, transform, x, TransformType.FORWARD, =, transformed, 0, y, 0, getReal, =, transformed, 1, t1, for, int, i, 1, <, i, >>, n, 1, ++, i, =, transformed, *, 2, i, y, i, getReal, =, transformed, +, *, 2, i, 1, -, transformed, -, *, 2, i, 1, y, i, getImaginary, =, transformed, n, y, >>, n, 1, getReal, return, transformed]
org.apache.commons.math4.transform:FastFourierTransformer:transformInPlace:double[][]+DftNormalization+TransformType#[if, !=, dataRI.length, 2, throw, new, DimensionMismatchException, dataRI.length, 2, final, double, dataR, dataRI, 0, final, double, dataI, dataRI, 1, if, !=, dataR.length, dataI.length, throw, new, DimensionMismatchException, dataI.length, dataR.length, final, int, n, dataR.length, if, !, ArithmeticUtils, isPowerOfTwo, n, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING, Integer, valueOf, n, if, ==, n, 1, return, if, ==, n, 2, final, double, srcR0, dataR, 0, final, double, srcI0, dataI, 0, final, double, srcR1, dataR, 1, final, double, srcI1, dataI, 1, =, dataR, 0, +, srcR0, srcR1, =, dataI, 0, +, srcI0, srcI1, =, dataR, 1, -, srcR0, srcR1, =, dataI, 1, -, srcI0, srcI1, normalizeTransformedData, dataRI, normalization, type, return, bitReversalShuffle2, dataR, dataI, if, ==, type, TransformType.INVERSE, for, int, i0, 0, <, i0, n, +=, i0, 4, final, int, i1, +, i0, 1, final, int, i2, +, i0, 2, final, int, i3, +, i0, 3, final, double, srcR0, dataR, i0, final, double, srcI0, dataI, i0, final, double, srcR1, dataR, i2, final, double, srcI1, dataI, i2, final, double, srcR2, dataR, i1, final, double, srcI2, dataI, i1, final, double, srcR3, dataR, i3, final, double, srcI3, dataI, i3, =, dataR, i0, +, srcR0, srcR1, srcR2, srcR3, =, dataI, i0, +, srcI0, srcI1, srcI2, srcI3, =, dataR, i1, +, -, srcR0, srcR2, -, srcI3, srcI1, =, dataI, i1, +, -, srcI0, srcI2, -, srcR1, srcR3, =, dataR, i2, -, +, -, srcR0, srcR1, srcR2, srcR3, =, dataI, i2, -, +, -, srcI0, srcI1, srcI2, srcI3, =, dataR, i3, +, -, srcR0, srcR2, -, srcI1, srcI3, =, dataI, i3, +, -, srcI0, srcI2, -, srcR3, srcR1, for, int, i0, 0, <, i0, n, +=, i0, 4, final, int, i1, +, i0, 1, final, int, i2, +, i0, 2, final, int, i3, +, i0, 3, final, double, srcR0, dataR, i0, final, double, srcI0, dataI, i0, final, double, srcR1, dataR, i2, final, double, srcI1, dataI, i2, final, double, srcR2, dataR, i1, final, double, srcI2, dataI, i1, final, double, srcR3, dataR, i3, final, double, srcI3, dataI, i3, =, dataR, i0, +, srcR0, srcR1, srcR2, srcR3, =, dataI, i0, +, srcI0, srcI1, srcI2, srcI3, =, dataR, i1, +, -, srcR0, srcR2, -, srcI1, srcI3, =, dataI, i1, +, -, srcI0, srcI2, -, srcR3, srcR1, =, dataR, i2, -, +, -, srcR0, srcR1, srcR2, srcR3, =, dataI, i2, -, +, -, srcI0, srcI1, srcI2, srcI3, =, dataR, i3, +, -, srcR0, srcR2, -, srcI3, srcI1, =, dataI, i3, +, -, srcI0, srcI2, -, srcR1, srcR3, int, lastN0, 4, int, lastLogN0, 2, while, <, lastN0, n, int, n0, <<, lastN0, 1, int, logN0, +, lastLogN0, 1, double, wSubN0R, W_SUB_N_R, logN0, double, wSubN0I, W_SUB_N_I, logN0, if, ==, type, TransformType.INVERSE, =, wSubN0I, -, wSubN0I, for, int, destEvenStartIndex, 0, <, destEvenStartIndex, n, +=, destEvenStartIndex, n0, int, destOddStartIndex, +, destEvenStartIndex, lastN0, double, wSubN0ToRR, 1, double, wSubN0ToRI, 0, for, int, r, 0, <, r, lastN0, ++, r, double, grR, dataR, +, destEvenStartIndex, r, double, grI, dataI, +, destEvenStartIndex, r, double, hrR, dataR, +, destOddStartIndex, r, double, hrI, dataI, +, destOddStartIndex, r, =, dataR, +, destEvenStartIndex, r, -, +, grR, *, wSubN0ToRR, hrR, *, wSubN0ToRI, hrI, =, dataI, +, destEvenStartIndex, r, +, +, grI, *, wSubN0ToRR, hrI, *, wSubN0ToRI, hrR, =, dataR, +, destOddStartIndex, r, -, grR, -, *, wSubN0ToRR, hrR, *, wSubN0ToRI, hrI, =, dataI, +, destOddStartIndex, r, -, grI, +, *, wSubN0ToRR, hrI, *, wSubN0ToRI, hrR, double, nextWsubN0ToRR, -, *, wSubN0ToRR, wSubN0R, *, wSubN0ToRI, wSubN0I, double, nextWsubN0ToRI, +, *, wSubN0ToRR, wSubN0I, *, wSubN0ToRI, wSubN0R, =, wSubN0ToRR, nextWsubN0ToRR, =, wSubN0ToRI, nextWsubN0ToRI, =, lastN0, n0, =, lastLogN0, logN0, normalizeTransformedData, dataRI, normalization, type]
org.apache.commons.math4.transform:FastFourierTransformer:transform:double[]+TransformType#[final, double, dataRI, double, MathArrays, copyOf, f, f.length, double, f.length, transformInPlace, dataRI, normalization, type, return, TransformUtils, createComplexArray, dataRI]
org.apache.commons.math4.transform:FastFourierTransformer:transform:UnivariateFunction+double+double+int+TransformType#[final, double, data, FunctionUtils, sample, f, min, max, n, return, transform, data, type]
org.apache.commons.math4.transform:FastFourierTransformer:transform:Complex[]+TransformType#[final, double, dataRI, TransformUtils, createRealImaginaryArray, f, transformInPlace, dataRI, normalization, type, return, TransformUtils, createComplexArray, dataRI]
org.apache.commons.math4.transform:FastFourierTransformer:mdfft:Object+TransformType#[MultiDimensionalComplexMatrix, mdcm, MultiDimensionalComplexMatrix, new, MultiDimensionalComplexMatrix, mdca, clone, int, dimensionSize, mdcm, getDimensionSizes, for, int, i, 0, <, i, dimensionSize.length, ++, i, mdfft, mdcm, type, i, int, 0, return, mdcm, getArray]
org.apache.commons.math4.transform:FastFourierTransformer:mdfft:MultiDimensionalComplexMatrix+TransformType+int+int[]#[int, dimensionSize, mdcm, getDimensionSizes, if, ==, subVector.length, dimensionSize.length, Complex, temp, Complex, dimensionSize, d, for, int, i, 0, <, i, dimensionSize, d, ++, i, =, subVector, d, i, =, temp, i, mdcm, get, subVector, =, temp, transform, temp, type, for, int, i, 0, <, i, dimensionSize, d, ++, i, =, subVector, d, i, mdcm, set, temp, i, subVector, int, vector, int, +, subVector.length, 1, System, arraycopy, subVector, 0, vector, 0, subVector.length, if, ==, subVector.length, d, =, vector, d, 0, mdfft, mdcm, type, d, vector, for, int, i, 0, <, i, dimensionSize, subVector.length, ++, i, =, vector, subVector.length, i, mdfft, mdcm, type, d, vector]
org.apache.commons.math4.transform:FastHadamardTransformer:transform:double[]+TransformType#[if, ==, type, TransformType.FORWARD, return, fht, f, return, TransformUtils, scaleArray, fht, f, /, 1.0, f.length]
org.apache.commons.math4.transform:FastHadamardTransformer:transform:UnivariateFunction+double+double+int+TransformType#[return, transform, FunctionUtils, sample, f, min, max, n, type]
org.apache.commons.math4.transform:FastHadamardTransformer:transform:int[]#[return, fht, f]
org.apache.commons.math4.transform:FastHadamardTransformer:fht:double[]#[final, int, n, x.length, final, int, halfN, /, n, 2, if, !, ArithmeticUtils, isPowerOfTwo, n, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO, Integer, valueOf, n, double, yPrevious, double, n, double, yCurrent, x, clone, for, int, j, 1, <, j, n, <<=, j, 1, final, double, yTmp, yCurrent, =, yCurrent, yPrevious, =, yPrevious, yTmp, for, int, i, 0, <, i, halfN, ++, i, final, int, twoI, *, 2, i, =, yCurrent, i, +, yPrevious, twoI, yPrevious, +, twoI, 1, for, int, i, halfN, <, i, n, ++, i, final, int, twoI, *, 2, i, =, yCurrent, i, -, yPrevious, -, twoI, n, yPrevious, +, -, twoI, n, 1, return, yCurrent]
org.apache.commons.math4.transform:FastHadamardTransformer:fht:int[]#[final, int, n, x.length, final, int, halfN, /, n, 2, if, !, ArithmeticUtils, isPowerOfTwo, n, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO, Integer, valueOf, n, int, yPrevious, int, n, int, yCurrent, x, clone, for, int, j, 1, <, j, n, <<=, j, 1, final, int, yTmp, yCurrent, =, yCurrent, yPrevious, =, yPrevious, yTmp, for, int, i, 0, <, i, halfN, ++, i, final, int, twoI, *, 2, i, =, yCurrent, i, +, yPrevious, twoI, yPrevious, +, twoI, 1, for, int, i, halfN, <, i, n, ++, i, final, int, twoI, *, 2, i, =, yCurrent, i, -, yPrevious, -, twoI, n, yPrevious, +, -, twoI, n, 1, return, yCurrent]
org.apache.commons.math4.transform:FastSineTransformer:transform:double[]+TransformType#[if, ==, normalization, DstNormalization.ORTHOGONAL_DST_I, final, double, s, FastMath, sqrt, /, 2.0, f.length, return, TransformUtils, scaleArray, fst, f, s, if, ==, type, TransformType.FORWARD, return, fst, f, final, double, s, /, 2.0, f.length, return, TransformUtils, scaleArray, fst, f, s]
org.apache.commons.math4.transform:FastSineTransformer:transform:UnivariateFunction+double+double+int+TransformType#[final, double, data, FunctionUtils, sample, f, min, max, n, =, data, 0, 0.0, return, transform, data, type]
org.apache.commons.math4.transform:FastSineTransformer:fst:double[]#[final, double, transformed, double, f.length, if, !, ArithmeticUtils, isPowerOfTwo, f.length, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING, Integer, valueOf, f.length, if, !=, f, 0, 0.0, throw, new, MathIllegalArgumentException, LocalizedFormats.FIRST_ELEMENT_NOT_ZERO, Double, valueOf, f, 0, final, int, n, f.length, if, ==, n, 1, =, transformed, 0, 0.0, return, transformed, final, double, x, double, n, =, x, 0, 0.0, =, x, >>, n, 1, *, 2.0, f, >>, n, 1, for, int, i, 1, <, i, >>, n, 1, ++, i, final, double, a, *, FastMath, sin, /, *, i, FastMath.PI, n, +, f, i, f, -, n, i, final, double, b, *, 0.5, -, f, i, f, -, n, i, =, x, i, +, a, b, =, x, -, n, i, -, a, b, FastFourierTransformer, transformer, =, transformer, new, FastFourierTransformer, DftNormalization.STANDARD, Complex, y, transformer, transform, x, TransformType.FORWARD, =, transformed, 0, 0.0, =, transformed, 1, *, 0.5, y, 0, getReal, for, int, i, 1, <, i, >>, n, 1, ++, i, =, transformed, *, 2, i, -, y, i, getImaginary, =, transformed, +, *, 2, i, 1, +, y, i, getReal, transformed, -, *, 2, i, 1, return, transformed]
org.apache.commons.math4.transform:TransformUtils:scaleArray:double[]+double#[for, int, i, 0, <, i, f.length, ++, i, *=, f, i, d, return, f]
org.apache.commons.math4.transform:TransformUtils:scaleArray:Complex[]+double#[for, int, i, 0, <, i, f.length, ++, i, =, f, i, new, Complex, *, d, f, i, getReal, *, d, f, i, getImaginary, return, f]
org.apache.commons.math4.transform:TransformUtils:createRealImaginaryArray:Complex[]#[final, double, dataRI, double, 2, dataC.length, final, double, dataR, dataRI, 0, final, double, dataI, dataRI, 1, for, int, i, 0, <, i, dataC.length, ++, i, final, Complex, c, dataC, i, =, dataR, i, c, getReal, =, dataI, i, c, getImaginary, return, dataRI]
org.apache.commons.math4.transform:TransformUtils:createComplexArray:double[][]#[if, !=, dataRI.length, 2, throw, new, DimensionMismatchException, dataRI.length, 2, final, double, dataR, dataRI, 0, final, double, dataI, dataRI, 1, if, !=, dataR.length, dataI.length, throw, new, DimensionMismatchException, dataI.length, dataR.length, final, int, n, dataR.length, final, Complex, c, Complex, n, for, int, i, 0, <, i, n, ++, i, =, c, i, new, Complex, dataR, i, dataI, i, return, c]
org.apache.commons.math4.transform:TransformUtils:exactLog2:int#[int, index, Arrays, binarySearch, TransformUtils.POWERS_OF_TWO, n, if, <, index, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING, Integer, valueOf, n, return, index]
org.apache.commons.math4.util:ArithmeticUtils:addAndCheck:int+int#[long, s, +, long, x, long, y, if, ||, <, s, Integer.MIN_VALUE, >, s, Integer.MAX_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, x, y, return, int, s]
org.apache.commons.math4.util:ArithmeticUtils:addAndCheck:long+long#[return, addAndCheck, a, b, LocalizedFormats.OVERFLOW_IN_ADDITION]
org.apache.commons.math4.util:ArithmeticUtils:gcd:int+int#[int, a, p, int, b, q, if, ||, ==, a, 0, ==, b, 0, if, ||, ==, a, Integer.MIN_VALUE, ==, b, Integer.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q, return, FastMath, abs, +, a, b, long, al, a, long, bl, b, boolean, useLong, false, if, <, a, 0, if, ==, Integer.MIN_VALUE, a, =, useLong, true, =, a, -, a, =, al, -, al, if, <, b, 0, if, ==, Integer.MIN_VALUE, b, =, useLong, true, =, b, -, b, =, bl, -, bl, if, useLong, if, ==, al, bl, throw, new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q, long, blbu, bl, =, bl, al, =, al, %, blbu, al, if, ==, al, 0, if, >, bl, Integer.MAX_VALUE, throw, new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q, return, int, bl, =, blbu, bl, =, b, int, al, =, a, int, %, blbu, al, return, gcdPositive, a, b]
org.apache.commons.math4.util:ArithmeticUtils:gcdPositive:int+int#[if, ==, a, 0, return, b, if, ==, b, 0, return, a, final, int, aTwos, Integer, numberOfTrailingZeros, a, >>=, a, aTwos, final, int, bTwos, Integer, numberOfTrailingZeros, b, >>=, b, bTwos, final, int, shift, FastMath, min, aTwos, bTwos, while, !=, a, b, final, int, delta, -, a, b, =, b, Math, min, a, b, =, a, Math, abs, delta, >>=, a, Integer, numberOfTrailingZeros, a, return, <<, a, shift]
org.apache.commons.math4.util:ArithmeticUtils:gcd:long+long#[long, u, p, long, v, q, if, ||, ==, u, 0, ==, v, 0, if, ||, ==, u, Long.MIN_VALUE, ==, v, Long.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q, return, +, FastMath, abs, u, FastMath, abs, v, if, >, u, 0, =, u, -, u, if, >, v, 0, =, v, -, v, int, k, 0, while, &&, &&, ==, &, u, 1, 0, ==, &, v, 1, 0, <, k, 63, /=, u, 2, /=, v, 2, ++, k, if, ==, k, 63, throw, new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q, long, t, ==, &, u, 1, 1, v, -, /, u, 2, do, while, ==, &, t, 1, 0, /=, t, 2, if, >, t, 0, =, u, -, t, =, v, t, =, t, /, -, v, u, 2, !=, t, 0, return, *, -, u, <<, 1L, k]
org.apache.commons.math4.util:ArithmeticUtils:lcm:int+int#[if, ||, ==, a, 0, ==, b, 0, return, 0, int, lcm, FastMath, abs, ArithmeticUtils, mulAndCheck, /, a, gcd, a, b, b, if, ==, lcm, Integer.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b, return, lcm]
org.apache.commons.math4.util:ArithmeticUtils:lcm:long+long#[if, ||, ==, a, 0, ==, b, 0, return, 0, long, lcm, FastMath, abs, ArithmeticUtils, mulAndCheck, /, a, gcd, a, b, b, if, ==, lcm, Long.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b, return, lcm]
org.apache.commons.math4.util:ArithmeticUtils:mulAndCheck:int+int#[long, m, *, long, x, long, y, if, ||, <, m, Integer.MIN_VALUE, >, m, Integer.MAX_VALUE, throw, new, MathArithmeticException, return, int, m]
org.apache.commons.math4.util:ArithmeticUtils:mulAndCheck:long+long#[long, ret, if, >, a, b, =, ret, mulAndCheck, b, a, if, <, a, 0, if, <, b, 0, if, >=, a, /, Long.MAX_VALUE, b, =, ret, *, a, b, throw, new, MathArithmeticException, if, >, b, 0, if, <=, /, Long.MIN_VALUE, b, a, =, ret, *, a, b, throw, new, MathArithmeticException, =, ret, 0, if, >, a, 0, if, <=, a, /, Long.MAX_VALUE, b, =, ret, *, a, b, throw, new, MathArithmeticException, =, ret, 0, return, ret]
org.apache.commons.math4.util:ArithmeticUtils:subAndCheck:int+int#[long, s, -, long, x, long, y, if, ||, <, s, Integer.MIN_VALUE, >, s, Integer.MAX_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y, return, int, s]
org.apache.commons.math4.util:ArithmeticUtils:subAndCheck:long+long#[long, ret, if, ==, b, Long.MIN_VALUE, if, <, a, 0, =, ret, -, a, b, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, a, -, b, =, ret, addAndCheck, a, -, b, LocalizedFormats.OVERFLOW_IN_ADDITION, return, ret]
org.apache.commons.math4.util:ArithmeticUtils:pow:int+int#[if, <, e, 0, throw, new, NotPositiveException, LocalizedFormats.EXPONENT, e, try, int, exp, e, int, result, 1, int, k2p, k, while, true, if, !=, &, exp, 0x1, 0, =, result, mulAndCheck, result, k2p, >>=, exp, 1, if, ==, exp, 0, break, =, k2p, mulAndCheck, k2p, k2p, return, result, catch, MathArithmeticException, mae, mae, getContext, addMessage, LocalizedFormats.OVERFLOW, mae, getContext, addMessage, LocalizedFormats.BASE, k, mae, getContext, addMessage, LocalizedFormats.EXPONENT, e, throw, mae]
org.apache.commons.math4.util:ArithmeticUtils:pow:long+int#[if, <, e, 0, throw, new, NotPositiveException, LocalizedFormats.EXPONENT, e, try, int, exp, e, long, result, 1, long, k2p, k, while, true, if, !=, &, exp, 0x1, 0, =, result, mulAndCheck, result, k2p, >>=, exp, 1, if, ==, exp, 0, break, =, k2p, mulAndCheck, k2p, k2p, return, result, catch, MathArithmeticException, mae, mae, getContext, addMessage, LocalizedFormats.OVERFLOW, mae, getContext, addMessage, LocalizedFormats.BASE, k, mae, getContext, addMessage, LocalizedFormats.EXPONENT, e, throw, mae]
org.apache.commons.math4.util:ArithmeticUtils:pow:BigInteger+int#[if, <, e, 0, throw, new, NotPositiveException, LocalizedFormats.EXPONENT, e, return, k, pow, e]
org.apache.commons.math4.util:ArithmeticUtils:pow:BigInteger+long#[if, <, e, 0, throw, new, NotPositiveException, LocalizedFormats.EXPONENT, e, BigInteger, result, BigInteger.ONE, BigInteger, k2p, k, while, !=, e, 0, if, !=, &, e, 0x1, 0, =, result, result, multiply, k2p, =, k2p, k2p, multiply, k2p, >>=, e, 1, return, result]
org.apache.commons.math4.util:ArithmeticUtils:pow:BigInteger+BigInteger#[if, <, e, compareTo, BigInteger.ZERO, 0, throw, new, NotPositiveException, LocalizedFormats.EXPONENT, e, BigInteger, result, BigInteger.ONE, BigInteger, k2p, k, while, !, BigInteger.ZERO, equals, e, if, e, testBit, 0, =, result, result, multiply, k2p, =, k2p, k2p, multiply, k2p, =, e, e, shiftRight, 1, return, result]
org.apache.commons.math4.util:ArithmeticUtils:addAndCheck:long+long+Localizable#[final, long, result, +, a, b, if, !, ||, <, ^, a, b, 0, >=, ^, a, result, 0, throw, new, MathArithmeticException, pattern, a, b, return, result]
org.apache.commons.math4.util:ArithmeticUtils:isPowerOfTwo:long#[return, &&, >, n, 0, ==, &, n, -, n, 1, 0]
org.apache.commons.math4.util:ArithmeticUtils:remainderUnsigned:int+int#[if, >=, divisor, 0, if, >=, dividend, 0, return, %, dividend, divisor, int, q, <<, /, >>>, dividend, 1, divisor, 1, -=, dividend, *, q, divisor, if, ||, <, dividend, 0, >=, dividend, divisor, -=, dividend, divisor, return, dividend, return, ||, >=, dividend, 0, <, dividend, divisor, dividend, -, dividend, divisor]
org.apache.commons.math4.util:ArithmeticUtils:remainderUnsigned:long+long#[if, >=, divisor, 0L, if, >=, dividend, 0L, return, %, dividend, divisor, long, q, <<, /, >>>, dividend, 1, divisor, 1, -=, dividend, *, q, divisor, if, ||, <, dividend, 0L, >=, dividend, divisor, -=, dividend, divisor, return, dividend, return, ||, >=, dividend, 0L, <, dividend, divisor, dividend, -, dividend, divisor]
org.apache.commons.math4.util:ArithmeticUtils:divideUnsigned:int+int#[if, >=, divisor, 0, if, >=, dividend, 0, return, /, dividend, divisor, int, q, <<, /, >>>, dividend, 1, divisor, 1, -=, dividend, *, q, divisor, if, ||, <, dividend, 0L, >=, dividend, divisor, ++, q, return, q, return, ||, >=, dividend, 0, <, dividend, divisor, 0, 1]
org.apache.commons.math4.util:ArithmeticUtils:divideUnsigned:long+long#[if, >=, divisor, 0L, if, >=, dividend, 0L, return, /, dividend, divisor, long, q, <<, /, >>>, dividend, 1, divisor, 1, -=, dividend, *, q, divisor, if, ||, <, dividend, 0L, >=, dividend, divisor, ++, q, return, q, return, ||, >=, dividend, 0L, <, dividend, divisor, 0L, 1L]
org.apache.commons.math4.util:BigReal:getRoundingMode:null#[return, roundingMode]
org.apache.commons.math4.util:BigReal:setRoundingMode:RoundingMode#[=, this, roundingMode, roundingMode]
org.apache.commons.math4.util:BigReal:getScale:null#[return, scale]
org.apache.commons.math4.util:BigReal:setScale:int#[=, this, scale, scale]
org.apache.commons.math4.util:BigReal:add:BigReal#[return, new, BigReal, d, add, a.d]
org.apache.commons.math4.util:BigReal:subtract:BigReal#[return, new, BigReal, d, subtract, a.d]
org.apache.commons.math4.util:BigReal:negate:null#[return, new, BigReal, d, negate]
org.apache.commons.math4.util:BigReal:divide:BigReal#[try, return, new, BigReal, d, divide, a.d, scale, roundingMode, catch, ArithmeticException, e, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NOT_ALLOWED]
org.apache.commons.math4.util:BigReal:reciprocal:null#[try, return, new, BigReal, BigDecimal.ONE, divide, d, scale, roundingMode, catch, ArithmeticException, e, throw, new, MathArithmeticException, LocalizedFormats.ZERO_NOT_ALLOWED]
org.apache.commons.math4.util:BigReal:multiply:BigReal#[return, new, BigReal, d, multiply, a.d]
org.apache.commons.math4.util:BigReal:multiply:int#[return, new, BigReal, d, multiply, new, BigDecimal, n]
org.apache.commons.math4.util:BigReal:compareTo:BigReal#[return, d, compareTo, a.d]
org.apache.commons.math4.util:BigReal:doubleValue:null#[return, d, doubleValue]
org.apache.commons.math4.util:BigReal:bigDecimalValue:null#[return, d]
org.apache.commons.math4.util:BigReal:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, BigReal, return, d, equals, BigReal, other, d, return, false]
org.apache.commons.math4.util:BigReal:hashCode:null#[return, d, hashCode]
org.apache.commons.math4.util:BigReal:getField:null#[return, BigRealField, getInstance]
org.apache.commons.math4.util:BigRealField:getInstance:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.util:BigRealField:getOne:null#[return, BigReal.ONE]
org.apache.commons.math4.util:BigRealField:getZero:null#[return, BigReal.ZERO]
org.apache.commons.math4.util:BigRealField:getRuntimeClass:null#[return, BigReal]
org.apache.commons.math4.util:BigRealField:readResolve:null#[return, LazyHolder.INSTANCE]
org.apache.commons.math4.util:CentralPivotingStrategy:pivotIndex:double[]+int+int#[MathArrays, verifyValues, work, begin, -, end, begin, return, +, begin, /, -, end, begin, 2]
org.apache.commons.math4.util:Combinations:getN:null#[return, n]
org.apache.commons.math4.util:Combinations:getK:null#[return, k]
org.apache.commons.math4.util:Combinations:iterator:null#[if, ||, ==, k, 0, ==, k, n, return, new, SingletonIterator, MathArrays, natural, k, switch, iterationOrder, case, LEXICOGRAPHIC, return, new, LexicographicIterator, n, k, default, throw, new, MathInternalError]
org.apache.commons.math4.util:Combinations:comparator:null#[return, new, LexicographicComparator, n, k]
org.apache.commons.math4.util:CombinatoricsUtils:binomialCoefficient:int+int#[CombinatoricsUtils, checkBinomial, n, k, if, ||, ==, n, k, ==, k, 0, return, 1, if, ||, ==, k, 1, ==, k, -, n, 1, return, n, if, >, k, /, n, 2, return, binomialCoefficient, n, -, n, k, long, result, 1, if, <=, n, 61, int, i, +, -, n, k, 1, for, int, j, 1, <=, j, k, ++, j, =, result, /, *, result, i, j, ++, i, if, <=, n, 66, int, i, +, -, n, k, 1, for, int, j, 1, <=, j, k, ++, j, final, long, d, ArithmeticUtils, gcd, i, j, =, result, *, /, result, /, j, d, /, i, d, ++, i, int, i, +, -, n, k, 1, for, int, j, 1, <=, j, k, ++, j, final, long, d, ArithmeticUtils, gcd, i, j, =, result, ArithmeticUtils, mulAndCheck, /, result, /, j, d, /, i, d, ++, i, return, result]
org.apache.commons.math4.util:CombinatoricsUtils:binomialCoefficientDouble:int+int#[CombinatoricsUtils, checkBinomial, n, k, if, ||, ==, n, k, ==, k, 0, return, 1d, if, ||, ==, k, 1, ==, k, -, n, 1, return, n, if, >, k, /, n, 2, return, binomialCoefficientDouble, n, -, n, k, if, <, n, 67, return, binomialCoefficient, n, k, double, result, 1d, for, int, i, 1, <=, i, k, ++, i, *=, result, /, double, +, -, n, k, i, double, i, return, FastMath, floor, +, result, 0.5]
org.apache.commons.math4.util:CombinatoricsUtils:binomialCoefficientLog:int+int#[CombinatoricsUtils, checkBinomial, n, k, if, ||, ==, n, k, ==, k, 0, return, 0, if, ||, ==, k, 1, ==, k, -, n, 1, return, FastMath, log, n, if, <, n, 67, return, FastMath, log, binomialCoefficient, n, k, if, <, n, 1030, return, FastMath, log, binomialCoefficientDouble, n, k, if, >, k, /, n, 2, return, binomialCoefficientLog, n, -, n, k, double, logSum, 0, for, int, i, +, -, n, k, 1, <=, i, n, ++, i, +=, logSum, FastMath, log, i, for, int, i, 2, <=, i, k, ++, i, -=, logSum, FastMath, log, i, return, logSum]
org.apache.commons.math4.util:CombinatoricsUtils:factorial:int#[if, <, n, 0, throw, new, NotPositiveException, LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n, if, >, n, 20, throw, new, MathArithmeticException, return, FACTORIALS, n]
org.apache.commons.math4.util:CombinatoricsUtils:factorialDouble:int#[if, <, n, 0, throw, new, NotPositiveException, LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n, if, <, n, 21, return, FACTORIALS, n, return, FastMath, floor, +, FastMath, exp, CombinatoricsUtils, factorialLog, n, 0.5]
org.apache.commons.math4.util:CombinatoricsUtils:factorialLog:int#[return, FACTORIAL_LOG_NO_CACHE, value, n]
org.apache.commons.math4.util:CombinatoricsUtils:stirlingS2:int+int#[if, <, k, 0, throw, new, NotPositiveException, k, if, >, k, n, throw, new, NumberIsTooLargeException, k, n, true, long, stirlingS2, STIRLING_S2, get, if, ==, stirlingS2, null, final, int, maxIndex, 26, =, stirlingS2, long, maxIndex, =, stirlingS2, 0, long, 1l, for, int, i, 1, <, i, stirlingS2.length, ++, i, =, stirlingS2, i, long, +, i, 1, =, stirlingS2, i, 0, 0, =, stirlingS2, i, 1, 1, =, stirlingS2, i, i, 1, for, int, j, 2, <, j, i, ++, j, =, stirlingS2, i, j, +, *, j, stirlingS2, -, i, 1, j, stirlingS2, -, i, 1, -, j, 1, STIRLING_S2, compareAndSet, null, stirlingS2, if, <, n, stirlingS2.length, return, stirlingS2, n, k, if, ==, k, 0, return, 0, if, ||, ==, k, 1, ==, k, n, return, 1, if, ==, k, 2, return, -, <<, 1l, -, n, 1, 1l, if, ==, k, -, n, 1, return, binomialCoefficient, n, 2, long, sum, 0, long, sign, ==, &, k, 0x1, 0, 1, -, 1, for, int, j, 1, <=, j, k, ++, j, =, sign, -, sign, +=, sum, *, sign, binomialCoefficient, k, j, ArithmeticUtils, pow, j, n, if, <, sum, 0, throw, new, MathArithmeticException, LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, n, 0, -, stirlingS2.length, 1, return, /, sum, factorial, k]
org.apache.commons.math4.util:CombinatoricsUtils:combinationsIterator:int+int#[return, new, Combinations, n, k, iterator]
org.apache.commons.math4.util:CombinatoricsUtils:checkBinomial:int+int#[if, <, n, k, throw, new, NumberIsTooLargeException, LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, k, n, true, if, <, n, 0, throw, new, NotPositiveException, LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n]
org.apache.commons.math4.util:CompositeFormat:getDefaultNumberFormat:null#[return, getDefaultNumberFormat, Locale, getDefault]
org.apache.commons.math4.util:CompositeFormat:getDefaultNumberFormat:Locale#[final, NumberFormat, nf, NumberFormat, getInstance, locale, nf, setMaximumFractionDigits, 10, return, nf]
org.apache.commons.math4.util:CompositeFormat:parseAndIgnoreWhitespace:String+ParsePosition#[parseNextCharacter, source, pos, pos, setIndex, -, pos, getIndex, 1]
org.apache.commons.math4.util:CompositeFormat:parseNextCharacter:String+ParsePosition#[int, index, pos, getIndex, final, int, n, source, length, char, ret, 0, if, <, index, n, char, c, do, =, c, source, charAt, ++, index, &&, Character, isWhitespace, c, <, index, n, pos, setIndex, index, if, <, index, n, =, ret, c, return, ret]
org.apache.commons.math4.util:CompositeFormat:parseNumber:String+double+ParsePosition#[Number, ret, null, StringBuilder, sb, new, StringBuilder, sb, append, '(', sb, append, value, sb, append, ')', final, int, n, sb, length, final, int, startIndex, pos, getIndex, final, int, endIndex, +, startIndex, n, if, &&, <, endIndex, source, length, ==, source, substring, startIndex, endIndex, compareTo, sb, toString, 0, =, ret, Double, valueOf, value, pos, setIndex, endIndex, return, ret]
org.apache.commons.math4.util:CompositeFormat:parseNumber:String+NumberFormat+ParsePosition#[final, int, startIndex, pos, getIndex, Number, number, format, parse, source, pos, final, int, endIndex, pos, getIndex, if, ==, startIndex, endIndex, final, double, special, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, for, int, i, 0, <, i, special.length, ++, i, =, number, parseNumber, source, special, i, pos, if, !=, number, null, break, return, number]
org.apache.commons.math4.util:CompositeFormat:parseFixedstring:String+String+ParsePosition#[final, int, startIndex, pos, getIndex, final, int, endIndex, +, startIndex, expected, length, if, ||, >=, startIndex, source, length, >, endIndex, source, length, !=, source, substring, startIndex, endIndex, compareTo, expected, 0, pos, setIndex, startIndex, pos, setErrorIndex, startIndex, return, false, pos, setIndex, endIndex, return, true]
org.apache.commons.math4.util:CompositeFormat:formatDouble:double+NumberFormat+StringBuffer+FieldPosition#[if, ||, Double, isNaN, value, Double, isInfinite, value, toAppendTo, append, '(', toAppendTo, append, value, toAppendTo, append, ')', format, format, value, toAppendTo, pos, return, toAppendTo]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double#[return, evaluate, x, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double+double#[return, evaluate, x, epsilon, Integer.MAX_VALUE]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double+int#[return, evaluate, x, DEFAULT_EPSILON, maxIterations]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double+double+int#[final, double, small, 1e-50, double, hPrev, getA, 0, x, if, Precision, equals, hPrev, 0.0, small, =, hPrev, small, int, n, 1, double, dPrev, 0.0, double, cPrev, hPrev, double, hN, hPrev, while, <, n, maxIterations, final, double, a, getA, n, x, final, double, b, getB, n, x, double, dN, +, a, *, b, dPrev, if, Precision, equals, dN, 0.0, small, =, dN, small, double, cN, +, a, /, b, cPrev, if, Precision, equals, cN, 0.0, small, =, cN, small, =, dN, /, 1, dN, final, double, deltaN, *, cN, dN, =, hN, *, hPrev, deltaN, if, Double, isInfinite, hN, throw, new, ConvergenceException, LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x, if, Double, isNaN, hN, throw, new, ConvergenceException, LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x, if, <, FastMath, abs, -, deltaN, 1.0, epsilon, break, =, dPrev, dN, =, cPrev, cN, =, hPrev, hN, ++, n, if, >=, n, maxIterations, throw, new, MaxCountExceededException, LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x, return, hN]
org.apache.commons.math4.util:Decimal64:getField:null#[return, Decimal64Field, getInstance]
org.apache.commons.math4.util:Decimal64:add:Decimal64#[return, new, Decimal64, +, this, value, a.value]
org.apache.commons.math4.util:Decimal64:subtract:Decimal64#[return, new, Decimal64, -, this, value, a.value]
org.apache.commons.math4.util:Decimal64:negate:null#[return, new, Decimal64, -, this, value]
org.apache.commons.math4.util:Decimal64:multiply:Decimal64#[return, new, Decimal64, *, this, value, a.value]
org.apache.commons.math4.util:Decimal64:multiply:int#[return, new, Decimal64, *, n, this, value]
org.apache.commons.math4.util:Decimal64:divide:Decimal64#[return, new, Decimal64, /, this, value, a.value]
org.apache.commons.math4.util:Decimal64:reciprocal:null#[return, new, Decimal64, /, 1.0, this, value]
org.apache.commons.math4.util:Decimal64:byteValue:null#[return, byte, value]
org.apache.commons.math4.util:Decimal64:shortValue:null#[return, short, value]
org.apache.commons.math4.util:Decimal64:intValue:null#[return, int, value]
org.apache.commons.math4.util:Decimal64:longValue:null#[return, long, value]
org.apache.commons.math4.util:Decimal64:floatValue:null#[return, float, value]
org.apache.commons.math4.util:Decimal64:doubleValue:null#[return, value]
org.apache.commons.math4.util:Decimal64:compareTo:Decimal64#[return, Double, compare, this, value, o.value]
org.apache.commons.math4.util:Decimal64:equals:Object#[if, instanceof, obj, Decimal64, final, Decimal64, that, Decimal64, obj, return, ==, Double, doubleToLongBits, this, value, Double, doubleToLongBits, that.value, return, false]
org.apache.commons.math4.util:Decimal64:hashCode:null#[long, v, Double, doubleToLongBits, value, return, int, ^, v, >>>, v, 32]
org.apache.commons.math4.util:Decimal64:toString:null#[return, Double, toString, value]
org.apache.commons.math4.util:Decimal64:isInfinite:null#[return, Double, isInfinite, value]
org.apache.commons.math4.util:Decimal64:isNaN:null#[return, Double, isNaN, value]
org.apache.commons.math4.util:Decimal64:getReal:null#[return, value]
org.apache.commons.math4.util:Decimal64:add:double#[return, new, Decimal64, +, value, a]
org.apache.commons.math4.util:Decimal64:subtract:double#[return, new, Decimal64, -, value, a]
org.apache.commons.math4.util:Decimal64:multiply:double#[return, new, Decimal64, *, value, a]
org.apache.commons.math4.util:Decimal64:divide:double#[return, new, Decimal64, /, value, a]
org.apache.commons.math4.util:Decimal64:remainder:double#[return, new, Decimal64, FastMath, IEEEremainder, value, a]
org.apache.commons.math4.util:Decimal64:remainder:Decimal64#[return, new, Decimal64, FastMath, IEEEremainder, value, a.value]
org.apache.commons.math4.util:Decimal64:abs:null#[return, new, Decimal64, FastMath, abs, value]
org.apache.commons.math4.util:Decimal64:ceil:null#[return, new, Decimal64, FastMath, ceil, value]
org.apache.commons.math4.util:Decimal64:floor:null#[return, new, Decimal64, FastMath, floor, value]
org.apache.commons.math4.util:Decimal64:rint:null#[return, new, Decimal64, FastMath, rint, value]
org.apache.commons.math4.util:Decimal64:round:null#[return, FastMath, round, value]
org.apache.commons.math4.util:Decimal64:signum:null#[return, new, Decimal64, FastMath, signum, value]
org.apache.commons.math4.util:Decimal64:copySign:Decimal64#[return, new, Decimal64, FastMath, copySign, value, sign.value]
org.apache.commons.math4.util:Decimal64:copySign:double#[return, new, Decimal64, FastMath, copySign, value, sign]
org.apache.commons.math4.util:Decimal64:scalb:int#[return, new, Decimal64, FastMath, scalb, value, n]
org.apache.commons.math4.util:Decimal64:hypot:Decimal64#[return, new, Decimal64, FastMath, hypot, value, y.value]
org.apache.commons.math4.util:Decimal64:sqrt:null#[return, new, Decimal64, FastMath, sqrt, value]
org.apache.commons.math4.util:Decimal64:cbrt:null#[return, new, Decimal64, FastMath, cbrt, value]
org.apache.commons.math4.util:Decimal64:rootN:int#[if, <, value, 0, return, new, Decimal64, -, FastMath, pow, -, value, /, 1.0, n, return, new, Decimal64, FastMath, pow, value, /, 1.0, n]
org.apache.commons.math4.util:Decimal64:pow:double#[return, new, Decimal64, FastMath, pow, value, p]
org.apache.commons.math4.util:Decimal64:pow:int#[return, new, Decimal64, FastMath, pow, value, n]
org.apache.commons.math4.util:Decimal64:pow:Decimal64#[return, new, Decimal64, FastMath, pow, value, e.value]
org.apache.commons.math4.util:Decimal64:exp:null#[return, new, Decimal64, FastMath, exp, value]
org.apache.commons.math4.util:Decimal64:expm1:null#[return, new, Decimal64, FastMath, expm1, value]
org.apache.commons.math4.util:Decimal64:log:null#[return, new, Decimal64, FastMath, log, value]
org.apache.commons.math4.util:Decimal64:log1p:null#[return, new, Decimal64, FastMath, log1p, value]
org.apache.commons.math4.util:Decimal64:log10:null#[return, new, Decimal64, FastMath, log10, value]
org.apache.commons.math4.util:Decimal64:cos:null#[return, new, Decimal64, FastMath, cos, value]
org.apache.commons.math4.util:Decimal64:sin:null#[return, new, Decimal64, FastMath, sin, value]
org.apache.commons.math4.util:Decimal64:tan:null#[return, new, Decimal64, FastMath, tan, value]
org.apache.commons.math4.util:Decimal64:acos:null#[return, new, Decimal64, FastMath, acos, value]
org.apache.commons.math4.util:Decimal64:asin:null#[return, new, Decimal64, FastMath, asin, value]
org.apache.commons.math4.util:Decimal64:atan:null#[return, new, Decimal64, FastMath, atan, value]
org.apache.commons.math4.util:Decimal64:atan2:Decimal64#[return, new, Decimal64, FastMath, atan2, value, x.value]
org.apache.commons.math4.util:Decimal64:cosh:null#[return, new, Decimal64, FastMath, cosh, value]
org.apache.commons.math4.util:Decimal64:sinh:null#[return, new, Decimal64, FastMath, sinh, value]
org.apache.commons.math4.util:Decimal64:tanh:null#[return, new, Decimal64, FastMath, tanh, value]
org.apache.commons.math4.util:Decimal64:acosh:null#[return, new, Decimal64, FastMath, acosh, value]
org.apache.commons.math4.util:Decimal64:asinh:null#[return, new, Decimal64, FastMath, asinh, value]
org.apache.commons.math4.util:Decimal64:atanh:null#[return, new, Decimal64, FastMath, atanh, value]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64[]+Decimal64[]#[if, !=, a.length, b.length, throw, new, DimensionMismatchException, a.length, b.length, final, double, aDouble, double, a.length, final, double, bDouble, double, b.length, for, int, i, 0, <, i, a.length, ++, i, =, aDouble, i, a, i, value, =, bDouble, i, b, i, value, return, new, Decimal64, MathArrays, linearCombination, aDouble, bDouble]
org.apache.commons.math4.util:Decimal64:linearCombination:double[]+Decimal64[]#[if, !=, a.length, b.length, throw, new, DimensionMismatchException, a.length, b.length, final, double, bDouble, double, b.length, for, int, i, 0, <, i, a.length, ++, i, =, bDouble, i, b, i, value, return, new, Decimal64, MathArrays, linearCombination, a, bDouble]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64+Decimal64+Decimal64+Decimal64#[return, new, Decimal64, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value]
org.apache.commons.math4.util:Decimal64:linearCombination:double+Decimal64+double+Decimal64#[return, new, Decimal64, MathArrays, linearCombination, a1, b1.value, a2, b2.value]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64#[return, new, Decimal64, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value]
org.apache.commons.math4.util:Decimal64:linearCombination:double+Decimal64+double+Decimal64+double+Decimal64#[return, new, Decimal64, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64#[return, new, Decimal64, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value, a4.value, b4.value]
org.apache.commons.math4.util:Decimal64:linearCombination:double+Decimal64+double+Decimal64+double+Decimal64+double+Decimal64#[return, new, Decimal64, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value, a4, b4.value]
org.apache.commons.math4.util:Decimal64Field:getInstance:null#[return, INSTANCE]
org.apache.commons.math4.util:Decimal64Field:getZero:null#[return, Decimal64.ZERO]
org.apache.commons.math4.util:Decimal64Field:getOne:null#[return, Decimal64.ONE]
org.apache.commons.math4.util:Decimal64Field:getRuntimeClass:null#[return, Decimal64]
org.apache.commons.math4.util:DefaultTransformer:transform:Object#[if, ==, o, null, throw, new, NullArgumentException, LocalizedFormats.OBJECT_TRANSFORMATION, if, instanceof, o, Number, return, Number, o, doubleValue, try, return, Double, parseDouble, o, toString, catch, NumberFormatException, e, throw, new, MathIllegalArgumentException, LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE, o, toString]
org.apache.commons.math4.util:DefaultTransformer:equals:Object#[if, ==, this, other, return, true, return, instanceof, other, DefaultTransformer]
org.apache.commons.math4.util:DefaultTransformer:hashCode:null#[return, 401993047]
org.apache.commons.math4.util:FastMath:doubleHighPart:double#[if, &&, >, d, -, Precision.SAFE_MIN, <, d, Precision.SAFE_MIN, return, d, long, xl, Double, doubleToRawLongBits, d, &=, xl, MASK_30BITS, return, Double, longBitsToDouble, xl]
org.apache.commons.math4.util:FastMath:sqrt:double#[return, Math, sqrt, a]
org.apache.commons.math4.util:FastMath:cosh:double#[if, Double, isNaN, x, return, x, if, >, x, 20, if, >=, x, LOG_MAX_VALUE, final, double, t, exp, *, 0.5, x, return, *, *, 0.5, t, t, return, *, 0.5, exp, x, if, <, x, -, 20, if, <=, x, -, LOG_MAX_VALUE, final, double, t, exp, *, -, 0.5, x, return, *, *, 0.5, t, t, return, *, 0.5, exp, -, x, final, double, hiPrec, double, 2, if, <, x, 0.0, =, x, -, x, exp, x, 0.0, hiPrec, double, ya, +, hiPrec, 0, hiPrec, 1, double, yb, -, -, ya, hiPrec, 0, hiPrec, 1, double, temp, *, ya, HEX_40000000, double, yaa, -, +, ya, temp, temp, double, yab, -, ya, yaa, double, recip, /, 1.0, ya, =, temp, *, recip, HEX_40000000, double, recipa, -, +, recip, temp, temp, double, recipb, -, recip, recipa, +=, recipb, *, -, -, -, -, 1.0, *, yaa, recipa, *, yaa, recipb, *, yab, recipa, *, yab, recipb, recip, +=, recipb, *, -, yb, recip, recip, =, temp, +, ya, recipa, +=, yb, -, -, temp, ya, recipa, =, ya, temp, =, temp, +, ya, recipb, +=, yb, -, -, temp, ya, recipb, =, ya, temp, double, result, +, ya, yb, *=, result, 0.5, return, result]
org.apache.commons.math4.util:FastMath:sinh:double#[boolean, negate, false, if, Double, isNaN, x, return, x, if, >, x, 20, if, >=, x, LOG_MAX_VALUE, final, double, t, exp, *, 0.5, x, return, *, *, 0.5, t, t, return, *, 0.5, exp, x, if, <, x, -, 20, if, <=, x, -, LOG_MAX_VALUE, final, double, t, exp, *, -, 0.5, x, return, *, *, -, 0.5, t, t, return, *, -, 0.5, exp, -, x, if, ==, x, 0, return, x, if, <, x, 0.0, =, x, -, x, =, negate, true, double, result, if, >, x, 0.25, double, hiPrec, double, 2, exp, x, 0.0, hiPrec, double, ya, +, hiPrec, 0, hiPrec, 1, double, yb, -, -, ya, hiPrec, 0, hiPrec, 1, double, temp, *, ya, HEX_40000000, double, yaa, -, +, ya, temp, temp, double, yab, -, ya, yaa, double, recip, /, 1.0, ya, =, temp, *, recip, HEX_40000000, double, recipa, -, +, recip, temp, temp, double, recipb, -, recip, recipa, +=, recipb, *, -, -, -, -, 1.0, *, yaa, recipa, *, yaa, recipb, *, yab, recipa, *, yab, recipb, recip, +=, recipb, *, -, yb, recip, recip, =, recipa, -, recipa, =, recipb, -, recipb, =, temp, +, ya, recipa, +=, yb, -, -, temp, ya, recipa, =, ya, temp, =, temp, +, ya, recipb, +=, yb, -, -, temp, ya, recipb, =, ya, temp, =, result, +, ya, yb, *=, result, 0.5, double, hiPrec, double, 2, expm1, x, hiPrec, double, ya, +, hiPrec, 0, hiPrec, 1, double, yb, -, -, ya, hiPrec, 0, hiPrec, 1, double, denom, +, 1.0, ya, double, denomr, /, 1.0, denom, double, denomb, +, -, -, denom, 1.0, ya, yb, double, ratio, *, ya, denomr, double, temp, *, ratio, HEX_40000000, double, ra, -, +, ratio, temp, temp, double, rb, -, ratio, ra, =, temp, *, denom, HEX_40000000, double, za, -, +, denom, temp, temp, double, zb, -, denom, za, +=, rb, *, -, -, -, -, ya, *, za, ra, *, za, rb, *, zb, ra, *, zb, rb, denomr, +=, rb, *, yb, denomr, +=, rb, *, -, ya, denomb, denomr, denomr, =, temp, +, ya, ra, +=, yb, -, -, temp, ya, ra, =, ya, temp, =, temp, +, ya, rb, +=, yb, -, -, temp, ya, rb, =, ya, temp, =, result, +, ya, yb, *=, result, 0.5, if, negate, =, result, -, result, return, result]
org.apache.commons.math4.util:FastMath:tanh:double#[boolean, negate, false, if, Double, isNaN, x, return, x, if, >, x, 20.0, return, 1.0, if, <, x, -, 20, return, -, 1.0, if, ==, x, 0, return, x, if, <, x, 0.0, =, x, -, x, =, negate, true, double, result, if, >=, x, 0.5, double, hiPrec, double, 2, exp, *, x, 2.0, 0.0, hiPrec, double, ya, +, hiPrec, 0, hiPrec, 1, double, yb, -, -, ya, hiPrec, 0, hiPrec, 1, double, na, +, -, 1.0, ya, double, nb, -, -, +, na, 1.0, ya, double, temp, +, na, yb, +=, nb, -, -, temp, na, yb, =, na, temp, double, da, +, 1.0, ya, double, db, -, -, da, 1.0, ya, =, temp, +, da, yb, +=, db, -, -, temp, da, yb, =, da, temp, =, temp, *, da, HEX_40000000, double, daa, -, +, da, temp, temp, double, dab, -, da, daa, double, ratio, /, na, da, =, temp, *, ratio, HEX_40000000, double, ratioa, -, +, ratio, temp, temp, double, ratiob, -, ratio, ratioa, +=, ratiob, /, -, -, -, -, na, *, daa, ratioa, *, daa, ratiob, *, dab, ratioa, *, dab, ratiob, da, +=, ratiob, /, nb, da, +=, ratiob, /, /, *, -, db, na, da, da, =, result, +, ratioa, ratiob, double, hiPrec, double, 2, expm1, *, x, 2.0, hiPrec, double, ya, +, hiPrec, 0, hiPrec, 1, double, yb, -, -, ya, hiPrec, 0, hiPrec, 1, double, na, ya, double, nb, yb, double, da, +, 2.0, ya, double, db, -, -, da, 2.0, ya, double, temp, +, da, yb, +=, db, -, -, temp, da, yb, =, da, temp, =, temp, *, da, HEX_40000000, double, daa, -, +, da, temp, temp, double, dab, -, da, daa, double, ratio, /, na, da, =, temp, *, ratio, HEX_40000000, double, ratioa, -, +, ratio, temp, temp, double, ratiob, -, ratio, ratioa, +=, ratiob, /, -, -, -, -, na, *, daa, ratioa, *, daa, ratiob, *, dab, ratioa, *, dab, ratiob, da, +=, ratiob, /, nb, da, +=, ratiob, /, /, *, -, db, na, da, da, =, result, +, ratioa, ratiob, if, negate, =, result, -, result, return, result]
org.apache.commons.math4.util:FastMath:acosh:double#[return, FastMath, log, +, a, FastMath, sqrt, -, *, a, a, 1]
org.apache.commons.math4.util:FastMath:asinh:double#[boolean, negative, false, if, <, a, 0, =, negative, true, =, a, -, a, double, absAsinh, if, >, a, 0.167, =, absAsinh, FastMath, log, +, FastMath, sqrt, +, *, a, a, 1, a, final, double, a2, *, a, a, if, >, a, 0.097, =, absAsinh, *, a, -, 1, *, a2, -, F_1_3, *, a2, -, F_1_5, *, a2, -, F_1_7, *, a2, -, F_1_9, *, a2, -, F_1_11, *, a2, -, F_1_13, *, a2, -, F_1_15, *, a2, F_1_17, F_15_16, F_13_14, F_11_12, F_9_10, F_7_8, F_5_6, F_3_4, F_1_2, if, >, a, 0.036, =, absAsinh, *, a, -, 1, *, a2, -, F_1_3, *, a2, -, F_1_5, *, a2, -, F_1_7, *, a2, -, F_1_9, *, a2, -, F_1_11, *, a2, F_1_13, F_11_12, F_9_10, F_7_8, F_5_6, F_3_4, F_1_2, if, >, a, 0.0036, =, absAsinh, *, a, -, 1, *, a2, -, F_1_3, *, a2, -, F_1_5, *, a2, -, F_1_7, *, a2, F_1_9, F_7_8, F_5_6, F_3_4, F_1_2, =, absAsinh, *, a, -, 1, *, a2, -, F_1_3, *, a2, F_1_5, F_3_4, F_1_2, return, negative, -, absAsinh, absAsinh]
org.apache.commons.math4.util:FastMath:atanh:double#[boolean, negative, false, if, <, a, 0, =, negative, true, =, a, -, a, double, absAtanh, if, >, a, 0.15, =, absAtanh, *, 0.5, FastMath, log, /, +, 1, a, -, 1, a, final, double, a2, *, a, a, if, >, a, 0.087, =, absAtanh, *, a, +, 1, *, a2, +, F_1_3, *, a2, +, F_1_5, *, a2, +, F_1_7, *, a2, +, F_1_9, *, a2, +, F_1_11, *, a2, +, F_1_13, *, a2, +, F_1_15, *, a2, F_1_17, if, >, a, 0.031, =, absAtanh, *, a, +, 1, *, a2, +, F_1_3, *, a2, +, F_1_5, *, a2, +, F_1_7, *, a2, +, F_1_9, *, a2, +, F_1_11, *, a2, F_1_13, if, >, a, 0.003, =, absAtanh, *, a, +, 1, *, a2, +, F_1_3, *, a2, +, F_1_5, *, a2, +, F_1_7, *, a2, F_1_9, =, absAtanh, *, a, +, 1, *, a2, +, F_1_3, *, a2, F_1_5, return, negative, -, absAtanh, absAtanh]
org.apache.commons.math4.util:FastMath:signum:double#[return, <, a, 0.0, -, 1.0, >, a, 0.0, 1.0, a]
org.apache.commons.math4.util:FastMath:signum:float#[return, <, a, 0.0f, -, 1.0f, >, a, 0.0f, 1.0f, a]
org.apache.commons.math4.util:FastMath:nextUp:double#[return, nextAfter, a, Double.POSITIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextUp:float#[return, nextAfter, a, Float.POSITIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextDown:double#[return, nextAfter, a, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextDown:float#[return, nextAfter, a, Float.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:random:null#[return, Math, random]
org.apache.commons.math4.util:FastMath:exp:double#[return, exp, x, 0.0, null]
org.apache.commons.math4.util:FastMath:exp:double+double+double[]#[double, intPartA, double, intPartB, int, intVal, int, x, if, <, x, 0.0, if, <, x, -, 746d, if, !=, hiPrec, null, =, hiPrec, 0, 0.0, =, hiPrec, 1, 0.0, return, 0.0, if, <, intVal, -, 709, final, double, result, /, exp, +, x, 40.19140625, extra, hiPrec, 285040095144011776.0, if, !=, hiPrec, null, /=, hiPrec, 0, 285040095144011776.0, /=, hiPrec, 1, 285040095144011776.0, return, result, if, ==, intVal, -, 709, final, double, result, /, exp, +, x, 1.494140625, extra, hiPrec, 4.455505956692756620, if, !=, hiPrec, null, /=, hiPrec, 0, 4.455505956692756620, /=, hiPrec, 1, 4.455505956692756620, return, result, --, intVal, if, >, intVal, 709, if, !=, hiPrec, null, =, hiPrec, 0, Double.POSITIVE_INFINITY, =, hiPrec, 1, 0.0, return, Double.POSITIVE_INFINITY, =, intPartA, ExpIntTable.EXP_INT_TABLE_A, +, EXP_INT_TABLE_MAX_INDEX, intVal, =, intPartB, ExpIntTable.EXP_INT_TABLE_B, +, EXP_INT_TABLE_MAX_INDEX, intVal, final, int, intFrac, int, *, -, x, intVal, 1024.0, final, double, fracPartA, ExpFracTable.EXP_FRAC_TABLE_A, intFrac, final, double, fracPartB, ExpFracTable.EXP_FRAC_TABLE_B, intFrac, final, double, epsilon, -, x, +, intVal, /, intFrac, 1024.0, double, z, 0.04168701738764507, =, z, +, *, z, epsilon, 0.1666666505023083, =, z, +, *, z, epsilon, 0.5000000000042687, =, z, +, *, z, epsilon, 1.0, =, z, +, *, z, epsilon, -, 3.940510424527919E-20, double, tempA, *, intPartA, fracPartA, double, tempB, +, +, *, intPartA, fracPartB, *, intPartB, fracPartA, *, intPartB, fracPartB, final, double, tempC, +, tempB, tempA, if, ==, tempC, Double.POSITIVE_INFINITY, return, Double.POSITIVE_INFINITY, final, double, result, if, !=, extra, 0.0, =, result, +, +, +, +, *, tempC, extra, z, *, tempC, extra, *, tempC, z, tempB, tempA, =, result, +, +, *, tempC, z, tempB, tempA, if, !=, hiPrec, null, =, hiPrec, 0, tempA, =, hiPrec, 1, +, +, +, *, tempC, extra, z, *, tempC, extra, *, tempC, z, tempB, return, result]
org.apache.commons.math4.util:FastMath:expm1:double#[return, expm1, x, null]
org.apache.commons.math4.util:FastMath:expm1:double+double#[if, ||, Double, isNaN, x, ==, x, 0.0, return, x, if, ||, <=, x, -, 1.0, >=, x, 1.0, double, hiPrec, double, 2, exp, x, 0.0, hiPrec, if, >, x, 0.0, return, +, -, 1.0, hiPrec, 0, hiPrec, 1, final, double, ra, +, -, 1.0, hiPrec, 0, double, rb, -, -, +, ra, 1.0, hiPrec, 0, +=, rb, hiPrec, 1, return, +, ra, rb, double, baseA, double, baseB, double, epsilon, boolean, negative, false, if, <, x, 0.0, =, x, -, x, =, negative, true, int, intFrac, int, *, x, 1024.0, double, tempA, -, ExpFracTable.EXP_FRAC_TABLE_A, intFrac, 1.0, double, tempB, ExpFracTable.EXP_FRAC_TABLE_B, intFrac, double, temp, +, tempA, tempB, =, tempB, -, -, temp, tempA, tempB, =, tempA, temp, =, temp, *, tempA, HEX_40000000, =, baseA, -, +, tempA, temp, temp, =, baseB, +, tempB, -, tempA, baseA, =, epsilon, -, x, /, intFrac, 1024.0, double, zb, 0.008336750013465571, =, zb, +, *, zb, epsilon, 0.041666663879186654, =, zb, +, *, zb, epsilon, 0.16666666666745392, =, zb, +, *, zb, epsilon, 0.49999999999999994, *=, zb, epsilon, *=, zb, epsilon, double, za, epsilon, double, temp, +, za, zb, =, zb, -, -, temp, za, zb, =, za, temp, =, temp, *, za, HEX_40000000, =, temp, -, +, za, temp, temp, +=, zb, -, za, temp, =, za, temp, double, ya, *, za, baseA, =, temp, +, ya, *, za, baseB, double, yb, -, -, temp, ya, *, za, baseB, =, ya, temp, =, temp, +, ya, *, zb, baseA, +=, yb, -, -, temp, ya, *, zb, baseA, =, ya, temp, =, temp, +, ya, *, zb, baseB, +=, yb, -, -, temp, ya, *, zb, baseB, =, ya, temp, =, temp, +, ya, baseA, +=, yb, -, -, temp, baseA, ya, =, ya, temp, =, temp, +, ya, za, +=, yb, -, -, temp, ya, za, =, ya, temp, =, temp, +, ya, baseB, +=, yb, -, -, temp, ya, baseB, =, ya, temp, =, temp, +, ya, zb, +=, yb, -, -, temp, ya, zb, =, ya, temp, if, negative, double, denom, +, 1.0, ya, double, denomr, /, 1.0, denom, double, denomb, +, -, -, denom, 1.0, ya, yb, double, ratio, *, ya, denomr, =, temp, *, ratio, HEX_40000000, final, double, ra, -, +, ratio, temp, temp, double, rb, -, ratio, ra, =, temp, *, denom, HEX_40000000, =, za, -, +, denom, temp, temp, =, zb, -, denom, za, +=, rb, *, -, -, -, -, ya, *, za, ra, *, za, rb, *, zb, ra, *, zb, rb, denomr, +=, rb, *, yb, denomr, +=, rb, *, -, ya, denomb, denomr, denomr, =, ya, -, ra, =, yb, -, rb, if, !=, hiPrecOut, null, =, hiPrecOut, 0, ya, =, hiPrecOut, 1, yb, return, +, ya, yb]
org.apache.commons.math4.util:FastMath:log:double#[return, log, x, null]
org.apache.commons.math4.util:FastMath:log:double+double[]#[if, ==, x, 0, return, Double.NEGATIVE_INFINITY, long, bits, Double, doubleToRawLongBits, x, if, &&, ||, !=, &, bits, 0x8000000000000000L, 0, Double, isNaN, x, !=, x, 0.0, if, !=, hiPrec, null, =, hiPrec, 0, Double.NaN, return, Double.NaN, if, ==, x, Double.POSITIVE_INFINITY, if, !=, hiPrec, null, =, hiPrec, 0, Double.POSITIVE_INFINITY, return, Double.POSITIVE_INFINITY, int, exp, -, int, >>, bits, 52, 1023, if, ==, &, bits, 0x7ff0000000000000L, 0, if, ==, x, 0, if, !=, hiPrec, null, =, hiPrec, 0, Double.NEGATIVE_INFINITY, return, Double.NEGATIVE_INFINITY, <<=, bits, 1, while, ==, &, bits, 0x0010000000000000L, 0, --, exp, <<=, bits, 1, if, &&, &&, &&, ||, ==, exp, -, 1, ==, exp, 0, <, x, 1.01, >, x, 0.99, ==, hiPrec, null, double, xa, -, x, 1.0, double, xb, +, -, xa, x, 1.0, double, tmp, *, xa, HEX_40000000, double, aa, -, +, xa, tmp, tmp, double, ab, -, xa, aa, =, xa, aa, =, xb, ab, final, double, lnCoef_last, LN_QUICK_COEF, -, LN_QUICK_COEF.length, 1, double, ya, lnCoef_last, 0, double, yb, lnCoef_last, 1, for, int, i, -, LN_QUICK_COEF.length, 2, >=, i, 0, --, i, =, aa, *, ya, xa, =, ab, +, +, *, ya, xb, *, yb, xa, *, yb, xb, =, tmp, *, aa, HEX_40000000, =, ya, -, +, aa, tmp, tmp, =, yb, +, -, aa, ya, ab, final, double, lnCoef_i, LN_QUICK_COEF, i, =, aa, +, ya, lnCoef_i, 0, =, ab, +, yb, lnCoef_i, 1, =, tmp, *, aa, HEX_40000000, =, ya, -, +, aa, tmp, tmp, =, yb, +, -, aa, ya, ab, =, aa, *, ya, xa, =, ab, +, +, *, ya, xb, *, yb, xa, *, yb, xb, =, tmp, *, aa, HEX_40000000, =, ya, -, +, aa, tmp, tmp, =, yb, +, -, aa, ya, ab, return, +, ya, yb, final, double, lnm, lnMant.LN_MANT, int, >>, &, bits, 0x000ffc0000000000L, 42, final, double, epsilon, /, &, bits, 0x3ffffffffffL, +, TWO_POWER_52, &, bits, 0x000ffc0000000000L, double, lnza, 0.0, double, lnzb, 0.0, if, !=, hiPrec, null, double, tmp, *, epsilon, HEX_40000000, double, aa, -, +, epsilon, tmp, tmp, double, ab, -, epsilon, aa, double, xa, aa, double, xb, ab, final, double, numer, &, bits, 0x3ffffffffffL, final, double, denom, +, TWO_POWER_52, &, bits, 0x000ffc0000000000L, =, aa, -, -, numer, *, xa, denom, *, xb, denom, +=, xb, /, aa, denom, final, double, lnCoef_last, LN_HI_PREC_COEF, -, LN_HI_PREC_COEF.length, 1, double, ya, lnCoef_last, 0, double, yb, lnCoef_last, 1, for, int, i, -, LN_HI_PREC_COEF.length, 2, >=, i, 0, --, i, =, aa, *, ya, xa, =, ab, +, +, *, ya, xb, *, yb, xa, *, yb, xb, =, tmp, *, aa, HEX_40000000, =, ya, -, +, aa, tmp, tmp, =, yb, +, -, aa, ya, ab, final, double, lnCoef_i, LN_HI_PREC_COEF, i, =, aa, +, ya, lnCoef_i, 0, =, ab, +, yb, lnCoef_i, 1, =, tmp, *, aa, HEX_40000000, =, ya, -, +, aa, tmp, tmp, =, yb, +, -, aa, ya, ab, =, aa, *, ya, xa, =, ab, +, +, *, ya, xb, *, yb, xa, *, yb, xb, =, lnza, +, aa, ab, =, lnzb, -, -, lnza, aa, ab, =, lnza, -, 0.16624882440418567, =, lnza, +, *, lnza, epsilon, 0.19999954120254515, =, lnza, +, *, lnza, epsilon, -, 0.2499999997677497, =, lnza, +, *, lnza, epsilon, 0.3333333333332802, =, lnza, +, *, lnza, epsilon, -, 0.5, =, lnza, +, *, lnza, epsilon, 1.0, *=, lnza, epsilon, double, a, *, LN_2_A, exp, double, b, 0.0, double, c, +, a, lnm, 0, double, d, -, -, c, a, lnm, 0, =, a, c, +=, b, d, =, c, +, a, lnza, =, d, -, -, c, a, lnza, =, a, c, +=, b, d, =, c, +, a, *, LN_2_B, exp, =, d, -, -, c, a, *, LN_2_B, exp, =, a, c, +=, b, d, =, c, +, a, lnm, 1, =, d, -, -, c, a, lnm, 1, =, a, c, +=, b, d, =, c, +, a, lnzb, =, d, -, -, c, a, lnzb, =, a, c, +=, b, d, if, !=, hiPrec, null, =, hiPrec, 0, a, =, hiPrec, 1, b, return, +, a, b]
org.apache.commons.math4.util:FastMath:log1p:double#[if, ==, x, -, 1, return, Double.NEGATIVE_INFINITY, if, ==, x, Double.POSITIVE_INFINITY, return, Double.POSITIVE_INFINITY, if, ||, >, x, 1e-6, <, x, -, 1e-6, final, double, xpa, +, 1, x, final, double, xpb, -, -, xpa, 1, x, final, double, hiPrec, double, 2, final, double, lores, log, xpa, hiPrec, if, Double, isInfinite, lores, return, lores, final, double, fx1, /, xpb, xpa, final, double, epsilon, +, *, 0.5, fx1, 1, return, +, +, *, epsilon, fx1, hiPrec, 1, hiPrec, 0, final, double, y, +, *, -, *, x, F_1_3, F_1_2, x, 1, return, *, y, x]
org.apache.commons.math4.util:FastMath:log10:double#[final, double, hiPrec, double, 2, final, double, lores, log, x, hiPrec, if, Double, isInfinite, lores, return, lores, final, double, tmp, *, hiPrec, 0, HEX_40000000, final, double, lna, -, +, hiPrec, 0, tmp, tmp, final, double, lnb, +, -, hiPrec, 0, lna, hiPrec, 1, final, double, rln10a, 0.4342944622039795, final, double, rln10b, 1.9699272335463627E-8, return, +, +, +, *, rln10b, lnb, *, rln10b, lna, *, rln10a, lnb, *, rln10a, lna]
org.apache.commons.math4.util:FastMath:log:double+double#[return, /, log, x, log, base]
org.apache.commons.math4.util:FastMath:pow:double+double#[if, ==, y, 0, return, 1.0, final, long, yBits, Double, doubleToRawLongBits, y, final, int, yRawExp, int, >>, &, yBits, MASK_DOUBLE_EXPONENT, 52, final, long, yRawMantissa, &, yBits, MASK_DOUBLE_MANTISSA, final, long, xBits, Double, doubleToRawLongBits, x, final, int, xRawExp, int, >>, &, xBits, MASK_DOUBLE_EXPONENT, 52, final, long, xRawMantissa, &, xBits, MASK_DOUBLE_MANTISSA, if, >, yRawExp, 1085, if, ||, &&, ==, yRawExp, 2047, !=, yRawMantissa, 0, &&, ==, xRawExp, 2047, !=, xRawMantissa, 0, return, Double.NaN, if, &&, ==, xRawExp, 1023, ==, xRawMantissa, 0, if, ==, yRawExp, 2047, return, Double.NaN, return, 1.0, if, ^, >, y, 0, <, xRawExp, 1023, return, Double.POSITIVE_INFINITY, return, +, 0.0, if, >=, yRawExp, 1023, final, long, yFullMantissa, |, IMPLICIT_HIGH_BIT, yRawMantissa, if, <, yRawExp, 1075, final, long, integralMask, <<, -, 1L, -, 1075, yRawExp, if, ==, &, yFullMantissa, integralMask, yFullMantissa, final, long, l, >>, yFullMantissa, -, 1075, yRawExp, return, FastMath, pow, x, <, y, 0, -, l, l, final, long, l, <<, yFullMantissa, -, yRawExp, 1075, return, FastMath, pow, x, <, y, 0, -, l, l, if, ==, x, 0, return, <, y, 0, Double.POSITIVE_INFINITY, +, 0.0, if, ==, xRawExp, 2047, if, ==, xRawMantissa, 0, return, <, y, 0, +, 0.0, Double.POSITIVE_INFINITY, return, Double.NaN, if, <, x, 0, return, Double.NaN, final, double, tmp, *, y, HEX_40000000, final, double, ya, -, +, y, tmp, tmp, final, double, yb, -, y, ya, final, double, lns, double, 2, final, double, lores, log, x, lns, if, Double, isInfinite, lores, return, lores, double, lna, lns, 0, double, lnb, lns, 1, final, double, tmp1, *, lna, HEX_40000000, final, double, tmp2, -, +, lna, tmp1, tmp1, +=, lnb, -, lna, tmp2, =, lna, tmp2, final, double, aa, *, lna, ya, final, double, ab, +, +, *, lna, yb, *, lnb, ya, *, lnb, yb, =, lna, +, aa, ab, =, lnb, -, -, lna, aa, ab, double, z, /, 1.0, 120.0, =, z, +, *, z, lnb, /, 1.0, 24.0, =, z, +, *, z, lnb, /, 1.0, 6.0, =, z, +, *, z, lnb, 0.5, =, z, +, *, z, lnb, 1.0, *=, z, lnb, final, double, result, exp, lna, z, null, return, result]
org.apache.commons.math4.util:FastMath:pow:double+int#[return, pow, d, long, e]
org.apache.commons.math4.util:FastMath:pow:double+long#[if, ==, e, 0, return, 1.0, if, >, e, 0, return, new, Split, d, pow, e, full, return, new, Split, d, reciprocal, pow, -, e, full]
org.apache.commons.math4.util:FastMath:polySine:double#[double, x2, *, x, x, double, p, 2.7553817452272217E-6, =, p, +, *, p, x2, -, 1.9841269659586505E-4, =, p, +, *, p, x2, 0.008333333333329196, =, p, +, *, p, x2, -, 0.16666666666666666, =, p, *, p, x2, x, return, p]
org.apache.commons.math4.util:FastMath:polyCosine:double#[double, x2, *, x, x, double, p, 2.479773539153719E-5, =, p, +, *, p, x2, -, 0.0013888888689039883, =, p, +, *, p, x2, 0.041666666666621166, =, p, +, *, p, x2, -, 0.49999999999999994, *=, p, x2, return, p]
org.apache.commons.math4.util:FastMath:sinQ:double+double#[int, idx, int, +, *, xa, 8.0, 0.5, final, double, epsilon, -, xa, EIGHTHS, idx, final, double, sintA, SINE_TABLE_A, idx, final, double, sintB, SINE_TABLE_B, idx, final, double, costA, COSINE_TABLE_A, idx, final, double, costB, COSINE_TABLE_B, idx, double, sinEpsA, epsilon, double, sinEpsB, polySine, epsilon, final, double, cosEpsA, 1.0, final, double, cosEpsB, polyCosine, epsilon, final, double, temp, *, sinEpsA, HEX_40000000, double, temp2, -, +, sinEpsA, temp, temp, +=, sinEpsB, -, sinEpsA, temp2, =, sinEpsA, temp2, double, result, double, a, 0, double, b, 0, double, t, sintA, double, c, +, a, t, double, d, -, -, c, a, t, =, a, c, +=, b, d, =, t, *, costA, sinEpsA, =, c, +, a, t, =, d, -, -, c, a, t, =, a, c, +=, b, d, =, b, +, +, b, *, sintA, cosEpsB, *, costA, sinEpsB, =, b, +, +, +, b, sintB, *, costB, sinEpsA, *, sintB, cosEpsB, *, costB, sinEpsB, if, !=, xb, 0.0, =, t, *, -, *, +, costA, costB, +, cosEpsA, cosEpsB, *, +, sintA, sintB, +, sinEpsA, sinEpsB, xb, =, c, +, a, t, =, d, -, -, c, a, t, =, a, c, +=, b, d, =, result, +, a, b, return, result]
org.apache.commons.math4.util:FastMath:cosQ:double+double#[final, double, pi2a, 1.5707963267948966, final, double, pi2b, 6.123233995736766E-17, final, double, a, -, pi2a, xa, double, b, -, +, -, a, pi2a, xa, +=, b, -, pi2b, xb, return, sinQ, a, b]
org.apache.commons.math4.util:FastMath:tanQ:double+double+boolean#[int, idx, int, +, *, xa, 8.0, 0.5, final, double, epsilon, -, xa, EIGHTHS, idx, final, double, sintA, SINE_TABLE_A, idx, final, double, sintB, SINE_TABLE_B, idx, final, double, costA, COSINE_TABLE_A, idx, final, double, costB, COSINE_TABLE_B, idx, double, sinEpsA, epsilon, double, sinEpsB, polySine, epsilon, final, double, cosEpsA, 1.0, final, double, cosEpsB, polyCosine, epsilon, double, temp, *, sinEpsA, HEX_40000000, double, temp2, -, +, sinEpsA, temp, temp, +=, sinEpsB, -, sinEpsA, temp2, =, sinEpsA, temp2, double, a, 0, double, b, 0, double, t, sintA, double, c, +, a, t, double, d, -, -, c, a, t, =, a, c, +=, b, d, =, t, *, costA, sinEpsA, =, c, +, a, t, =, d, -, -, c, a, t, =, a, c, +=, b, d, +=, b, +, *, sintA, cosEpsB, *, costA, sinEpsB, +=, b, +, +, +, sintB, *, costB, sinEpsA, *, sintB, cosEpsB, *, costB, sinEpsB, double, sina, +, a, b, double, sinb, -, -, sina, a, b, =, a, =, b, =, c, =, d, 0.0, =, t, *, costA, cosEpsA, =, c, +, a, t, =, d, -, -, c, a, t, =, a, c, +=, b, d, =, t, *, -, sintA, sinEpsA, =, c, +, a, t, =, d, -, -, c, a, t, =, a, c, +=, b, d, +=, b, +, +, *, costB, cosEpsA, *, costA, cosEpsB, *, costB, cosEpsB, -=, b, +, +, *, sintB, sinEpsA, *, sintA, sinEpsB, *, sintB, sinEpsB, double, cosa, +, a, b, double, cosb, -, -, cosa, a, b, if, cotanFlag, double, tmp, =, tmp, cosa, =, cosa, sina, =, sina, tmp, =, tmp, cosb, =, cosb, sinb, =, sinb, tmp, double, est, /, sina, cosa, =, temp, *, est, HEX_40000000, double, esta, -, +, est, temp, temp, double, estb, -, est, esta, =, temp, *, cosa, HEX_40000000, double, cosaa, -, +, cosa, temp, temp, double, cosab, -, cosa, cosaa, double, err, /, -, -, -, -, sina, *, esta, cosaa, *, esta, cosab, *, estb, cosaa, *, estb, cosab, cosa, +=, err, /, sinb, cosa, +=, err, /, /, *, -, sina, cosb, cosa, cosa, if, !=, xb, 0.0, double, xbadj, +, xb, *, est, est, xb, if, cotanFlag, =, xbadj, -, xbadj, +=, err, xbadj, return, +, est, err]
org.apache.commons.math4.util:FastMath:reducePayneHanek:double+double#[long, inbits, Double, doubleToRawLongBits, x, int, exponent, -, int, &, >>, inbits, 52, 0x7ff, 1023, &=, inbits, 0x000fffffffffffffL, |=, inbits, 0x0010000000000000L, ++, exponent, <<=, inbits, 11, long, shpi0, long, shpiA, long, shpiB, int, idx, >>, exponent, 6, int, shift, -, exponent, <<, idx, 6, if, !=, shift, 0, =, shpi0, ==, idx, 0, 0, <<, RECIP_2PI, -, idx, 1, shift, |=, shpi0, >>>, RECIP_2PI, idx, -, 64, shift, =, shpiA, |, <<, RECIP_2PI, idx, shift, >>>, RECIP_2PI, +, idx, 1, -, 64, shift, =, shpiB, |, <<, RECIP_2PI, +, idx, 1, shift, >>>, RECIP_2PI, +, idx, 2, -, 64, shift, =, shpi0, ==, idx, 0, 0, RECIP_2PI, -, idx, 1, =, shpiA, RECIP_2PI, idx, =, shpiB, RECIP_2PI, +, idx, 1, long, a, >>>, inbits, 32, long, b, &, inbits, 0xffffffffL, long, c, >>>, shpiA, 32, long, d, &, shpiA, 0xffffffffL, long, ac, *, a, c, long, bd, *, b, d, long, bc, *, b, c, long, ad, *, a, d, long, prodB, +, bd, <<, ad, 32, long, prodA, +, ac, >>>, ad, 32, boolean, bita, !=, &, bd, 0x8000000000000000L, 0, boolean, bitb, !=, &, ad, 0x80000000L, 0, boolean, bitsum, !=, &, prodB, 0x8000000000000000L, 0, if, ||, &&, bita, bitb, &&, ||, bita, bitb, !, bitsum, ++, prodA, =, bita, !=, &, prodB, 0x8000000000000000L, 0, =, bitb, !=, &, bc, 0x80000000L, 0, +=, prodB, <<, bc, 32, +=, prodA, >>>, bc, 32, =, bitsum, !=, &, prodB, 0x8000000000000000L, 0, if, ||, &&, bita, bitb, &&, ||, bita, bitb, !, bitsum, ++, prodA, =, c, >>>, shpiB, 32, =, d, &, shpiB, 0xffffffffL, =, ac, *, a, c, =, bc, *, b, c, =, ad, *, a, d, +=, ac, >>>, +, bc, ad, 32, =, bita, !=, &, prodB, 0x8000000000000000L, 0, =, bitb, !=, &, ac, 0x8000000000000000L, 0, +=, prodB, ac, =, bitsum, !=, &, prodB, 0x8000000000000000L, 0, if, ||, &&, bita, bitb, &&, ||, bita, bitb, !, bitsum, ++, prodA, =, c, >>>, shpi0, 32, =, d, &, shpi0, 0xffffffffL, =, bd, *, b, d, =, bc, *, b, c, =, ad, *, a, d, +=, prodA, +, bd, <<, +, bc, ad, 32, int, intPart, int, >>>, prodA, 62, <<=, prodA, 2, |=, prodA, >>>, prodB, 62, <<=, prodB, 2, =, a, >>>, prodA, 32, =, b, &, prodA, 0xffffffffL, =, c, >>>, PI_O_4_BITS, 0, 32, =, d, &, PI_O_4_BITS, 0, 0xffffffffL, =, ac, *, a, c, =, bd, *, b, d, =, bc, *, b, c, =, ad, *, a, d, long, prod2B, +, bd, <<, ad, 32, long, prod2A, +, ac, >>>, ad, 32, =, bita, !=, &, bd, 0x8000000000000000L, 0, =, bitb, !=, &, ad, 0x80000000L, 0, =, bitsum, !=, &, prod2B, 0x8000000000000000L, 0, if, ||, &&, bita, bitb, &&, ||, bita, bitb, !, bitsum, ++, prod2A, =, bita, !=, &, prod2B, 0x8000000000000000L, 0, =, bitb, !=, &, bc, 0x80000000L, 0, +=, prod2B, <<, bc, 32, +=, prod2A, >>>, bc, 32, =, bitsum, !=, &, prod2B, 0x8000000000000000L, 0, if, ||, &&, bita, bitb, &&, ||, bita, bitb, !, bitsum, ++, prod2A, =, c, >>>, PI_O_4_BITS, 1, 32, =, d, &, PI_O_4_BITS, 1, 0xffffffffL, =, ac, *, a, c, =, bc, *, b, c, =, ad, *, a, d, +=, ac, >>>, +, bc, ad, 32, =, bita, !=, &, prod2B, 0x8000000000000000L, 0, =, bitb, !=, &, ac, 0x8000000000000000L, 0, +=, prod2B, ac, =, bitsum, !=, &, prod2B, 0x8000000000000000L, 0, if, ||, &&, bita, bitb, &&, ||, bita, bitb, !, bitsum, ++, prod2A, =, a, >>>, prodB, 32, =, b, &, prodB, 0xffffffffL, =, c, >>>, PI_O_4_BITS, 0, 32, =, d, &, PI_O_4_BITS, 0, 0xffffffffL, =, ac, *, a, c, =, bc, *, b, c, =, ad, *, a, d, +=, ac, >>>, +, bc, ad, 32, =, bita, !=, &, prod2B, 0x8000000000000000L, 0, =, bitb, !=, &, ac, 0x8000000000000000L, 0, +=, prod2B, ac, =, bitsum, !=, &, prod2B, 0x8000000000000000L, 0, if, ||, &&, bita, bitb, &&, ||, bita, bitb, !, bitsum, ++, prod2A, double, tmpA, /, >>>, prod2A, 12, TWO_POWER_52, double, tmpB, /, +, <<, &, prod2A, 0xfffL, 40, >>>, prod2B, 24, TWO_POWER_52, TWO_POWER_52, double, sumA, +, tmpA, tmpB, double, sumB, -, -, sumA, tmpA, tmpB, =, result, 0, intPart, =, result, 1, *, sumA, 2.0, =, result, 2, *, sumB, 2.0]
org.apache.commons.math4.util:FastMath:sin:double#[boolean, negative, false, int, quadrant, 0, double, xa, double, xb, 0.0, =, xa, x, if, <, x, 0, =, negative, true, =, xa, -, xa, if, ==, xa, 0.0, long, bits, Double, doubleToRawLongBits, x, if, <, bits, 0, return, -, 0.0, return, 0.0, if, ||, !=, xa, xa, ==, xa, Double.POSITIVE_INFINITY, return, Double.NaN, if, >, xa, 3294198.0, double, reduceResults, double, 3, reducePayneHanek, xa, reduceResults, =, quadrant, &, int, reduceResults, 0, 3, =, xa, reduceResults, 1, =, xb, reduceResults, 2, if, >, xa, 1.5707963267948966, final, CodyWaite, cw, new, CodyWaite, xa, =, quadrant, &, cw, getK, 3, =, xa, cw, getRemA, =, xb, cw, getRemB, if, negative, ^=, quadrant, 2, switch, quadrant, case, 0, return, sinQ, xa, xb, case, 1, return, cosQ, xa, xb, case, 2, return, -, sinQ, xa, xb, case, 3, return, -, cosQ, xa, xb, default, return, Double.NaN]
org.apache.commons.math4.util:FastMath:cos:double#[int, quadrant, 0, double, xa, x, if, <, x, 0, =, xa, -, xa, if, ||, !=, xa, xa, ==, xa, Double.POSITIVE_INFINITY, return, Double.NaN, double, xb, 0, if, >, xa, 3294198.0, double, reduceResults, double, 3, reducePayneHanek, xa, reduceResults, =, quadrant, &, int, reduceResults, 0, 3, =, xa, reduceResults, 1, =, xb, reduceResults, 2, if, >, xa, 1.5707963267948966, final, CodyWaite, cw, new, CodyWaite, xa, =, quadrant, &, cw, getK, 3, =, xa, cw, getRemA, =, xb, cw, getRemB, switch, quadrant, case, 0, return, cosQ, xa, xb, case, 1, return, -, sinQ, xa, xb, case, 2, return, -, cosQ, xa, xb, case, 3, return, sinQ, xa, xb, default, return, Double.NaN]
org.apache.commons.math4.util:FastMath:tan:double#[boolean, negative, false, int, quadrant, 0, double, xa, x, if, <, x, 0, =, negative, true, =, xa, -, xa, if, ==, xa, 0.0, long, bits, Double, doubleToRawLongBits, x, if, <, bits, 0, return, -, 0.0, return, 0.0, if, ||, !=, xa, xa, ==, xa, Double.POSITIVE_INFINITY, return, Double.NaN, double, xb, 0, if, >, xa, 3294198.0, double, reduceResults, double, 3, reducePayneHanek, xa, reduceResults, =, quadrant, &, int, reduceResults, 0, 3, =, xa, reduceResults, 1, =, xb, reduceResults, 2, if, >, xa, 1.5707963267948966, final, CodyWaite, cw, new, CodyWaite, xa, =, quadrant, &, cw, getK, 3, =, xa, cw, getRemA, =, xb, cw, getRemB, if, >, xa, 1.5, final, double, pi2a, 1.5707963267948966, final, double, pi2b, 6.123233995736766E-17, final, double, a, -, pi2a, xa, double, b, -, +, -, a, pi2a, xa, +=, b, -, pi2b, xb, =, xa, +, a, b, =, xb, -, -, xa, a, b, ^=, quadrant, 1, ^=, negative, true, double, result, if, ==, &, quadrant, 1, 0, =, result, tanQ, xa, xb, false, =, result, -, tanQ, xa, xb, true, if, negative, =, result, -, result, return, result]
org.apache.commons.math4.util:FastMath:atan:double#[return, atan, x, 0.0, false]
org.apache.commons.math4.util:FastMath:atan:double+double+boolean#[if, ==, xa, 0.0, return, leftPlane, copySign, Math.PI, xa, xa, final, boolean, negate, if, <, xa, 0, =, xa, -, xa, =, xb, -, xb, =, negate, true, =, negate, false, if, >, xa, 1.633123935319537E16, return, ^, negate, leftPlane, *, -, Math.PI, F_1_2, *, Math.PI, F_1_2, final, int, idx, if, <, xa, 1, =, idx, int, +, *, +, *, -, 1.7168146928204136, xa, xa, 8.0, xa, 0.5, final, double, oneOverXa, /, 1, xa, =, idx, int, +, -, *, +, *, -, 1.7168146928204136, oneOverXa, oneOverXa, 8.0, oneOverXa, 13.07, final, double, ttA, TANGENT_TABLE_A, idx, final, double, ttB, TANGENT_TABLE_B, idx, double, epsA, -, xa, ttA, double, epsB, -, +, -, epsA, xa, ttA, +=, epsB, -, xb, ttB, double, temp, +, epsA, epsB, =, epsB, -, -, temp, epsA, epsB, =, epsA, temp, =, temp, *, xa, HEX_40000000, double, ya, -, +, xa, temp, temp, double, yb, -, +, xb, xa, ya, =, xa, ya, +=, xb, yb, if, ==, idx, 0, final, double, denom, /, 1d, +, 1d, *, +, xa, xb, +, ttA, ttB, =, ya, *, epsA, denom, =, yb, *, epsB, denom, double, temp2, *, xa, ttA, double, za, +, 1d, temp2, double, zb, -, -, za, 1d, temp2, =, temp2, +, *, xb, ttA, *, xa, ttB, =, temp, +, za, temp2, +=, zb, -, -, temp, za, temp2, =, za, temp, +=, zb, *, xb, ttB, =, ya, /, epsA, za, =, temp, *, ya, HEX_40000000, final, double, yaa, -, +, ya, temp, temp, final, double, yab, -, ya, yaa, =, temp, *, za, HEX_40000000, final, double, zaa, -, +, za, temp, temp, final, double, zab, -, za, zaa, =, yb, /, -, -, -, -, epsA, *, yaa, zaa, *, yaa, zab, *, yab, zaa, *, yab, zab, za, +=, yb, /, /, *, -, epsA, zb, za, za, +=, yb, /, epsB, za, =, epsA, ya, =, epsB, yb, final, double, epsA2, *, epsA, epsA, =, yb, 0.07490822288864472, =, yb, -, *, yb, epsA2, 0.09088450866185192, =, yb, +, *, yb, epsA2, 0.11111095942313305, =, yb, -, *, yb, epsA2, 0.1428571423679182, =, yb, +, *, yb, epsA2, 0.19999999999923582, =, yb, -, *, yb, epsA2, 0.33333333333333287, =, yb, *, yb, epsA2, epsA, =, ya, epsA, =, temp, +, ya, yb, =, yb, -, -, temp, ya, yb, =, ya, temp, +=, yb, /, epsB, +, 1d, *, epsA, epsA, final, double, eighths, EIGHTHS, idx, double, za, +, eighths, ya, double, zb, -, -, za, eighths, ya, =, temp, +, za, yb, +=, zb, -, -, temp, za, yb, =, za, temp, double, result, +, za, zb, if, leftPlane, final, double, resultb, -, -, result, za, zb, final, double, pia, *, 1.5707963267948966, 2, final, double, pib, *, 6.123233995736766E-17, 2, =, za, -, pia, result, =, zb, -, +, -, za, pia, result, +=, zb, -, pib, resultb, =, result, +, za, zb, if, ^, negate, leftPlane, =, result, -, result, return, result]
org.apache.commons.math4.util:FastMath:atan2:double+double#[if, ||, Double, isNaN, x, Double, isNaN, y, return, Double.NaN, if, ==, y, 0, final, double, result, *, x, y, final, double, invx, /, 1d, x, final, double, invy, /, 1d, y, if, ==, invx, 0, if, >, x, 0, return, y, return, copySign, Math.PI, y, if, ||, <, x, 0, <, invx, 0, if, ||, <, y, 0, <, invy, 0, return, -, Math.PI, return, Math.PI, return, result, if, ==, y, Double.POSITIVE_INFINITY, if, ==, x, Double.POSITIVE_INFINITY, return, *, Math.PI, F_1_4, if, ==, x, Double.NEGATIVE_INFINITY, return, *, Math.PI, F_3_4, return, *, Math.PI, F_1_2, if, ==, y, Double.NEGATIVE_INFINITY, if, ==, x, Double.POSITIVE_INFINITY, return, *, -, Math.PI, F_1_4, if, ==, x, Double.NEGATIVE_INFINITY, return, *, -, Math.PI, F_3_4, return, *, -, Math.PI, F_1_2, if, ==, x, Double.POSITIVE_INFINITY, if, ||, >, y, 0, >, /, 1, y, 0, return, 0d, if, ||, <, y, 0, <, /, 1, y, 0, return, -, 0d, if, ==, x, Double.NEGATIVE_INFINITY, if, ||, >, y, 0.0, >, /, 1, y, 0.0, return, Math.PI, if, ||, <, y, 0, <, /, 1, y, 0, return, -, Math.PI, if, ==, x, 0, if, ||, >, y, 0, >, /, 1, y, 0, return, *, Math.PI, F_1_2, if, ||, <, y, 0, <, /, 1, y, 0, return, *, -, Math.PI, F_1_2, final, double, r, /, y, x, if, Double, isInfinite, r, return, atan, r, 0, <, x, 0, double, ra, doubleHighPart, r, double, rb, -, r, ra, final, double, xa, doubleHighPart, x, final, double, xb, -, x, xa, +=, rb, /, -, -, -, -, y, *, ra, xa, *, ra, xb, *, rb, xa, *, rb, xb, x, final, double, temp, +, ra, rb, =, rb, -, -, temp, ra, rb, =, ra, temp, if, ==, ra, 0, =, ra, copySign, 0d, y, final, double, result, atan, ra, rb, <, x, 0, return, result]
org.apache.commons.math4.util:FastMath:asin:double#[if, Double, isNaN, x, return, Double.NaN, if, ||, >, x, 1.0, <, x, -, 1.0, return, Double.NaN, if, ==, x, 1.0, return, /, Math.PI, 2.0, if, ==, x, -, 1.0, return, /, -, Math.PI, 2.0, if, ==, x, 0.0, return, x, double, temp, *, x, HEX_40000000, final, double, xa, -, +, x, temp, temp, final, double, xb, -, x, xa, double, ya, *, xa, xa, double, yb, +, *, xa, xb, 2.0, *, xb, xb, =, ya, -, ya, =, yb, -, yb, double, za, +, 1.0, ya, double, zb, -, -, za, 1.0, ya, =, temp, +, za, yb, +=, zb, -, -, temp, za, yb, =, za, temp, double, y, =, y, sqrt, za, =, temp, *, y, HEX_40000000, =, ya, -, +, y, temp, temp, =, yb, -, y, ya, +=, yb, /, -, -, -, za, *, ya, ya, *, 2, ya, yb, *, yb, yb, *, 2.0, y, double, dx, /, zb, *, 2.0, y, double, r, /, x, y, =, temp, *, r, HEX_40000000, double, ra, -, +, r, temp, temp, double, rb, -, r, ra, +=, rb, /, -, -, -, -, x, *, ra, ya, *, ra, yb, *, rb, ya, *, rb, yb, y, +=, rb, /, /, *, -, x, dx, y, y, =, temp, +, ra, rb, =, rb, -, -, temp, ra, rb, =, ra, temp, return, atan, ra, rb, false]
org.apache.commons.math4.util:FastMath:acos:double#[if, Double, isNaN, x, return, Double.NaN, if, ||, >, x, 1.0, <, x, -, 1.0, return, Double.NaN, if, ==, x, -, 1.0, return, Math.PI, if, ==, x, 1.0, return, 0.0, if, ==, x, 0, return, /, Math.PI, 2.0, double, temp, *, x, HEX_40000000, final, double, xa, -, +, x, temp, temp, final, double, xb, -, x, xa, double, ya, *, xa, xa, double, yb, +, *, xa, xb, 2.0, *, xb, xb, =, ya, -, ya, =, yb, -, yb, double, za, +, 1.0, ya, double, zb, -, -, za, 1.0, ya, =, temp, +, za, yb, +=, zb, -, -, temp, za, yb, =, za, temp, double, y, sqrt, za, =, temp, *, y, HEX_40000000, =, ya, -, +, y, temp, temp, =, yb, -, y, ya, +=, yb, /, -, -, -, za, *, ya, ya, *, 2, ya, yb, *, yb, yb, *, 2.0, y, +=, yb, /, zb, *, 2.0, y, =, y, +, ya, yb, =, yb, -, -, y, ya, yb, double, r, /, y, x, if, Double, isInfinite, r, return, /, Math.PI, 2, double, ra, doubleHighPart, r, double, rb, -, r, ra, +=, rb, /, -, -, -, -, y, *, ra, xa, *, ra, xb, *, rb, xa, *, rb, xb, x, +=, rb, /, yb, x, =, temp, +, ra, rb, =, rb, -, -, temp, ra, rb, =, ra, temp, return, atan, ra, rb, <, x, 0]
org.apache.commons.math4.util:FastMath:cbrt:double#[long, inbits, Double, doubleToRawLongBits, x, int, exponent, -, int, &, >>, inbits, 52, 0x7ff, 1023, boolean, subnormal, false, if, ==, exponent, -, 1023, if, ==, x, 0, return, x, =, subnormal, true, *=, x, 1.8014398509481984E16, =, inbits, Double, doubleToRawLongBits, x, =, exponent, -, int, &, >>, inbits, 52, 0x7ff, 1023, if, ==, exponent, 1024, return, x, int, exp3, /, exponent, 3, double, p2, Double, longBitsToDouble, |, &, inbits, 0x8000000000000000L, <<, long, &, +, exp3, 1023, 0x7ff, 52, final, double, mant, Double, longBitsToDouble, |, &, inbits, 0x000fffffffffffffL, 0x3ff0000000000000L, double, est, -, 0.010714690733195933, =, est, +, *, est, mant, 0.0875862700108075, =, est, +, *, est, mant, -, 0.3058015757857271, =, est, +, *, est, mant, 0.7249995199969751, =, est, +, *, est, mant, 0.5039018405998233, *=, est, CBRTTWO, +, %, exponent, 3, 2, final, double, xs, /, x, *, p2, p2, p2, +=, est, /, -, xs, *, est, est, est, *, 3, est, est, +=, est, /, -, xs, *, est, est, est, *, 3, est, est, double, temp, *, est, HEX_40000000, double, ya, -, +, est, temp, temp, double, yb, -, est, ya, double, za, *, ya, ya, double, zb, +, *, ya, yb, 2.0, *, yb, yb, =, temp, *, za, HEX_40000000, double, temp2, -, +, za, temp, temp, +=, zb, -, za, temp2, =, za, temp2, =, zb, +, +, *, za, yb, *, ya, zb, *, zb, yb, *=, za, ya, double, na, -, xs, za, double, nb, -, +, -, na, xs, za, -=, nb, zb, +=, est, /, +, na, nb, *, 3, est, est, *=, est, p2, if, subnormal, *=, est, 3.814697265625E-6, return, est]
org.apache.commons.math4.util:FastMath:toRadians:double#[if, ||, Double, isInfinite, x, ==, x, 0.0, return, x, final, double, facta, 0.01745329052209854, final, double, factb, 1.997844754509471E-9, double, xa, doubleHighPart, x, double, xb, -, x, xa, double, result, +, +, +, *, xb, factb, *, xb, facta, *, xa, factb, *, xa, facta, if, ==, result, 0, *=, result, x, return, result]
org.apache.commons.math4.util:FastMath:toDegrees:double#[if, ||, Double, isInfinite, x, ==, x, 0.0, return, x, final, double, facta, 57.2957763671875, final, double, factb, 3.145894820876798E-6, double, xa, doubleHighPart, x, double, xb, -, x, xa, return, +, +, +, *, xb, factb, *, xb, facta, *, xa, factb, *, xa, facta]
org.apache.commons.math4.util:FastMath:abs:int#[final, int, i, >>>, x, 31, return, +, ^, x, +, ~, i, 1, i]
org.apache.commons.math4.util:FastMath:abs:long#[final, long, l, >>>, x, 63, return, +, ^, x, +, ~, l, 1, l]
org.apache.commons.math4.util:FastMath:abs:float#[return, Float, intBitsToFloat, &, MASK_NON_SIGN_INT, Float, floatToRawIntBits, x]
org.apache.commons.math4.util:FastMath:abs:double#[return, Double, longBitsToDouble, &, MASK_NON_SIGN_LONG, Double, doubleToRawLongBits, x]
org.apache.commons.math4.util:FastMath:ulp:double#[if, Double, isInfinite, x, return, Double.POSITIVE_INFINITY, return, abs, -, x, Double, longBitsToDouble, ^, Double, doubleToRawLongBits, x, 1]
org.apache.commons.math4.util:FastMath:ulp:float#[if, Float, isInfinite, x, return, Float.POSITIVE_INFINITY, return, abs, -, x, Float, intBitsToFloat, ^, Float, floatToIntBits, x, 1]
org.apache.commons.math4.util:FastMath:scalb:double+int#[if, &&, >, n, -, 1023, <, n, 1024, return, *, d, Double, longBitsToDouble, <<, long, +, n, 1023, 52, if, ||, Double, isNaN, d, Double, isInfinite, d, ==, d, 0, return, d, if, <, n, -, 2098, return, >, d, 0, 0.0, -, 0.0, if, >, n, 2097, return, >, d, 0, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, final, long, bits, Double, doubleToRawLongBits, d, final, long, sign, &, bits, 0x8000000000000000L, int, exponent, &, int, >>>, bits, 52, 0x7ff, long, mantissa, &, bits, 0x000fffffffffffffL, int, scaledExponent, +, exponent, n, if, <, n, 0, if, >, scaledExponent, 0, return, Double, longBitsToDouble, |, sign, <<, long, scaledExponent, 52, mantissa, if, >, scaledExponent, -, 53, |=, mantissa, <<, 1L, 52, final, long, mostSignificantLostBit, &, mantissa, <<, 1L, -, scaledExponent, >>>=, mantissa, -, 1, scaledExponent, if, !=, mostSignificantLostBit, 0, ++, mantissa, return, Double, longBitsToDouble, |, sign, mantissa, return, ==, sign, 0L, 0.0, -, 0.0, if, ==, exponent, 0, while, !=, >>>, mantissa, 52, 1, <<=, mantissa, 1, --, scaledExponent, ++, scaledExponent, &=, mantissa, 0x000fffffffffffffL, if, <, scaledExponent, 2047, return, Double, longBitsToDouble, |, sign, <<, long, scaledExponent, 52, mantissa, return, ==, sign, 0L, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, if, <, scaledExponent, 2047, return, Double, longBitsToDouble, |, sign, <<, long, scaledExponent, 52, mantissa, return, ==, sign, 0L, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:scalb:float+int#[if, &&, >, n, -, 127, <, n, 128, return, *, f, Float, intBitsToFloat, <<, +, n, 127, 23, if, ||, Float, isNaN, f, Float, isInfinite, f, ==, f, 0f, return, f, if, <, n, -, 277, return, >, f, 0, 0.0f, -, 0.0f, if, >, n, 276, return, >, f, 0, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, final, int, bits, Float, floatToIntBits, f, final, int, sign, &, bits, 0x80000000, int, exponent, &, >>>, bits, 23, 0xff, int, mantissa, &, bits, 0x007fffff, int, scaledExponent, +, exponent, n, if, <, n, 0, if, >, scaledExponent, 0, return, Float, intBitsToFloat, |, sign, <<, scaledExponent, 23, mantissa, if, >, scaledExponent, -, 24, |=, mantissa, <<, 1, 23, final, int, mostSignificantLostBit, &, mantissa, <<, 1, -, scaledExponent, >>>=, mantissa, -, 1, scaledExponent, if, !=, mostSignificantLostBit, 0, ++, mantissa, return, Float, intBitsToFloat, |, sign, mantissa, return, ==, sign, 0, 0.0f, -, 0.0f, if, ==, exponent, 0, while, !=, >>>, mantissa, 23, 1, <<=, mantissa, 1, --, scaledExponent, ++, scaledExponent, &=, mantissa, 0x007fffff, if, <, scaledExponent, 255, return, Float, intBitsToFloat, |, sign, <<, scaledExponent, 23, mantissa, return, ==, sign, 0, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, if, <, scaledExponent, 255, return, Float, intBitsToFloat, |, sign, <<, scaledExponent, 23, mantissa, return, ==, sign, 0, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextAfter:double+double#[if, ||, Double, isNaN, d, Double, isNaN, direction, return, Double.NaN, if, ==, d, direction, return, direction, if, Double, isInfinite, d, return, <, d, 0, -, Double.MAX_VALUE, Double.MAX_VALUE, if, ==, d, 0, return, <, direction, 0, -, Double.MIN_VALUE, Double.MIN_VALUE, final, long, bits, Double, doubleToRawLongBits, d, final, long, sign, &, bits, 0x8000000000000000L, if, ^, <, direction, d, ==, sign, 0L, return, Double, longBitsToDouble, |, sign, +, &, bits, 0x7fffffffffffffffL, 1, return, Double, longBitsToDouble, |, sign, -, &, bits, 0x7fffffffffffffffL, 1]
org.apache.commons.math4.util:FastMath:nextAfter:float+double#[if, ||, Double, isNaN, f, Double, isNaN, direction, return, Float.NaN, if, ==, f, direction, return, float, direction, if, Float, isInfinite, f, return, <, f, 0f, -, Float.MAX_VALUE, Float.MAX_VALUE, if, ==, f, 0f, return, <, direction, 0, -, Float.MIN_VALUE, Float.MIN_VALUE, final, int, bits, Float, floatToIntBits, f, final, int, sign, &, bits, 0x80000000, if, ^, <, direction, f, ==, sign, 0, return, Float, intBitsToFloat, |, sign, +, &, bits, 0x7fffffff, 1, return, Float, intBitsToFloat, |, sign, -, &, bits, 0x7fffffff, 1]
org.apache.commons.math4.util:FastMath:floor:double#[long, y, if, Double, isNaN, x, return, x, if, ||, >=, x, TWO_POWER_52, <=, x, -, TWO_POWER_52, return, x, =, y, long, x, if, &&, <, x, 0, !=, y, x, --, y, if, ==, y, 0, return, *, x, y, return, y]
org.apache.commons.math4.util:FastMath:ceil:double#[double, y, if, Double, isNaN, x, return, x, =, y, floor, x, if, ==, y, x, return, y, +=, y, 1.0, if, ==, y, 0, return, *, x, y, return, y]
org.apache.commons.math4.util:FastMath:rint:double#[double, y, floor, x, double, d, -, x, y, if, >, d, 0.5, if, ==, y, -, 1.0, return, -, 0.0, return, +, y, 1.0, if, <, d, 0.5, return, y, long, z, long, y, return, ==, &, z, 1, 0, y, +, y, 1.0]
org.apache.commons.math4.util:FastMath:round:double#[return, long, floor, +, x, 0.5]
org.apache.commons.math4.util:FastMath:round:float#[return, int, floor, +, x, 0.5f]
org.apache.commons.math4.util:FastMath:min:int+int#[return, <=, a, b, a, b]
org.apache.commons.math4.util:FastMath:min:long+long#[return, <=, a, b, a, b]
org.apache.commons.math4.util:FastMath:min:float+float#[if, >, a, b, return, b, if, <, a, b, return, a, if, !=, a, b, return, Float.NaN, int, bits, Float, floatToRawIntBits, a, if, ==, bits, 0x80000000, return, a, return, b]
org.apache.commons.math4.util:FastMath:min:double+double#[if, >, a, b, return, b, if, <, a, b, return, a, if, !=, a, b, return, Double.NaN, long, bits, Double, doubleToRawLongBits, a, if, ==, bits, 0x8000000000000000L, return, a, return, b]
org.apache.commons.math4.util:FastMath:max:int+int#[return, <=, a, b, b, a]
org.apache.commons.math4.util:FastMath:max:long+long#[return, <=, a, b, b, a]
org.apache.commons.math4.util:FastMath:max:float+float#[if, >, a, b, return, a, if, <, a, b, return, b, if, !=, a, b, return, Float.NaN, int, bits, Float, floatToRawIntBits, a, if, ==, bits, 0x80000000, return, b, return, a]
org.apache.commons.math4.util:FastMath:max:double+double#[if, >, a, b, return, a, if, <, a, b, return, b, if, !=, a, b, return, Double.NaN, long, bits, Double, doubleToRawLongBits, a, if, ==, bits, 0x8000000000000000L, return, b, return, a]
org.apache.commons.math4.util:FastMath:hypot:double+double#[if, ||, Double, isInfinite, x, Double, isInfinite, y, return, Double.POSITIVE_INFINITY, if, ||, Double, isNaN, x, Double, isNaN, y, return, Double.NaN, final, int, expX, getExponent, x, final, int, expY, getExponent, y, if, >, expX, +, expY, 27, return, abs, x, if, >, expY, +, expX, 27, return, abs, y, final, int, middleExp, /, +, expX, expY, 2, final, double, scaledX, scalb, x, -, middleExp, final, double, scaledY, scalb, y, -, middleExp, final, double, scaledH, sqrt, +, *, scaledX, scaledX, *, scaledY, scaledY, return, scalb, scaledH, middleExp]
org.apache.commons.math4.util:FastMath:IEEEremainder:double+double#[if, ||, ||, ==, getExponent, dividend, 1024, ==, getExponent, divisor, 1024, ==, divisor, 0.0, if, &&, Double, isInfinite, divisor, !, Double, isInfinite, dividend, return, dividend, return, Double.NaN, final, double, n, FastMath, rint, /, dividend, divisor, final, double, remainder, Double, isInfinite, n, 0.0, -, dividend, *, divisor, n, return, ==, remainder, 0, FastMath, copySign, remainder, dividend, remainder]
org.apache.commons.math4.util:FastMath:toIntExact:long#[if, ||, <, n, Integer.MIN_VALUE, >, n, Integer.MAX_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW, return, int, n]
org.apache.commons.math4.util:FastMath:incrementExact:int#[if, ==, n, Integer.MAX_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, n, 1, return, +, n, 1]
org.apache.commons.math4.util:FastMath:incrementExact:long#[if, ==, n, Long.MAX_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, n, 1, return, +, n, 1]
org.apache.commons.math4.util:FastMath:decrementExact:int#[if, ==, n, Integer.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, n, 1, return, -, n, 1]
org.apache.commons.math4.util:FastMath:decrementExact:long#[if, ==, n, Long.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, n, 1, return, -, n, 1]
org.apache.commons.math4.util:FastMath:addExact:int+int#[final, int, sum, +, a, b, if, &&, >=, ^, a, b, 0, <, ^, sum, b, 0, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, a, b, return, sum]
org.apache.commons.math4.util:FastMath:addExact:long+long#[final, long, sum, +, a, b, if, &&, >=, ^, a, b, 0, <, ^, sum, b, 0, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, a, b, return, sum]
org.apache.commons.math4.util:FastMath:subtractExact:int+int#[final, int, sub, -, a, b, if, &&, <, ^, a, b, 0, >=, ^, sub, b, 0, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, a, b, return, sub]
org.apache.commons.math4.util:FastMath:subtractExact:long+long#[final, long, sub, -, a, b, if, &&, <, ^, a, b, 0, >=, ^, sub, b, 0, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, a, b, return, sub]
org.apache.commons.math4.util:FastMath:multiplyExact:int+int#[if, ||, &&, >, b, 0, ||, >, a, /, Integer.MAX_VALUE, b, <, a, /, Integer.MIN_VALUE, b, &&, <, b, -, 1, ||, >, a, /, Integer.MIN_VALUE, b, <, a, /, Integer.MAX_VALUE, b, &&, ==, b, -, 1, ==, a, Integer.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_MULTIPLICATION, a, b, return, *, a, b]
org.apache.commons.math4.util:FastMath:multiplyExact:long+long#[if, ||, &&, >, b, 0l, ||, >, a, /, Long.MAX_VALUE, b, <, a, /, Long.MIN_VALUE, b, &&, <, b, -, 1l, ||, >, a, /, Long.MIN_VALUE, b, <, a, /, Long.MAX_VALUE, b, &&, ==, b, -, 1l, ==, a, Long.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_MULTIPLICATION, a, b, return, *, a, b]
org.apache.commons.math4.util:FastMath:floorDiv:int+int#[if, ==, b, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, final, int, m, %, a, b, if, ||, >=, ^, a, b, 0, ==, m, 0, return, /, a, b, return, -, /, a, b, 1]
org.apache.commons.math4.util:FastMath:floorDiv:long+long#[if, ==, b, 0l, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, final, long, m, %, a, b, if, ||, >=, ^, a, b, 0l, ==, m, 0l, return, /, a, b, return, -, /, a, b, 1l]
org.apache.commons.math4.util:FastMath:floorMod:int+int#[if, ==, b, 0, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, final, int, m, %, a, b, if, ||, >=, ^, a, b, 0, ==, m, 0, return, m, return, +, b, m]
org.apache.commons.math4.util:FastMath:floorMod:long+long#[if, ==, b, 0l, throw, new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, final, long, m, %, a, b, if, ||, >=, ^, a, b, 0l, ==, m, 0l, return, m, return, +, b, m]
org.apache.commons.math4.util:FastMath:copySign:double+double#[final, long, m, Double, doubleToRawLongBits, magnitude, final, long, s, Double, doubleToRawLongBits, sign, if, >=, ^, m, s, 0, return, magnitude, return, -, magnitude]
org.apache.commons.math4.util:FastMath:copySign:float+float#[final, int, m, Float, floatToRawIntBits, magnitude, final, int, s, Float, floatToRawIntBits, sign, if, >=, ^, m, s, 0, return, magnitude, return, -, magnitude]
org.apache.commons.math4.util:FastMath:getExponent:double#[return, -, int, &, >>>, Double, doubleToRawLongBits, d, 52, 0x7ff, 1023]
org.apache.commons.math4.util:FastMath:getExponent:float#[return, -, &, >>>, Float, floatToRawIntBits, f, 23, 0xff, 127]
org.apache.commons.math4.util:FastMathCalc:buildSinCosTables:double[]+double[]+double[]+double[]+int+double[]+double[]#[final, double, result, double, 2, for, int, i, 0, <, i, 7, ++, i, double, x, /, i, 8.0, slowSin, x, result, =, SINE_TABLE_A, i, result, 0, =, SINE_TABLE_B, i, result, 1, slowCos, x, result, =, COSINE_TABLE_A, i, result, 0, =, COSINE_TABLE_B, i, result, 1, for, int, i, 7, <, i, SINE_TABLE_LEN, ++, i, double, xs, double, 2, double, ys, double, 2, double, as, double, 2, double, bs, double, 2, double, temps, double, 2, if, ==, &, i, 1, 0, =, xs, 0, SINE_TABLE_A, /, i, 2, =, xs, 1, SINE_TABLE_B, /, i, 2, =, ys, 0, COSINE_TABLE_A, /, i, 2, =, ys, 1, COSINE_TABLE_B, /, i, 2, splitMult, xs, ys, result, =, SINE_TABLE_A, i, *, result, 0, 2.0, =, SINE_TABLE_B, i, *, result, 1, 2.0, splitMult, ys, ys, as, splitMult, xs, xs, temps, =, temps, 0, -, temps, 0, =, temps, 1, -, temps, 1, splitAdd, as, temps, result, =, COSINE_TABLE_A, i, result, 0, =, COSINE_TABLE_B, i, result, 1, =, xs, 0, SINE_TABLE_A, /, i, 2, =, xs, 1, SINE_TABLE_B, /, i, 2, =, ys, 0, COSINE_TABLE_A, /, i, 2, =, ys, 1, COSINE_TABLE_B, /, i, 2, =, as, 0, SINE_TABLE_A, +, /, i, 2, 1, =, as, 1, SINE_TABLE_B, +, /, i, 2, 1, =, bs, 0, COSINE_TABLE_A, +, /, i, 2, 1, =, bs, 1, COSINE_TABLE_B, +, /, i, 2, 1, splitMult, xs, bs, temps, splitMult, ys, as, result, splitAdd, result, temps, result, =, SINE_TABLE_A, i, result, 0, =, SINE_TABLE_B, i, result, 1, splitMult, ys, bs, result, splitMult, xs, as, temps, =, temps, 0, -, temps, 0, =, temps, 1, -, temps, 1, splitAdd, result, temps, result, =, COSINE_TABLE_A, i, result, 0, =, COSINE_TABLE_B, i, result, 1, for, int, i, 0, <, i, SINE_TABLE_LEN, ++, i, double, xs, double, 2, double, ys, double, 2, double, as, double, 2, =, as, 0, COSINE_TABLE_A, i, =, as, 1, COSINE_TABLE_B, i, splitReciprocal, as, ys, =, xs, 0, SINE_TABLE_A, i, =, xs, 1, SINE_TABLE_B, i, splitMult, xs, ys, as, =, TANGENT_TABLE_A, i, as, 0, =, TANGENT_TABLE_B, i, as, 1]
org.apache.commons.math4.util:FastMathCalc:slowCos:double+double#[final, double, xs, double, 2, final, double, ys, double, 2, final, double, facts, double, 2, final, double, as, double, 2, split, x, xs, =, ys, 0, =, ys, 1, 0.0, for, int, i, -, FACT.length, 1, >=, i, 0, --, i, splitMult, xs, ys, as, =, ys, 0, as, 0, =, ys, 1, as, 1, if, !=, &, i, 1, 0, continue, split, FACT, i, as, splitReciprocal, as, facts, if, !=, &, i, 2, 0, =, facts, 0, -, facts, 0, =, facts, 1, -, facts, 1, splitAdd, ys, facts, as, =, ys, 0, as, 0, =, ys, 1, as, 1, if, !=, result, null, =, result, 0, ys, 0, =, result, 1, ys, 1, return, +, ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:slowSin:double+double#[final, double, xs, double, 2, final, double, ys, double, 2, final, double, facts, double, 2, final, double, as, double, 2, split, x, xs, =, ys, 0, =, ys, 1, 0.0, for, int, i, -, FACT.length, 1, >=, i, 0, --, i, splitMult, xs, ys, as, =, ys, 0, as, 0, =, ys, 1, as, 1, if, ==, &, i, 1, 0, continue, split, FACT, i, as, splitReciprocal, as, facts, if, !=, &, i, 2, 0, =, facts, 0, -, facts, 0, =, facts, 1, -, facts, 1, splitAdd, ys, facts, as, =, ys, 0, as, 0, =, ys, 1, as, 1, if, !=, result, null, =, result, 0, ys, 0, =, result, 1, ys, 1, return, +, ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:slowexp:double+double#[final, double, xs, double, 2, final, double, ys, double, 2, final, double, facts, double, 2, final, double, as, double, 2, split, x, xs, =, ys, 0, =, ys, 1, 0.0, for, int, i, -, FACT.length, 1, >=, i, 0, --, i, splitMult, xs, ys, as, =, ys, 0, as, 0, =, ys, 1, as, 1, split, FACT, i, as, splitReciprocal, as, facts, splitAdd, ys, facts, as, =, ys, 0, as, 0, =, ys, 1, as, 1, if, !=, result, null, =, result, 0, ys, 0, =, result, 1, ys, 1, return, +, ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:split:double+double#[if, &&, <, d, 8e298, >, d, -, 8e298, final, double, a, *, d, HEX_40000000, =, split, 0, -, +, d, a, a, =, split, 1, -, d, split, 0, final, double, a, *, d, 9.31322574615478515625E-10, =, split, 0, *, -, +, d, a, d, HEX_40000000, =, split, 1, -, d, split, 0]
org.apache.commons.math4.util:FastMathCalc:resplit:double#[final, double, c, +, a, 0, a, 1, final, double, d, -, -, c, a, 0, a, 1, if, &&, <, c, 8e298, >, c, -, 8e298, double, z, *, c, HEX_40000000, =, a, 0, -, +, c, z, z, =, a, 1, +, -, c, a, 0, d, double, z, *, c, 9.31322574615478515625E-10, =, a, 0, *, -, +, c, z, c, HEX_40000000, =, a, 1, +, -, c, a, 0, d]
org.apache.commons.math4.util:FastMathCalc:splitMult:double+double+double#[=, ans, 0, *, a, 0, b, 0, =, ans, 1, +, +, *, a, 0, b, 1, *, a, 1, b, 0, *, a, 1, b, 1, resplit, ans]
org.apache.commons.math4.util:FastMathCalc:splitAdd:double+double+double#[=, ans, 0, +, a, 0, b, 0, =, ans, 1, +, a, 1, b, 1, resplit, ans]
org.apache.commons.math4.util:FastMathCalc:splitReciprocal:double+double#[final, double, b, /, 1.0, 4194304.0, final, double, a, -, 1.0, b, if, ==, in, 0, 0.0, =, in, 0, in, 1, =, in, 1, 0.0, =, result, 0, /, a, in, 0, =, result, 1, /, -, *, b, in, 0, *, a, in, 1, +, *, in, 0, in, 0, *, in, 0, in, 1, if, !=, result, 1, result, 1, =, result, 1, 0.0, resplit, result, for, int, i, 0, <, i, 2, ++, i, double, err, -, -, -, -, 1.0, *, result, 0, in, 0, *, result, 0, in, 1, *, result, 1, in, 0, *, result, 1, in, 1, *=, err, +, result, 0, result, 1, +=, result, 1, err]
org.apache.commons.math4.util:FastMathCalc:quadMult:double+double+double#[final, double, xs, double, 2, final, double, ys, double, 2, final, double, zs, double, 2, split, a, 0, xs, split, b, 0, ys, splitMult, xs, ys, zs, =, result, 0, zs, 0, =, result, 1, zs, 1, split, b, 1, ys, splitMult, xs, ys, zs, double, tmp, +, result, 0, zs, 0, -=, result, 1, -, tmp, result, 0, zs, 0, =, result, 0, tmp, =, tmp, +, result, 0, zs, 1, -=, result, 1, -, tmp, result, 0, zs, 1, =, result, 0, tmp, split, a, 1, xs, split, b, 0, ys, splitMult, xs, ys, zs, =, tmp, +, result, 0, zs, 0, -=, result, 1, -, tmp, result, 0, zs, 0, =, result, 0, tmp, =, tmp, +, result, 0, zs, 1, -=, result, 1, -, tmp, result, 0, zs, 1, =, result, 0, tmp, split, a, 1, xs, split, b, 1, ys, splitMult, xs, ys, zs, =, tmp, +, result, 0, zs, 0, -=, result, 1, -, tmp, result, 0, zs, 0, =, result, 0, tmp, =, tmp, +, result, 0, zs, 1, -=, result, 1, -, tmp, result, 0, zs, 1, =, result, 0, tmp]
org.apache.commons.math4.util:FastMathCalc:expint:int+double#[final, double, xs, double, 2, final, double, as, double, 2, final, double, ys, double, 2, =, xs, 0, 2.718281828459045, =, xs, 1, 1.4456468917292502E-16, split, 1.0, ys, while, >, p, 0, if, !=, &, p, 1, 0, quadMult, ys, xs, as, =, ys, 0, as, 0, =, ys, 1, as, 1, quadMult, xs, xs, as, =, xs, 0, as, 0, =, xs, 1, as, 1, >>=, p, 1, if, !=, result, null, =, result, 0, ys, 0, =, result, 1, ys, 1, resplit, result, return, +, ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:slowLog:double#[double, x, double, 2, double, x2, double, 2, double, y, double, 2, double, a, double, 2, split, xi, x, +=, x, 0, 1.0, resplit, x, splitReciprocal, x, a, -=, x, 0, 2.0, resplit, x, splitMult, x, a, y, =, x, 0, y, 0, =, x, 1, y, 1, splitMult, x, x, x2, =, y, 0, LN_SPLIT_COEF, -, LN_SPLIT_COEF.length, 1, 0, =, y, 1, LN_SPLIT_COEF, -, LN_SPLIT_COEF.length, 1, 1, for, int, i, -, LN_SPLIT_COEF.length, 2, >=, i, 0, --, i, splitMult, y, x2, a, =, y, 0, a, 0, =, y, 1, a, 1, splitAdd, y, LN_SPLIT_COEF, i, a, =, y, 0, a, 0, =, y, 1, a, 1, splitMult, y, x, a, =, y, 0, a, 0, =, y, 1, a, 1, return, y]
org.apache.commons.math4.util:FastMathCalc:printarray:PrintStream+String+int+double[][]#[out, println, name, checkLen, expectedLen, array2d.length, out, println, +, TABLE_START_DECL, " ", int, i, 0, for, double, array, array2d, out, print, "        {", for, double, d, array, out, printf, "%-25.25s", format, d, out, println, +, "}, // ", ++, i, out, println, TABLE_END_DECL]
org.apache.commons.math4.util:FastMathCalc:printarray:PrintStream+String+int+double[]#[out, println, +, name, "=", checkLen, expectedLen, array.length, out, println, TABLE_START_DECL, for, double, d, array, out, printf, "        %s%n", format, d, out, println, TABLE_END_DECL]
org.apache.commons.math4.util:FastMathCalc:format:double#[if, !=, d, d, return, "Double.NaN,", return, +, >=, d, 0, "+", "", Double, toString, d, "d,"]
org.apache.commons.math4.util:FastMathCalc:checkLen:int+int#[if, !=, expectedLen, actual, throw, new, DimensionMismatchException, actual, expectedLen]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpIntA:null#[return, EXP_INT_A, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpIntB:null#[return, EXP_INT_B, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpFracA:null#[return, EXP_FRAC_A, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpFracB:null#[return, EXP_FRAC_B, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadLnMant:null#[return, LN_MANT, clone]
org.apache.commons.math4.util:Incrementor:setMaximalCount:int#[=, maximalCount, max]
org.apache.commons.math4.util:Incrementor:getMaximalCount:null#[return, maximalCount]
org.apache.commons.math4.util:Incrementor:getCount:null#[return, count]
org.apache.commons.math4.util:Incrementor:canIncrement:null#[return, <, count, maximalCount]
org.apache.commons.math4.util:Incrementor:incrementCount:int#[for, int, i, 0, <, i, value, ++, i, incrementCount]
org.apache.commons.math4.util:Incrementor:incrementCount:null#[if, >, ++, count, maximalCount, maxCountCallback, trigger, maximalCount]
org.apache.commons.math4.util:Incrementor:resetCount:null#[=, count, 0]
org.apache.commons.math4.util:IntegerSequence:range:int+int#[return, range, start, end, 1]
org.apache.commons.math4.util:IntegerSequence:range:int+int+int#[return, new, Range, start, max, step]
org.apache.commons.math4.util:IterationEvent:getIterations:null#[return, iterations]
org.apache.commons.math4.util:IterationManager:addIterationListener:IterationListener#[listeners, add, listener]
org.apache.commons.math4.util:IterationManager:fireInitializationEvent:IterationEvent#[for, IterationListener, l, listeners, l, initializationPerformed, e]
org.apache.commons.math4.util:IterationManager:fireIterationPerformedEvent:IterationEvent#[for, IterationListener, l, listeners, l, iterationPerformed, e]
org.apache.commons.math4.util:IterationManager:fireIterationStartedEvent:IterationEvent#[for, IterationListener, l, listeners, l, iterationStarted, e]
org.apache.commons.math4.util:IterationManager:fireTerminationEvent:IterationEvent#[for, IterationListener, l, listeners, l, terminationPerformed, e]
org.apache.commons.math4.util:IterationManager:getIterations:null#[return, iterations, getCount]
org.apache.commons.math4.util:IterationManager:getMaxIterations:null#[return, iterations, getMaximalCount]
org.apache.commons.math4.util:IterationManager:incrementIterationCount:null#[iterations, incrementCount]
org.apache.commons.math4.util:IterationManager:removeIterationListener:IterationListener#[listeners, remove, listener]
org.apache.commons.math4.util:IterationManager:resetIterationCount:null#[iterations, resetCount]
org.apache.commons.math4.util:KthSelector:getPivotingStrategy:null#[return, pivotingStrategy]
org.apache.commons.math4.util:KthSelector:select:double[]+int[]+int#[int, begin, 0, int, end, work.length, int, node, 0, final, boolean, usePivotsHeap, !=, pivotsHeap, null, while, >, -, end, begin, MIN_SELECT_SIZE, final, int, pivot, if, &&, &&, usePivotsHeap, <, node, pivotsHeap.length, >=, pivotsHeap, node, 0, =, pivot, pivotsHeap, node, =, pivot, partition, work, begin, end, pivotingStrategy, pivotIndex, work, begin, end, if, &&, usePivotsHeap, <, node, pivotsHeap.length, =, pivotsHeap, node, pivot, if, ==, k, pivot, return, work, k, if, <, k, pivot, =, end, pivot, =, node, FastMath, min, +, *, 2, node, 1, usePivotsHeap, pivotsHeap.length, end, =, begin, +, pivot, 1, =, node, FastMath, min, +, *, 2, node, 2, usePivotsHeap, pivotsHeap.length, end, Arrays, sort, work, begin, end, return, work, k]
org.apache.commons.math4.util:KthSelector:partition:double[]+int+int+int#[final, double, value, work, pivot, =, work, pivot, work, begin, int, i, +, begin, 1, int, j, -, end, 1, while, <, i, j, while, &&, <, i, j, >, work, j, value, --, j, while, &&, <, i, j, <, work, i, value, ++, i, if, <, i, j, final, double, tmp, work, i, =, work, ++, i, work, j, =, work, --, j, tmp, if, ||, >=, i, end, >, work, i, value, --, i, =, work, begin, work, i, =, work, i, value, return, i]
org.apache.commons.math4.util:MathArrays:scale:double+double[]#[double, newArr, double, arr.length, for, int, i, 0, <, i, arr.length, ++, i, =, newArr, i, *, arr, i, val, return, newArr]
org.apache.commons.math4.util:MathArrays:scaleInPlace:double+double[]#[for, int, i, 0, <, i, arr.length, ++, i, *=, arr, i, val]
org.apache.commons.math4.util:MathArrays:ebeAdd:double[]+double[]#[checkEqualLength, a, b, final, double, result, a, clone, for, int, i, 0, <, i, a.length, ++, i, +=, result, i, b, i, return, result]
org.apache.commons.math4.util:MathArrays:ebeSubtract:double[]+double[]#[checkEqualLength, a, b, final, double, result, a, clone, for, int, i, 0, <, i, a.length, ++, i, -=, result, i, b, i, return, result]
org.apache.commons.math4.util:MathArrays:ebeMultiply:double[]+double[]#[checkEqualLength, a, b, final, double, result, a, clone, for, int, i, 0, <, i, a.length, ++, i, *=, result, i, b, i, return, result]
org.apache.commons.math4.util:MathArrays:ebeDivide:double[]+double[]#[checkEqualLength, a, b, final, double, result, a, clone, for, int, i, 0, <, i, a.length, ++, i, /=, result, i, b, i, return, result]
org.apache.commons.math4.util:MathArrays:distance1:double[]+double[]#[checkEqualLength, p1, p2, double, sum, 0, for, int, i, 0, <, i, p1.length, ++, i, +=, sum, FastMath, abs, -, p1, i, p2, i, return, sum]
org.apache.commons.math4.util:MathArrays:distance1:int[]+int[]#[checkEqualLength, p1, p2, int, sum, 0, for, int, i, 0, <, i, p1.length, ++, i, +=, sum, FastMath, abs, -, p1, i, p2, i, return, sum]
org.apache.commons.math4.util:MathArrays:distance:double[]+double[]#[checkEqualLength, p1, p2, double, sum, 0, for, int, i, 0, <, i, p1.length, ++, i, final, double, dp, -, p1, i, p2, i, +=, sum, *, dp, dp, return, FastMath, sqrt, sum]
org.apache.commons.math4.util:MathArrays:cosAngle:double[]+double[]#[return, /, linearCombination, v1, v2, *, safeNorm, v1, safeNorm, v2]
org.apache.commons.math4.util:MathArrays:distance:int[]+int[]#[checkEqualLength, p1, p2, double, sum, 0, for, int, i, 0, <, i, p1.length, ++, i, final, double, dp, -, p1, i, p2, i, +=, sum, *, dp, dp, return, FastMath, sqrt, sum]
org.apache.commons.math4.util:MathArrays:distanceInf:double[]+double[]#[checkEqualLength, p1, p2, double, max, 0, for, int, i, 0, <, i, p1.length, ++, i, =, max, FastMath, max, max, FastMath, abs, -, p1, i, p2, i, return, max]
org.apache.commons.math4.util:MathArrays:distanceInf:int[]+int[]#[checkEqualLength, p1, p2, int, max, 0, for, int, i, 0, <, i, p1.length, ++, i, =, max, FastMath, max, max, FastMath, abs, -, p1, i, p2, i, return, max]
org.apache.commons.math4.util:MathArrays:isMonotonic:T[]+OrderDirection+boolean#[T, previous, val, 0, final, int, max, val.length, for, int, i, 1, <, i, max, ++, i, final, int, comp, switch, dir, case, INCREASING, =, comp, previous, compareTo, val, i, if, strict, if, >=, comp, 0, return, false, if, >, comp, 0, return, false, break, case, DECREASING, =, comp, val, i, compareTo, previous, if, strict, if, >=, comp, 0, return, false, if, >, comp, 0, return, false, break, default, throw, new, MathInternalError, =, previous, val, i, return, true]
org.apache.commons.math4.util:MathArrays:isMonotonic:double[]+OrderDirection+boolean#[return, checkOrder, val, dir, strict, false]
org.apache.commons.math4.util:MathArrays:checkEqualLength:double[]+double[]+boolean#[if, ==, a.length, b.length, return, true, if, abort, throw, new, DimensionMismatchException, a.length, b.length, return, false]
org.apache.commons.math4.util:MathArrays:checkEqualLength:double[]+double[]#[checkEqualLength, a, b, true]
org.apache.commons.math4.util:MathArrays:checkEqualLength:int[]+int[]+boolean#[if, ==, a.length, b.length, return, true, if, abort, throw, new, DimensionMismatchException, a.length, b.length, return, false]
org.apache.commons.math4.util:MathArrays:checkEqualLength:int[]+int[]#[checkEqualLength, a, b, true]
org.apache.commons.math4.util:MathArrays:checkOrder:double[]+OrderDirection+boolean+boolean#[double, previous, val, 0, final, int, max, val.length, int, index, ITEM, for, =, index, 1, <, index, max, ++, index, switch, dir, case, INCREASING, if, strict, if, <=, val, index, previous, break, ITEM, if, <, val, index, previous, break, ITEM, break, case, DECREASING, if, strict, if, >=, val, index, previous, break, ITEM, if, >, val, index, previous, break, ITEM, break, default, throw, new, MathInternalError, =, previous, val, index, if, ==, index, max, return, true, if, abort, throw, new, NonMonotonicSequenceException, val, index, previous, index, dir, strict, return, false]
org.apache.commons.math4.util:MathArrays:checkOrder:double[]+OrderDirection+boolean#[checkOrder, val, dir, strict, true]
org.apache.commons.math4.util:MathArrays:checkOrder:double[]#[checkOrder, val, OrderDirection.INCREASING, true]
org.apache.commons.math4.util:MathArrays:checkRectangular:long[][]#[MathUtils, checkNotNull, in, for, int, i, 1, <, i, in.length, ++, i, if, !=, in, i, length, in, 0, length, throw, new, DimensionMismatchException, LocalizedFormats.DIFFERENT_ROWS_LENGTHS, in, i, length, in, 0, length]
org.apache.commons.math4.util:MathArrays:checkPositive:double[]#[for, int, i, 0, <, i, in.length, ++, i, if, <=, in, i, 0, throw, new, NotStrictlyPositiveException, in, i]
org.apache.commons.math4.util:MathArrays:checkNotNaN:double[]#[for, int, i, 0, <, i, in.length, ++, i, if, Double, isNaN, in, i, throw, new, NotANumberException]
org.apache.commons.math4.util:MathArrays:checkNonNegative:long[]#[for, int, i, 0, <, i, in.length, ++, i, if, <, in, i, 0, throw, new, NotPositiveException, in, i]
org.apache.commons.math4.util:MathArrays:checkNonNegative:long[][]#[for, int, i, 0, <, i, in.length, ++, i, for, int, j, 0, <, j, in, i, length, ++, j, if, <, in, i, j, 0, throw, new, NotPositiveException, in, i, j]
org.apache.commons.math4.util:MathArrays:safeNorm:double[]#[double, rdwarf, 3.834e-20, double, rgiant, 1.304e+19, double, s1, 0, double, s2, 0, double, s3, 0, double, x1max, 0, double, x3max, 0, double, floatn, v.length, double, agiant, /, rgiant, floatn, for, int, i, 0, <, i, v.length, ++, i, double, xabs, FastMath, abs, v, i, if, ||, <, xabs, rdwarf, >, xabs, agiant, if, >, xabs, rdwarf, if, >, xabs, x1max, double, r, /, x1max, xabs, =, s1, +, 1, *, s1, r, r, =, x1max, xabs, double, r, /, xabs, x1max, +=, s1, *, r, r, if, >, xabs, x3max, double, r, /, x3max, xabs, =, s3, +, 1, *, s3, r, r, =, x3max, xabs, if, !=, xabs, 0, double, r, /, xabs, x3max, +=, s3, *, r, r, +=, s2, *, xabs, xabs, double, norm, if, !=, s1, 0, =, norm, *, x1max, Math, sqrt, +, s1, /, /, s2, x1max, x1max, if, ==, s2, 0, =, norm, *, x3max, Math, sqrt, s3, if, >=, s2, x3max, =, norm, Math, sqrt, *, s2, +, 1, *, /, x3max, s2, *, x3max, s3, =, norm, Math, sqrt, *, x3max, +, /, s2, x3max, *, x3max, s3, return, norm]
org.apache.commons.math4.util:MathArrays:sortInPlace:double[]+double[]...#[sortInPlace, x, OrderDirection.INCREASING, yList]
org.apache.commons.math4.util:MathArrays:sortInPlace:double[]+OrderDirection+double[]...#[if, ==, x, null, throw, new, NullArgumentException, final, int, yListLen, yList.length, final, int, len, x.length, for, int, j, 0, <, j, yListLen, ++, j, final, double, y, yList, j, if, ==, y, null, throw, new, NullArgumentException, if, !=, y.length, len, throw, new, DimensionMismatchException, y.length, len, final, List, PairDoubleInteger, list, new, ArrayList, PairDoubleInteger, len, for, int, i, 0, <, i, len, ++, i, list, add, new, PairDoubleInteger, x, i, i, final, Comparator, PairDoubleInteger, comp, ==, dir, MathArrays.OrderDirection.INCREASING, new, Comparator, PairDoubleInteger, Override, public, int, compare, PairDoubleInteger, o1, PairDoubleInteger, o2, return, Double, compare, o1, getKey, o2, getKey, new, Comparator, PairDoubleInteger, Override, public, int, compare, PairDoubleInteger, o1, PairDoubleInteger, o2, return, Double, compare, o2, getKey, o1, getKey, Collections, sort, list, comp, final, int, indices, int, len, for, int, i, 0, <, i, len, ++, i, final, PairDoubleInteger, e, list, get, i, =, x, i, e, getKey, =, indices, i, e, getValue, for, int, j, 0, <, j, yListLen, ++, j, final, double, yInPlace, yList, j, final, double, yOrig, yInPlace, clone, for, int, i, 0, <, i, len, ++, i, =, yInPlace, i, yOrig, indices, i]
org.apache.commons.math4.util:MathArrays:copyOf:int[]#[return, copyOf, source, source.length]
org.apache.commons.math4.util:MathArrays:copyOf:double[]#[return, copyOf, source, source.length]
org.apache.commons.math4.util:MathArrays:copyOf:int[]+int#[final, int, output, int, len, System, arraycopy, source, 0, output, 0, FastMath, min, len, source.length, return, output]
org.apache.commons.math4.util:MathArrays:copyOf:double[]+int#[final, double, output, double, len, System, arraycopy, source, 0, output, 0, FastMath, min, len, source.length, return, output]
org.apache.commons.math4.util:MathArrays:copyOfRange:double[]+int+int#[final, int, len, -, to, from, final, double, output, double, len, System, arraycopy, source, from, output, 0, FastMath, min, len, -, source.length, from, return, output]
org.apache.commons.math4.util:MathArrays:linearCombination:double[]+double[]#[checkEqualLength, a, b, final, int, len, a.length, if, ==, len, 1, return, *, a, 0, b, 0, final, double, prodHigh, double, len, double, prodLowSum, 0, for, int, i, 0, <, i, len, ++, i, final, double, ai, a, i, final, double, aHigh, Double, longBitsToDouble, &, Double, doubleToRawLongBits, ai, <<, -, 1L, 27, final, double, aLow, -, ai, aHigh, final, double, bi, b, i, final, double, bHigh, Double, longBitsToDouble, &, Double, doubleToRawLongBits, bi, <<, -, 1L, 27, final, double, bLow, -, bi, bHigh, =, prodHigh, i, *, ai, bi, final, double, prodLow, -, *, aLow, bLow, -, -, -, prodHigh, i, *, aHigh, bHigh, *, aLow, bHigh, *, aHigh, bLow, +=, prodLowSum, prodLow, final, double, prodHighCur, prodHigh, 0, double, prodHighNext, prodHigh, 1, double, sHighPrev, +, prodHighCur, prodHighNext, double, sPrime, -, sHighPrev, prodHighNext, double, sLowSum, +, -, prodHighNext, -, sHighPrev, sPrime, -, prodHighCur, sPrime, final, int, lenMinusOne, -, len, 1, for, int, i, 1, <, i, lenMinusOne, ++, i, =, prodHighNext, prodHigh, +, i, 1, final, double, sHighCur, +, sHighPrev, prodHighNext, =, sPrime, -, sHighCur, prodHighNext, +=, sLowSum, +, -, prodHighNext, -, sHighCur, sPrime, -, sHighPrev, sPrime, =, sHighPrev, sHighCur, double, result, +, sHighPrev, +, prodLowSum, sLowSum, if, Double, isNaN, result, =, result, 0, for, int, i, 0, <, i, len, ++, i, +=, result, *, a, i, b, i, return, result]
org.apache.commons.math4.util:MathArrays:linearCombination:double+double+double+double#[final, double, a1High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a1, <<, -, 1L, 27, final, double, a1Low, -, a1, a1High, final, double, b1High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b1, <<, -, 1L, 27, final, double, b1Low, -, b1, b1High, final, double, prod1High, *, a1, b1, final, double, prod1Low, -, *, a1Low, b1Low, -, -, -, prod1High, *, a1High, b1High, *, a1Low, b1High, *, a1High, b1Low, final, double, a2High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a2, <<, -, 1L, 27, final, double, a2Low, -, a2, a2High, final, double, b2High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b2, <<, -, 1L, 27, final, double, b2Low, -, b2, b2High, final, double, prod2High, *, a2, b2, final, double, prod2Low, -, *, a2Low, b2Low, -, -, -, prod2High, *, a2High, b2High, *, a2Low, b2High, *, a2High, b2Low, final, double, s12High, +, prod1High, prod2High, final, double, s12Prime, -, s12High, prod2High, final, double, s12Low, +, -, prod2High, -, s12High, s12Prime, -, prod1High, s12Prime, double, result, +, s12High, +, prod1Low, prod2Low, s12Low, if, Double, isNaN, result, =, result, +, *, a1, b1, *, a2, b2, return, result]
org.apache.commons.math4.util:MathArrays:linearCombination:double+double+double+double+double+double#[final, double, a1High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a1, <<, -, 1L, 27, final, double, a1Low, -, a1, a1High, final, double, b1High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b1, <<, -, 1L, 27, final, double, b1Low, -, b1, b1High, final, double, prod1High, *, a1, b1, final, double, prod1Low, -, *, a1Low, b1Low, -, -, -, prod1High, *, a1High, b1High, *, a1Low, b1High, *, a1High, b1Low, final, double, a2High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a2, <<, -, 1L, 27, final, double, a2Low, -, a2, a2High, final, double, b2High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b2, <<, -, 1L, 27, final, double, b2Low, -, b2, b2High, final, double, prod2High, *, a2, b2, final, double, prod2Low, -, *, a2Low, b2Low, -, -, -, prod2High, *, a2High, b2High, *, a2Low, b2High, *, a2High, b2Low, final, double, a3High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a3, <<, -, 1L, 27, final, double, a3Low, -, a3, a3High, final, double, b3High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b3, <<, -, 1L, 27, final, double, b3Low, -, b3, b3High, final, double, prod3High, *, a3, b3, final, double, prod3Low, -, *, a3Low, b3Low, -, -, -, prod3High, *, a3High, b3High, *, a3Low, b3High, *, a3High, b3Low, final, double, s12High, +, prod1High, prod2High, final, double, s12Prime, -, s12High, prod2High, final, double, s12Low, +, -, prod2High, -, s12High, s12Prime, -, prod1High, s12Prime, final, double, s123High, +, s12High, prod3High, final, double, s123Prime, -, s123High, prod3High, final, double, s123Low, +, -, prod3High, -, s123High, s123Prime, -, s12High, s123Prime, double, result, +, s123High, +, prod1Low, prod2Low, prod3Low, s12Low, s123Low, if, Double, isNaN, result, =, result, +, +, *, a1, b1, *, a2, b2, *, a3, b3, return, result]
org.apache.commons.math4.util:MathArrays:linearCombination:double+double+double+double+double+double+double+double#[final, double, a1High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a1, <<, -, 1L, 27, final, double, a1Low, -, a1, a1High, final, double, b1High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b1, <<, -, 1L, 27, final, double, b1Low, -, b1, b1High, final, double, prod1High, *, a1, b1, final, double, prod1Low, -, *, a1Low, b1Low, -, -, -, prod1High, *, a1High, b1High, *, a1Low, b1High, *, a1High, b1Low, final, double, a2High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a2, <<, -, 1L, 27, final, double, a2Low, -, a2, a2High, final, double, b2High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b2, <<, -, 1L, 27, final, double, b2Low, -, b2, b2High, final, double, prod2High, *, a2, b2, final, double, prod2Low, -, *, a2Low, b2Low, -, -, -, prod2High, *, a2High, b2High, *, a2Low, b2High, *, a2High, b2Low, final, double, a3High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a3, <<, -, 1L, 27, final, double, a3Low, -, a3, a3High, final, double, b3High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b3, <<, -, 1L, 27, final, double, b3Low, -, b3, b3High, final, double, prod3High, *, a3, b3, final, double, prod3Low, -, *, a3Low, b3Low, -, -, -, prod3High, *, a3High, b3High, *, a3Low, b3High, *, a3High, b3Low, final, double, a4High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, a4, <<, -, 1L, 27, final, double, a4Low, -, a4, a4High, final, double, b4High, Double, longBitsToDouble, &, Double, doubleToRawLongBits, b4, <<, -, 1L, 27, final, double, b4Low, -, b4, b4High, final, double, prod4High, *, a4, b4, final, double, prod4Low, -, *, a4Low, b4Low, -, -, -, prod4High, *, a4High, b4High, *, a4Low, b4High, *, a4High, b4Low, final, double, s12High, +, prod1High, prod2High, final, double, s12Prime, -, s12High, prod2High, final, double, s12Low, +, -, prod2High, -, s12High, s12Prime, -, prod1High, s12Prime, final, double, s123High, +, s12High, prod3High, final, double, s123Prime, -, s123High, prod3High, final, double, s123Low, +, -, prod3High, -, s123High, s123Prime, -, s12High, s123Prime, final, double, s1234High, +, s123High, prod4High, final, double, s1234Prime, -, s1234High, prod4High, final, double, s1234Low, +, -, prod4High, -, s1234High, s1234Prime, -, s123High, s1234Prime, double, result, +, s1234High, +, prod1Low, prod2Low, prod3Low, prod4Low, s12Low, s123Low, s1234Low, if, Double, isNaN, result, =, result, +, +, +, *, a1, b1, *, a2, b2, *, a3, b3, *, a4, b4, return, result]
org.apache.commons.math4.util:MathArrays:equals:float[]+float[]#[if, ||, ==, x, null, ==, y, null, return, !, ^, ==, x, null, ==, y, null, if, !=, x.length, y.length, return, false, for, int, i, 0, <, i, x.length, ++, i, if, !, Precision, equals, x, i, y, i, return, false, return, true]
org.apache.commons.math4.util:MathArrays:equalsIncludingNaN:float[]+float[]#[if, ||, ==, x, null, ==, y, null, return, !, ^, ==, x, null, ==, y, null, if, !=, x.length, y.length, return, false, for, int, i, 0, <, i, x.length, ++, i, if, !, Precision, equalsIncludingNaN, x, i, y, i, return, false, return, true]
org.apache.commons.math4.util:MathArrays:equals:double[]+double[]#[if, ||, ==, x, null, ==, y, null, return, !, ^, ==, x, null, ==, y, null, if, !=, x.length, y.length, return, false, for, int, i, 0, <, i, x.length, ++, i, if, !, Precision, equals, x, i, y, i, return, false, return, true]
org.apache.commons.math4.util:MathArrays:equalsIncludingNaN:double[]+double[]#[if, ||, ==, x, null, ==, y, null, return, !, ^, ==, x, null, ==, y, null, if, !=, x.length, y.length, return, false, for, int, i, 0, <, i, x.length, ++, i, if, !, Precision, equalsIncludingNaN, x, i, y, i, return, false, return, true]
org.apache.commons.math4.util:MathArrays:normalizeArray:double[]+double#[if, Double, isInfinite, normalizedSum, throw, new, MathIllegalArgumentException, LocalizedFormats.NORMALIZE_INFINITE, if, Double, isNaN, normalizedSum, throw, new, MathIllegalArgumentException, LocalizedFormats.NORMALIZE_NAN, double, sum, 0d, final, int, len, values.length, double, out, double, len, for, int, i, 0, <, i, len, ++, i, if, Double, isInfinite, values, i, throw, new, MathIllegalArgumentException, LocalizedFormats.INFINITE_ARRAY_ELEMENT, values, i, i, if, !, Double, isNaN, values, i, +=, sum, values, i, if, ==, sum, 0, throw, new, MathArithmeticException, LocalizedFormats.ARRAY_SUMS_TO_ZERO, for, int, i, 0, <, i, len, ++, i, if, Double, isNaN, values, i, =, out, i, Double.NaN, =, out, i, /, *, values, i, normalizedSum, sum, return, out]
org.apache.commons.math4.util:MathArrays:buildArray:Field<T>+int#[SuppressWarnings, "unchecked", T, array, T, Array, newInstance, field, getRuntimeClass, length, Arrays, fill, array, field, getZero, return, array]
org.apache.commons.math4.util:MathArrays:buildArray:Field<T>+int+int#[final, T, array, if, <, columns, 0, T, dummyRow, buildArray, field, 0, =, array, T, Array, newInstance, dummyRow, getClass, rows, =, array, T, Array, newInstance, field, getRuntimeClass, int, rows, columns, for, int, i, 0, <, i, rows, ++, i, Arrays, fill, array, i, field, getZero, return, array]
org.apache.commons.math4.util:MathArrays:convolve:double[]+double[]#[MathUtils, checkNotNull, x, MathUtils, checkNotNull, h, final, int, xLen, x.length, final, int, hLen, h.length, if, ||, ==, xLen, 0, ==, hLen, 0, throw, new, NoDataException, final, int, totalLength, -, +, xLen, hLen, 1, final, double, y, double, totalLength, for, int, n, 0, <, n, totalLength, ++, n, double, yn, 0, int, k, FastMath, max, 0, -, +, n, 1, xLen, int, j, -, n, k, while, &&, <, k, hLen, >=, j, 0, +=, yn, *, x, --, j, h, ++, k, =, y, n, yn, return, y]
org.apache.commons.math4.util:MathArrays:shuffle:int[]+int+Position#[shuffle, list, start, pos, new, Well19937c]
org.apache.commons.math4.util:MathArrays:shuffle:int[]+int+Position+RandomGenerator#[switch, pos, case, TAIL, for, int, i, -, list.length, 1, >=, i, start, --, i, final, int, target, if, ==, i, start, =, target, start, =, target, new, UniformIntegerDistribution, rng, start, i, sample, final, int, temp, list, target, =, list, target, list, i, =, list, i, temp, break, case, HEAD, for, int, i, 0, <=, i, start, ++, i, final, int, target, if, ==, i, start, =, target, start, =, target, new, UniformIntegerDistribution, rng, i, start, sample, final, int, temp, list, target, =, list, target, list, i, =, list, i, temp, break, default, throw, new, MathInternalError]
org.apache.commons.math4.util:MathArrays:shuffle:int[]+RandomGenerator#[shuffle, list, 0, Position.TAIL, rng]
org.apache.commons.math4.util:MathArrays:shuffle:int[]#[shuffle, list, new, Well19937c]
org.apache.commons.math4.util:MathArrays:natural:int#[return, sequence, n, 0, 1]
org.apache.commons.math4.util:MathArrays:sequence:int+int+int#[final, int, a, int, size, for, int, i, 0, <, i, size, ++, i, =, a, i, +, start, *, i, stride, return, a]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+int+int#[return, verifyValues, values, begin, length, false]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+int+int+boolean#[if, ==, values, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, if, <, begin, 0, throw, new, NotPositiveException, LocalizedFormats.START_POSITION, Integer, valueOf, begin, if, <, length, 0, throw, new, NotPositiveException, LocalizedFormats.LENGTH, Integer, valueOf, length, if, >, +, begin, length, values.length, throw, new, NumberIsTooLargeException, LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END, Integer, valueOf, +, begin, length, Integer, valueOf, values.length, true, if, &&, ==, length, 0, !, allowEmpty, return, false, return, true]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+double[]+int+int#[return, verifyValues, values, weights, begin, length, false]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+double[]+int+int+boolean#[if, ||, ==, weights, null, ==, values, null, throw, new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, checkEqualLength, weights, values, boolean, containsPositiveWeight, false, for, int, i, begin, <, i, +, begin, length, ++, i, final, double, weight, weights, i, if, Double, isNaN, weight, throw, new, MathIllegalArgumentException, LocalizedFormats.NAN_ELEMENT_AT_INDEX, Integer, valueOf, i, if, Double, isInfinite, weight, throw, new, MathIllegalArgumentException, LocalizedFormats.INFINITE_ARRAY_ELEMENT, Double, valueOf, weight, Integer, valueOf, i, if, <, weight, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, Integer, valueOf, i, Double, valueOf, weight, if, &&, !, containsPositiveWeight, >, weight, 0.0, =, containsPositiveWeight, true, if, !, containsPositiveWeight, throw, new, MathIllegalArgumentException, LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO, return, verifyValues, values, begin, length, allowEmpty]
org.apache.commons.math4.util:MathArrays:concatenate:double[]...#[int, combinedLength, 0, for, double, a, x, +=, combinedLength, a.length, int, offset, 0, int, curLength, 0, final, double, combined, double, combinedLength, for, int, i, 0, <, i, x.length, ++, i, =, curLength, x, i, length, System, arraycopy, x, i, 0, combined, offset, curLength, +=, offset, curLength, return, combined]
org.apache.commons.math4.util:MathArrays:unique:double[]#[TreeSet, Double, values, new, TreeSet, Double, for, int, i, 0, <, i, data.length, ++, i, values, add, data, i, final, int, count, values, size, final, double, out, double, count, Iterator, Double, iterator, values, descendingIterator, int, i, 0, while, iterator, hasNext, =, out, ++, i, iterator, next, return, out]
org.apache.commons.math4.util:MathUtils:hash:double#[return, new, Double, value, hashCode]
org.apache.commons.math4.util:MathUtils:equals:double+double#[return, new, Double, x, equals, new, Double, y]
org.apache.commons.math4.util:MathUtils:hash:double[]#[return, Arrays, hashCode, value]
org.apache.commons.math4.util:MathUtils:normalizeAngle:double+double#[return, -, a, *, TWO_PI, FastMath, floor, /, -, +, a, FastMath.PI, center, TWO_PI]
org.apache.commons.math4.util:MathUtils:max:T+T#[return, >=, e1, subtract, e2, getReal, 0, e1, e2]
org.apache.commons.math4.util:MathUtils:min:T+T#[return, >=, e1, subtract, e2, getReal, 0, e2, e1]
org.apache.commons.math4.util:MathUtils:reduce:double+double+double#[final, double, p, FastMath, abs, period, return, -, -, a, *, p, FastMath, floor, /, -, a, offset, p, offset]
org.apache.commons.math4.util:MathUtils:copySign:byte+byte#[if, ||, &&, >=, magnitude, 0, >=, sign, 0, &&, <, magnitude, 0, <, sign, 0, return, magnitude, if, &&, >=, sign, 0, ==, magnitude, Byte.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW, return, byte, -, magnitude]
org.apache.commons.math4.util:MathUtils:copySign:short+short#[if, ||, &&, >=, magnitude, 0, >=, sign, 0, &&, <, magnitude, 0, <, sign, 0, return, magnitude, if, &&, >=, sign, 0, ==, magnitude, Short.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW, return, short, -, magnitude]
org.apache.commons.math4.util:MathUtils:copySign:int+int#[if, ||, &&, >=, magnitude, 0, >=, sign, 0, &&, <, magnitude, 0, <, sign, 0, return, magnitude, if, &&, >=, sign, 0, ==, magnitude, Integer.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW, return, -, magnitude]
org.apache.commons.math4.util:MathUtils:copySign:long+long#[if, ||, &&, >=, magnitude, 0, >=, sign, 0, &&, <, magnitude, 0, <, sign, 0, return, magnitude, if, &&, >=, sign, 0, ==, magnitude, Long.MIN_VALUE, throw, new, MathArithmeticException, LocalizedFormats.OVERFLOW, return, -, magnitude]
org.apache.commons.math4.util:MathUtils:checkFinite:double#[if, ||, Double, isInfinite, x, Double, isNaN, x, throw, new, NotFiniteNumberException, x]
org.apache.commons.math4.util:MathUtils:checkFinite:double[]#[for, int, i, 0, <, i, val.length, ++, i, final, double, x, val, i, if, ||, Double, isInfinite, x, Double, isNaN, x, throw, new, NotFiniteNumberException, LocalizedFormats.ARRAY_ELEMENT, x, i]
org.apache.commons.math4.util:MathUtils:checkNotNull:Object+Localizable+Object...#[if, ==, o, null, throw, new, NullArgumentException, pattern, args]
org.apache.commons.math4.util:MathUtils:checkNotNull:Object#[if, ==, o, null, throw, new, NullArgumentException]
org.apache.commons.math4.util:MedianOf3PivotingStrategy:pivotIndex:double[]+int+int#[MathArrays, verifyValues, work, begin, -, end, begin, final, int, inclusiveEnd, -, end, 1, final, int, middle, +, begin, /, -, inclusiveEnd, begin, 2, final, double, wBegin, work, begin, final, double, wMiddle, work, middle, final, double, wEnd, work, inclusiveEnd, if, <, wBegin, wMiddle, if, <, wMiddle, wEnd, return, middle, return, <, wBegin, wEnd, inclusiveEnd, begin, if, <, wBegin, wEnd, return, begin, return, <, wMiddle, wEnd, inclusiveEnd, middle]
org.apache.commons.math4.util:MultidimensionalCounter:iterator:null#[return, new, Iterator]
org.apache.commons.math4.util:MultidimensionalCounter:getDimension:null#[return, dimension]
org.apache.commons.math4.util:MultidimensionalCounter:getCounts:int#[if, ||, <, index, 0, >=, index, totalSize, throw, new, OutOfRangeException, index, 0, totalSize, final, int, indices, int, dimension, int, count, 0, for, int, i, 0, <, i, last, ++, i, int, idx, 0, final, int, offset, uniCounterOffset, i, while, <=, count, index, +=, count, offset, ++, idx, --, idx, -=, count, offset, =, indices, i, idx, =, indices, last, -, index, count, return, indices]
org.apache.commons.math4.util:MultidimensionalCounter:getCount:int...#[if, !=, c.length, dimension, throw, new, DimensionMismatchException, c.length, dimension, int, count, 0, for, int, i, 0, <, i, dimension, ++, i, final, int, index, c, i, if, ||, <, index, 0, >=, index, size, i, throw, new, OutOfRangeException, index, 0, -, size, i, 1, +=, count, *, uniCounterOffset, i, c, i, return, +, count, c, last]
org.apache.commons.math4.util:MultidimensionalCounter:getSize:null#[return, totalSize]
org.apache.commons.math4.util:MultidimensionalCounter:getSizes:null#[return, MathArrays, copyOf, size]
org.apache.commons.math4.util:MultidimensionalCounter:toString:null#[final, StringBuilder, sb, new, StringBuilder, for, int, i, 0, <, i, dimension, ++, i, sb, append, "[", append, getCount, i, append, "]", return, sb, toString]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:computeCapacity:int#[if, ==, expectedSize, 0, return, 1, final, int, capacity, int, FastMath, ceil, /, expectedSize, LOAD_FACTOR, final, int, powerOfTwo, Integer, highestOneBit, capacity, if, ==, powerOfTwo, capacity, return, capacity, return, nextPowerOfTwo, capacity]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:nextPowerOfTwo:int#[return, <<, Integer, highestOneBit, i, 1]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:get:int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, containsKey, key, index, return, values, index, if, ==, states, index, FREE, return, missingEntries, int, j, index, for, int, perturb, perturb, hash, !=, states, index, FREE, >>=, perturb, PERTURB_SHIFT, =, j, probe, perturb, j, =, index, &, j, mask, if, containsKey, key, index, return, values, index, return, missingEntries]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:containsKey:int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, containsKey, key, index, return, true, if, ==, states, index, FREE, return, false, int, j, index, for, int, perturb, perturb, hash, !=, states, index, FREE, >>=, perturb, PERTURB_SHIFT, =, j, probe, perturb, j, =, index, &, j, mask, if, containsKey, key, index, return, true, return, false]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:iterator:null#[return, new, Iterator]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:perturb:int#[return, &, hash, 0x7fffffff]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:findInsertionIndex:int#[return, findInsertionIndex, keys, states, key, mask]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:findInsertionIndex:int[]+byte[]+int+int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, ==, states, index, FREE, return, index, if, &&, ==, states, index, FULL, ==, keys, index, key, return, changeIndexSign, index, int, perturb, perturb, hash, int, j, index, if, ==, states, index, FULL, while, true, =, j, probe, perturb, j, =, index, &, j, mask, >>=, perturb, PERTURB_SHIFT, if, ||, !=, states, index, FULL, ==, keys, index, key, break, if, ==, states, index, FREE, return, index, if, ==, states, index, FULL, return, changeIndexSign, index, final, int, firstRemoved, index, while, true, =, j, probe, perturb, j, =, index, &, j, mask, if, ==, states, index, FREE, return, firstRemoved, if, &&, ==, states, index, FULL, ==, keys, index, key, return, changeIndexSign, index, >>=, perturb, PERTURB_SHIFT]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:probe:int+int#[return, +, <<, j, 2, j, perturb, 1]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:changeIndexSign:int#[return, -, -, index, 1]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:size:null#[return, size]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:remove:int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, containsKey, key, index, return, doRemove, index, if, ==, states, index, FREE, return, missingEntries, int, j, index, for, int, perturb, perturb, hash, !=, states, index, FREE, >>=, perturb, PERTURB_SHIFT, =, j, probe, perturb, j, =, index, &, j, mask, if, containsKey, key, index, return, doRemove, index, return, missingEntries]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:containsKey:int+int#[return, &&, ||, !=, key, 0, ==, states, index, FULL, ==, keys, index, key]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:doRemove:int#[=, keys, index, 0, =, states, index, REMOVED, final, double, previous, values, index, =, values, index, missingEntries, --, size, ++, count, return, previous]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:put:int+double#[int, index, findInsertionIndex, key, double, previous, missingEntries, boolean, newMapping, true, if, <, index, 0, =, index, changeIndexSign, index, =, previous, values, index, =, newMapping, false, =, keys, index, key, =, states, index, FULL, =, values, index, value, if, newMapping, ++, size, if, shouldGrowTable, growTable, ++, count, return, previous]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:growTable:null#[final, int, oldLength, states.length, final, int, oldKeys, keys, final, double, oldValues, values, final, byte, oldStates, states, final, int, newLength, *, RESIZE_MULTIPLIER, oldLength, final, int, newKeys, int, newLength, final, double, newValues, double, newLength, final, byte, newStates, byte, newLength, final, int, newMask, -, newLength, 1, for, int, i, 0, <, i, oldLength, ++, i, if, ==, oldStates, i, FULL, final, int, key, oldKeys, i, final, int, index, findInsertionIndex, newKeys, newStates, key, newMask, =, newKeys, index, key, =, newValues, index, oldValues, i, =, newStates, index, FULL, =, mask, newMask, =, keys, newKeys, =, values, newValues, =, states, newStates]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:shouldGrowTable:null#[return, >, size, *, +, mask, 1, LOAD_FACTOR]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:hashOf:int#[final, int, h, ^, key, ^, >>>, key, 20, >>>, key, 12, return, ^, h, >>>, h, 7, >>>, h, 4]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:readObject:ObjectInputStream#[stream, defaultReadObject, =, count, 0]
org.apache.commons.math4.util:OpenIntToFieldHashMap:computeCapacity:int#[if, ==, expectedSize, 0, return, 1, final, int, capacity, int, FastMath, ceil, /, expectedSize, LOAD_FACTOR, final, int, powerOfTwo, Integer, highestOneBit, capacity, if, ==, powerOfTwo, capacity, return, capacity, return, nextPowerOfTwo, capacity]
org.apache.commons.math4.util:OpenIntToFieldHashMap:nextPowerOfTwo:int#[return, <<, Integer, highestOneBit, i, 1]
org.apache.commons.math4.util:OpenIntToFieldHashMap:get:int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, containsKey, key, index, return, values, index, if, ==, states, index, FREE, return, missingEntries, int, j, index, for, int, perturb, perturb, hash, !=, states, index, FREE, >>=, perturb, PERTURB_SHIFT, =, j, probe, perturb, j, =, index, &, j, mask, if, containsKey, key, index, return, values, index, return, missingEntries]
org.apache.commons.math4.util:OpenIntToFieldHashMap:containsKey:int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, containsKey, key, index, return, true, if, ==, states, index, FREE, return, false, int, j, index, for, int, perturb, perturb, hash, !=, states, index, FREE, >>=, perturb, PERTURB_SHIFT, =, j, probe, perturb, j, =, index, &, j, mask, if, containsKey, key, index, return, true, return, false]
org.apache.commons.math4.util:OpenIntToFieldHashMap:iterator:null#[return, new, Iterator]
org.apache.commons.math4.util:OpenIntToFieldHashMap:perturb:int#[return, &, hash, 0x7fffffff]
org.apache.commons.math4.util:OpenIntToFieldHashMap:findInsertionIndex:int#[return, findInsertionIndex, keys, states, key, mask]
org.apache.commons.math4.util:OpenIntToFieldHashMap:findInsertionIndex:int[]+byte[]+int+int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, ==, states, index, FREE, return, index, if, &&, ==, states, index, FULL, ==, keys, index, key, return, changeIndexSign, index, int, perturb, perturb, hash, int, j, index, if, ==, states, index, FULL, while, true, =, j, probe, perturb, j, =, index, &, j, mask, >>=, perturb, PERTURB_SHIFT, if, ||, !=, states, index, FULL, ==, keys, index, key, break, if, ==, states, index, FREE, return, index, if, ==, states, index, FULL, return, changeIndexSign, index, final, int, firstRemoved, index, while, true, =, j, probe, perturb, j, =, index, &, j, mask, if, ==, states, index, FREE, return, firstRemoved, if, &&, ==, states, index, FULL, ==, keys, index, key, return, changeIndexSign, index, >>=, perturb, PERTURB_SHIFT]
org.apache.commons.math4.util:OpenIntToFieldHashMap:probe:int+int#[return, +, <<, j, 2, j, perturb, 1]
org.apache.commons.math4.util:OpenIntToFieldHashMap:changeIndexSign:int#[return, -, -, index, 1]
org.apache.commons.math4.util:OpenIntToFieldHashMap:size:null#[return, size]
org.apache.commons.math4.util:OpenIntToFieldHashMap:remove:int#[final, int, hash, hashOf, key, int, index, &, hash, mask, if, containsKey, key, index, return, doRemove, index, if, ==, states, index, FREE, return, missingEntries, int, j, index, for, int, perturb, perturb, hash, !=, states, index, FREE, >>=, perturb, PERTURB_SHIFT, =, j, probe, perturb, j, =, index, &, j, mask, if, containsKey, key, index, return, doRemove, index, return, missingEntries]
org.apache.commons.math4.util:OpenIntToFieldHashMap:containsKey:int+int#[return, &&, ||, !=, key, 0, ==, states, index, FULL, ==, keys, index, key]
org.apache.commons.math4.util:OpenIntToFieldHashMap:doRemove:int#[=, keys, index, 0, =, states, index, REMOVED, final, T, previous, values, index, =, values, index, missingEntries, --, size, ++, count, return, previous]
org.apache.commons.math4.util:OpenIntToFieldHashMap:put:int+T#[int, index, findInsertionIndex, key, T, previous, missingEntries, boolean, newMapping, true, if, <, index, 0, =, index, changeIndexSign, index, =, previous, values, index, =, newMapping, false, =, keys, index, key, =, states, index, FULL, =, values, index, value, if, newMapping, ++, size, if, shouldGrowTable, growTable, ++, count, return, previous]
org.apache.commons.math4.util:OpenIntToFieldHashMap:growTable:null#[final, int, oldLength, states.length, final, int, oldKeys, keys, final, T, oldValues, values, final, byte, oldStates, states, final, int, newLength, *, RESIZE_MULTIPLIER, oldLength, final, int, newKeys, int, newLength, final, T, newValues, buildArray, newLength, final, byte, newStates, byte, newLength, final, int, newMask, -, newLength, 1, for, int, i, 0, <, i, oldLength, ++, i, if, ==, oldStates, i, FULL, final, int, key, oldKeys, i, final, int, index, findInsertionIndex, newKeys, newStates, key, newMask, =, newKeys, index, key, =, newValues, index, oldValues, i, =, newStates, index, FULL, =, mask, newMask, =, keys, newKeys, =, values, newValues, =, states, newStates]
org.apache.commons.math4.util:OpenIntToFieldHashMap:shouldGrowTable:null#[return, >, size, *, +, mask, 1, LOAD_FACTOR]
org.apache.commons.math4.util:OpenIntToFieldHashMap:hashOf:int#[final, int, h, ^, key, ^, >>>, key, 20, >>>, key, 12, return, ^, h, >>>, h, 7, >>>, h, 4]
org.apache.commons.math4.util:OpenIntToFieldHashMap:readObject:ObjectInputStream#[stream, defaultReadObject, =, count, 0]
org.apache.commons.math4.util:OpenIntToFieldHashMap:buildArray:int#[return, T, Array, newInstance, field, getRuntimeClass, length]
org.apache.commons.math4.util:Pair:getKey:null#[return, key]
org.apache.commons.math4.util:Pair:getValue:null#[return, value]
org.apache.commons.math4.util:Pair:getFirst:null#[return, key]
org.apache.commons.math4.util:Pair:getSecond:null#[return, value]
org.apache.commons.math4.util:Pair:equals:Object#[if, ==, this, o, return, true, if, !, instanceof, o, Pair, return, false, Pair, oP, Pair, o, return, &&, ==, key, null, ==, oP.key, null, key, equals, oP.key, ==, value, null, ==, oP.value, null, value, equals, oP.value]
org.apache.commons.math4.util:Pair:hashCode:null#[int, result, ==, key, null, 0, key, hashCode, final, int, h, ==, value, null, 0, value, hashCode, =, result, ^, +, *, 37, result, h, >>>, h, 16, return, result]
org.apache.commons.math4.util:Pair:toString:null#[return, +, "[", getKey, ", ", getValue, "]"]
org.apache.commons.math4.util:Pair:create:K+V#[return, new, Pair, K, V, k, v]
org.apache.commons.math4.util:Precision:compareTo:double+double+double#[if, equals, x, y, eps, return, 0, if, <, x, y, return, -, 1, return, 1]
org.apache.commons.math4.util:Precision:compareTo:double+double+int#[if, equals, x, y, maxUlps, return, 0, if, <, x, y, return, -, 1, return, 1]
org.apache.commons.math4.util:Precision:equals:float+float#[return, equals, x, y, 1]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:float+float#[return, ||, !=, x, x, !=, y, y, !, ^, !=, x, x, !=, y, y, equals, x, y, 1]
org.apache.commons.math4.util:Precision:equals:float+float+float#[return, ||, equals, x, y, 1, <=, FastMath, abs, -, y, x, eps]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:float+float+float#[return, ||, equalsIncludingNaN, x, y, <=, FastMath, abs, -, y, x, eps]
org.apache.commons.math4.util:Precision:equals:float+float+int#[final, int, xInt, Float, floatToRawIntBits, x, final, int, yInt, Float, floatToRawIntBits, y, final, boolean, isEqual, if, ==, &, ^, xInt, yInt, SGN_MASK_FLOAT, 0, =, isEqual, <=, FastMath, abs, -, xInt, yInt, maxUlps, final, int, deltaPlus, final, int, deltaMinus, if, <, xInt, yInt, =, deltaPlus, -, yInt, POSITIVE_ZERO_FLOAT_BITS, =, deltaMinus, -, xInt, NEGATIVE_ZERO_FLOAT_BITS, =, deltaPlus, -, xInt, POSITIVE_ZERO_FLOAT_BITS, =, deltaMinus, -, yInt, NEGATIVE_ZERO_FLOAT_BITS, if, >, deltaPlus, maxUlps, =, isEqual, false, =, isEqual, <=, deltaMinus, -, maxUlps, deltaPlus, return, &&, isEqual, !, Float, isNaN, x, !, Float, isNaN, y]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:float+float+int#[return, ||, !=, x, x, !=, y, y, !, ^, !=, x, x, !=, y, y, equals, x, y, maxUlps]
org.apache.commons.math4.util:Precision:equals:double+double#[return, equals, x, y, 1]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:double+double#[return, ||, !=, x, x, !=, y, y, !, ^, !=, x, x, !=, y, y, equals, x, y, 1]
org.apache.commons.math4.util:Precision:equals:double+double+double#[return, ||, equals, x, y, 1, <=, FastMath, abs, -, y, x, eps]
org.apache.commons.math4.util:Precision:equalsWithRelativeTolerance:double+double+double#[if, equals, x, y, 1, return, true, final, double, absoluteMax, FastMath, max, FastMath, abs, x, FastMath, abs, y, final, double, relativeDifference, FastMath, abs, /, -, x, y, absoluteMax, return, <=, relativeDifference, eps]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:double+double+double#[return, ||, equalsIncludingNaN, x, y, <=, FastMath, abs, -, y, x, eps]
org.apache.commons.math4.util:Precision:equals:double+double+int#[final, long, xInt, Double, doubleToRawLongBits, x, final, long, yInt, Double, doubleToRawLongBits, y, final, boolean, isEqual, if, ==, &, ^, xInt, yInt, SGN_MASK, 0l, =, isEqual, <=, FastMath, abs, -, xInt, yInt, maxUlps, final, long, deltaPlus, final, long, deltaMinus, if, <, xInt, yInt, =, deltaPlus, -, yInt, POSITIVE_ZERO_DOUBLE_BITS, =, deltaMinus, -, xInt, NEGATIVE_ZERO_DOUBLE_BITS, =, deltaPlus, -, xInt, POSITIVE_ZERO_DOUBLE_BITS, =, deltaMinus, -, yInt, NEGATIVE_ZERO_DOUBLE_BITS, if, >, deltaPlus, maxUlps, =, isEqual, false, =, isEqual, <=, deltaMinus, -, maxUlps, deltaPlus, return, &&, isEqual, !, Double, isNaN, x, !, Double, isNaN, y]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:double+double+int#[return, ||, !=, x, x, !=, y, y, !, ^, !=, x, x, !=, y, y, equals, x, y, maxUlps]
org.apache.commons.math4.util:Precision:round:double+int#[return, round, x, scale, BigDecimal.ROUND_HALF_UP]
org.apache.commons.math4.util:Precision:round:double+int+int#[try, final, double, rounded, new, BigDecimal, Double, toString, x, setScale, scale, roundingMethod, doubleValue, return, ==, rounded, POSITIVE_ZERO, *, POSITIVE_ZERO, x, rounded, catch, NumberFormatException, ex, if, Double, isInfinite, x, return, x, return, Double.NaN]
org.apache.commons.math4.util:Precision:round:float+int#[return, round, x, scale, BigDecimal.ROUND_HALF_UP]
org.apache.commons.math4.util:Precision:round:float+int+int#[final, float, sign, FastMath, copySign, 1f, x, final, float, factor, *, float, FastMath, pow, 10.0f, scale, sign, return, /, float, roundUnscaled, *, x, factor, sign, roundingMethod, factor]
org.apache.commons.math4.util:Precision:roundUnscaled:double+double+int#[switch, roundingMethod, case, BigDecimal.ROUND_CEILING, if, ==, sign, -, 1, =, unscaled, FastMath, floor, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, =, unscaled, FastMath, ceil, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, break, case, BigDecimal.ROUND_DOWN, =, unscaled, FastMath, floor, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, break, case, BigDecimal.ROUND_FLOOR, if, ==, sign, -, 1, =, unscaled, FastMath, ceil, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, =, unscaled, FastMath, floor, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, break, case, BigDecimal.ROUND_HALF_DOWN, =, unscaled, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, double, fraction, -, unscaled, FastMath, floor, unscaled, if, >, fraction, 0.5, =, unscaled, FastMath, ceil, unscaled, =, unscaled, FastMath, floor, unscaled, break, case, BigDecimal.ROUND_HALF_EVEN, double, fraction, -, unscaled, FastMath, floor, unscaled, if, >, fraction, 0.5, =, unscaled, FastMath, ceil, unscaled, if, <, fraction, 0.5, =, unscaled, FastMath, floor, unscaled, if, ==, /, FastMath, floor, unscaled, 2.0, FastMath, floor, /, FastMath, floor, unscaled, 2.0, =, unscaled, FastMath, floor, unscaled, =, unscaled, FastMath, ceil, unscaled, break, case, BigDecimal.ROUND_HALF_UP, =, unscaled, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, double, fraction, -, unscaled, FastMath, floor, unscaled, if, >=, fraction, 0.5, =, unscaled, FastMath, ceil, unscaled, =, unscaled, FastMath, floor, unscaled, break, case, BigDecimal.ROUND_UNNECESSARY, if, !=, unscaled, FastMath, floor, unscaled, throw, new, MathArithmeticException, break, case, BigDecimal.ROUND_UP, if, !=, unscaled, FastMath, floor, unscaled, =, unscaled, FastMath, ceil, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, break, default, throw, new, MathIllegalArgumentException, LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, "ROUND_CEILING", BigDecimal.ROUND_CEILING, "ROUND_DOWN", BigDecimal.ROUND_DOWN, "ROUND_FLOOR", BigDecimal.ROUND_FLOOR, "ROUND_HALF_DOWN", BigDecimal.ROUND_HALF_DOWN, "ROUND_HALF_EVEN", BigDecimal.ROUND_HALF_EVEN, "ROUND_HALF_UP", BigDecimal.ROUND_HALF_UP, "ROUND_UNNECESSARY", BigDecimal.ROUND_UNNECESSARY, "ROUND_UP", BigDecimal.ROUND_UP, return, unscaled]
org.apache.commons.math4.util:Precision:representableDelta:double+double#[return, -, +, x, originalDelta, x]
org.apache.commons.math4.util:RandomPivotingStrategy:pivotIndex:double[]+int+int#[MathArrays, verifyValues, work, begin, -, end, begin, return, +, begin, random, nextInt, -, end, begin, 1]
org.apache.commons.math4.util:ResizableDoubleArray:addElement:double#[if, <=, internalArray.length, +, startIndex, numElements, expand, =, internalArray, +, startIndex, ++, numElements, value]
org.apache.commons.math4.util:ResizableDoubleArray:addElements:double[]#[final, double, tempArray, double, +, numElements, values.length, 1, System, arraycopy, internalArray, startIndex, tempArray, 0, numElements, System, arraycopy, values, 0, tempArray, numElements, values.length, =, internalArray, tempArray, =, startIndex, 0, +=, numElements, values.length]
org.apache.commons.math4.util:ResizableDoubleArray:addElementRolling:double#[double, discarded, internalArray, startIndex, if, >, +, startIndex, +, numElements, 1, internalArray.length, expand, +=, startIndex, 1, =, internalArray, +, startIndex, -, numElements, 1, value, if, shouldContract, contract, return, discarded]
org.apache.commons.math4.util:ResizableDoubleArray:substituteMostRecentElement:double#[if, <, numElements, 1, throw, new, MathIllegalStateException, LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, final, int, substIndex, +, startIndex, -, numElements, 1, final, double, discarded, internalArray, substIndex, =, internalArray, substIndex, value, return, discarded]
org.apache.commons.math4.util:ResizableDoubleArray:checkContractExpand:double+double#[if, <, contraction, expansion, final, NumberIsTooSmallException, e, new, NumberIsTooSmallException, contraction, 1, true, e, getContext, addMessage, LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, contraction, expansion, throw, e, if, <=, contraction, 1, final, NumberIsTooSmallException, e, new, NumberIsTooSmallException, contraction, 1, false, e, getContext, addMessage, LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, contraction, throw, e, if, <=, expansion, 1, final, NumberIsTooSmallException, e, new, NumberIsTooSmallException, contraction, 1, false, e, getContext, addMessage, LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, expansion, throw, e]
org.apache.commons.math4.util:ResizableDoubleArray:clear:null#[=, numElements, 0, =, startIndex, 0]
org.apache.commons.math4.util:ResizableDoubleArray:contract:null#[final, double, tempArray, double, +, numElements, 1, System, arraycopy, internalArray, startIndex, tempArray, 0, numElements, =, internalArray, tempArray, =, startIndex, 0]
org.apache.commons.math4.util:ResizableDoubleArray:discardFrontElements:int#[discardExtremeElements, i, true]
org.apache.commons.math4.util:ResizableDoubleArray:discardMostRecentElements:int#[discardExtremeElements, i, false]
org.apache.commons.math4.util:ResizableDoubleArray:discardExtremeElements:int+boolean#[if, >, i, numElements, throw, new, MathIllegalArgumentException, LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, i, numElements, if, <, i, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, i, -=, numElements, i, if, front, +=, startIndex, i, if, shouldContract, contract]
org.apache.commons.math4.util:ResizableDoubleArray:expand:null#[int, newSize, 0, if, ==, expansionMode, ExpansionMode.MULTIPLICATIVE, =, newSize, int, FastMath, ceil, *, internalArray.length, expansionFactor, =, newSize, int, +, internalArray.length, FastMath, round, expansionFactor, final, double, tempArray, double, newSize, System, arraycopy, internalArray, 0, tempArray, 0, internalArray.length, =, internalArray, tempArray]
org.apache.commons.math4.util:ResizableDoubleArray:expandTo:int#[final, double, tempArray, double, size, System, arraycopy, internalArray, 0, tempArray, 0, internalArray.length, =, internalArray, tempArray]
org.apache.commons.math4.util:ResizableDoubleArray:getContractionCriterion:null#[return, contractionCriterion]
org.apache.commons.math4.util:ResizableDoubleArray:getElement:int#[if, >=, index, numElements, throw, new, ArrayIndexOutOfBoundsException, index, if, >=, index, 0, return, internalArray, +, startIndex, index, throw, new, ArrayIndexOutOfBoundsException, index]
org.apache.commons.math4.util:ResizableDoubleArray:getElements:null#[final, double, elementArray, double, numElements, System, arraycopy, internalArray, startIndex, elementArray, 0, numElements, return, elementArray]
org.apache.commons.math4.util:ResizableDoubleArray:getExpansionFactor:null#[return, expansionFactor]
org.apache.commons.math4.util:ResizableDoubleArray:getExpansionMode:null#[return, expansionMode]
org.apache.commons.math4.util:ResizableDoubleArray:getCapacity:null#[return, internalArray.length]
org.apache.commons.math4.util:ResizableDoubleArray:getNumElements:null#[return, numElements]
org.apache.commons.math4.util:ResizableDoubleArray:getArrayRef:null#[return, internalArray]
org.apache.commons.math4.util:ResizableDoubleArray:getStartIndex:null#[return, startIndex]
org.apache.commons.math4.util:ResizableDoubleArray:compute:MathArrays.Function#[return, f, evaluate, internalArray, startIndex, numElements]
org.apache.commons.math4.util:ResizableDoubleArray:setElement:int+double#[if, <, index, 0, throw, new, ArrayIndexOutOfBoundsException, index, if, >, +, index, 1, numElements, =, numElements, +, index, 1, if, >=, +, startIndex, index, internalArray.length, expandTo, +, startIndex, +, index, 1, =, internalArray, +, startIndex, index, value]
org.apache.commons.math4.util:ResizableDoubleArray:setNumElements:int#[if, <, i, 0, throw, new, MathIllegalArgumentException, LocalizedFormats.INDEX_NOT_POSITIVE, i, final, int, newSize, +, startIndex, i, if, >, newSize, internalArray.length, expandTo, newSize, =, numElements, i]
org.apache.commons.math4.util:ResizableDoubleArray:shouldContract:null#[if, ==, expansionMode, ExpansionMode.MULTIPLICATIVE, return, >, /, internalArray.length, float, numElements, contractionCriterion, return, >, -, internalArray.length, numElements, contractionCriterion]
org.apache.commons.math4.util:ResizableDoubleArray:copy:null#[return, new, ResizableDoubleArray, this]
org.apache.commons.math4.util:ResizableDoubleArray:equals:Object#[if, ==, object, this, return, true, if, ==, instanceof, object, ResizableDoubleArray, false, return, false, boolean, result, true, final, ResizableDoubleArray, other, ResizableDoubleArray, object, =, result, &&, result, ==, other.contractionCriterion, contractionCriterion, =, result, &&, result, ==, other.expansionFactor, expansionFactor, =, result, &&, result, ==, other.expansionMode, expansionMode, =, result, &&, result, ==, other.numElements, numElements, =, result, &&, result, ==, other.startIndex, startIndex, if, !, result, return, false, return, Arrays, equals, internalArray, other.internalArray]
org.apache.commons.math4.util:ResizableDoubleArray:hashCode:null#[final, int, hashData, int, 6, =, hashData, 0, Double, valueOf, expansionFactor, hashCode, =, hashData, 1, Double, valueOf, contractionCriterion, hashCode, =, hashData, 2, expansionMode, hashCode, =, hashData, 3, Arrays, hashCode, internalArray, =, hashData, 4, numElements, =, hashData, 5, startIndex, return, Arrays, hashCode, hashData]
org.apache.commons.math4.util:TransformerMap:containsClass:Class<?>#[return, map, containsKey, key]
org.apache.commons.math4.util:TransformerMap:containsTransformer:NumberTransformer#[return, map, containsValue, value]
org.apache.commons.math4.util:TransformerMap:getTransformer:Class<?>#[return, map, get, key]
org.apache.commons.math4.util:TransformerMap:putTransformer:Class<?>+NumberTransformer#[return, map, put, key, transformer]
org.apache.commons.math4.util:TransformerMap:removeTransformer:Class<?>#[return, map, remove, key]
org.apache.commons.math4.util:TransformerMap:clear:null#[map, clear]
org.apache.commons.math4.util:TransformerMap:classes:null#[return, map, keySet]
org.apache.commons.math4.util:TransformerMap:transformers:null#[return, map, values]
org.apache.commons.math4.util:TransformerMap:transform:Object#[double, value, Double.NaN, if, ||, instanceof, o, Number, instanceof, o, String, =, value, defaultTransformer, transform, o, NumberTransformer, trans, getTransformer, o, getClass, if, !=, trans, null, =, value, trans, transform, o, return, value]
org.apache.commons.math4.util:TransformerMap:equals:Object#[if, ==, this, other, return, true, if, instanceof, other, TransformerMap, TransformerMap, rhs, TransformerMap, other, if, !, defaultTransformer, equals, rhs.defaultTransformer, return, false, if, !=, map, size, rhs.map, size, return, false, for, Map.Entry, Class, NumberTransformer, entry, map, entrySet, if, !, entry, getValue, equals, rhs.map, get, entry, getKey, return, false, return, true, return, false]
org.apache.commons.math4.util:TransformerMap:hashCode:null#[int, hash, defaultTransformer, hashCode, for, NumberTransformer, t, map, values, =, hash, +, *, hash, 31, t, hashCode, return, hash]
