org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getFreeParameters:null#[ReturnStatement(return), compiler, getFreeParameters]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getOrder:null#[ReturnStatement(return), compiler, getOrder]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:createConstant:double#[ReturnStatement(return), new, DerivativeStructure, getFreeParameters, getOrder, c]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getReal:null#[ReturnStatement(return), data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getValue:null#[ReturnStatement(return), data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getPartialDerivative:int...#[ReturnStatement(return), data, compiler, getPartialDerivativeIndex, orders]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getAllDerivatives:null#[ReturnStatement(return), data, clone]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:add:double#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, this, ExpressionStatement(), ds.data, 0, a, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:add:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, a.compiler, VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, this, ExpressionStatement(), compiler, add, data, 0, a.data, 0, ds.data, 0, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:subtract:double#[ReturnStatement(return), add, a]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:subtract:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, a.compiler, VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, this, ExpressionStatement(), compiler, subtract, data, 0, a.data, 0, ds.data, 0, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:multiply:int#[ReturnStatement(return), multiply, double, n]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:multiply:double#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, this, ForStatement(for), int, i, 0, i, ds.data.length, i, ExpressionStatement(), ds.data, i, a, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:multiply:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, a.compiler, VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, multiply, data, 0, a.data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:divide:double#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, this, ForStatement(for), int, i, 0, i, ds.data.length, i, ExpressionStatement(), ds.data, i, a, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:divide:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, a.compiler, VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, divide, data, 0, a.data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:remainder:double#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, this, ExpressionStatement(), ds.data, 0, FastMath, IEEEremainder, ds.data, 0, a, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:remainder:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, a.compiler, VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, remainder, data, 0, a.data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:negate:null#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, compiler, ForStatement(for), int, i, 0, i, ds.data.length, i, ExpressionStatement(), ds.data, i, data, i, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:abs:null#[IfStatement(if), Double, doubleToLongBits, data, 0, 0, ReturnStatement(return), negate, ReturnStatement(return), this]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:ceil:null#[ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, ceil, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:floor:null#[ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, floor, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:rint:null#[ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, rint, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:round:null#[ReturnStatement(return), FastMath, round, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:signum:null#[ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, FastMath, signum, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:copySign:DerivativeStructure#[VariableDeclarationStatement(), long, m, Double, doubleToLongBits, data, 0, VariableDeclarationStatement(), long, s, Double, doubleToLongBits, sign.data, 0, IfStatement(if), m, 0, s, 0, m, 0, s, 0, ReturnStatement(return), this, ReturnStatement(return), negate]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:copySign:double#[VariableDeclarationStatement(), long, m, Double, doubleToLongBits, data, 0, VariableDeclarationStatement(), long, s, Double, doubleToLongBits, sign, IfStatement(if), m, 0, s, 0, m, 0, s, 0, ReturnStatement(return), this, ReturnStatement(return), negate]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getExponent:null#[ReturnStatement(return), FastMath, getExponent, data, 0]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:scalb:int#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, compiler, ForStatement(for), int, i, 0, i, ds.data.length, i, ExpressionStatement(), ds.data, i, FastMath, scalb, data, i, n, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:hypot:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, y.compiler, IfStatement(if), Double, isInfinite, data, 0, Double, isInfinite, y.data, 0, ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getFreeParameters, Double.POSITIVE_INFINITY, IfStatement(if), Double, isNaN, data, 0, Double, isNaN, y.data, 0, ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getFreeParameters, Double.NaN, VariableDeclarationStatement(), final, int, expX, getExponent, VariableDeclarationStatement(), final, int, expY, y, getExponent, IfStatement(if), expX, expY, 27, ReturnStatement(return), abs, IfStatement(if), expY, expX, 27, ReturnStatement(return), y, abs, VariableDeclarationStatement(), final, int, middleExp, expX, expY, 2, VariableDeclarationStatement(), final, DerivativeStructure, scaledX, scalb, middleExp, VariableDeclarationStatement(), final, DerivativeStructure, scaledY, y, scalb, middleExp, VariableDeclarationStatement(), final, DerivativeStructure, scaledH, scaledX, multiply, scaledX, add, scaledY, multiply, scaledY, sqrt, ReturnStatement(return), scaledH, scalb, middleExp]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:hypot:DerivativeStructure+DerivativeStructure#[ReturnStatement(return), x, hypot, y]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:compose:double...#[IfStatement(if), f.length, getOrder, 1, ThrowStatement(throw), new, DimensionMismatchException, f.length, getOrder, 1, VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, compose, data, 0, f, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:reciprocal:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, pow, data, 0, 1, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:sqrt:null#[ReturnStatement(return), rootN, 2]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:cbrt:null#[ReturnStatement(return), rootN, 3]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:rootN:int#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, rootN, data, 0, n, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:getField:null#[ReturnStatement(return), new, Field, DerivativeStructure, Override, public, DerivativeStructure, getZero, ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, 0.0, Override, public, DerivativeStructure, getOne, ReturnStatement(return), new, DerivativeStructure, compiler, getFreeParameters, compiler, getOrder, 1.0, Override, public, Class, FieldElement, DerivativeStructure, getRuntimeClass, ReturnStatement(return), DerivativeStructure]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:double+DerivativeStructure#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, x.compiler, ExpressionStatement(), x.compiler, pow, a, x.data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:double#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, pow, data, 0, p, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:int#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, pow, data, 0, n, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:pow:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, e.compiler, VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, pow, data, 0, e.data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:exp:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, exp, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:expm1:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, expm1, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:log:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, log, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:log1p:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, log1p, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:log10:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, log10, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:cos:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, cos, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:sin:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, sin, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:tan:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, tan, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:acos:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, acos, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:asin:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, asin, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atan:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, atan, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atan2:DerivativeStructure#[ExpressionStatement(), compiler, checkCompatibility, x.compiler, VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, atan2, data, 0, x.data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atan2:DerivativeStructure+DerivativeStructure#[ReturnStatement(return), y, atan2, x]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:cosh:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, cosh, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:sinh:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, sinh, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:tanh:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, tanh, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:acosh:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, acosh, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:asinh:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, asinh, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:atanh:null#[VariableDeclarationStatement(), final, DerivativeStructure, result, new, DerivativeStructure, compiler, ExpressionStatement(), compiler, atanh, data, 0, result.data, 0, ReturnStatement(return), result]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:toDegrees:null#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, compiler, ForStatement(for), int, i, 0, i, ds.data.length, i, ExpressionStatement(), ds.data, i, FastMath, toDegrees, data, i, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:toRadians:null#[VariableDeclarationStatement(), final, DerivativeStructure, ds, new, DerivativeStructure, compiler, ForStatement(for), int, i, 0, i, ds.data.length, i, ExpressionStatement(), ds.data, i, FastMath, toRadians, data, i, ReturnStatement(return), ds]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:taylor:double...#[ReturnStatement(return), compiler, taylor, data, 0, delta]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure[]+DerivativeStructure[]#[VariableDeclarationStatement(), final, double, aDouble, double, a.length, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), aDouble, i, a, i, getValue, VariableDeclarationStatement(), final, double, bDouble, double, b.length, ForStatement(for), int, i, 0, i, b.length, i, ExpressionStatement(), bDouble, i, b, i, getValue, VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, aDouble, bDouble, VariableDeclarationStatement(), DerivativeStructure, simpleValue, a, 0, getField, getZero, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), simpleValue, simpleValue, add, a, i, multiply, b, i, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, simpleValue, getFreeParameters, simpleValue, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double[]+DerivativeStructure[]#[VariableDeclarationStatement(), final, double, bDouble, double, b.length, ForStatement(for), int, i, 0, i, b.length, i, ExpressionStatement(), bDouble, i, b, i, getValue, VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, a, bDouble, VariableDeclarationStatement(), DerivativeStructure, simpleValue, b, 0, getField, getZero, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), simpleValue, simpleValue, add, b, i, multiply, a, i, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, simpleValue, getFreeParameters, simpleValue, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure#[VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, a1, getValue, b1, getValue, a2, getValue, b2, getValue, VariableDeclarationStatement(), final, DerivativeStructure, simpleValue, a1, multiply, b1, add, a2, multiply, b2, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double+DerivativeStructure+double+DerivativeStructure#[VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, a1, b1, getValue, a2, b2, getValue, VariableDeclarationStatement(), final, DerivativeStructure, simpleValue, b1, multiply, a1, add, b2, multiply, a2, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure#[VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, a1, getValue, b1, getValue, a2, getValue, b2, getValue, a3, getValue, b3, getValue, VariableDeclarationStatement(), final, DerivativeStructure, simpleValue, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double+DerivativeStructure+double+DerivativeStructure+double+DerivativeStructure#[VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, a1, b1, getValue, a2, b2, getValue, a3, b3, getValue, VariableDeclarationStatement(), final, DerivativeStructure, simpleValue, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure+DerivativeStructure#[VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, a1, getValue, b1, getValue, a2, getValue, b2, getValue, a3, getValue, b3, getValue, a4, getValue, b4, getValue, VariableDeclarationStatement(), final, DerivativeStructure, simpleValue, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, add, a4, multiply, b4, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:linearCombination:double+DerivativeStructure+double+DerivativeStructure+double+DerivativeStructure+double+DerivativeStructure#[VariableDeclarationStatement(), final, double, accurateValue, MathArrays, linearCombination, a1, b1, getValue, a2, b2, getValue, a3, b3, getValue, a4, b4, getValue, VariableDeclarationStatement(), final, DerivativeStructure, simpleValue, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, add, b4, multiply, a4, VariableDeclarationStatement(), final, double, all, simpleValue, getAllDerivatives, ExpressionStatement(), all, 0, accurateValue, ReturnStatement(return), new, DerivativeStructure, getFreeParameters, getOrder, all]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, DerivativeStructure, VariableDeclarationStatement(), final, DerivativeStructure, rhs, DerivativeStructure, other, ReturnStatement(return), getFreeParameters, rhs, getFreeParameters, getOrder, rhs, getOrder, MathArrays, equals, data, rhs.data, ReturnStatement(return), false]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:hashCode:null#[ReturnStatement(return), 227, 229, getFreeParameters, 233, getOrder, 239, MathUtils, hash, data]
org.apache.commons.math4.analysis.differentiation:DerivativeStructure:writeReplace:null#[ReturnStatement(return), new, DataTransferObject, compiler, getFreeParameters, compiler, getOrder, data]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getCompiler:int+int#[VariableDeclarationStatement(), final, DSCompiler, cache, compilers, get, IfStatement(if), cache, null, cache.length, parameters, cache, parameters, length, order, cache, parameters, order, null, ReturnStatement(return), cache, parameters, order, VariableDeclarationStatement(), final, int, maxParameters, FastMath, max, parameters, cache, null, 0, cache.length, VariableDeclarationStatement(), final, int, maxOrder, FastMath, max, order, cache, null, 0, cache, 0, length, VariableDeclarationStatement(), final, DSCompiler, newCache, DSCompiler, maxParameters, 1, maxOrder, 1, IfStatement(if), cache, null, ForStatement(for), int, i, 0, i, cache.length, i, ExpressionStatement(), System, arraycopy, cache, i, 0, newCache, i, 0, cache, i, length, ForStatement(for), int, diag, 0, diag, parameters, order, diag, ForStatement(for), int, o, FastMath, max, 0, diag, parameters, o, FastMath, min, order, diag, o, VariableDeclarationStatement(), final, int, p, diag, o, IfStatement(if), newCache, p, o, null, VariableDeclarationStatement(), final, DSCompiler, valueCompiler, p, 0, null, newCache, p, 1, o, VariableDeclarationStatement(), final, DSCompiler, derivativeCompiler, o, 0, null, newCache, p, o, 1, ExpressionStatement(), newCache, p, o, new, DSCompiler, p, o, valueCompiler, derivativeCompiler, ExpressionStatement(), compilers, compareAndSet, cache, newCache, ReturnStatement(return), newCache, parameters, order]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileSizes:int+int+DSCompiler#[VariableDeclarationStatement(), final, int, sizes, int, parameters, 1, order, 1, IfStatement(if), parameters, 0, ExpressionStatement(), Arrays, fill, sizes, 0, 1, ExpressionStatement(), System, arraycopy, valueCompiler.sizes, 0, sizes, 0, parameters, ExpressionStatement(), sizes, parameters, 0, 1, ForStatement(for), int, i, 0, i, order, i, ExpressionStatement(), sizes, parameters, i, 1, sizes, parameters, i, sizes, parameters, 1, i, 1, ReturnStatement(return), sizes]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileDerivativesIndirection:int+int+DSCompiler+DSCompiler#[IfStatement(if), parameters, 0, order, 0, ReturnStatement(return), int, 1, parameters, VariableDeclarationStatement(), final, int, vSize, valueCompiler.derivativesIndirection.length, VariableDeclarationStatement(), final, int, dSize, derivativeCompiler.derivativesIndirection.length, VariableDeclarationStatement(), final, int, derivativesIndirection, int, vSize, dSize, parameters, ForStatement(for), int, i, 0, i, vSize, i, ExpressionStatement(), System, arraycopy, valueCompiler.derivativesIndirection, i, 0, derivativesIndirection, i, 0, parameters, 1, ForStatement(for), int, i, 0, i, dSize, i, ExpressionStatement(), System, arraycopy, derivativeCompiler.derivativesIndirection, i, 0, derivativesIndirection, vSize, i, 0, parameters, ExpressionStatement(), derivativesIndirection, vSize, i, parameters, 1, ReturnStatement(return), derivativesIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileLowerIndirection:int+int+DSCompiler+DSCompiler#[IfStatement(if), parameters, 0, order, 1, ReturnStatement(return), int, 0, VariableDeclarationStatement(), final, int, vSize, valueCompiler.lowerIndirection.length, VariableDeclarationStatement(), final, int, dSize, derivativeCompiler.lowerIndirection.length, VariableDeclarationStatement(), final, int, lowerIndirection, int, vSize, dSize, ExpressionStatement(), System, arraycopy, valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize, ForStatement(for), int, i, 0, i, dSize, i, ExpressionStatement(), lowerIndirection, vSize, i, valueCompiler, getSize, derivativeCompiler.lowerIndirection, i, ReturnStatement(return), lowerIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileMultiplicationIndirection:int+int+DSCompiler+DSCompiler+int[]#[IfStatement(if), parameters, 0, order, 0, ReturnStatement(return), int, 1, 0, 0, VariableDeclarationStatement(), final, int, vSize, valueCompiler.multIndirection.length, VariableDeclarationStatement(), final, int, dSize, derivativeCompiler.multIndirection.length, VariableDeclarationStatement(), final, int, multIndirection, int, vSize, dSize, ExpressionStatement(), System, arraycopy, valueCompiler.multIndirection, 0, multIndirection, 0, vSize, ForStatement(for), int, i, 0, i, dSize, i, VariableDeclarationStatement(), final, int, dRow, derivativeCompiler.multIndirection, i, VariableDeclarationStatement(), List, int, row, new, ArrayList, int, dRow.length, 2, ForStatement(for), int, j, 0, j, dRow.length, j, ExpressionStatement(), row, add, int, dRow, j, 0, lowerIndirection, dRow, j, 1, vSize, dRow, j, 2, ExpressionStatement(), row, add, int, dRow, j, 0, vSize, dRow, j, 1, lowerIndirection, dRow, j, 2, VariableDeclarationStatement(), final, List, int, combined, new, ArrayList, int, row, size, ForStatement(for), int, j, 0, j, row, size, j, VariableDeclarationStatement(), final, int, termJ, row, get, j, IfStatement(if), termJ, 0, 0, ForStatement(for), int, k, j, 1, k, row, size, k, VariableDeclarationStatement(), final, int, termK, row, get, k, IfStatement(if), termJ, 1, termK, 1, termJ, 2, termK, 2, ExpressionStatement(), termJ, 0, termK, 0, ExpressionStatement(), termK, 0, 0, ExpressionStatement(), combined, add, termJ, ExpressionStatement(), multIndirection, vSize, i, combined, toArray, int, combined, size, ReturnStatement(return), multIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compileCompositionIndirection:int+int+DSCompiler+DSCompiler+int[][]+int[][]#[IfStatement(if), parameters, 0, order, 0, ReturnStatement(return), int, 1, 0, VariableDeclarationStatement(), final, int, vSize, valueCompiler.compIndirection.length, VariableDeclarationStatement(), final, int, dSize, derivativeCompiler.compIndirection.length, VariableDeclarationStatement(), final, int, compIndirection, int, vSize, dSize, ExpressionStatement(), System, arraycopy, valueCompiler.compIndirection, 0, compIndirection, 0, vSize, ForStatement(for), int, i, 0, i, dSize, i, VariableDeclarationStatement(), List, int, row, new, ArrayList, int, EnhancedForStatement(for), int, term, derivativeCompiler.compIndirection, i, VariableDeclarationStatement(), int, derivedTermF, int, term.length, 1, ExpressionStatement(), derivedTermF, 0, term, 0, ExpressionStatement(), derivedTermF, 1, term, 1, 1, VariableDeclarationStatement(), int, orders, int, parameters, ExpressionStatement(), orders, parameters, 1, 1, ExpressionStatement(), derivedTermF, term.length, getPartialDerivativeIndex, parameters, order, sizes, orders, ForStatement(for), int, j, 2, j, term.length, j, ExpressionStatement(), derivedTermF, j, convertIndex, term, j, parameters, derivativeCompiler.derivativesIndirection, parameters, order, sizes, ExpressionStatement(), Arrays, sort, derivedTermF, 2, derivedTermF.length, ExpressionStatement(), row, add, derivedTermF, ForStatement(for), int, l, 2, l, term.length, l, VariableDeclarationStatement(), int, derivedTermG, int, term.length, ExpressionStatement(), derivedTermG, 0, term, 0, ExpressionStatement(), derivedTermG, 1, term, 1, ForStatement(for), int, j, 2, j, term.length, j, ExpressionStatement(), derivedTermG, j, convertIndex, term, j, parameters, derivativeCompiler.derivativesIndirection, parameters, order, sizes, IfStatement(if), j, l, ExpressionStatement(), System, arraycopy, derivativesIndirection, derivedTermG, j, 0, orders, 0, parameters, ExpressionStatement(), orders, parameters, 1, ExpressionStatement(), derivedTermG, j, getPartialDerivativeIndex, parameters, order, sizes, orders, ExpressionStatement(), Arrays, sort, derivedTermG, 2, derivedTermG.length, ExpressionStatement(), row, add, derivedTermG, VariableDeclarationStatement(), final, List, int, combined, new, ArrayList, int, row, size, ForStatement(for), int, j, 0, j, row, size, j, VariableDeclarationStatement(), final, int, termJ, row, get, j, IfStatement(if), termJ, 0, 0, ForStatement(for), int, k, j, 1, k, row, size, k, VariableDeclarationStatement(), final, int, termK, row, get, k, VariableDeclarationStatement(), boolean, equals, termJ.length, termK.length, ForStatement(for), int, l, 1, equals, l, termJ.length, l, ExpressionStatement(), equals, termJ, l, termK, l, IfStatement(if), equals, ExpressionStatement(), termJ, 0, termK, 0, ExpressionStatement(), termK, 0, 0, ExpressionStatement(), combined, add, termJ, ExpressionStatement(), compIndirection, vSize, i, combined, toArray, int, combined, size, ReturnStatement(return), compIndirection]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getPartialDerivativeIndex:int...#[IfStatement(if), orders.length, getFreeParameters, ThrowStatement(throw), new, DimensionMismatchException, orders.length, getFreeParameters, ReturnStatement(return), getPartialDerivativeIndex, parameters, order, sizes, orders]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getPartialDerivativeIndex:int+int+int[][]+int...#[VariableDeclarationStatement(), int, index, 0, VariableDeclarationStatement(), int, m, order, VariableDeclarationStatement(), int, ordersSum, 0, ForStatement(for), int, i, parameters, 1, i, 0, i, VariableDeclarationStatement(), int, derivativeOrder, orders, i, ExpressionStatement(), ordersSum, derivativeOrder, IfStatement(if), ordersSum, order, ThrowStatement(throw), new, NumberIsTooLargeException, ordersSum, order, true, WhileStatement(while), derivativeOrder, 0, ExpressionStatement(), index, sizes, i, m, ReturnStatement(return), index]
org.apache.commons.math4.analysis.differentiation:DSCompiler:convertIndex:int+int+int[][]+int+int+int[][]#[VariableDeclarationStatement(), int, orders, int, destP, ExpressionStatement(), System, arraycopy, srcDerivativesIndirection, index, 0, orders, 0, FastMath, min, srcP, destP, ReturnStatement(return), getPartialDerivativeIndex, destP, destO, destSizes, orders]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getPartialDerivativeOrders:int#[ReturnStatement(return), derivativesIndirection, index]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getFreeParameters:null#[ReturnStatement(return), parameters]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getOrder:null#[ReturnStatement(return), order]
org.apache.commons.math4.analysis.differentiation:DSCompiler:getSize:null#[ReturnStatement(return), sizes, parameters, order]
org.apache.commons.math4.analysis.differentiation:DSCompiler:linearCombination:double+double[]+int+double+double[]+int+double[]+int#[ForStatement(for), int, i, 0, i, getSize, i, ExpressionStatement(), result, resultOffset, i, MathArrays, linearCombination, a1, c1, offset1, i, a2, c2, offset2, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:linearCombination:double+double[]+int+double+double[]+int+double+double[]+int+double[]+int#[ForStatement(for), int, i, 0, i, getSize, i, ExpressionStatement(), result, resultOffset, i, MathArrays, linearCombination, a1, c1, offset1, i, a2, c2, offset2, i, a3, c3, offset3, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:linearCombination:double+double[]+int+double+double[]+int+double+double[]+int+double+double[]+int+double[]+int#[ForStatement(for), int, i, 0, i, getSize, i, ExpressionStatement(), result, resultOffset, i, MathArrays, linearCombination, a1, c1, offset1, i, a2, c2, offset2, i, a3, c3, offset3, i, a4, c4, offset4, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:add:double[]+int+double[]+int+double[]+int#[ForStatement(for), int, i, 0, i, getSize, i, ExpressionStatement(), result, resultOffset, i, lhs, lhsOffset, i, rhs, rhsOffset, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:subtract:double[]+int+double[]+int+double[]+int#[ForStatement(for), int, i, 0, i, getSize, i, ExpressionStatement(), result, resultOffset, i, lhs, lhsOffset, i, rhs, rhsOffset, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:multiply:double[]+int+double[]+int+double[]+int#[ForStatement(for), int, i, 0, i, multIndirection.length, i, VariableDeclarationStatement(), final, int, mappingI, multIndirection, i, VariableDeclarationStatement(), double, r, 0, ForStatement(for), int, j, 0, j, mappingI.length, j, ExpressionStatement(), r, mappingI, j, 0, lhs, lhsOffset, mappingI, j, 1, rhs, rhsOffset, mappingI, j, 2, ExpressionStatement(), result, resultOffset, i, r]
org.apache.commons.math4.analysis.differentiation:DSCompiler:divide:double[]+int+double[]+int+double[]+int#[VariableDeclarationStatement(), final, double, reciprocal, double, getSize, ExpressionStatement(), pow, rhs, lhsOffset, 1, reciprocal, 0, ExpressionStatement(), multiply, lhs, lhsOffset, reciprocal, 0, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:remainder:double[]+int+double[]+int+double[]+int#[VariableDeclarationStatement(), final, double, rem, FastMath, IEEEremainder, lhs, lhsOffset, rhs, rhsOffset, VariableDeclarationStatement(), final, double, k, FastMath, rint, lhs, lhsOffset, rem, rhs, rhsOffset, ExpressionStatement(), result, resultOffset, rem, ForStatement(for), int, i, 1, i, getSize, i, ExpressionStatement(), result, resultOffset, i, lhs, lhsOffset, i, k, rhs, rhsOffset, i]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double+double[]+int+double[]+int#[VariableDeclarationStatement(), final, double, function, double, 1, order, IfStatement(if), a, 0, IfStatement(if), operand, operandOffset, 0, ExpressionStatement(), function, 0, 1, VariableDeclarationStatement(), double, infinity, Double.POSITIVE_INFINITY, ForStatement(for), int, i, 1, i, function.length, i, ExpressionStatement(), infinity, infinity, ExpressionStatement(), function, i, infinity, IfStatement(if), operand, operandOffset, 0, ExpressionStatement(), Arrays, fill, function, Double.NaN, ExpressionStatement(), function, 0, FastMath, pow, a, operand, operandOffset, VariableDeclarationStatement(), final, double, lnA, FastMath, log, a, ForStatement(for), int, i, 1, i, function.length, i, ExpressionStatement(), function, i, lnA, function, i, 1, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double[]+int+double+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), double, xk, FastMath, pow, operand, operandOffset, p, order, ForStatement(for), int, i, order, i, 0, i, ExpressionStatement(), function, i, xk, ExpressionStatement(), xk, operand, operandOffset, ExpressionStatement(), function, 0, xk, VariableDeclarationStatement(), double, coefficient, p, ForStatement(for), int, i, 1, i, order, i, ExpressionStatement(), function, i, coefficient, ExpressionStatement(), coefficient, p, i, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double[]+int+int+double[]+int#[IfStatement(if), n, 0, ExpressionStatement(), result, resultOffset, 1.0, ExpressionStatement(), Arrays, fill, result, resultOffset, 1, resultOffset, getSize, 0, ReturnStatement(return), VariableDeclarationStatement(), double, function, double, 1, order, IfStatement(if), n, 0, VariableDeclarationStatement(), final, int, maxOrder, FastMath, min, order, n, VariableDeclarationStatement(), double, xk, FastMath, pow, operand, operandOffset, n, maxOrder, ForStatement(for), int, i, maxOrder, i, 0, i, ExpressionStatement(), function, i, xk, ExpressionStatement(), xk, operand, operandOffset, ExpressionStatement(), function, 0, xk, VariableDeclarationStatement(), final, double, inv, 1.0, operand, operandOffset, VariableDeclarationStatement(), double, xk, FastMath, pow, inv, n, ForStatement(for), int, i, 0, i, order, i, ExpressionStatement(), function, i, xk, ExpressionStatement(), xk, inv, VariableDeclarationStatement(), double, coefficient, n, ForStatement(for), int, i, 1, i, order, i, ExpressionStatement(), function, i, coefficient, ExpressionStatement(), coefficient, n, i, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:pow:double[]+int+double[]+int+double[]+int#[VariableDeclarationStatement(), final, double, logX, double, getSize, ExpressionStatement(), log, x, xOffset, logX, 0, VariableDeclarationStatement(), final, double, yLogX, double, getSize, ExpressionStatement(), multiply, logX, 0, y, yOffset, yLogX, 0, ExpressionStatement(), exp, yLogX, 0, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:rootN:double[]+int+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), double, xk, IfStatement(if), n, 2, ExpressionStatement(), function, 0, FastMath, sqrt, operand, operandOffset, ExpressionStatement(), xk, 0.5, function, 0, IfStatement(if), n, 3, ExpressionStatement(), function, 0, FastMath, cbrt, operand, operandOffset, ExpressionStatement(), xk, 1.0, 3.0, function, 0, function, 0, ExpressionStatement(), function, 0, FastMath, pow, operand, operandOffset, 1.0, n, ExpressionStatement(), xk, 1.0, n, FastMath, pow, function, 0, n, 1, VariableDeclarationStatement(), final, double, nReciprocal, 1.0, n, VariableDeclarationStatement(), final, double, xReciprocal, 1.0, operand, operandOffset, ForStatement(for), int, i, 1, i, order, i, ExpressionStatement(), function, i, xk, ExpressionStatement(), xk, xReciprocal, nReciprocal, i, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:exp:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), Arrays, fill, function, FastMath, exp, operand, operandOffset, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:expm1:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, expm1, operand, operandOffset, ExpressionStatement(), Arrays, fill, function, 1, 1, order, FastMath, exp, operand, operandOffset, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:log:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, log, operand, operandOffset, IfStatement(if), order, 0, VariableDeclarationStatement(), double, inv, 1.0, operand, operandOffset, VariableDeclarationStatement(), double, xk, inv, ForStatement(for), int, i, 1, i, order, i, ExpressionStatement(), function, i, xk, ExpressionStatement(), xk, i, inv, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:log1p:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, log1p, operand, operandOffset, IfStatement(if), order, 0, VariableDeclarationStatement(), double, inv, 1.0, 1.0, operand, operandOffset, VariableDeclarationStatement(), double, xk, inv, ForStatement(for), int, i, 1, i, order, i, ExpressionStatement(), function, i, xk, ExpressionStatement(), xk, i, inv, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:log10:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, log10, operand, operandOffset, IfStatement(if), order, 0, VariableDeclarationStatement(), double, inv, 1.0, operand, operandOffset, VariableDeclarationStatement(), double, xk, inv, FastMath, log, 10.0, ForStatement(for), int, i, 1, i, order, i, ExpressionStatement(), function, i, xk, ExpressionStatement(), xk, i, inv, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:cos:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, cos, operand, operandOffset, IfStatement(if), order, 0, ExpressionStatement(), function, 1, FastMath, sin, operand, operandOffset, ForStatement(for), int, i, 2, i, order, i, ExpressionStatement(), function, i, function, i, 2, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:sin:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, sin, operand, operandOffset, IfStatement(if), order, 0, ExpressionStatement(), function, 1, FastMath, cos, operand, operandOffset, ForStatement(for), int, i, 2, i, order, i, ExpressionStatement(), function, i, function, i, 2, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:tan:double[]+int+double[]+int#[VariableDeclarationStatement(), final, double, function, double, 1, order, VariableDeclarationStatement(), final, double, t, FastMath, tan, operand, operandOffset, ExpressionStatement(), function, 0, t, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, p, double, order, 2, ExpressionStatement(), p, 1, 1, VariableDeclarationStatement(), final, double, t2, t, t, ForStatement(for), int, n, 1, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, 1, n, p, n, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, t2, p, k, IfStatement(if), k, 2, ExpressionStatement(), p, k, 2, k, 1, p, k, 1, k, 3, p, k, 3, IfStatement(if), k, 2, ExpressionStatement(), p, 0, p, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, t, ExpressionStatement(), function, n, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:acos:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), final, double, x, operand, operandOffset, ExpressionStatement(), function, 0, FastMath, acos, x, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, p, double, order, ExpressionStatement(), p, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, f, 1.0, 1, x2, VariableDeclarationStatement(), double, coeff, FastMath, sqrt, f, ExpressionStatement(), function, 1, coeff, p, 0, ForStatement(for), int, n, 2, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, 1, n, 1, p, n, 2, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, x2, p, k, IfStatement(if), k, 2, ExpressionStatement(), p, k, 2, k, 1, p, k, 1, 2, n, k, p, k, 3, IfStatement(if), k, 2, ExpressionStatement(), p, 0, p, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, x, ExpressionStatement(), coeff, f, ExpressionStatement(), function, n, coeff, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:asin:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), final, double, x, operand, operandOffset, ExpressionStatement(), function, 0, FastMath, asin, x, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, p, double, order, ExpressionStatement(), p, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, f, 1.0, 1, x2, VariableDeclarationStatement(), double, coeff, FastMath, sqrt, f, ExpressionStatement(), function, 1, coeff, p, 0, ForStatement(for), int, n, 2, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, 1, n, 1, p, n, 2, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, x2, p, k, IfStatement(if), k, 2, ExpressionStatement(), p, k, 2, k, 1, p, k, 1, 2, n, k, p, k, 3, IfStatement(if), k, 2, ExpressionStatement(), p, 0, p, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, x, ExpressionStatement(), coeff, f, ExpressionStatement(), function, n, coeff, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:atan:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), final, double, x, operand, operandOffset, ExpressionStatement(), function, 0, FastMath, atan, x, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, q, double, order, ExpressionStatement(), q, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, f, 1.0, 1, x2, VariableDeclarationStatement(), double, coeff, f, ExpressionStatement(), function, 1, coeff, q, 0, ForStatement(for), int, n, 2, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), q, n, 1, n, q, n, 2, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, x2, q, k, IfStatement(if), k, 2, ExpressionStatement(), q, k, 2, k, 1, q, k, 1, k, 1, 2, n, q, k, 3, IfStatement(if), k, 2, ExpressionStatement(), q, 0, q, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, x, ExpressionStatement(), coeff, f, ExpressionStatement(), function, n, coeff, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:atan2:double[]+int+double[]+int+double[]+int#[VariableDeclarationStatement(), double, tmp1, double, getSize, ExpressionStatement(), multiply, x, xOffset, x, xOffset, tmp1, 0, VariableDeclarationStatement(), double, tmp2, double, getSize, ExpressionStatement(), multiply, y, yOffset, y, yOffset, tmp2, 0, ExpressionStatement(), add, tmp1, 0, tmp2, 0, tmp2, 0, ExpressionStatement(), rootN, tmp2, 0, 2, tmp1, 0, IfStatement(if), x, xOffset, 0, ExpressionStatement(), add, tmp1, 0, x, xOffset, tmp2, 0, ExpressionStatement(), divide, y, yOffset, tmp2, 0, tmp1, 0, ExpressionStatement(), atan, tmp1, 0, tmp2, 0, ForStatement(for), int, i, 0, i, tmp2.length, i, ExpressionStatement(), result, resultOffset, i, 2, tmp2, i, ExpressionStatement(), subtract, tmp1, 0, x, xOffset, tmp2, 0, ExpressionStatement(), divide, y, yOffset, tmp2, 0, tmp1, 0, ExpressionStatement(), atan, tmp1, 0, tmp2, 0, ExpressionStatement(), result, resultOffset, tmp2, 0, 0, FastMath.PI, FastMath.PI, 2, tmp2, 0, ForStatement(for), int, i, 1, i, tmp2.length, i, ExpressionStatement(), result, resultOffset, i, 2, tmp2, i, ExpressionStatement(), result, resultOffset, FastMath, atan2, y, yOffset, x, xOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:cosh:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, cosh, operand, operandOffset, IfStatement(if), order, 0, ExpressionStatement(), function, 1, FastMath, sinh, operand, operandOffset, ForStatement(for), int, i, 2, i, order, i, ExpressionStatement(), function, i, function, i, 2, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:sinh:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, ExpressionStatement(), function, 0, FastMath, sinh, operand, operandOffset, IfStatement(if), order, 0, ExpressionStatement(), function, 1, FastMath, cosh, operand, operandOffset, ForStatement(for), int, i, 2, i, order, i, ExpressionStatement(), function, i, function, i, 2, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:tanh:double[]+int+double[]+int#[VariableDeclarationStatement(), final, double, function, double, 1, order, VariableDeclarationStatement(), final, double, t, FastMath, tanh, operand, operandOffset, ExpressionStatement(), function, 0, t, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, p, double, order, 2, ExpressionStatement(), p, 1, 1, VariableDeclarationStatement(), final, double, t2, t, t, ForStatement(for), int, n, 1, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, 1, n, p, n, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, t2, p, k, IfStatement(if), k, 2, ExpressionStatement(), p, k, 2, k, 1, p, k, 1, k, 3, p, k, 3, IfStatement(if), k, 2, ExpressionStatement(), p, 0, p, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, t, ExpressionStatement(), function, n, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:acosh:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), final, double, x, operand, operandOffset, ExpressionStatement(), function, 0, FastMath, acosh, x, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, p, double, order, ExpressionStatement(), p, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, f, 1.0, x2, 1, VariableDeclarationStatement(), double, coeff, FastMath, sqrt, f, ExpressionStatement(), function, 1, coeff, p, 0, ForStatement(for), int, n, 2, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, 1, 1, n, p, n, 2, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, x2, p, k, IfStatement(if), k, 2, ExpressionStatement(), p, k, 2, 1, k, p, k, 1, k, 2, n, p, k, 3, IfStatement(if), k, 2, ExpressionStatement(), p, 0, p, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, x, ExpressionStatement(), coeff, f, ExpressionStatement(), function, n, coeff, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:asinh:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), final, double, x, operand, operandOffset, ExpressionStatement(), function, 0, FastMath, asinh, x, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, p, double, order, ExpressionStatement(), p, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, f, 1.0, 1, x2, VariableDeclarationStatement(), double, coeff, FastMath, sqrt, f, ExpressionStatement(), function, 1, coeff, p, 0, ForStatement(for), int, n, 2, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, 1, 1, n, p, n, 2, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, x2, p, k, IfStatement(if), k, 2, ExpressionStatement(), p, k, 2, k, 1, p, k, 1, k, 2, n, p, k, 3, IfStatement(if), k, 2, ExpressionStatement(), p, 0, p, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, x, ExpressionStatement(), coeff, f, ExpressionStatement(), function, n, coeff, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:atanh:double[]+int+double[]+int#[VariableDeclarationStatement(), double, function, double, 1, order, VariableDeclarationStatement(), final, double, x, operand, operandOffset, ExpressionStatement(), function, 0, FastMath, atanh, x, IfStatement(if), order, 0, VariableDeclarationStatement(), final, double, q, double, order, ExpressionStatement(), q, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, f, 1.0, 1, x2, VariableDeclarationStatement(), double, coeff, f, ExpressionStatement(), function, 1, coeff, q, 0, ForStatement(for), int, n, 2, n, order, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), q, n, 1, n, q, n, 2, ForStatement(for), int, k, n, 1, k, 0, k, 2, ExpressionStatement(), v, v, x2, q, k, IfStatement(if), k, 2, ExpressionStatement(), q, k, 2, k, 1, q, k, 1, 2, n, k, 1, q, k, 3, IfStatement(if), k, 2, ExpressionStatement(), q, 0, q, 1, IfStatement(if), n, 0x1, 0, ExpressionStatement(), v, x, ExpressionStatement(), coeff, f, ExpressionStatement(), function, n, coeff, v, ExpressionStatement(), compose, operand, operandOffset, function, result, resultOffset]
org.apache.commons.math4.analysis.differentiation:DSCompiler:compose:double[]+int+double[]+double[]+int#[ForStatement(for), int, i, 0, i, compIndirection.length, i, VariableDeclarationStatement(), final, int, mappingI, compIndirection, i, VariableDeclarationStatement(), double, r, 0, ForStatement(for), int, j, 0, j, mappingI.length, j, VariableDeclarationStatement(), final, int, mappingIJ, mappingI, j, VariableDeclarationStatement(), double, product, mappingIJ, 0, f, mappingIJ, 1, ForStatement(for), int, k, 2, k, mappingIJ.length, k, ExpressionStatement(), product, operand, operandOffset, mappingIJ, k, ExpressionStatement(), r, product, ExpressionStatement(), result, resultOffset, i, r]
org.apache.commons.math4.analysis.differentiation:DSCompiler:taylor:double[]+int+double...#[VariableDeclarationStatement(), double, value, 0, ForStatement(for), int, i, getSize, 1, i, 0, i, VariableDeclarationStatement(), final, int, orders, getPartialDerivativeOrders, i, VariableDeclarationStatement(), double, term, ds, dsOffset, i, ForStatement(for), int, k, 0, k, orders.length, k, IfStatement(if), orders, k, 0, TryStatement(try), ExpressionStatement(), term, FastMath, pow, delta, k, orders, k, CombinatoricsUtils, factorial, orders, k, catch, NotPositiveException, e, ThrowStatement(throw), new, MathInternalError, e, ExpressionStatement(), value, term, ReturnStatement(return), value]
org.apache.commons.math4.analysis.differentiation:DSCompiler:checkCompatibility:DSCompiler#[IfStatement(if), parameters, compiler.parameters, ThrowStatement(throw), new, DimensionMismatchException, parameters, compiler.parameters, IfStatement(if), order, compiler.order, ThrowStatement(throw), new, DimensionMismatchException, order, compiler.order]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:getNbPoints:null#[ReturnStatement(return), nbPoints]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:getStepSize:null#[ReturnStatement(return), stepSize]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:evaluate:DerivativeStructure+double+double[]#[VariableDeclarationStatement(), final, double, top, double, nbPoints, VariableDeclarationStatement(), final, double, bottom, double, nbPoints, ForStatement(for), int, i, 0, i, nbPoints, i, ExpressionStatement(), bottom, i, y, i, ForStatement(for), int, j, 1, j, i, j, ExpressionStatement(), bottom, i, j, bottom, i, j, 1, bottom, i, j, j, stepSize, ExpressionStatement(), top, i, bottom, 0, VariableDeclarationStatement(), final, int, order, t, getOrder, VariableDeclarationStatement(), final, int, parameters, t, getFreeParameters, VariableDeclarationStatement(), final, double, derivatives, t, getAllDerivatives, VariableDeclarationStatement(), final, double, dt0, t, getValue, t0, VariableDeclarationStatement(), DerivativeStructure, interpolation, new, DerivativeStructure, parameters, order, 0.0, VariableDeclarationStatement(), DerivativeStructure, monomial, null, ForStatement(for), int, i, 0, i, nbPoints, i, IfStatement(if), i, 0, ExpressionStatement(), monomial, new, DerivativeStructure, parameters, order, 1.0, ExpressionStatement(), derivatives, 0, dt0, i, 1, stepSize, VariableDeclarationStatement(), final, DerivativeStructure, deltaX, new, DerivativeStructure, parameters, order, derivatives, ExpressionStatement(), monomial, monomial, multiply, deltaX, ExpressionStatement(), interpolation, interpolation, add, monomial, multiply, top, i, ReturnStatement(return), interpolation]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:differentiate:UnivariateFunction#[ReturnStatement(return), new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, ReturnStatement(return), function, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, MathIllegalArgumentException, IfStatement(if), t, getOrder, nbPoints, ThrowStatement(throw), new, NumberIsTooLargeException, t, getOrder, nbPoints, false, VariableDeclarationStatement(), final, double, t0, FastMath, max, FastMath, min, t, getValue, tMax, tMin, halfSampleSpan, VariableDeclarationStatement(), final, double, y, double, nbPoints, ForStatement(for), int, i, 0, i, nbPoints, i, ExpressionStatement(), y, i, function, value, t0, i, stepSize, ReturnStatement(return), evaluate, t, t0, y]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:differentiate:UnivariateVectorFunction#[ReturnStatement(return), new, UnivariateDifferentiableVectorFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, ReturnStatement(return), function, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, MathIllegalArgumentException, IfStatement(if), t, getOrder, nbPoints, ThrowStatement(throw), new, NumberIsTooLargeException, t, getOrder, nbPoints, false, VariableDeclarationStatement(), final, double, t0, FastMath, max, FastMath, min, t, getValue, tMax, tMin, halfSampleSpan, VariableDeclarationStatement(), double, y, null, ForStatement(for), int, i, 0, i, nbPoints, i, VariableDeclarationStatement(), final, double, v, function, value, t0, i, stepSize, IfStatement(if), i, 0, ExpressionStatement(), y, double, v.length, nbPoints, ForStatement(for), int, j, 0, j, v.length, j, ExpressionStatement(), y, j, i, v, j, VariableDeclarationStatement(), final, DerivativeStructure, value, DerivativeStructure, y.length, ForStatement(for), int, j, 0, j, value.length, j, ExpressionStatement(), value, j, evaluate, t, t0, y, j, ReturnStatement(return), value]
org.apache.commons.math4.analysis.differentiation:FiniteDifferencesDifferentiator:differentiate:UnivariateMatrixFunction#[ReturnStatement(return), new, UnivariateDifferentiableMatrixFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, ReturnStatement(return), function, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, MathIllegalArgumentException, IfStatement(if), t, getOrder, nbPoints, ThrowStatement(throw), new, NumberIsTooLargeException, t, getOrder, nbPoints, false, VariableDeclarationStatement(), final, double, t0, FastMath, max, FastMath, min, t, getValue, tMax, tMin, halfSampleSpan, VariableDeclarationStatement(), double, y, null, ForStatement(for), int, i, 0, i, nbPoints, i, VariableDeclarationStatement(), final, double, v, function, value, t0, i, stepSize, IfStatement(if), i, 0, ExpressionStatement(), y, double, v.length, v, 0, length, nbPoints, ForStatement(for), int, j, 0, j, v.length, j, ForStatement(for), int, k, 0, k, v, j, length, k, ExpressionStatement(), y, j, k, i, v, j, k, VariableDeclarationStatement(), final, DerivativeStructure, value, DerivativeStructure, y.length, y, 0, length, ForStatement(for), int, j, 0, j, value.length, j, ForStatement(for), int, k, 0, k, y, j, length, k, ExpressionStatement(), value, j, k, evaluate, t, t0, y, j, k, ReturnStatement(return), value]
org.apache.commons.math4.analysis.differentiation:GradientFunction:value:double[]#[VariableDeclarationStatement(), final, DerivativeStructure, dsX, DerivativeStructure, point.length, ForStatement(for), int, i, 0, i, point.length, i, ExpressionStatement(), dsX, i, new, DerivativeStructure, point.length, 1, i, point, i, VariableDeclarationStatement(), final, DerivativeStructure, dsY, f, value, dsX, VariableDeclarationStatement(), final, double, y, double, point.length, VariableDeclarationStatement(), final, int, orders, int, point.length, ForStatement(for), int, i, 0, i, point.length, i, ExpressionStatement(), orders, i, 1, ExpressionStatement(), y, i, dsY, getPartialDerivative, orders, ExpressionStatement(), orders, i, 0, ReturnStatement(return), y]
org.apache.commons.math4.analysis.differentiation:JacobianFunction:value:double[]#[VariableDeclarationStatement(), final, DerivativeStructure, dsX, DerivativeStructure, point.length, ForStatement(for), int, i, 0, i, point.length, i, ExpressionStatement(), dsX, i, new, DerivativeStructure, point.length, 1, i, point, i, VariableDeclarationStatement(), final, DerivativeStructure, dsY, f, value, dsX, VariableDeclarationStatement(), final, double, y, double, dsY.length, point.length, VariableDeclarationStatement(), final, int, orders, int, point.length, ForStatement(for), int, i, 0, i, dsY.length, i, ForStatement(for), int, j, 0, j, point.length, j, ExpressionStatement(), orders, j, 1, ExpressionStatement(), y, i, j, dsY, i, getPartialDerivative, orders, ExpressionStatement(), orders, j, 0, ReturnStatement(return), y]
org.apache.commons.math4.analysis.differentiation:SparseGradient:createConstant:double#[ReturnStatement(return), new, SparseGradient, value, Collections, Integer, Double, emptyMap]
org.apache.commons.math4.analysis.differentiation:SparseGradient:createVariable:int+double#[ReturnStatement(return), new, SparseGradient, value, Collections, singletonMap, idx, 1.0]
org.apache.commons.math4.analysis.differentiation:SparseGradient:numVars:null#[ReturnStatement(return), derivatives, size]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getDerivative:int#[VariableDeclarationStatement(), final, Double, out, derivatives, get, index, ReturnStatement(return), out, null, 0.0, out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getValue:null#[ReturnStatement(return), value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getReal:null#[ReturnStatement(return), value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:add:SparseGradient#[VariableDeclarationStatement(), final, SparseGradient, out, new, SparseGradient, value, a.value, derivatives, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, a.derivatives, entrySet, VariableDeclarationStatement(), final, int, id, entry, getKey, VariableDeclarationStatement(), final, Double, old, out.derivatives, get, id, IfStatement(if), old, null, ExpressionStatement(), out.derivatives, put, id, entry, getValue, ExpressionStatement(), out.derivatives, put, id, old, entry, getValue, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:addInPlace:SparseGradient#[ExpressionStatement(), value, a.value, EnhancedForStatement(for), final, Map.Entry, Integer, Double, entry, a.derivatives, entrySet, VariableDeclarationStatement(), final, int, id, entry, getKey, VariableDeclarationStatement(), final, Double, old, derivatives, get, id, IfStatement(if), old, null, ExpressionStatement(), derivatives, put, id, entry, getValue, ExpressionStatement(), derivatives, put, id, old, entry, getValue]
org.apache.commons.math4.analysis.differentiation:SparseGradient:add:double#[VariableDeclarationStatement(), final, SparseGradient, out, new, SparseGradient, value, c, derivatives, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:subtract:SparseGradient#[VariableDeclarationStatement(), final, SparseGradient, out, new, SparseGradient, value, a.value, derivatives, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, a.derivatives, entrySet, VariableDeclarationStatement(), final, int, id, entry, getKey, VariableDeclarationStatement(), final, Double, old, out.derivatives, get, id, IfStatement(if), old, null, ExpressionStatement(), out.derivatives, put, id, entry, getValue, ExpressionStatement(), out.derivatives, put, id, old, entry, getValue, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:subtract:double#[ReturnStatement(return), new, SparseGradient, value, c, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiply:SparseGradient#[VariableDeclarationStatement(), final, SparseGradient, out, new, SparseGradient, value, a.value, Collections, Integer, Double, emptyMap, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, derivatives, entrySet, ExpressionStatement(), out.derivatives, put, entry, getKey, a.value, entry, getValue, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, a.derivatives, entrySet, VariableDeclarationStatement(), final, int, id, entry, getKey, VariableDeclarationStatement(), final, Double, old, out.derivatives, get, id, IfStatement(if), old, null, ExpressionStatement(), out.derivatives, put, id, value, entry, getValue, ExpressionStatement(), out.derivatives, put, id, old, value, entry, getValue, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiplyInPlace:SparseGradient#[EnhancedForStatement(for), Map.Entry, Integer, Double, entry, derivatives, entrySet, ExpressionStatement(), derivatives, put, entry, getKey, a.value, entry, getValue, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, a.derivatives, entrySet, VariableDeclarationStatement(), final, int, id, entry, getKey, VariableDeclarationStatement(), final, Double, old, derivatives, get, id, IfStatement(if), old, null, ExpressionStatement(), derivatives, put, id, value, entry, getValue, ExpressionStatement(), derivatives, put, id, old, value, entry, getValue, ExpressionStatement(), value, a.value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiply:double#[ReturnStatement(return), new, SparseGradient, value, c, c, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:multiply:int#[ReturnStatement(return), new, SparseGradient, value, n, n, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:divide:SparseGradient#[VariableDeclarationStatement(), final, SparseGradient, out, new, SparseGradient, value, a.value, Collections, Integer, Double, emptyMap, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, derivatives, entrySet, ExpressionStatement(), out.derivatives, put, entry, getKey, entry, getValue, a.value, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, a.derivatives, entrySet, VariableDeclarationStatement(), final, int, id, entry, getKey, VariableDeclarationStatement(), final, Double, old, out.derivatives, get, id, IfStatement(if), old, null, ExpressionStatement(), out.derivatives, put, id, out.value, a.value, entry, getValue, ExpressionStatement(), out.derivatives, put, id, old, out.value, a.value, entry, getValue, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:divide:double#[ReturnStatement(return), new, SparseGradient, value, c, 1.0, c, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:negate:null#[ReturnStatement(return), new, SparseGradient, value, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:getField:null#[ReturnStatement(return), new, Field, SparseGradient, Override, public, SparseGradient, getZero, ReturnStatement(return), createConstant, 0, Override, public, SparseGradient, getOne, ReturnStatement(return), createConstant, 1, Override, public, Class, FieldElement, SparseGradient, getRuntimeClass, ReturnStatement(return), SparseGradient]
org.apache.commons.math4.analysis.differentiation:SparseGradient:remainder:double#[ReturnStatement(return), new, SparseGradient, FastMath, IEEEremainder, value, a, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:remainder:SparseGradient#[VariableDeclarationStatement(), final, double, rem, FastMath, IEEEremainder, value, a.value, VariableDeclarationStatement(), final, double, k, FastMath, rint, value, rem, a.value, ReturnStatement(return), subtract, a, multiply, k]
org.apache.commons.math4.analysis.differentiation:SparseGradient:abs:null#[IfStatement(if), Double, doubleToLongBits, value, 0, ReturnStatement(return), negate, ReturnStatement(return), this]
org.apache.commons.math4.analysis.differentiation:SparseGradient:ceil:null#[ReturnStatement(return), createConstant, FastMath, ceil, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:floor:null#[ReturnStatement(return), createConstant, FastMath, floor, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:rint:null#[ReturnStatement(return), createConstant, FastMath, rint, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:round:null#[ReturnStatement(return), FastMath, round, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:signum:null#[ReturnStatement(return), createConstant, FastMath, signum, value]
org.apache.commons.math4.analysis.differentiation:SparseGradient:copySign:SparseGradient#[VariableDeclarationStatement(), final, long, m, Double, doubleToLongBits, value, VariableDeclarationStatement(), final, long, s, Double, doubleToLongBits, sign.value, IfStatement(if), m, 0, s, 0, m, 0, s, 0, ReturnStatement(return), this, ReturnStatement(return), negate]
org.apache.commons.math4.analysis.differentiation:SparseGradient:copySign:double#[VariableDeclarationStatement(), final, long, m, Double, doubleToLongBits, value, VariableDeclarationStatement(), final, long, s, Double, doubleToLongBits, sign, IfStatement(if), m, 0, s, 0, m, 0, s, 0, ReturnStatement(return), this, ReturnStatement(return), negate]
org.apache.commons.math4.analysis.differentiation:SparseGradient:scalb:int#[VariableDeclarationStatement(), final, SparseGradient, out, new, SparseGradient, FastMath, scalb, value, n, Collections, Integer, Double, emptyMap, EnhancedForStatement(for), Map.Entry, Integer, Double, entry, derivatives, entrySet, ExpressionStatement(), out.derivatives, put, entry, getKey, FastMath, scalb, entry, getValue, n, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:hypot:SparseGradient#[IfStatement(if), Double, isInfinite, value, Double, isInfinite, y.value, ReturnStatement(return), createConstant, Double.POSITIVE_INFINITY, IfStatement(if), Double, isNaN, value, Double, isNaN, y.value, ReturnStatement(return), createConstant, Double.NaN, VariableDeclarationStatement(), final, int, expX, FastMath, getExponent, value, VariableDeclarationStatement(), final, int, expY, FastMath, getExponent, y.value, IfStatement(if), expX, expY, 27, ReturnStatement(return), abs, IfStatement(if), expY, expX, 27, ReturnStatement(return), y, abs, VariableDeclarationStatement(), final, int, middleExp, expX, expY, 2, VariableDeclarationStatement(), final, SparseGradient, scaledX, scalb, middleExp, VariableDeclarationStatement(), final, SparseGradient, scaledY, y, scalb, middleExp, VariableDeclarationStatement(), final, SparseGradient, scaledH, scaledX, multiply, scaledX, add, scaledY, multiply, scaledY, sqrt, ReturnStatement(return), scaledH, scalb, middleExp]
org.apache.commons.math4.analysis.differentiation:SparseGradient:hypot:SparseGradient+SparseGradient#[ReturnStatement(return), x, hypot, y]
org.apache.commons.math4.analysis.differentiation:SparseGradient:reciprocal:null#[ReturnStatement(return), new, SparseGradient, 1.0, value, 1.0, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:sqrt:null#[VariableDeclarationStatement(), final, double, sqrt, FastMath, sqrt, value, ReturnStatement(return), new, SparseGradient, sqrt, 0.5, sqrt, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:cbrt:null#[VariableDeclarationStatement(), final, double, cbrt, FastMath, cbrt, value, ReturnStatement(return), new, SparseGradient, cbrt, 1.0, 3, cbrt, cbrt, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:rootN:int#[IfStatement(if), n, 2, ReturnStatement(return), sqrt, IfStatement(if), n, 3, ReturnStatement(return), cbrt, VariableDeclarationStatement(), final, double, root, FastMath, pow, value, 1.0, n, ReturnStatement(return), new, SparseGradient, root, 1.0, n, FastMath, pow, root, n, 1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:double#[ReturnStatement(return), new, SparseGradient, FastMath, pow, value, p, p, FastMath, pow, value, p, 1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:int#[IfStatement(if), n, 0, ReturnStatement(return), getField, getOne, VariableDeclarationStatement(), final, double, valueNm1, FastMath, pow, value, n, 1, ReturnStatement(return), new, SparseGradient, value, valueNm1, n, valueNm1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:SparseGradient#[ReturnStatement(return), log, multiply, e, exp]
org.apache.commons.math4.analysis.differentiation:SparseGradient:pow:double+SparseGradient#[IfStatement(if), a, 0, IfStatement(if), x.value, 0, ReturnStatement(return), x, compose, 1.0, Double.NEGATIVE_INFINITY, IfStatement(if), x.value, 0, ReturnStatement(return), x, compose, Double.NaN, Double.NaN, ReturnStatement(return), x, getField, getZero, VariableDeclarationStatement(), final, double, ax, FastMath, pow, a, x.value, ReturnStatement(return), new, SparseGradient, ax, ax, FastMath, log, a, x.derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:exp:null#[VariableDeclarationStatement(), final, double, e, FastMath, exp, value, ReturnStatement(return), new, SparseGradient, e, e, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:expm1:null#[ReturnStatement(return), new, SparseGradient, FastMath, expm1, value, FastMath, exp, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:log:null#[ReturnStatement(return), new, SparseGradient, FastMath, log, value, 1.0, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:log10:null#[ReturnStatement(return), new, SparseGradient, FastMath, log10, value, 1.0, FastMath, log, 10.0, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:log1p:null#[ReturnStatement(return), new, SparseGradient, FastMath, log1p, value, 1.0, 1.0, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:cos:null#[ReturnStatement(return), new, SparseGradient, FastMath, cos, value, FastMath, sin, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:sin:null#[ReturnStatement(return), new, SparseGradient, FastMath, sin, value, FastMath, cos, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:tan:null#[VariableDeclarationStatement(), final, double, t, FastMath, tan, value, ReturnStatement(return), new, SparseGradient, t, 1, t, t, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:acos:null#[ReturnStatement(return), new, SparseGradient, FastMath, acos, value, 1.0, FastMath, sqrt, 1, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:asin:null#[ReturnStatement(return), new, SparseGradient, FastMath, asin, value, 1.0, FastMath, sqrt, 1, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atan:null#[ReturnStatement(return), new, SparseGradient, FastMath, atan, value, 1.0, 1, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atan2:SparseGradient#[VariableDeclarationStatement(), final, SparseGradient, r, multiply, this, add, x, multiply, x, sqrt, VariableDeclarationStatement(), final, SparseGradient, a, IfStatement(if), x.value, 0, ExpressionStatement(), a, divide, r, add, x, atan, multiply, 2, VariableDeclarationStatement(), final, SparseGradient, tmp, divide, r, subtract, x, atan, multiply, 2, ExpressionStatement(), a, tmp, add, tmp.value, 0, FastMath.PI, FastMath.PI, ExpressionStatement(), a.value, FastMath, atan2, value, x.value, ReturnStatement(return), a]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atan2:SparseGradient+SparseGradient#[ReturnStatement(return), y, atan2, x]
org.apache.commons.math4.analysis.differentiation:SparseGradient:cosh:null#[ReturnStatement(return), new, SparseGradient, FastMath, cosh, value, FastMath, sinh, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:sinh:null#[ReturnStatement(return), new, SparseGradient, FastMath, sinh, value, FastMath, cosh, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:tanh:null#[VariableDeclarationStatement(), final, double, t, FastMath, tanh, value, ReturnStatement(return), new, SparseGradient, t, 1, t, t, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:acosh:null#[ReturnStatement(return), new, SparseGradient, FastMath, acosh, value, 1.0, FastMath, sqrt, value, value, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:asinh:null#[ReturnStatement(return), new, SparseGradient, FastMath, asinh, value, 1.0, FastMath, sqrt, value, value, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:atanh:null#[ReturnStatement(return), new, SparseGradient, FastMath, atanh, value, 1.0, 1.0, value, value, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:toDegrees:null#[ReturnStatement(return), new, SparseGradient, FastMath, toDegrees, value, FastMath, toDegrees, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:toRadians:null#[ReturnStatement(return), new, SparseGradient, FastMath, toRadians, value, FastMath, toRadians, 1.0, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:taylor:double...#[VariableDeclarationStatement(), double, y, value, ForStatement(for), int, i, 0, i, delta.length, i, ExpressionStatement(), y, delta, i, getDerivative, i, ReturnStatement(return), y]
org.apache.commons.math4.analysis.differentiation:SparseGradient:compose:double+double#[ReturnStatement(return), new, SparseGradient, f0, f1, derivatives]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient[]+SparseGradient[]#[VariableDeclarationStatement(), SparseGradient, out, a, 0, getField, getZero, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), out, out, add, a, i, multiply, b, i, VariableDeclarationStatement(), final, double, aDouble, double, a.length, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), aDouble, i, a, i, getValue, VariableDeclarationStatement(), final, double, bDouble, double, b.length, ForStatement(for), int, i, 0, i, b.length, i, ExpressionStatement(), bDouble, i, b, i, getValue, ExpressionStatement(), out.value, MathArrays, linearCombination, aDouble, bDouble, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double[]+SparseGradient[]#[VariableDeclarationStatement(), SparseGradient, out, b, 0, getField, getZero, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), out, out, add, b, i, multiply, a, i, VariableDeclarationStatement(), final, double, bDouble, double, b.length, ForStatement(for), int, i, 0, i, b.length, i, ExpressionStatement(), bDouble, i, b, i, getValue, ExpressionStatement(), out.value, MathArrays, linearCombination, a, bDouble, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient+SparseGradient+SparseGradient+SparseGradient#[VariableDeclarationStatement(), SparseGradient, out, a1, multiply, b1, add, a2, multiply, b2, ExpressionStatement(), out.value, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double+SparseGradient+double+SparseGradient#[VariableDeclarationStatement(), SparseGradient, out, b1, multiply, a1, add, b2, multiply, a2, ExpressionStatement(), out.value, MathArrays, linearCombination, a1, b1.value, a2, b2.value, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient#[VariableDeclarationStatement(), SparseGradient, out, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, ExpressionStatement(), out.value, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double+SparseGradient+double+SparseGradient+double+SparseGradient#[VariableDeclarationStatement(), SparseGradient, out, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, ExpressionStatement(), out.value, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient+SparseGradient#[VariableDeclarationStatement(), SparseGradient, out, a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, add, a4, multiply, b4, ExpressionStatement(), out.value, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value, a4.value, b4.value, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:linearCombination:double+SparseGradient+double+SparseGradient+double+SparseGradient+double+SparseGradient#[VariableDeclarationStatement(), SparseGradient, out, b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, add, b4, multiply, a4, ExpressionStatement(), out.value, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value, a4, b4.value, ReturnStatement(return), out]
org.apache.commons.math4.analysis.differentiation:SparseGradient:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, SparseGradient, VariableDeclarationStatement(), final, SparseGradient, rhs, SparseGradient, other, IfStatement(if), Precision, equals, value, rhs.value, 1, ReturnStatement(return), false, IfStatement(if), derivatives, size, rhs.derivatives, size, ReturnStatement(return), false, EnhancedForStatement(for), final, Map.Entry, Integer, Double, entry, derivatives, entrySet, IfStatement(if), rhs.derivatives, containsKey, entry, getKey, ReturnStatement(return), false, IfStatement(if), Precision, equals, entry, getValue, rhs.derivatives, get, entry, getKey, 1, ReturnStatement(return), false, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.analysis.differentiation:SparseGradient:hashCode:null#[ReturnStatement(return), 743, 809, MathUtils, hash, value, 167, derivatives, hashCode]
org.apache.commons.math4.analysis.function:Abs:value:double#[ReturnStatement(return), FastMath, abs, x]
org.apache.commons.math4.analysis.function:Acos:value:double#[ReturnStatement(return), FastMath, acos, x]
org.apache.commons.math4.analysis.function:Acos:value:DerivativeStructure#[ReturnStatement(return), t, acos]
org.apache.commons.math4.analysis.function:Acosh:value:double#[ReturnStatement(return), FastMath, acosh, x]
org.apache.commons.math4.analysis.function:Acosh:value:DerivativeStructure#[ReturnStatement(return), t, acosh]
org.apache.commons.math4.analysis.function:Add:value:double+double#[ReturnStatement(return), x, y]
org.apache.commons.math4.analysis.function:Asin:value:double#[ReturnStatement(return), FastMath, asin, x]
org.apache.commons.math4.analysis.function:Asin:value:DerivativeStructure#[ReturnStatement(return), t, asin]
org.apache.commons.math4.analysis.function:Asinh:value:double#[ReturnStatement(return), FastMath, asinh, x]
org.apache.commons.math4.analysis.function:Asinh:value:DerivativeStructure#[ReturnStatement(return), t, asinh]
org.apache.commons.math4.analysis.function:Atan:value:double#[ReturnStatement(return), FastMath, atan, x]
org.apache.commons.math4.analysis.function:Atan:value:DerivativeStructure#[ReturnStatement(return), t, atan]
org.apache.commons.math4.analysis.function:Atan2:value:double+double#[ReturnStatement(return), FastMath, atan2, x, y]
org.apache.commons.math4.analysis.function:Atanh:value:double#[ReturnStatement(return), FastMath, atanh, x]
org.apache.commons.math4.analysis.function:Atanh:value:DerivativeStructure#[ReturnStatement(return), t, atanh]
org.apache.commons.math4.analysis.function:Cbrt:value:double#[ReturnStatement(return), FastMath, cbrt, x]
org.apache.commons.math4.analysis.function:Cbrt:value:DerivativeStructure#[ReturnStatement(return), t, cbrt]
org.apache.commons.math4.analysis.function:Ceil:value:double#[ReturnStatement(return), FastMath, ceil, x]
org.apache.commons.math4.analysis.function:Constant:value:double#[ReturnStatement(return), c]
org.apache.commons.math4.analysis.function:Constant:value:DerivativeStructure#[ReturnStatement(return), new, DerivativeStructure, t, getFreeParameters, t, getOrder, c]
org.apache.commons.math4.analysis.function:Cos:value:double#[ReturnStatement(return), FastMath, cos, x]
org.apache.commons.math4.analysis.function:Cos:value:DerivativeStructure#[ReturnStatement(return), t, cos]
org.apache.commons.math4.analysis.function:Cosh:value:double#[ReturnStatement(return), FastMath, cosh, x]
org.apache.commons.math4.analysis.function:Cosh:value:DerivativeStructure#[ReturnStatement(return), t, cosh]
org.apache.commons.math4.analysis.function:Divide:value:double+double#[ReturnStatement(return), x, y]
org.apache.commons.math4.analysis.function:Exp:value:double#[ReturnStatement(return), FastMath, exp, x]
org.apache.commons.math4.analysis.function:Exp:value:DerivativeStructure#[ReturnStatement(return), t, exp]
org.apache.commons.math4.analysis.function:Expm1:value:double#[ReturnStatement(return), FastMath, expm1, x]
org.apache.commons.math4.analysis.function:Expm1:value:DerivativeStructure#[ReturnStatement(return), t, expm1]
org.apache.commons.math4.analysis.function:Floor:value:double#[ReturnStatement(return), FastMath, floor, x]
org.apache.commons.math4.analysis.function:Gaussian:value:double#[ReturnStatement(return), value, x, mean, norm, i2s2]
org.apache.commons.math4.analysis.function:Gaussian:value:double+double+double#[ReturnStatement(return), norm, FastMath, exp, xMinusMean, xMinusMean, i2s2]
org.apache.commons.math4.analysis.function:Gaussian:value:DerivativeStructure#[VariableDeclarationStatement(), final, double, u, is, t, getValue, mean, VariableDeclarationStatement(), double, f, double, t, getOrder, 1, VariableDeclarationStatement(), final, double, p, double, f.length, ExpressionStatement(), p, 0, 1, VariableDeclarationStatement(), final, double, u2, u, u, VariableDeclarationStatement(), double, coeff, norm, FastMath, exp, 0.5, u2, IfStatement(if), coeff, Precision.SAFE_MIN, ExpressionStatement(), Arrays, fill, f, 0.0, ExpressionStatement(), f, 0, coeff, ForStatement(for), int, n, 1, n, f.length, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, p, n, 1, ForStatement(for), int, k, n, k, 0, k, 2, ExpressionStatement(), v, v, u2, p, k, IfStatement(if), k, 2, ExpressionStatement(), p, k, 2, k, 1, p, k, 1, p, k, 3, IfStatement(if), k, 2, ExpressionStatement(), p, 0, p, 1, IfStatement(if), n, 0x1, 1, ExpressionStatement(), v, u, ExpressionStatement(), coeff, is, ExpressionStatement(), f, n, coeff, v, ReturnStatement(return), t, compose, f]
org.apache.commons.math4.analysis.function:HarmonicOscillator:value:double#[ReturnStatement(return), value, omega, x, phase, amplitude]
org.apache.commons.math4.analysis.function:HarmonicOscillator:value:double+double#[ReturnStatement(return), amplitude, FastMath, cos, xTimesOmegaPlusPhase]
org.apache.commons.math4.analysis.function:HarmonicOscillator:value:DerivativeStructure#[VariableDeclarationStatement(), final, double, x, t, getValue, VariableDeclarationStatement(), double, f, double, t, getOrder, 1, VariableDeclarationStatement(), final, double, alpha, omega, x, phase, ExpressionStatement(), f, 0, amplitude, FastMath, cos, alpha, IfStatement(if), f.length, 1, ExpressionStatement(), f, 1, amplitude, omega, FastMath, sin, alpha, VariableDeclarationStatement(), final, double, mo2, omega, omega, ForStatement(for), int, i, 2, i, f.length, i, ExpressionStatement(), f, i, mo2, f, i, 2, ReturnStatement(return), t, compose, f]
org.apache.commons.math4.analysis.function:Identity:value:double#[ReturnStatement(return), x]
org.apache.commons.math4.analysis.function:Identity:value:DerivativeStructure#[ReturnStatement(return), t]
org.apache.commons.math4.analysis.function:Inverse:value:double#[ReturnStatement(return), 1, x]
org.apache.commons.math4.analysis.function:Inverse:value:DerivativeStructure#[ReturnStatement(return), t, reciprocal]
org.apache.commons.math4.analysis.function:Log:value:double#[ReturnStatement(return), FastMath, log, x]
org.apache.commons.math4.analysis.function:Log:value:DerivativeStructure#[ReturnStatement(return), t, log]
org.apache.commons.math4.analysis.function:Log10:value:double#[ReturnStatement(return), FastMath, log10, x]
org.apache.commons.math4.analysis.function:Log10:value:DerivativeStructure#[ReturnStatement(return), t, log10]
org.apache.commons.math4.analysis.function:Log1p:value:double#[ReturnStatement(return), FastMath, log1p, x]
org.apache.commons.math4.analysis.function:Log1p:value:DerivativeStructure#[ReturnStatement(return), t, log1p]
org.apache.commons.math4.analysis.function:Logistic:value:double#[ReturnStatement(return), value, m, x, k, b, q, a, oneOverN]
org.apache.commons.math4.analysis.function:Logistic:value:double+double+double+double+double+double#[ReturnStatement(return), a, k, a, FastMath, pow, 1, q, FastMath, exp, b, mMinusX, oneOverN]
org.apache.commons.math4.analysis.function:Logistic:value:DerivativeStructure#[ReturnStatement(return), t, negate, add, m, multiply, b, exp, multiply, q, add, 1, pow, oneOverN, reciprocal, multiply, k, a, add, a]
org.apache.commons.math4.analysis.function:Logit:value:double#[ReturnStatement(return), value, x, lo, hi]
org.apache.commons.math4.analysis.function:Logit:value:double+double+double#[IfStatement(if), x, lo, x, hi, ThrowStatement(throw), new, OutOfRangeException, x, lo, hi, ReturnStatement(return), FastMath, log, x, lo, hi, x]
org.apache.commons.math4.analysis.function:Logit:value:DerivativeStructure#[VariableDeclarationStatement(), final, double, x, t, getValue, IfStatement(if), x, lo, x, hi, ThrowStatement(throw), new, OutOfRangeException, x, lo, hi, VariableDeclarationStatement(), double, f, double, t, getOrder, 1, ExpressionStatement(), f, 0, FastMath, log, x, lo, hi, x, IfStatement(if), Double, isInfinite, f, 0, IfStatement(if), f.length, 1, ExpressionStatement(), f, 1, Double.POSITIVE_INFINITY, ForStatement(for), int, i, 2, i, f.length, i, ExpressionStatement(), f, i, f, i, 2, VariableDeclarationStatement(), final, double, invL, 1.0, x, lo, VariableDeclarationStatement(), double, xL, invL, VariableDeclarationStatement(), final, double, invH, 1.0, hi, x, VariableDeclarationStatement(), double, xH, invH, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), f, i, xL, xH, ExpressionStatement(), xL, i, invL, ExpressionStatement(), xH, i, invH, ReturnStatement(return), t, compose, f]
org.apache.commons.math4.analysis.function:Max:value:double+double#[ReturnStatement(return), FastMath, max, x, y]
org.apache.commons.math4.analysis.function:Min:value:double+double#[ReturnStatement(return), FastMath, min, x, y]
org.apache.commons.math4.analysis.function:Minus:value:double#[ReturnStatement(return), x]
org.apache.commons.math4.analysis.function:Minus:value:DerivativeStructure#[ReturnStatement(return), t, negate]
org.apache.commons.math4.analysis.function:Multiply:value:double+double#[ReturnStatement(return), x, y]
org.apache.commons.math4.analysis.function:Pow:value:double+double#[ReturnStatement(return), FastMath, pow, x, y]
org.apache.commons.math4.analysis.function:Power:value:double#[ReturnStatement(return), FastMath, pow, x, p]
org.apache.commons.math4.analysis.function:Power:value:DerivativeStructure#[ReturnStatement(return), t, pow, p]
org.apache.commons.math4.analysis.function:Rint:value:double#[ReturnStatement(return), FastMath, rint, x]
org.apache.commons.math4.analysis.function:Sigmoid:value:double#[ReturnStatement(return), value, x, lo, hi]
org.apache.commons.math4.analysis.function:Sigmoid:value:double+double+double#[ReturnStatement(return), lo, hi, lo, 1, FastMath, exp, x]
org.apache.commons.math4.analysis.function:Sigmoid:value:DerivativeStructure#[VariableDeclarationStatement(), double, f, double, t, getOrder, 1, VariableDeclarationStatement(), final, double, exp, FastMath, exp, t, getValue, IfStatement(if), Double, isInfinite, exp, ExpressionStatement(), f, 0, lo, ExpressionStatement(), Arrays, fill, f, 1, f.length, 0.0, VariableDeclarationStatement(), final, double, p, double, f.length, VariableDeclarationStatement(), final, double, inv, 1, 1, exp, VariableDeclarationStatement(), double, coeff, hi, lo, ForStatement(for), int, n, 0, n, f.length, n, VariableDeclarationStatement(), double, v, 0, ExpressionStatement(), p, n, 1, ForStatement(for), int, k, n, k, 0, k, ExpressionStatement(), v, v, exp, p, k, IfStatement(if), k, 1, ExpressionStatement(), p, k, 1, n, k, 2, p, k, 2, k, 1, p, k, 1, ExpressionStatement(), p, 0, 0, ExpressionStatement(), coeff, inv, ExpressionStatement(), f, n, coeff, v, ExpressionStatement(), f, 0, lo, ReturnStatement(return), t, compose, f]
org.apache.commons.math4.analysis.function:Signum:value:double#[ReturnStatement(return), FastMath, signum, x]
org.apache.commons.math4.analysis.function:Sin:value:double#[ReturnStatement(return), FastMath, sin, x]
org.apache.commons.math4.analysis.function:Sin:value:DerivativeStructure#[ReturnStatement(return), t, sin]
org.apache.commons.math4.analysis.function:Sinc:value:double#[VariableDeclarationStatement(), final, double, scaledX, normalized, FastMath.PI, x, x, IfStatement(if), FastMath, abs, scaledX, SHORTCUT, VariableDeclarationStatement(), final, double, scaledX2, scaledX, scaledX, ReturnStatement(return), scaledX2, 20, scaledX2, 120, 120, ReturnStatement(return), FastMath, sin, scaledX, scaledX]
org.apache.commons.math4.analysis.function:Sinc:value:DerivativeStructure#[VariableDeclarationStatement(), final, double, scaledX, normalized, FastMath.PI, 1, t, getValue, VariableDeclarationStatement(), final, double, scaledX2, scaledX, scaledX, VariableDeclarationStatement(), double, f, double, t, getOrder, 1, IfStatement(if), FastMath, abs, scaledX, SHORTCUT, ForStatement(for), int, i, 0, i, f.length, i, VariableDeclarationStatement(), final, int, k, i, 2, IfStatement(if), i, 0x1, 0, ExpressionStatement(), f, i, k, 0x1, 0, 1, 1, 1.0, i, 1, scaledX2, 1.0, 2, i, 6, scaledX2, 24, i, 120, ExpressionStatement(), f, i, k, 0x1, 0, scaledX, scaledX, 1.0, i, 2, scaledX2, 1.0, 6, i, 24, scaledX2, 120, i, 720, VariableDeclarationStatement(), final, double, inv, 1, scaledX, VariableDeclarationStatement(), final, double, cos, FastMath, cos, scaledX, VariableDeclarationStatement(), final, double, sin, FastMath, sin, scaledX, ExpressionStatement(), f, 0, inv, sin, VariableDeclarationStatement(), final, double, sc, double, f.length, ExpressionStatement(), sc, 0, 1, VariableDeclarationStatement(), double, coeff, inv, ForStatement(for), int, n, 1, n, f.length, n, VariableDeclarationStatement(), double, s, 0, VariableDeclarationStatement(), double, c, 0, VariableDeclarationStatement(), final, int, kStart, IfStatement(if), n, 0x1, 0, ExpressionStatement(), sc, n, 0, ExpressionStatement(), kStart, n, ExpressionStatement(), sc, n, sc, n, 1, ExpressionStatement(), c, sc, n, ExpressionStatement(), kStart, n, 1, ForStatement(for), int, k, kStart, k, 1, k, 2, ExpressionStatement(), sc, k, k, n, sc, k, sc, k, 1, ExpressionStatement(), s, s, scaledX2, sc, k, ExpressionStatement(), sc, k, 1, k, 1, n, sc, k, 1, sc, k, 2, ExpressionStatement(), c, c, scaledX2, sc, k, 1, ExpressionStatement(), sc, 0, n, ExpressionStatement(), s, s, scaledX2, sc, 0, ExpressionStatement(), coeff, inv, ExpressionStatement(), f, n, coeff, s, sin, c, scaledX, cos, IfStatement(if), normalized, VariableDeclarationStatement(), double, scale, FastMath.PI, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), f, i, scale, ExpressionStatement(), scale, FastMath.PI, ReturnStatement(return), t, compose, f]
org.apache.commons.math4.analysis.function:Sinh:value:double#[ReturnStatement(return), FastMath, sinh, x]
org.apache.commons.math4.analysis.function:Sinh:value:DerivativeStructure#[ReturnStatement(return), t, sinh]
org.apache.commons.math4.analysis.function:Sqrt:value:double#[ReturnStatement(return), FastMath, sqrt, x]
org.apache.commons.math4.analysis.function:Sqrt:value:DerivativeStructure#[ReturnStatement(return), t, sqrt]
org.apache.commons.math4.analysis.function:StepFunction:value:double#[VariableDeclarationStatement(), int, index, Arrays, binarySearch, abscissa, x, VariableDeclarationStatement(), double, fx, 0, IfStatement(if), index, 1, ExpressionStatement(), fx, ordinate, index, 2, IfStatement(if), index, 0, ExpressionStatement(), fx, ordinate, index, ExpressionStatement(), fx, ordinate, 0, ReturnStatement(return), fx]
org.apache.commons.math4.analysis.function:Subtract:value:double+double#[ReturnStatement(return), x, y]
org.apache.commons.math4.analysis.function:Tan:value:double#[ReturnStatement(return), FastMath, tan, x]
org.apache.commons.math4.analysis.function:Tan:value:DerivativeStructure#[ReturnStatement(return), t, tan]
org.apache.commons.math4.analysis.function:Tanh:value:double#[ReturnStatement(return), FastMath, tanh, x]
org.apache.commons.math4.analysis.function:Tanh:value:DerivativeStructure#[ReturnStatement(return), t, tanh]
org.apache.commons.math4.analysis.function:Ulp:value:double#[ReturnStatement(return), FastMath, ulp, x]
org.apache.commons.math4.analysis:FunctionUtils:compose:UnivariateFunction...#[ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, double, x, VariableDeclarationStatement(), double, r, x, ForStatement(for), int, i, f.length, 1, i, 0, i, ExpressionStatement(), r, f, i, value, r, ReturnStatement(return), r]
org.apache.commons.math4.analysis:FunctionUtils:compose:UnivariateDifferentiableFunction...#[ReturnStatement(return), new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, t, VariableDeclarationStatement(), double, r, t, ForStatement(for), int, i, f.length, 1, i, 0, i, ExpressionStatement(), r, f, i, value, r, ReturnStatement(return), r, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, VariableDeclarationStatement(), DerivativeStructure, r, t, ForStatement(for), int, i, f.length, 1, i, 0, i, ExpressionStatement(), r, f, i, value, r, ReturnStatement(return), r]
org.apache.commons.math4.analysis:FunctionUtils:add:UnivariateFunction...#[ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, double, x, VariableDeclarationStatement(), double, r, f, 0, value, x, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), r, f, i, value, x, ReturnStatement(return), r]
org.apache.commons.math4.analysis:FunctionUtils:add:UnivariateDifferentiableFunction...#[ReturnStatement(return), new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, t, VariableDeclarationStatement(), double, r, f, 0, value, t, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), r, f, i, value, t, ReturnStatement(return), r, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, DimensionMismatchException, VariableDeclarationStatement(), DerivativeStructure, r, f, 0, value, t, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), r, r, add, f, i, value, t, ReturnStatement(return), r]
org.apache.commons.math4.analysis:FunctionUtils:multiply:UnivariateFunction...#[ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, double, x, VariableDeclarationStatement(), double, r, f, 0, value, x, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), r, f, i, value, x, ReturnStatement(return), r]
org.apache.commons.math4.analysis:FunctionUtils:multiply:UnivariateDifferentiableFunction...#[ReturnStatement(return), new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, t, VariableDeclarationStatement(), double, r, f, 0, value, t, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), r, f, i, value, t, ReturnStatement(return), r, Override, public, DerivativeStructure, value, final, DerivativeStructure, t, VariableDeclarationStatement(), DerivativeStructure, r, f, 0, value, t, ForStatement(for), int, i, 1, i, f.length, i, ExpressionStatement(), r, r, multiply, f, i, value, t, ReturnStatement(return), r]
org.apache.commons.math4.analysis:FunctionUtils:combine:BivariateFunction+UnivariateFunction+UnivariateFunction#[ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, double, x, ReturnStatement(return), combiner, value, f, value, x, g, value, x]
org.apache.commons.math4.analysis:FunctionUtils:collector:BivariateFunction+UnivariateFunction+double#[ReturnStatement(return), new, MultivariateFunction, Override, public, double, value, double, point, VariableDeclarationStatement(), double, result, combiner, value, initialValue, f, value, point, 0, ForStatement(for), int, i, 1, i, point.length, i, ExpressionStatement(), result, combiner, value, result, f, value, point, i, ReturnStatement(return), result]
org.apache.commons.math4.analysis:FunctionUtils:collector:BivariateFunction+double#[ReturnStatement(return), collector, combiner, new, Identity, initialValue]
org.apache.commons.math4.analysis:FunctionUtils:fix1stArgument:BivariateFunction+double#[ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, double, x, ReturnStatement(return), f, value, fixed, x]
org.apache.commons.math4.analysis:FunctionUtils:fix2ndArgument:BivariateFunction+double#[ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, double, x, ReturnStatement(return), f, value, x, fixed]
org.apache.commons.math4.analysis:FunctionUtils:sample:UnivariateFunction+double+double+int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, Integer, valueOf, n, IfStatement(if), min, max, ThrowStatement(throw), new, NumberIsTooLargeException, min, max, false, VariableDeclarationStatement(), final, double, s, double, n, VariableDeclarationStatement(), final, double, h, max, min, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), s, i, f, value, min, i, h, ReturnStatement(return), s]
org.apache.commons.math4.analysis:FunctionUtils:toDifferentiable:UnivariateFunction+UnivariateFunction...#[ReturnStatement(return), new, UnivariateDifferentiableFunction, Override, public, double, value, final, double, x, ReturnStatement(return), f, value, x, Override, public, DerivativeStructure, value, final, DerivativeStructure, x, IfStatement(if), x, getOrder, derivatives.length, ThrowStatement(throw), new, NumberIsTooLargeException, x, getOrder, derivatives.length, true, VariableDeclarationStatement(), final, double, packed, double, x, getOrder, 1, ExpressionStatement(), packed, 0, f, value, x, getValue, ForStatement(for), int, i, 0, i, x, getOrder, i, ExpressionStatement(), packed, i, 1, derivatives, i, value, x, getValue, ReturnStatement(return), x, compose, packed]
org.apache.commons.math4.analysis:FunctionUtils:toDifferentiable:MultivariateFunction+MultivariateVectorFunction#[ReturnStatement(return), new, MultivariateDifferentiableFunction, Override, public, double, value, final, double, point, ReturnStatement(return), f, value, point, Override, public, DerivativeStructure, value, final, DerivativeStructure, point, VariableDeclarationStatement(), final, double, dPoint, double, point.length, ForStatement(for), int, i, 0, i, point.length, i, ExpressionStatement(), dPoint, i, point, i, getValue, IfStatement(if), point, i, getOrder, 1, ThrowStatement(throw), new, NumberIsTooLargeException, point, i, getOrder, 1, true, VariableDeclarationStatement(), final, double, v, f, value, dPoint, VariableDeclarationStatement(), final, double, dv, gradient, value, dPoint, IfStatement(if), dv.length, point.length, ThrowStatement(throw), new, DimensionMismatchException, dv.length, point.length, VariableDeclarationStatement(), final, int, parameters, point, 0, getFreeParameters, VariableDeclarationStatement(), final, double, partials, double, point.length, VariableDeclarationStatement(), final, double, packed, double, parameters, 1, ExpressionStatement(), packed, 0, v, VariableDeclarationStatement(), final, int, orders, int, parameters, ForStatement(for), int, i, 0, i, parameters, i, ExpressionStatement(), orders, i, 1, ForStatement(for), int, j, 0, j, point.length, j, ExpressionStatement(), partials, j, point, j, getPartialDerivative, orders, ExpressionStatement(), orders, i, 0, ExpressionStatement(), packed, i, 1, MathArrays, linearCombination, dv, partials, ReturnStatement(return), new, DerivativeStructure, parameters, 1, packed]
org.apache.commons.math4.analysis:FunctionUtils:derivative:UnivariateDifferentiableFunction+int#[ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, final, double, x, VariableDeclarationStatement(), final, DerivativeStructure, dsX, new, DerivativeStructure, 1, order, 0, x, ReturnStatement(return), f, value, dsX, getPartialDerivative, order]
org.apache.commons.math4.analysis:FunctionUtils:derivative:MultivariateDifferentiableFunction+int[]#[ReturnStatement(return), new, MultivariateFunction, Override, public, double, value, final, double, point, VariableDeclarationStatement(), int, sumOrders, 0, EnhancedForStatement(for), final, int, order, orders, ExpressionStatement(), sumOrders, order, VariableDeclarationStatement(), final, DerivativeStructure, dsPoint, DerivativeStructure, point.length, ForStatement(for), int, i, 0, i, point.length, i, ExpressionStatement(), dsPoint, i, new, DerivativeStructure, point.length, sumOrders, i, point, i, ReturnStatement(return), f, value, dsPoint, getPartialDerivative, orders]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getRelativeAccuracy:null#[ReturnStatement(return), relativeAccuracy]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getAbsoluteAccuracy:null#[ReturnStatement(return), absoluteAccuracy]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMinimalIterationCount:null#[ReturnStatement(return), minimalIterationCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMaximalIterationCount:null#[ReturnStatement(return), iterations, getMaximalCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getEvaluations:null#[ReturnStatement(return), evaluations, getCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getIterations:null#[ReturnStatement(return), iterations, getCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMin:null#[ReturnStatement(return), min]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:getMax:null#[ReturnStatement(return), max]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:computeObjectiveValue:double#[TryStatement(try), ExpressionStatement(), evaluations, incrementCount, catch, MaxCountExceededException, e, ThrowStatement(throw), new, TooManyEvaluationsException, e, getMax, ReturnStatement(return), function, value, point]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:setup:int+UnivariateFunction+double+double#[ExpressionStatement(), MathUtils, checkNotNull, f, ExpressionStatement(), UnivariateSolverUtils, verifyInterval, lower, upper, ExpressionStatement(), min, lower, ExpressionStatement(), max, upper, ExpressionStatement(), function, f, ExpressionStatement(), evaluations, setMaximalCount, maxEval, ExpressionStatement(), evaluations, resetCount, ExpressionStatement(), iterations, resetCount]
org.apache.commons.math4.analysis.integration:BaseAbstractUnivariateIntegrator:integrate:int+UnivariateFunction+double+double#[ExpressionStatement(), setup, maxEval, f, lower, upper, ReturnStatement(return), doIntegrate]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:getRule:int#[IfStatement(if), numberOfPoints, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_POINTS, numberOfPoints, VariableDeclarationStatement(), Pair, double, double, cached, pointsAndWeightsDouble, get, numberOfPoints, IfStatement(if), cached, null, VariableDeclarationStatement(), final, Pair, T, T, rule, getRuleInternal, numberOfPoints, ExpressionStatement(), cached, convertToDouble, rule, ExpressionStatement(), pointsAndWeightsDouble, put, numberOfPoints, cached, ReturnStatement(return), new, Pair, double, double, cached, getFirst, clone, cached, getSecond, clone]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:getRuleInternal:int#[VariableDeclarationStatement(), final, Pair, T, T, rule, pointsAndWeights, get, numberOfPoints, IfStatement(if), rule, null, ExpressionStatement(), addRule, computeRule, numberOfPoints, ReturnStatement(return), getRuleInternal, numberOfPoints, ReturnStatement(return), rule]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:addRule:Pair<T[],T[]>#[IfStatement(if), rule, getFirst, length, rule, getSecond, length, ThrowStatement(throw), new, DimensionMismatchException, rule, getFirst, length, rule, getSecond, length, ExpressionStatement(), pointsAndWeights, put, rule, getFirst, length, rule]
org.apache.commons.math4.analysis.integration.gauss:BaseRuleFactory:convertToDouble:Pair<T[],T[]>#[VariableDeclarationStatement(), final, T, pT, rule, getFirst, VariableDeclarationStatement(), final, T, wT, rule, getSecond, VariableDeclarationStatement(), final, int, len, pT.length, VariableDeclarationStatement(), final, double, pD, double, len, VariableDeclarationStatement(), final, double, wD, double, len, ForStatement(for), int, i, 0, i, len, i, ExpressionStatement(), pD, i, pT, i, doubleValue, ExpressionStatement(), wD, i, wT, i, doubleValue, ReturnStatement(return), new, Pair, double, double, pD, wD]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:integrate:UnivariateFunction#[VariableDeclarationStatement(), double, s, 0, VariableDeclarationStatement(), double, c, 0, ForStatement(for), int, i, 0, i, points.length, i, VariableDeclarationStatement(), final, double, x, points, i, VariableDeclarationStatement(), final, double, w, weights, i, VariableDeclarationStatement(), final, double, y, w, f, value, x, c, VariableDeclarationStatement(), final, double, t, s, y, ExpressionStatement(), c, t, s, y, ExpressionStatement(), s, t, ReturnStatement(return), s]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:getNumberOfPoints:null#[ReturnStatement(return), points.length]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:getPoint:int#[ReturnStatement(return), points, index]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegrator:getWeight:int#[ReturnStatement(return), weights, index]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendre:int#[ReturnStatement(return), new, GaussIntegrator, getRule, legendre, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendre:int+double+double#[ReturnStatement(return), new, GaussIntegrator, transform, getRule, legendre, numberOfPoints, lowerBound, upperBound]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendreHighPrecision:int#[ReturnStatement(return), new, GaussIntegrator, getRule, legendreHighPrecision, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:legendreHighPrecision:int+double+double#[ReturnStatement(return), new, GaussIntegrator, transform, getRule, legendreHighPrecision, numberOfPoints, lowerBound, upperBound]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:hermite:int#[ReturnStatement(return), new, SymmetricGaussIntegrator, getRule, hermite, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:getRule:Number>+int#[ReturnStatement(return), factory, getRule, numberOfPoints]
org.apache.commons.math4.analysis.integration.gauss:GaussIntegratorFactory:transform:Pair<double[],double[]>+double+double#[VariableDeclarationStatement(), final, double, points, rule, getFirst, VariableDeclarationStatement(), final, double, weights, rule, getSecond, VariableDeclarationStatement(), final, double, scale, b, a, 2, VariableDeclarationStatement(), final, double, shift, a, scale, ForStatement(for), int, i, 0, i, points.length, i, ExpressionStatement(), points, i, points, i, scale, shift, ExpressionStatement(), weights, i, scale, ReturnStatement(return), new, Pair, double, double, points, weights]
org.apache.commons.math4.analysis.integration.gauss:HermiteRuleFactory:computeRule:int#[IfStatement(if), numberOfPoints, 1, ReturnStatement(return), new, Pair, Double, Double, Double, 0d, Double, SQRT_PI, VariableDeclarationStatement(), final, int, lastNumPoints, numberOfPoints, 1, VariableDeclarationStatement(), final, Double, previousPoints, getRuleInternal, lastNumPoints, getFirst, VariableDeclarationStatement(), final, Double, points, Double, numberOfPoints, VariableDeclarationStatement(), final, Double, weights, Double, numberOfPoints, VariableDeclarationStatement(), final, double, sqrtTwoTimesLastNumPoints, FastMath, sqrt, 2, lastNumPoints, VariableDeclarationStatement(), final, double, sqrtTwoTimesNumPoints, FastMath, sqrt, 2, numberOfPoints, VariableDeclarationStatement(), final, int, iMax, numberOfPoints, 2, ForStatement(for), int, i, 0, i, iMax, i, VariableDeclarationStatement(), double, a, i, 0, sqrtTwoTimesLastNumPoints, previousPoints, i, 1, doubleValue, VariableDeclarationStatement(), double, b, iMax, 1, 0.5, previousPoints, i, doubleValue, VariableDeclarationStatement(), double, hma, H0, VariableDeclarationStatement(), double, ha, H1, a, VariableDeclarationStatement(), double, hmb, H0, VariableDeclarationStatement(), double, hb, H1, b, ForStatement(for), int, j, 1, j, numberOfPoints, j, VariableDeclarationStatement(), final, double, jp1, j, 1, VariableDeclarationStatement(), final, double, s, FastMath, sqrt, 2, jp1, VariableDeclarationStatement(), final, double, sm, FastMath, sqrt, j, jp1, VariableDeclarationStatement(), final, double, hpa, s, a, ha, sm, hma, VariableDeclarationStatement(), final, double, hpb, s, b, hb, sm, hmb, ExpressionStatement(), hma, ha, ExpressionStatement(), ha, hpa, ExpressionStatement(), hmb, hb, ExpressionStatement(), hb, hpb, VariableDeclarationStatement(), double, c, 0.5, a, b, VariableDeclarationStatement(), double, hmc, H0, VariableDeclarationStatement(), double, hc, H1, c, VariableDeclarationStatement(), boolean, done, false, WhileStatement(while), done, ExpressionStatement(), done, b, a, Math, ulp, c, ExpressionStatement(), hmc, H0, ExpressionStatement(), hc, H1, c, ForStatement(for), int, j, 1, j, numberOfPoints, j, VariableDeclarationStatement(), final, double, jp1, j, 1, VariableDeclarationStatement(), final, double, s, FastMath, sqrt, 2, jp1, VariableDeclarationStatement(), final, double, sm, FastMath, sqrt, j, jp1, VariableDeclarationStatement(), final, double, hpc, s, c, hc, sm, hmc, ExpressionStatement(), hmc, hc, ExpressionStatement(), hc, hpc, IfStatement(if), done, IfStatement(if), ha, hc, 0, ExpressionStatement(), b, c, ExpressionStatement(), hmb, hmc, ExpressionStatement(), hb, hc, ExpressionStatement(), a, c, ExpressionStatement(), hma, hmc, ExpressionStatement(), ha, hc, ExpressionStatement(), c, 0.5, a, b, VariableDeclarationStatement(), final, double, d, sqrtTwoTimesNumPoints, hmc, VariableDeclarationStatement(), final, double, w, 2, d, d, ExpressionStatement(), points, i, c, ExpressionStatement(), weights, i, w, VariableDeclarationStatement(), final, int, idx, lastNumPoints, i, ExpressionStatement(), points, idx, c, ExpressionStatement(), weights, idx, w, IfStatement(if), numberOfPoints, 2, 0, VariableDeclarationStatement(), double, hm, H0, ForStatement(for), int, j, 1, j, numberOfPoints, j, 2, VariableDeclarationStatement(), final, double, jp1, j, 1, ExpressionStatement(), hm, FastMath, sqrt, j, jp1, hm, VariableDeclarationStatement(), final, double, d, sqrtTwoTimesNumPoints, hm, VariableDeclarationStatement(), final, double, w, 2, d, d, ExpressionStatement(), points, iMax, 0d, ExpressionStatement(), weights, iMax, w, ReturnStatement(return), new, Pair, Double, Double, points, weights]
org.apache.commons.math4.analysis.integration.gauss:LegendreHighPrecisionRuleFactory:computeRule:int#[IfStatement(if), numberOfPoints, 1, ReturnStatement(return), new, Pair, BigDecimal, BigDecimal, BigDecimal, BigDecimal.ZERO, BigDecimal, two, VariableDeclarationStatement(), final, BigDecimal, previousPoints, getRuleInternal, numberOfPoints, 1, getFirst, VariableDeclarationStatement(), final, BigDecimal, points, BigDecimal, numberOfPoints, VariableDeclarationStatement(), final, BigDecimal, weights, BigDecimal, numberOfPoints, VariableDeclarationStatement(), final, int, iMax, numberOfPoints, 2, ForStatement(for), int, i, 0, i, iMax, i, VariableDeclarationStatement(), BigDecimal, a, i, 0, minusOne, previousPoints, i, 1, VariableDeclarationStatement(), BigDecimal, b, iMax, 1, BigDecimal.ONE, previousPoints, i, VariableDeclarationStatement(), BigDecimal, pma, BigDecimal.ONE, VariableDeclarationStatement(), BigDecimal, pa, a, VariableDeclarationStatement(), BigDecimal, pmb, BigDecimal.ONE, VariableDeclarationStatement(), BigDecimal, pb, b, ForStatement(for), int, j, 1, j, numberOfPoints, j, VariableDeclarationStatement(), final, BigDecimal, b_two_j_p_1, new, BigDecimal, 2, j, 1, mContext, VariableDeclarationStatement(), final, BigDecimal, b_j, new, BigDecimal, j, mContext, VariableDeclarationStatement(), final, BigDecimal, b_j_p_1, new, BigDecimal, j, 1, mContext, VariableDeclarationStatement(), BigDecimal, tmp1, a, multiply, b_two_j_p_1, mContext, ExpressionStatement(), tmp1, pa, multiply, tmp1, mContext, VariableDeclarationStatement(), BigDecimal, tmp2, pma, multiply, b_j, mContext, VariableDeclarationStatement(), BigDecimal, ppa, tmp1, subtract, tmp2, mContext, ExpressionStatement(), ppa, ppa, divide, b_j_p_1, mContext, ExpressionStatement(), tmp1, b, multiply, b_two_j_p_1, mContext, ExpressionStatement(), tmp1, pb, multiply, tmp1, mContext, ExpressionStatement(), tmp2, pmb, multiply, b_j, mContext, VariableDeclarationStatement(), BigDecimal, ppb, tmp1, subtract, tmp2, mContext, ExpressionStatement(), ppb, ppb, divide, b_j_p_1, mContext, ExpressionStatement(), pma, pa, ExpressionStatement(), pa, ppa, ExpressionStatement(), pmb, pb, ExpressionStatement(), pb, ppb, VariableDeclarationStatement(), BigDecimal, c, a, add, b, mContext, multiply, oneHalf, mContext, VariableDeclarationStatement(), BigDecimal, pmc, BigDecimal.ONE, VariableDeclarationStatement(), BigDecimal, pc, c, VariableDeclarationStatement(), boolean, done, false, WhileStatement(while), done, VariableDeclarationStatement(), BigDecimal, tmp1, b, subtract, a, mContext, VariableDeclarationStatement(), BigDecimal, tmp2, c, ulp, multiply, BigDecimal.TEN, mContext, ExpressionStatement(), done, tmp1, compareTo, tmp2, 0, ExpressionStatement(), pmc, BigDecimal.ONE, ExpressionStatement(), pc, c, ForStatement(for), int, j, 1, j, numberOfPoints, j, VariableDeclarationStatement(), final, BigDecimal, b_two_j_p_1, new, BigDecimal, 2, j, 1, mContext, VariableDeclarationStatement(), final, BigDecimal, b_j, new, BigDecimal, j, mContext, VariableDeclarationStatement(), final, BigDecimal, b_j_p_1, new, BigDecimal, j, 1, mContext, ExpressionStatement(), tmp1, c, multiply, b_two_j_p_1, mContext, ExpressionStatement(), tmp1, pc, multiply, tmp1, mContext, ExpressionStatement(), tmp2, pmc, multiply, b_j, mContext, VariableDeclarationStatement(), BigDecimal, ppc, tmp1, subtract, tmp2, mContext, ExpressionStatement(), ppc, ppc, divide, b_j_p_1, mContext, ExpressionStatement(), pmc, pc, ExpressionStatement(), pc, ppc, IfStatement(if), done, IfStatement(if), pa, signum, pc, signum, 0, ExpressionStatement(), b, c, ExpressionStatement(), pmb, pmc, ExpressionStatement(), pb, pc, ExpressionStatement(), a, c, ExpressionStatement(), pma, pmc, ExpressionStatement(), pa, pc, ExpressionStatement(), c, a, add, b, mContext, multiply, oneHalf, mContext, VariableDeclarationStatement(), final, BigDecimal, nP, new, BigDecimal, numberOfPoints, mContext, VariableDeclarationStatement(), BigDecimal, tmp1, pmc, subtract, c, multiply, pc, mContext, mContext, ExpressionStatement(), tmp1, tmp1, multiply, nP, ExpressionStatement(), tmp1, tmp1, pow, 2, mContext, VariableDeclarationStatement(), BigDecimal, tmp2, c, pow, 2, mContext, ExpressionStatement(), tmp2, BigDecimal.ONE, subtract, tmp2, mContext, ExpressionStatement(), tmp2, tmp2, multiply, two, mContext, ExpressionStatement(), tmp2, tmp2, divide, tmp1, mContext, ExpressionStatement(), points, i, c, ExpressionStatement(), weights, i, tmp2, VariableDeclarationStatement(), final, int, idx, numberOfPoints, i, 1, ExpressionStatement(), points, idx, c, negate, mContext, ExpressionStatement(), weights, idx, tmp2, IfStatement(if), numberOfPoints, 2, 0, VariableDeclarationStatement(), BigDecimal, pmc, BigDecimal.ONE, ForStatement(for), int, j, 1, j, numberOfPoints, j, 2, VariableDeclarationStatement(), final, BigDecimal, b_j, new, BigDecimal, j, mContext, VariableDeclarationStatement(), final, BigDecimal, b_j_p_1, new, BigDecimal, j, 1, mContext, ExpressionStatement(), pmc, pmc, multiply, b_j, mContext, ExpressionStatement(), pmc, pmc, divide, b_j_p_1, mContext, ExpressionStatement(), pmc, pmc, negate, mContext, VariableDeclarationStatement(), final, BigDecimal, nP, new, BigDecimal, numberOfPoints, mContext, VariableDeclarationStatement(), BigDecimal, tmp1, pmc, multiply, nP, mContext, ExpressionStatement(), tmp1, tmp1, pow, 2, mContext, VariableDeclarationStatement(), BigDecimal, tmp2, two, divide, tmp1, mContext, ExpressionStatement(), points, iMax, BigDecimal.ZERO, ExpressionStatement(), weights, iMax, tmp2, ReturnStatement(return), new, Pair, BigDecimal, BigDecimal, points, weights]
org.apache.commons.math4.analysis.integration.gauss:LegendreRuleFactory:computeRule:int#[IfStatement(if), numberOfPoints, 1, ReturnStatement(return), new, Pair, Double, Double, Double, 0d, Double, 2d, VariableDeclarationStatement(), final, Double, previousPoints, getRuleInternal, numberOfPoints, 1, getFirst, VariableDeclarationStatement(), final, Double, points, Double, numberOfPoints, VariableDeclarationStatement(), final, Double, weights, Double, numberOfPoints, VariableDeclarationStatement(), final, int, iMax, numberOfPoints, 2, ForStatement(for), int, i, 0, i, iMax, i, VariableDeclarationStatement(), double, a, i, 0, 1, previousPoints, i, 1, doubleValue, VariableDeclarationStatement(), double, b, iMax, 1, 1, previousPoints, i, doubleValue, VariableDeclarationStatement(), double, pma, 1, VariableDeclarationStatement(), double, pa, a, VariableDeclarationStatement(), double, pmb, 1, VariableDeclarationStatement(), double, pb, b, ForStatement(for), int, j, 1, j, numberOfPoints, j, VariableDeclarationStatement(), final, int, two_j_p_1, 2, j, 1, VariableDeclarationStatement(), final, int, j_p_1, j, 1, VariableDeclarationStatement(), final, double, ppa, two_j_p_1, a, pa, j, pma, j_p_1, VariableDeclarationStatement(), final, double, ppb, two_j_p_1, b, pb, j, pmb, j_p_1, ExpressionStatement(), pma, pa, ExpressionStatement(), pa, ppa, ExpressionStatement(), pmb, pb, ExpressionStatement(), pb, ppb, VariableDeclarationStatement(), double, c, 0.5, a, b, VariableDeclarationStatement(), double, pmc, 1, VariableDeclarationStatement(), double, pc, c, VariableDeclarationStatement(), boolean, done, false, WhileStatement(while), done, ExpressionStatement(), done, b, a, Math, ulp, c, ExpressionStatement(), pmc, 1, ExpressionStatement(), pc, c, ForStatement(for), int, j, 1, j, numberOfPoints, j, VariableDeclarationStatement(), final, double, ppc, 2, j, 1, c, pc, j, pmc, j, 1, ExpressionStatement(), pmc, pc, ExpressionStatement(), pc, ppc, IfStatement(if), done, IfStatement(if), pa, pc, 0, ExpressionStatement(), b, c, ExpressionStatement(), pmb, pmc, ExpressionStatement(), pb, pc, ExpressionStatement(), a, c, ExpressionStatement(), pma, pmc, ExpressionStatement(), pa, pc, ExpressionStatement(), c, 0.5, a, b, VariableDeclarationStatement(), final, double, d, numberOfPoints, pmc, c, pc, VariableDeclarationStatement(), final, double, w, 2, 1, c, c, d, d, ExpressionStatement(), points, i, c, ExpressionStatement(), weights, i, w, VariableDeclarationStatement(), final, int, idx, numberOfPoints, i, 1, ExpressionStatement(), points, idx, c, ExpressionStatement(), weights, idx, w, IfStatement(if), numberOfPoints, 2, 0, VariableDeclarationStatement(), double, pmc, 1, ForStatement(for), int, j, 1, j, numberOfPoints, j, 2, ExpressionStatement(), pmc, j, pmc, j, 1, VariableDeclarationStatement(), final, double, d, numberOfPoints, pmc, VariableDeclarationStatement(), final, double, w, 2, d, d, ExpressionStatement(), points, iMax, 0d, ExpressionStatement(), weights, iMax, w, ReturnStatement(return), new, Pair, Double, Double, points, weights]
org.apache.commons.math4.analysis.integration.gauss:SymmetricGaussIntegrator:integrate:UnivariateFunction#[VariableDeclarationStatement(), final, int, ruleLength, getNumberOfPoints, IfStatement(if), ruleLength, 1, ReturnStatement(return), getWeight, 0, f, value, 0d, VariableDeclarationStatement(), final, int, iMax, ruleLength, 2, VariableDeclarationStatement(), double, s, 0, VariableDeclarationStatement(), double, c, 0, ForStatement(for), int, i, 0, i, iMax, i, VariableDeclarationStatement(), final, double, p, getPoint, i, VariableDeclarationStatement(), final, double, w, getWeight, i, VariableDeclarationStatement(), final, double, f1, f, value, p, VariableDeclarationStatement(), final, double, f2, f, value, p, VariableDeclarationStatement(), final, double, y, w, f1, f2, c, VariableDeclarationStatement(), final, double, t, s, y, ExpressionStatement(), c, t, s, y, ExpressionStatement(), s, t, IfStatement(if), ruleLength, 2, 0, VariableDeclarationStatement(), final, double, w, getWeight, iMax, VariableDeclarationStatement(), final, double, y, w, f, value, 0d, c, VariableDeclarationStatement(), final, double, t, s, y, ExpressionStatement(), s, t, ReturnStatement(return), s]
org.apache.commons.math4.analysis.integration:IterativeLegendreGaussIntegrator:doIntegrate:null#[VariableDeclarationStatement(), double, oldt, stage, 1, VariableDeclarationStatement(), int, n, 2, WhileStatement(while), true, VariableDeclarationStatement(), final, double, t, stage, n, VariableDeclarationStatement(), final, double, delta, FastMath, abs, t, oldt, VariableDeclarationStatement(), final, double, limit, FastMath, max, getAbsoluteAccuracy, getRelativeAccuracy, FastMath, abs, oldt, FastMath, abs, t, 0.5, IfStatement(if), iterations, getCount, 1, getMinimalIterationCount, delta, limit, ReturnStatement(return), t, VariableDeclarationStatement(), final, double, ratio, FastMath, min, 4, FastMath, pow, delta, limit, 0.5, numberOfPoints, ExpressionStatement(), n, FastMath, max, int, ratio, n, n, 1, ExpressionStatement(), oldt, t, ExpressionStatement(), iterations, incrementCount]
org.apache.commons.math4.analysis.integration:IterativeLegendreGaussIntegrator:stage:int#[VariableDeclarationStatement(), final, UnivariateFunction, f, new, UnivariateFunction, Override, public, double, value, double, x, MathIllegalArgumentException, TooManyEvaluationsException, ReturnStatement(return), computeObjectiveValue, x, VariableDeclarationStatement(), final, double, min, getMin, VariableDeclarationStatement(), final, double, max, getMax, VariableDeclarationStatement(), final, double, step, max, min, n, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, a, min, i, step, VariableDeclarationStatement(), final, double, b, a, step, VariableDeclarationStatement(), final, GaussIntegrator, g, FACTORY, legendreHighPrecision, numberOfPoints, a, b, ExpressionStatement(), sum, g, integrate, f, ReturnStatement(return), sum]
org.apache.commons.math4.analysis.integration:MidPointIntegrator:stage:int+double+double+double#[VariableDeclarationStatement(), final, long, np, 1L, n, 1, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), final, double, spacing, diffMaxMin, np, VariableDeclarationStatement(), double, x, min, 0.5, spacing, ForStatement(for), long, i, 0, i, np, i, ExpressionStatement(), sum, computeObjectiveValue, x, ExpressionStatement(), x, spacing, ReturnStatement(return), 0.5, previousStageResult, sum, spacing]
org.apache.commons.math4.analysis.integration:MidPointIntegrator:doIntegrate:null#[VariableDeclarationStatement(), final, double, min, getMin, VariableDeclarationStatement(), final, double, diff, getMax, min, VariableDeclarationStatement(), final, double, midPoint, min, 0.5, diff, VariableDeclarationStatement(), double, oldt, diff, computeObjectiveValue, midPoint, WhileStatement(while), true, ExpressionStatement(), iterations, incrementCount, VariableDeclarationStatement(), final, int, i, iterations, getCount, VariableDeclarationStatement(), final, double, t, stage, i, oldt, min, diff, IfStatement(if), i, getMinimalIterationCount, VariableDeclarationStatement(), final, double, delta, FastMath, abs, t, oldt, VariableDeclarationStatement(), final, double, rLimit, getRelativeAccuracy, FastMath, abs, oldt, FastMath, abs, t, 0.5, IfStatement(if), delta, rLimit, delta, getAbsoluteAccuracy, ReturnStatement(return), t, ExpressionStatement(), oldt, t]
org.apache.commons.math4.analysis.integration:RombergIntegrator:doIntegrate:null#[VariableDeclarationStatement(), final, int, m, iterations, getMaximalCount, 1, VariableDeclarationStatement(), double, previousRow, double, m, VariableDeclarationStatement(), double, currentRow, double, m, VariableDeclarationStatement(), TrapezoidIntegrator, qtrap, new, TrapezoidIntegrator, ExpressionStatement(), currentRow, 0, qtrap, stage, this, 0, ExpressionStatement(), iterations, incrementCount, VariableDeclarationStatement(), double, olds, currentRow, 0, WhileStatement(while), true, VariableDeclarationStatement(), final, int, i, iterations, getCount, VariableDeclarationStatement(), final, double, tmpRow, previousRow, ExpressionStatement(), previousRow, currentRow, ExpressionStatement(), currentRow, tmpRow, ExpressionStatement(), currentRow, 0, qtrap, stage, this, i, ExpressionStatement(), iterations, incrementCount, ForStatement(for), int, j, 1, j, i, j, VariableDeclarationStatement(), final, double, r, 1L, 2, j, 1, VariableDeclarationStatement(), final, double, tIJm1, currentRow, j, 1, ExpressionStatement(), currentRow, j, tIJm1, tIJm1, previousRow, j, 1, r, VariableDeclarationStatement(), final, double, s, currentRow, i, IfStatement(if), i, getMinimalIterationCount, VariableDeclarationStatement(), final, double, delta, FastMath, abs, s, olds, VariableDeclarationStatement(), final, double, rLimit, getRelativeAccuracy, FastMath, abs, olds, FastMath, abs, s, 0.5, IfStatement(if), delta, rLimit, delta, getAbsoluteAccuracy, ReturnStatement(return), s, ExpressionStatement(), olds, s]
org.apache.commons.math4.analysis.integration:SimpsonIntegrator:doIntegrate:null#[VariableDeclarationStatement(), TrapezoidIntegrator, qtrap, new, TrapezoidIntegrator, IfStatement(if), getMinimalIterationCount, 1, ReturnStatement(return), 4, qtrap, stage, this, 1, qtrap, stage, this, 0, 3.0, VariableDeclarationStatement(), double, olds, 0, VariableDeclarationStatement(), double, oldt, qtrap, stage, this, 0, WhileStatement(while), true, VariableDeclarationStatement(), final, double, t, qtrap, stage, this, iterations, getCount, ExpressionStatement(), iterations, incrementCount, VariableDeclarationStatement(), final, double, s, 4, t, oldt, 3.0, IfStatement(if), iterations, getCount, getMinimalIterationCount, VariableDeclarationStatement(), final, double, delta, FastMath, abs, s, olds, VariableDeclarationStatement(), final, double, rLimit, getRelativeAccuracy, FastMath, abs, olds, FastMath, abs, s, 0.5, IfStatement(if), delta, rLimit, delta, getAbsoluteAccuracy, ReturnStatement(return), s, ExpressionStatement(), olds, s, ExpressionStatement(), oldt, t]
org.apache.commons.math4.analysis.integration:TrapezoidIntegrator:stage:BaseAbstractUnivariateIntegrator+int#[IfStatement(if), n, 0, VariableDeclarationStatement(), final, double, max, baseIntegrator, getMax, VariableDeclarationStatement(), final, double, min, baseIntegrator, getMin, ExpressionStatement(), s, 0.5, max, min, baseIntegrator, computeObjectiveValue, min, baseIntegrator, computeObjectiveValue, max, ReturnStatement(return), s, VariableDeclarationStatement(), final, long, np, 1L, n, 1, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), final, double, max, baseIntegrator, getMax, VariableDeclarationStatement(), final, double, min, baseIntegrator, getMin, VariableDeclarationStatement(), final, double, spacing, max, min, np, VariableDeclarationStatement(), double, x, min, 0.5, spacing, ForStatement(for), long, i, 0, i, np, i, ExpressionStatement(), sum, baseIntegrator, computeObjectiveValue, x, ExpressionStatement(), x, spacing, ExpressionStatement(), s, 0.5, s, sum, spacing, ReturnStatement(return), s]
org.apache.commons.math4.analysis.integration:TrapezoidIntegrator:doIntegrate:null#[VariableDeclarationStatement(), double, oldt, stage, this, 0, ExpressionStatement(), iterations, incrementCount, WhileStatement(while), true, VariableDeclarationStatement(), final, int, i, iterations, getCount, VariableDeclarationStatement(), final, double, t, stage, this, i, IfStatement(if), i, getMinimalIterationCount, VariableDeclarationStatement(), final, double, delta, FastMath, abs, t, oldt, VariableDeclarationStatement(), final, double, rLimit, getRelativeAccuracy, FastMath, abs, oldt, FastMath, abs, t, 0.5, IfStatement(if), delta, rLimit, delta, getAbsoluteAccuracy, ReturnStatement(return), t, ExpressionStatement(), oldt, t, ExpressionStatement(), iterations, incrementCount]
org.apache.commons.math4.analysis.interpolation:AkimaSplineInterpolator:interpolate:double[]+double[]#[IfStatement(if), xvals, null, yvals, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), xvals.length, yvals.length, ThrowStatement(throw), new, DimensionMismatchException, xvals.length, yvals.length, IfStatement(if), xvals.length, MINIMUM_NUMBER_POINTS, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, xvals.length, MINIMUM_NUMBER_POINTS, true, ExpressionStatement(), MathArrays, checkOrder, xvals, VariableDeclarationStatement(), final, int, numberOfDiffAndWeightElements, xvals.length, 1, VariableDeclarationStatement(), final, double, differences, double, numberOfDiffAndWeightElements, VariableDeclarationStatement(), final, double, weights, double, numberOfDiffAndWeightElements, ForStatement(for), int, i, 0, i, differences.length, i, ExpressionStatement(), differences, i, yvals, i, 1, yvals, i, xvals, i, 1, xvals, i, ForStatement(for), int, i, 1, i, weights.length, i, ExpressionStatement(), weights, i, FastMath, abs, differences, i, differences, i, 1, VariableDeclarationStatement(), final, double, firstDerivatives, double, xvals.length, ForStatement(for), int, i, 2, i, firstDerivatives.length, 2, i, VariableDeclarationStatement(), final, double, wP, weights, i, 1, VariableDeclarationStatement(), final, double, wM, weights, i, 1, IfStatement(if), Precision, equals, wP, 0.0, Precision, equals, wM, 0.0, VariableDeclarationStatement(), final, double, xv, xvals, i, VariableDeclarationStatement(), final, double, xvP, xvals, i, 1, VariableDeclarationStatement(), final, double, xvM, xvals, i, 1, ExpressionStatement(), firstDerivatives, i, xvP, xv, differences, i, 1, xv, xvM, differences, i, xvP, xvM, ExpressionStatement(), firstDerivatives, i, wP, differences, i, 1, wM, differences, i, wP, wM, ExpressionStatement(), firstDerivatives, 0, differentiateThreePoint, xvals, yvals, 0, 0, 1, 2, ExpressionStatement(), firstDerivatives, 1, differentiateThreePoint, xvals, yvals, 1, 0, 1, 2, ExpressionStatement(), firstDerivatives, xvals.length, 2, differentiateThreePoint, xvals, yvals, xvals.length, 2, xvals.length, 3, xvals.length, 2, xvals.length, 1, ExpressionStatement(), firstDerivatives, xvals.length, 1, differentiateThreePoint, xvals, yvals, xvals.length, 1, xvals.length, 3, xvals.length, 2, xvals.length, 1, ReturnStatement(return), interpolateHermiteSorted, xvals, yvals, firstDerivatives]
org.apache.commons.math4.analysis.interpolation:AkimaSplineInterpolator:differentiateThreePoint:double[]+double[]+int+int+int+int#[VariableDeclarationStatement(), final, double, x0, yvals, indexOfFirstSample, VariableDeclarationStatement(), final, double, x1, yvals, indexOfSecondsample, VariableDeclarationStatement(), final, double, x2, yvals, indexOfThirdSample, VariableDeclarationStatement(), final, double, t, xvals, indexOfDifferentiation, xvals, indexOfFirstSample, VariableDeclarationStatement(), final, double, t1, xvals, indexOfSecondsample, xvals, indexOfFirstSample, VariableDeclarationStatement(), final, double, t2, xvals, indexOfThirdSample, xvals, indexOfFirstSample, VariableDeclarationStatement(), final, double, a, x2, x0, t2, t1, x1, x0, t2, t2, t1, t2, VariableDeclarationStatement(), final, double, b, x1, x0, a, t1, t1, t1, ReturnStatement(return), 2, a, t, b]
org.apache.commons.math4.analysis.interpolation:AkimaSplineInterpolator:interpolateHermiteSorted:double[]+double[]+double[]#[IfStatement(if), xvals.length, yvals.length, ThrowStatement(throw), new, DimensionMismatchException, xvals.length, yvals.length, IfStatement(if), xvals.length, firstDerivatives.length, ThrowStatement(throw), new, DimensionMismatchException, xvals.length, firstDerivatives.length, VariableDeclarationStatement(), final, int, minimumLength, 2, IfStatement(if), xvals.length, minimumLength, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, xvals.length, minimumLength, true, VariableDeclarationStatement(), final, int, size, xvals.length, 1, VariableDeclarationStatement(), final, PolynomialFunction, polynomials, PolynomialFunction, size, VariableDeclarationStatement(), final, double, coefficients, double, 4, ForStatement(for), int, i, 0, i, polynomials.length, i, VariableDeclarationStatement(), final, double, w, xvals, i, 1, xvals, i, VariableDeclarationStatement(), final, double, w2, w, w, VariableDeclarationStatement(), final, double, yv, yvals, i, VariableDeclarationStatement(), final, double, yvP, yvals, i, 1, VariableDeclarationStatement(), final, double, fd, firstDerivatives, i, VariableDeclarationStatement(), final, double, fdP, firstDerivatives, i, 1, ExpressionStatement(), coefficients, 0, yv, ExpressionStatement(), coefficients, 1, firstDerivatives, i, ExpressionStatement(), coefficients, 2, 3, yvP, yv, w, 2, fd, fdP, w, ExpressionStatement(), coefficients, 3, 2, yv, yvP, w, fd, fdP, w2, ExpressionStatement(), polynomials, i, new, PolynomialFunction, coefficients, ReturnStatement(return), new, PolynomialSplineFunction, xvals, polynomials]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:value:double+double#[VariableDeclarationStatement(), final, int, i, searchIndex, x, xval, VariableDeclarationStatement(), final, int, j, searchIndex, y, yval, VariableDeclarationStatement(), final, double, xN, x, xval, i, xval, i, 1, xval, i, VariableDeclarationStatement(), final, double, yN, y, yval, j, yval, j, 1, yval, j, ReturnStatement(return), splines, i, j, value, xN, yN]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:isValidPoint:double+double#[IfStatement(if), x, xval, 0, x, xval, xval.length, 1, y, yval, 0, y, yval, yval.length, 1, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:searchIndex:double+double[]#[VariableDeclarationStatement(), final, int, r, Arrays, binarySearch, val, c, IfStatement(if), r, 1, r, val.length, 1, ThrowStatement(throw), new, OutOfRangeException, c, val, 0, val, val.length, 1, IfStatement(if), r, 0, ReturnStatement(return), r, 2, VariableDeclarationStatement(), final, int, last, val.length, 1, IfStatement(if), r, last, ReturnStatement(return), last, 1, ReturnStatement(return), r]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolatingFunction:computeSplineCoefficients:double[]#[VariableDeclarationStatement(), final, double, a, double, NUM_COEFF, ForStatement(for), int, i, 0, i, NUM_COEFF, i, VariableDeclarationStatement(), double, result, 0, VariableDeclarationStatement(), final, double, row, AINV, i, ForStatement(for), int, j, 0, j, NUM_COEFF, j, ExpressionStatement(), result, row, j, beta, j, ExpressionStatement(), a, i, result, ReturnStatement(return), a]
org.apache.commons.math4.analysis.interpolation:BicubicFunction:value:double+double#[IfStatement(if), x, 0, x, 1, ThrowStatement(throw), new, OutOfRangeException, x, 0, 1, IfStatement(if), y, 0, y, 1, ThrowStatement(throw), new, OutOfRangeException, y, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, x3, x2, x, VariableDeclarationStatement(), final, double, pX, 1, x, x2, x3, VariableDeclarationStatement(), final, double, y2, y, y, VariableDeclarationStatement(), final, double, y3, y2, y, VariableDeclarationStatement(), final, double, pY, 1, y, y2, y3, ReturnStatement(return), apply, pX, pY, a]
org.apache.commons.math4.analysis.interpolation:BicubicFunction:apply:double[]+double[]+double[][]#[VariableDeclarationStatement(), double, result, 0, ForStatement(for), int, i, 0, i, N, i, VariableDeclarationStatement(), final, double, r, MathArrays, linearCombination, coeff, i, pY, ExpressionStatement(), result, r, pX, i, ReturnStatement(return), result]
org.apache.commons.math4.analysis.interpolation:BicubicInterpolator:interpolate:double[]+double[]+double[][]#[IfStatement(if), xval.length, 0, yval.length, 0, fval.length, 0, ThrowStatement(throw), new, NoDataException, IfStatement(if), xval.length, fval.length, ThrowStatement(throw), new, DimensionMismatchException, xval.length, fval.length, ExpressionStatement(), MathArrays, checkOrder, xval, ExpressionStatement(), MathArrays, checkOrder, yval, VariableDeclarationStatement(), final, int, xLen, xval.length, VariableDeclarationStatement(), final, int, yLen, yval.length, VariableDeclarationStatement(), final, double, dFdX, double, xLen, yLen, VariableDeclarationStatement(), final, double, dFdY, double, xLen, yLen, VariableDeclarationStatement(), final, double, d2FdXdY, double, xLen, yLen, ForStatement(for), int, i, 1, i, xLen, 1, i, VariableDeclarationStatement(), final, int, nI, i, 1, VariableDeclarationStatement(), final, int, pI, i, 1, VariableDeclarationStatement(), final, double, nX, xval, nI, VariableDeclarationStatement(), final, double, pX, xval, pI, VariableDeclarationStatement(), final, double, deltaX, nX, pX, ForStatement(for), int, j, 1, j, yLen, 1, j, VariableDeclarationStatement(), final, int, nJ, j, 1, VariableDeclarationStatement(), final, int, pJ, j, 1, VariableDeclarationStatement(), final, double, nY, yval, nJ, VariableDeclarationStatement(), final, double, pY, yval, pJ, VariableDeclarationStatement(), final, double, deltaY, nY, pY, ExpressionStatement(), dFdX, i, j, fval, nI, j, fval, pI, j, deltaX, ExpressionStatement(), dFdY, i, j, fval, i, nJ, fval, i, pJ, deltaY, VariableDeclarationStatement(), final, double, deltaXY, deltaX, deltaY, ExpressionStatement(), d2FdXdY, i, j, fval, nI, nJ, fval, nI, pJ, fval, pI, nJ, fval, pI, pJ, deltaXY, ReturnStatement(return), new, BicubicInterpolatingFunction, xval, yval, fval, dFdX, dFdY, d2FdXdY, Override, public, boolean, isValidPoint, double, x, double, y, IfStatement(if), x, xval, 1, x, xval, xval.length, 2, y, yval, 1, y, yval, yval.length, 2, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.analysis.interpolation:DividedDifferenceInterpolator:interpolate:double+double#[ExpressionStatement(), PolynomialFunctionLagrangeForm, verifyInterpolationArray, x, y, true, VariableDeclarationStatement(), final, double, c, double, x.length, 1, ExpressionStatement(), System, arraycopy, x, 0, c, 0, c.length, VariableDeclarationStatement(), final, double, a, computeDividedDifference, x, y, ReturnStatement(return), new, PolynomialFunctionNewtonForm, a, c]
org.apache.commons.math4.analysis.interpolation:DividedDifferenceInterpolator:computeDividedDifference:double+double#[ExpressionStatement(), PolynomialFunctionLagrangeForm, verifyInterpolationArray, x, y, true, VariableDeclarationStatement(), final, double, divdiff, y, clone, VariableDeclarationStatement(), final, int, n, x.length, VariableDeclarationStatement(), final, double, a, double, n, ExpressionStatement(), a, 0, divdiff, 0, ForStatement(for), int, i, 1, i, n, i, ForStatement(for), int, j, 0, j, n, i, j, VariableDeclarationStatement(), final, double, denominator, x, j, i, x, j, ExpressionStatement(), divdiff, j, divdiff, j, 1, divdiff, j, denominator, ExpressionStatement(), a, i, divdiff, 0, ReturnStatement(return), a]
org.apache.commons.math4.analysis.interpolation:FieldHermiteInterpolator:addSamplePoint:T+T[]...#[ExpressionStatement(), MathUtils, checkNotNull, x, VariableDeclarationStatement(), T, factorial, x, getField, getOne, ForStatement(for), int, i, 0, i, value.length, i, VariableDeclarationStatement(), final, T, y, value, i, clone, IfStatement(if), i, 1, ExpressionStatement(), factorial, factorial, multiply, i, VariableDeclarationStatement(), final, T, inv, factorial, reciprocal, ForStatement(for), int, j, 0, j, y.length, j, ExpressionStatement(), y, j, y, j, multiply, inv, VariableDeclarationStatement(), final, int, n, abscissae, size, ExpressionStatement(), bottomDiagonal, add, n, i, y, VariableDeclarationStatement(), T, bottom0, y, ForStatement(for), int, j, i, j, n, j, VariableDeclarationStatement(), final, T, bottom1, bottomDiagonal, get, n, j, 1, IfStatement(if), x, equals, abscissae, get, n, j, 1, ThrowStatement(throw), new, ZeroException, LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x, VariableDeclarationStatement(), final, T, inv, x, subtract, abscissae, get, n, j, 1, reciprocal, ForStatement(for), int, k, 0, k, y.length, k, ExpressionStatement(), bottom1, k, inv, multiply, bottom0, k, subtract, bottom1, k, ExpressionStatement(), bottom0, bottom1, ExpressionStatement(), topDiagonal, add, bottom0, clone, ExpressionStatement(), abscissae, add, x]
org.apache.commons.math4.analysis.interpolation:FieldHermiteInterpolator:value:T#[ExpressionStatement(), MathUtils, checkNotNull, x, IfStatement(if), abscissae, isEmpty, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE, VariableDeclarationStatement(), final, T, value, MathArrays, buildArray, x, getField, topDiagonal, get, 0, length, VariableDeclarationStatement(), T, valueCoeff, x, getField, getOne, ForStatement(for), int, i, 0, i, topDiagonal, size, i, VariableDeclarationStatement(), T, dividedDifference, topDiagonal, get, i, ForStatement(for), int, k, 0, k, value.length, k, ExpressionStatement(), value, k, value, k, add, dividedDifference, k, multiply, valueCoeff, VariableDeclarationStatement(), final, T, deltaX, x, subtract, abscissae, get, i, ExpressionStatement(), valueCoeff, valueCoeff, multiply, deltaX, ReturnStatement(return), value]
org.apache.commons.math4.analysis.interpolation:FieldHermiteInterpolator:derivatives:T+int#[ExpressionStatement(), MathUtils, checkNotNull, x, IfStatement(if), abscissae, isEmpty, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE, VariableDeclarationStatement(), final, T, zero, x, getField, getZero, VariableDeclarationStatement(), final, T, one, x, getField, getOne, VariableDeclarationStatement(), final, T, tj, MathArrays, buildArray, x, getField, order, 1, ExpressionStatement(), tj, 0, zero, ForStatement(for), int, i, 0, i, order, i, ExpressionStatement(), tj, i, 1, tj, i, add, one, VariableDeclarationStatement(), final, T, derivatives, MathArrays, buildArray, x, getField, order, 1, topDiagonal, get, 0, length, VariableDeclarationStatement(), final, T, valueCoeff, MathArrays, buildArray, x, getField, order, 1, ExpressionStatement(), valueCoeff, 0, x, getField, getOne, ForStatement(for), int, i, 0, i, topDiagonal, size, i, VariableDeclarationStatement(), T, dividedDifference, topDiagonal, get, i, VariableDeclarationStatement(), final, T, deltaX, x, subtract, abscissae, get, i, ForStatement(for), int, j, order, j, 0, j, ForStatement(for), int, k, 0, k, derivatives, j, length, k, ExpressionStatement(), derivatives, j, k, derivatives, j, k, add, dividedDifference, k, multiply, valueCoeff, j, ExpressionStatement(), valueCoeff, j, valueCoeff, j, multiply, deltaX, IfStatement(if), j, 0, ExpressionStatement(), valueCoeff, j, valueCoeff, j, add, tj, j, multiply, valueCoeff, j, 1, ReturnStatement(return), derivatives]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:addSamplePoint:double+double[]...#[ForStatement(for), int, i, 0, i, value.length, i, VariableDeclarationStatement(), final, double, y, value, i, clone, IfStatement(if), i, 1, VariableDeclarationStatement(), double, inv, 1.0, CombinatoricsUtils, factorial, i, ForStatement(for), int, j, 0, j, y.length, j, ExpressionStatement(), y, j, inv, VariableDeclarationStatement(), final, int, n, abscissae, size, ExpressionStatement(), bottomDiagonal, add, n, i, y, VariableDeclarationStatement(), double, bottom0, y, ForStatement(for), int, j, i, j, n, j, VariableDeclarationStatement(), final, double, bottom1, bottomDiagonal, get, n, j, 1, VariableDeclarationStatement(), final, double, inv, 1.0, x, abscissae, get, n, j, 1, IfStatement(if), Double, isInfinite, inv, ThrowStatement(throw), new, ZeroException, LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x, ForStatement(for), int, k, 0, k, y.length, k, ExpressionStatement(), bottom1, k, inv, bottom0, k, bottom1, k, ExpressionStatement(), bottom0, bottom1, ExpressionStatement(), topDiagonal, add, bottom0, clone, ExpressionStatement(), abscissae, add, x]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:getPolynomials:null#[ExpressionStatement(), checkInterpolation, VariableDeclarationStatement(), final, PolynomialFunction, zero, polynomial, 0, VariableDeclarationStatement(), PolynomialFunction, polynomials, PolynomialFunction, topDiagonal, get, 0, length, ForStatement(for), int, i, 0, i, polynomials.length, i, ExpressionStatement(), polynomials, i, zero, VariableDeclarationStatement(), PolynomialFunction, coeff, polynomial, 1, ForStatement(for), int, i, 0, i, topDiagonal, size, i, VariableDeclarationStatement(), double, tdi, topDiagonal, get, i, ForStatement(for), int, k, 0, k, polynomials.length, k, ExpressionStatement(), polynomials, k, polynomials, k, add, coeff, multiply, polynomial, tdi, k, ExpressionStatement(), coeff, coeff, multiply, polynomial, abscissae, get, i, 1.0, ReturnStatement(return), polynomials]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:value:double#[ExpressionStatement(), checkInterpolation, VariableDeclarationStatement(), final, double, value, double, topDiagonal, get, 0, length, VariableDeclarationStatement(), double, valueCoeff, 1, ForStatement(for), int, i, 0, i, topDiagonal, size, i, VariableDeclarationStatement(), double, dividedDifference, topDiagonal, get, i, ForStatement(for), int, k, 0, k, value.length, k, ExpressionStatement(), value, k, dividedDifference, k, valueCoeff, VariableDeclarationStatement(), final, double, deltaX, x, abscissae, get, i, ExpressionStatement(), valueCoeff, deltaX, ReturnStatement(return), value]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:value:DerivativeStructure#[ExpressionStatement(), checkInterpolation, VariableDeclarationStatement(), final, DerivativeStructure, value, DerivativeStructure, topDiagonal, get, 0, length, ExpressionStatement(), Arrays, fill, value, x, getField, getZero, VariableDeclarationStatement(), DerivativeStructure, valueCoeff, x, getField, getOne, ForStatement(for), int, i, 0, i, topDiagonal, size, i, VariableDeclarationStatement(), double, dividedDifference, topDiagonal, get, i, ForStatement(for), int, k, 0, k, value.length, k, ExpressionStatement(), value, k, value, k, add, valueCoeff, multiply, dividedDifference, k, VariableDeclarationStatement(), final, DerivativeStructure, deltaX, x, subtract, abscissae, get, i, ExpressionStatement(), valueCoeff, valueCoeff, multiply, deltaX, ReturnStatement(return), value]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:checkInterpolation:null#[IfStatement(if), abscissae, isEmpty, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE]
org.apache.commons.math4.analysis.interpolation:HermiteInterpolator:polynomial:double...#[ReturnStatement(return), new, PolynomialFunction, c]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:copy:null#[ReturnStatement(return), new, InterpolatingMicrosphere, this]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:getDimension:null#[ReturnStatement(return), dimension]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:getSize:null#[ReturnStatement(return), size]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:value:double[]+double[][]+double[]+double+double#[IfStatement(if), exponent, 0, ThrowStatement(throw), new, NotPositiveException, exponent, ExpressionStatement(), clear, VariableDeclarationStatement(), final, int, numSamples, samplePoints.length, ForStatement(for), int, i, 0, i, numSamples, i, VariableDeclarationStatement(), final, double, diff, MathArrays, ebeSubtract, samplePoints, i, point, VariableDeclarationStatement(), final, double, diffNorm, MathArrays, safeNorm, diff, IfStatement(if), FastMath, abs, diffNorm, noInterpolationTolerance, ReturnStatement(return), sampleValues, i, VariableDeclarationStatement(), final, double, weight, FastMath, pow, diffNorm, exponent, ExpressionStatement(), illuminate, diff, sampleValues, i, weight, ReturnStatement(return), interpolate]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:add:double[]+boolean#[IfStatement(if), microsphere, size, size, ThrowStatement(throw), new, MaxCountExceededException, size, IfStatement(if), normal.length, dimension, ThrowStatement(throw), new, DimensionMismatchException, normal.length, dimension, ExpressionStatement(), microsphere, add, new, Facet, copy, normal, clone, normal, ExpressionStatement(), microsphereData, add, new, FacetData, 0d, 0d]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:interpolate:null#[VariableDeclarationStatement(), int, darkCount, 0, VariableDeclarationStatement(), double, value, 0, VariableDeclarationStatement(), double, totalWeight, 0, EnhancedForStatement(for), FacetData, fd, microsphereData, VariableDeclarationStatement(), final, double, iV, fd, illumination, IfStatement(if), iV, 0d, ExpressionStatement(), value, iV, fd, sample, ExpressionStatement(), totalWeight, iV, ExpressionStatement(), darkCount, VariableDeclarationStatement(), final, double, darkFraction, darkCount, double, size, ReturnStatement(return), darkFraction, maxDarkFraction, value, totalWeight, background]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:illuminate:double[]+double+double#[ForStatement(for), int, i, 0, i, size, i, VariableDeclarationStatement(), final, double, n, microsphere, get, i, getNormal, VariableDeclarationStatement(), final, double, cos, MathArrays, cosAngle, n, sampleDirection, IfStatement(if), cos, 0, VariableDeclarationStatement(), final, double, illumination, cos, weight, IfStatement(if), illumination, darkThreshold, illumination, microsphereData, get, i, illumination, ExpressionStatement(), microsphereData, set, i, new, FacetData, illumination, sampleValue]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere:clear:null#[ForStatement(for), int, i, 0, i, size, i, ExpressionStatement(), microsphereData, set, i, new, FacetData, 0d, 0d]
org.apache.commons.math4.analysis.interpolation:InterpolatingMicrosphere2D:copy:null#[ReturnStatement(return), new, InterpolatingMicrosphere2D, this]
org.apache.commons.math4.analysis.interpolation:LinearInterpolator:interpolate:double+double#[IfStatement(if), x.length, y.length, ThrowStatement(throw), new, DimensionMismatchException, x.length, y.length, IfStatement(if), x.length, 2, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, x.length, 2, true, VariableDeclarationStatement(), int, n, x.length, 1, ExpressionStatement(), MathArrays, checkOrder, x, VariableDeclarationStatement(), final, double, m, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), m, i, y, i, 1, y, i, x, i, 1, x, i, VariableDeclarationStatement(), final, PolynomialFunction, polynomials, PolynomialFunction, n, VariableDeclarationStatement(), final, double, coefficients, double, 2, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), coefficients, 0, y, i, ExpressionStatement(), coefficients, 1, m, i, ExpressionStatement(), polynomials, i, new, PolynomialFunction, coefficients, ReturnStatement(return), new, PolynomialSplineFunction, x, polynomials]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:interpolate:double[]+double[]#[ReturnStatement(return), new, SplineInterpolator, interpolate, xval, smooth, xval, yval]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:smooth:double[]+double[]+double[]#[IfStatement(if), xval.length, yval.length, ThrowStatement(throw), new, DimensionMismatchException, xval.length, yval.length, VariableDeclarationStatement(), final, int, n, xval.length, IfStatement(if), n, 0, ThrowStatement(throw), new, NoDataException, ExpressionStatement(), checkAllFiniteReal, xval, ExpressionStatement(), checkAllFiniteReal, yval, ExpressionStatement(), checkAllFiniteReal, weights, ExpressionStatement(), MathArrays, checkOrder, xval, IfStatement(if), n, 1, ReturnStatement(return), double, yval, 0, IfStatement(if), n, 2, ReturnStatement(return), double, yval, 0, yval, 1, VariableDeclarationStatement(), int, bandwidthInPoints, int, bandwidth, n, IfStatement(if), bandwidthInPoints, 2, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.BANDWIDTH, bandwidthInPoints, 2, true, VariableDeclarationStatement(), final, double, res, double, n, VariableDeclarationStatement(), final, double, residuals, double, n, VariableDeclarationStatement(), final, double, sortedResiduals, double, n, VariableDeclarationStatement(), final, double, robustnessWeights, double, n, ExpressionStatement(), Arrays, fill, robustnessWeights, 1, ForStatement(for), int, iter, 0, iter, robustnessIters, iter, VariableDeclarationStatement(), final, int, bandwidthInterval, 0, bandwidthInPoints, 1, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, x, xval, i, IfStatement(if), i, 0, ExpressionStatement(), updateBandwidthInterval, xval, weights, i, bandwidthInterval, VariableDeclarationStatement(), final, int, ileft, bandwidthInterval, 0, VariableDeclarationStatement(), final, int, iright, bandwidthInterval, 1, VariableDeclarationStatement(), final, int, edge, IfStatement(if), xval, i, xval, ileft, xval, iright, xval, i, ExpressionStatement(), edge, ileft, ExpressionStatement(), edge, iright, VariableDeclarationStatement(), double, sumWeights, 0, VariableDeclarationStatement(), double, sumX, 0, VariableDeclarationStatement(), double, sumXSquared, 0, VariableDeclarationStatement(), double, sumY, 0, VariableDeclarationStatement(), double, sumXY, 0, VariableDeclarationStatement(), double, denom, FastMath, abs, 1.0, xval, edge, x, ForStatement(for), int, k, ileft, k, iright, k, VariableDeclarationStatement(), final, double, xk, xval, k, VariableDeclarationStatement(), final, double, yk, yval, k, VariableDeclarationStatement(), final, double, dist, k, i, x, xk, xk, x, VariableDeclarationStatement(), final, double, w, tricube, dist, denom, robustnessWeights, k, weights, k, VariableDeclarationStatement(), final, double, xkw, xk, w, ExpressionStatement(), sumWeights, w, ExpressionStatement(), sumX, xkw, ExpressionStatement(), sumXSquared, xk, xkw, ExpressionStatement(), sumY, yk, w, ExpressionStatement(), sumXY, yk, xkw, VariableDeclarationStatement(), final, double, meanX, sumX, sumWeights, VariableDeclarationStatement(), final, double, meanY, sumY, sumWeights, VariableDeclarationStatement(), final, double, meanXY, sumXY, sumWeights, VariableDeclarationStatement(), final, double, meanXSquared, sumXSquared, sumWeights, VariableDeclarationStatement(), final, double, beta, IfStatement(if), FastMath, sqrt, FastMath, abs, meanXSquared, meanX, meanX, accuracy, ExpressionStatement(), beta, 0, ExpressionStatement(), beta, meanXY, meanX, meanY, meanXSquared, meanX, meanX, VariableDeclarationStatement(), final, double, alpha, meanY, beta, meanX, ExpressionStatement(), res, i, beta, x, alpha, ExpressionStatement(), residuals, i, FastMath, abs, yval, i, res, i, IfStatement(if), iter, robustnessIters, BreakStatement(break), ExpressionStatement(), System, arraycopy, residuals, 0, sortedResiduals, 0, n, ExpressionStatement(), Arrays, sort, sortedResiduals, VariableDeclarationStatement(), final, double, medianResidual, sortedResiduals, n, 2, IfStatement(if), FastMath, abs, medianResidual, accuracy, BreakStatement(break), ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, arg, residuals, i, 6, medianResidual, IfStatement(if), arg, 1, ExpressionStatement(), robustnessWeights, i, 0, VariableDeclarationStatement(), final, double, w, 1, arg, arg, ExpressionStatement(), robustnessWeights, i, w, w, ReturnStatement(return), res]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:smooth:double[]+double[]#[IfStatement(if), xval.length, yval.length, ThrowStatement(throw), new, DimensionMismatchException, xval.length, yval.length, VariableDeclarationStatement(), final, double, unitWeights, double, xval.length, ExpressionStatement(), Arrays, fill, unitWeights, 1.0, ReturnStatement(return), smooth, xval, yval, unitWeights]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:updateBandwidthInterval:double[]+double[]+int+int[]#[VariableDeclarationStatement(), final, int, left, bandwidthInterval, 0, VariableDeclarationStatement(), final, int, right, bandwidthInterval, 1, VariableDeclarationStatement(), int, nextRight, nextNonzero, weights, right, IfStatement(if), nextRight, xval.length, xval, nextRight, xval, i, xval, i, xval, left, VariableDeclarationStatement(), int, nextLeft, nextNonzero, weights, bandwidthInterval, 0, ExpressionStatement(), bandwidthInterval, 0, nextLeft, ExpressionStatement(), bandwidthInterval, 1, nextRight]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:nextNonzero:double[]+int#[VariableDeclarationStatement(), int, j, i, 1, WhileStatement(while), j, weights.length, weights, j, 0, ExpressionStatement(), j, ReturnStatement(return), j]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:tricube:double#[VariableDeclarationStatement(), final, double, absX, FastMath, abs, x, IfStatement(if), absX, 1.0, ReturnStatement(return), 0.0, VariableDeclarationStatement(), final, double, tmp, 1, absX, absX, absX, ReturnStatement(return), tmp, tmp, tmp]
org.apache.commons.math4.analysis.interpolation:LoessInterpolator:checkAllFiniteReal:double[]#[ForStatement(for), int, i, 0, i, values.length, i, ExpressionStatement(), MathUtils, checkFinite, values, i]
org.apache.commons.math4.analysis.interpolation:MicrosphereProjectionInterpolator:interpolate:double[][]+double[]#[IfStatement(if), xval, null, yval, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), xval.length, 0, ThrowStatement(throw), new, NoDataException, IfStatement(if), xval.length, yval.length, ThrowStatement(throw), new, DimensionMismatchException, xval.length, yval.length, IfStatement(if), xval, 0, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, int, dimension, microsphere, getDimension, IfStatement(if), dimension, xval, 0, length, ThrowStatement(throw), new, DimensionMismatchException, xval, 0, length, dimension, VariableDeclarationStatement(), final, InterpolatingMicrosphere, m, sharedSphere, microsphere, microsphere, copy, ReturnStatement(return), new, MultivariateFunction, Override, public, double, value, double, point, ReturnStatement(return), m, value, point, xval, yval, exponent, noInterpolationTolerance]
org.apache.commons.math4.analysis.interpolation:NevilleInterpolator:interpolate:double+double#[ReturnStatement(return), new, PolynomialFunctionLagrangeForm, x, y]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolatingFunction:value:double+double#[VariableDeclarationStatement(), final, AkimaSplineInterpolator, interpolator, new, AkimaSplineInterpolator, VariableDeclarationStatement(), final, int, offset, 2, VariableDeclarationStatement(), final, int, count, offset, 3, VariableDeclarationStatement(), final, int, i, searchIndex, x, xval, offset, count, VariableDeclarationStatement(), final, int, j, searchIndex, y, yval, offset, count, VariableDeclarationStatement(), final, double, xArray, double, count, VariableDeclarationStatement(), final, double, yArray, double, count, VariableDeclarationStatement(), final, double, zArray, double, count, VariableDeclarationStatement(), final, double, interpArray, double, count, ForStatement(for), int, index, 0, index, count, index, ExpressionStatement(), xArray, index, xval, i, index, ExpressionStatement(), yArray, index, yval, j, index, ForStatement(for), int, zIndex, 0, zIndex, count, zIndex, ForStatement(for), int, index, 0, index, count, index, ExpressionStatement(), zArray, index, fval, i, index, j, zIndex, VariableDeclarationStatement(), final, PolynomialSplineFunction, spline, interpolator, interpolate, xArray, zArray, ExpressionStatement(), interpArray, zIndex, spline, value, x, VariableDeclarationStatement(), final, PolynomialSplineFunction, spline, interpolator, interpolate, yArray, interpArray, VariableDeclarationStatement(), double, returnValue, spline, value, y, ReturnStatement(return), returnValue]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolatingFunction:isValidPoint:double+double#[IfStatement(if), x, xval, 0, x, xval, xval.length, 1, y, yval, 0, y, yval, yval.length, 1, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolatingFunction:searchIndex:double+double[]+int+int#[VariableDeclarationStatement(), int, r, Arrays, binarySearch, val, c, IfStatement(if), r, 1, r, val.length, 1, ThrowStatement(throw), new, OutOfRangeException, c, val, 0, val, val.length, 1, IfStatement(if), r, 0, ExpressionStatement(), r, r, offset, 1, ExpressionStatement(), r, offset, IfStatement(if), r, 0, ExpressionStatement(), r, 0, IfStatement(if), r, count, val.length, ExpressionStatement(), r, val.length, count, ReturnStatement(return), r]
org.apache.commons.math4.analysis.interpolation:PiecewiseBicubicSplineInterpolator:interpolate:double[]+double[]+double[][]#[IfStatement(if), xval, null, yval, null, fval, null, fval, 0, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), xval.length, 0, yval.length, 0, fval.length, 0, ThrowStatement(throw), new, NoDataException, ExpressionStatement(), MathArrays, checkOrder, xval, ExpressionStatement(), MathArrays, checkOrder, yval, ReturnStatement(return), new, PiecewiseBicubicSplineInterpolatingFunction, xval, yval, fval]
org.apache.commons.math4.analysis.interpolation:SplineInterpolator:interpolate:double+double#[IfStatement(if), x.length, y.length, ThrowStatement(throw), new, DimensionMismatchException, x.length, y.length, IfStatement(if), x.length, 3, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.NUMBER_OF_POINTS, x.length, 3, true, VariableDeclarationStatement(), final, int, n, x.length, 1, ExpressionStatement(), MathArrays, checkOrder, x, VariableDeclarationStatement(), final, double, h, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), h, i, x, i, 1, x, i, VariableDeclarationStatement(), final, double, mu, double, n, VariableDeclarationStatement(), final, double, z, double, n, 1, ExpressionStatement(), mu, 0, 0d, ExpressionStatement(), z, 0, 0d, VariableDeclarationStatement(), double, g, 0, ForStatement(for), int, i, 1, i, n, i, ExpressionStatement(), g, 2d, x, i, 1, x, i, 1, h, i, 1, mu, i, 1, ExpressionStatement(), mu, i, h, i, g, ExpressionStatement(), z, i, 3d, y, i, 1, h, i, 1, y, i, x, i, 1, x, i, 1, y, i, 1, h, i, h, i, 1, h, i, h, i, 1, z, i, 1, g, VariableDeclarationStatement(), final, double, b, double, n, VariableDeclarationStatement(), final, double, c, double, n, 1, VariableDeclarationStatement(), final, double, d, double, n, ExpressionStatement(), z, n, 0d, ExpressionStatement(), c, n, 0d, ForStatement(for), int, j, n, 1, j, 0, j, ExpressionStatement(), c, j, z, j, mu, j, c, j, 1, ExpressionStatement(), b, j, y, j, 1, y, j, h, j, h, j, c, j, 1, 2d, c, j, 3d, ExpressionStatement(), d, j, c, j, 1, c, j, 3d, h, j, VariableDeclarationStatement(), final, PolynomialFunction, polynomials, PolynomialFunction, n, VariableDeclarationStatement(), final, double, coefficients, double, 4, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), coefficients, 0, y, i, ExpressionStatement(), coefficients, 1, b, i, ExpressionStatement(), coefficients, 2, c, i, ExpressionStatement(), coefficients, 3, d, i, ExpressionStatement(), polynomials, i, new, PolynomialFunction, coefficients, ReturnStatement(return), new, PolynomialSplineFunction, x, polynomials]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:value:double+double+double#[VariableDeclarationStatement(), final, int, i, searchIndex, x, xval, IfStatement(if), i, 1, ThrowStatement(throw), new, OutOfRangeException, x, xval, 0, xval, xval.length, 1, VariableDeclarationStatement(), final, int, j, searchIndex, y, yval, IfStatement(if), j, 1, ThrowStatement(throw), new, OutOfRangeException, y, yval, 0, yval, yval.length, 1, VariableDeclarationStatement(), final, int, k, searchIndex, z, zval, IfStatement(if), k, 1, ThrowStatement(throw), new, OutOfRangeException, z, zval, 0, zval, zval.length, 1, VariableDeclarationStatement(), final, double, xN, x, xval, i, xval, i, 1, xval, i, VariableDeclarationStatement(), final, double, yN, y, yval, j, yval, j, 1, yval, j, VariableDeclarationStatement(), final, double, zN, z, zval, k, zval, k, 1, zval, k, ReturnStatement(return), splines, i, j, k, value, xN, yN, zN]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:isValidPoint:double+double+double#[IfStatement(if), x, xval, 0, x, xval, xval.length, 1, y, yval, 0, y, yval, yval.length, 1, z, zval, 0, z, zval, zval.length, 1, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:searchIndex:double+double[]#[IfStatement(if), c, val, 0, ReturnStatement(return), 1, VariableDeclarationStatement(), final, int, max, val.length, ForStatement(for), int, i, 1, i, max, i, IfStatement(if), c, val, i, ReturnStatement(return), i, 1, ReturnStatement(return), 1]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolatingFunction:computeCoefficients:double[]#[VariableDeclarationStatement(), final, int, sz, 64, VariableDeclarationStatement(), final, double, a, double, sz, ForStatement(for), int, i, 0, i, sz, i, VariableDeclarationStatement(), double, result, 0, VariableDeclarationStatement(), final, double, row, AINV, i, ForStatement(for), int, j, 0, j, sz, j, ExpressionStatement(), result, row, j, beta, j, ExpressionStatement(), a, i, result, ReturnStatement(return), a]
org.apache.commons.math4.analysis.interpolation:TricubicFunction:value:double+double+double#[IfStatement(if), x, 0, x, 1, ThrowStatement(throw), new, OutOfRangeException, x, 0, 1, IfStatement(if), y, 0, y, 1, ThrowStatement(throw), new, OutOfRangeException, y, 0, 1, IfStatement(if), z, 0, z, 1, ThrowStatement(throw), new, OutOfRangeException, z, 0, 1, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, x3, x2, x, VariableDeclarationStatement(), final, double, pX, 1, x, x2, x3, VariableDeclarationStatement(), final, double, y2, y, y, VariableDeclarationStatement(), final, double, y3, y2, y, VariableDeclarationStatement(), final, double, pY, 1, y, y2, y3, VariableDeclarationStatement(), final, double, z2, z, z, VariableDeclarationStatement(), final, double, z3, z2, z, VariableDeclarationStatement(), final, double, pZ, 1, z, z2, z3, VariableDeclarationStatement(), double, result, 0, ForStatement(for), int, i, 0, i, N, i, ForStatement(for), int, j, 0, j, N, j, ForStatement(for), int, k, 0, k, N, k, ExpressionStatement(), result, a, i, j, k, pX, i, pY, j, pZ, k, ReturnStatement(return), result]
org.apache.commons.math4.analysis.interpolation:TricubicInterpolator:interpolate:double[]+double[]+double[]+double[][][]#[IfStatement(if), xval.length, 0, yval.length, 0, zval.length, 0, fval.length, 0, ThrowStatement(throw), new, NoDataException, IfStatement(if), xval.length, fval.length, ThrowStatement(throw), new, DimensionMismatchException, xval.length, fval.length, ExpressionStatement(), MathArrays, checkOrder, xval, ExpressionStatement(), MathArrays, checkOrder, yval, ExpressionStatement(), MathArrays, checkOrder, zval, VariableDeclarationStatement(), final, int, xLen, xval.length, VariableDeclarationStatement(), final, int, yLen, yval.length, VariableDeclarationStatement(), final, int, zLen, zval.length, VariableDeclarationStatement(), final, double, dFdX, double, xLen, yLen, zLen, VariableDeclarationStatement(), final, double, dFdY, double, xLen, yLen, zLen, VariableDeclarationStatement(), final, double, dFdZ, double, xLen, yLen, zLen, VariableDeclarationStatement(), final, double, d2FdXdY, double, xLen, yLen, zLen, VariableDeclarationStatement(), final, double, d2FdXdZ, double, xLen, yLen, zLen, VariableDeclarationStatement(), final, double, d2FdYdZ, double, xLen, yLen, zLen, VariableDeclarationStatement(), final, double, d3FdXdYdZ, double, xLen, yLen, zLen, ForStatement(for), int, i, 1, i, xLen, 1, i, IfStatement(if), yval.length, fval, i, length, ThrowStatement(throw), new, DimensionMismatchException, yval.length, fval, i, length, VariableDeclarationStatement(), final, int, nI, i, 1, VariableDeclarationStatement(), final, int, pI, i, 1, VariableDeclarationStatement(), final, double, nX, xval, nI, VariableDeclarationStatement(), final, double, pX, xval, pI, VariableDeclarationStatement(), final, double, deltaX, nX, pX, ForStatement(for), int, j, 1, j, yLen, 1, j, IfStatement(if), zval.length, fval, i, j, length, ThrowStatement(throw), new, DimensionMismatchException, zval.length, fval, i, j, length, VariableDeclarationStatement(), final, int, nJ, j, 1, VariableDeclarationStatement(), final, int, pJ, j, 1, VariableDeclarationStatement(), final, double, nY, yval, nJ, VariableDeclarationStatement(), final, double, pY, yval, pJ, VariableDeclarationStatement(), final, double, deltaY, nY, pY, VariableDeclarationStatement(), final, double, deltaXY, deltaX, deltaY, ForStatement(for), int, k, 1, k, zLen, 1, k, VariableDeclarationStatement(), final, int, nK, k, 1, VariableDeclarationStatement(), final, int, pK, k, 1, VariableDeclarationStatement(), final, double, nZ, zval, nK, VariableDeclarationStatement(), final, double, pZ, zval, pK, VariableDeclarationStatement(), final, double, deltaZ, nZ, pZ, ExpressionStatement(), dFdX, i, j, k, fval, nI, j, k, fval, pI, j, k, deltaX, ExpressionStatement(), dFdY, i, j, k, fval, i, nJ, k, fval, i, pJ, k, deltaY, ExpressionStatement(), dFdZ, i, j, k, fval, i, j, nK, fval, i, j, pK, deltaZ, VariableDeclarationStatement(), final, double, deltaXZ, deltaX, deltaZ, VariableDeclarationStatement(), final, double, deltaYZ, deltaY, deltaZ, ExpressionStatement(), d2FdXdY, i, j, k, fval, nI, nJ, k, fval, nI, pJ, k, fval, pI, nJ, k, fval, pI, pJ, k, deltaXY, ExpressionStatement(), d2FdXdZ, i, j, k, fval, nI, j, nK, fval, nI, j, pK, fval, pI, j, nK, fval, pI, j, pK, deltaXZ, ExpressionStatement(), d2FdYdZ, i, j, k, fval, i, nJ, nK, fval, i, nJ, pK, fval, i, pJ, nK, fval, i, pJ, pK, deltaYZ, VariableDeclarationStatement(), final, double, deltaXYZ, deltaXY, deltaZ, ExpressionStatement(), d3FdXdYdZ, i, j, k, fval, nI, nJ, nK, fval, nI, pJ, nK, fval, pI, nJ, nK, fval, pI, pJ, nK, fval, nI, nJ, pK, fval, nI, pJ, pK, fval, pI, nJ, pK, fval, pI, pJ, pK, deltaXYZ, ReturnStatement(return), new, TricubicInterpolatingFunction, xval, yval, zval, fval, dFdX, dFdY, dFdZ, d2FdXdY, d2FdXdZ, d2FdYdZ, d3FdXdYdZ, Override, public, boolean, isValidPoint, double, x, double, y, double, z, IfStatement(if), x, xval, 1, x, xval, xval.length, 2, y, yval, 1, y, yval, yval.length, 2, z, zval, 1, z, zval, zval.length, 2, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.analysis.interpolation:UnivariatePeriodicInterpolator:interpolate:double[]+double[]#[IfStatement(if), xval.length, extend, ThrowStatement(throw), new, NumberIsTooSmallException, xval.length, extend, true, ExpressionStatement(), MathArrays, checkOrder, xval, VariableDeclarationStatement(), final, double, offset, xval, 0, VariableDeclarationStatement(), final, int, len, xval.length, extend, 2, VariableDeclarationStatement(), final, double, x, double, len, VariableDeclarationStatement(), final, double, y, double, len, ForStatement(for), int, i, 0, i, xval.length, i, VariableDeclarationStatement(), final, int, index, i, extend, ExpressionStatement(), x, index, MathUtils, reduce, xval, i, period, offset, ExpressionStatement(), y, index, yval, i, ForStatement(for), int, i, 0, i, extend, i, VariableDeclarationStatement(), int, index, xval.length, extend, i, ExpressionStatement(), x, i, MathUtils, reduce, xval, index, period, offset, period, ExpressionStatement(), y, i, yval, index, ExpressionStatement(), index, len, extend, i, ExpressionStatement(), x, index, MathUtils, reduce, xval, i, period, offset, period, ExpressionStatement(), y, index, yval, i, ExpressionStatement(), MathArrays, sortInPlace, x, y, VariableDeclarationStatement(), final, UnivariateFunction, f, interpolator, interpolate, x, y, ReturnStatement(return), new, UnivariateFunction, Override, public, double, value, final, double, x, MathIllegalArgumentException, ReturnStatement(return), f, value, MathUtils, reduce, x, period, offset]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:value:double#[ReturnStatement(return), evaluate, coefficients, x]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:degree:null#[ReturnStatement(return), coefficients.length, 1]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:getCoefficients:null#[ReturnStatement(return), coefficients, clone]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:evaluate:double[]+double#[ExpressionStatement(), MathUtils, checkNotNull, coefficients, VariableDeclarationStatement(), int, n, coefficients.length, IfStatement(if), n, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, VariableDeclarationStatement(), double, result, coefficients, n, 1, ForStatement(for), int, j, n, 2, j, 0, j, ExpressionStatement(), result, argument, result, coefficients, j, ReturnStatement(return), result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:value:DerivativeStructure#[ExpressionStatement(), MathUtils, checkNotNull, coefficients, VariableDeclarationStatement(), int, n, coefficients.length, IfStatement(if), n, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, VariableDeclarationStatement(), DerivativeStructure, result, new, DerivativeStructure, t, getFreeParameters, t, getOrder, coefficients, n, 1, ForStatement(for), int, j, n, 2, j, 0, j, ExpressionStatement(), result, result, multiply, t, add, coefficients, j, ReturnStatement(return), result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:add:PolynomialFunction#[VariableDeclarationStatement(), final, int, lowLength, FastMath, min, coefficients.length, p.coefficients.length, VariableDeclarationStatement(), final, int, highLength, FastMath, max, coefficients.length, p.coefficients.length, VariableDeclarationStatement(), double, newCoefficients, double, highLength, ForStatement(for), int, i, 0, i, lowLength, i, ExpressionStatement(), newCoefficients, i, coefficients, i, p.coefficients, i, ExpressionStatement(), System, arraycopy, coefficients.length, p.coefficients.length, p.coefficients, coefficients, lowLength, newCoefficients, lowLength, highLength, lowLength, ReturnStatement(return), new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:subtract:PolynomialFunction#[VariableDeclarationStatement(), int, lowLength, FastMath, min, coefficients.length, p.coefficients.length, VariableDeclarationStatement(), int, highLength, FastMath, max, coefficients.length, p.coefficients.length, VariableDeclarationStatement(), double, newCoefficients, double, highLength, ForStatement(for), int, i, 0, i, lowLength, i, ExpressionStatement(), newCoefficients, i, coefficients, i, p.coefficients, i, IfStatement(if), coefficients.length, p.coefficients.length, ForStatement(for), int, i, lowLength, i, highLength, i, ExpressionStatement(), newCoefficients, i, p.coefficients, i, ExpressionStatement(), System, arraycopy, coefficients, lowLength, newCoefficients, lowLength, highLength, lowLength, ReturnStatement(return), new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:negate:null#[VariableDeclarationStatement(), double, newCoefficients, double, coefficients.length, ForStatement(for), int, i, 0, i, coefficients.length, i, ExpressionStatement(), newCoefficients, i, coefficients, i, ReturnStatement(return), new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:multiply:PolynomialFunction#[VariableDeclarationStatement(), double, newCoefficients, double, coefficients.length, p.coefficients.length, 1, ForStatement(for), int, i, 0, i, newCoefficients.length, i, ExpressionStatement(), newCoefficients, i, 0.0, ForStatement(for), int, j, FastMath, max, 0, i, 1, p.coefficients.length, j, FastMath, min, coefficients.length, i, 1, j, ExpressionStatement(), newCoefficients, i, coefficients, j, p.coefficients, i, j, ReturnStatement(return), new, PolynomialFunction, newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:differentiate:double[]#[ExpressionStatement(), MathUtils, checkNotNull, coefficients, VariableDeclarationStatement(), int, n, coefficients.length, IfStatement(if), n, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, IfStatement(if), n, 1, ReturnStatement(return), double, 0, VariableDeclarationStatement(), double, result, double, n, 1, ForStatement(for), int, i, n, 1, i, 0, i, ExpressionStatement(), result, i, 1, i, coefficients, i, ReturnStatement(return), result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:polynomialDerivative:null#[ReturnStatement(return), new, PolynomialFunction, differentiate, coefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:toString:null#[VariableDeclarationStatement(), StringBuilder, s, new, StringBuilder, IfStatement(if), coefficients, 0, 0.0, IfStatement(if), coefficients.length, 1, ReturnStatement(return), "0", ExpressionStatement(), s, append, toString, coefficients, 0, ForStatement(for), int, i, 1, i, coefficients.length, i, IfStatement(if), coefficients, i, 0, IfStatement(if), s, length, 0, IfStatement(if), coefficients, i, 0, ExpressionStatement(), s, append, " - ", ExpressionStatement(), s, append, " + ", IfStatement(if), coefficients, i, 0, ExpressionStatement(), s, append, "-", VariableDeclarationStatement(), double, absAi, FastMath, abs, coefficients, i, IfStatement(if), absAi, 1, 0, ExpressionStatement(), s, append, toString, absAi, ExpressionStatement(), s, append, ' ', ExpressionStatement(), s, append, "x", IfStatement(if), i, 1, ExpressionStatement(), s, append, '^', ExpressionStatement(), s, append, Integer, toString, i, ReturnStatement(return), s, toString]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:toString:double#[VariableDeclarationStatement(), final, String, c, Double, toString, coeff, IfStatement(if), c, endsWith, ".0", ReturnStatement(return), c, substring, 0, c, length, 2, ReturnStatement(return), c]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:hashCode:null#[VariableDeclarationStatement(), final, int, prime, 31, VariableDeclarationStatement(), int, result, 1, ExpressionStatement(), result, prime, result, Arrays, hashCode, coefficients, ReturnStatement(return), result]
org.apache.commons.math4.analysis.polynomials:PolynomialFunction:equals:Object#[IfStatement(if), this, obj, ReturnStatement(return), true, IfStatement(if), instanceof, obj, PolynomialFunction, ReturnStatement(return), false, VariableDeclarationStatement(), PolynomialFunction, other, PolynomialFunction, obj, IfStatement(if), Arrays, equals, coefficients, other.coefficients, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:value:double#[ReturnStatement(return), evaluateInternal, x, y, z]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:degree:null#[ReturnStatement(return), x.length, 1]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:getInterpolatingPoints:null#[VariableDeclarationStatement(), double, out, double, x.length, ExpressionStatement(), System, arraycopy, x, 0, out, 0, x.length, ReturnStatement(return), out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:getInterpolatingValues:null#[VariableDeclarationStatement(), double, out, double, y.length, ExpressionStatement(), System, arraycopy, y, 0, out, 0, y.length, ReturnStatement(return), out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:getCoefficients:null#[IfStatement(if), coefficientsComputed, ExpressionStatement(), computeCoefficients, VariableDeclarationStatement(), double, out, double, coefficients.length, ExpressionStatement(), System, arraycopy, coefficients, 0, out, 0, coefficients.length, ReturnStatement(return), out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:evaluate:double+double+double#[IfStatement(if), verifyInterpolationArray, x, y, false, ReturnStatement(return), evaluateInternal, x, y, z, VariableDeclarationStatement(), final, double, xNew, double, x.length, VariableDeclarationStatement(), final, double, yNew, double, y.length, ExpressionStatement(), System, arraycopy, x, 0, xNew, 0, x.length, ExpressionStatement(), System, arraycopy, y, 0, yNew, 0, y.length, ExpressionStatement(), MathArrays, sortInPlace, xNew, yNew, ExpressionStatement(), verifyInterpolationArray, xNew, yNew, true, ReturnStatement(return), evaluateInternal, xNew, yNew, z]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:evaluateInternal:double+double+double#[VariableDeclarationStatement(), int, nearest, 0, VariableDeclarationStatement(), final, int, n, x.length, VariableDeclarationStatement(), final, double, c, double, n, VariableDeclarationStatement(), final, double, d, double, n, VariableDeclarationStatement(), double, min_dist, Double.POSITIVE_INFINITY, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), c, i, y, i, ExpressionStatement(), d, i, y, i, VariableDeclarationStatement(), final, double, dist, FastMath, abs, z, x, i, IfStatement(if), dist, min_dist, ExpressionStatement(), nearest, i, ExpressionStatement(), min_dist, dist, VariableDeclarationStatement(), double, value, y, nearest, ForStatement(for), int, i, 1, i, n, i, ForStatement(for), int, j, 0, j, n, i, j, VariableDeclarationStatement(), final, double, tc, x, j, z, VariableDeclarationStatement(), final, double, td, x, i, j, z, VariableDeclarationStatement(), final, double, divider, x, j, x, i, j, VariableDeclarationStatement(), final, double, w, c, j, 1, d, j, divider, ExpressionStatement(), c, j, tc, w, ExpressionStatement(), d, j, td, w, IfStatement(if), nearest, 0.5, n, i, 1, ExpressionStatement(), value, c, nearest, ExpressionStatement(), nearest, ExpressionStatement(), value, d, nearest, ReturnStatement(return), value]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:computeCoefficients:null#[VariableDeclarationStatement(), final, int, n, degree, 1, ExpressionStatement(), coefficients, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), coefficients, i, 0.0, VariableDeclarationStatement(), final, double, c, double, n, 1, ExpressionStatement(), c, 0, 1.0, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, i, j, 0, j, ExpressionStatement(), c, j, c, j, 1, c, j, x, i, ExpressionStatement(), c, 0, x, i, ExpressionStatement(), c, i, 1, 1, VariableDeclarationStatement(), final, double, tc, double, n, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), double, d, 1, ForStatement(for), int, j, 0, j, n, j, IfStatement(if), i, j, ExpressionStatement(), d, x, i, x, j, VariableDeclarationStatement(), final, double, t, y, i, d, ExpressionStatement(), tc, n, 1, c, n, ExpressionStatement(), coefficients, n, 1, t, tc, n, 1, ForStatement(for), int, j, n, 2, j, 0, j, ExpressionStatement(), tc, j, c, j, 1, tc, j, 1, x, i, ExpressionStatement(), coefficients, j, t, tc, j, ExpressionStatement(), coefficientsComputed, true]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionLagrangeForm:verifyInterpolationArray:double+double+boolean#[IfStatement(if), x.length, y.length, ThrowStatement(throw), new, DimensionMismatchException, x.length, y.length, IfStatement(if), x.length, 2, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length, true, ReturnStatement(return), MathArrays, checkOrder, x, MathArrays.OrderDirection.INCREASING, true, abort]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:value:double#[ReturnStatement(return), evaluate, a, c, z]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:value:DerivativeStructure#[ExpressionStatement(), verifyInputArray, a, c, VariableDeclarationStatement(), final, int, n, c.length, VariableDeclarationStatement(), DerivativeStructure, value, new, DerivativeStructure, t, getFreeParameters, t, getOrder, a, n, ForStatement(for), int, i, n, 1, i, 0, i, ExpressionStatement(), value, t, subtract, c, i, multiply, value, add, a, i, ReturnStatement(return), value]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:degree:null#[ReturnStatement(return), c.length]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:getNewtonCoefficients:null#[VariableDeclarationStatement(), double, out, double, a.length, ExpressionStatement(), System, arraycopy, a, 0, out, 0, a.length, ReturnStatement(return), out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:getCenters:null#[VariableDeclarationStatement(), double, out, double, c.length, ExpressionStatement(), System, arraycopy, c, 0, out, 0, c.length, ReturnStatement(return), out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:getCoefficients:null#[IfStatement(if), coefficientsComputed, ExpressionStatement(), computeCoefficients, VariableDeclarationStatement(), double, out, double, coefficients.length, ExpressionStatement(), System, arraycopy, coefficients, 0, out, 0, coefficients.length, ReturnStatement(return), out]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:evaluate:double+double+double#[ExpressionStatement(), verifyInputArray, a, c, VariableDeclarationStatement(), final, int, n, c.length, VariableDeclarationStatement(), double, value, a, n, ForStatement(for), int, i, n, 1, i, 0, i, ExpressionStatement(), value, a, i, z, c, i, value, ReturnStatement(return), value]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:computeCoefficients:null#[VariableDeclarationStatement(), final, int, n, degree, ExpressionStatement(), coefficients, double, n, 1, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), coefficients, i, 0.0, ExpressionStatement(), coefficients, 0, a, n, ForStatement(for), int, i, n, 1, i, 0, i, ForStatement(for), int, j, n, i, j, 0, j, ExpressionStatement(), coefficients, j, coefficients, j, 1, c, i, coefficients, j, ExpressionStatement(), coefficients, 0, a, i, c, i, coefficients, 0, ExpressionStatement(), coefficientsComputed, true]
org.apache.commons.math4.analysis.polynomials:PolynomialFunctionNewtonForm:verifyInputArray:double+double#[ExpressionStatement(), MathUtils, checkNotNull, a, ExpressionStatement(), MathUtils, checkNotNull, c, IfStatement(if), a.length, 0, c.length, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, IfStatement(if), a.length, c.length, 1, ThrowStatement(throw), new, DimensionMismatchException, LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, a.length, c.length]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:value:double#[IfStatement(if), v, knots, 0, v, knots, n, ThrowStatement(throw), new, OutOfRangeException, v, knots, 0, knots, n, VariableDeclarationStatement(), int, i, Arrays, binarySearch, knots, v, IfStatement(if), i, 0, ExpressionStatement(), i, i, 2, IfStatement(if), i, polynomials.length, ExpressionStatement(), i, ReturnStatement(return), polynomials, i, value, v, knots, i]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:polynomialSplineDerivative:null#[VariableDeclarationStatement(), PolynomialFunction, derivativePolynomials, PolynomialFunction, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), derivativePolynomials, i, polynomials, i, polynomialDerivative, ReturnStatement(return), new, PolynomialSplineFunction, knots, derivativePolynomials]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:value:DerivativeStructure#[VariableDeclarationStatement(), final, double, t0, t, getValue, IfStatement(if), t0, knots, 0, t0, knots, n, ThrowStatement(throw), new, OutOfRangeException, t0, knots, 0, knots, n, VariableDeclarationStatement(), int, i, Arrays, binarySearch, knots, t0, IfStatement(if), i, 0, ExpressionStatement(), i, i, 2, IfStatement(if), i, polynomials.length, ExpressionStatement(), i, ReturnStatement(return), polynomials, i, value, t, subtract, knots, i]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:getPolynomials:null#[VariableDeclarationStatement(), PolynomialFunction, p, PolynomialFunction, n, ExpressionStatement(), System, arraycopy, polynomials, 0, p, 0, n, ReturnStatement(return), p]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:getKnots:null#[VariableDeclarationStatement(), double, out, double, n, 1, ExpressionStatement(), System, arraycopy, knots, 0, out, 0, n, 1, ReturnStatement(return), out]
org.apache.commons.math4.analysis.polynomials:PolynomialSplineFunction:isValidPoint:double#[IfStatement(if), x, knots, 0, x, knots, n, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createChebyshevPolynomial:int#[ReturnStatement(return), buildPolynomial, degree, CHEBYSHEV_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, private, final, BigFraction, coeffs, BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE, Override, public, BigFraction, generate, int, k, ReturnStatement(return), coeffs]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createHermitePolynomial:int#[ReturnStatement(return), buildPolynomial, degree, HERMITE_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, ReturnStatement(return), BigFraction, BigFraction.ZERO, BigFraction.TWO, new, BigFraction, 2, k]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createLaguerrePolynomial:int#[ReturnStatement(return), buildPolynomial, degree, LAGUERRE_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, VariableDeclarationStatement(), final, int, kP1, k, 1, ReturnStatement(return), BigFraction, new, BigFraction, 2, k, 1, kP1, new, BigFraction, 1, kP1, new, BigFraction, k, kP1]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createLegendrePolynomial:int#[ReturnStatement(return), buildPolynomial, degree, LEGENDRE_COEFFICIENTS, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, VariableDeclarationStatement(), final, int, kP1, k, 1, ReturnStatement(return), BigFraction, BigFraction.ZERO, new, BigFraction, k, kP1, kP1, new, BigFraction, k, kP1]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:createJacobiPolynomial:int+int+int#[VariableDeclarationStatement(), final, JacobiKey, key, new, JacobiKey, v, w, IfStatement(if), JACOBI_COEFFICIENTS, containsKey, key, VariableDeclarationStatement(), final, List, BigFraction, list, new, ArrayList, BigFraction, ExpressionStatement(), JACOBI_COEFFICIENTS, put, key, list, ExpressionStatement(), list, add, BigFraction.ONE, ExpressionStatement(), list, add, new, BigFraction, v, w, 2, ExpressionStatement(), list, add, new, BigFraction, 2, v, w, 2, ReturnStatement(return), buildPolynomial, degree, JACOBI_COEFFICIENTS, get, key, new, RecurrenceCoefficientsGenerator, Override, public, BigFraction, generate, int, k, ExpressionStatement(), k, VariableDeclarationStatement(), final, int, kvw, k, v, w, VariableDeclarationStatement(), final, int, twoKvw, kvw, k, VariableDeclarationStatement(), final, int, twoKvwM1, twoKvw, 1, VariableDeclarationStatement(), final, int, twoKvwM2, twoKvw, 2, VariableDeclarationStatement(), final, int, den, 2, k, kvw, twoKvwM2, ReturnStatement(return), BigFraction, new, BigFraction, twoKvwM1, v, v, w, w, den, new, BigFraction, twoKvwM1, twoKvw, twoKvwM2, den, new, BigFraction, 2, k, v, 1, k, w, 1, twoKvw, den]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:shift:double[]+double#[VariableDeclarationStatement(), final, int, dp1, coefficients.length, VariableDeclarationStatement(), final, double, newCoefficients, double, dp1, VariableDeclarationStatement(), final, int, coeff, int, dp1, dp1, ForStatement(for), int, i, 0, i, dp1, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), coeff, i, j, int, CombinatoricsUtils, binomialCoefficient, i, j, ForStatement(for), int, i, 0, i, dp1, i, ExpressionStatement(), newCoefficients, 0, coefficients, i, FastMath, pow, shift, i, VariableDeclarationStatement(), final, int, d, dp1, 1, ForStatement(for), int, i, 0, i, d, i, ForStatement(for), int, j, i, j, d, j, ExpressionStatement(), newCoefficients, i, 1, coeff, j, 1, j, i, coefficients, j, 1, FastMath, pow, shift, j, i, ReturnStatement(return), newCoefficients]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:buildPolynomial:int+List<BigFraction>+RecurrenceCoefficientsGenerator#[SynchronizedStatement(), coefficients, VariableDeclarationStatement(), final, int, maxDegree, int, FastMath, floor, FastMath, sqrt, 2, coefficients, size, 1, IfStatement(if), degree, maxDegree, ExpressionStatement(), computeUpToDegree, degree, maxDegree, generator, coefficients, VariableDeclarationStatement(), final, int, start, degree, degree, 1, 2, VariableDeclarationStatement(), final, double, a, double, degree, 1, ForStatement(for), int, i, 0, i, degree, i, ExpressionStatement(), a, i, coefficients, get, start, i, doubleValue, ReturnStatement(return), new, PolynomialFunction, a]
org.apache.commons.math4.analysis.polynomials:PolynomialsUtils:computeUpToDegree:int+int+RecurrenceCoefficientsGenerator+List<BigFraction>#[VariableDeclarationStatement(), int, startK, maxDegree, 1, maxDegree, 2, ForStatement(for), int, k, maxDegree, k, degree, k, VariableDeclarationStatement(), int, startKm1, startK, ExpressionStatement(), startK, k, VariableDeclarationStatement(), BigFraction, ai, generator, generate, k, VariableDeclarationStatement(), BigFraction, ck, coefficients, get, startK, VariableDeclarationStatement(), BigFraction, ckm1, coefficients, get, startKm1, ExpressionStatement(), coefficients, add, ck, multiply, ai, 0, subtract, ckm1, multiply, ai, 2, ForStatement(for), int, i, 1, i, k, i, VariableDeclarationStatement(), final, BigFraction, ckPrev, ck, ExpressionStatement(), ck, coefficients, get, startK, i, ExpressionStatement(), ckm1, coefficients, get, startKm1, i, ExpressionStatement(), coefficients, add, ck, multiply, ai, 0, add, ckPrev, multiply, ai, 1, subtract, ckm1, multiply, ai, 2, VariableDeclarationStatement(), final, BigFraction, ckPrev, ck, ExpressionStatement(), ck, coefficients, get, startK, k, ExpressionStatement(), coefficients, add, ck, multiply, ai, 0, add, ckPrev, multiply, ai, 1, ExpressionStatement(), coefficients, add, ck, multiply, ai, 1]
org.apache.commons.math4.analysis.solvers:AbstractPolynomialSolver:setup:int+PolynomialFunction+double+double+double#[ExpressionStatement(), super, setup, maxEval, f, min, max, startValue, ExpressionStatement(), polynomialFunction, f]
org.apache.commons.math4.analysis.solvers:AbstractPolynomialSolver:getCoefficients:null#[ReturnStatement(return), polynomialFunction, getCoefficients]
org.apache.commons.math4.analysis.solvers:AbstractUnivariateDifferentiableSolver:computeObjectiveValueAndDerivative:double#[ExpressionStatement(), incrementEvaluationCount, ReturnStatement(return), function, value, new, DerivativeStructure, 1, 1, 0, point]
org.apache.commons.math4.analysis.solvers:AbstractUnivariateDifferentiableSolver:setup:int+UnivariateDifferentiableFunction+double+double+double#[ExpressionStatement(), super, setup, maxEval, f, min, max, startValue, ExpressionStatement(), function, f]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getMaxEvaluations:null#[ReturnStatement(return), evaluations, getMaximalCount]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getEvaluations:null#[ReturnStatement(return), evaluations, getCount]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getMin:null#[ReturnStatement(return), searchMin]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getMax:null#[ReturnStatement(return), searchMax]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getStartValue:null#[ReturnStatement(return), searchStart]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getAbsoluteAccuracy:null#[ReturnStatement(return), absoluteAccuracy]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getRelativeAccuracy:null#[ReturnStatement(return), relativeAccuracy]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:getFunctionValueAccuracy:null#[ReturnStatement(return), functionValueAccuracy]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:computeObjectiveValue:double#[ExpressionStatement(), incrementEvaluationCount, ReturnStatement(return), function, value, point]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:setup:int+FUNC+double+double+double#[ExpressionStatement(), MathUtils, checkNotNull, f, ExpressionStatement(), searchMin, min, ExpressionStatement(), searchMax, max, ExpressionStatement(), searchStart, startValue, ExpressionStatement(), function, f, ExpressionStatement(), evaluations, setMaximalCount, maxEval, ExpressionStatement(), evaluations, resetCount]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:solve:int+FUNC+double+double+double#[ExpressionStatement(), setup, maxEval, f, min, max, startValue, ReturnStatement(return), doSolve]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:solve:int+FUNC+double+double#[ReturnStatement(return), solve, maxEval, f, min, max, min, 0.5, max, min]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:solve:int+FUNC+double#[ReturnStatement(return), solve, maxEval, f, Double.NaN, Double.NaN, startValue]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:isBracketing:double+double#[ReturnStatement(return), UnivariateSolverUtils, isBracketing, function, lower, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:isSequence:double+double+double#[ReturnStatement(return), UnivariateSolverUtils, isSequence, start, mid, end]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:verifyInterval:double+double#[ExpressionStatement(), UnivariateSolverUtils, verifyInterval, lower, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:verifySequence:double+double+double#[ExpressionStatement(), UnivariateSolverUtils, verifySequence, lower, initial, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:verifyBracketing:double+double#[ExpressionStatement(), UnivariateSolverUtils, verifyBracketing, function, lower, upper]
org.apache.commons.math4.analysis.solvers:BaseAbstractUnivariateSolver:incrementEvaluationCount:null#[TryStatement(try), ExpressionStatement(), evaluations, incrementCount, catch, MaxCountExceededException, e, ThrowStatement(throw), new, TooManyEvaluationsException, e, getMax]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:solve:int+UnivariateFunction+double+double+AllowedSolution#[ReturnStatement(return), solve, maxEval, f, min, max, min, 0.5, max, min, allowedSolution]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:solve:int+UnivariateFunction+double+double+double+AllowedSolution#[ExpressionStatement(), this, allowed, allowedSolution, ReturnStatement(return), super, solve, maxEval, f, min, max, startValue]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:solve:int+UnivariateFunction+double+double+double#[ReturnStatement(return), solve, maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE]
org.apache.commons.math4.analysis.solvers:BaseSecantSolver:doSolve:null#[VariableDeclarationStatement(), double, x0, getMin, VariableDeclarationStatement(), double, x1, getMax, VariableDeclarationStatement(), double, f0, computeObjectiveValue, x0, VariableDeclarationStatement(), double, f1, computeObjectiveValue, x1, IfStatement(if), f0, 0.0, ReturnStatement(return), x0, IfStatement(if), f1, 0.0, ReturnStatement(return), x1, ExpressionStatement(), verifyBracketing, x0, x1, VariableDeclarationStatement(), final, double, ftol, getFunctionValueAccuracy, VariableDeclarationStatement(), final, double, atol, getAbsoluteAccuracy, VariableDeclarationStatement(), final, double, rtol, getRelativeAccuracy, VariableDeclarationStatement(), boolean, inverted, false, WhileStatement(while), true, VariableDeclarationStatement(), final, double, x, x1, f1, x1, x0, f1, f0, VariableDeclarationStatement(), final, double, fx, computeObjectiveValue, x, IfStatement(if), fx, 0.0, ReturnStatement(return), x, IfStatement(if), f1, fx, 0, ExpressionStatement(), x0, x1, ExpressionStatement(), f0, f1, ExpressionStatement(), inverted, inverted, SwitchStatement(switch), method, SwitchCase(case), ILLINOIS, ExpressionStatement(), f0, 0.5, BreakStatement(break), SwitchCase(case), PEGASUS, ExpressionStatement(), f0, f1, f1, fx, BreakStatement(break), SwitchCase(case), REGULA_FALSI, IfStatement(if), x, x1, ThrowStatement(throw), new, ConvergenceException, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), x1, x, ExpressionStatement(), f1, fx, IfStatement(if), FastMath, abs, f1, ftol, SwitchStatement(switch), allowed, SwitchCase(case), ANY_SIDE, ReturnStatement(return), x1, SwitchCase(case), LEFT_SIDE, IfStatement(if), inverted, ReturnStatement(return), x1, BreakStatement(break), SwitchCase(case), RIGHT_SIDE, IfStatement(if), inverted, ReturnStatement(return), x1, BreakStatement(break), SwitchCase(case), BELOW_SIDE, IfStatement(if), f1, 0, ReturnStatement(return), x1, BreakStatement(break), SwitchCase(case), ABOVE_SIDE, IfStatement(if), f1, 0, ReturnStatement(return), x1, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, IfStatement(if), FastMath, abs, x1, x0, FastMath, max, rtol, FastMath, abs, x1, atol, SwitchStatement(switch), allowed, SwitchCase(case), ANY_SIDE, ReturnStatement(return), x1, SwitchCase(case), LEFT_SIDE, ReturnStatement(return), inverted, x1, x0, SwitchCase(case), RIGHT_SIDE, ReturnStatement(return), inverted, x0, x1, SwitchCase(case), BELOW_SIDE, ReturnStatement(return), f1, 0, x1, x0, SwitchCase(case), ABOVE_SIDE, ReturnStatement(return), f1, 0, x1, x0, SwitchCase(default), ThrowStatement(throw), new, MathInternalError]
org.apache.commons.math4.analysis.solvers:BisectionSolver:doSolve:null#[VariableDeclarationStatement(), double, min, getMin, VariableDeclarationStatement(), double, max, getMax, ExpressionStatement(), verifyInterval, min, max, VariableDeclarationStatement(), final, double, absoluteAccuracy, getAbsoluteAccuracy, VariableDeclarationStatement(), double, m, VariableDeclarationStatement(), double, fm, VariableDeclarationStatement(), double, fmin, WhileStatement(while), true, ExpressionStatement(), m, UnivariateSolverUtils, midpoint, min, max, ExpressionStatement(), fmin, computeObjectiveValue, min, ExpressionStatement(), fm, computeObjectiveValue, m, IfStatement(if), fm, fmin, 0, ExpressionStatement(), min, m, ExpressionStatement(), max, m, IfStatement(if), FastMath, abs, max, min, absoluteAccuracy, ExpressionStatement(), m, UnivariateSolverUtils, midpoint, min, max, ReturnStatement(return), m]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:getMaximalOrder:null#[ReturnStatement(return), maximalOrder]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:doSolve:null#[VariableDeclarationStatement(), final, double, x, double, maximalOrder, 1, VariableDeclarationStatement(), final, double, y, double, maximalOrder, 1, ExpressionStatement(), x, 0, getMin, ExpressionStatement(), x, 1, getStartValue, ExpressionStatement(), x, 2, getMax, ExpressionStatement(), verifySequence, x, 0, x, 1, x, 2, ExpressionStatement(), y, 1, computeObjectiveValue, x, 1, IfStatement(if), Precision, equals, y, 1, 0.0, 1, ReturnStatement(return), x, 1, ExpressionStatement(), y, 0, computeObjectiveValue, x, 0, IfStatement(if), Precision, equals, y, 0, 0.0, 1, ReturnStatement(return), x, 0, VariableDeclarationStatement(), int, nbPoints, VariableDeclarationStatement(), int, signChangeIndex, IfStatement(if), y, 0, y, 1, 0, ExpressionStatement(), nbPoints, 2, ExpressionStatement(), signChangeIndex, 1, ExpressionStatement(), y, 2, computeObjectiveValue, x, 2, IfStatement(if), Precision, equals, y, 2, 0.0, 1, ReturnStatement(return), x, 2, IfStatement(if), y, 1, y, 2, 0, ExpressionStatement(), nbPoints, 3, ExpressionStatement(), signChangeIndex, 2, ThrowStatement(throw), new, NoBracketingException, x, 0, x, 2, y, 0, y, 2, VariableDeclarationStatement(), final, double, tmpX, double, x.length, VariableDeclarationStatement(), double, xA, x, signChangeIndex, 1, VariableDeclarationStatement(), double, yA, y, signChangeIndex, 1, VariableDeclarationStatement(), double, absYA, FastMath, abs, yA, VariableDeclarationStatement(), int, agingA, 0, VariableDeclarationStatement(), double, xB, x, signChangeIndex, VariableDeclarationStatement(), double, yB, y, signChangeIndex, VariableDeclarationStatement(), double, absYB, FastMath, abs, yB, VariableDeclarationStatement(), int, agingB, 0, WhileStatement(while), true, VariableDeclarationStatement(), final, double, xTol, getAbsoluteAccuracy, getRelativeAccuracy, FastMath, max, FastMath, abs, xA, FastMath, abs, xB, IfStatement(if), xB, xA, xTol, FastMath, max, absYA, absYB, getFunctionValueAccuracy, SwitchStatement(switch), allowed, SwitchCase(case), ANY_SIDE, ReturnStatement(return), absYA, absYB, xA, xB, SwitchCase(case), LEFT_SIDE, ReturnStatement(return), xA, SwitchCase(case), RIGHT_SIDE, ReturnStatement(return), xB, SwitchCase(case), BELOW_SIDE, ReturnStatement(return), yA, 0, xA, xB, SwitchCase(case), ABOVE_SIDE, ReturnStatement(return), yA, 0, xB, xA, SwitchCase(default), ThrowStatement(throw), new, MathInternalError, VariableDeclarationStatement(), double, targetY, IfStatement(if), agingA, MAXIMAL_AGING, VariableDeclarationStatement(), final, int, p, agingA, MAXIMAL_AGING, VariableDeclarationStatement(), final, double, weightA, 1, p, 1, VariableDeclarationStatement(), final, double, weightB, p, 1, ExpressionStatement(), targetY, weightA, yA, weightB, REDUCTION_FACTOR, yB, weightA, weightB, IfStatement(if), agingB, MAXIMAL_AGING, VariableDeclarationStatement(), final, int, p, agingB, MAXIMAL_AGING, VariableDeclarationStatement(), final, double, weightA, p, 1, VariableDeclarationStatement(), final, double, weightB, 1, p, 1, ExpressionStatement(), targetY, weightB, yB, weightA, REDUCTION_FACTOR, yA, weightA, weightB, ExpressionStatement(), targetY, 0, VariableDeclarationStatement(), double, nextX, VariableDeclarationStatement(), int, start, 0, VariableDeclarationStatement(), int, end, nbPoints, DoStatement(do), ExpressionStatement(), System, arraycopy, x, start, tmpX, start, end, start, ExpressionStatement(), nextX, guessX, targetY, tmpX, y, start, end, IfStatement(if), nextX, xA, nextX, xB, IfStatement(if), signChangeIndex, start, end, signChangeIndex, ExpressionStatement(), start, ExpressionStatement(), end, ExpressionStatement(), nextX, Double.NaN, Double, isNaN, nextX, end, start, 1, IfStatement(if), Double, isNaN, nextX, ExpressionStatement(), nextX, xA, 0.5, xB, xA, ExpressionStatement(), start, signChangeIndex, 1, ExpressionStatement(), end, signChangeIndex, VariableDeclarationStatement(), final, double, nextY, computeObjectiveValue, nextX, IfStatement(if), Precision, equals, nextY, 0.0, 1, ReturnStatement(return), nextX, IfStatement(if), nbPoints, 2, end, start, nbPoints, ExpressionStatement(), nbPoints, end, start, ExpressionStatement(), System, arraycopy, x, start, x, 0, nbPoints, ExpressionStatement(), System, arraycopy, y, start, y, 0, nbPoints, ExpressionStatement(), signChangeIndex, start, IfStatement(if), nbPoints, x.length, ExpressionStatement(), nbPoints, IfStatement(if), signChangeIndex, x.length, 1, 2, ExpressionStatement(), System, arraycopy, x, 1, x, 0, nbPoints, ExpressionStatement(), System, arraycopy, y, 1, y, 0, nbPoints, ExpressionStatement(), signChangeIndex, ExpressionStatement(), System, arraycopy, x, signChangeIndex, x, signChangeIndex, 1, nbPoints, signChangeIndex, ExpressionStatement(), x, signChangeIndex, nextX, ExpressionStatement(), System, arraycopy, y, signChangeIndex, y, signChangeIndex, 1, nbPoints, signChangeIndex, ExpressionStatement(), y, signChangeIndex, nextY, ExpressionStatement(), nbPoints, IfStatement(if), nextY, yA, 0, ExpressionStatement(), xB, nextX, ExpressionStatement(), yB, nextY, ExpressionStatement(), absYB, FastMath, abs, yB, ExpressionStatement(), agingA, ExpressionStatement(), agingB, 0, ExpressionStatement(), xA, nextX, ExpressionStatement(), yA, nextY, ExpressionStatement(), absYA, FastMath, abs, yA, ExpressionStatement(), agingA, 0, ExpressionStatement(), agingB, ExpressionStatement(), signChangeIndex]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:guessX:double+double[]+double[]+int+int#[ForStatement(for), int, i, start, i, end, 1, i, VariableDeclarationStatement(), final, int, delta, i, 1, start, ForStatement(for), int, j, end, 1, j, i, j, ExpressionStatement(), x, j, x, j, x, j, 1, y, j, y, j, delta, VariableDeclarationStatement(), double, x0, 0, ForStatement(for), int, j, end, 1, j, start, j, ExpressionStatement(), x0, x, j, x0, targetY, y, j, ReturnStatement(return), x0]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:solve:int+UnivariateFunction+double+double+AllowedSolution#[ExpressionStatement(), this, allowed, allowedSolution, ReturnStatement(return), super, solve, maxEval, f, min, max]
org.apache.commons.math4.analysis.solvers:BracketingNthOrderBrentSolver:solve:int+UnivariateFunction+double+double+double+AllowedSolution#[ExpressionStatement(), this, allowed, allowedSolution, ReturnStatement(return), super, solve, maxEval, f, min, max, startValue]
org.apache.commons.math4.analysis.solvers:BrentSolver:doSolve:null#[VariableDeclarationStatement(), double, min, getMin, VariableDeclarationStatement(), double, max, getMax, VariableDeclarationStatement(), final, double, initial, getStartValue, VariableDeclarationStatement(), final, double, functionValueAccuracy, getFunctionValueAccuracy, ExpressionStatement(), verifySequence, min, initial, max, VariableDeclarationStatement(), double, yInitial, computeObjectiveValue, initial, IfStatement(if), FastMath, abs, yInitial, functionValueAccuracy, ReturnStatement(return), initial, VariableDeclarationStatement(), double, yMin, computeObjectiveValue, min, IfStatement(if), FastMath, abs, yMin, functionValueAccuracy, ReturnStatement(return), min, IfStatement(if), yInitial, yMin, 0, ReturnStatement(return), brent, min, initial, yMin, yInitial, VariableDeclarationStatement(), double, yMax, computeObjectiveValue, max, IfStatement(if), FastMath, abs, yMax, functionValueAccuracy, ReturnStatement(return), max, IfStatement(if), yInitial, yMax, 0, ReturnStatement(return), brent, initial, max, yInitial, yMax, ThrowStatement(throw), new, NoBracketingException, min, max, yMin, yMax]
org.apache.commons.math4.analysis.solvers:BrentSolver:brent:double+double+double+double#[VariableDeclarationStatement(), double, a, lo, VariableDeclarationStatement(), double, fa, fLo, VariableDeclarationStatement(), double, b, hi, VariableDeclarationStatement(), double, fb, fHi, VariableDeclarationStatement(), double, c, a, VariableDeclarationStatement(), double, fc, fa, VariableDeclarationStatement(), double, d, b, a, VariableDeclarationStatement(), double, e, d, VariableDeclarationStatement(), final, double, t, getAbsoluteAccuracy, VariableDeclarationStatement(), final, double, eps, getRelativeAccuracy, WhileStatement(while), true, IfStatement(if), FastMath, abs, fc, FastMath, abs, fb, ExpressionStatement(), a, b, ExpressionStatement(), b, c, ExpressionStatement(), c, a, ExpressionStatement(), fa, fb, ExpressionStatement(), fb, fc, ExpressionStatement(), fc, fa, VariableDeclarationStatement(), final, double, tol, 2, eps, FastMath, abs, b, t, VariableDeclarationStatement(), final, double, m, 0.5, c, b, IfStatement(if), FastMath, abs, m, tol, Precision, equals, fb, 0, ReturnStatement(return), b, IfStatement(if), FastMath, abs, e, tol, FastMath, abs, fa, FastMath, abs, fb, ExpressionStatement(), d, m, ExpressionStatement(), e, d, VariableDeclarationStatement(), double, s, fb, fa, VariableDeclarationStatement(), double, p, VariableDeclarationStatement(), double, q, IfStatement(if), a, c, ExpressionStatement(), p, 2, m, s, ExpressionStatement(), q, 1, s, ExpressionStatement(), q, fa, fc, VariableDeclarationStatement(), final, double, r, fb, fc, ExpressionStatement(), p, s, 2, m, q, q, r, b, a, r, 1, ExpressionStatement(), q, q, 1, r, 1, s, 1, IfStatement(if), p, 0, ExpressionStatement(), q, q, ExpressionStatement(), p, p, ExpressionStatement(), s, e, ExpressionStatement(), e, d, IfStatement(if), p, 1.5, m, q, FastMath, abs, tol, q, p, FastMath, abs, 0.5, s, q, ExpressionStatement(), d, m, ExpressionStatement(), e, d, ExpressionStatement(), d, p, q, ExpressionStatement(), a, b, ExpressionStatement(), fa, fb, IfStatement(if), FastMath, abs, d, tol, ExpressionStatement(), b, d, IfStatement(if), m, 0, ExpressionStatement(), b, tol, ExpressionStatement(), b, tol, ExpressionStatement(), fb, computeObjectiveValue, b, IfStatement(if), fb, 0, fc, 0, fb, 0, fc, 0, ExpressionStatement(), c, a, ExpressionStatement(), fc, fa, ExpressionStatement(), d, b, a, ExpressionStatement(), e, d]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getMaximalOrder:null#[ReturnStatement(return), maximalOrder]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getMaxEvaluations:null#[ReturnStatement(return), evaluations, getMaximalCount]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getEvaluations:null#[ReturnStatement(return), evaluations, getCount]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getAbsoluteAccuracy:null#[ReturnStatement(return), absoluteAccuracy]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getRelativeAccuracy:null#[ReturnStatement(return), relativeAccuracy]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:getFunctionValueAccuracy:null#[ReturnStatement(return), functionValueAccuracy]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:solve:int+RealFieldUnivariateFunction<T>+T+T+AllowedSolution#[ReturnStatement(return), solve, maxEval, f, min, max, min, add, max, divide, 2, allowedSolution]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:solve:int+RealFieldUnivariateFunction<T>+T+T+T+AllowedSolution#[ExpressionStatement(), MathUtils, checkNotNull, f, ExpressionStatement(), evaluations, evaluations, withMaximalCount, maxEval, withStart, 0, VariableDeclarationStatement(), T, zero, field, getZero, VariableDeclarationStatement(), T, nan, zero, add, Double.NaN, VariableDeclarationStatement(), final, T, x, MathArrays, buildArray, field, maximalOrder, 1, VariableDeclarationStatement(), final, T, y, MathArrays, buildArray, field, maximalOrder, 1, ExpressionStatement(), x, 0, min, ExpressionStatement(), x, 1, startValue, ExpressionStatement(), x, 2, max, ExpressionStatement(), evaluations, increment, ExpressionStatement(), y, 1, f, value, x, 1, IfStatement(if), Precision, equals, y, 1, getReal, 0.0, 1, ReturnStatement(return), x, 1, ExpressionStatement(), evaluations, increment, ExpressionStatement(), y, 0, f, value, x, 0, IfStatement(if), Precision, equals, y, 0, getReal, 0.0, 1, ReturnStatement(return), x, 0, VariableDeclarationStatement(), int, nbPoints, VariableDeclarationStatement(), int, signChangeIndex, IfStatement(if), y, 0, multiply, y, 1, getReal, 0, ExpressionStatement(), nbPoints, 2, ExpressionStatement(), signChangeIndex, 1, ExpressionStatement(), evaluations, increment, ExpressionStatement(), y, 2, f, value, x, 2, IfStatement(if), Precision, equals, y, 2, getReal, 0.0, 1, ReturnStatement(return), x, 2, IfStatement(if), y, 1, multiply, y, 2, getReal, 0, ExpressionStatement(), nbPoints, 3, ExpressionStatement(), signChangeIndex, 2, ThrowStatement(throw), new, NoBracketingException, x, 0, getReal, x, 2, getReal, y, 0, getReal, y, 2, getReal, VariableDeclarationStatement(), final, T, tmpX, MathArrays, buildArray, field, x.length, VariableDeclarationStatement(), T, xA, x, signChangeIndex, 1, VariableDeclarationStatement(), T, yA, y, signChangeIndex, 1, VariableDeclarationStatement(), T, absXA, xA, abs, VariableDeclarationStatement(), T, absYA, yA, abs, VariableDeclarationStatement(), int, agingA, 0, VariableDeclarationStatement(), T, xB, x, signChangeIndex, VariableDeclarationStatement(), T, yB, y, signChangeIndex, VariableDeclarationStatement(), T, absXB, xB, abs, VariableDeclarationStatement(), T, absYB, yB, abs, VariableDeclarationStatement(), int, agingB, 0, WhileStatement(while), true, VariableDeclarationStatement(), T, maxX, absXA, subtract, absXB, getReal, 0, absXB, absXA, VariableDeclarationStatement(), T, maxY, absYA, subtract, absYB, getReal, 0, absYB, absYA, VariableDeclarationStatement(), final, T, xTol, absoluteAccuracy, add, relativeAccuracy, multiply, maxX, IfStatement(if), xB, subtract, xA, subtract, xTol, getReal, 0, maxY, subtract, functionValueAccuracy, getReal, 0, SwitchStatement(switch), allowedSolution, SwitchCase(case), ANY_SIDE, ReturnStatement(return), absYA, subtract, absYB, getReal, 0, xA, xB, SwitchCase(case), LEFT_SIDE, ReturnStatement(return), xA, SwitchCase(case), RIGHT_SIDE, ReturnStatement(return), xB, SwitchCase(case), BELOW_SIDE, ReturnStatement(return), yA, getReal, 0, xA, xB, SwitchCase(case), ABOVE_SIDE, ReturnStatement(return), yA, getReal, 0, xB, xA, SwitchCase(default), ThrowStatement(throw), new, MathInternalError, null, VariableDeclarationStatement(), T, targetY, IfStatement(if), agingA, MAXIMAL_AGING, ExpressionStatement(), targetY, yB, divide, 16, negate, IfStatement(if), agingB, MAXIMAL_AGING, ExpressionStatement(), targetY, yA, divide, 16, negate, ExpressionStatement(), targetY, zero, VariableDeclarationStatement(), T, nextX, VariableDeclarationStatement(), int, start, 0, VariableDeclarationStatement(), int, end, nbPoints, DoStatement(do), ExpressionStatement(), System, arraycopy, x, start, tmpX, start, end, start, ExpressionStatement(), nextX, guessX, targetY, tmpX, y, start, end, IfStatement(if), nextX, subtract, xA, getReal, 0, nextX, subtract, xB, getReal, 0, IfStatement(if), signChangeIndex, start, end, signChangeIndex, ExpressionStatement(), start, ExpressionStatement(), end, ExpressionStatement(), nextX, nan, Double, isNaN, nextX, getReal, end, start, 1, IfStatement(if), Double, isNaN, nextX, getReal, ExpressionStatement(), nextX, xA, add, xB, subtract, xA, divide, 2, ExpressionStatement(), start, signChangeIndex, 1, ExpressionStatement(), end, signChangeIndex, ExpressionStatement(), evaluations, increment, VariableDeclarationStatement(), final, T, nextY, f, value, nextX, IfStatement(if), Precision, equals, nextY, getReal, 0.0, 1, ReturnStatement(return), nextX, IfStatement(if), nbPoints, 2, end, start, nbPoints, ExpressionStatement(), nbPoints, end, start, ExpressionStatement(), System, arraycopy, x, start, x, 0, nbPoints, ExpressionStatement(), System, arraycopy, y, start, y, 0, nbPoints, ExpressionStatement(), signChangeIndex, start, IfStatement(if), nbPoints, x.length, ExpressionStatement(), nbPoints, IfStatement(if), signChangeIndex, x.length, 1, 2, ExpressionStatement(), System, arraycopy, x, 1, x, 0, nbPoints, ExpressionStatement(), System, arraycopy, y, 1, y, 0, nbPoints, ExpressionStatement(), signChangeIndex, ExpressionStatement(), System, arraycopy, x, signChangeIndex, x, signChangeIndex, 1, nbPoints, signChangeIndex, ExpressionStatement(), x, signChangeIndex, nextX, ExpressionStatement(), System, arraycopy, y, signChangeIndex, y, signChangeIndex, 1, nbPoints, signChangeIndex, ExpressionStatement(), y, signChangeIndex, nextY, ExpressionStatement(), nbPoints, IfStatement(if), nextY, multiply, yA, getReal, 0, ExpressionStatement(), xB, nextX, ExpressionStatement(), yB, nextY, ExpressionStatement(), absYB, yB, abs, ExpressionStatement(), agingA, ExpressionStatement(), agingB, 0, ExpressionStatement(), xA, nextX, ExpressionStatement(), yA, nextY, ExpressionStatement(), absYA, yA, abs, ExpressionStatement(), agingA, 0, ExpressionStatement(), agingB, ExpressionStatement(), signChangeIndex]
org.apache.commons.math4.analysis.solvers:FieldBracketingNthOrderBrentSolver:guessX:T+T[]+T[]+int+int#[ForStatement(for), int, i, start, i, end, 1, i, VariableDeclarationStatement(), final, int, delta, i, 1, start, ForStatement(for), int, j, end, 1, j, i, j, ExpressionStatement(), x, j, x, j, subtract, x, j, 1, divide, y, j, subtract, y, j, delta, VariableDeclarationStatement(), T, x0, field, getZero, ForStatement(for), int, j, end, 1, j, start, j, ExpressionStatement(), x0, x, j, add, x0, multiply, targetY, subtract, y, j, ReturnStatement(return), x0]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:doSolve:null#[VariableDeclarationStatement(), final, double, min, getMin, VariableDeclarationStatement(), final, double, max, getMax, VariableDeclarationStatement(), final, double, initial, getStartValue, VariableDeclarationStatement(), final, double, functionValueAccuracy, getFunctionValueAccuracy, ExpressionStatement(), verifySequence, min, initial, max, VariableDeclarationStatement(), final, double, yInitial, computeObjectiveValue, initial, IfStatement(if), FastMath, abs, yInitial, functionValueAccuracy, ReturnStatement(return), initial, VariableDeclarationStatement(), final, double, yMin, computeObjectiveValue, min, IfStatement(if), FastMath, abs, yMin, functionValueAccuracy, ReturnStatement(return), min, IfStatement(if), yInitial, yMin, 0, ReturnStatement(return), laguerre, min, initial, VariableDeclarationStatement(), final, double, yMax, computeObjectiveValue, max, IfStatement(if), FastMath, abs, yMax, functionValueAccuracy, ReturnStatement(return), max, IfStatement(if), yInitial, yMax, 0, ReturnStatement(return), laguerre, initial, max, ThrowStatement(throw), new, NoBracketingException, min, max, yMin, yMax]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:laguerre:double+double#[VariableDeclarationStatement(), final, Complex, c, ComplexUtils, convertToComplex, getCoefficients, VariableDeclarationStatement(), final, Complex, initial, new, Complex, 0.5, lo, hi, 0, VariableDeclarationStatement(), final, Complex, z, complexSolver, solve, c, initial, IfStatement(if), complexSolver, isRoot, lo, hi, z, ReturnStatement(return), z, getReal, VariableDeclarationStatement(), double, r, Double.NaN, VariableDeclarationStatement(), Complex, root, complexSolver, solveAll, c, initial, ForStatement(for), int, i, 0, i, root.length, i, IfStatement(if), complexSolver, isRoot, lo, hi, root, i, ExpressionStatement(), r, root, i, getReal, BreakStatement(break), ReturnStatement(return), r]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:solveAllComplex:double[]+double#[ExpressionStatement(), setup, Integer.MAX_VALUE, new, PolynomialFunction, coefficients, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, initial, ReturnStatement(return), complexSolver, solveAll, ComplexUtils, convertToComplex, coefficients, new, Complex, initial, 0d]
org.apache.commons.math4.analysis.solvers:LaguerreSolver:solveComplex:double[]+double#[ExpressionStatement(), setup, Integer.MAX_VALUE, new, PolynomialFunction, coefficients, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, initial, ReturnStatement(return), complexSolver, solve, ComplexUtils, convertToComplex, coefficients, new, Complex, initial, 0d]
org.apache.commons.math4.analysis.solvers:MullerSolver:doSolve:null#[VariableDeclarationStatement(), final, double, min, getMin, VariableDeclarationStatement(), final, double, max, getMax, VariableDeclarationStatement(), final, double, initial, getStartValue, VariableDeclarationStatement(), final, double, functionValueAccuracy, getFunctionValueAccuracy, ExpressionStatement(), verifySequence, min, initial, max, VariableDeclarationStatement(), final, double, fMin, computeObjectiveValue, min, IfStatement(if), FastMath, abs, fMin, functionValueAccuracy, ReturnStatement(return), min, VariableDeclarationStatement(), final, double, fMax, computeObjectiveValue, max, IfStatement(if), FastMath, abs, fMax, functionValueAccuracy, ReturnStatement(return), max, VariableDeclarationStatement(), final, double, fInitial, computeObjectiveValue, initial, IfStatement(if), FastMath, abs, fInitial, functionValueAccuracy, ReturnStatement(return), initial, ExpressionStatement(), verifyBracketing, min, max, IfStatement(if), isBracketing, min, initial, ReturnStatement(return), solve, min, initial, fMin, fInitial, ReturnStatement(return), solve, initial, max, fInitial, fMax]
org.apache.commons.math4.analysis.solvers:MullerSolver:solve:double+double+double+double#[VariableDeclarationStatement(), final, double, relativeAccuracy, getRelativeAccuracy, VariableDeclarationStatement(), final, double, absoluteAccuracy, getAbsoluteAccuracy, VariableDeclarationStatement(), final, double, functionValueAccuracy, getFunctionValueAccuracy, VariableDeclarationStatement(), double, x0, min, VariableDeclarationStatement(), double, y0, fMin, VariableDeclarationStatement(), double, x2, max, VariableDeclarationStatement(), double, y2, fMax, VariableDeclarationStatement(), double, x1, 0.5, x0, x2, VariableDeclarationStatement(), double, y1, computeObjectiveValue, x1, VariableDeclarationStatement(), double, oldx, Double.POSITIVE_INFINITY, WhileStatement(while), true, VariableDeclarationStatement(), final, double, d01, y1, y0, x1, x0, VariableDeclarationStatement(), final, double, d12, y2, y1, x2, x1, VariableDeclarationStatement(), final, double, d012, d12, d01, x2, x0, VariableDeclarationStatement(), final, double, c1, d01, x1, x0, d012, VariableDeclarationStatement(), final, double, delta, c1, c1, 4, y1, d012, VariableDeclarationStatement(), final, double, xplus, x1, 2.0, y1, c1, FastMath, sqrt, delta, VariableDeclarationStatement(), final, double, xminus, x1, 2.0, y1, c1, FastMath, sqrt, delta, VariableDeclarationStatement(), final, double, x, isSequence, x0, xplus, x2, xplus, xminus, VariableDeclarationStatement(), final, double, y, computeObjectiveValue, x, VariableDeclarationStatement(), final, double, tolerance, FastMath, max, relativeAccuracy, FastMath, abs, x, absoluteAccuracy, IfStatement(if), FastMath, abs, x, oldx, tolerance, FastMath, abs, y, functionValueAccuracy, ReturnStatement(return), x, VariableDeclarationStatement(), boolean, bisect, x, x1, x1, x0, 0.95, x2, x0, x, x1, x2, x1, 0.95, x2, x0, x, x1, IfStatement(if), bisect, ExpressionStatement(), x0, x, x1, x0, x1, ExpressionStatement(), y0, x, x1, y0, y1, ExpressionStatement(), x2, x, x1, x2, x1, ExpressionStatement(), y2, x, x1, y2, y1, ExpressionStatement(), x1, x, ExpressionStatement(), y1, y, ExpressionStatement(), oldx, x, VariableDeclarationStatement(), double, xm, 0.5, x0, x2, VariableDeclarationStatement(), double, ym, computeObjectiveValue, xm, IfStatement(if), FastMath, signum, y0, FastMath, signum, ym, 0.0, ExpressionStatement(), x2, xm, ExpressionStatement(), y2, ym, ExpressionStatement(), x0, xm, ExpressionStatement(), y0, ym, ExpressionStatement(), x1, 0.5, x0, x2, ExpressionStatement(), y1, computeObjectiveValue, x1, ExpressionStatement(), oldx, Double.POSITIVE_INFINITY]
org.apache.commons.math4.analysis.solvers:MullerSolver2:doSolve:null#[VariableDeclarationStatement(), final, double, min, getMin, VariableDeclarationStatement(), final, double, max, getMax, ExpressionStatement(), verifyInterval, min, max, VariableDeclarationStatement(), final, double, relativeAccuracy, getRelativeAccuracy, VariableDeclarationStatement(), final, double, absoluteAccuracy, getAbsoluteAccuracy, VariableDeclarationStatement(), final, double, functionValueAccuracy, getFunctionValueAccuracy, VariableDeclarationStatement(), double, x0, min, VariableDeclarationStatement(), double, y0, computeObjectiveValue, x0, IfStatement(if), FastMath, abs, y0, functionValueAccuracy, ReturnStatement(return), x0, VariableDeclarationStatement(), double, x1, max, VariableDeclarationStatement(), double, y1, computeObjectiveValue, x1, IfStatement(if), FastMath, abs, y1, functionValueAccuracy, ReturnStatement(return), x1, IfStatement(if), y0, y1, 0, ThrowStatement(throw), new, NoBracketingException, x0, x1, y0, y1, VariableDeclarationStatement(), double, x2, 0.5, x0, x1, VariableDeclarationStatement(), double, y2, computeObjectiveValue, x2, VariableDeclarationStatement(), double, oldx, Double.POSITIVE_INFINITY, WhileStatement(while), true, VariableDeclarationStatement(), final, double, q, x2, x1, x1, x0, VariableDeclarationStatement(), final, double, a, q, y2, 1, q, y1, q, y0, VariableDeclarationStatement(), final, double, b, 2, q, 1, y2, 1, q, 1, q, y1, q, q, y0, VariableDeclarationStatement(), final, double, c, 1, q, y2, VariableDeclarationStatement(), final, double, delta, b, b, 4, a, c, VariableDeclarationStatement(), double, x, VariableDeclarationStatement(), final, double, denominator, IfStatement(if), delta, 0.0, VariableDeclarationStatement(), double, dplus, b, FastMath, sqrt, delta, VariableDeclarationStatement(), double, dminus, b, FastMath, sqrt, delta, ExpressionStatement(), denominator, FastMath, abs, dplus, FastMath, abs, dminus, dplus, dminus, ExpressionStatement(), denominator, FastMath, sqrt, b, b, delta, IfStatement(if), denominator, 0, ExpressionStatement(), x, x2, 2.0, c, x2, x1, denominator, WhileStatement(while), x, x1, x, x2, ExpressionStatement(), x, absoluteAccuracy, ExpressionStatement(), x, min, FastMath, random, max, min, ExpressionStatement(), oldx, Double.POSITIVE_INFINITY, VariableDeclarationStatement(), final, double, y, computeObjectiveValue, x, VariableDeclarationStatement(), final, double, tolerance, FastMath, max, relativeAccuracy, FastMath, abs, x, absoluteAccuracy, IfStatement(if), FastMath, abs, x, oldx, tolerance, FastMath, abs, y, functionValueAccuracy, ReturnStatement(return), x, ExpressionStatement(), x0, x1, ExpressionStatement(), y0, y1, ExpressionStatement(), x1, x2, ExpressionStatement(), y1, y2, ExpressionStatement(), x2, x, ExpressionStatement(), y2, y, ExpressionStatement(), oldx, x]
org.apache.commons.math4.analysis.solvers:NewtonRaphsonSolver:solve:int+UnivariateDifferentiableFunction+double+double#[ReturnStatement(return), super, solve, maxEval, f, UnivariateSolverUtils, midpoint, min, max]
org.apache.commons.math4.analysis.solvers:NewtonRaphsonSolver:doSolve:null#[VariableDeclarationStatement(), final, double, startValue, getStartValue, VariableDeclarationStatement(), final, double, absoluteAccuracy, getAbsoluteAccuracy, VariableDeclarationStatement(), double, x0, startValue, VariableDeclarationStatement(), double, x1, WhileStatement(while), true, VariableDeclarationStatement(), final, DerivativeStructure, y0, computeObjectiveValueAndDerivative, x0, ExpressionStatement(), x1, x0, y0, getValue, y0, getPartialDerivative, 1, IfStatement(if), FastMath, abs, x1, x0, absoluteAccuracy, ReturnStatement(return), x1, ExpressionStatement(), x0, x1]
org.apache.commons.math4.analysis.solvers:RiddersSolver:doSolve:null#[VariableDeclarationStatement(), double, min, getMin, VariableDeclarationStatement(), double, max, getMax, VariableDeclarationStatement(), double, x1, min, VariableDeclarationStatement(), double, y1, computeObjectiveValue, x1, VariableDeclarationStatement(), double, x2, max, VariableDeclarationStatement(), double, y2, computeObjectiveValue, x2, IfStatement(if), y1, 0, ReturnStatement(return), min, IfStatement(if), y2, 0, ReturnStatement(return), max, ExpressionStatement(), verifyBracketing, min, max, VariableDeclarationStatement(), final, double, absoluteAccuracy, getAbsoluteAccuracy, VariableDeclarationStatement(), final, double, functionValueAccuracy, getFunctionValueAccuracy, VariableDeclarationStatement(), final, double, relativeAccuracy, getRelativeAccuracy, VariableDeclarationStatement(), double, oldx, Double.POSITIVE_INFINITY, WhileStatement(while), true, VariableDeclarationStatement(), final, double, x3, 0.5, x1, x2, VariableDeclarationStatement(), final, double, y3, computeObjectiveValue, x3, IfStatement(if), FastMath, abs, y3, functionValueAccuracy, ReturnStatement(return), x3, VariableDeclarationStatement(), final, double, delta, 1, y1, y2, y3, y3, VariableDeclarationStatement(), final, double, correction, FastMath, signum, y2, FastMath, signum, y3, x3, x1, FastMath, sqrt, delta, VariableDeclarationStatement(), final, double, x, x3, correction, VariableDeclarationStatement(), final, double, y, computeObjectiveValue, x, VariableDeclarationStatement(), final, double, tolerance, FastMath, max, relativeAccuracy, FastMath, abs, x, absoluteAccuracy, IfStatement(if), FastMath, abs, x, oldx, tolerance, ReturnStatement(return), x, IfStatement(if), FastMath, abs, y, functionValueAccuracy, ReturnStatement(return), x, IfStatement(if), correction, 0.0, IfStatement(if), FastMath, signum, y1, FastMath, signum, y, 0.0, ExpressionStatement(), x2, x, ExpressionStatement(), y2, y, ExpressionStatement(), x1, x, ExpressionStatement(), x2, x3, ExpressionStatement(), y1, y, ExpressionStatement(), y2, y3, IfStatement(if), FastMath, signum, y2, FastMath, signum, y, 0.0, ExpressionStatement(), x1, x, ExpressionStatement(), y1, y, ExpressionStatement(), x1, x3, ExpressionStatement(), x2, x, ExpressionStatement(), y1, y3, ExpressionStatement(), y2, y, ExpressionStatement(), oldx, x]
org.apache.commons.math4.analysis.solvers:SecantSolver:doSolve:null#[VariableDeclarationStatement(), double, x0, getMin, VariableDeclarationStatement(), double, x1, getMax, VariableDeclarationStatement(), double, f0, computeObjectiveValue, x0, VariableDeclarationStatement(), double, f1, computeObjectiveValue, x1, IfStatement(if), f0, 0.0, ReturnStatement(return), x0, IfStatement(if), f1, 0.0, ReturnStatement(return), x1, ExpressionStatement(), verifyBracketing, x0, x1, VariableDeclarationStatement(), final, double, ftol, getFunctionValueAccuracy, VariableDeclarationStatement(), final, double, atol, getAbsoluteAccuracy, VariableDeclarationStatement(), final, double, rtol, getRelativeAccuracy, WhileStatement(while), true, VariableDeclarationStatement(), final, double, x, x1, f1, x1, x0, f1, f0, VariableDeclarationStatement(), final, double, fx, computeObjectiveValue, x, IfStatement(if), fx, 0.0, ReturnStatement(return), x, ExpressionStatement(), x0, x1, ExpressionStatement(), f0, f1, ExpressionStatement(), x1, x, ExpressionStatement(), f1, fx, IfStatement(if), FastMath, abs, f1, ftol, ReturnStatement(return), x1, IfStatement(if), FastMath, abs, x1, x0, FastMath, max, rtol, FastMath, abs, x1, atol, ReturnStatement(return), x1]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:solve:UnivariateFunction+double+double#[IfStatement(if), function, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FUNCTION, VariableDeclarationStatement(), final, UnivariateSolver, solver, new, BrentSolver, ReturnStatement(return), solver, solve, Integer.MAX_VALUE, function, x0, x1]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:solve:UnivariateFunction+double+double+double#[IfStatement(if), function, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FUNCTION, VariableDeclarationStatement(), final, UnivariateSolver, solver, new, BrentSolver, absoluteAccuracy, ReturnStatement(return), solver, solve, Integer.MAX_VALUE, function, x0, x1]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:forceSide:int+UnivariateFunction+BracketedUnivariateSolver<UnivariateFunction>+double+double+double+AllowedSolution#[IfStatement(if), allowedSolution, AllowedSolution.ANY_SIDE, ReturnStatement(return), baseRoot, VariableDeclarationStatement(), final, double, step, FastMath, max, bracketing, getAbsoluteAccuracy, FastMath, abs, baseRoot, bracketing, getRelativeAccuracy, VariableDeclarationStatement(), double, xLo, FastMath, max, min, baseRoot, step, VariableDeclarationStatement(), double, fLo, f, value, xLo, VariableDeclarationStatement(), double, xHi, FastMath, min, max, baseRoot, step, VariableDeclarationStatement(), double, fHi, f, value, xHi, VariableDeclarationStatement(), int, remainingEval, maxEval, 2, WhileStatement(while), remainingEval, 0, IfStatement(if), fLo, 0, fHi, 0, fLo, 0, fHi, 0, ReturnStatement(return), bracketing, solve, remainingEval, f, xLo, xHi, baseRoot, allowedSolution, VariableDeclarationStatement(), boolean, changeLo, false, VariableDeclarationStatement(), boolean, changeHi, false, IfStatement(if), fLo, fHi, IfStatement(if), fLo, 0, ExpressionStatement(), changeLo, true, ExpressionStatement(), changeHi, true, IfStatement(if), fLo, fHi, IfStatement(if), fLo, 0, ExpressionStatement(), changeLo, true, ExpressionStatement(), changeHi, true, ExpressionStatement(), changeLo, true, ExpressionStatement(), changeHi, true, IfStatement(if), changeLo, ExpressionStatement(), xLo, FastMath, max, min, xLo, step, ExpressionStatement(), fLo, f, value, xLo, ExpressionStatement(), remainingEval, IfStatement(if), changeHi, ExpressionStatement(), xHi, FastMath, min, max, xHi, step, ExpressionStatement(), fHi, f, value, xHi, ExpressionStatement(), remainingEval, ThrowStatement(throw), new, NoBracketingException, LocalizedFormats.FAILED_BRACKETING, xLo, xHi, fLo, fHi, maxEval, remainingEval, maxEval, baseRoot, min, max]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:bracket:UnivariateFunction+double+double+double#[ReturnStatement(return), bracket, function, initial, lowerBound, upperBound, 1.0, 1.0, Integer.MAX_VALUE]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:bracket:UnivariateFunction+double+double+double+int#[ReturnStatement(return), bracket, function, initial, lowerBound, upperBound, 1.0, 1.0, maximumIterations]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:bracket:UnivariateFunction+double+double+double+double+double+int#[IfStatement(if), function, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FUNCTION, IfStatement(if), q, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, q, IfStatement(if), maximumIterations, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations, ExpressionStatement(), verifySequence, lowerBound, initial, upperBound, VariableDeclarationStatement(), double, a, initial, VariableDeclarationStatement(), double, b, initial, VariableDeclarationStatement(), double, fa, Double.NaN, VariableDeclarationStatement(), double, fb, Double.NaN, VariableDeclarationStatement(), double, delta, 0, ForStatement(for), int, numIterations, 0, numIterations, maximumIterations, a, lowerBound, b, upperBound, numIterations, VariableDeclarationStatement(), final, double, previousA, a, VariableDeclarationStatement(), final, double, previousFa, fa, VariableDeclarationStatement(), final, double, previousB, b, VariableDeclarationStatement(), final, double, previousFb, fb, ExpressionStatement(), delta, r, delta, q, ExpressionStatement(), a, FastMath, max, initial, delta, lowerBound, ExpressionStatement(), b, FastMath, min, initial, delta, upperBound, ExpressionStatement(), fa, function, value, a, ExpressionStatement(), fb, function, value, b, IfStatement(if), numIterations, 0, IfStatement(if), fa, fb, 0, ReturnStatement(return), double, a, b, IfStatement(if), fa, previousFa, 0, ReturnStatement(return), double, a, previousA, IfStatement(if), fb, previousFb, 0, ReturnStatement(return), double, previousB, b, ThrowStatement(throw), new, NoBracketingException, a, b, fa, fb]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:midpoint:double+double#[ReturnStatement(return), a, b, 0.5]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:isBracketing:UnivariateFunction+double+double#[IfStatement(if), function, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FUNCTION, VariableDeclarationStatement(), final, double, fLo, function, value, lower, VariableDeclarationStatement(), final, double, fHi, function, value, upper, ReturnStatement(return), fLo, 0, fHi, 0, fLo, 0, fHi, 0]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:isSequence:double+double+double#[ReturnStatement(return), start, mid, mid, end]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:verifyInterval:double+double#[IfStatement(if), lower, upper, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper, false]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:verifySequence:double+double+double#[ExpressionStatement(), verifyInterval, lower, initial, ExpressionStatement(), verifyInterval, initial, upper]
org.apache.commons.math4.analysis.solvers:UnivariateSolverUtils:verifyBracketing:UnivariateFunction+double+double#[IfStatement(if), function, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FUNCTION, ExpressionStatement(), verifyInterval, lower, upper, IfStatement(if), isBracketing, function, lower, upper, ThrowStatement(throw), new, NoBracketingException, lower, upper, function, value, lower, function, value, upper]
org.apache.commons.math4.complex:Complex:abs:null#[IfStatement(if), isNaN, ReturnStatement(return), Double.NaN, IfStatement(if), isInfinite, ReturnStatement(return), Double.POSITIVE_INFINITY, IfStatement(if), FastMath, abs, real, FastMath, abs, imaginary, IfStatement(if), imaginary, 0.0, ReturnStatement(return), FastMath, abs, real, VariableDeclarationStatement(), double, q, real, imaginary, ReturnStatement(return), FastMath, abs, imaginary, FastMath, sqrt, 1, q, q, IfStatement(if), real, 0.0, ReturnStatement(return), FastMath, abs, imaginary, VariableDeclarationStatement(), double, q, imaginary, real, ReturnStatement(return), FastMath, abs, real, FastMath, sqrt, 1, q, q]
org.apache.commons.math4.complex:Complex:add:Complex#[ExpressionStatement(), MathUtils, checkNotNull, addend, IfStatement(if), isNaN, addend.isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, real, addend, getReal, imaginary, addend, getImaginary]
org.apache.commons.math4.complex:Complex:add:double#[IfStatement(if), isNaN, Double, isNaN, addend, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, real, addend, imaginary]
org.apache.commons.math4.complex:Complex:conjugate:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, real, imaginary]
org.apache.commons.math4.complex:Complex:divide:Complex#[ExpressionStatement(), MathUtils, checkNotNull, divisor, IfStatement(if), isNaN, divisor.isNaN, ReturnStatement(return), NaN, VariableDeclarationStatement(), final, double, c, divisor, getReal, VariableDeclarationStatement(), final, double, d, divisor, getImaginary, IfStatement(if), c, 0.0, d, 0.0, ReturnStatement(return), NaN, IfStatement(if), divisor, isInfinite, isInfinite, ReturnStatement(return), ZERO, IfStatement(if), FastMath, abs, c, FastMath, abs, d, VariableDeclarationStatement(), double, q, c, d, VariableDeclarationStatement(), double, denominator, c, q, d, ReturnStatement(return), createComplex, real, q, imaginary, denominator, imaginary, q, real, denominator, VariableDeclarationStatement(), double, q, d, c, VariableDeclarationStatement(), double, denominator, d, q, c, ReturnStatement(return), createComplex, imaginary, q, real, denominator, imaginary, real, q, denominator]
org.apache.commons.math4.complex:Complex:divide:double#[IfStatement(if), isNaN, Double, isNaN, divisor, ReturnStatement(return), NaN, IfStatement(if), divisor, 0d, ReturnStatement(return), NaN, IfStatement(if), Double, isInfinite, divisor, ReturnStatement(return), isInfinite, ZERO, NaN, ReturnStatement(return), createComplex, real, divisor, imaginary, divisor]
org.apache.commons.math4.complex:Complex:reciprocal:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, IfStatement(if), real, 0.0, imaginary, 0.0, ReturnStatement(return), INF, IfStatement(if), isInfinite, ReturnStatement(return), ZERO, IfStatement(if), FastMath, abs, real, FastMath, abs, imaginary, VariableDeclarationStatement(), double, q, real, imaginary, VariableDeclarationStatement(), double, scale, 1., real, q, imaginary, ReturnStatement(return), createComplex, scale, q, scale, VariableDeclarationStatement(), double, q, imaginary, real, VariableDeclarationStatement(), double, scale, 1., imaginary, q, real, ReturnStatement(return), createComplex, scale, scale, q]
org.apache.commons.math4.complex:Complex:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, Complex, VariableDeclarationStatement(), Complex, c, Complex, other, IfStatement(if), c.isNaN, ReturnStatement(return), isNaN, ReturnStatement(return), MathUtils, equals, real, c.real, MathUtils, equals, imaginary, c.imaginary, ReturnStatement(return), false]
org.apache.commons.math4.complex:Complex:equals:Complex+Complex+int#[ReturnStatement(return), Precision, equals, x.real, y.real, maxUlps, Precision, equals, x.imaginary, y.imaginary, maxUlps]
org.apache.commons.math4.complex:Complex:equals:Complex+Complex#[ReturnStatement(return), equals, x, y, 1]
org.apache.commons.math4.complex:Complex:equals:Complex+Complex+double#[ReturnStatement(return), Precision, equals, x.real, y.real, eps, Precision, equals, x.imaginary, y.imaginary, eps]
org.apache.commons.math4.complex:Complex:equalsWithRelativeTolerance:Complex+Complex+double#[ReturnStatement(return), Precision, equalsWithRelativeTolerance, x.real, y.real, eps, Precision, equalsWithRelativeTolerance, x.imaginary, y.imaginary, eps]
org.apache.commons.math4.complex:Complex:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 7, ReturnStatement(return), 37, 17, MathUtils, hash, imaginary, MathUtils, hash, real]
org.apache.commons.math4.complex:Complex:getImaginary:null#[ReturnStatement(return), imaginary]
org.apache.commons.math4.complex:Complex:getReal:null#[ReturnStatement(return), real]
org.apache.commons.math4.complex:Complex:isNaN:null#[ReturnStatement(return), isNaN]
org.apache.commons.math4.complex:Complex:isInfinite:null#[ReturnStatement(return), isInfinite]
org.apache.commons.math4.complex:Complex:multiply:Complex#[ExpressionStatement(), MathUtils, checkNotNull, factor, IfStatement(if), isNaN, factor.isNaN, ReturnStatement(return), NaN, IfStatement(if), Double, isInfinite, real, Double, isInfinite, imaginary, Double, isInfinite, factor.real, Double, isInfinite, factor.imaginary, ReturnStatement(return), INF, ReturnStatement(return), createComplex, real, factor.real, imaginary, factor.imaginary, real, factor.imaginary, imaginary, factor.real]
org.apache.commons.math4.complex:Complex:multiply:int#[IfStatement(if), isNaN, ReturnStatement(return), NaN, IfStatement(if), Double, isInfinite, real, Double, isInfinite, imaginary, ReturnStatement(return), INF, ReturnStatement(return), createComplex, real, factor, imaginary, factor]
org.apache.commons.math4.complex:Complex:multiply:double#[IfStatement(if), isNaN, Double, isNaN, factor, ReturnStatement(return), NaN, IfStatement(if), Double, isInfinite, real, Double, isInfinite, imaginary, Double, isInfinite, factor, ReturnStatement(return), INF, ReturnStatement(return), createComplex, real, factor, imaginary, factor]
org.apache.commons.math4.complex:Complex:negate:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, real, imaginary]
org.apache.commons.math4.complex:Complex:subtract:Complex#[ExpressionStatement(), MathUtils, checkNotNull, subtrahend, IfStatement(if), isNaN, subtrahend.isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, real, subtrahend, getReal, imaginary, subtrahend, getImaginary]
org.apache.commons.math4.complex:Complex:subtract:double#[IfStatement(if), isNaN, Double, isNaN, subtrahend, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, real, subtrahend, imaginary]
org.apache.commons.math4.complex:Complex:acos:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), this, add, this, sqrt1z, multiply, I, log, multiply, I, negate]
org.apache.commons.math4.complex:Complex:asin:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), sqrt1z, add, this, multiply, I, log, multiply, I, negate]
org.apache.commons.math4.complex:Complex:atan:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), this, add, I, divide, I, subtract, this, log, multiply, I, divide, createComplex, 2.0, 0.0]
org.apache.commons.math4.complex:Complex:cos:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, FastMath, cos, real, FastMath, cosh, imaginary, FastMath, sin, real, FastMath, sinh, imaginary]
org.apache.commons.math4.complex:Complex:cosh:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, FastMath, cosh, real, FastMath, cos, imaginary, FastMath, sinh, real, FastMath, sin, imaginary]
org.apache.commons.math4.complex:Complex:exp:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, VariableDeclarationStatement(), double, expReal, FastMath, exp, real, ReturnStatement(return), createComplex, expReal, FastMath, cos, imaginary, expReal, FastMath, sin, imaginary]
org.apache.commons.math4.complex:Complex:log:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, FastMath, log, abs, FastMath, atan2, imaginary, real]
org.apache.commons.math4.complex:Complex:pow:Complex#[ExpressionStatement(), MathUtils, checkNotNull, x, ReturnStatement(return), this, log, multiply, x, exp]
org.apache.commons.math4.complex:Complex:pow:double#[ReturnStatement(return), this, log, multiply, x, exp]
org.apache.commons.math4.complex:Complex:sin:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, FastMath, sin, real, FastMath, cosh, imaginary, FastMath, cos, real, FastMath, sinh, imaginary]
org.apache.commons.math4.complex:Complex:sinh:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, ReturnStatement(return), createComplex, FastMath, sinh, real, FastMath, cos, imaginary, FastMath, cosh, real, FastMath, sin, imaginary]
org.apache.commons.math4.complex:Complex:sqrt:null#[IfStatement(if), isNaN, ReturnStatement(return), NaN, IfStatement(if), real, 0.0, imaginary, 0.0, ReturnStatement(return), createComplex, 0.0, 0.0, VariableDeclarationStatement(), double, t, FastMath, sqrt, FastMath, abs, real, abs, 2.0, IfStatement(if), real, 0.0, ReturnStatement(return), createComplex, t, imaginary, 2.0, t, ReturnStatement(return), createComplex, FastMath, abs, imaginary, 2.0, t, FastMath, copySign, 1d, imaginary, t]
org.apache.commons.math4.complex:Complex:sqrt1z:null#[ReturnStatement(return), createComplex, 1.0, 0.0, subtract, this, multiply, this, sqrt]
org.apache.commons.math4.complex:Complex:tan:null#[IfStatement(if), isNaN, Double, isInfinite, real, ReturnStatement(return), NaN, IfStatement(if), imaginary, 20.0, ReturnStatement(return), createComplex, 0.0, 1.0, IfStatement(if), imaginary, 20.0, ReturnStatement(return), createComplex, 0.0, 1.0, VariableDeclarationStatement(), double, real2, 2.0, real, VariableDeclarationStatement(), double, imaginary2, 2.0, imaginary, VariableDeclarationStatement(), double, d, FastMath, cos, real2, FastMath, cosh, imaginary2, ReturnStatement(return), createComplex, FastMath, sin, real2, d, FastMath, sinh, imaginary2, d]
org.apache.commons.math4.complex:Complex:tanh:null#[IfStatement(if), isNaN, Double, isInfinite, imaginary, ReturnStatement(return), NaN, IfStatement(if), real, 20.0, ReturnStatement(return), createComplex, 1.0, 0.0, IfStatement(if), real, 20.0, ReturnStatement(return), createComplex, 1.0, 0.0, VariableDeclarationStatement(), double, real2, 2.0, real, VariableDeclarationStatement(), double, imaginary2, 2.0, imaginary, VariableDeclarationStatement(), double, d, FastMath, cosh, real2, FastMath, cos, imaginary2, ReturnStatement(return), createComplex, FastMath, sinh, real2, d, FastMath, sin, imaginary2, d]
org.apache.commons.math4.complex:Complex:getArgument:null#[ReturnStatement(return), FastMath, atan2, getImaginary, getReal]
org.apache.commons.math4.complex:Complex:nthRoot:int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n, VariableDeclarationStatement(), final, List, Complex, result, new, ArrayList, Complex, IfStatement(if), isNaN, ExpressionStatement(), result, add, NaN, ReturnStatement(return), result, IfStatement(if), isInfinite, ExpressionStatement(), result, add, INF, ReturnStatement(return), result, VariableDeclarationStatement(), final, double, nthRootOfAbs, FastMath, pow, abs, 1.0, n, VariableDeclarationStatement(), final, double, nthPhi, getArgument, n, VariableDeclarationStatement(), final, double, slice, 2, FastMath.PI, n, VariableDeclarationStatement(), double, innerPart, nthPhi, ForStatement(for), int, k, 0, k, n, k, VariableDeclarationStatement(), final, double, realPart, nthRootOfAbs, FastMath, cos, innerPart, VariableDeclarationStatement(), final, double, imaginaryPart, nthRootOfAbs, FastMath, sin, innerPart, ExpressionStatement(), result, add, createComplex, realPart, imaginaryPart, ExpressionStatement(), innerPart, slice, ReturnStatement(return), result]
org.apache.commons.math4.complex:Complex:createComplex:double+double#[ReturnStatement(return), new, Complex, realPart, imaginaryPart]
org.apache.commons.math4.complex:Complex:valueOf:double+double#[IfStatement(if), Double, isNaN, realPart, Double, isNaN, imaginaryPart, ReturnStatement(return), NaN, ReturnStatement(return), new, Complex, realPart, imaginaryPart]
org.apache.commons.math4.complex:Complex:valueOf:double#[IfStatement(if), Double, isNaN, realPart, ReturnStatement(return), NaN, ReturnStatement(return), new, Complex, realPart]
org.apache.commons.math4.complex:Complex:readResolve:null#[ReturnStatement(return), createComplex, real, imaginary]
org.apache.commons.math4.complex:Complex:getField:null#[ReturnStatement(return), ComplexField, getInstance]
org.apache.commons.math4.complex:Complex:toString:null#[ReturnStatement(return), "(", real, ", ", imaginary, ")"]
org.apache.commons.math4.complex:ComplexField:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.complex:ComplexField:getOne:null#[ReturnStatement(return), Complex.ONE]
org.apache.commons.math4.complex:ComplexField:getZero:null#[ReturnStatement(return), Complex.ZERO]
org.apache.commons.math4.complex:ComplexField:getRuntimeClass:null#[ReturnStatement(return), Complex]
org.apache.commons.math4.complex:ComplexField:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.complex:ComplexFormat:getAvailableLocales:null#[ReturnStatement(return), NumberFormat, getAvailableLocales]
org.apache.commons.math4.complex:ComplexFormat:format:Complex#[ReturnStatement(return), format, c, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.complex:ComplexFormat:format:Double#[ReturnStatement(return), format, new, Complex, c, 0, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.complex:ComplexFormat:format:Complex+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, VariableDeclarationStatement(), double, re, complex, getReal, ExpressionStatement(), CompositeFormat, formatDouble, re, getRealFormat, toAppendTo, pos, VariableDeclarationStatement(), double, im, complex, getImaginary, VariableDeclarationStatement(), StringBuffer, imAppendTo, IfStatement(if), im, 0.0, ExpressionStatement(), toAppendTo, append, " - ", ExpressionStatement(), imAppendTo, formatImaginary, im, new, StringBuffer, pos, ExpressionStatement(), toAppendTo, append, imAppendTo, ExpressionStatement(), toAppendTo, append, getImaginaryCharacter, IfStatement(if), im, 0.0, Double, isNaN, im, ExpressionStatement(), toAppendTo, append, " + ", ExpressionStatement(), imAppendTo, formatImaginary, im, new, StringBuffer, pos, ExpressionStatement(), toAppendTo, append, imAppendTo, ExpressionStatement(), toAppendTo, append, getImaginaryCharacter, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.complex:ComplexFormat:formatImaginary:double+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, ExpressionStatement(), CompositeFormat, formatDouble, absIm, getImaginaryFormat, toAppendTo, pos, IfStatement(if), toAppendTo, toString, equals, "1", ExpressionStatement(), toAppendTo, setLength, 0, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.complex:ComplexFormat:format:Object+StringBuffer+FieldPosition#[VariableDeclarationStatement(), StringBuffer, ret, null, IfStatement(if), instanceof, obj, Complex, ExpressionStatement(), ret, format, Complex, obj, toAppendTo, pos, IfStatement(if), instanceof, obj, Number, ExpressionStatement(), ret, format, new, Complex, Number, obj, doubleValue, 0.0, toAppendTo, pos, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX, obj, getClass, getName, ReturnStatement(return), ret]
org.apache.commons.math4.complex:ComplexFormat:getImaginaryCharacter:null#[ReturnStatement(return), imaginaryCharacter]
org.apache.commons.math4.complex:ComplexFormat:getImaginaryFormat:null#[ReturnStatement(return), imaginaryFormat]
org.apache.commons.math4.complex:ComplexFormat:getInstance:null#[ReturnStatement(return), getInstance, Locale, getDefault]
org.apache.commons.math4.complex:ComplexFormat:getInstance:Locale#[VariableDeclarationStatement(), NumberFormat, f, CompositeFormat, getDefaultNumberFormat, locale, ReturnStatement(return), new, ComplexFormat, f]
org.apache.commons.math4.complex:ComplexFormat:getInstance:String+Locale#[VariableDeclarationStatement(), NumberFormat, f, CompositeFormat, getDefaultNumberFormat, locale, ReturnStatement(return), new, ComplexFormat, imaginaryCharacter, f]
org.apache.commons.math4.complex:ComplexFormat:getRealFormat:null#[ReturnStatement(return), realFormat]
org.apache.commons.math4.complex:ComplexFormat:parse:String#[VariableDeclarationStatement(), ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), Complex, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, Complex, ReturnStatement(return), result]
org.apache.commons.math4.complex:ComplexFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), int, initialIndex, pos, getIndex, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, re, CompositeFormat, parseNumber, source, getRealFormat, pos, IfStatement(if), re, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), int, startIndex, pos, getIndex, VariableDeclarationStatement(), char, c, CompositeFormat, parseNextCharacter, source, pos, VariableDeclarationStatement(), int, sign, 0, SwitchStatement(switch), c, SwitchCase(case), 0, ReturnStatement(return), new, Complex, re, doubleValue, 0.0, SwitchCase(case), '-', ExpressionStatement(), sign, 1, BreakStatement(break), SwitchCase(case), '+', ExpressionStatement(), sign, 1, BreakStatement(break), SwitchCase(default), ExpressionStatement(), pos, setIndex, initialIndex, ExpressionStatement(), pos, setErrorIndex, startIndex, ReturnStatement(return), null, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, im, CompositeFormat, parseNumber, source, getRealFormat, pos, IfStatement(if), im, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, IfStatement(if), CompositeFormat, parseFixedstring, source, getImaginaryCharacter, pos, ReturnStatement(return), null, ReturnStatement(return), new, Complex, re, doubleValue, im, doubleValue, sign]
org.apache.commons.math4.complex:ComplexUtils:polar2Complex:double+double#[IfStatement(if), r, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NEGATIVE_COMPLEX_MODULE, r, ReturnStatement(return), new, Complex, r, FastMath, cos, theta, r, FastMath, sin, theta]
org.apache.commons.math4.complex:ComplexUtils:convertToComplex:double[]#[VariableDeclarationStatement(), final, Complex, c, Complex, real.length, ForStatement(for), int, i, 0, i, real.length, i, ExpressionStatement(), c, i, new, Complex, real, i, 0, ReturnStatement(return), c]
org.apache.commons.math4.complex:Quaternion:getConjugate:null#[ReturnStatement(return), new, Quaternion, q0, q1, q2, q3]
org.apache.commons.math4.complex:Quaternion:multiply:Quaternion+Quaternion#[VariableDeclarationStatement(), final, double, q1a, q1, getQ0, VariableDeclarationStatement(), final, double, q1b, q1, getQ1, VariableDeclarationStatement(), final, double, q1c, q1, getQ2, VariableDeclarationStatement(), final, double, q1d, q1, getQ3, VariableDeclarationStatement(), final, double, q2a, q2, getQ0, VariableDeclarationStatement(), final, double, q2b, q2, getQ1, VariableDeclarationStatement(), final, double, q2c, q2, getQ2, VariableDeclarationStatement(), final, double, q2d, q2, getQ3, VariableDeclarationStatement(), final, double, w, q1a, q2a, q1b, q2b, q1c, q2c, q1d, q2d, VariableDeclarationStatement(), final, double, x, q1a, q2b, q1b, q2a, q1c, q2d, q1d, q2c, VariableDeclarationStatement(), final, double, y, q1a, q2c, q1b, q2d, q1c, q2a, q1d, q2b, VariableDeclarationStatement(), final, double, z, q1a, q2d, q1b, q2c, q1c, q2b, q1d, q2a, ReturnStatement(return), new, Quaternion, w, x, y, z]
org.apache.commons.math4.complex:Quaternion:multiply:Quaternion#[ReturnStatement(return), multiply, this, q]
org.apache.commons.math4.complex:Quaternion:add:Quaternion+Quaternion#[ReturnStatement(return), new, Quaternion, q1, getQ0, q2, getQ0, q1, getQ1, q2, getQ1, q1, getQ2, q2, getQ2, q1, getQ3, q2, getQ3]
org.apache.commons.math4.complex:Quaternion:add:Quaternion#[ReturnStatement(return), add, this, q]
org.apache.commons.math4.complex:Quaternion:subtract:Quaternion+Quaternion#[ReturnStatement(return), new, Quaternion, q1, getQ0, q2, getQ0, q1, getQ1, q2, getQ1, q1, getQ2, q2, getQ2, q1, getQ3, q2, getQ3]
org.apache.commons.math4.complex:Quaternion:subtract:Quaternion#[ReturnStatement(return), subtract, this, q]
org.apache.commons.math4.complex:Quaternion:dotProduct:Quaternion+Quaternion#[ReturnStatement(return), q1, getQ0, q2, getQ0, q1, getQ1, q2, getQ1, q1, getQ2, q2, getQ2, q1, getQ3, q2, getQ3]
org.apache.commons.math4.complex:Quaternion:dotProduct:Quaternion#[ReturnStatement(return), dotProduct, this, q]
org.apache.commons.math4.complex:Quaternion:getNorm:null#[ReturnStatement(return), FastMath, sqrt, q0, q0, q1, q1, q2, q2, q3, q3]
org.apache.commons.math4.complex:Quaternion:normalize:null#[VariableDeclarationStatement(), final, double, norm, getNorm, IfStatement(if), norm, Precision.SAFE_MIN, ThrowStatement(throw), new, ZeroException, LocalizedFormats.NORM, norm, ReturnStatement(return), new, Quaternion, q0, norm, q1, norm, q2, norm, q3, norm]
org.apache.commons.math4.complex:Quaternion:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, Quaternion, VariableDeclarationStatement(), final, Quaternion, q, Quaternion, other, ReturnStatement(return), q0, q, getQ0, q1, q, getQ1, q2, q, getQ2, q3, q, getQ3, ReturnStatement(return), false]
org.apache.commons.math4.complex:Quaternion:hashCode:null#[VariableDeclarationStatement(), int, result, 17, EnhancedForStatement(for), double, comp, double, q0, q1, q2, q3, VariableDeclarationStatement(), final, int, c, MathUtils, hash, comp, ExpressionStatement(), result, 31, result, c, ReturnStatement(return), result]
org.apache.commons.math4.complex:Quaternion:equals:Quaternion+double#[ReturnStatement(return), Precision, equals, q0, q, getQ0, eps, Precision, equals, q1, q, getQ1, eps, Precision, equals, q2, q, getQ2, eps, Precision, equals, q3, q, getQ3, eps]
org.apache.commons.math4.complex:Quaternion:isUnitQuaternion:double#[ReturnStatement(return), Precision, equals, getNorm, 1d, eps]
org.apache.commons.math4.complex:Quaternion:isPureQuaternion:double#[ReturnStatement(return), FastMath, abs, getQ0, eps]
org.apache.commons.math4.complex:Quaternion:getPositivePolarForm:null#[IfStatement(if), getQ0, 0, VariableDeclarationStatement(), final, Quaternion, unitQ, normalize, ReturnStatement(return), new, Quaternion, unitQ, getQ0, unitQ, getQ1, unitQ, getQ2, unitQ, getQ3, ReturnStatement(return), this, normalize]
org.apache.commons.math4.complex:Quaternion:getInverse:null#[VariableDeclarationStatement(), final, double, squareNorm, q0, q0, q1, q1, q2, q2, q3, q3, IfStatement(if), squareNorm, Precision.SAFE_MIN, ThrowStatement(throw), new, ZeroException, LocalizedFormats.NORM, squareNorm, ReturnStatement(return), new, Quaternion, q0, squareNorm, q1, squareNorm, q2, squareNorm, q3, squareNorm]
org.apache.commons.math4.complex:Quaternion:getQ0:null#[ReturnStatement(return), q0]
org.apache.commons.math4.complex:Quaternion:getQ1:null#[ReturnStatement(return), q1]
org.apache.commons.math4.complex:Quaternion:getQ2:null#[ReturnStatement(return), q2]
org.apache.commons.math4.complex:Quaternion:getQ3:null#[ReturnStatement(return), q3]
org.apache.commons.math4.complex:Quaternion:getScalarPart:null#[ReturnStatement(return), getQ0]
org.apache.commons.math4.complex:Quaternion:getVectorPart:null#[ReturnStatement(return), double, getQ1, getQ2, getQ3]
org.apache.commons.math4.complex:Quaternion:multiply:double#[ReturnStatement(return), new, Quaternion, alpha, q0, alpha, q1, alpha, q2, alpha, q3]
org.apache.commons.math4.complex:Quaternion:toString:null#[VariableDeclarationStatement(), final, String, sp, " ", VariableDeclarationStatement(), final, StringBuilder, s, new, StringBuilder, ExpressionStatement(), s, append, "[", append, q0, append, sp, append, q1, append, sp, append, q2, append, sp, append, q3, append, "]", ReturnStatement(return), s, toString]
org.apache.commons.math4.complex:RootsOfUnity:isCounterClockWise:null#[IfStatement(if), omegaCount, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, ReturnStatement(return), isCounterClockWise]
org.apache.commons.math4.complex:RootsOfUnity:computeRoots:int#[IfStatement(if), n, 0, ThrowStatement(throw), new, ZeroException, LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ExpressionStatement(), isCounterClockWise, n, 0, VariableDeclarationStatement(), final, int, absN, FastMath, abs, n, IfStatement(if), absN, omegaCount, ReturnStatement(return), VariableDeclarationStatement(), final, double, t, 2.0, FastMath.PI, absN, VariableDeclarationStatement(), final, double, cosT, FastMath, cos, t, VariableDeclarationStatement(), final, double, sinT, FastMath, sin, t, ExpressionStatement(), omegaReal, double, absN, ExpressionStatement(), omegaImaginaryCounterClockwise, double, absN, ExpressionStatement(), omegaImaginaryClockwise, double, absN, ExpressionStatement(), omegaReal, 0, 1.0, ExpressionStatement(), omegaImaginaryCounterClockwise, 0, 0.0, ExpressionStatement(), omegaImaginaryClockwise, 0, 0.0, ForStatement(for), int, i, 1, i, absN, i, ExpressionStatement(), omegaReal, i, omegaReal, i, 1, cosT, omegaImaginaryCounterClockwise, i, 1, sinT, ExpressionStatement(), omegaImaginaryCounterClockwise, i, omegaReal, i, 1, sinT, omegaImaginaryCounterClockwise, i, 1, cosT, ExpressionStatement(), omegaImaginaryClockwise, i, omegaImaginaryCounterClockwise, i, ExpressionStatement(), omegaCount, absN]
org.apache.commons.math4.complex:RootsOfUnity:getReal:int#[IfStatement(if), omegaCount, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, IfStatement(if), k, 0, k, omegaCount, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer, valueOf, k, Integer, valueOf, 0, Integer, valueOf, omegaCount, 1, ReturnStatement(return), omegaReal, k]
org.apache.commons.math4.complex:RootsOfUnity:getImaginary:int#[IfStatement(if), omegaCount, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, IfStatement(if), k, 0, k, omegaCount, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer, valueOf, k, Integer, valueOf, 0, Integer, valueOf, omegaCount, 1, ReturnStatement(return), isCounterClockWise, omegaImaginaryCounterClockwise, k, omegaImaginaryClockwise, k]
org.apache.commons.math4.complex:RootsOfUnity:getNumberOfRoots:null#[ReturnStatement(return), omegaCount]
org.apache.commons.math4.dfp:Dfp:newInstance:null#[ReturnStatement(return), new, Dfp, getField]
org.apache.commons.math4.dfp:Dfp:newInstance:byte#[ReturnStatement(return), new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:int#[ReturnStatement(return), new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:long#[ReturnStatement(return), new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:double#[ReturnStatement(return), new, Dfp, getField, x]
org.apache.commons.math4.dfp:Dfp:newInstance:Dfp#[IfStatement(if), field, getRadixDigits, d.field, getRadixDigits, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ReturnStatement(return), dotrap, DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result, ReturnStatement(return), new, Dfp, d]
org.apache.commons.math4.dfp:Dfp:newInstance:String#[ReturnStatement(return), new, Dfp, field, s]
org.apache.commons.math4.dfp:Dfp:newInstance:byte+byte#[ReturnStatement(return), field, newDfp, sig, code]
org.apache.commons.math4.dfp:Dfp:getField:null#[ReturnStatement(return), field]
org.apache.commons.math4.dfp:Dfp:getRadixDigits:null#[ReturnStatement(return), field, getRadixDigits]
org.apache.commons.math4.dfp:Dfp:getZero:null#[ReturnStatement(return), field, getZero]
org.apache.commons.math4.dfp:Dfp:getOne:null#[ReturnStatement(return), field, getOne]
org.apache.commons.math4.dfp:Dfp:getTwo:null#[ReturnStatement(return), field, getTwo]
org.apache.commons.math4.dfp:Dfp:shiftLeft:null#[ForStatement(for), int, i, mant.length, 1, i, 0, i, ExpressionStatement(), mant, i, mant, i, 1, ExpressionStatement(), mant, 0, 0, ExpressionStatement(), exp]
org.apache.commons.math4.dfp:Dfp:shiftRight:null#[ForStatement(for), int, i, 0, i, mant.length, 1, i, ExpressionStatement(), mant, i, mant, i, 1, ExpressionStatement(), mant, mant.length, 1, 0, ExpressionStatement(), exp]
org.apache.commons.math4.dfp:Dfp:align:int#[VariableDeclarationStatement(), int, lostdigit, 0, VariableDeclarationStatement(), boolean, inexact, false, VariableDeclarationStatement(), int, diff, exp, e, VariableDeclarationStatement(), int, adiff, diff, IfStatement(if), adiff, 0, ExpressionStatement(), adiff, adiff, IfStatement(if), diff, 0, ReturnStatement(return), 0, IfStatement(if), adiff, mant.length, 1, ExpressionStatement(), Arrays, fill, mant, 0, ExpressionStatement(), exp, e, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ExpressionStatement(), dotrap, DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this, ReturnStatement(return), 0, ForStatement(for), int, i, 0, i, adiff, i, IfStatement(if), diff, 0, IfStatement(if), lostdigit, 0, ExpressionStatement(), inexact, true, ExpressionStatement(), lostdigit, mant, 0, ExpressionStatement(), shiftRight, ExpressionStatement(), shiftLeft, IfStatement(if), inexact, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ExpressionStatement(), dotrap, DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this, ReturnStatement(return), lostdigit]
org.apache.commons.math4.dfp:Dfp:lessThan:Dfp#[IfStatement(if), field, getRadixDigits, x.field, getRadixDigits, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result, ReturnStatement(return), false, IfStatement(if), isNaN, x, isNaN, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance, getZero, ReturnStatement(return), false, ReturnStatement(return), compare, this, x, 0]
org.apache.commons.math4.dfp:Dfp:greaterThan:Dfp#[IfStatement(if), field, getRadixDigits, x.field, getRadixDigits, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result, ReturnStatement(return), false, IfStatement(if), isNaN, x, isNaN, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance, getZero, ReturnStatement(return), false, ReturnStatement(return), compare, this, x, 0]
org.apache.commons.math4.dfp:Dfp:negativeOrNull:null#[IfStatement(if), isNaN, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, ReturnStatement(return), false, ReturnStatement(return), sign, 0, mant, mant.length, 1, 0, isInfinite]
org.apache.commons.math4.dfp:Dfp:strictlyNegative:null#[IfStatement(if), isNaN, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, ReturnStatement(return), false, ReturnStatement(return), sign, 0, mant, mant.length, 1, 0, isInfinite]
org.apache.commons.math4.dfp:Dfp:positiveOrNull:null#[IfStatement(if), isNaN, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, ReturnStatement(return), false, ReturnStatement(return), sign, 0, mant, mant.length, 1, 0, isInfinite]
org.apache.commons.math4.dfp:Dfp:strictlyPositive:null#[IfStatement(if), isNaN, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, ReturnStatement(return), false, ReturnStatement(return), sign, 0, mant, mant.length, 1, 0, isInfinite]
org.apache.commons.math4.dfp:Dfp:abs:null#[VariableDeclarationStatement(), Dfp, result, newInstance, this, ExpressionStatement(), result.sign, 1, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:isInfinite:null#[ReturnStatement(return), nans, INFINITE]
org.apache.commons.math4.dfp:Dfp:isNaN:null#[ReturnStatement(return), nans, QNAN, nans, SNAN]
org.apache.commons.math4.dfp:Dfp:isZero:null#[IfStatement(if), isNaN, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), dotrap, DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance, getZero, ReturnStatement(return), false, ReturnStatement(return), mant, mant.length, 1, 0, isInfinite]
org.apache.commons.math4.dfp:Dfp:equals:Object#[IfStatement(if), instanceof, other, Dfp, VariableDeclarationStatement(), final, Dfp, x, Dfp, other, IfStatement(if), isNaN, x, isNaN, field, getRadixDigits, x.field, getRadixDigits, ReturnStatement(return), false, ReturnStatement(return), compare, this, x, 0, ReturnStatement(return), false]
org.apache.commons.math4.dfp:Dfp:hashCode:null#[ReturnStatement(return), 17, isZero, 0, sign, 8, nans, 16, exp, Arrays, hashCode, mant]
org.apache.commons.math4.dfp:Dfp:unequal:Dfp#[IfStatement(if), isNaN, x, isNaN, field, getRadixDigits, x.field, getRadixDigits, ReturnStatement(return), false, ReturnStatement(return), greaterThan, x, lessThan, x]
org.apache.commons.math4.dfp:Dfp:compare:Dfp+Dfp#[IfStatement(if), a.mant, a.mant.length, 1, 0, b.mant, b.mant.length, 1, 0, a.nans, FINITE, b.nans, FINITE, ReturnStatement(return), 0, IfStatement(if), a.sign, b.sign, IfStatement(if), a.sign, 1, ReturnStatement(return), 1, ReturnStatement(return), 1, IfStatement(if), a.nans, INFINITE, b.nans, FINITE, ReturnStatement(return), a.sign, IfStatement(if), a.nans, FINITE, b.nans, INFINITE, ReturnStatement(return), b.sign, IfStatement(if), a.nans, INFINITE, b.nans, INFINITE, ReturnStatement(return), 0, IfStatement(if), b.mant, b.mant.length, 1, 0, a.mant, b.mant.length, 1, 0, IfStatement(if), a.exp, b.exp, ReturnStatement(return), a.sign, IfStatement(if), a.exp, b.exp, ReturnStatement(return), a.sign, ForStatement(for), int, i, a.mant.length, 1, i, 0, i, IfStatement(if), a.mant, i, b.mant, i, ReturnStatement(return), a.sign, IfStatement(if), a.mant, i, b.mant, i, ReturnStatement(return), a.sign, ReturnStatement(return), 0]
org.apache.commons.math4.dfp:Dfp:rint:null#[ReturnStatement(return), trunc, DfpField.RoundingMode.ROUND_HALF_EVEN]
org.apache.commons.math4.dfp:Dfp:floor:null#[ReturnStatement(return), trunc, DfpField.RoundingMode.ROUND_FLOOR]
org.apache.commons.math4.dfp:Dfp:ceil:null#[ReturnStatement(return), trunc, DfpField.RoundingMode.ROUND_CEIL]
org.apache.commons.math4.dfp:Dfp:remainder:Dfp#[VariableDeclarationStatement(), final, Dfp, result, this, subtract, this, divide, d, rint, multiply, d, IfStatement(if), result.mant, mant.length, 1, 0, ExpressionStatement(), result.sign, sign, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:trunc:DfpField.RoundingMode#[VariableDeclarationStatement(), boolean, changed, false, IfStatement(if), isNaN, ReturnStatement(return), newInstance, this, IfStatement(if), nans, INFINITE, ReturnStatement(return), newInstance, this, IfStatement(if), mant, mant.length, 1, 0, ReturnStatement(return), newInstance, this, IfStatement(if), exp, 0, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, VariableDeclarationStatement(), Dfp, result, newInstance, getZero, ExpressionStatement(), result, dotrap, DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result, ReturnStatement(return), result, IfStatement(if), exp, mant.length, ReturnStatement(return), newInstance, this, VariableDeclarationStatement(), Dfp, result, newInstance, this, ForStatement(for), int, i, 0, i, mant.length, result.exp, i, ExpressionStatement(), changed, result.mant, i, 0, ExpressionStatement(), result.mant, i, 0, IfStatement(if), changed, SwitchStatement(switch), rmode, SwitchCase(case), ROUND_FLOOR, IfStatement(if), result.sign, 1, ExpressionStatement(), result, result, add, newInstance, 1, BreakStatement(break), SwitchCase(case), ROUND_CEIL, IfStatement(if), result.sign, 1, ExpressionStatement(), result, result, add, getOne, BreakStatement(break), SwitchCase(case), ROUND_HALF_EVEN, SwitchCase(default), VariableDeclarationStatement(), final, Dfp, half, newInstance, "0.5", VariableDeclarationStatement(), Dfp, a, subtract, result, ExpressionStatement(), a.sign, 1, IfStatement(if), a, greaterThan, half, ExpressionStatement(), a, newInstance, getOne, ExpressionStatement(), a.sign, sign, ExpressionStatement(), result, result, add, a, IfStatement(if), a, equals, half, result.exp, 0, result.mant, mant.length, result.exp, 1, 0, ExpressionStatement(), a, newInstance, getOne, ExpressionStatement(), a.sign, sign, ExpressionStatement(), result, result, add, a, BreakStatement(break), ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ExpressionStatement(), result, dotrap, DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result, ReturnStatement(return), result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:intValue:null#[VariableDeclarationStatement(), Dfp, rounded, VariableDeclarationStatement(), int, result, 0, ExpressionStatement(), rounded, rint, IfStatement(if), rounded, greaterThan, newInstance, 2147483647, ReturnStatement(return), 2147483647, IfStatement(if), rounded, lessThan, newInstance, -2147483648, ReturnStatement(return), -2147483648, ForStatement(for), int, i, mant.length, 1, i, mant.length, rounded.exp, i, ExpressionStatement(), result, result, RADIX, rounded.mant, i, IfStatement(if), rounded.sign, 1, ExpressionStatement(), result, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:log10K:null#[ReturnStatement(return), exp, 1]
org.apache.commons.math4.dfp:Dfp:power10K:int#[VariableDeclarationStatement(), Dfp, d, newInstance, getOne, ExpressionStatement(), d.exp, e, 1, ReturnStatement(return), d]
org.apache.commons.math4.dfp:Dfp:intLog10:null#[IfStatement(if), mant, mant.length, 1, 1000, ReturnStatement(return), exp, 4, 1, IfStatement(if), mant, mant.length, 1, 100, ReturnStatement(return), exp, 4, 2, IfStatement(if), mant, mant.length, 1, 10, ReturnStatement(return), exp, 4, 3, ReturnStatement(return), exp, 4, 4]
org.apache.commons.math4.dfp:Dfp:power10:int#[VariableDeclarationStatement(), Dfp, d, newInstance, getOne, IfStatement(if), e, 0, ExpressionStatement(), d.exp, e, 4, 1, ExpressionStatement(), d.exp, e, 1, 4, SwitchStatement(switch), e, 4, 4, 4, SwitchCase(case), 0, BreakStatement(break), SwitchCase(case), 1, ExpressionStatement(), d, d, multiply, 10, BreakStatement(break), SwitchCase(case), 2, ExpressionStatement(), d, d, multiply, 100, BreakStatement(break), SwitchCase(default), ExpressionStatement(), d, d, multiply, 1000, ReturnStatement(return), d]
org.apache.commons.math4.dfp:Dfp:complement:int#[ExpressionStatement(), extra, RADIX, extra, ForStatement(for), int, i, 0, i, mant.length, i, ExpressionStatement(), mant, i, RADIX, mant, i, 1, VariableDeclarationStatement(), int, rh, extra, RADIX, ExpressionStatement(), extra, rh, RADIX, ForStatement(for), int, i, 0, i, mant.length, i, VariableDeclarationStatement(), final, int, r, mant, i, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), mant, i, r, rh, RADIX, ReturnStatement(return), extra]
org.apache.commons.math4.dfp:Dfp:add:Dfp#[IfStatement(if), field, getRadixDigits, x.field, getRadixDigits, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ReturnStatement(return), dotrap, DfpField.FLAG_INVALID, ADD_TRAP, x, result, IfStatement(if), nans, FINITE, x.nans, FINITE, IfStatement(if), isNaN, ReturnStatement(return), this, IfStatement(if), x, isNaN, ReturnStatement(return), x, IfStatement(if), nans, INFINITE, x.nans, FINITE, ReturnStatement(return), this, IfStatement(if), x.nans, INFINITE, nans, FINITE, ReturnStatement(return), x, IfStatement(if), x.nans, INFINITE, nans, INFINITE, sign, x.sign, ReturnStatement(return), x, IfStatement(if), x.nans, INFINITE, nans, INFINITE, sign, x.sign, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, ADD_TRAP, x, result, ReturnStatement(return), result, VariableDeclarationStatement(), Dfp, a, newInstance, this, VariableDeclarationStatement(), Dfp, b, newInstance, x, VariableDeclarationStatement(), Dfp, result, newInstance, getZero, VariableDeclarationStatement(), final, byte, asign, a.sign, VariableDeclarationStatement(), final, byte, bsign, b.sign, ExpressionStatement(), a.sign, 1, ExpressionStatement(), b.sign, 1, VariableDeclarationStatement(), byte, rsign, bsign, IfStatement(if), compare, a, b, 0, ExpressionStatement(), rsign, asign, IfStatement(if), b.mant, mant.length, 1, 0, ExpressionStatement(), b.exp, a.exp, IfStatement(if), a.mant, mant.length, 1, 0, ExpressionStatement(), a.exp, b.exp, VariableDeclarationStatement(), int, aextradigit, 0, VariableDeclarationStatement(), int, bextradigit, 0, IfStatement(if), a.exp, b.exp, ExpressionStatement(), aextradigit, a, align, b.exp, ExpressionStatement(), bextradigit, b, align, a.exp, IfStatement(if), asign, bsign, IfStatement(if), asign, rsign, ExpressionStatement(), bextradigit, b, complement, bextradigit, ExpressionStatement(), aextradigit, a, complement, aextradigit, VariableDeclarationStatement(), int, rh, 0, ForStatement(for), int, i, 0, i, mant.length, i, VariableDeclarationStatement(), final, int, r, a.mant, i, b.mant, i, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), result.mant, i, r, rh, RADIX, ExpressionStatement(), result.exp, a.exp, ExpressionStatement(), result.sign, rsign, IfStatement(if), rh, 0, asign, bsign, VariableDeclarationStatement(), final, int, lostdigit, result.mant, 0, ExpressionStatement(), result, shiftRight, ExpressionStatement(), result.mant, mant.length, 1, rh, VariableDeclarationStatement(), final, int, excp, result, round, lostdigit, IfStatement(if), excp, 0, ExpressionStatement(), result, dotrap, excp, ADD_TRAP, x, result, ForStatement(for), int, i, 0, i, mant.length, i, IfStatement(if), result.mant, mant.length, 1, 0, BreakStatement(break), ExpressionStatement(), result, shiftLeft, IfStatement(if), i, 0, ExpressionStatement(), result.mant, 0, aextradigit, bextradigit, ExpressionStatement(), aextradigit, 0, ExpressionStatement(), bextradigit, 0, IfStatement(if), result.mant, mant.length, 1, 0, ExpressionStatement(), result.exp, 0, IfStatement(if), asign, bsign, ExpressionStatement(), result.sign, 1, VariableDeclarationStatement(), final, int, excp, result, round, aextradigit, bextradigit, IfStatement(if), excp, 0, ExpressionStatement(), result, dotrap, excp, ADD_TRAP, x, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:negate:null#[VariableDeclarationStatement(), Dfp, result, newInstance, this, ExpressionStatement(), result.sign, byte, result.sign, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:subtract:Dfp#[ReturnStatement(return), add, x, negate]
org.apache.commons.math4.dfp:Dfp:round:int#[VariableDeclarationStatement(), boolean, inc, false, SwitchStatement(switch), field, getRoundingMode, SwitchCase(case), ROUND_DOWN, ExpressionStatement(), inc, false, BreakStatement(break), SwitchCase(case), ROUND_UP, ExpressionStatement(), inc, n, 0, BreakStatement(break), SwitchCase(case), ROUND_HALF_UP, ExpressionStatement(), inc, n, 5000, BreakStatement(break), SwitchCase(case), ROUND_HALF_DOWN, ExpressionStatement(), inc, n, 5000, BreakStatement(break), SwitchCase(case), ROUND_HALF_EVEN, ExpressionStatement(), inc, n, 5000, n, 5000, mant, 0, 1, 1, BreakStatement(break), SwitchCase(case), ROUND_HALF_ODD, ExpressionStatement(), inc, n, 5000, n, 5000, mant, 0, 1, 0, BreakStatement(break), SwitchCase(case), ROUND_CEIL, ExpressionStatement(), inc, sign, 1, n, 0, BreakStatement(break), SwitchCase(case), ROUND_FLOOR, SwitchCase(default), ExpressionStatement(), inc, sign, 1, n, 0, BreakStatement(break), IfStatement(if), inc, VariableDeclarationStatement(), int, rh, 1, ForStatement(for), int, i, 0, i, mant.length, i, VariableDeclarationStatement(), final, int, r, mant, i, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), mant, i, r, rh, RADIX, IfStatement(if), rh, 0, ExpressionStatement(), shiftRight, ExpressionStatement(), mant, mant.length, 1, rh, IfStatement(if), exp, MIN_EXP, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_UNDERFLOW, ReturnStatement(return), DfpField.FLAG_UNDERFLOW, IfStatement(if), exp, MAX_EXP, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_OVERFLOW, ReturnStatement(return), DfpField.FLAG_OVERFLOW, IfStatement(if), n, 0, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ReturnStatement(return), DfpField.FLAG_INEXACT, ReturnStatement(return), 0]
org.apache.commons.math4.dfp:Dfp:multiply:Dfp#[IfStatement(if), field, getRadixDigits, x.field, getRadixDigits, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ReturnStatement(return), dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result, VariableDeclarationStatement(), Dfp, result, newInstance, getZero, IfStatement(if), nans, FINITE, x.nans, FINITE, IfStatement(if), isNaN, ReturnStatement(return), this, IfStatement(if), x, isNaN, ReturnStatement(return), x, IfStatement(if), nans, INFINITE, x.nans, FINITE, x.mant, mant.length, 1, 0, ExpressionStatement(), result, newInstance, this, ExpressionStatement(), result.sign, byte, sign, x.sign, ReturnStatement(return), result, IfStatement(if), x.nans, INFINITE, nans, FINITE, mant, mant.length, 1, 0, ExpressionStatement(), result, newInstance, x, ExpressionStatement(), result.sign, byte, sign, x.sign, ReturnStatement(return), result, IfStatement(if), x.nans, INFINITE, nans, INFINITE, ExpressionStatement(), result, newInstance, this, ExpressionStatement(), result.sign, byte, sign, x.sign, ReturnStatement(return), result, IfStatement(if), x.nans, INFINITE, nans, FINITE, mant, mant.length, 1, 0, nans, INFINITE, x.nans, FINITE, x.mant, mant.length, 1, 0, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result, ReturnStatement(return), result, VariableDeclarationStatement(), int, product, int, mant.length, 2, ForStatement(for), int, i, 0, i, mant.length, i, VariableDeclarationStatement(), int, rh, 0, ForStatement(for), int, j, 0, j, mant.length, j, VariableDeclarationStatement(), int, r, mant, i, x.mant, j, ExpressionStatement(), r, product, i, j, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), product, i, j, r, rh, RADIX, ExpressionStatement(), product, i, mant.length, rh, VariableDeclarationStatement(), int, md, mant.length, 2, 1, ForStatement(for), int, i, mant.length, 2, 1, i, 0, i, IfStatement(if), product, i, 0, ExpressionStatement(), md, i, BreakStatement(break), ForStatement(for), int, i, 0, i, mant.length, i, ExpressionStatement(), result.mant, mant.length, i, 1, product, md, i, ExpressionStatement(), result.exp, exp, x.exp, md, 2, mant.length, 1, ExpressionStatement(), result.sign, byte, sign, x.sign, 1, 1, IfStatement(if), result.mant, mant.length, 1, 0, ExpressionStatement(), result.exp, 0, VariableDeclarationStatement(), final, int, excp, IfStatement(if), md, mant.length, 1, ExpressionStatement(), excp, result, round, product, md, mant.length, ExpressionStatement(), excp, result, round, 0, IfStatement(if), excp, 0, ExpressionStatement(), result, dotrap, excp, MULTIPLY_TRAP, x, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:multiply:int#[IfStatement(if), x, 0, x, RADIX, ReturnStatement(return), multiplyFast, x, ReturnStatement(return), multiply, newInstance, x]
org.apache.commons.math4.dfp:Dfp:multiplyFast:int#[VariableDeclarationStatement(), Dfp, result, newInstance, this, IfStatement(if), nans, FINITE, IfStatement(if), isNaN, ReturnStatement(return), this, IfStatement(if), nans, INFINITE, x, 0, ExpressionStatement(), result, newInstance, this, ReturnStatement(return), result, IfStatement(if), nans, INFINITE, x, 0, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance, getZero, result, ReturnStatement(return), result, IfStatement(if), x, 0, x, RADIX, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result, ReturnStatement(return), result, VariableDeclarationStatement(), int, rh, 0, ForStatement(for), int, i, 0, i, mant.length, i, VariableDeclarationStatement(), final, int, r, mant, i, x, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), result.mant, i, r, rh, RADIX, VariableDeclarationStatement(), int, lostdigit, 0, IfStatement(if), rh, 0, ExpressionStatement(), lostdigit, result.mant, 0, ExpressionStatement(), result, shiftRight, ExpressionStatement(), result.mant, mant.length, 1, rh, IfStatement(if), result.mant, mant.length, 1, 0, ExpressionStatement(), result.exp, 0, VariableDeclarationStatement(), final, int, excp, result, round, lostdigit, IfStatement(if), excp, 0, ExpressionStatement(), result, dotrap, excp, MULTIPLY_TRAP, result, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:divide:Dfp#[VariableDeclarationStatement(), int, dividend, VariableDeclarationStatement(), int, quotient, VariableDeclarationStatement(), int, remainder, VariableDeclarationStatement(), int, qd, VariableDeclarationStatement(), int, nsqd, VariableDeclarationStatement(), int, trial, 0, VariableDeclarationStatement(), int, minadj, VariableDeclarationStatement(), boolean, trialgood, VariableDeclarationStatement(), int, md, 0, VariableDeclarationStatement(), int, excp, IfStatement(if), field, getRadixDigits, divisor.field, getRadixDigits, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ReturnStatement(return), dotrap, DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result, VariableDeclarationStatement(), Dfp, result, newInstance, getZero, IfStatement(if), nans, FINITE, divisor.nans, FINITE, IfStatement(if), isNaN, ReturnStatement(return), this, IfStatement(if), divisor, isNaN, ReturnStatement(return), divisor, IfStatement(if), nans, INFINITE, divisor.nans, FINITE, ExpressionStatement(), result, newInstance, this, ExpressionStatement(), result.sign, byte, sign, divisor.sign, ReturnStatement(return), result, IfStatement(if), divisor.nans, INFINITE, nans, FINITE, ExpressionStatement(), result, newInstance, getZero, ExpressionStatement(), result.sign, byte, sign, divisor.sign, ReturnStatement(return), result, IfStatement(if), divisor.nans, INFINITE, nans, INFINITE, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result, ReturnStatement(return), result, IfStatement(if), divisor.mant, mant.length, 1, 0, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_DIV_ZERO, ExpressionStatement(), result, newInstance, getZero, ExpressionStatement(), result.sign, byte, sign, divisor.sign, ExpressionStatement(), result.nans, INFINITE, ExpressionStatement(), result, dotrap, DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result, ReturnStatement(return), result, ExpressionStatement(), dividend, int, mant.length, 1, ExpressionStatement(), quotient, int, mant.length, 2, ExpressionStatement(), remainder, int, mant.length, 1, ExpressionStatement(), dividend, mant.length, 0, ExpressionStatement(), quotient, mant.length, 0, ExpressionStatement(), quotient, mant.length, 1, 0, ExpressionStatement(), remainder, mant.length, 0, ForStatement(for), int, i, 0, i, mant.length, i, ExpressionStatement(), dividend, i, mant, i, ExpressionStatement(), quotient, i, 0, ExpressionStatement(), remainder, i, 0, ExpressionStatement(), nsqd, 0, ForStatement(for), qd, mant.length, 1, qd, 0, qd, VariableDeclarationStatement(), final, int, divMsb, dividend, mant.length, RADIX, dividend, mant.length, 1, VariableDeclarationStatement(), int, min, divMsb, divisor.mant, mant.length, 1, 1, VariableDeclarationStatement(), int, max, divMsb, 1, divisor.mant, mant.length, 1, ExpressionStatement(), trialgood, false, WhileStatement(while), trialgood, ExpressionStatement(), trial, min, max, 2, VariableDeclarationStatement(), int, rh, 0, ForStatement(for), int, i, 0, i, mant.length, 1, i, VariableDeclarationStatement(), int, dm, i, mant.length, divisor.mant, i, 0, VariableDeclarationStatement(), final, int, r, dm, trial, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), remainder, i, r, rh, RADIX, ExpressionStatement(), rh, 1, ForStatement(for), int, i, 0, i, mant.length, 1, i, VariableDeclarationStatement(), final, int, r, RADIX, 1, remainder, i, dividend, i, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), remainder, i, r, rh, RADIX, IfStatement(if), rh, 0, ExpressionStatement(), max, trial, 1, ContinueStatement(continue), ExpressionStatement(), minadj, remainder, mant.length, RADIX, remainder, mant.length, 1, ExpressionStatement(), minadj, divisor.mant, mant.length, 1, 1, IfStatement(if), minadj, 2, ExpressionStatement(), min, trial, minadj, ContinueStatement(continue), ExpressionStatement(), trialgood, false, ForStatement(for), int, i, mant.length, 1, i, 0, i, IfStatement(if), divisor.mant, i, remainder, i, ExpressionStatement(), trialgood, true, IfStatement(if), divisor.mant, i, remainder, i, BreakStatement(break), IfStatement(if), remainder, mant.length, 0, ExpressionStatement(), trialgood, false, IfStatement(if), trialgood, false, ExpressionStatement(), min, trial, 1, ExpressionStatement(), quotient, qd, trial, IfStatement(if), trial, 0, nsqd, 0, ExpressionStatement(), nsqd, IfStatement(if), field, getRoundingMode, DfpField.RoundingMode.ROUND_DOWN, nsqd, mant.length, BreakStatement(break), IfStatement(if), nsqd, mant.length, BreakStatement(break), ExpressionStatement(), dividend, 0, 0, ForStatement(for), int, i, 0, i, mant.length, i, ExpressionStatement(), dividend, i, 1, remainder, i, ExpressionStatement(), md, mant.length, ForStatement(for), int, i, mant.length, 1, i, 0, i, IfStatement(if), quotient, i, 0, ExpressionStatement(), md, i, BreakStatement(break), ForStatement(for), int, i, 0, i, mant.length, i, ExpressionStatement(), result.mant, mant.length, i, 1, quotient, md, i, ExpressionStatement(), result.exp, exp, divisor.exp, md, mant.length, ExpressionStatement(), result.sign, byte, sign, divisor.sign, 1, 1, IfStatement(if), result.mant, mant.length, 1, 0, ExpressionStatement(), result.exp, 0, IfStatement(if), md, mant.length, 1, ExpressionStatement(), excp, result, round, quotient, md, mant.length, ExpressionStatement(), excp, result, round, 0, IfStatement(if), excp, 0, ExpressionStatement(), result, dotrap, excp, DIVIDE_TRAP, divisor, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:divide:int#[IfStatement(if), nans, FINITE, IfStatement(if), isNaN, ReturnStatement(return), this, IfStatement(if), nans, INFINITE, ReturnStatement(return), newInstance, this, IfStatement(if), divisor, 0, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_DIV_ZERO, VariableDeclarationStatement(), Dfp, result, newInstance, getZero, ExpressionStatement(), result.sign, sign, ExpressionStatement(), result.nans, INFINITE, ExpressionStatement(), result, dotrap, DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero, result, ReturnStatement(return), result, IfStatement(if), divisor, 0, divisor, RADIX, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result, ReturnStatement(return), result, VariableDeclarationStatement(), Dfp, result, newInstance, this, VariableDeclarationStatement(), int, rl, 0, ForStatement(for), int, i, mant.length, 1, i, 0, i, VariableDeclarationStatement(), final, int, r, rl, RADIX, result.mant, i, VariableDeclarationStatement(), final, int, rh, r, divisor, ExpressionStatement(), rl, r, rh, divisor, ExpressionStatement(), result.mant, i, rh, IfStatement(if), result.mant, mant.length, 1, 0, ExpressionStatement(), result, shiftLeft, VariableDeclarationStatement(), final, int, r, rl, RADIX, VariableDeclarationStatement(), final, int, rh, r, divisor, ExpressionStatement(), rl, r, rh, divisor, ExpressionStatement(), result.mant, 0, rh, VariableDeclarationStatement(), final, int, excp, result, round, rl, RADIX, divisor, IfStatement(if), excp, 0, ExpressionStatement(), result, dotrap, excp, DIVIDE_TRAP, result, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:reciprocal:null#[ReturnStatement(return), field, getOne, divide, this]
org.apache.commons.math4.dfp:Dfp:sqrt:null#[IfStatement(if), nans, FINITE, mant, mant.length, 1, 0, ReturnStatement(return), newInstance, this, IfStatement(if), nans, FINITE, IfStatement(if), nans, INFINITE, sign, 1, ReturnStatement(return), newInstance, this, IfStatement(if), nans, QNAN, ReturnStatement(return), newInstance, this, IfStatement(if), nans, SNAN, VariableDeclarationStatement(), Dfp, result, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), result, newInstance, this, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, SQRT_TRAP, null, result, ReturnStatement(return), result, IfStatement(if), sign, 1, VariableDeclarationStatement(), Dfp, result, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, ExpressionStatement(), result, newInstance, this, ExpressionStatement(), result.nans, QNAN, ExpressionStatement(), result, dotrap, DfpField.FLAG_INVALID, SQRT_TRAP, null, result, ReturnStatement(return), result, VariableDeclarationStatement(), Dfp, x, newInstance, this, IfStatement(if), x.exp, 1, x.exp, 1, ExpressionStatement(), x.exp, this, exp, 2, SwitchStatement(switch), x.mant, mant.length, 1, 2000, SwitchCase(case), 0, ExpressionStatement(), x.mant, mant.length, 1, x.mant, mant.length, 1, 2, 1, BreakStatement(break), SwitchCase(case), 2, ExpressionStatement(), x.mant, mant.length, 1, 1500, BreakStatement(break), SwitchCase(case), 3, ExpressionStatement(), x.mant, mant.length, 1, 2200, BreakStatement(break), SwitchCase(default), ExpressionStatement(), x.mant, mant.length, 1, 3000, VariableDeclarationStatement(), Dfp, dx, newInstance, x, VariableDeclarationStatement(), Dfp, px, getZero, VariableDeclarationStatement(), Dfp, ppx, getZero, WhileStatement(while), x, unequal, px, ExpressionStatement(), dx, newInstance, x, ExpressionStatement(), dx.sign, 1, ExpressionStatement(), dx, dx, add, this, divide, x, ExpressionStatement(), dx, dx, divide, 2, ExpressionStatement(), ppx, px, ExpressionStatement(), px, x, ExpressionStatement(), x, x, add, dx, IfStatement(if), x, equals, ppx, BreakStatement(break), IfStatement(if), dx.mant, mant.length, 1, 0, BreakStatement(break), ReturnStatement(return), x]
org.apache.commons.math4.dfp:Dfp:toString:null#[IfStatement(if), nans, FINITE, IfStatement(if), nans, INFINITE, ReturnStatement(return), sign, 0, NEG_INFINITY_STRING, POS_INFINITY_STRING, ReturnStatement(return), NAN_STRING, IfStatement(if), exp, mant.length, exp, 1, ReturnStatement(return), dfp2sci, ReturnStatement(return), dfp2string]
org.apache.commons.math4.dfp:Dfp:dfp2sci:null#[VariableDeclarationStatement(), char, rawdigits, char, mant.length, 4, VariableDeclarationStatement(), char, outputbuffer, char, mant.length, 4, 20, VariableDeclarationStatement(), int, p, VariableDeclarationStatement(), int, q, VariableDeclarationStatement(), int, e, VariableDeclarationStatement(), int, ae, VariableDeclarationStatement(), int, shf, ExpressionStatement(), p, 0, ForStatement(for), int, i, mant.length, 1, i, 0, i, ExpressionStatement(), rawdigits, p, char, mant, i, 1000, '0', ExpressionStatement(), rawdigits, p, char, mant, i, 100, 10, '0', ExpressionStatement(), rawdigits, p, char, mant, i, 10, 10, '0', ExpressionStatement(), rawdigits, p, char, mant, i, 10, '0', ForStatement(for), p, 0, p, rawdigits.length, p, IfStatement(if), rawdigits, p, '0', BreakStatement(break), ExpressionStatement(), shf, p, ExpressionStatement(), q, 0, IfStatement(if), sign, 1, ExpressionStatement(), outputbuffer, q, '-', IfStatement(if), p, rawdigits.length, ExpressionStatement(), outputbuffer, q, rawdigits, p, ExpressionStatement(), outputbuffer, q, '.', WhileStatement(while), p, rawdigits.length, ExpressionStatement(), outputbuffer, q, rawdigits, p, ExpressionStatement(), outputbuffer, q, '0', ExpressionStatement(), outputbuffer, q, '.', ExpressionStatement(), outputbuffer, q, '0', ExpressionStatement(), outputbuffer, q, 'e', ExpressionStatement(), outputbuffer, q, '0', ReturnStatement(return), new, String, outputbuffer, 0, 5, ExpressionStatement(), outputbuffer, q, 'e', ExpressionStatement(), e, exp, 4, shf, 1, ExpressionStatement(), ae, e, IfStatement(if), e, 0, ExpressionStatement(), ae, e, ForStatement(for), p, 1000000000, p, ae, p, 10, IfStatement(if), e, 0, ExpressionStatement(), outputbuffer, q, '-', WhileStatement(while), p, 0, ExpressionStatement(), outputbuffer, q, char, ae, p, '0', ExpressionStatement(), ae, p, ExpressionStatement(), p, 10, ReturnStatement(return), new, String, outputbuffer, 0, q]
org.apache.commons.math4.dfp:Dfp:dfp2string:null#[VariableDeclarationStatement(), char, buffer, char, mant.length, 4, 20, VariableDeclarationStatement(), int, p, 1, VariableDeclarationStatement(), int, q, VariableDeclarationStatement(), int, e, exp, VariableDeclarationStatement(), boolean, pointInserted, false, ExpressionStatement(), buffer, 0, ' ', IfStatement(if), e, 0, ExpressionStatement(), buffer, p, '0', ExpressionStatement(), buffer, p, '.', ExpressionStatement(), pointInserted, true, WhileStatement(while), e, 0, ExpressionStatement(), buffer, p, '0', ExpressionStatement(), buffer, p, '0', ExpressionStatement(), buffer, p, '0', ExpressionStatement(), buffer, p, '0', ExpressionStatement(), e, ForStatement(for), int, i, mant.length, 1, i, 0, i, ExpressionStatement(), buffer, p, char, mant, i, 1000, '0', ExpressionStatement(), buffer, p, char, mant, i, 100, 10, '0', ExpressionStatement(), buffer, p, char, mant, i, 10, 10, '0', ExpressionStatement(), buffer, p, char, mant, i, 10, '0', IfStatement(if), e, 0, ExpressionStatement(), buffer, p, '.', ExpressionStatement(), pointInserted, true, WhileStatement(while), e, 0, ExpressionStatement(), buffer, p, '0', ExpressionStatement(), buffer, p, '0', ExpressionStatement(), buffer, p, '0', ExpressionStatement(), buffer, p, '0', ExpressionStatement(), e, IfStatement(if), pointInserted, ExpressionStatement(), buffer, p, '.', ExpressionStatement(), q, 1, WhileStatement(while), buffer, q, '0', ExpressionStatement(), q, IfStatement(if), buffer, q, '.', ExpressionStatement(), q, WhileStatement(while), buffer, p, 1, '0', ExpressionStatement(), p, IfStatement(if), sign, 0, ExpressionStatement(), buffer, q, '-', ReturnStatement(return), new, String, buffer, q, p, q]
org.apache.commons.math4.dfp:Dfp:dotrap:int+String+Dfp+Dfp#[VariableDeclarationStatement(), Dfp, def, result, SwitchStatement(switch), type, SwitchCase(case), DfpField.FLAG_INVALID, ExpressionStatement(), def, newInstance, getZero, ExpressionStatement(), def.sign, result.sign, ExpressionStatement(), def.nans, QNAN, BreakStatement(break), SwitchCase(case), DfpField.FLAG_DIV_ZERO, IfStatement(if), nans, FINITE, mant, mant.length, 1, 0, ExpressionStatement(), def, newInstance, getZero, ExpressionStatement(), def.sign, byte, sign, oper.sign, ExpressionStatement(), def.nans, INFINITE, IfStatement(if), nans, FINITE, mant, mant.length, 1, 0, ExpressionStatement(), def, newInstance, getZero, ExpressionStatement(), def.nans, QNAN, IfStatement(if), nans, INFINITE, nans, QNAN, ExpressionStatement(), def, newInstance, getZero, ExpressionStatement(), def.nans, QNAN, IfStatement(if), nans, INFINITE, nans, SNAN, ExpressionStatement(), def, newInstance, getZero, ExpressionStatement(), def.nans, QNAN, BreakStatement(break), SwitchCase(case), DfpField.FLAG_UNDERFLOW, IfStatement(if), result.exp, mant.length, MIN_EXP, ExpressionStatement(), def, newInstance, getZero, ExpressionStatement(), def.sign, result.sign, ExpressionStatement(), def, newInstance, result, ExpressionStatement(), result.exp, ERR_SCALE, BreakStatement(break), SwitchCase(case), DfpField.FLAG_OVERFLOW, ExpressionStatement(), result.exp, ERR_SCALE, ExpressionStatement(), def, newInstance, getZero, ExpressionStatement(), def.sign, result.sign, ExpressionStatement(), def.nans, INFINITE, BreakStatement(break), SwitchCase(default), ExpressionStatement(), def, result, BreakStatement(break), ReturnStatement(return), trap, type, what, oper, def, result]
org.apache.commons.math4.dfp:Dfp:trap:int+String+Dfp+Dfp+Dfp#[ReturnStatement(return), def]
org.apache.commons.math4.dfp:Dfp:classify:null#[ReturnStatement(return), nans]
org.apache.commons.math4.dfp:Dfp:copysign:Dfp+Dfp#[VariableDeclarationStatement(), Dfp, result, x, newInstance, x, ExpressionStatement(), result.sign, y.sign, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:nextAfter:Dfp#[IfStatement(if), field, getRadixDigits, x.field, getRadixDigits, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ReturnStatement(return), dotrap, DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result, VariableDeclarationStatement(), boolean, up, false, IfStatement(if), this, lessThan, x, ExpressionStatement(), up, true, IfStatement(if), compare, this, x, 0, ReturnStatement(return), newInstance, x, IfStatement(if), lessThan, getZero, ExpressionStatement(), up, up, VariableDeclarationStatement(), final, Dfp, inc, VariableDeclarationStatement(), Dfp, result, IfStatement(if), up, ExpressionStatement(), inc, newInstance, getOne, ExpressionStatement(), inc.exp, this, exp, mant.length, 1, ExpressionStatement(), inc.sign, this, sign, IfStatement(if), this, equals, getZero, ExpressionStatement(), inc.exp, MIN_EXP, mant.length, ExpressionStatement(), result, add, inc, ExpressionStatement(), inc, newInstance, getOne, ExpressionStatement(), inc.exp, this, exp, ExpressionStatement(), inc.sign, this, sign, IfStatement(if), this, equals, inc, ExpressionStatement(), inc.exp, this, exp, mant.length, ExpressionStatement(), inc.exp, this, exp, mant.length, 1, IfStatement(if), this, equals, getZero, ExpressionStatement(), inc.exp, MIN_EXP, mant.length, ExpressionStatement(), result, this, subtract, inc, IfStatement(if), result, classify, INFINITE, this, classify, INFINITE, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ExpressionStatement(), result, dotrap, DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result, IfStatement(if), result, equals, getZero, this, equals, getZero, false, ExpressionStatement(), field, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ExpressionStatement(), result, dotrap, DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:Dfp:toDouble:null#[IfStatement(if), isInfinite, IfStatement(if), lessThan, getZero, ReturnStatement(return), Double.NEGATIVE_INFINITY, ReturnStatement(return), Double.POSITIVE_INFINITY, IfStatement(if), isNaN, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), Dfp, y, this, VariableDeclarationStatement(), boolean, negate, false, VariableDeclarationStatement(), int, cmp0, compare, this, getZero, IfStatement(if), cmp0, 0, ReturnStatement(return), sign, 0, 0.0, 0.0, IfStatement(if), cmp0, 0, ExpressionStatement(), y, negate, ExpressionStatement(), negate, true, VariableDeclarationStatement(), int, exponent, int, y, intLog10, 3.32, IfStatement(if), exponent, 0, ExpressionStatement(), exponent, VariableDeclarationStatement(), Dfp, tempDfp, DfpMath, pow, getTwo, exponent, WhileStatement(while), tempDfp, lessThan, y, tempDfp, equals, y, ExpressionStatement(), tempDfp, tempDfp, multiply, 2, ExpressionStatement(), exponent, ExpressionStatement(), exponent, ExpressionStatement(), y, y, divide, DfpMath, pow, getTwo, exponent, IfStatement(if), exponent, 1023, ExpressionStatement(), y, y, subtract, getOne, IfStatement(if), exponent, 1074, ReturnStatement(return), 0, IfStatement(if), exponent, 1023, ReturnStatement(return), negate, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, ExpressionStatement(), y, y, multiply, newInstance, 4503599627370496l, rint, VariableDeclarationStatement(), String, str, y, toString, ExpressionStatement(), str, str, substring, 0, str, length, 1, VariableDeclarationStatement(), long, mantissa, Long, parseLong, str, IfStatement(if), mantissa, 4503599627370496L, ExpressionStatement(), mantissa, 0, ExpressionStatement(), exponent, IfStatement(if), exponent, 1023, ExpressionStatement(), exponent, WhileStatement(while), exponent, 1023, ExpressionStatement(), exponent, ExpressionStatement(), mantissa, 1, VariableDeclarationStatement(), long, bits, mantissa, exponent, 1023L, 52, VariableDeclarationStatement(), double, x, Double, longBitsToDouble, bits, IfStatement(if), negate, ExpressionStatement(), x, x, ReturnStatement(return), x]
org.apache.commons.math4.dfp:Dfp:toSplitDouble:null#[VariableDeclarationStatement(), double, split, double, 2, VariableDeclarationStatement(), long, mask, 0xffffffffc0000000L, ExpressionStatement(), split, 0, Double, longBitsToDouble, Double, doubleToLongBits, toDouble, mask, ExpressionStatement(), split, 1, subtract, newInstance, split, 0, toDouble, ReturnStatement(return), split]
org.apache.commons.math4.dfp:Dfp:getReal:null#[ReturnStatement(return), toDouble]
org.apache.commons.math4.dfp:Dfp:add:double#[ReturnStatement(return), add, newInstance, a]
org.apache.commons.math4.dfp:Dfp:subtract:double#[ReturnStatement(return), subtract, newInstance, a]
org.apache.commons.math4.dfp:Dfp:multiply:double#[ReturnStatement(return), multiply, newInstance, a]
org.apache.commons.math4.dfp:Dfp:divide:double#[ReturnStatement(return), divide, newInstance, a]
org.apache.commons.math4.dfp:Dfp:remainder:double#[ReturnStatement(return), remainder, newInstance, a]
org.apache.commons.math4.dfp:Dfp:round:null#[ReturnStatement(return), FastMath, round, toDouble]
org.apache.commons.math4.dfp:Dfp:signum:null#[IfStatement(if), isNaN, isZero, ReturnStatement(return), this, ReturnStatement(return), newInstance, sign, 0, 1, 1]
org.apache.commons.math4.dfp:Dfp:copySign:Dfp#[IfStatement(if), sign, 0, s.sign, 0, sign, 0, s.sign, 0, ReturnStatement(return), this, ReturnStatement(return), negate]
org.apache.commons.math4.dfp:Dfp:copySign:double#[VariableDeclarationStatement(), long, sb, Double, doubleToLongBits, s, IfStatement(if), sign, 0, sb, 0, sign, 0, sb, 0, ReturnStatement(return), this, ReturnStatement(return), negate]
org.apache.commons.math4.dfp:Dfp:scalb:int#[ReturnStatement(return), multiply, DfpMath, pow, getTwo, n]
org.apache.commons.math4.dfp:Dfp:hypot:Dfp#[ReturnStatement(return), multiply, this, add, y, multiply, y, sqrt]
org.apache.commons.math4.dfp:Dfp:cbrt:null#[ReturnStatement(return), rootN, 3]
org.apache.commons.math4.dfp:Dfp:rootN:int#[ReturnStatement(return), sign, 0, DfpMath, pow, this, getOne, divide, n, DfpMath, pow, negate, getOne, divide, n, negate]
org.apache.commons.math4.dfp:Dfp:pow:double#[ReturnStatement(return), DfpMath, pow, this, newInstance, p]
org.apache.commons.math4.dfp:Dfp:pow:int#[ReturnStatement(return), DfpMath, pow, this, n]
org.apache.commons.math4.dfp:Dfp:pow:Dfp#[ReturnStatement(return), DfpMath, pow, this, e]
org.apache.commons.math4.dfp:Dfp:exp:null#[ReturnStatement(return), DfpMath, exp, this]
org.apache.commons.math4.dfp:Dfp:expm1:null#[ReturnStatement(return), DfpMath, exp, this, subtract, getOne]
org.apache.commons.math4.dfp:Dfp:log:null#[ReturnStatement(return), DfpMath, log, this]
org.apache.commons.math4.dfp:Dfp:log1p:null#[ReturnStatement(return), DfpMath, log, this, add, getOne]
org.apache.commons.math4.dfp:Dfp:log10:null#[ReturnStatement(return), DfpMath, log, this, divide, DfpMath, log, newInstance, 10]
org.apache.commons.math4.dfp:Dfp:cos:null#[ReturnStatement(return), DfpMath, cos, this]
org.apache.commons.math4.dfp:Dfp:sin:null#[ReturnStatement(return), DfpMath, sin, this]
org.apache.commons.math4.dfp:Dfp:tan:null#[ReturnStatement(return), DfpMath, tan, this]
org.apache.commons.math4.dfp:Dfp:acos:null#[ReturnStatement(return), DfpMath, acos, this]
org.apache.commons.math4.dfp:Dfp:asin:null#[ReturnStatement(return), DfpMath, asin, this]
org.apache.commons.math4.dfp:Dfp:atan:null#[ReturnStatement(return), DfpMath, atan, this]
org.apache.commons.math4.dfp:Dfp:atan2:Dfp#[VariableDeclarationStatement(), final, Dfp, r, x, multiply, x, add, multiply, this, sqrt, IfStatement(if), x.sign, 0, ReturnStatement(return), getTwo, multiply, divide, r, add, x, atan, VariableDeclarationStatement(), final, Dfp, tmp, getTwo, multiply, divide, r, subtract, x, atan, VariableDeclarationStatement(), final, Dfp, pmPi, newInstance, tmp.sign, 0, FastMath.PI, FastMath.PI, ReturnStatement(return), pmPi, subtract, tmp]
org.apache.commons.math4.dfp:Dfp:cosh:null#[ReturnStatement(return), DfpMath, exp, this, add, DfpMath, exp, negate, divide, 2]
org.apache.commons.math4.dfp:Dfp:sinh:null#[ReturnStatement(return), DfpMath, exp, this, subtract, DfpMath, exp, negate, divide, 2]
org.apache.commons.math4.dfp:Dfp:tanh:null#[VariableDeclarationStatement(), final, Dfp, ePlus, DfpMath, exp, this, VariableDeclarationStatement(), final, Dfp, eMinus, DfpMath, exp, negate, ReturnStatement(return), ePlus, subtract, eMinus, divide, ePlus, add, eMinus]
org.apache.commons.math4.dfp:Dfp:acosh:null#[ReturnStatement(return), multiply, this, subtract, getOne, sqrt, add, this, log]
org.apache.commons.math4.dfp:Dfp:asinh:null#[ReturnStatement(return), multiply, this, add, getOne, sqrt, add, this, log]
org.apache.commons.math4.dfp:Dfp:atanh:null#[ReturnStatement(return), getOne, add, this, divide, getOne, subtract, this, log, divide, 2]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp[]+Dfp[]#[IfStatement(if), a.length, b.length, ThrowStatement(throw), new, DimensionMismatchException, a.length, b.length, VariableDeclarationStatement(), Dfp, r, getZero, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), r, r, add, a, i, multiply, b, i, ReturnStatement(return), r]
org.apache.commons.math4.dfp:Dfp:linearCombination:double[]+Dfp[]#[IfStatement(if), a.length, b.length, ThrowStatement(throw), new, DimensionMismatchException, a.length, b.length, VariableDeclarationStatement(), Dfp, r, getZero, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), r, r, add, b, i, multiply, a, i, ReturnStatement(return), r]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp+Dfp+Dfp+Dfp#[ReturnStatement(return), a1, multiply, b1, add, a2, multiply, b2]
org.apache.commons.math4.dfp:Dfp:linearCombination:double+Dfp+double+Dfp#[ReturnStatement(return), b1, multiply, a1, add, b2, multiply, a2]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp+Dfp+Dfp+Dfp+Dfp+Dfp#[ReturnStatement(return), a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3]
org.apache.commons.math4.dfp:Dfp:linearCombination:double+Dfp+double+Dfp+double+Dfp#[ReturnStatement(return), b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3]
org.apache.commons.math4.dfp:Dfp:linearCombination:Dfp+Dfp+Dfp+Dfp+Dfp+Dfp+Dfp+Dfp#[ReturnStatement(return), a1, multiply, b1, add, a2, multiply, b2, add, a3, multiply, b3, add, a4, multiply, b4]
org.apache.commons.math4.dfp:Dfp:linearCombination:double+Dfp+double+Dfp+double+Dfp+double+Dfp#[ReturnStatement(return), b1, multiply, a1, add, b2, multiply, a2, add, b3, multiply, a3, add, b4, multiply, a4]
org.apache.commons.math4.dfp:DfpDec:newInstance:null#[ReturnStatement(return), new, DfpDec, getField]
org.apache.commons.math4.dfp:DfpDec:newInstance:byte#[ReturnStatement(return), new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:int#[ReturnStatement(return), new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:long#[ReturnStatement(return), new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:double#[ReturnStatement(return), new, DfpDec, getField, x]
org.apache.commons.math4.dfp:DfpDec:newInstance:Dfp#[IfStatement(if), getField, getRadixDigits, d, getField, getRadixDigits, ExpressionStatement(), getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ReturnStatement(return), dotrap, DfpField.FLAG_INVALID, "newInstance", d, result, ReturnStatement(return), new, DfpDec, d]
org.apache.commons.math4.dfp:DfpDec:newInstance:String#[ReturnStatement(return), new, DfpDec, getField, s]
org.apache.commons.math4.dfp:DfpDec:newInstance:byte+byte#[ReturnStatement(return), new, DfpDec, getField, sign, nans]
org.apache.commons.math4.dfp:DfpDec:getDecimalDigits:null#[ReturnStatement(return), getRadixDigits, 4, 3]
org.apache.commons.math4.dfp:DfpDec:round:int#[VariableDeclarationStatement(), int, msb, mant, mant.length, 1, IfStatement(if), msb, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), int, cmaxdigits, mant.length, 4, VariableDeclarationStatement(), int, lsbthreshold, 1000, WhileStatement(while), lsbthreshold, msb, ExpressionStatement(), lsbthreshold, 10, ExpressionStatement(), cmaxdigits, VariableDeclarationStatement(), final, int, digits, getDecimalDigits, VariableDeclarationStatement(), final, int, lsbshift, cmaxdigits, digits, VariableDeclarationStatement(), final, int, lsd, lsbshift, 4, ExpressionStatement(), lsbthreshold, 1, ForStatement(for), int, i, 0, i, lsbshift, 4, i, ExpressionStatement(), lsbthreshold, 10, VariableDeclarationStatement(), final, int, lsb, mant, lsd, IfStatement(if), lsbthreshold, 1, digits, 4, mant.length, 3, ReturnStatement(return), super, round, in, VariableDeclarationStatement(), int, discarded, in, VariableDeclarationStatement(), final, int, n, IfStatement(if), lsbthreshold, 1, ExpressionStatement(), n, mant, lsd, 1, 1000, 10, ExpressionStatement(), mant, lsd, 1, 1000, ExpressionStatement(), discarded, mant, lsd, 1, ExpressionStatement(), n, lsb, 10, lsbthreshold, 10, ExpressionStatement(), discarded, lsb, lsbthreshold, 10, ForStatement(for), int, i, 0, i, lsd, i, ExpressionStatement(), discarded, mant, i, ExpressionStatement(), mant, i, 0, ExpressionStatement(), mant, lsd, lsb, lsbthreshold, lsbthreshold, VariableDeclarationStatement(), final, boolean, inc, SwitchStatement(switch), getField, getRoundingMode, SwitchCase(case), ROUND_DOWN, ExpressionStatement(), inc, false, BreakStatement(break), SwitchCase(case), ROUND_UP, ExpressionStatement(), inc, n, 0, discarded, 0, BreakStatement(break), SwitchCase(case), ROUND_HALF_UP, ExpressionStatement(), inc, n, 5, BreakStatement(break), SwitchCase(case), ROUND_HALF_DOWN, ExpressionStatement(), inc, n, 5, BreakStatement(break), SwitchCase(case), ROUND_HALF_EVEN, ExpressionStatement(), inc, n, 5, n, 5, discarded, 0, n, 5, discarded, 0, lsb, lsbthreshold, 1, 1, BreakStatement(break), SwitchCase(case), ROUND_HALF_ODD, ExpressionStatement(), inc, n, 5, n, 5, discarded, 0, n, 5, discarded, 0, lsb, lsbthreshold, 1, 0, BreakStatement(break), SwitchCase(case), ROUND_CEIL, ExpressionStatement(), inc, sign, 1, n, 0, discarded, 0, BreakStatement(break), SwitchCase(case), ROUND_FLOOR, SwitchCase(default), ExpressionStatement(), inc, sign, 1, n, 0, discarded, 0, BreakStatement(break), IfStatement(if), inc, VariableDeclarationStatement(), int, rh, lsbthreshold, ForStatement(for), int, i, lsd, i, mant.length, i, VariableDeclarationStatement(), final, int, r, mant, i, rh, ExpressionStatement(), rh, r, RADIX, ExpressionStatement(), mant, i, r, RADIX, IfStatement(if), rh, 0, ExpressionStatement(), shiftRight, ExpressionStatement(), mant, mant.length, 1, rh, IfStatement(if), exp, MIN_EXP, ExpressionStatement(), getField, setIEEEFlagsBits, DfpField.FLAG_UNDERFLOW, ReturnStatement(return), DfpField.FLAG_UNDERFLOW, IfStatement(if), exp, MAX_EXP, ExpressionStatement(), getField, setIEEEFlagsBits, DfpField.FLAG_OVERFLOW, ReturnStatement(return), DfpField.FLAG_OVERFLOW, IfStatement(if), n, 0, discarded, 0, ExpressionStatement(), getField, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ReturnStatement(return), DfpField.FLAG_INEXACT, ReturnStatement(return), 0]
org.apache.commons.math4.dfp:DfpDec:nextAfter:Dfp#[VariableDeclarationStatement(), final, String, trapName, "nextAfter", IfStatement(if), getField, getRadixDigits, x, getField, getRadixDigits, ExpressionStatement(), getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, newInstance, getZero, ExpressionStatement(), result.nans, QNAN, ReturnStatement(return), dotrap, DfpField.FLAG_INVALID, trapName, x, result, VariableDeclarationStatement(), boolean, up, false, VariableDeclarationStatement(), Dfp, result, VariableDeclarationStatement(), Dfp, inc, IfStatement(if), this, lessThan, x, ExpressionStatement(), up, true, IfStatement(if), equals, x, ReturnStatement(return), newInstance, x, IfStatement(if), lessThan, getZero, ExpressionStatement(), up, up, IfStatement(if), up, ExpressionStatement(), inc, power10, intLog10, getDecimalDigits, 1, ExpressionStatement(), inc, copysign, inc, this, IfStatement(if), this, equals, getZero, ExpressionStatement(), inc, power10K, MIN_EXP, mant.length, 1, IfStatement(if), inc, equals, getZero, ExpressionStatement(), result, copysign, newInstance, getZero, this, ExpressionStatement(), result, add, inc, ExpressionStatement(), inc, power10, intLog10, ExpressionStatement(), inc, copysign, inc, this, IfStatement(if), this, equals, inc, ExpressionStatement(), inc, inc, divide, power10, getDecimalDigits, ExpressionStatement(), inc, inc, divide, power10, getDecimalDigits, 1, IfStatement(if), this, equals, getZero, ExpressionStatement(), inc, power10K, MIN_EXP, mant.length, 1, IfStatement(if), inc, equals, getZero, ExpressionStatement(), result, copysign, newInstance, getZero, this, ExpressionStatement(), result, subtract, inc, IfStatement(if), result, classify, INFINITE, this, classify, INFINITE, ExpressionStatement(), getField, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ExpressionStatement(), result, dotrap, DfpField.FLAG_INEXACT, trapName, x, result, IfStatement(if), result, equals, getZero, this, equals, getZero, false, ExpressionStatement(), getField, setIEEEFlagsBits, DfpField.FLAG_INEXACT, ExpressionStatement(), result, dotrap, DfpField.FLAG_INEXACT, trapName, x, result, ReturnStatement(return), result]
org.apache.commons.math4.dfp:DfpField:getRadixDigits:null#[ReturnStatement(return), radixDigits]
org.apache.commons.math4.dfp:DfpField:setRoundingMode:RoundingMode#[ExpressionStatement(), rMode, mode]
org.apache.commons.math4.dfp:DfpField:getRoundingMode:null#[ReturnStatement(return), rMode]
org.apache.commons.math4.dfp:DfpField:getIEEEFlags:null#[ReturnStatement(return), ieeeFlags]
org.apache.commons.math4.dfp:DfpField:clearIEEEFlags:null#[ExpressionStatement(), ieeeFlags, 0]
org.apache.commons.math4.dfp:DfpField:setIEEEFlags:int#[ExpressionStatement(), ieeeFlags, flags, FLAG_INVALID, FLAG_DIV_ZERO, FLAG_OVERFLOW, FLAG_UNDERFLOW, FLAG_INEXACT]
org.apache.commons.math4.dfp:DfpField:setIEEEFlagsBits:int#[ExpressionStatement(), ieeeFlags, bits, FLAG_INVALID, FLAG_DIV_ZERO, FLAG_OVERFLOW, FLAG_UNDERFLOW, FLAG_INEXACT]
org.apache.commons.math4.dfp:DfpField:newDfp:null#[ReturnStatement(return), new, Dfp, this]
org.apache.commons.math4.dfp:DfpField:newDfp:byte#[ReturnStatement(return), new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:int#[ReturnStatement(return), new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:long#[ReturnStatement(return), new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:double#[ReturnStatement(return), new, Dfp, this, x]
org.apache.commons.math4.dfp:DfpField:newDfp:Dfp#[ReturnStatement(return), new, Dfp, d]
org.apache.commons.math4.dfp:DfpField:newDfp:String#[ReturnStatement(return), new, Dfp, this, s]
org.apache.commons.math4.dfp:DfpField:newDfp:byte+byte#[ReturnStatement(return), new, Dfp, this, sign, nans]
org.apache.commons.math4.dfp:DfpField:getZero:null#[ReturnStatement(return), zero]
org.apache.commons.math4.dfp:DfpField:getOne:null#[ReturnStatement(return), one]
org.apache.commons.math4.dfp:DfpField:getRuntimeClass:null#[ReturnStatement(return), Dfp]
org.apache.commons.math4.dfp:DfpField:getTwo:null#[ReturnStatement(return), two]
org.apache.commons.math4.dfp:DfpField:getSqr2:null#[ReturnStatement(return), sqr2]
org.apache.commons.math4.dfp:DfpField:getSqr2Split:null#[ReturnStatement(return), sqr2Split, clone]
org.apache.commons.math4.dfp:DfpField:getSqr2Reciprocal:null#[ReturnStatement(return), sqr2Reciprocal]
org.apache.commons.math4.dfp:DfpField:getSqr3:null#[ReturnStatement(return), sqr3]
org.apache.commons.math4.dfp:DfpField:getSqr3Reciprocal:null#[ReturnStatement(return), sqr3Reciprocal]
org.apache.commons.math4.dfp:DfpField:getPi:null#[ReturnStatement(return), pi]
org.apache.commons.math4.dfp:DfpField:getPiSplit:null#[ReturnStatement(return), piSplit, clone]
org.apache.commons.math4.dfp:DfpField:getE:null#[ReturnStatement(return), e]
org.apache.commons.math4.dfp:DfpField:getESplit:null#[ReturnStatement(return), eSplit, clone]
org.apache.commons.math4.dfp:DfpField:getLn2:null#[ReturnStatement(return), ln2]
org.apache.commons.math4.dfp:DfpField:getLn2Split:null#[ReturnStatement(return), ln2Split, clone]
org.apache.commons.math4.dfp:DfpField:getLn5:null#[ReturnStatement(return), ln5]
org.apache.commons.math4.dfp:DfpField:getLn5Split:null#[ReturnStatement(return), ln5Split, clone]
org.apache.commons.math4.dfp:DfpField:getLn10:null#[ReturnStatement(return), ln10]
org.apache.commons.math4.dfp:DfpField:split:String#[VariableDeclarationStatement(), Dfp, result, Dfp, 2, VariableDeclarationStatement(), boolean, leading, true, VariableDeclarationStatement(), int, sp, 0, VariableDeclarationStatement(), int, sig, 0, VariableDeclarationStatement(), char, buf, char, a, length, ForStatement(for), int, i, 0, i, buf.length, i, ExpressionStatement(), buf, i, a, charAt, i, IfStatement(if), buf, i, '1', buf, i, '9', ExpressionStatement(), leading, false, IfStatement(if), buf, i, '.', ExpressionStatement(), sig, 400, sig, 4, ExpressionStatement(), leading, false, IfStatement(if), sig, radixDigits, 2, 4, ExpressionStatement(), sp, i, BreakStatement(break), IfStatement(if), buf, i, '0', buf, i, '9', leading, ExpressionStatement(), sig, ExpressionStatement(), result, 0, new, Dfp, this, new, String, buf, 0, sp, ForStatement(for), int, i, 0, i, buf.length, i, ExpressionStatement(), buf, i, a, charAt, i, IfStatement(if), buf, i, '0', buf, i, '9', i, sp, ExpressionStatement(), buf, i, '0', ExpressionStatement(), result, 1, new, Dfp, this, new, String, buf, ReturnStatement(return), result]
org.apache.commons.math4.dfp:DfpField:computeStringConstants:int#[IfStatement(if), sqr2String, null, sqr2String, length, highPrecisionDecimalDigits, 3, VariableDeclarationStatement(), final, DfpField, highPrecisionField, new, DfpField, highPrecisionDecimalDigits, false, VariableDeclarationStatement(), final, Dfp, highPrecisionOne, new, Dfp, highPrecisionField, 1, VariableDeclarationStatement(), final, Dfp, highPrecisionTwo, new, Dfp, highPrecisionField, 2, VariableDeclarationStatement(), final, Dfp, highPrecisionThree, new, Dfp, highPrecisionField, 3, VariableDeclarationStatement(), final, Dfp, highPrecisionSqr2, highPrecisionTwo, sqrt, ExpressionStatement(), sqr2String, highPrecisionSqr2, toString, ExpressionStatement(), sqr2ReciprocalString, highPrecisionOne, divide, highPrecisionSqr2, toString, VariableDeclarationStatement(), final, Dfp, highPrecisionSqr3, highPrecisionThree, sqrt, ExpressionStatement(), sqr3String, highPrecisionSqr3, toString, ExpressionStatement(), sqr3ReciprocalString, highPrecisionOne, divide, highPrecisionSqr3, toString, ExpressionStatement(), piString, computePi, highPrecisionOne, highPrecisionTwo, highPrecisionThree, toString, ExpressionStatement(), eString, computeExp, highPrecisionOne, highPrecisionOne, toString, ExpressionStatement(), ln2String, computeLn, highPrecisionTwo, highPrecisionOne, highPrecisionTwo, toString, ExpressionStatement(), ln5String, computeLn, new, Dfp, highPrecisionField, 5, highPrecisionOne, highPrecisionTwo, toString, ExpressionStatement(), ln10String, computeLn, new, Dfp, highPrecisionField, 10, highPrecisionOne, highPrecisionTwo, toString]
org.apache.commons.math4.dfp:DfpField:computePi:Dfp+Dfp+Dfp#[VariableDeclarationStatement(), Dfp, sqrt2, two, sqrt, VariableDeclarationStatement(), Dfp, yk, sqrt2, subtract, one, VariableDeclarationStatement(), Dfp, four, two, add, two, VariableDeclarationStatement(), Dfp, two2kp3, two, VariableDeclarationStatement(), Dfp, ak, two, multiply, three, subtract, two, multiply, sqrt2, ForStatement(for), int, i, 1, i, 20, i, VariableDeclarationStatement(), final, Dfp, ykM1, yk, VariableDeclarationStatement(), final, Dfp, y2, yk, multiply, yk, VariableDeclarationStatement(), final, Dfp, oneMinusY4, one, subtract, y2, multiply, y2, VariableDeclarationStatement(), final, Dfp, s, oneMinusY4, sqrt, sqrt, ExpressionStatement(), yk, one, subtract, s, divide, one, add, s, ExpressionStatement(), two2kp3, two2kp3, multiply, four, VariableDeclarationStatement(), final, Dfp, p, one, add, yk, VariableDeclarationStatement(), final, Dfp, p2, p, multiply, p, ExpressionStatement(), ak, ak, multiply, p2, multiply, p2, subtract, two2kp3, multiply, yk, multiply, one, add, yk, add, yk, multiply, yk, IfStatement(if), yk, equals, ykM1, BreakStatement(break), ReturnStatement(return), one, divide, ak]
org.apache.commons.math4.dfp:DfpField:computeExp:Dfp+Dfp#[VariableDeclarationStatement(), Dfp, y, new, Dfp, one, VariableDeclarationStatement(), Dfp, py, new, Dfp, one, VariableDeclarationStatement(), Dfp, f, new, Dfp, one, VariableDeclarationStatement(), Dfp, fi, new, Dfp, one, VariableDeclarationStatement(), Dfp, x, new, Dfp, one, ForStatement(for), int, i, 0, i, 10000, i, ExpressionStatement(), x, x, multiply, a, ExpressionStatement(), y, y, add, x, divide, f, ExpressionStatement(), fi, fi, add, one, ExpressionStatement(), f, f, multiply, fi, IfStatement(if), y, equals, py, BreakStatement(break), ExpressionStatement(), py, new, Dfp, y, ReturnStatement(return), y]
org.apache.commons.math4.dfp:DfpField:computeLn:Dfp+Dfp+Dfp#[VariableDeclarationStatement(), int, den, 1, VariableDeclarationStatement(), Dfp, x, a, add, new, Dfp, a, getField, 1, divide, a, add, one, VariableDeclarationStatement(), Dfp, y, new, Dfp, x, VariableDeclarationStatement(), Dfp, num, new, Dfp, x, VariableDeclarationStatement(), Dfp, py, new, Dfp, y, ForStatement(for), int, i, 0, i, 10000, i, ExpressionStatement(), num, num, multiply, x, ExpressionStatement(), num, num, multiply, x, ExpressionStatement(), den, 2, VariableDeclarationStatement(), Dfp, t, num, divide, den, ExpressionStatement(), y, y, add, t, IfStatement(if), y, equals, py, BreakStatement(break), ExpressionStatement(), py, new, Dfp, y, ReturnStatement(return), y, multiply, two]
org.apache.commons.math4.dfp:DfpMath:split:DfpField+String#[VariableDeclarationStatement(), Dfp, result, Dfp, 2, VariableDeclarationStatement(), char, buf, VariableDeclarationStatement(), boolean, leading, true, VariableDeclarationStatement(), int, sp, 0, VariableDeclarationStatement(), int, sig, 0, ExpressionStatement(), buf, char, a, length, ForStatement(for), int, i, 0, i, buf.length, i, ExpressionStatement(), buf, i, a, charAt, i, IfStatement(if), buf, i, '1', buf, i, '9', ExpressionStatement(), leading, false, IfStatement(if), buf, i, '.', ExpressionStatement(), sig, 400, sig, 4, ExpressionStatement(), leading, false, IfStatement(if), sig, field, getRadixDigits, 2, 4, ExpressionStatement(), sp, i, BreakStatement(break), IfStatement(if), buf, i, '0', buf, i, '9', leading, ExpressionStatement(), sig, ExpressionStatement(), result, 0, field, newDfp, new, String, buf, 0, sp, ForStatement(for), int, i, 0, i, buf.length, i, ExpressionStatement(), buf, i, a, charAt, i, IfStatement(if), buf, i, '0', buf, i, '9', i, sp, ExpressionStatement(), buf, i, '0', ExpressionStatement(), result, 1, field, newDfp, new, String, buf, ReturnStatement(return), result]
org.apache.commons.math4.dfp:DfpMath:split:Dfp#[VariableDeclarationStatement(), final, Dfp, result, Dfp, 2, VariableDeclarationStatement(), final, Dfp, shift, a, multiply, a, power10K, a, getRadixDigits, 2, ExpressionStatement(), result, 0, a, add, shift, subtract, shift, ExpressionStatement(), result, 1, a, subtract, result, 0, ReturnStatement(return), result]
org.apache.commons.math4.dfp:DfpMath:splitMult:Dfp[]+Dfp[]#[VariableDeclarationStatement(), final, Dfp, result, Dfp, 2, ExpressionStatement(), result, 1, a, 0, getZero, ExpressionStatement(), result, 0, a, 0, multiply, b, 0, IfStatement(if), result, 0, classify, Dfp.INFINITE, result, 0, equals, result, 1, ReturnStatement(return), result, ExpressionStatement(), result, 1, a, 0, multiply, b, 1, add, a, 1, multiply, b, 0, add, a, 1, multiply, b, 1, ReturnStatement(return), result]
org.apache.commons.math4.dfp:DfpMath:splitDiv:Dfp[]+Dfp[]#[VariableDeclarationStatement(), final, Dfp, result, ExpressionStatement(), result, Dfp, 2, ExpressionStatement(), result, 0, a, 0, divide, b, 0, ExpressionStatement(), result, 1, a, 1, multiply, b, 0, subtract, a, 0, multiply, b, 1, ExpressionStatement(), result, 1, result, 1, divide, b, 0, multiply, b, 0, add, b, 0, multiply, b, 1, ReturnStatement(return), result]
org.apache.commons.math4.dfp:DfpMath:splitPow:Dfp[]+int#[VariableDeclarationStatement(), boolean, invert, false, VariableDeclarationStatement(), Dfp, r, Dfp, 2, VariableDeclarationStatement(), Dfp, result, Dfp, 2, ExpressionStatement(), result, 0, base, 0, getOne, ExpressionStatement(), result, 1, base, 0, getZero, IfStatement(if), a, 0, ReturnStatement(return), result, 0, add, result, 1, IfStatement(if), a, 0, ExpressionStatement(), invert, true, ExpressionStatement(), a, a, DoStatement(do), ExpressionStatement(), r, 0, new, Dfp, base, 0, ExpressionStatement(), r, 1, new, Dfp, base, 1, VariableDeclarationStatement(), int, trial, 1, VariableDeclarationStatement(), int, prevtrial, WhileStatement(while), true, ExpressionStatement(), prevtrial, trial, ExpressionStatement(), trial, 2, IfStatement(if), trial, a, BreakStatement(break), ExpressionStatement(), r, splitMult, r, r, ExpressionStatement(), trial, prevtrial, ExpressionStatement(), a, trial, ExpressionStatement(), result, splitMult, result, r, a, 1, ExpressionStatement(), result, 0, result, 0, add, result, 1, IfStatement(if), invert, ExpressionStatement(), result, 0, base, 0, getOne, divide, result, 0, ReturnStatement(return), result, 0]
org.apache.commons.math4.dfp:DfpMath:pow:Dfp+int#[VariableDeclarationStatement(), boolean, invert, false, VariableDeclarationStatement(), Dfp, result, base, getOne, IfStatement(if), a, 0, ReturnStatement(return), result, IfStatement(if), a, 0, ExpressionStatement(), invert, true, ExpressionStatement(), a, a, DoStatement(do), VariableDeclarationStatement(), Dfp, r, new, Dfp, base, VariableDeclarationStatement(), Dfp, prevr, VariableDeclarationStatement(), int, trial, 1, VariableDeclarationStatement(), int, prevtrial, DoStatement(do), ExpressionStatement(), prevr, new, Dfp, r, ExpressionStatement(), prevtrial, trial, ExpressionStatement(), r, r, multiply, r, ExpressionStatement(), trial, 2, a, trial, ExpressionStatement(), r, prevr, ExpressionStatement(), trial, prevtrial, ExpressionStatement(), a, trial, ExpressionStatement(), result, result, multiply, r, a, 1, IfStatement(if), invert, ExpressionStatement(), result, base, getOne, divide, result, ReturnStatement(return), base, newInstance, result]
org.apache.commons.math4.dfp:DfpMath:exp:Dfp#[VariableDeclarationStatement(), final, Dfp, inta, a, rint, VariableDeclarationStatement(), final, Dfp, fraca, a, subtract, inta, VariableDeclarationStatement(), final, int, ia, inta, intValue, IfStatement(if), ia, 2147483646, ReturnStatement(return), a, newInstance, byte, 1, Dfp.INFINITE, IfStatement(if), ia, 2147483646, ReturnStatement(return), a, newInstance, VariableDeclarationStatement(), final, Dfp, einta, splitPow, a, getField, getESplit, ia, VariableDeclarationStatement(), final, Dfp, efraca, expInternal, fraca, ReturnStatement(return), einta, multiply, efraca]
org.apache.commons.math4.dfp:DfpMath:expInternal:Dfp#[VariableDeclarationStatement(), Dfp, y, a, getOne, VariableDeclarationStatement(), Dfp, x, a, getOne, VariableDeclarationStatement(), Dfp, fact, a, getOne, VariableDeclarationStatement(), Dfp, py, new, Dfp, y, ForStatement(for), int, i, 1, i, 90, i, ExpressionStatement(), x, x, multiply, a, ExpressionStatement(), fact, fact, divide, i, ExpressionStatement(), y, y, add, x, multiply, fact, IfStatement(if), y, equals, py, BreakStatement(break), ExpressionStatement(), py, new, Dfp, y, ReturnStatement(return), y]
org.apache.commons.math4.dfp:DfpMath:log:Dfp#[VariableDeclarationStatement(), int, lr, VariableDeclarationStatement(), Dfp, x, VariableDeclarationStatement(), int, ix, VariableDeclarationStatement(), int, p2, 0, IfStatement(if), a, equals, a, getZero, a, lessThan, a, getZero, a, isNaN, ExpressionStatement(), a, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, ReturnStatement(return), a, dotrap, DfpField.FLAG_INVALID, "ln", a, a, newInstance, byte, 1, Dfp.QNAN, IfStatement(if), a, classify, Dfp.INFINITE, ReturnStatement(return), a, ExpressionStatement(), x, new, Dfp, a, ExpressionStatement(), lr, x, log10K, ExpressionStatement(), x, x, divide, pow, a, newInstance, 10000, lr, ExpressionStatement(), ix, x, floor, intValue, WhileStatement(while), ix, 2, ExpressionStatement(), ix, 1, ExpressionStatement(), p2, VariableDeclarationStatement(), Dfp, spx, split, x, VariableDeclarationStatement(), Dfp, spy, Dfp, 2, ExpressionStatement(), spy, 0, pow, a, getTwo, p2, ExpressionStatement(), spx, 0, spx, 0, divide, spy, 0, ExpressionStatement(), spx, 1, spx, 1, divide, spy, 0, ExpressionStatement(), spy, 0, a, newInstance, "1.33333", WhileStatement(while), spx, 0, add, spx, 1, greaterThan, spy, 0, ExpressionStatement(), spx, 0, spx, 0, divide, 2, ExpressionStatement(), spx, 1, spx, 1, divide, 2, ExpressionStatement(), p2, VariableDeclarationStatement(), Dfp, spz, logInternal, spx, ExpressionStatement(), spx, 0, a, newInstance, new, StringBuilder, append, p2, 4, lr, toString, ExpressionStatement(), spx, 1, a, getZero, ExpressionStatement(), spy, splitMult, a, getField, getLn2Split, spx, ExpressionStatement(), spz, 0, spz, 0, add, spy, 0, ExpressionStatement(), spz, 1, spz, 1, add, spy, 1, ExpressionStatement(), spx, 0, a, newInstance, new, StringBuilder, append, 4, lr, toString, ExpressionStatement(), spx, 1, a, getZero, ExpressionStatement(), spy, splitMult, a, getField, getLn5Split, spx, ExpressionStatement(), spz, 0, spz, 0, add, spy, 0, ExpressionStatement(), spz, 1, spz, 1, add, spy, 1, ReturnStatement(return), a, newInstance, spz, 0, add, spz, 1]
org.apache.commons.math4.dfp:DfpMath:logInternal:Dfp#[VariableDeclarationStatement(), Dfp, t, a, 0, divide, 4, add, a, 1, divide, 4, VariableDeclarationStatement(), Dfp, x, t, add, a, 0, newInstance, "-0.25", divide, t, add, a, 0, newInstance, "0.25", VariableDeclarationStatement(), Dfp, y, new, Dfp, x, VariableDeclarationStatement(), Dfp, num, new, Dfp, x, VariableDeclarationStatement(), Dfp, py, new, Dfp, y, VariableDeclarationStatement(), int, den, 1, ForStatement(for), int, i, 0, i, 10000, i, ExpressionStatement(), num, num, multiply, x, ExpressionStatement(), num, num, multiply, x, ExpressionStatement(), den, 2, ExpressionStatement(), t, num, divide, den, ExpressionStatement(), y, y, add, t, IfStatement(if), y, equals, py, BreakStatement(break), ExpressionStatement(), py, new, Dfp, y, ExpressionStatement(), y, y, multiply, a, 0, getTwo, ReturnStatement(return), split, y]
org.apache.commons.math4.dfp:DfpMath:pow:Dfp+Dfp#[IfStatement(if), x, getField, getRadixDigits, y, getField, getRadixDigits, ExpressionStatement(), x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, VariableDeclarationStatement(), final, Dfp, result, x, newInstance, x, getZero, ExpressionStatement(), result.nans, Dfp.QNAN, ReturnStatement(return), x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, result, VariableDeclarationStatement(), final, Dfp, zero, x, getZero, VariableDeclarationStatement(), final, Dfp, one, x, getOne, VariableDeclarationStatement(), final, Dfp, two, x, getTwo, VariableDeclarationStatement(), boolean, invert, false, VariableDeclarationStatement(), int, ui, IfStatement(if), y, equals, zero, ReturnStatement(return), x, newInstance, one, IfStatement(if), y, equals, one, IfStatement(if), x, isNaN, ExpressionStatement(), x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, ReturnStatement(return), x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, ReturnStatement(return), x, IfStatement(if), x, isNaN, y, isNaN, ExpressionStatement(), x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, ReturnStatement(return), x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, newInstance, byte, 1, Dfp.QNAN, IfStatement(if), x, equals, zero, IfStatement(if), Dfp, copysign, one, x, greaterThan, zero, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), x, newInstance, zero, ReturnStatement(return), x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, IfStatement(if), y, classify, Dfp.FINITE, y, rint, equals, y, y, remainder, two, equals, zero, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), x, newInstance, zero, negate, ReturnStatement(return), x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), x, newInstance, zero, ReturnStatement(return), x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, IfStatement(if), x, lessThan, zero, ExpressionStatement(), x, x, negate, ExpressionStatement(), invert, true, IfStatement(if), x, greaterThan, one, y, classify, Dfp.INFINITE, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), y, ReturnStatement(return), x, newInstance, zero, IfStatement(if), x, lessThan, one, y, classify, Dfp.INFINITE, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), x, newInstance, zero, ReturnStatement(return), x, newInstance, Dfp, copysign, y, one, IfStatement(if), x, equals, one, y, classify, Dfp.INFINITE, ExpressionStatement(), x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, ReturnStatement(return), x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, newInstance, byte, 1, Dfp.QNAN, IfStatement(if), x, classify, Dfp.INFINITE, IfStatement(if), invert, IfStatement(if), y, classify, Dfp.FINITE, y, rint, equals, y, y, remainder, two, equals, zero, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, ReturnStatement(return), x, newInstance, zero, negate, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), x, newInstance, x, newInstance, byte, 1, Dfp.INFINITE, ReturnStatement(return), x, newInstance, zero, IfStatement(if), y, greaterThan, zero, ReturnStatement(return), x, ReturnStatement(return), x, newInstance, zero, IfStatement(if), invert, y, rint, equals, y, ExpressionStatement(), x, getField, setIEEEFlagsBits, DfpField.FLAG_INVALID, ReturnStatement(return), x, dotrap, DfpField.FLAG_INVALID, POW_TRAP, x, x, newInstance, byte, 1, Dfp.QNAN, VariableDeclarationStatement(), Dfp, r, IfStatement(if), y, lessThan, x, newInstance, 100000000, y, greaterThan, x, newInstance, 100000000, VariableDeclarationStatement(), final, Dfp, u, y, rint, ExpressionStatement(), ui, u, intValue, VariableDeclarationStatement(), final, Dfp, v, y, subtract, u, IfStatement(if), v, unequal, zero, VariableDeclarationStatement(), final, Dfp, a, v, multiply, log, x, VariableDeclarationStatement(), final, Dfp, b, a, divide, x, getField, getLn2, rint, VariableDeclarationStatement(), final, Dfp, c, a, subtract, b, multiply, x, getField, getLn2, ExpressionStatement(), r, splitPow, split, x, ui, ExpressionStatement(), r, r, multiply, pow, two, b, intValue, ExpressionStatement(), r, r, multiply, exp, c, ExpressionStatement(), r, splitPow, split, x, ui, ExpressionStatement(), r, exp, log, x, multiply, y, IfStatement(if), invert, y, rint, equals, y, y, remainder, two, equals, zero, ExpressionStatement(), r, r, negate, ReturnStatement(return), x, newInstance, r]
org.apache.commons.math4.dfp:DfpMath:sinInternal:Dfp#[VariableDeclarationStatement(), Dfp, c, a, 0, add, a, 1, VariableDeclarationStatement(), Dfp, y, c, ExpressionStatement(), c, c, multiply, c, VariableDeclarationStatement(), Dfp, x, y, VariableDeclarationStatement(), Dfp, fact, a, 0, getOne, VariableDeclarationStatement(), Dfp, py, new, Dfp, y, ForStatement(for), int, i, 3, i, 90, i, 2, ExpressionStatement(), x, x, multiply, c, ExpressionStatement(), x, x, negate, ExpressionStatement(), fact, fact, divide, i, 1, i, ExpressionStatement(), y, y, add, x, multiply, fact, IfStatement(if), y, equals, py, BreakStatement(break), ExpressionStatement(), py, new, Dfp, y, ReturnStatement(return), y]
org.apache.commons.math4.dfp:DfpMath:cosInternal:Dfp#[VariableDeclarationStatement(), final, Dfp, one, a, 0, getOne, VariableDeclarationStatement(), Dfp, x, one, VariableDeclarationStatement(), Dfp, y, one, VariableDeclarationStatement(), Dfp, c, a, 0, add, a, 1, ExpressionStatement(), c, c, multiply, c, VariableDeclarationStatement(), Dfp, fact, one, VariableDeclarationStatement(), Dfp, py, new, Dfp, y, ForStatement(for), int, i, 2, i, 90, i, 2, ExpressionStatement(), x, x, multiply, c, ExpressionStatement(), x, x, negate, ExpressionStatement(), fact, fact, divide, i, 1, i, ExpressionStatement(), y, y, add, x, multiply, fact, IfStatement(if), y, equals, py, BreakStatement(break), ExpressionStatement(), py, new, Dfp, y, ReturnStatement(return), y]
org.apache.commons.math4.dfp:DfpMath:sin:Dfp#[VariableDeclarationStatement(), final, Dfp, pi, a, getField, getPi, VariableDeclarationStatement(), final, Dfp, zero, a, getField, getZero, VariableDeclarationStatement(), boolean, neg, false, VariableDeclarationStatement(), Dfp, x, a, remainder, pi, multiply, 2, IfStatement(if), x, lessThan, zero, ExpressionStatement(), x, x, negate, ExpressionStatement(), neg, true, IfStatement(if), x, greaterThan, pi, divide, 2, ExpressionStatement(), x, pi, subtract, x, VariableDeclarationStatement(), Dfp, y, IfStatement(if), x, lessThan, pi, divide, 4, ExpressionStatement(), y, sinInternal, split, x, VariableDeclarationStatement(), final, Dfp, c, Dfp, 2, VariableDeclarationStatement(), final, Dfp, piSplit, a, getField, getPiSplit, ExpressionStatement(), c, 0, piSplit, 0, divide, 2, subtract, x, ExpressionStatement(), c, 1, piSplit, 1, divide, 2, ExpressionStatement(), y, cosInternal, c, IfStatement(if), neg, ExpressionStatement(), y, y, negate, ReturnStatement(return), a, newInstance, y]
org.apache.commons.math4.dfp:DfpMath:cos:Dfp#[VariableDeclarationStatement(), final, Dfp, pi, a, getField, getPi, VariableDeclarationStatement(), final, Dfp, zero, a, getField, getZero, VariableDeclarationStatement(), boolean, neg, false, VariableDeclarationStatement(), Dfp, x, a, remainder, pi, multiply, 2, IfStatement(if), x, lessThan, zero, ExpressionStatement(), x, x, negate, IfStatement(if), x, greaterThan, pi, divide, 2, ExpressionStatement(), x, pi, subtract, x, ExpressionStatement(), neg, true, VariableDeclarationStatement(), Dfp, y, IfStatement(if), x, lessThan, pi, divide, 4, VariableDeclarationStatement(), Dfp, c, Dfp, 2, ExpressionStatement(), c, 0, x, ExpressionStatement(), c, 1, zero, ExpressionStatement(), y, cosInternal, c, VariableDeclarationStatement(), final, Dfp, c, Dfp, 2, VariableDeclarationStatement(), final, Dfp, piSplit, a, getField, getPiSplit, ExpressionStatement(), c, 0, piSplit, 0, divide, 2, subtract, x, ExpressionStatement(), c, 1, piSplit, 1, divide, 2, ExpressionStatement(), y, sinInternal, c, IfStatement(if), neg, ExpressionStatement(), y, y, negate, ReturnStatement(return), a, newInstance, y]
org.apache.commons.math4.dfp:DfpMath:tan:Dfp#[ReturnStatement(return), sin, a, divide, cos, a]
org.apache.commons.math4.dfp:DfpMath:atanInternal:Dfp#[VariableDeclarationStatement(), Dfp, y, new, Dfp, a, VariableDeclarationStatement(), Dfp, x, new, Dfp, y, VariableDeclarationStatement(), Dfp, py, new, Dfp, y, ForStatement(for), int, i, 3, i, 90, i, 2, ExpressionStatement(), x, x, multiply, a, ExpressionStatement(), x, x, multiply, a, ExpressionStatement(), x, x, negate, ExpressionStatement(), y, y, add, x, divide, i, IfStatement(if), y, equals, py, BreakStatement(break), ExpressionStatement(), py, new, Dfp, y, ReturnStatement(return), y]
org.apache.commons.math4.dfp:DfpMath:atan:Dfp#[VariableDeclarationStatement(), final, Dfp, zero, a, getField, getZero, VariableDeclarationStatement(), final, Dfp, one, a, getField, getOne, VariableDeclarationStatement(), final, Dfp, sqr2Split, a, getField, getSqr2Split, VariableDeclarationStatement(), final, Dfp, piSplit, a, getField, getPiSplit, VariableDeclarationStatement(), boolean, recp, false, VariableDeclarationStatement(), boolean, neg, false, VariableDeclarationStatement(), boolean, sub, false, VariableDeclarationStatement(), final, Dfp, ty, sqr2Split, 0, subtract, one, add, sqr2Split, 1, VariableDeclarationStatement(), Dfp, x, new, Dfp, a, IfStatement(if), x, lessThan, zero, ExpressionStatement(), neg, true, ExpressionStatement(), x, x, negate, IfStatement(if), x, greaterThan, one, ExpressionStatement(), recp, true, ExpressionStatement(), x, one, divide, x, IfStatement(if), x, greaterThan, ty, VariableDeclarationStatement(), Dfp, sty, Dfp, 2, ExpressionStatement(), sub, true, ExpressionStatement(), sty, 0, sqr2Split, 0, subtract, one, ExpressionStatement(), sty, 1, sqr2Split, 1, VariableDeclarationStatement(), Dfp, xs, split, x, VariableDeclarationStatement(), Dfp, ds, splitMult, xs, sty, ExpressionStatement(), ds, 0, ds, 0, add, one, ExpressionStatement(), xs, 0, xs, 0, subtract, sty, 0, ExpressionStatement(), xs, 1, xs, 1, subtract, sty, 1, ExpressionStatement(), xs, splitDiv, xs, ds, ExpressionStatement(), x, xs, 0, add, xs, 1, VariableDeclarationStatement(), Dfp, y, atanInternal, x, IfStatement(if), sub, ExpressionStatement(), y, y, add, piSplit, 0, divide, 8, add, piSplit, 1, divide, 8, IfStatement(if), recp, ExpressionStatement(), y, piSplit, 0, divide, 2, subtract, y, add, piSplit, 1, divide, 2, IfStatement(if), neg, ExpressionStatement(), y, y, negate, ReturnStatement(return), a, newInstance, y]
org.apache.commons.math4.dfp:DfpMath:asin:Dfp#[ReturnStatement(return), atan, a, divide, a, getOne, subtract, a, multiply, a, sqrt]
org.apache.commons.math4.dfp:DfpMath:acos:Dfp#[VariableDeclarationStatement(), Dfp, result, VariableDeclarationStatement(), boolean, negative, false, IfStatement(if), a, lessThan, a, getZero, ExpressionStatement(), negative, true, ExpressionStatement(), a, Dfp, copysign, a, a, getOne, ExpressionStatement(), result, atan, a, getOne, subtract, a, multiply, a, sqrt, divide, a, IfStatement(if), negative, ExpressionStatement(), result, a, getField, getPi, subtract, result, ReturnStatement(return), a, newInstance, result]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:probability:int+int#[IfStatement(if), x1, x0, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, ReturnStatement(return), cumulativeProbability, x1, cumulativeProbability, x0]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, VariableDeclarationStatement(), int, lower, getSupportLowerBound, IfStatement(if), p, 0.0, ReturnStatement(return), lower, IfStatement(if), lower, Integer.MIN_VALUE, IfStatement(if), checkedCumulativeProbability, lower, p, ReturnStatement(return), lower, ExpressionStatement(), lower, 1, VariableDeclarationStatement(), int, upper, getSupportUpperBound, IfStatement(if), p, 1.0, ReturnStatement(return), upper, VariableDeclarationStatement(), final, double, mu, getNumericalMean, VariableDeclarationStatement(), final, double, sigma, FastMath, sqrt, getNumericalVariance, VariableDeclarationStatement(), final, boolean, chebyshevApplies, Double, isInfinite, mu, Double, isNaN, mu, Double, isInfinite, sigma, Double, isNaN, sigma, sigma, 0.0, IfStatement(if), chebyshevApplies, VariableDeclarationStatement(), double, k, FastMath, sqrt, 1.0, p, p, VariableDeclarationStatement(), double, tmp, mu, k, sigma, IfStatement(if), tmp, lower, ExpressionStatement(), lower, int, FastMath, ceil, tmp, 1, ExpressionStatement(), k, 1.0, k, ExpressionStatement(), tmp, mu, k, sigma, IfStatement(if), tmp, upper, ExpressionStatement(), upper, int, FastMath, ceil, tmp, 1, ReturnStatement(return), solveInverseCumulativeProbability, p, lower, upper]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:solveInverseCumulativeProbability:double+int+int#[WhileStatement(while), lower, 1, upper, VariableDeclarationStatement(), int, xm, lower, upper, 2, IfStatement(if), xm, lower, xm, upper, ExpressionStatement(), xm, lower, upper, lower, 2, VariableDeclarationStatement(), double, pm, checkedCumulativeProbability, xm, IfStatement(if), pm, p, ExpressionStatement(), upper, xm, ExpressionStatement(), lower, xm, ReturnStatement(return), upper]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:reseedRandomGenerator:long#[ExpressionStatement(), random, setSeed, seed]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:sample:null#[ReturnStatement(return), inverseCumulativeProbability, random, nextDouble]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:sample:int#[IfStatement(if), sampleSize, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, VariableDeclarationStatement(), int, out, int, sampleSize, ForStatement(for), int, i, 0, i, sampleSize, i, ExpressionStatement(), out, i, sample, ReturnStatement(return), out]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:checkedCumulativeProbability:int#[VariableDeclarationStatement(), double, result, Double.NaN, ExpressionStatement(), result, cumulativeProbability, argument, IfStatement(if), Double, isNaN, result, ThrowStatement(throw), new, MathInternalError, LocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument, ReturnStatement(return), result]
org.apache.commons.math4.distribution:AbstractIntegerDistribution:logProbability:int#[ReturnStatement(return), FastMath, log, probability, x]
org.apache.commons.math4.distribution:AbstractMultivariateRealDistribution:reseedRandomGenerator:long#[ExpressionStatement(), random, setSeed, seed]
org.apache.commons.math4.distribution:AbstractMultivariateRealDistribution:getDimension:null#[ReturnStatement(return), dimension]
org.apache.commons.math4.distribution:AbstractMultivariateRealDistribution:sample:int#[IfStatement(if), sampleSize, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, VariableDeclarationStatement(), final, double, out, double, sampleSize, dimension, ForStatement(for), int, i, 0, i, sampleSize, i, ExpressionStatement(), out, i, sample, ReturnStatement(return), out]
org.apache.commons.math4.distribution:AbstractRealDistribution:probability:double+double#[IfStatement(if), x0, x1, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, ReturnStatement(return), cumulativeProbability, x1, cumulativeProbability, x0]
org.apache.commons.math4.distribution:AbstractRealDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, VariableDeclarationStatement(), double, lowerBound, getSupportLowerBound, IfStatement(if), p, 0.0, ReturnStatement(return), lowerBound, VariableDeclarationStatement(), double, upperBound, getSupportUpperBound, IfStatement(if), p, 1.0, ReturnStatement(return), upperBound, VariableDeclarationStatement(), final, double, mu, getNumericalMean, VariableDeclarationStatement(), final, double, sig, FastMath, sqrt, getNumericalVariance, VariableDeclarationStatement(), final, boolean, chebyshevApplies, ExpressionStatement(), chebyshevApplies, Double, isInfinite, mu, Double, isNaN, mu, Double, isInfinite, sig, Double, isNaN, sig, IfStatement(if), lowerBound, Double.NEGATIVE_INFINITY, IfStatement(if), chebyshevApplies, ExpressionStatement(), lowerBound, mu, sig, FastMath, sqrt, 1., p, p, ExpressionStatement(), lowerBound, 1.0, WhileStatement(while), cumulativeProbability, lowerBound, p, ExpressionStatement(), lowerBound, 2.0, IfStatement(if), upperBound, Double.POSITIVE_INFINITY, IfStatement(if), chebyshevApplies, ExpressionStatement(), upperBound, mu, sig, FastMath, sqrt, p, 1., p, ExpressionStatement(), upperBound, 1.0, WhileStatement(while), cumulativeProbability, upperBound, p, ExpressionStatement(), upperBound, 2.0, VariableDeclarationStatement(), final, UnivariateFunction, toSolve, new, UnivariateFunction, Override, public, double, value, final, double, x, ReturnStatement(return), cumulativeProbability, x, p, VariableDeclarationStatement(), double, x, UnivariateSolverUtils, solve, toSolve, lowerBound, upperBound, getSolverAbsoluteAccuracy, IfStatement(if), isSupportConnected, VariableDeclarationStatement(), final, double, dx, getSolverAbsoluteAccuracy, IfStatement(if), x, dx, getSupportLowerBound, VariableDeclarationStatement(), double, px, cumulativeProbability, x, IfStatement(if), cumulativeProbability, x, dx, px, ExpressionStatement(), upperBound, x, WhileStatement(while), upperBound, lowerBound, dx, VariableDeclarationStatement(), final, double, midPoint, 0.5, lowerBound, upperBound, IfStatement(if), cumulativeProbability, midPoint, px, ExpressionStatement(), lowerBound, midPoint, ExpressionStatement(), upperBound, midPoint, ReturnStatement(return), upperBound, ReturnStatement(return), x]
org.apache.commons.math4.distribution:AbstractRealDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), SOLVER_DEFAULT_ABSOLUTE_ACCURACY]
org.apache.commons.math4.distribution:AbstractRealDistribution:reseedRandomGenerator:long#[ExpressionStatement(), random, setSeed, seed]
org.apache.commons.math4.distribution:AbstractRealDistribution:sample:null#[ReturnStatement(return), inverseCumulativeProbability, random, nextDouble]
org.apache.commons.math4.distribution:AbstractRealDistribution:sample:int#[IfStatement(if), sampleSize, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, VariableDeclarationStatement(), double, out, double, sampleSize, ForStatement(for), int, i, 0, i, sampleSize, i, ExpressionStatement(), out, i, sample, ReturnStatement(return), out]
org.apache.commons.math4.distribution:AbstractRealDistribution:probability:double#[ReturnStatement(return), 0d]
org.apache.commons.math4.distribution:AbstractRealDistribution:logDensity:double#[ReturnStatement(return), FastMath, log, density, x]
org.apache.commons.math4.distribution:BetaDistribution:getAlpha:null#[ReturnStatement(return), alpha]
org.apache.commons.math4.distribution:BetaDistribution:getBeta:null#[ReturnStatement(return), beta]
org.apache.commons.math4.distribution:BetaDistribution:recomputeZ:null#[IfStatement(if), Double, isNaN, z, ExpressionStatement(), z, Gamma, logGamma, alpha, Gamma, logGamma, beta, Gamma, logGamma, alpha, beta]
org.apache.commons.math4.distribution:BetaDistribution:density:double#[VariableDeclarationStatement(), final, double, logDensity, logDensity, x, ReturnStatement(return), logDensity, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logDensity]
org.apache.commons.math4.distribution:BetaDistribution:logDensity:double#[ExpressionStatement(), recomputeZ, IfStatement(if), x, 0, x, 1, ReturnStatement(return), Double.NEGATIVE_INFINITY, IfStatement(if), x, 0, IfStatement(if), alpha, 1, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha, 1, false, ReturnStatement(return), Double.NEGATIVE_INFINITY, IfStatement(if), x, 1, IfStatement(if), beta, 1, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta, 1, false, ReturnStatement(return), Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), double, logX, FastMath, log, x, VariableDeclarationStatement(), double, log1mX, FastMath, log1p, x, ReturnStatement(return), alpha, 1, logX, beta, 1, log1mX, z]
org.apache.commons.math4.distribution:BetaDistribution:cumulativeProbability:double#[IfStatement(if), x, 0, ReturnStatement(return), 0, IfStatement(if), x, 1, ReturnStatement(return), 1, ReturnStatement(return), Beta, regularizedBeta, x, alpha, beta]
org.apache.commons.math4.distribution:BetaDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:BetaDistribution:getNumericalMean:null#[VariableDeclarationStatement(), final, double, a, getAlpha, ReturnStatement(return), a, a, getBeta]
org.apache.commons.math4.distribution:BetaDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), final, double, a, getAlpha, VariableDeclarationStatement(), final, double, b, getBeta, VariableDeclarationStatement(), final, double, alphabetasum, a, b, ReturnStatement(return), a, b, alphabetasum, alphabetasum, alphabetasum, 1]
org.apache.commons.math4.distribution:BetaDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:BetaDistribution:getSupportUpperBound:null#[ReturnStatement(return), 1]
org.apache.commons.math4.distribution:BetaDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:BetaDistribution:sample:null#[ReturnStatement(return), ChengBetaSampler, sample, random, alpha, beta]
org.apache.commons.math4.distribution:BinomialDistribution:getNumberOfTrials:null#[ReturnStatement(return), numberOfTrials]
org.apache.commons.math4.distribution:BinomialDistribution:getProbabilityOfSuccess:null#[ReturnStatement(return), probabilityOfSuccess]
org.apache.commons.math4.distribution:BinomialDistribution:probability:int#[VariableDeclarationStatement(), final, double, logProbability, logProbability, x, ReturnStatement(return), logProbability, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logProbability]
org.apache.commons.math4.distribution:BinomialDistribution:logProbability:int#[IfStatement(if), numberOfTrials, 0, ReturnStatement(return), x, 0, 0., Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, x, numberOfTrials, ExpressionStatement(), ret, Double.NEGATIVE_INFINITY, ExpressionStatement(), ret, SaddlePointExpansion, logBinomialProbability, x, numberOfTrials, probabilityOfSuccess, 1.0, probabilityOfSuccess, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:BinomialDistribution:cumulativeProbability:int#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, ExpressionStatement(), ret, 0.0, IfStatement(if), x, numberOfTrials, ExpressionStatement(), ret, 1.0, ExpressionStatement(), ret, 1.0, Beta, regularizedBeta, probabilityOfSuccess, x, 1.0, numberOfTrials, x, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:BinomialDistribution:getNumericalMean:null#[ReturnStatement(return), numberOfTrials, probabilityOfSuccess]
org.apache.commons.math4.distribution:BinomialDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), final, double, p, probabilityOfSuccess, ReturnStatement(return), numberOfTrials, p, 1, p]
org.apache.commons.math4.distribution:BinomialDistribution:getSupportLowerBound:null#[ReturnStatement(return), probabilityOfSuccess, 1.0, 0, numberOfTrials]
org.apache.commons.math4.distribution:BinomialDistribution:getSupportUpperBound:null#[ReturnStatement(return), probabilityOfSuccess, 0.0, numberOfTrials, 0]
org.apache.commons.math4.distribution:BinomialDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:CauchyDistribution:cumulativeProbability:double#[ReturnStatement(return), 0.5, FastMath, atan, x, median, scale, FastMath.PI]
org.apache.commons.math4.distribution:CauchyDistribution:getMedian:null#[ReturnStatement(return), median]
org.apache.commons.math4.distribution:CauchyDistribution:getScale:null#[ReturnStatement(return), scale]
org.apache.commons.math4.distribution:CauchyDistribution:density:double#[VariableDeclarationStatement(), final, double, dev, x, median, ReturnStatement(return), 1, FastMath.PI, scale, dev, dev, scale, scale]
org.apache.commons.math4.distribution:CauchyDistribution:inverseCumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), p, 0, p, 1, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, IfStatement(if), p, 0, ExpressionStatement(), ret, Double.NEGATIVE_INFINITY, IfStatement(if), p, 1, ExpressionStatement(), ret, Double.POSITIVE_INFINITY, ExpressionStatement(), ret, median, scale, FastMath, tan, FastMath.PI, p, .5, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:CauchyDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:CauchyDistribution:getNumericalMean:null#[ReturnStatement(return), Double.NaN]
org.apache.commons.math4.distribution:CauchyDistribution:getNumericalVariance:null#[ReturnStatement(return), Double.NaN]
org.apache.commons.math4.distribution:CauchyDistribution:getSupportLowerBound:null#[ReturnStatement(return), Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:CauchyDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:CauchyDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getDegreesOfFreedom:null#[ReturnStatement(return), gamma, getShape, 2.0]
org.apache.commons.math4.distribution:ChiSquaredDistribution:density:double#[ReturnStatement(return), gamma, density, x]
org.apache.commons.math4.distribution:ChiSquaredDistribution:logDensity:double#[ReturnStatement(return), gamma, logDensity, x]
org.apache.commons.math4.distribution:ChiSquaredDistribution:cumulativeProbability:double#[ReturnStatement(return), gamma, cumulativeProbability, x]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getNumericalMean:null#[ReturnStatement(return), getDegreesOfFreedom]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getNumericalVariance:null#[ReturnStatement(return), 2, getDegreesOfFreedom]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:ChiSquaredDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:ChiSquaredDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:ConstantRealDistribution:density:double#[ReturnStatement(return), x, value, 1, 0]
org.apache.commons.math4.distribution:ConstantRealDistribution:cumulativeProbability:double#[ReturnStatement(return), x, value, 0, 1]
org.apache.commons.math4.distribution:ConstantRealDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, ReturnStatement(return), value]
org.apache.commons.math4.distribution:ConstantRealDistribution:getNumericalMean:null#[ReturnStatement(return), value]
org.apache.commons.math4.distribution:ConstantRealDistribution:getNumericalVariance:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:ConstantRealDistribution:getSupportLowerBound:null#[ReturnStatement(return), value]
org.apache.commons.math4.distribution:ConstantRealDistribution:getSupportUpperBound:null#[ReturnStatement(return), value]
org.apache.commons.math4.distribution:ConstantRealDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:ConstantRealDistribution:sample:null#[ReturnStatement(return), value]
org.apache.commons.math4.distribution:EnumeratedDistribution:reseedRandomGenerator:long#[ExpressionStatement(), random, setSeed, seed]
org.apache.commons.math4.distribution:EnumeratedDistribution:probability:T#[VariableDeclarationStatement(), double, probability, 0, ForStatement(for), int, i, 0, i, probabilities.length, i, IfStatement(if), x, null, singletons, get, i, null, x, null, x, equals, singletons, get, i, ExpressionStatement(), probability, probabilities, i, ReturnStatement(return), probability]
org.apache.commons.math4.distribution:EnumeratedDistribution:getPmf:null#[VariableDeclarationStatement(), final, List, Pair, T, Double, samples, new, ArrayList, Pair, T, Double, probabilities.length, ForStatement(for), int, i, 0, i, probabilities.length, i, ExpressionStatement(), samples, add, new, Pair, T, Double, singletons, get, i, probabilities, i, ReturnStatement(return), samples]
org.apache.commons.math4.distribution:EnumeratedDistribution:sample:null#[VariableDeclarationStatement(), final, double, randomValue, random, nextDouble, VariableDeclarationStatement(), int, index, Arrays, binarySearch, cumulativeProbabilities, randomValue, IfStatement(if), index, 0, ExpressionStatement(), index, index, 1, IfStatement(if), index, 0, index, probabilities.length, randomValue, cumulativeProbabilities, index, ReturnStatement(return), singletons, get, index, ReturnStatement(return), singletons, get, singletons, size, 1]
org.apache.commons.math4.distribution:EnumeratedDistribution:sample:int#[IfStatement(if), sampleSize, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, VariableDeclarationStatement(), final, Object, out, Object, sampleSize, ForStatement(for), int, i, 0, i, sampleSize, i, ExpressionStatement(), out, i, sample, ReturnStatement(return), out]
org.apache.commons.math4.distribution:EnumeratedDistribution:sample:int+T[]#[IfStatement(if), sampleSize, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize, IfStatement(if), array, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, VariableDeclarationStatement(), T, out, IfStatement(if), array.length, sampleSize, VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, T, unchecked, T, Array, newInstance, array, getClass, getComponentType, sampleSize, ExpressionStatement(), out, unchecked, ExpressionStatement(), out, array, ForStatement(for), int, i, 0, i, sampleSize, i, ExpressionStatement(), out, i, sample, ReturnStatement(return), out]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:createDistribution:int[]+double[]#[IfStatement(if), singletons.length, probabilities.length, ThrowStatement(throw), new, DimensionMismatchException, probabilities.length, singletons.length, VariableDeclarationStatement(), final, List, Pair, Integer, Double, samples, new, ArrayList, Pair, Integer, Double, singletons.length, ForStatement(for), int, i, 0, i, singletons.length, i, ExpressionStatement(), samples, add, new, Pair, Integer, Double, singletons, i, probabilities, i, ReturnStatement(return), samples]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:probability:int#[ReturnStatement(return), innerDistribution, probability, x]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:cumulativeProbability:int#[VariableDeclarationStatement(), double, probability, 0, EnhancedForStatement(for), final, Pair, Integer, Double, sample, innerDistribution, getPmf, IfStatement(if), sample, getKey, x, ExpressionStatement(), probability, sample, getValue, ReturnStatement(return), probability]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getNumericalMean:null#[VariableDeclarationStatement(), double, mean, 0, EnhancedForStatement(for), final, Pair, Integer, Double, sample, innerDistribution, getPmf, ExpressionStatement(), mean, sample, getValue, sample, getKey, ReturnStatement(return), mean]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), double, mean, 0, VariableDeclarationStatement(), double, meanOfSquares, 0, EnhancedForStatement(for), final, Pair, Integer, Double, sample, innerDistribution, getPmf, ExpressionStatement(), mean, sample, getValue, sample, getKey, ExpressionStatement(), meanOfSquares, sample, getValue, sample, getKey, sample, getKey, ReturnStatement(return), meanOfSquares, mean, mean]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getSupportLowerBound:null#[VariableDeclarationStatement(), int, min, Integer.MAX_VALUE, EnhancedForStatement(for), final, Pair, Integer, Double, sample, innerDistribution, getPmf, IfStatement(if), sample, getKey, min, sample, getValue, 0, ExpressionStatement(), min, sample, getKey, ReturnStatement(return), min]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:getSupportUpperBound:null#[VariableDeclarationStatement(), int, max, Integer.MIN_VALUE, EnhancedForStatement(for), final, Pair, Integer, Double, sample, innerDistribution, getPmf, IfStatement(if), sample, getKey, max, sample, getValue, 0, ExpressionStatement(), max, sample, getKey, ReturnStatement(return), max]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:EnumeratedIntegerDistribution:sample:null#[ReturnStatement(return), innerDistribution, sample]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:createDistribution:double[]+double[]#[IfStatement(if), singletons.length, probabilities.length, ThrowStatement(throw), new, DimensionMismatchException, probabilities.length, singletons.length, VariableDeclarationStatement(), final, List, Pair, Double, Double, samples, new, ArrayList, Pair, Double, Double, singletons.length, ForStatement(for), int, i, 0, i, singletons.length, i, ExpressionStatement(), samples, add, new, Pair, Double, Double, singletons, i, probabilities, i, ReturnStatement(return), samples]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:probability:double#[ReturnStatement(return), innerDistribution, probability, x]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:density:double#[ReturnStatement(return), probability, x]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), double, probability, 0, EnhancedForStatement(for), final, Pair, Double, Double, sample, innerDistribution, getPmf, IfStatement(if), sample, getKey, x, ExpressionStatement(), probability, sample, getValue, ReturnStatement(return), probability]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, VariableDeclarationStatement(), double, probability, 0, VariableDeclarationStatement(), double, x, getSupportLowerBound, EnhancedForStatement(for), final, Pair, Double, Double, sample, innerDistribution, getPmf, IfStatement(if), sample, getValue, 0.0, ContinueStatement(continue), ExpressionStatement(), probability, sample, getValue, ExpressionStatement(), x, sample, getKey, IfStatement(if), probability, p, BreakStatement(break), ReturnStatement(return), x]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getNumericalMean:null#[VariableDeclarationStatement(), double, mean, 0, EnhancedForStatement(for), final, Pair, Double, Double, sample, innerDistribution, getPmf, ExpressionStatement(), mean, sample, getValue, sample, getKey, ReturnStatement(return), mean]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), double, mean, 0, VariableDeclarationStatement(), double, meanOfSquares, 0, EnhancedForStatement(for), final, Pair, Double, Double, sample, innerDistribution, getPmf, ExpressionStatement(), mean, sample, getValue, sample, getKey, ExpressionStatement(), meanOfSquares, sample, getValue, sample, getKey, sample, getKey, ReturnStatement(return), meanOfSquares, mean, mean]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getSupportLowerBound:null#[VariableDeclarationStatement(), double, min, Double.POSITIVE_INFINITY, EnhancedForStatement(for), final, Pair, Double, Double, sample, innerDistribution, getPmf, IfStatement(if), sample, getKey, min, sample, getValue, 0, ExpressionStatement(), min, sample, getKey, ReturnStatement(return), min]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:getSupportUpperBound:null#[VariableDeclarationStatement(), double, max, Double.NEGATIVE_INFINITY, EnhancedForStatement(for), final, Pair, Double, Double, sample, innerDistribution, getPmf, IfStatement(if), sample, getKey, max, sample, getValue, 0, ExpressionStatement(), max, sample, getKey, ReturnStatement(return), max]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:EnumeratedRealDistribution:sample:null#[ReturnStatement(return), innerDistribution, sample]
org.apache.commons.math4.distribution:ExponentialDistribution:getMean:null#[ReturnStatement(return), mean]
org.apache.commons.math4.distribution:ExponentialDistribution:density:double#[VariableDeclarationStatement(), final, double, logDensity, logDensity, x, ReturnStatement(return), logDensity, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logDensity]
org.apache.commons.math4.distribution:ExponentialDistribution:logDensity:double#[IfStatement(if), x, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, ReturnStatement(return), x, mean, logMean]
org.apache.commons.math4.distribution:ExponentialDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0.0, ExpressionStatement(), ret, 0.0, ExpressionStatement(), ret, 1.0, FastMath, exp, x, mean, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:ExponentialDistribution:inverseCumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0.0, 1.0, IfStatement(if), p, 1.0, ExpressionStatement(), ret, Double.POSITIVE_INFINITY, ExpressionStatement(), ret, mean, FastMath, log, 1.0, p, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:ExponentialDistribution:sample:null#[VariableDeclarationStatement(), double, a, 0, VariableDeclarationStatement(), double, u, random, nextDouble, WhileStatement(while), u, 0.5, ExpressionStatement(), a, EXPONENTIAL_SA_QI, 0, ExpressionStatement(), u, 2, ExpressionStatement(), u, u, 1, IfStatement(if), u, EXPONENTIAL_SA_QI, 0, ReturnStatement(return), mean, a, u, VariableDeclarationStatement(), int, i, 0, VariableDeclarationStatement(), double, u2, random, nextDouble, VariableDeclarationStatement(), double, umin, u2, DoStatement(do), ExpressionStatement(), i, ExpressionStatement(), u2, random, nextDouble, IfStatement(if), u2, umin, ExpressionStatement(), umin, u2, u, EXPONENTIAL_SA_QI, i, ReturnStatement(return), mean, a, umin, EXPONENTIAL_SA_QI, 0]
org.apache.commons.math4.distribution:ExponentialDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:ExponentialDistribution:getNumericalMean:null#[ReturnStatement(return), getMean]
org.apache.commons.math4.distribution:ExponentialDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), final, double, m, getMean, ReturnStatement(return), m, m]
org.apache.commons.math4.distribution:ExponentialDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:ExponentialDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:ExponentialDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:FDistribution:density:double#[ReturnStatement(return), FastMath, exp, logDensity, x]
org.apache.commons.math4.distribution:FDistribution:logDensity:double#[VariableDeclarationStatement(), final, double, nhalf, numeratorDegreesOfFreedom, 2, VariableDeclarationStatement(), final, double, mhalf, denominatorDegreesOfFreedom, 2, VariableDeclarationStatement(), final, double, logx, FastMath, log, x, VariableDeclarationStatement(), final, double, logn, FastMath, log, numeratorDegreesOfFreedom, VariableDeclarationStatement(), final, double, logm, FastMath, log, denominatorDegreesOfFreedom, VariableDeclarationStatement(), final, double, lognxm, FastMath, log, numeratorDegreesOfFreedom, x, denominatorDegreesOfFreedom, ReturnStatement(return), nhalf, logn, nhalf, logx, logx, mhalf, logm, nhalf, lognxm, mhalf, lognxm, Beta, logBeta, nhalf, mhalf]
org.apache.commons.math4.distribution:FDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, ExpressionStatement(), ret, 0, VariableDeclarationStatement(), double, n, numeratorDegreesOfFreedom, VariableDeclarationStatement(), double, m, denominatorDegreesOfFreedom, ExpressionStatement(), ret, Beta, regularizedBeta, n, x, m, n, x, 0.5, n, 0.5, m, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:FDistribution:getNumeratorDegreesOfFreedom:null#[ReturnStatement(return), numeratorDegreesOfFreedom]
org.apache.commons.math4.distribution:FDistribution:getDenominatorDegreesOfFreedom:null#[ReturnStatement(return), denominatorDegreesOfFreedom]
org.apache.commons.math4.distribution:FDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:FDistribution:getNumericalMean:null#[VariableDeclarationStatement(), final, double, denominatorDF, getDenominatorDegreesOfFreedom, IfStatement(if), denominatorDF, 2, ReturnStatement(return), denominatorDF, denominatorDF, 2, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.distribution:FDistribution:getNumericalVariance:null#[IfStatement(if), numericalVarianceIsCalculated, ExpressionStatement(), numericalVariance, calculateNumericalVariance, ExpressionStatement(), numericalVarianceIsCalculated, true, ReturnStatement(return), numericalVariance]
org.apache.commons.math4.distribution:FDistribution:calculateNumericalVariance:null#[VariableDeclarationStatement(), final, double, denominatorDF, getDenominatorDegreesOfFreedom, IfStatement(if), denominatorDF, 4, VariableDeclarationStatement(), final, double, numeratorDF, getNumeratorDegreesOfFreedom, VariableDeclarationStatement(), final, double, denomDFMinusTwo, denominatorDF, 2, ReturnStatement(return), 2, denominatorDF, denominatorDF, numeratorDF, denominatorDF, 2, numeratorDF, denomDFMinusTwo, denomDFMinusTwo, denominatorDF, 4, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.distribution:FDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:FDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:FDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:fit:MixtureMultivariateNormalDistribution+int+double#[IfStatement(if), maxIterations, 1, ThrowStatement(throw), new, NotStrictlyPositiveException, maxIterations, IfStatement(if), threshold, Double.MIN_VALUE, ThrowStatement(throw), new, NotStrictlyPositiveException, threshold, VariableDeclarationStatement(), final, int, n, data.length, VariableDeclarationStatement(), final, int, numCols, data, 0, length, VariableDeclarationStatement(), final, int, k, initialMixture, getComponents, size, VariableDeclarationStatement(), final, int, numMeanColumns, initialMixture, getComponents, get, 0, getSecond, getMeans, length, IfStatement(if), numMeanColumns, numCols, ThrowStatement(throw), new, DimensionMismatchException, numMeanColumns, numCols, VariableDeclarationStatement(), int, numIterations, 0, VariableDeclarationStatement(), double, previousLogLikelihood, 0d, ExpressionStatement(), logLikelihood, Double.NEGATIVE_INFINITY, ExpressionStatement(), fittedModel, new, MixtureMultivariateNormalDistribution, initialMixture, getComponents, WhileStatement(while), numIterations, maxIterations, FastMath, abs, previousLogLikelihood, logLikelihood, threshold, ExpressionStatement(), previousLogLikelihood, logLikelihood, VariableDeclarationStatement(), double, sumLogLikelihood, 0d, VariableDeclarationStatement(), final, List, Pair, Double, MultivariateNormalDistribution, components, fittedModel, getComponents, VariableDeclarationStatement(), final, double, weights, double, k, VariableDeclarationStatement(), final, MultivariateNormalDistribution, mvns, MultivariateNormalDistribution, k, ForStatement(for), int, j, 0, j, k, j, ExpressionStatement(), weights, j, components, get, j, getFirst, ExpressionStatement(), mvns, j, components, get, j, getSecond, VariableDeclarationStatement(), final, double, gamma, double, n, k, VariableDeclarationStatement(), final, double, gammaSums, double, k, VariableDeclarationStatement(), final, double, gammaDataProdSums, double, k, numCols, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, rowDensity, fittedModel, density, data, i, ExpressionStatement(), sumLogLikelihood, FastMath, log, rowDensity, ForStatement(for), int, j, 0, j, k, j, ExpressionStatement(), gamma, i, j, weights, j, mvns, j, density, data, i, rowDensity, ExpressionStatement(), gammaSums, j, gamma, i, j, ForStatement(for), int, col, 0, col, numCols, col, ExpressionStatement(), gammaDataProdSums, j, col, gamma, i, j, data, i, col, ExpressionStatement(), logLikelihood, sumLogLikelihood, n, VariableDeclarationStatement(), final, double, newWeights, double, k, VariableDeclarationStatement(), final, double, newMeans, double, k, numCols, ForStatement(for), int, j, 0, j, k, j, ExpressionStatement(), newWeights, j, gammaSums, j, n, ForStatement(for), int, col, 0, col, numCols, col, ExpressionStatement(), newMeans, j, col, gammaDataProdSums, j, col, gammaSums, j, VariableDeclarationStatement(), final, RealMatrix, newCovMats, RealMatrix, k, ForStatement(for), int, j, 0, j, k, j, ExpressionStatement(), newCovMats, j, new, Array2DRowRealMatrix, numCols, numCols, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, 0, j, k, j, VariableDeclarationStatement(), final, RealMatrix, vec, new, Array2DRowRealMatrix, MathArrays, ebeSubtract, data, i, newMeans, j, VariableDeclarationStatement(), final, RealMatrix, dataCov, vec, multiply, vec, transpose, scalarMultiply, gamma, i, j, ExpressionStatement(), newCovMats, j, newCovMats, j, add, dataCov, VariableDeclarationStatement(), final, double, newCovMatArrays, double, k, numCols, numCols, ForStatement(for), int, j, 0, j, k, j, ExpressionStatement(), newCovMats, j, newCovMats, j, scalarMultiply, 1d, gammaSums, j, ExpressionStatement(), newCovMatArrays, j, newCovMats, j, getData, ExpressionStatement(), fittedModel, new, MixtureMultivariateNormalDistribution, newWeights, newMeans, newCovMatArrays, IfStatement(if), FastMath, abs, previousLogLikelihood, logLikelihood, threshold, ThrowStatement(throw), new, ConvergenceException]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:fit:MixtureMultivariateNormalDistribution#[ExpressionStatement(), fit, initialMixture, DEFAULT_MAX_ITERATIONS, DEFAULT_THRESHOLD]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:estimate:double[][]+int#[IfStatement(if), data.length, 2, ThrowStatement(throw), new, NotStrictlyPositiveException, data.length, IfStatement(if), numComponents, 2, ThrowStatement(throw), new, NumberIsTooSmallException, numComponents, 2, true, IfStatement(if), numComponents, data.length, ThrowStatement(throw), new, NumberIsTooLargeException, numComponents, data.length, true, VariableDeclarationStatement(), final, int, numRows, data.length, VariableDeclarationStatement(), final, int, numCols, data, 0, length, VariableDeclarationStatement(), final, DataRow, sortedData, DataRow, numRows, ForStatement(for), int, i, 0, i, numRows, i, ExpressionStatement(), sortedData, i, new, DataRow, data, i, ExpressionStatement(), Arrays, sort, sortedData, VariableDeclarationStatement(), final, double, weight, 1d, numComponents, VariableDeclarationStatement(), final, List, Pair, Double, MultivariateNormalDistribution, components, new, ArrayList, Pair, Double, MultivariateNormalDistribution, numComponents, ForStatement(for), int, binIndex, 0, binIndex, numComponents, binIndex, VariableDeclarationStatement(), final, int, minIndex, binIndex, numRows, numComponents, VariableDeclarationStatement(), final, int, maxIndex, binIndex, 1, numRows, numComponents, VariableDeclarationStatement(), final, int, numBinRows, maxIndex, minIndex, VariableDeclarationStatement(), final, double, binData, double, numBinRows, numCols, VariableDeclarationStatement(), final, double, columnMeans, double, numCols, ForStatement(for), int, i, minIndex, iBin, 0, i, maxIndex, i, iBin, ForStatement(for), int, j, 0, j, numCols, j, VariableDeclarationStatement(), final, double, val, sortedData, i, getRow, j, ExpressionStatement(), columnMeans, j, val, ExpressionStatement(), binData, iBin, j, val, ExpressionStatement(), MathArrays, scaleInPlace, 1d, numBinRows, columnMeans, VariableDeclarationStatement(), final, double, covMat, new, Covariance, binData, getCovarianceMatrix, getData, VariableDeclarationStatement(), final, MultivariateNormalDistribution, mvn, new, MultivariateNormalDistribution, columnMeans, covMat, ExpressionStatement(), components, add, new, Pair, Double, MultivariateNormalDistribution, weight, mvn, ReturnStatement(return), new, MixtureMultivariateNormalDistribution, components]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:getLogLikelihood:null#[ReturnStatement(return), logLikelihood]
org.apache.commons.math4.distribution.fitting:MultivariateNormalMixtureExpectationMaximization:getFittedModel:null#[ReturnStatement(return), new, MixtureMultivariateNormalDistribution, fittedModel, getComponents]
org.apache.commons.math4.distribution:GammaDistribution:getShape:null#[ReturnStatement(return), shape]
org.apache.commons.math4.distribution:GammaDistribution:getScale:null#[ReturnStatement(return), scale]
org.apache.commons.math4.distribution:GammaDistribution:density:double#[IfStatement(if), x, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), final, double, y, x, scale, IfStatement(if), y, minY, FastMath, log, y, maxLogY, VariableDeclarationStatement(), final, double, aux1, y, shiftedShape, shiftedShape, VariableDeclarationStatement(), final, double, aux2, shape, FastMath, log1p, aux1, aux1, VariableDeclarationStatement(), final, double, aux3, y, Gamma.LANCZOS_G, 0.5, shiftedShape, Gamma.LANCZOS_G, aux2, ReturnStatement(return), densityPrefactor2, x, FastMath, exp, aux3, ReturnStatement(return), densityPrefactor1, FastMath, exp, y, FastMath, pow, y, shape, 1]
org.apache.commons.math4.distribution:GammaDistribution:logDensity:double#[IfStatement(if), x, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, double, y, x, scale, IfStatement(if), y, minY, FastMath, log, y, maxLogY, VariableDeclarationStatement(), final, double, aux1, y, shiftedShape, shiftedShape, VariableDeclarationStatement(), final, double, aux2, shape, FastMath, log1p, aux1, aux1, VariableDeclarationStatement(), final, double, aux3, y, Gamma.LANCZOS_G, 0.5, shiftedShape, Gamma.LANCZOS_G, aux2, ReturnStatement(return), logDensityPrefactor2, FastMath, log, x, aux3, ReturnStatement(return), logDensityPrefactor1, y, FastMath, log, y, shape, 1]
org.apache.commons.math4.distribution:GammaDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, ExpressionStatement(), ret, 0, ExpressionStatement(), ret, Gamma, regularizedGammaP, shape, x, scale, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:GammaDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:GammaDistribution:getNumericalMean:null#[ReturnStatement(return), shape, scale]
org.apache.commons.math4.distribution:GammaDistribution:getNumericalVariance:null#[ReturnStatement(return), shape, scale, scale]
org.apache.commons.math4.distribution:GammaDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:GammaDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:GammaDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:GammaDistribution:sample:null#[IfStatement(if), shape, 1, WhileStatement(while), true, VariableDeclarationStatement(), final, double, u, random, nextDouble, VariableDeclarationStatement(), final, double, bGS, 1, shape, FastMath.E, VariableDeclarationStatement(), final, double, p, bGS, u, IfStatement(if), p, 1, VariableDeclarationStatement(), final, double, x, FastMath, pow, p, 1, shape, VariableDeclarationStatement(), final, double, u2, random, nextDouble, IfStatement(if), u2, FastMath, exp, x, ContinueStatement(continue), ReturnStatement(return), scale, x, VariableDeclarationStatement(), final, double, x, 1, FastMath, log, bGS, p, shape, VariableDeclarationStatement(), final, double, u2, random, nextDouble, IfStatement(if), u2, FastMath, pow, x, shape, 1, ContinueStatement(continue), ReturnStatement(return), scale, x, VariableDeclarationStatement(), final, double, d, shape, 0.333333333333333333, VariableDeclarationStatement(), final, double, c, 1, 3, FastMath, sqrt, d, WhileStatement(while), true, VariableDeclarationStatement(), final, double, x, random, nextGaussian, VariableDeclarationStatement(), final, double, v, 1, c, x, 1, c, x, 1, c, x, IfStatement(if), v, 0, ContinueStatement(continue), VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, u, random, nextDouble, IfStatement(if), u, 1, 0.0331, x2, x2, ReturnStatement(return), scale, d, v, IfStatement(if), FastMath, log, u, 0.5, x2, d, 1, v, FastMath, log, v, ReturnStatement(return), scale, d, v]
org.apache.commons.math4.distribution:GeometricDistribution:getProbabilityOfSuccess:null#[ReturnStatement(return), probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:probability:int#[IfStatement(if), x, 0, ReturnStatement(return), 0.0, ReturnStatement(return), FastMath, exp, log1mProbabilityOfSuccess, x, probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:logProbability:int#[IfStatement(if), x, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, ReturnStatement(return), x, log1mProbabilityOfSuccess, logProbabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:cumulativeProbability:int#[IfStatement(if), x, 0, ReturnStatement(return), 0.0, ReturnStatement(return), FastMath, expm1, log1mProbabilityOfSuccess, x, 1]
org.apache.commons.math4.distribution:GeometricDistribution:getNumericalMean:null#[ReturnStatement(return), 1, probabilityOfSuccess, probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:getNumericalVariance:null#[ReturnStatement(return), 1, probabilityOfSuccess, probabilityOfSuccess, probabilityOfSuccess]
org.apache.commons.math4.distribution:GeometricDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:GeometricDistribution:getSupportUpperBound:null#[ReturnStatement(return), Integer.MAX_VALUE]
org.apache.commons.math4.distribution:GeometricDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:GeometricDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0, p, 1, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, IfStatement(if), p, 1, ReturnStatement(return), Integer.MAX_VALUE, IfStatement(if), p, 0, ReturnStatement(return), 0, ReturnStatement(return), Math, max, 0, int, Math, ceil, FastMath, log1p, p, log1mProbabilityOfSuccess, 1]
org.apache.commons.math4.distribution:GumbelDistribution:getLocation:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:GumbelDistribution:getScale:null#[ReturnStatement(return), beta]
org.apache.commons.math4.distribution:GumbelDistribution:density:double#[VariableDeclarationStatement(), final, double, z, x, mu, beta, VariableDeclarationStatement(), final, double, t, FastMath, exp, z, ReturnStatement(return), FastMath, exp, z, t, beta]
org.apache.commons.math4.distribution:GumbelDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), final, double, z, x, mu, beta, ReturnStatement(return), FastMath, exp, FastMath, exp, z]
org.apache.commons.math4.distribution:GumbelDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0.0, 1.0, IfStatement(if), p, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, IfStatement(if), p, 1, ReturnStatement(return), Double.POSITIVE_INFINITY, ReturnStatement(return), mu, FastMath, log, FastMath, log, p, beta]
org.apache.commons.math4.distribution:GumbelDistribution:getNumericalMean:null#[ReturnStatement(return), mu, EULER, beta]
org.apache.commons.math4.distribution:GumbelDistribution:getNumericalVariance:null#[ReturnStatement(return), MathUtils.PI_SQUARED, 6.0, beta, beta]
org.apache.commons.math4.distribution:GumbelDistribution:getSupportLowerBound:null#[ReturnStatement(return), Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:GumbelDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:GumbelDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:HypergeometricDistribution:cumulativeProbability:int#[VariableDeclarationStatement(), double, ret, VariableDeclarationStatement(), int, domain, getDomain, populationSize, numberOfSuccesses, sampleSize, IfStatement(if), x, domain, 0, ExpressionStatement(), ret, 0.0, IfStatement(if), x, domain, 1, ExpressionStatement(), ret, 1.0, ExpressionStatement(), ret, innerCumulativeProbability, domain, 0, x, 1, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:getDomain:int+int+int#[ReturnStatement(return), int, getLowerDomain, n, m, k, getUpperDomain, m, k]
org.apache.commons.math4.distribution:HypergeometricDistribution:getLowerDomain:int+int+int#[ReturnStatement(return), FastMath, max, 0, m, n, k]
org.apache.commons.math4.distribution:HypergeometricDistribution:getNumberOfSuccesses:null#[ReturnStatement(return), numberOfSuccesses]
org.apache.commons.math4.distribution:HypergeometricDistribution:getPopulationSize:null#[ReturnStatement(return), populationSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getSampleSize:null#[ReturnStatement(return), sampleSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getUpperDomain:int+int#[ReturnStatement(return), FastMath, min, k, m]
org.apache.commons.math4.distribution:HypergeometricDistribution:probability:int#[VariableDeclarationStatement(), final, double, logProbability, logProbability, x, ReturnStatement(return), logProbability, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logProbability]
org.apache.commons.math4.distribution:HypergeometricDistribution:logProbability:int#[VariableDeclarationStatement(), double, ret, VariableDeclarationStatement(), int, domain, getDomain, populationSize, numberOfSuccesses, sampleSize, IfStatement(if), x, domain, 0, x, domain, 1, ExpressionStatement(), ret, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), double, p, double, sampleSize, double, populationSize, VariableDeclarationStatement(), double, q, double, populationSize, sampleSize, double, populationSize, VariableDeclarationStatement(), double, p1, SaddlePointExpansion, logBinomialProbability, x, numberOfSuccesses, p, q, VariableDeclarationStatement(), double, p2, SaddlePointExpansion, logBinomialProbability, sampleSize, x, populationSize, numberOfSuccesses, p, q, VariableDeclarationStatement(), double, p3, SaddlePointExpansion, logBinomialProbability, sampleSize, populationSize, p, q, ExpressionStatement(), ret, p1, p2, p3, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:upperCumulativeProbability:int#[VariableDeclarationStatement(), double, ret, VariableDeclarationStatement(), final, int, domain, getDomain, populationSize, numberOfSuccesses, sampleSize, IfStatement(if), x, domain, 0, ExpressionStatement(), ret, 1.0, IfStatement(if), x, domain, 1, ExpressionStatement(), ret, 0.0, ExpressionStatement(), ret, innerCumulativeProbability, domain, 1, x, 1, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:innerCumulativeProbability:int+int+int#[VariableDeclarationStatement(), double, ret, probability, x0, WhileStatement(while), x0, x1, ExpressionStatement(), x0, dx, ExpressionStatement(), ret, probability, x0, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:HypergeometricDistribution:getNumericalMean:null#[ReturnStatement(return), getSampleSize, getNumberOfSuccesses, double, getPopulationSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getNumericalVariance:null#[IfStatement(if), numericalVarianceIsCalculated, ExpressionStatement(), numericalVariance, calculateNumericalVariance, ExpressionStatement(), numericalVarianceIsCalculated, true, ReturnStatement(return), numericalVariance]
org.apache.commons.math4.distribution:HypergeometricDistribution:calculateNumericalVariance:null#[VariableDeclarationStatement(), final, double, N, getPopulationSize, VariableDeclarationStatement(), final, double, m, getNumberOfSuccesses, VariableDeclarationStatement(), final, double, n, getSampleSize, ReturnStatement(return), n, m, N, n, N, m, N, N, N, 1]
org.apache.commons.math4.distribution:HypergeometricDistribution:getSupportLowerBound:null#[ReturnStatement(return), FastMath, max, 0, getSampleSize, getNumberOfSuccesses, getPopulationSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:getSupportUpperBound:null#[ReturnStatement(return), FastMath, min, getNumberOfSuccesses, getSampleSize]
org.apache.commons.math4.distribution:HypergeometricDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:LaplaceDistribution:getLocation:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:LaplaceDistribution:getScale:null#[ReturnStatement(return), beta]
org.apache.commons.math4.distribution:LaplaceDistribution:density:double#[ReturnStatement(return), FastMath, exp, FastMath, abs, x, mu, beta, 2.0, beta]
org.apache.commons.math4.distribution:LaplaceDistribution:cumulativeProbability:double#[IfStatement(if), x, mu, ReturnStatement(return), FastMath, exp, x, mu, beta, 2.0, ReturnStatement(return), 1.0, FastMath, exp, mu, x, beta, 2.0]
org.apache.commons.math4.distribution:LaplaceDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0.0, 1.0, IfStatement(if), p, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, IfStatement(if), p, 1, ReturnStatement(return), Double.POSITIVE_INFINITY, VariableDeclarationStatement(), double, x, p, 0.5, Math, log, 2.0, 2.0, p, Math, log, 2.0, p, ReturnStatement(return), mu, beta, x]
org.apache.commons.math4.distribution:LaplaceDistribution:getNumericalMean:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:LaplaceDistribution:getNumericalVariance:null#[ReturnStatement(return), 2.0, beta, beta]
org.apache.commons.math4.distribution:LaplaceDistribution:getSupportLowerBound:null#[ReturnStatement(return), Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:LaplaceDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LaplaceDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:LevyDistribution:density:double#[IfStatement(if), x, mu, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), final, double, delta, x, mu, VariableDeclarationStatement(), final, double, f, halfC, delta, ReturnStatement(return), FastMath, sqrt, f, FastMath.PI, FastMath, exp, f, delta]
org.apache.commons.math4.distribution:LevyDistribution:logDensity:double#[IfStatement(if), x, mu, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), final, double, delta, x, mu, VariableDeclarationStatement(), final, double, f, halfC, delta, ReturnStatement(return), 0.5, FastMath, log, f, FastMath.PI, f, FastMath, log, delta]
org.apache.commons.math4.distribution:LevyDistribution:cumulativeProbability:double#[IfStatement(if), x, mu, ReturnStatement(return), Double.NaN, ReturnStatement(return), Erf, erfc, FastMath, sqrt, halfC, x, mu]
org.apache.commons.math4.distribution:LevyDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, VariableDeclarationStatement(), final, double, t, Erf, erfcInv, p, ReturnStatement(return), mu, halfC, t, t]
org.apache.commons.math4.distribution:LevyDistribution:getScale:null#[ReturnStatement(return), c]
org.apache.commons.math4.distribution:LevyDistribution:getLocation:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:LevyDistribution:getNumericalMean:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LevyDistribution:getNumericalVariance:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LevyDistribution:getSupportLowerBound:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:LevyDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LevyDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:LogisticDistribution:getLocation:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:LogisticDistribution:getScale:null#[ReturnStatement(return), s]
org.apache.commons.math4.distribution:LogisticDistribution:density:double#[VariableDeclarationStatement(), double, z, x, mu, s, VariableDeclarationStatement(), double, v, FastMath, exp, z, ReturnStatement(return), 1, s, v, 1.0, v, 1.0, v]
org.apache.commons.math4.distribution:LogisticDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), double, z, 1, s, x, mu, ReturnStatement(return), 1.0, 1.0, FastMath, exp, z]
org.apache.commons.math4.distribution:LogisticDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0.0, 1.0, IfStatement(if), p, 0, ReturnStatement(return), 0.0, IfStatement(if), p, 1, ReturnStatement(return), Double.POSITIVE_INFINITY, ReturnStatement(return), s, Math, log, p, 1.0, p, mu]
org.apache.commons.math4.distribution:LogisticDistribution:getNumericalMean:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:LogisticDistribution:getNumericalVariance:null#[ReturnStatement(return), MathUtils.PI_SQUARED, 3.0, 1.0, s, s]
org.apache.commons.math4.distribution:LogisticDistribution:getSupportLowerBound:null#[ReturnStatement(return), Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:LogisticDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LogisticDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:LogNormalDistribution:getScale:null#[ReturnStatement(return), scale]
org.apache.commons.math4.distribution:LogNormalDistribution:getShape:null#[ReturnStatement(return), shape]
org.apache.commons.math4.distribution:LogNormalDistribution:density:double#[IfStatement(if), x, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), final, double, x0, FastMath, log, x, scale, VariableDeclarationStatement(), final, double, x1, x0, shape, ReturnStatement(return), FastMath, exp, 0.5, x1, x1, shape, SQRT2PI, x]
org.apache.commons.math4.distribution:LogNormalDistribution:logDensity:double#[IfStatement(if), x, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, double, logX, FastMath, log, x, VariableDeclarationStatement(), final, double, x0, logX, scale, VariableDeclarationStatement(), final, double, x1, x0, shape, ReturnStatement(return), 0.5, x1, x1, logShapePlusHalfLog2Pi, logX]
org.apache.commons.math4.distribution:LogNormalDistribution:cumulativeProbability:double#[IfStatement(if), x, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), final, double, dev, FastMath, log, x, scale, IfStatement(if), FastMath, abs, dev, 40, shape, ReturnStatement(return), dev, 0, 0.0d, 1.0d, ReturnStatement(return), 0.5, 0.5, Erf, erf, dev, shape, SQRT2]
org.apache.commons.math4.distribution:LogNormalDistribution:probability:double+double#[IfStatement(if), x0, x1, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, IfStatement(if), x0, 0, x1, 0, ReturnStatement(return), super, probability, x0, x1, VariableDeclarationStatement(), final, double, denom, shape, SQRT2, VariableDeclarationStatement(), final, double, v0, FastMath, log, x0, scale, denom, VariableDeclarationStatement(), final, double, v1, FastMath, log, x1, scale, denom, ReturnStatement(return), 0.5, Erf, erf, v0, v1]
org.apache.commons.math4.distribution:LogNormalDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:LogNormalDistribution:getNumericalMean:null#[VariableDeclarationStatement(), double, s, shape, ReturnStatement(return), FastMath, exp, scale, s, s, 2]
org.apache.commons.math4.distribution:LogNormalDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), final, double, s, shape, VariableDeclarationStatement(), final, double, ss, s, s, ReturnStatement(return), FastMath, expm1, ss, FastMath, exp, 2, scale, ss]
org.apache.commons.math4.distribution:LogNormalDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:LogNormalDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:LogNormalDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:LogNormalDistribution:sample:null#[VariableDeclarationStatement(), final, double, n, random, nextGaussian, ReturnStatement(return), FastMath, exp, scale, shape, n]
org.apache.commons.math4.distribution:MixtureMultivariateNormalDistribution:createComponents:double[]+double[][]+double[][][]#[VariableDeclarationStatement(), final, List, Pair, Double, MultivariateNormalDistribution, mvns, new, ArrayList, Pair, Double, MultivariateNormalDistribution, weights.length, ForStatement(for), int, i, 0, i, weights.length, i, VariableDeclarationStatement(), final, MultivariateNormalDistribution, dist, new, MultivariateNormalDistribution, means, i, covariances, i, ExpressionStatement(), mvns, add, new, Pair, Double, MultivariateNormalDistribution, weights, i, dist, ReturnStatement(return), mvns]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:density:double[]#[VariableDeclarationStatement(), double, p, 0, ForStatement(for), int, i, 0, i, weight.length, i, ExpressionStatement(), p, weight, i, distribution, get, i, density, values, ReturnStatement(return), p]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:sample:null#[VariableDeclarationStatement(), double, vals, null, VariableDeclarationStatement(), final, double, randomValue, random, nextDouble, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, weight.length, i, ExpressionStatement(), sum, weight, i, IfStatement(if), randomValue, sum, ExpressionStatement(), vals, distribution, get, i, sample, BreakStatement(break), IfStatement(if), vals, null, ExpressionStatement(), vals, distribution, get, weight.length, 1, sample, ReturnStatement(return), vals]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:reseedRandomGenerator:long#[ExpressionStatement(), super, reseedRandomGenerator, seed, ForStatement(for), int, i, 0, i, distribution, size, i, ExpressionStatement(), distribution, get, i, reseedRandomGenerator, i, 1, seed]
org.apache.commons.math4.distribution:MixtureMultivariateRealDistribution:getComponents:null#[VariableDeclarationStatement(), final, List, Pair, Double, T, list, new, ArrayList, Pair, Double, T, weight.length, ForStatement(for), int, i, 0, i, weight.length, i, ExpressionStatement(), list, add, new, Pair, Double, T, weight, i, distribution, get, i, ReturnStatement(return), list]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getMeans:null#[ReturnStatement(return), MathArrays, copyOf, means]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getCovariances:null#[ReturnStatement(return), covarianceMatrix, copy]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:density:double[]#[VariableDeclarationStatement(), final, int, dim, getDimension, IfStatement(if), vals.length, dim, ThrowStatement(throw), new, DimensionMismatchException, vals.length, dim, ReturnStatement(return), FastMath, pow, 2, FastMath.PI, 0.5, dim, FastMath, pow, covarianceMatrixDeterminant, 0.5, getExponentTerm, vals]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getStandardDeviations:null#[VariableDeclarationStatement(), final, int, dim, getDimension, VariableDeclarationStatement(), final, double, std, double, dim, VariableDeclarationStatement(), final, double, s, covarianceMatrix, getData, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), std, i, FastMath, sqrt, s, i, i, ReturnStatement(return), std]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:sample:null#[VariableDeclarationStatement(), final, int, dim, getDimension, VariableDeclarationStatement(), final, double, normalVals, double, dim, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), normalVals, i, random, nextGaussian, VariableDeclarationStatement(), final, double, vals, samplingMatrix, operate, normalVals, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), vals, i, means, i, ReturnStatement(return), vals]
org.apache.commons.math4.distribution:MultivariateNormalDistribution:getExponentTerm:double[]#[VariableDeclarationStatement(), final, double, centered, double, values.length, ForStatement(for), int, i, 0, i, centered.length, i, ExpressionStatement(), centered, i, values, i, getMeans, i, VariableDeclarationStatement(), final, double, preMultiplied, covarianceMatrixInverse, preMultiply, centered, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, preMultiplied.length, i, ExpressionStatement(), sum, preMultiplied, i, centered, i, ReturnStatement(return), FastMath, exp, 0.5, sum]
org.apache.commons.math4.distribution:NakagamiDistribution:getShape:null#[ReturnStatement(return), mu]
org.apache.commons.math4.distribution:NakagamiDistribution:getScale:null#[ReturnStatement(return), omega]
org.apache.commons.math4.distribution:NakagamiDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), inverseAbsoluteAccuracy]
org.apache.commons.math4.distribution:NakagamiDistribution:density:double#[IfStatement(if), x, 0, ReturnStatement(return), 0.0, ReturnStatement(return), 2.0, FastMath, pow, mu, mu, Gamma, gamma, mu, FastMath, pow, omega, mu, FastMath, pow, x, 2, mu, 1, FastMath, exp, mu, x, x, omega]
org.apache.commons.math4.distribution:NakagamiDistribution:cumulativeProbability:double#[ReturnStatement(return), Gamma, regularizedGammaP, mu, mu, x, x, omega]
org.apache.commons.math4.distribution:NakagamiDistribution:getNumericalMean:null#[ReturnStatement(return), Gamma, gamma, mu, 0.5, Gamma, gamma, mu, FastMath, sqrt, omega, mu]
org.apache.commons.math4.distribution:NakagamiDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), double, v, Gamma, gamma, mu, 0.5, Gamma, gamma, mu, ReturnStatement(return), omega, 1, 1, mu, v, v]
org.apache.commons.math4.distribution:NakagamiDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:NakagamiDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:NakagamiDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:NormalDistribution:getMean:null#[ReturnStatement(return), mean]
org.apache.commons.math4.distribution:NormalDistribution:getStandardDeviation:null#[ReturnStatement(return), standardDeviation]
org.apache.commons.math4.distribution:NormalDistribution:density:double#[ReturnStatement(return), FastMath, exp, logDensity, x]
org.apache.commons.math4.distribution:NormalDistribution:logDensity:double#[VariableDeclarationStatement(), final, double, x0, x, mean, VariableDeclarationStatement(), final, double, x1, x0, standardDeviation, ReturnStatement(return), 0.5, x1, x1, logStandardDeviationPlusHalfLog2Pi]
org.apache.commons.math4.distribution:NormalDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), final, double, dev, x, mean, IfStatement(if), FastMath, abs, dev, 40, standardDeviation, ReturnStatement(return), dev, 0, 0.0d, 1.0d, ReturnStatement(return), 0.5, Erf, erfc, dev, standardDeviation, SQRT2]
org.apache.commons.math4.distribution:NormalDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, ReturnStatement(return), mean, standardDeviation, SQRT2, Erf, erfInv, 2, p, 1]
org.apache.commons.math4.distribution:NormalDistribution:probability:double+double#[IfStatement(if), x0, x1, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true, VariableDeclarationStatement(), final, double, denom, standardDeviation, SQRT2, VariableDeclarationStatement(), final, double, v0, x0, mean, denom, VariableDeclarationStatement(), final, double, v1, x1, mean, denom, ReturnStatement(return), 0.5, Erf, erf, v0, v1]
org.apache.commons.math4.distribution:NormalDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:NormalDistribution:getNumericalMean:null#[ReturnStatement(return), getMean]
org.apache.commons.math4.distribution:NormalDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), final, double, s, getStandardDeviation, ReturnStatement(return), s, s]
org.apache.commons.math4.distribution:NormalDistribution:getSupportLowerBound:null#[ReturnStatement(return), Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:NormalDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:NormalDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:NormalDistribution:sample:null#[ReturnStatement(return), standardDeviation, random, nextGaussian, mean]
org.apache.commons.math4.distribution:ParetoDistribution:getScale:null#[ReturnStatement(return), scale]
org.apache.commons.math4.distribution:ParetoDistribution:getShape:null#[ReturnStatement(return), shape]
org.apache.commons.math4.distribution:ParetoDistribution:density:double#[IfStatement(if), x, scale, ReturnStatement(return), 0, ReturnStatement(return), FastMath, pow, scale, shape, FastMath, pow, x, shape, 1, shape]
org.apache.commons.math4.distribution:ParetoDistribution:logDensity:double#[IfStatement(if), x, scale, ReturnStatement(return), Double.NEGATIVE_INFINITY, ReturnStatement(return), FastMath, log, scale, shape, FastMath, log, x, shape, 1, FastMath, log, shape]
org.apache.commons.math4.distribution:ParetoDistribution:cumulativeProbability:double#[IfStatement(if), x, scale, ReturnStatement(return), 0, ReturnStatement(return), 1, FastMath, pow, scale, x, shape]
org.apache.commons.math4.distribution:ParetoDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:ParetoDistribution:getNumericalMean:null#[IfStatement(if), shape, 1, ReturnStatement(return), Double.POSITIVE_INFINITY, ReturnStatement(return), shape, scale, shape, 1]
org.apache.commons.math4.distribution:ParetoDistribution:getNumericalVariance:null#[IfStatement(if), shape, 2, ReturnStatement(return), Double.POSITIVE_INFINITY, VariableDeclarationStatement(), double, s, shape, 1, ReturnStatement(return), scale, scale, shape, s, s, shape, 2]
org.apache.commons.math4.distribution:ParetoDistribution:getSupportLowerBound:null#[ReturnStatement(return), scale]
org.apache.commons.math4.distribution:ParetoDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:ParetoDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:ParetoDistribution:sample:null#[VariableDeclarationStatement(), final, double, n, random, nextDouble, ReturnStatement(return), scale, FastMath, pow, n, 1, shape]
org.apache.commons.math4.distribution:PascalDistribution:getNumberOfSuccesses:null#[ReturnStatement(return), numberOfSuccesses]
org.apache.commons.math4.distribution:PascalDistribution:getProbabilityOfSuccess:null#[ReturnStatement(return), probabilityOfSuccess]
org.apache.commons.math4.distribution:PascalDistribution:probability:int#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, ExpressionStatement(), ret, 0.0, ExpressionStatement(), ret, CombinatoricsUtils, binomialCoefficientDouble, x, numberOfSuccesses, 1, numberOfSuccesses, 1, FastMath, pow, probabilityOfSuccess, numberOfSuccesses, FastMath, pow, 1.0, probabilityOfSuccess, x, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:PascalDistribution:logProbability:int#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, ExpressionStatement(), ret, Double.NEGATIVE_INFINITY, ExpressionStatement(), ret, CombinatoricsUtils, binomialCoefficientLog, x, numberOfSuccesses, 1, numberOfSuccesses, 1, logProbabilityOfSuccess, numberOfSuccesses, log1mProbabilityOfSuccess, x, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:PascalDistribution:cumulativeProbability:int#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, ExpressionStatement(), ret, 0.0, ExpressionStatement(), ret, Beta, regularizedBeta, probabilityOfSuccess, numberOfSuccesses, x, 1.0, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:PascalDistribution:getNumericalMean:null#[VariableDeclarationStatement(), final, double, p, getProbabilityOfSuccess, VariableDeclarationStatement(), final, double, r, getNumberOfSuccesses, ReturnStatement(return), r, 1, p, p]
org.apache.commons.math4.distribution:PascalDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), final, double, p, getProbabilityOfSuccess, VariableDeclarationStatement(), final, double, r, getNumberOfSuccesses, ReturnStatement(return), r, 1, p, p, p]
org.apache.commons.math4.distribution:PascalDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:PascalDistribution:getSupportUpperBound:null#[ReturnStatement(return), Integer.MAX_VALUE]
org.apache.commons.math4.distribution:PascalDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:PoissonDistribution:getMean:null#[ReturnStatement(return), mean]
org.apache.commons.math4.distribution:PoissonDistribution:probability:int#[VariableDeclarationStatement(), final, double, logProbability, logProbability, x, ReturnStatement(return), logProbability, Double.NEGATIVE_INFINITY, 0, FastMath, exp, logProbability]
org.apache.commons.math4.distribution:PoissonDistribution:logProbability:int#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, x, Integer.MAX_VALUE, ExpressionStatement(), ret, Double.NEGATIVE_INFINITY, IfStatement(if), x, 0, ExpressionStatement(), ret, mean, ExpressionStatement(), ret, SaddlePointExpansion, getStirlingError, x, SaddlePointExpansion, getDeviancePart, x, mean, 0.5, FastMath, log, MathUtils.TWO_PI, 0.5, FastMath, log, x, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:PoissonDistribution:cumulativeProbability:int#[IfStatement(if), x, 0, ReturnStatement(return), 0, IfStatement(if), x, Integer.MAX_VALUE, ReturnStatement(return), 1, ReturnStatement(return), Gamma, regularizedGammaQ, double, x, 1, mean, epsilon, maxIterations]
org.apache.commons.math4.distribution:PoissonDistribution:normalApproximateProbability:int#[ReturnStatement(return), normal, cumulativeProbability, x, 0.5]
org.apache.commons.math4.distribution:PoissonDistribution:getNumericalMean:null#[ReturnStatement(return), getMean]
org.apache.commons.math4.distribution:PoissonDistribution:getNumericalVariance:null#[ReturnStatement(return), getMean]
org.apache.commons.math4.distribution:PoissonDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:PoissonDistribution:getSupportUpperBound:null#[ReturnStatement(return), Integer.MAX_VALUE]
org.apache.commons.math4.distribution:PoissonDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:PoissonDistribution:sample:null#[ReturnStatement(return), int, FastMath, min, nextPoisson, mean, Integer.MAX_VALUE]
org.apache.commons.math4.distribution:PoissonDistribution:nextPoisson:double#[VariableDeclarationStatement(), final, double, pivot, 40.0d, IfStatement(if), meanPoisson, pivot, VariableDeclarationStatement(), double, p, FastMath, exp, meanPoisson, VariableDeclarationStatement(), long, n, 0, VariableDeclarationStatement(), double, r, 1.0d, VariableDeclarationStatement(), double, rnd, 1.0d, WhileStatement(while), n, 1000, meanPoisson, ExpressionStatement(), rnd, random, nextDouble, ExpressionStatement(), r, rnd, IfStatement(if), r, p, ExpressionStatement(), n, ReturnStatement(return), n, ReturnStatement(return), n, VariableDeclarationStatement(), final, double, lambda, FastMath, floor, meanPoisson, VariableDeclarationStatement(), final, double, lambdaFractional, meanPoisson, lambda, VariableDeclarationStatement(), final, double, logLambda, FastMath, log, lambda, VariableDeclarationStatement(), final, double, logLambdaFactorial, CombinatoricsUtils, factorialLog, int, lambda, VariableDeclarationStatement(), final, long, y2, lambdaFractional, Double.MIN_VALUE, 0, nextPoisson, lambdaFractional, VariableDeclarationStatement(), final, double, delta, FastMath, sqrt, lambda, FastMath, log, 32, lambda, FastMath.PI, 1, VariableDeclarationStatement(), final, double, halfDelta, delta, 2, VariableDeclarationStatement(), final, double, twolpd, 2, lambda, delta, VariableDeclarationStatement(), final, double, a1, FastMath, sqrt, FastMath.PI, twolpd, FastMath, exp, 1, 8, lambda, VariableDeclarationStatement(), final, double, a2, twolpd, delta, FastMath, exp, delta, 1, delta, twolpd, VariableDeclarationStatement(), final, double, aSum, a1, a2, 1, VariableDeclarationStatement(), final, double, p1, a1, aSum, VariableDeclarationStatement(), final, double, p2, a2, aSum, VariableDeclarationStatement(), final, double, c1, 1, 8, lambda, VariableDeclarationStatement(), double, x, 0, VariableDeclarationStatement(), double, y, 0, VariableDeclarationStatement(), double, v, 0, VariableDeclarationStatement(), int, a, 0, VariableDeclarationStatement(), double, t, 0, VariableDeclarationStatement(), double, qr, 0, VariableDeclarationStatement(), double, qa, 0, ForStatement(for), VariableDeclarationStatement(), final, double, u, random, nextDouble, IfStatement(if), u, p1, VariableDeclarationStatement(), final, double, n, random, nextGaussian, ExpressionStatement(), x, n, FastMath, sqrt, lambda, halfDelta, 0.5d, IfStatement(if), x, delta, x, lambda, ContinueStatement(continue), ExpressionStatement(), y, x, 0, FastMath, floor, x, FastMath, ceil, x, VariableDeclarationStatement(), final, double, e, exponential, sample, ExpressionStatement(), v, e, n, n, 2, c1, IfStatement(if), u, p1, p2, ExpressionStatement(), y, lambda, BreakStatement(break), ExpressionStatement(), x, delta, twolpd, delta, exponential, sample, ExpressionStatement(), y, FastMath, ceil, x, ExpressionStatement(), v, exponential, sample, delta, x, 1, twolpd, ExpressionStatement(), a, x, 0, 1, 0, ExpressionStatement(), t, y, y, 1, 2, lambda, IfStatement(if), v, t, a, 0, ExpressionStatement(), y, lambda, y, BreakStatement(break), ExpressionStatement(), qr, t, 2, y, 1, 6, lambda, 1, ExpressionStatement(), qa, qr, t, t, 3, lambda, a, y, 1, IfStatement(if), v, qa, ExpressionStatement(), y, lambda, y, BreakStatement(break), IfStatement(if), v, qr, ContinueStatement(continue), IfStatement(if), v, y, logLambda, CombinatoricsUtils, factorialLog, int, y, lambda, logLambdaFactorial, ExpressionStatement(), y, lambda, y, BreakStatement(break), ReturnStatement(return), y2, long, y]
org.apache.commons.math4.distribution:SaddlePointExpansion:getStirlingError:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), z, 15.0, VariableDeclarationStatement(), double, z2, 2.0, z, IfStatement(if), FastMath, floor, z2, z2, ExpressionStatement(), ret, EXACT_STIRLING_ERRORS, int, z2, ExpressionStatement(), ret, Gamma, logGamma, z, 1.0, z, 0.5, FastMath, log, z, z, HALF_LOG_2_PI, VariableDeclarationStatement(), double, z2, z, z, ExpressionStatement(), ret, 0.083333333333333333333, 0.00277777777777777777778, 0.00079365079365079365079365, 0.000595238095238095238095238, 0.0008417508417508417508417508, z2, z2, z2, z2, z, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:SaddlePointExpansion:getDeviancePart:double+double#[VariableDeclarationStatement(), double, ret, IfStatement(if), FastMath, abs, x, mu, 0.1, x, mu, VariableDeclarationStatement(), double, d, x, mu, VariableDeclarationStatement(), double, v, d, x, mu, VariableDeclarationStatement(), double, s1, v, d, VariableDeclarationStatement(), double, s, Double.NaN, VariableDeclarationStatement(), double, ej, 2.0, x, v, ExpressionStatement(), v, v, VariableDeclarationStatement(), int, j, 1, WhileStatement(while), s1, s, ExpressionStatement(), s, s1, ExpressionStatement(), ej, v, ExpressionStatement(), s1, s, ej, j, 2, 1, ExpressionStatement(), j, ExpressionStatement(), ret, s1, ExpressionStatement(), ret, x, FastMath, log, x, mu, mu, x, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:SaddlePointExpansion:logBinomialProbability:int+int+double+double#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, IfStatement(if), p, 0.1, ExpressionStatement(), ret, getDeviancePart, n, n, q, n, p, ExpressionStatement(), ret, n, FastMath, log, q, IfStatement(if), x, n, IfStatement(if), q, 0.1, ExpressionStatement(), ret, getDeviancePart, n, n, p, n, q, ExpressionStatement(), ret, n, FastMath, log, p, ExpressionStatement(), ret, getStirlingError, n, getStirlingError, x, getStirlingError, n, x, getDeviancePart, x, n, p, getDeviancePart, n, x, n, q, VariableDeclarationStatement(), double, f, MathUtils.TWO_PI, x, n, x, n, ExpressionStatement(), ret, 0.5, FastMath, log, f, ret, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:TDistribution:getDegreesOfFreedom:null#[ReturnStatement(return), degreesOfFreedom]
org.apache.commons.math4.distribution:TDistribution:density:double#[ReturnStatement(return), FastMath, exp, logDensity, x]
org.apache.commons.math4.distribution:TDistribution:logDensity:double#[VariableDeclarationStatement(), final, double, n, degreesOfFreedom, VariableDeclarationStatement(), final, double, nPlus1Over2, n, 1, 2, ReturnStatement(return), factor, nPlus1Over2, FastMath, log, 1, x, x, n]
org.apache.commons.math4.distribution:TDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0, ExpressionStatement(), ret, 0.5, VariableDeclarationStatement(), double, t, Beta, regularizedBeta, degreesOfFreedom, degreesOfFreedom, x, x, 0.5, degreesOfFreedom, 0.5, IfStatement(if), x, 0.0, ExpressionStatement(), ret, 0.5, t, ExpressionStatement(), ret, 1.0, 0.5, t, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:TDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:TDistribution:getNumericalMean:null#[VariableDeclarationStatement(), final, double, df, getDegreesOfFreedom, IfStatement(if), df, 1, ReturnStatement(return), 0, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.distribution:TDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), final, double, df, getDegreesOfFreedom, IfStatement(if), df, 2, ReturnStatement(return), df, df, 2, IfStatement(if), df, 1, df, 2, ReturnStatement(return), Double.POSITIVE_INFINITY, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.distribution:TDistribution:getSupportLowerBound:null#[ReturnStatement(return), Double.NEGATIVE_INFINITY]
org.apache.commons.math4.distribution:TDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:TDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:TriangularDistribution:getMode:null#[ReturnStatement(return), c]
org.apache.commons.math4.distribution:TriangularDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:TriangularDistribution:density:double#[IfStatement(if), x, a, ReturnStatement(return), 0, IfStatement(if), a, x, x, c, VariableDeclarationStatement(), double, divident, 2, x, a, VariableDeclarationStatement(), double, divisor, b, a, c, a, ReturnStatement(return), divident, divisor, IfStatement(if), x, c, ReturnStatement(return), 2, b, a, IfStatement(if), c, x, x, b, VariableDeclarationStatement(), double, divident, 2, b, x, VariableDeclarationStatement(), double, divisor, b, a, b, c, ReturnStatement(return), divident, divisor, ReturnStatement(return), 0]
org.apache.commons.math4.distribution:TriangularDistribution:cumulativeProbability:double#[IfStatement(if), x, a, ReturnStatement(return), 0, IfStatement(if), a, x, x, c, VariableDeclarationStatement(), double, divident, x, a, x, a, VariableDeclarationStatement(), double, divisor, b, a, c, a, ReturnStatement(return), divident, divisor, IfStatement(if), x, c, ReturnStatement(return), c, a, b, a, IfStatement(if), c, x, x, b, VariableDeclarationStatement(), double, divident, b, x, b, x, VariableDeclarationStatement(), double, divisor, b, a, b, c, ReturnStatement(return), 1, divident, divisor, ReturnStatement(return), 1]
org.apache.commons.math4.distribution:TriangularDistribution:getNumericalMean:null#[ReturnStatement(return), a, b, c, 3]
org.apache.commons.math4.distribution:TriangularDistribution:getNumericalVariance:null#[ReturnStatement(return), a, a, b, b, c, c, a, b, a, c, b, c, 18]
org.apache.commons.math4.distribution:TriangularDistribution:getSupportLowerBound:null#[ReturnStatement(return), a]
org.apache.commons.math4.distribution:TriangularDistribution:getSupportUpperBound:null#[ReturnStatement(return), b]
org.apache.commons.math4.distribution:TriangularDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:TriangularDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0, p, 1, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, IfStatement(if), p, 0, ReturnStatement(return), a, IfStatement(if), p, 1, ReturnStatement(return), b, IfStatement(if), p, c, a, b, a, ReturnStatement(return), a, FastMath, sqrt, p, b, a, c, a, ReturnStatement(return), b, FastMath, sqrt, 1, p, b, a, b, c]
org.apache.commons.math4.distribution:UniformIntegerDistribution:probability:int#[IfStatement(if), x, lower, x, upper, ReturnStatement(return), 0, ReturnStatement(return), 1.0, upper, lower, 1]
org.apache.commons.math4.distribution:UniformIntegerDistribution:cumulativeProbability:int#[IfStatement(if), x, lower, ReturnStatement(return), 0, IfStatement(if), x, upper, ReturnStatement(return), 1, ReturnStatement(return), x, lower, 1.0, upper, lower, 1.0]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getNumericalMean:null#[ReturnStatement(return), 0.5, lower, upper]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), double, n, upper, lower, 1, ReturnStatement(return), n, n, 1, 12.0]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getSupportLowerBound:null#[ReturnStatement(return), lower]
org.apache.commons.math4.distribution:UniformIntegerDistribution:getSupportUpperBound:null#[ReturnStatement(return), upper]
org.apache.commons.math4.distribution:UniformIntegerDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:UniformIntegerDistribution:sample:null#[VariableDeclarationStatement(), final, int, max, upper, lower, 1, IfStatement(if), max, 0, WhileStatement(while), true, VariableDeclarationStatement(), final, int, r, random, nextInt, IfStatement(if), r, lower, r, upper, ReturnStatement(return), r, ReturnStatement(return), lower, random, nextInt, max]
org.apache.commons.math4.distribution:UniformRealDistribution:density:double#[IfStatement(if), x, lower, x, upper, ReturnStatement(return), 0.0, ReturnStatement(return), 1, upper, lower]
org.apache.commons.math4.distribution:UniformRealDistribution:cumulativeProbability:double#[IfStatement(if), x, lower, ReturnStatement(return), 0, IfStatement(if), x, upper, ReturnStatement(return), 1, ReturnStatement(return), x, lower, upper, lower]
org.apache.commons.math4.distribution:UniformRealDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, ReturnStatement(return), p, upper, lower, lower]
org.apache.commons.math4.distribution:UniformRealDistribution:getNumericalMean:null#[ReturnStatement(return), 0.5, lower, upper]
org.apache.commons.math4.distribution:UniformRealDistribution:getNumericalVariance:null#[VariableDeclarationStatement(), double, ul, upper, lower, ReturnStatement(return), ul, ul, 12]
org.apache.commons.math4.distribution:UniformRealDistribution:getSupportLowerBound:null#[ReturnStatement(return), lower]
org.apache.commons.math4.distribution:UniformRealDistribution:getSupportUpperBound:null#[ReturnStatement(return), upper]
org.apache.commons.math4.distribution:UniformRealDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:UniformRealDistribution:sample:null#[VariableDeclarationStatement(), final, double, u, random, nextDouble, ReturnStatement(return), u, upper, 1, u, lower]
org.apache.commons.math4.distribution:WeibullDistribution:getShape:null#[ReturnStatement(return), shape]
org.apache.commons.math4.distribution:WeibullDistribution:getScale:null#[ReturnStatement(return), scale]
org.apache.commons.math4.distribution:WeibullDistribution:density:double#[IfStatement(if), x, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), final, double, xscale, x, scale, VariableDeclarationStatement(), final, double, xscalepow, FastMath, pow, xscale, shape, 1, VariableDeclarationStatement(), final, double, xscalepowshape, xscalepow, xscale, ReturnStatement(return), shape, scale, xscalepow, FastMath, exp, xscalepowshape]
org.apache.commons.math4.distribution:WeibullDistribution:logDensity:double#[IfStatement(if), x, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, double, xscale, x, scale, VariableDeclarationStatement(), final, double, logxscalepow, FastMath, log, xscale, shape, 1, VariableDeclarationStatement(), final, double, xscalepowshape, FastMath, exp, logxscalepow, xscale, ReturnStatement(return), FastMath, log, shape, scale, logxscalepow, xscalepowshape]
org.apache.commons.math4.distribution:WeibullDistribution:cumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), x, 0.0, ExpressionStatement(), ret, 0.0, ExpressionStatement(), ret, 1.0, FastMath, exp, FastMath, pow, x, scale, shape, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:WeibullDistribution:inverseCumulativeProbability:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0.0, 1.0, IfStatement(if), p, 0, ExpressionStatement(), ret, 0.0, IfStatement(if), p, 1, ExpressionStatement(), ret, Double.POSITIVE_INFINITY, ExpressionStatement(), ret, scale, FastMath, pow, FastMath, log1p, p, 1.0, shape, ReturnStatement(return), ret]
org.apache.commons.math4.distribution:WeibullDistribution:getSolverAbsoluteAccuracy:null#[ReturnStatement(return), solverAbsoluteAccuracy]
org.apache.commons.math4.distribution:WeibullDistribution:getNumericalMean:null#[IfStatement(if), numericalMeanIsCalculated, ExpressionStatement(), numericalMean, calculateNumericalMean, ExpressionStatement(), numericalMeanIsCalculated, true, ReturnStatement(return), numericalMean]
org.apache.commons.math4.distribution:WeibullDistribution:calculateNumericalMean:null#[VariableDeclarationStatement(), final, double, sh, getShape, VariableDeclarationStatement(), final, double, sc, getScale, ReturnStatement(return), sc, FastMath, exp, Gamma, logGamma, 1, 1, sh]
org.apache.commons.math4.distribution:WeibullDistribution:getNumericalVariance:null#[IfStatement(if), numericalVarianceIsCalculated, ExpressionStatement(), numericalVariance, calculateNumericalVariance, ExpressionStatement(), numericalVarianceIsCalculated, true, ReturnStatement(return), numericalVariance]
org.apache.commons.math4.distribution:WeibullDistribution:calculateNumericalVariance:null#[VariableDeclarationStatement(), final, double, sh, getShape, VariableDeclarationStatement(), final, double, sc, getScale, VariableDeclarationStatement(), final, double, mn, getNumericalMean, ReturnStatement(return), sc, sc, FastMath, exp, Gamma, logGamma, 1, 2, sh, mn, mn]
org.apache.commons.math4.distribution:WeibullDistribution:getSupportLowerBound:null#[ReturnStatement(return), 0]
org.apache.commons.math4.distribution:WeibullDistribution:getSupportUpperBound:null#[ReturnStatement(return), Double.POSITIVE_INFINITY]
org.apache.commons.math4.distribution:WeibullDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:ZipfDistribution:getNumberOfElements:null#[ReturnStatement(return), numberOfElements]
org.apache.commons.math4.distribution:ZipfDistribution:getExponent:null#[ReturnStatement(return), exponent]
org.apache.commons.math4.distribution:ZipfDistribution:probability:int#[IfStatement(if), x, 0, x, numberOfElements, ReturnStatement(return), 0.0, ReturnStatement(return), 1.0, FastMath, pow, x, exponent, nthHarmonic]
org.apache.commons.math4.distribution:ZipfDistribution:logProbability:int#[IfStatement(if), x, 0, x, numberOfElements, ReturnStatement(return), Double.NEGATIVE_INFINITY, ReturnStatement(return), FastMath, log, x, exponent, FastMath, log, nthHarmonic]
org.apache.commons.math4.distribution:ZipfDistribution:cumulativeProbability:int#[IfStatement(if), x, 0, ReturnStatement(return), 0.0, IfStatement(if), x, numberOfElements, ReturnStatement(return), 1.0, ReturnStatement(return), generalizedHarmonic, x, exponent, nthHarmonic]
org.apache.commons.math4.distribution:ZipfDistribution:getNumericalMean:null#[IfStatement(if), numericalMeanIsCalculated, ExpressionStatement(), numericalMean, calculateNumericalMean, ExpressionStatement(), numericalMeanIsCalculated, true, ReturnStatement(return), numericalMean]
org.apache.commons.math4.distribution:ZipfDistribution:calculateNumericalMean:null#[VariableDeclarationStatement(), final, int, N, getNumberOfElements, VariableDeclarationStatement(), final, double, s, getExponent, VariableDeclarationStatement(), final, double, Hs1, generalizedHarmonic, N, s, 1, VariableDeclarationStatement(), final, double, Hs, nthHarmonic, ReturnStatement(return), Hs1, Hs]
org.apache.commons.math4.distribution:ZipfDistribution:getNumericalVariance:null#[IfStatement(if), numericalVarianceIsCalculated, ExpressionStatement(), numericalVariance, calculateNumericalVariance, ExpressionStatement(), numericalVarianceIsCalculated, true, ReturnStatement(return), numericalVariance]
org.apache.commons.math4.distribution:ZipfDistribution:calculateNumericalVariance:null#[VariableDeclarationStatement(), final, int, N, getNumberOfElements, VariableDeclarationStatement(), final, double, s, getExponent, VariableDeclarationStatement(), final, double, Hs2, generalizedHarmonic, N, s, 2, VariableDeclarationStatement(), final, double, Hs1, generalizedHarmonic, N, s, 1, VariableDeclarationStatement(), final, double, Hs, nthHarmonic, ReturnStatement(return), Hs2, Hs, Hs1, Hs1, Hs, Hs]
org.apache.commons.math4.distribution:ZipfDistribution:generalizedHarmonic:int+double#[VariableDeclarationStatement(), double, value, 0, ForStatement(for), int, k, n, k, 0, k, ExpressionStatement(), value, 1.0, FastMath, pow, k, m, ReturnStatement(return), value]
org.apache.commons.math4.distribution:ZipfDistribution:getSupportLowerBound:null#[ReturnStatement(return), 1]
org.apache.commons.math4.distribution:ZipfDistribution:getSupportUpperBound:null#[ReturnStatement(return), getNumberOfElements]
org.apache.commons.math4.distribution:ZipfDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.distribution:ZipfDistribution:sample:null#[IfStatement(if), sampler, null, ExpressionStatement(), sampler, new, ZipfRejectionInversionSampler, numberOfElements, exponent, ReturnStatement(return), sampler, sample, random]
org.apache.commons.math4.exception:DimensionMismatchException:getDimension:null#[ReturnStatement(return), dimension]
org.apache.commons.math4.exception:MathIllegalNumberException:getArgument:null#[ReturnStatement(return), argument]
org.apache.commons.math4.exception:MathRuntimeException:getContext:null#[ReturnStatement(return), context]
org.apache.commons.math4.exception:MathRuntimeException:getMessage:null#[ReturnStatement(return), context, getMessage]
org.apache.commons.math4.exception:MathRuntimeException:getLocalizedMessage:null#[ReturnStatement(return), context, getLocalizedMessage]
org.apache.commons.math4.exception:MaxCountExceededException:getMax:null#[ReturnStatement(return), max]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getWrongDimensions:null#[ReturnStatement(return), wrong, clone]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getExpectedDimensions:null#[ReturnStatement(return), expected, clone]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getWrongDimension:int#[ReturnStatement(return), wrong, index, intValue]
org.apache.commons.math4.exception:MultiDimensionMismatchException:getExpectedDimension:int#[ReturnStatement(return), expected, index, intValue]
org.apache.commons.math4.exception:NoBracketingException:getLo:null#[ReturnStatement(return), lo]
org.apache.commons.math4.exception:NoBracketingException:getHi:null#[ReturnStatement(return), hi]
org.apache.commons.math4.exception:NoBracketingException:getFLo:null#[ReturnStatement(return), fLo]
org.apache.commons.math4.exception:NoBracketingException:getFHi:null#[ReturnStatement(return), fHi]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getDirection:null#[ReturnStatement(return), direction]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getStrict:null#[ReturnStatement(return), strict]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getIndex:null#[ReturnStatement(return), index]
org.apache.commons.math4.exception:NonMonotonicSequenceException:getPrevious:null#[ReturnStatement(return), previous]
org.apache.commons.math4.exception:NullArgumentException:getContext:null#[ReturnStatement(return), context]
org.apache.commons.math4.exception:NullArgumentException:getMessage:null#[ReturnStatement(return), context, getMessage]
org.apache.commons.math4.exception:NullArgumentException:getLocalizedMessage:null#[ReturnStatement(return), context, getLocalizedMessage]
org.apache.commons.math4.exception:NumberIsTooLargeException:getBoundIsAllowed:null#[ReturnStatement(return), boundIsAllowed]
org.apache.commons.math4.exception:NumberIsTooLargeException:getMax:null#[ReturnStatement(return), max]
org.apache.commons.math4.exception:NumberIsTooSmallException:getBoundIsAllowed:null#[ReturnStatement(return), boundIsAllowed]
org.apache.commons.math4.exception:NumberIsTooSmallException:getMin:null#[ReturnStatement(return), min]
org.apache.commons.math4.exception:OutOfRangeException:getLo:null#[ReturnStatement(return), lo]
org.apache.commons.math4.exception:OutOfRangeException:getHi:null#[ReturnStatement(return), hi]
org.apache.commons.math4.exception.util:ArgUtils:flatten:Object[]#[VariableDeclarationStatement(), final, List, Object, list, new, ArrayList, Object, IfStatement(if), array, null, EnhancedForStatement(for), Object, o, array, IfStatement(if), instanceof, o, Object, EnhancedForStatement(for), Object, oR, flatten, Object, o, ExpressionStatement(), list, add, oR, ExpressionStatement(), list, add, o, ReturnStatement(return), list, toArray]
org.apache.commons.math4.exception.util:DummyLocalizable:getSourceString:null#[ReturnStatement(return), source]
org.apache.commons.math4.exception.util:DummyLocalizable:getLocalizedString:Locale#[ReturnStatement(return), source]
org.apache.commons.math4.exception.util:DummyLocalizable:toString:null#[ReturnStatement(return), source]
org.apache.commons.math4.exception.util:ExceptionContext:getThrowable:null#[ReturnStatement(return), throwable]
org.apache.commons.math4.exception.util:ExceptionContext:addMessage:Localizable+Object...#[ExpressionStatement(), msgPatterns, add, pattern, ExpressionStatement(), msgArguments, add, ArgUtils, flatten, arguments]
org.apache.commons.math4.exception.util:ExceptionContext:setValue:String+Object#[ExpressionStatement(), context, put, key, value]
org.apache.commons.math4.exception.util:ExceptionContext:getValue:String#[ReturnStatement(return), context, get, key]
org.apache.commons.math4.exception.util:ExceptionContext:getKeys:null#[ReturnStatement(return), context, keySet]
org.apache.commons.math4.exception.util:ExceptionContext:getMessage:null#[ReturnStatement(return), getMessage, Locale.US]
org.apache.commons.math4.exception.util:ExceptionContext:getLocalizedMessage:null#[ReturnStatement(return), getMessage, Locale, getDefault]
org.apache.commons.math4.exception.util:ExceptionContext:getMessage:Locale#[ReturnStatement(return), buildMessage, locale, ": "]
org.apache.commons.math4.exception.util:ExceptionContext:getMessage:Locale+String#[ReturnStatement(return), buildMessage, locale, separator]
org.apache.commons.math4.exception.util:ExceptionContext:buildMessage:Locale+String#[VariableDeclarationStatement(), final, StringBuilder, sb, new, StringBuilder, VariableDeclarationStatement(), int, count, 0, VariableDeclarationStatement(), final, int, len, msgPatterns, size, ForStatement(for), int, i, 0, i, len, i, VariableDeclarationStatement(), final, Localizable, pat, msgPatterns, get, i, VariableDeclarationStatement(), final, Object, args, msgArguments, get, i, VariableDeclarationStatement(), final, MessageFormat, fmt, new, MessageFormat, pat, getLocalizedString, locale, locale, ExpressionStatement(), sb, append, fmt, format, args, IfStatement(if), count, len, ExpressionStatement(), sb, append, separator, ReturnStatement(return), sb, toString]
org.apache.commons.math4.exception.util:ExceptionContext:writeObject:ObjectOutputStream#[ExpressionStatement(), out, writeObject, throwable, ExpressionStatement(), serializeMessages, out, ExpressionStatement(), serializeContext, out]
org.apache.commons.math4.exception.util:ExceptionContext:readObject:ObjectInputStream#[ExpressionStatement(), throwable, Throwable, in, readObject, ExpressionStatement(), deSerializeMessages, in, ExpressionStatement(), deSerializeContext, in]
org.apache.commons.math4.exception.util:ExceptionContext:serializeMessages:ObjectOutputStream#[VariableDeclarationStatement(), final, int, len, msgPatterns, size, ExpressionStatement(), out, writeInt, len, ForStatement(for), int, i, 0, i, len, i, VariableDeclarationStatement(), final, Localizable, pat, msgPatterns, get, i, ExpressionStatement(), out, writeObject, pat, VariableDeclarationStatement(), final, Object, args, msgArguments, get, i, VariableDeclarationStatement(), final, int, aLen, args.length, ExpressionStatement(), out, writeInt, aLen, ForStatement(for), int, j, 0, j, aLen, j, IfStatement(if), instanceof, args, j, Serializable, ExpressionStatement(), out, writeObject, args, j, ExpressionStatement(), out, writeObject, nonSerializableReplacement, args, j]
org.apache.commons.math4.exception.util:ExceptionContext:deSerializeMessages:ObjectInputStream#[VariableDeclarationStatement(), final, int, len, in, readInt, ExpressionStatement(), msgPatterns, new, ArrayList, Localizable, len, ExpressionStatement(), msgArguments, new, ArrayList, Object, len, ForStatement(for), int, i, 0, i, len, i, VariableDeclarationStatement(), final, Localizable, pat, Localizable, in, readObject, ExpressionStatement(), msgPatterns, add, pat, VariableDeclarationStatement(), final, int, aLen, in, readInt, VariableDeclarationStatement(), final, Object, args, Object, aLen, ForStatement(for), int, j, 0, j, aLen, j, ExpressionStatement(), args, j, in, readObject, ExpressionStatement(), msgArguments, add, args]
org.apache.commons.math4.exception.util:ExceptionContext:serializeContext:ObjectOutputStream#[VariableDeclarationStatement(), final, int, len, context, size, ExpressionStatement(), out, writeInt, len, EnhancedForStatement(for), Map.Entry, String, Object, entry, context, entrySet, ExpressionStatement(), out, writeObject, entry, getKey, VariableDeclarationStatement(), final, Object, value, entry, getValue, IfStatement(if), instanceof, value, Serializable, ExpressionStatement(), out, writeObject, value, ExpressionStatement(), out, writeObject, nonSerializableReplacement, value]
org.apache.commons.math4.exception.util:ExceptionContext:deSerializeContext:ObjectInputStream#[VariableDeclarationStatement(), final, int, len, in, readInt, ExpressionStatement(), context, new, HashMap, String, Object, ForStatement(for), int, i, 0, i, len, i, VariableDeclarationStatement(), final, String, key, String, in, readObject, VariableDeclarationStatement(), final, Object, value, in, readObject, ExpressionStatement(), context, put, key, value]
org.apache.commons.math4.exception.util:ExceptionContext:nonSerializableReplacement:Object#[ReturnStatement(return), "[Object could not be serialized: ", obj, getClass, getName, "]"]
org.apache.commons.math4.filter:DefaultMeasurementModel:getMeasurementMatrix:null#[ReturnStatement(return), measurementMatrix]
org.apache.commons.math4.filter:DefaultMeasurementModel:getMeasurementNoise:null#[ReturnStatement(return), measurementNoise]
org.apache.commons.math4.filter:DefaultProcessModel:getStateTransitionMatrix:null#[ReturnStatement(return), stateTransitionMatrix]
org.apache.commons.math4.filter:DefaultProcessModel:getControlMatrix:null#[ReturnStatement(return), controlMatrix]
org.apache.commons.math4.filter:DefaultProcessModel:getProcessNoise:null#[ReturnStatement(return), processNoiseCovMatrix]
org.apache.commons.math4.filter:DefaultProcessModel:getInitialStateEstimate:null#[ReturnStatement(return), initialStateEstimateVector]
org.apache.commons.math4.filter:DefaultProcessModel:getInitialErrorCovariance:null#[ReturnStatement(return), initialErrorCovMatrix]
org.apache.commons.math4.filter:KalmanFilter:getStateDimension:null#[ReturnStatement(return), stateEstimation, getDimension]
org.apache.commons.math4.filter:KalmanFilter:getMeasurementDimension:null#[ReturnStatement(return), measurementMatrix, getRowDimension]
org.apache.commons.math4.filter:KalmanFilter:getStateEstimation:null#[ReturnStatement(return), stateEstimation, toArray]
org.apache.commons.math4.filter:KalmanFilter:getStateEstimationVector:null#[ReturnStatement(return), stateEstimation, copy]
org.apache.commons.math4.filter:KalmanFilter:getErrorCovariance:null#[ReturnStatement(return), errorCovariance, getData]
org.apache.commons.math4.filter:KalmanFilter:getErrorCovarianceMatrix:null#[ReturnStatement(return), errorCovariance, copy]
org.apache.commons.math4.filter:KalmanFilter:predict:null#[ExpressionStatement(), predict, RealVector, null]
org.apache.commons.math4.filter:KalmanFilter:predict:double[]#[ExpressionStatement(), predict, new, ArrayRealVector, u, false]
org.apache.commons.math4.filter:KalmanFilter:predict:RealVector#[IfStatement(if), u, null, u, getDimension, controlMatrix, getColumnDimension, ThrowStatement(throw), new, DimensionMismatchException, u, getDimension, controlMatrix, getColumnDimension, ExpressionStatement(), stateEstimation, transitionMatrix, operate, stateEstimation, IfStatement(if), u, null, ExpressionStatement(), stateEstimation, stateEstimation, add, controlMatrix, operate, u, ExpressionStatement(), errorCovariance, transitionMatrix, multiply, errorCovariance, multiply, transitionMatrixT, add, processModel, getProcessNoise]
org.apache.commons.math4.filter:KalmanFilter:correct:double[]#[ExpressionStatement(), correct, new, ArrayRealVector, z, false]
org.apache.commons.math4.filter:KalmanFilter:correct:RealVector#[ExpressionStatement(), MathUtils, checkNotNull, z, IfStatement(if), z, getDimension, measurementMatrix, getRowDimension, ThrowStatement(throw), new, DimensionMismatchException, z, getDimension, measurementMatrix, getRowDimension, VariableDeclarationStatement(), RealMatrix, s, measurementMatrix, multiply, errorCovariance, multiply, measurementMatrixT, add, measurementModel, getMeasurementNoise, VariableDeclarationStatement(), RealVector, innovation, z, subtract, measurementMatrix, operate, stateEstimation, VariableDeclarationStatement(), RealMatrix, kalmanGain, new, CholeskyDecomposition, s, getSolver, solve, measurementMatrix, multiply, errorCovariance, transpose, transpose, ExpressionStatement(), stateEstimation, stateEstimation, add, kalmanGain, operate, innovation, VariableDeclarationStatement(), RealMatrix, identity, MatrixUtils, createRealIdentityMatrix, kalmanGain, getRowDimension, ExpressionStatement(), errorCovariance, identity, subtract, kalmanGain, multiply, measurementMatrix, multiply, errorCovariance]
org.apache.commons.math4.fitting:AbstractCurveFitter:fit:Collection<WeightedObservedPoint>#[ReturnStatement(return), getOptimizer, optimize, getProblem, points, getPoint, toArray]
org.apache.commons.math4.fitting:AbstractCurveFitter:getOptimizer:null#[ReturnStatement(return), new, LevenbergMarquardtOptimizer]
org.apache.commons.math4.fitting:GaussianCurveFitter:create:null#[ReturnStatement(return), new, GaussianCurveFitter, null, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:GaussianCurveFitter:withStartPoint:double[]#[ReturnStatement(return), new, GaussianCurveFitter, newStart, clone, maxIter]
org.apache.commons.math4.fitting:GaussianCurveFitter:withMaxIterations:int#[ReturnStatement(return), new, GaussianCurveFitter, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:GaussianCurveFitter:getProblem:Collection<WeightedObservedPoint>#[VariableDeclarationStatement(), final, int, len, observations, size, VariableDeclarationStatement(), final, double, target, double, len, VariableDeclarationStatement(), final, double, weights, double, len, VariableDeclarationStatement(), int, i, 0, EnhancedForStatement(for), WeightedObservedPoint, obs, observations, ExpressionStatement(), target, i, obs, getY, ExpressionStatement(), weights, i, obs, getWeight, ExpressionStatement(), i, VariableDeclarationStatement(), final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, FUNCTION, observations, VariableDeclarationStatement(), final, double, startPoint, initialGuess, null, initialGuess, new, ParameterGuesser, observations, guess, ReturnStatement(return), new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, startPoint, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting:HarmonicCurveFitter:create:null#[ReturnStatement(return), new, HarmonicCurveFitter, null, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:HarmonicCurveFitter:withStartPoint:double[]#[ReturnStatement(return), new, HarmonicCurveFitter, newStart, clone, maxIter]
org.apache.commons.math4.fitting:HarmonicCurveFitter:withMaxIterations:int#[ReturnStatement(return), new, HarmonicCurveFitter, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:HarmonicCurveFitter:getProblem:Collection<WeightedObservedPoint>#[VariableDeclarationStatement(), final, int, len, observations, size, VariableDeclarationStatement(), final, double, target, double, len, VariableDeclarationStatement(), final, double, weights, double, len, VariableDeclarationStatement(), int, i, 0, EnhancedForStatement(for), WeightedObservedPoint, obs, observations, ExpressionStatement(), target, i, obs, getY, ExpressionStatement(), weights, i, obs, getWeight, ExpressionStatement(), i, VariableDeclarationStatement(), final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, FUNCTION, observations, VariableDeclarationStatement(), final, double, startPoint, initialGuess, null, initialGuess, new, ParameterGuesser, observations, guess, ReturnStatement(return), new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, startPoint, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getCovariances:double#[VariableDeclarationStatement(), final, RealMatrix, j, this, getJacobian, VariableDeclarationStatement(), final, RealMatrix, jTj, j, transpose, multiply, j, VariableDeclarationStatement(), final, DecompositionSolver, solver, new, QRDecomposition, jTj, threshold, getSolver, ReturnStatement(return), solver, getInverse]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getSigma:double#[VariableDeclarationStatement(), final, RealMatrix, cov, this, getCovariances, covarianceSingularityThreshold, VariableDeclarationStatement(), final, int, nC, cov, getColumnDimension, VariableDeclarationStatement(), final, RealVector, sig, new, ArrayRealVector, nC, ForStatement(for), int, i, 0, i, nC, i, ExpressionStatement(), sig, setEntry, i, FastMath, sqrt, cov, getEntry, i, i, ReturnStatement(return), sig]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getRMS:null#[ReturnStatement(return), FastMath, sqrt, getReducedChiSquare, 1]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getCost:null#[ReturnStatement(return), FastMath, sqrt, getChiSquare]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getChiSquare:null#[VariableDeclarationStatement(), final, ArrayRealVector, r, new, ArrayRealVector, getResiduals, ReturnStatement(return), r, dotProduct, r]
org.apache.commons.math4.fitting.leastsquares:AbstractEvaluation:getReducedChiSquare:int#[ReturnStatement(return), getChiSquare, observationSize, numberOfFittedParameters, 1]
org.apache.commons.math4.fitting.leastsquares:DenseWeightedEvaluation:getJacobian:null#[ReturnStatement(return), weightSqrt, multiply, this, unweighted, getJacobian]
org.apache.commons.math4.fitting.leastsquares:DenseWeightedEvaluation:getResiduals:null#[ReturnStatement(return), this, weightSqrt, operate, this, unweighted, getResiduals]
org.apache.commons.math4.fitting.leastsquares:DenseWeightedEvaluation:getPoint:null#[ReturnStatement(return), unweighted, getPoint]
org.apache.commons.math4.fitting.leastsquares:EvaluationRmsChecker:converged:int+Evaluation+Evaluation#[VariableDeclarationStatement(), final, double, prevRms, previous, getRMS, VariableDeclarationStatement(), final, double, currRms, current, getRMS, ReturnStatement(return), Precision, equals, prevRms, currRms, this, absTol, Precision, equalsWithRelativeTolerance, prevRms, currRms, this, relTol]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[TryStatement(try), VariableDeclarationStatement(), final, Pair, RealMatrix, RealVector, normalEquation, computeNormalMatrix, jacobian, residuals, VariableDeclarationStatement(), final, RealMatrix, normal, normalEquation, getFirst, VariableDeclarationStatement(), final, RealVector, jTr, normalEquation, getSecond, ReturnStatement(return), new, LUDecomposition, normal, SINGULARITY_THRESHOLD, getSolver, solve, jTr, catch, SingularMatrixException, e, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM, e]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[TryStatement(try), ReturnStatement(return), new, QRDecomposition, jacobian, SINGULARITY_THRESHOLD, getSolver, solve, residuals, catch, SingularMatrixException, e, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM, e]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[TryStatement(try), VariableDeclarationStatement(), final, Pair, RealMatrix, RealVector, normalEquation, computeNormalMatrix, jacobian, residuals, VariableDeclarationStatement(), final, RealMatrix, normal, normalEquation, getFirst, VariableDeclarationStatement(), final, RealVector, jTr, normalEquation, getSecond, ReturnStatement(return), new, CholeskyDecomposition, normal, SINGULARITY_THRESHOLD, SINGULARITY_THRESHOLD, getSolver, solve, jTr, catch, NonPositiveDefiniteMatrixException, e, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM, e]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:solve:RealMatrix+RealVector#[ReturnStatement(return), new, SingularValueDecomposition, jacobian, getSolver, solve, residuals]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:getDecomposition:null#[ReturnStatement(return), this, decomposition]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:withDecomposition:Decomposition#[ReturnStatement(return), new, GaussNewtonOptimizer, newDecomposition]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:optimize:LeastSquaresProblem#[VariableDeclarationStatement(), final, Incrementor, evaluationCounter, lsp, getEvaluationCounter, VariableDeclarationStatement(), final, Incrementor, iterationCounter, lsp, getIterationCounter, VariableDeclarationStatement(), final, ConvergenceChecker, Evaluation, checker, lsp, getConvergenceChecker, IfStatement(if), checker, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), RealVector, currentPoint, lsp, getStart, VariableDeclarationStatement(), Evaluation, current, null, WhileStatement(while), true, ExpressionStatement(), iterationCounter, incrementCount, VariableDeclarationStatement(), Evaluation, previous, current, ExpressionStatement(), evaluationCounter, incrementCount, ExpressionStatement(), current, lsp, evaluate, currentPoint, VariableDeclarationStatement(), final, RealVector, currentResiduals, current, getResiduals, VariableDeclarationStatement(), final, RealMatrix, weightedJacobian, current, getJacobian, ExpressionStatement(), currentPoint, current, getPoint, IfStatement(if), previous, null, checker, converged, iterationCounter, getCount, previous, current, ReturnStatement(return), new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, VariableDeclarationStatement(), final, RealVector, dX, this, decomposition, solve, weightedJacobian, currentResiduals, ExpressionStatement(), currentPoint, currentPoint, add, dX]
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:toString:null#[ReturnStatement(return), "GaussNewtonOptimizer{", "decomposition=", decomposition, '}']
org.apache.commons.math4.fitting.leastsquares:GaussNewtonOptimizer:computeNormalMatrix:RealMatrix+RealVector#[VariableDeclarationStatement(), final, int, nR, jacobian, getRowDimension, VariableDeclarationStatement(), final, int, nC, jacobian, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, normal, MatrixUtils, createRealMatrix, nC, nC, VariableDeclarationStatement(), final, RealVector, jTr, new, ArrayRealVector, nC, ForStatement(for), int, i, 0, i, nR, i, ForStatement(for), int, j, 0, j, nC, j, ExpressionStatement(), jTr, setEntry, j, jTr, getEntry, j, residuals, getEntry, i, jacobian, getEntry, i, j, ForStatement(for), int, k, 0, k, nC, k, ForStatement(for), int, l, k, l, nC, l, ExpressionStatement(), normal, setEntry, k, l, normal, getEntry, k, l, jacobian, getEntry, i, k, jacobian, getEntry, i, l, ForStatement(for), int, i, 0, i, nC, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), normal, setEntry, i, j, normal, getEntry, j, i, ReturnStatement(return), new, Pair, RealMatrix, RealVector, normal, jTr]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getStart:null#[ReturnStatement(return), problem, getStart]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getObservationSize:null#[ReturnStatement(return), problem, getObservationSize]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getParameterSize:null#[ReturnStatement(return), problem, getParameterSize]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:evaluate:RealVector#[ReturnStatement(return), problem, evaluate, point]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getEvaluationCounter:null#[ReturnStatement(return), problem, getEvaluationCounter]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getIterationCounter:null#[ReturnStatement(return), problem, getIterationCounter]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresAdapter:getConvergenceChecker:null#[ReturnStatement(return), problem, getConvergenceChecker]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:build:null#[ReturnStatement(return), LeastSquaresFactory, create, model, target, start, weight, checker, maxEvaluations, maxIterations, lazyEvaluation, paramValidator]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:maxEvaluations:int#[ExpressionStatement(), this, maxEvaluations, newMaxEvaluations, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:maxIterations:int#[ExpressionStatement(), this, maxIterations, newMaxIterations, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:checker:ConvergenceChecker<Evaluation>#[ExpressionStatement(), this, checker, newChecker, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:checkerPair:ConvergenceChecker<PointVectorValuePair>#[ReturnStatement(return), this, checker, LeastSquaresFactory, evaluationChecker, newChecker]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:model:MultivariateVectorFunction+MultivariateMatrixFunction#[ReturnStatement(return), model, LeastSquaresFactory, model, value, jacobian]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:model:MultivariateJacobianFunction#[ExpressionStatement(), this, model, newModel, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:target:RealVector#[ExpressionStatement(), this, target, newTarget, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:target:double[]#[ReturnStatement(return), target, new, ArrayRealVector, newTarget, false]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:start:RealVector#[ExpressionStatement(), this, start, newStart, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:start:double[]#[ReturnStatement(return), start, new, ArrayRealVector, newStart, false]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:weight:RealMatrix#[ExpressionStatement(), this, weight, newWeight, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:lazyEvaluation:boolean#[ExpressionStatement(), lazyEvaluation, newValue, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresBuilder:parameterValidator:ParameterValidator#[ExpressionStatement(), paramValidator, newValidator, ReturnStatement(return), this]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateJacobianFunction+RealVector+RealVector+RealMatrix+ConvergenceChecker<Evaluation>+int+int+boolean+ParameterValidator#[VariableDeclarationStatement(), final, LeastSquaresProblem, p, new, LocalLeastSquaresProblem, model, observed, start, checker, maxEvaluations, maxIterations, lazyEvaluation, paramValidator, IfStatement(if), weight, null, ReturnStatement(return), weightMatrix, p, weight, ReturnStatement(return), p]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateJacobianFunction+RealVector+RealVector+ConvergenceChecker<Evaluation>+int+int#[ReturnStatement(return), create, model, observed, start, null, checker, maxEvaluations, maxIterations, false, null]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateJacobianFunction+RealVector+RealVector+RealMatrix+ConvergenceChecker<Evaluation>+int+int#[ReturnStatement(return), weightMatrix, create, model, observed, start, checker, maxEvaluations, maxIterations, weight]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:create:MultivariateVectorFunction+MultivariateMatrixFunction+double[]+double[]+RealMatrix+ConvergenceChecker<Evaluation>+int+int#[ReturnStatement(return), create, model, model, jacobian, new, ArrayRealVector, observed, false, new, ArrayRealVector, start, false, weight, checker, maxEvaluations, maxIterations]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:weightMatrix:LeastSquaresProblem+RealMatrix#[VariableDeclarationStatement(), final, RealMatrix, weightSquareRoot, squareRoot, weights, ReturnStatement(return), new, LeastSquaresAdapter, problem, Override, public, Evaluation, evaluate, final, RealVector, point, ReturnStatement(return), new, DenseWeightedEvaluation, super, evaluate, point, weightSquareRoot]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:weightDiagonal:LeastSquaresProblem+RealVector#[ReturnStatement(return), weightMatrix, problem, new, DiagonalMatrix, weights, toArray]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:countEvaluations:LeastSquaresProblem+Incrementor#[ReturnStatement(return), new, LeastSquaresAdapter, problem, Override, public, Evaluation, evaluate, final, RealVector, point, ExpressionStatement(), counter, incrementCount, ReturnStatement(return), super, evaluate, point]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:evaluationChecker:ConvergenceChecker<PointVectorValuePair>#[ReturnStatement(return), new, ConvergenceChecker, Evaluation, Override, public, boolean, converged, final, int, iteration, final, Evaluation, previous, final, Evaluation, current, ReturnStatement(return), checker, converged, iteration, new, PointVectorValuePair, previous, getPoint, toArray, previous, getResiduals, toArray, false, new, PointVectorValuePair, current, getPoint, toArray, current, getResiduals, toArray, false]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:squareRoot:RealMatrix#[IfStatement(if), instanceof, m, DiagonalMatrix, VariableDeclarationStatement(), final, int, dim, m, getRowDimension, VariableDeclarationStatement(), final, RealMatrix, sqrtM, new, DiagonalMatrix, dim, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), sqrtM, setEntry, i, i, FastMath, sqrt, m, getEntry, i, i, ReturnStatement(return), sqrtM, VariableDeclarationStatement(), final, EigenDecomposition, dec, new, EigenDecomposition, m, ReturnStatement(return), dec, getSquareRoot]
org.apache.commons.math4.fitting.leastsquares:LeastSquaresFactory:model:MultivariateVectorFunction+MultivariateMatrixFunction#[ReturnStatement(return), new, LocalValueAndJacobianFunction, value, jacobian]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withInitialStepBoundFactor:double#[ReturnStatement(return), new, LevenbergMarquardtOptimizer, newInitialStepBoundFactor, costRelativeTolerance, parRelativeTolerance, orthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withCostRelativeTolerance:double#[ReturnStatement(return), new, LevenbergMarquardtOptimizer, initialStepBoundFactor, newCostRelativeTolerance, parRelativeTolerance, orthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withParameterRelativeTolerance:double#[ReturnStatement(return), new, LevenbergMarquardtOptimizer, initialStepBoundFactor, costRelativeTolerance, newParRelativeTolerance, orthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withOrthoTolerance:double#[ReturnStatement(return), new, LevenbergMarquardtOptimizer, initialStepBoundFactor, costRelativeTolerance, parRelativeTolerance, newOrthoTolerance, qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:withRankingThreshold:double#[ReturnStatement(return), new, LevenbergMarquardtOptimizer, initialStepBoundFactor, costRelativeTolerance, parRelativeTolerance, orthoTolerance, newQRRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getInitialStepBoundFactor:null#[ReturnStatement(return), initialStepBoundFactor]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getCostRelativeTolerance:null#[ReturnStatement(return), costRelativeTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getParameterRelativeTolerance:null#[ReturnStatement(return), parRelativeTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getOrthoTolerance:null#[ReturnStatement(return), orthoTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:getRankingThreshold:null#[ReturnStatement(return), qrRankingThreshold]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:optimize:LeastSquaresProblem#[VariableDeclarationStatement(), final, int, nR, problem, getObservationSize, VariableDeclarationStatement(), final, int, nC, problem, getParameterSize, VariableDeclarationStatement(), final, Incrementor, iterationCounter, problem, getIterationCounter, VariableDeclarationStatement(), final, Incrementor, evaluationCounter, problem, getEvaluationCounter, VariableDeclarationStatement(), final, ConvergenceChecker, Evaluation, checker, problem, getConvergenceChecker, VariableDeclarationStatement(), final, int, solvedCols, FastMath, min, nR, nC, VariableDeclarationStatement(), double, lmDir, double, nC, VariableDeclarationStatement(), double, lmPar, 0, VariableDeclarationStatement(), double, delta, 0, VariableDeclarationStatement(), double, xNorm, 0, VariableDeclarationStatement(), double, diag, double, nC, VariableDeclarationStatement(), double, oldX, double, nC, VariableDeclarationStatement(), double, oldRes, double, nR, VariableDeclarationStatement(), double, qtf, double, nR, VariableDeclarationStatement(), double, work1, double, nC, VariableDeclarationStatement(), double, work2, double, nC, VariableDeclarationStatement(), double, work3, double, nC, ExpressionStatement(), evaluationCounter, incrementCount, VariableDeclarationStatement(), Evaluation, current, problem, evaluate, problem, getStart, VariableDeclarationStatement(), double, currentResiduals, current, getResiduals, toArray, VariableDeclarationStatement(), double, currentCost, current, getCost, VariableDeclarationStatement(), double, currentPoint, current, getPoint, toArray, VariableDeclarationStatement(), boolean, firstIteration, true, WhileStatement(while), true, ExpressionStatement(), iterationCounter, incrementCount, VariableDeclarationStatement(), final, Evaluation, previous, current, VariableDeclarationStatement(), final, InternalData, internalData, qrDecomposition, current, getJacobian, solvedCols, VariableDeclarationStatement(), final, double, weightedJacobian, internalData.weightedJacobian, VariableDeclarationStatement(), final, int, permutation, internalData.permutation, VariableDeclarationStatement(), final, double, diagR, internalData.diagR, VariableDeclarationStatement(), final, double, jacNorm, internalData.jacNorm, VariableDeclarationStatement(), double, weightedResidual, currentResiduals, ForStatement(for), int, i, 0, i, nR, i, ExpressionStatement(), qtf, i, weightedResidual, i, ExpressionStatement(), qTy, qtf, internalData, ForStatement(for), int, k, 0, k, solvedCols, k, VariableDeclarationStatement(), int, pk, permutation, k, ExpressionStatement(), weightedJacobian, k, pk, diagR, pk, IfStatement(if), firstIteration, ExpressionStatement(), xNorm, 0, ForStatement(for), int, k, 0, k, nC, k, VariableDeclarationStatement(), double, dk, jacNorm, k, IfStatement(if), dk, 0, ExpressionStatement(), dk, 1.0, VariableDeclarationStatement(), double, xk, dk, currentPoint, k, ExpressionStatement(), xNorm, xk, xk, ExpressionStatement(), diag, k, dk, ExpressionStatement(), xNorm, FastMath, sqrt, xNorm, ExpressionStatement(), delta, xNorm, 0, initialStepBoundFactor, initialStepBoundFactor, xNorm, VariableDeclarationStatement(), double, maxCosine, 0, IfStatement(if), currentCost, 0, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, s, jacNorm, pj, IfStatement(if), s, 0, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, j, i, ExpressionStatement(), sum, weightedJacobian, i, pj, qtf, i, ExpressionStatement(), maxCosine, FastMath, max, maxCosine, FastMath, abs, sum, s, currentCost, IfStatement(if), maxCosine, orthoTolerance, ReturnStatement(return), new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, ForStatement(for), int, j, 0, j, nC, j, ExpressionStatement(), diag, j, FastMath, max, diag, j, jacNorm, j, ForStatement(for), double, ratio, 0, ratio, 1.0e-4, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ExpressionStatement(), oldX, pj, currentPoint, pj, VariableDeclarationStatement(), final, double, previousCost, currentCost, VariableDeclarationStatement(), double, tmpVec, weightedResidual, ExpressionStatement(), weightedResidual, oldRes, ExpressionStatement(), oldRes, tmpVec, ExpressionStatement(), lmPar, determineLMParameter, qtf, delta, diag, internalData, solvedCols, work1, work2, work3, lmDir, lmPar, VariableDeclarationStatement(), double, lmNorm, 0, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ExpressionStatement(), lmDir, pj, lmDir, pj, ExpressionStatement(), currentPoint, pj, oldX, pj, lmDir, pj, VariableDeclarationStatement(), double, s, diag, pj, lmDir, pj, ExpressionStatement(), lmNorm, s, s, ExpressionStatement(), lmNorm, FastMath, sqrt, lmNorm, IfStatement(if), firstIteration, ExpressionStatement(), delta, FastMath, min, delta, lmNorm, ExpressionStatement(), evaluationCounter, incrementCount, ExpressionStatement(), current, problem, evaluate, new, ArrayRealVector, currentPoint, ExpressionStatement(), currentResiduals, current, getResiduals, toArray, ExpressionStatement(), currentCost, current, getCost, ExpressionStatement(), currentPoint, current, getPoint, toArray, VariableDeclarationStatement(), double, actRed, 1.0, IfStatement(if), 0.1, currentCost, previousCost, VariableDeclarationStatement(), double, r, currentCost, previousCost, ExpressionStatement(), actRed, 1.0, r, r, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, dirJ, lmDir, pj, ExpressionStatement(), work1, j, 0, ForStatement(for), int, i, 0, i, j, i, ExpressionStatement(), work1, i, weightedJacobian, i, pj, dirJ, VariableDeclarationStatement(), double, coeff1, 0, ForStatement(for), int, j, 0, j, solvedCols, j, ExpressionStatement(), coeff1, work1, j, work1, j, VariableDeclarationStatement(), double, pc2, previousCost, previousCost, ExpressionStatement(), coeff1, pc2, VariableDeclarationStatement(), double, coeff2, lmPar, lmNorm, lmNorm, pc2, VariableDeclarationStatement(), double, preRed, coeff1, 2, coeff2, VariableDeclarationStatement(), double, dirDer, coeff1, coeff2, ExpressionStatement(), ratio, preRed, 0, 0, actRed, preRed, IfStatement(if), ratio, 0.25, VariableDeclarationStatement(), double, tmp, actRed, 0, 0.5, dirDer, dirDer, 0.5, actRed, 0.5, IfStatement(if), 0.1, currentCost, previousCost, tmp, 0.1, ExpressionStatement(), tmp, 0.1, ExpressionStatement(), delta, tmp, FastMath, min, delta, 10.0, lmNorm, ExpressionStatement(), lmPar, tmp, IfStatement(if), lmPar, 0, ratio, 0.75, ExpressionStatement(), delta, 2, lmNorm, ExpressionStatement(), lmPar, 0.5, IfStatement(if), ratio, 1.0e-4, ExpressionStatement(), firstIteration, false, ExpressionStatement(), xNorm, 0, ForStatement(for), int, k, 0, k, nC, k, VariableDeclarationStatement(), double, xK, diag, k, currentPoint, k, ExpressionStatement(), xNorm, xK, xK, ExpressionStatement(), xNorm, FastMath, sqrt, xNorm, IfStatement(if), checker, null, checker, converged, iterationCounter, getCount, previous, current, ReturnStatement(return), new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, ExpressionStatement(), currentCost, previousCost, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ExpressionStatement(), currentPoint, pj, oldX, pj, ExpressionStatement(), tmpVec, weightedResidual, ExpressionStatement(), weightedResidual, oldRes, ExpressionStatement(), oldRes, tmpVec, ExpressionStatement(), current, previous, IfStatement(if), FastMath, abs, actRed, costRelativeTolerance, preRed, costRelativeTolerance, ratio, 2.0, delta, parRelativeTolerance, xNorm, ReturnStatement(return), new, OptimumImpl, current, evaluationCounter, getCount, iterationCounter, getCount, IfStatement(if), FastMath, abs, actRed, TWO_EPS, preRed, TWO_EPS, ratio, 2.0, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance, IfStatement(if), delta, TWO_EPS, xNorm, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance, IfStatement(if), maxCosine, TWO_EPS, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:determineLMParameter:double[]+double+double[]+InternalData+int+double[]+double[]+double[]+double[]+double#[VariableDeclarationStatement(), final, double, weightedJacobian, internalData.weightedJacobian, VariableDeclarationStatement(), final, int, permutation, internalData.permutation, VariableDeclarationStatement(), final, int, rank, internalData.rank, VariableDeclarationStatement(), final, double, diagR, internalData.diagR, VariableDeclarationStatement(), final, int, nC, weightedJacobian, 0, length, ForStatement(for), int, j, 0, j, rank, j, ExpressionStatement(), lmDir, permutation, j, qy, j, ForStatement(for), int, j, rank, j, nC, j, ExpressionStatement(), lmDir, permutation, j, 0, ForStatement(for), int, k, rank, 1, k, 0, k, VariableDeclarationStatement(), int, pk, permutation, k, VariableDeclarationStatement(), double, ypk, lmDir, pk, diagR, pk, ForStatement(for), int, i, 0, i, k, i, ExpressionStatement(), lmDir, permutation, i, ypk, weightedJacobian, i, pk, ExpressionStatement(), lmDir, pk, ypk, VariableDeclarationStatement(), double, dxNorm, 0, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, s, diag, pj, lmDir, pj, ExpressionStatement(), work1, pj, s, ExpressionStatement(), dxNorm, s, s, ExpressionStatement(), dxNorm, FastMath, sqrt, dxNorm, VariableDeclarationStatement(), double, fp, dxNorm, delta, IfStatement(if), fp, 0.1, delta, ExpressionStatement(), lmPar, 0, ReturnStatement(return), lmPar, VariableDeclarationStatement(), double, sum2, VariableDeclarationStatement(), double, parl, 0, IfStatement(if), rank, solvedCols, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ExpressionStatement(), work1, pj, diag, pj, dxNorm, ExpressionStatement(), sum2, 0, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, j, i, ExpressionStatement(), sum, weightedJacobian, i, pj, work1, permutation, i, VariableDeclarationStatement(), double, s, work1, pj, sum, diagR, pj, ExpressionStatement(), work1, pj, s, ExpressionStatement(), sum2, s, s, ExpressionStatement(), parl, fp, delta, sum2, ExpressionStatement(), sum2, 0, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, j, i, ExpressionStatement(), sum, weightedJacobian, i, pj, qy, i, ExpressionStatement(), sum, diag, pj, ExpressionStatement(), sum2, sum, sum, VariableDeclarationStatement(), double, gNorm, FastMath, sqrt, sum2, VariableDeclarationStatement(), double, paru, gNorm, delta, IfStatement(if), paru, 0, ExpressionStatement(), paru, Precision.SAFE_MIN, FastMath, min, delta, 0.1, ExpressionStatement(), lmPar, FastMath, min, paru, FastMath, max, lmPar, parl, IfStatement(if), lmPar, 0, ExpressionStatement(), lmPar, gNorm, dxNorm, ForStatement(for), int, countdown, 10, countdown, 0, countdown, IfStatement(if), lmPar, 0, ExpressionStatement(), lmPar, FastMath, max, Precision.SAFE_MIN, 0.001, paru, VariableDeclarationStatement(), double, sPar, FastMath, sqrt, lmPar, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ExpressionStatement(), work1, pj, sPar, diag, pj, ExpressionStatement(), determineLMDirection, qy, work1, work2, internalData, solvedCols, work3, lmDir, ExpressionStatement(), dxNorm, 0, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, s, diag, pj, lmDir, pj, ExpressionStatement(), work3, pj, s, ExpressionStatement(), dxNorm, s, s, ExpressionStatement(), dxNorm, FastMath, sqrt, dxNorm, VariableDeclarationStatement(), double, previousFP, fp, ExpressionStatement(), fp, dxNorm, delta, IfStatement(if), FastMath, abs, fp, 0.1, delta, parl, 0, fp, previousFP, previousFP, 0, ReturnStatement(return), lmPar, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ExpressionStatement(), work1, pj, work3, pj, diag, pj, dxNorm, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ExpressionStatement(), work1, pj, work2, j, VariableDeclarationStatement(), double, tmp, work1, pj, ForStatement(for), int, i, j, 1, i, solvedCols, i, ExpressionStatement(), work1, permutation, i, weightedJacobian, i, pj, tmp, ExpressionStatement(), sum2, 0, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), double, s, work1, permutation, j, ExpressionStatement(), sum2, s, s, VariableDeclarationStatement(), double, correction, fp, delta, sum2, IfStatement(if), fp, 0, ExpressionStatement(), parl, FastMath, max, parl, lmPar, IfStatement(if), fp, 0, ExpressionStatement(), paru, FastMath, min, paru, lmPar, ExpressionStatement(), lmPar, FastMath, max, parl, lmPar, correction, ReturnStatement(return), lmPar]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:determineLMDirection:double[]+double[]+double[]+InternalData+int+double[]+double[]#[VariableDeclarationStatement(), final, int, permutation, internalData.permutation, VariableDeclarationStatement(), final, double, weightedJacobian, internalData.weightedJacobian, VariableDeclarationStatement(), final, double, diagR, internalData.diagR, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, ForStatement(for), int, i, j, 1, i, solvedCols, i, ExpressionStatement(), weightedJacobian, i, pj, weightedJacobian, j, permutation, i, ExpressionStatement(), lmDir, j, diagR, pj, ExpressionStatement(), work, j, qy, j, ForStatement(for), int, j, 0, j, solvedCols, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, dpj, diag, pj, IfStatement(if), dpj, 0, ExpressionStatement(), Arrays, fill, lmDiag, j, 1, lmDiag.length, 0, ExpressionStatement(), lmDiag, j, dpj, VariableDeclarationStatement(), double, qtbpj, 0, ForStatement(for), int, k, j, k, solvedCols, k, VariableDeclarationStatement(), int, pk, permutation, k, IfStatement(if), lmDiag, k, 0, VariableDeclarationStatement(), final, double, sin, VariableDeclarationStatement(), final, double, cos, VariableDeclarationStatement(), double, rkk, weightedJacobian, k, pk, IfStatement(if), FastMath, abs, rkk, FastMath, abs, lmDiag, k, VariableDeclarationStatement(), final, double, cotan, rkk, lmDiag, k, ExpressionStatement(), sin, 1.0, FastMath, sqrt, 1.0, cotan, cotan, ExpressionStatement(), cos, sin, cotan, VariableDeclarationStatement(), final, double, tan, lmDiag, k, rkk, ExpressionStatement(), cos, 1.0, FastMath, sqrt, 1.0, tan, tan, ExpressionStatement(), sin, cos, tan, ExpressionStatement(), weightedJacobian, k, pk, cos, rkk, sin, lmDiag, k, VariableDeclarationStatement(), final, double, temp, cos, work, k, sin, qtbpj, ExpressionStatement(), qtbpj, sin, work, k, cos, qtbpj, ExpressionStatement(), work, k, temp, ForStatement(for), int, i, k, 1, i, solvedCols, i, VariableDeclarationStatement(), double, rik, weightedJacobian, i, pk, VariableDeclarationStatement(), final, double, temp2, cos, rik, sin, lmDiag, i, ExpressionStatement(), lmDiag, i, sin, rik, cos, lmDiag, i, ExpressionStatement(), weightedJacobian, i, pk, temp2, ExpressionStatement(), lmDiag, j, weightedJacobian, j, permutation, j, ExpressionStatement(), weightedJacobian, j, permutation, j, lmDir, j, VariableDeclarationStatement(), int, nSing, solvedCols, ForStatement(for), int, j, 0, j, solvedCols, j, IfStatement(if), lmDiag, j, 0, nSing, solvedCols, ExpressionStatement(), nSing, j, IfStatement(if), nSing, solvedCols, ExpressionStatement(), work, j, 0, IfStatement(if), nSing, 0, ForStatement(for), int, j, nSing, 1, j, 0, j, VariableDeclarationStatement(), int, pj, permutation, j, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, j, 1, i, nSing, i, ExpressionStatement(), sum, weightedJacobian, i, pj, work, i, ExpressionStatement(), work, j, work, j, sum, lmDiag, j, ForStatement(for), int, j, 0, j, lmDir.length, j, ExpressionStatement(), lmDir, permutation, j, work, j]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:qrDecomposition:RealMatrix+int#[VariableDeclarationStatement(), final, double, weightedJacobian, jacobian, scalarMultiply, 1, getData, VariableDeclarationStatement(), final, int, nR, weightedJacobian.length, VariableDeclarationStatement(), final, int, nC, weightedJacobian, 0, length, VariableDeclarationStatement(), final, int, permutation, int, nC, VariableDeclarationStatement(), final, double, diagR, double, nC, VariableDeclarationStatement(), final, double, jacNorm, double, nC, VariableDeclarationStatement(), final, double, beta, double, nC, ForStatement(for), int, k, 0, k, nC, k, ExpressionStatement(), permutation, k, k, VariableDeclarationStatement(), double, norm2, 0, ForStatement(for), int, i, 0, i, nR, i, VariableDeclarationStatement(), double, akk, weightedJacobian, i, k, ExpressionStatement(), norm2, akk, akk, ExpressionStatement(), jacNorm, k, FastMath, sqrt, norm2, ForStatement(for), int, k, 0, k, nC, k, VariableDeclarationStatement(), int, nextColumn, 1, VariableDeclarationStatement(), double, ak2, Double.NEGATIVE_INFINITY, ForStatement(for), int, i, k, i, nC, i, VariableDeclarationStatement(), double, norm2, 0, ForStatement(for), int, j, k, j, nR, j, VariableDeclarationStatement(), double, aki, weightedJacobian, j, permutation, i, ExpressionStatement(), norm2, aki, aki, IfStatement(if), Double, isInfinite, norm2, Double, isNaN, norm2, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, nR, nC, IfStatement(if), norm2, ak2, ExpressionStatement(), nextColumn, i, ExpressionStatement(), ak2, norm2, IfStatement(if), ak2, qrRankingThreshold, ReturnStatement(return), new, InternalData, weightedJacobian, permutation, k, diagR, jacNorm, beta, VariableDeclarationStatement(), int, pk, permutation, nextColumn, ExpressionStatement(), permutation, nextColumn, permutation, k, ExpressionStatement(), permutation, k, pk, VariableDeclarationStatement(), double, akk, weightedJacobian, k, pk, VariableDeclarationStatement(), double, alpha, akk, 0, FastMath, sqrt, ak2, FastMath, sqrt, ak2, VariableDeclarationStatement(), double, betak, 1.0, ak2, akk, alpha, ExpressionStatement(), beta, pk, betak, ExpressionStatement(), diagR, pk, alpha, ExpressionStatement(), weightedJacobian, k, pk, alpha, ForStatement(for), int, dk, nC, 1, k, dk, 0, dk, VariableDeclarationStatement(), double, gamma, 0, ForStatement(for), int, j, k, j, nR, j, ExpressionStatement(), gamma, weightedJacobian, j, pk, weightedJacobian, j, permutation, k, dk, ExpressionStatement(), gamma, betak, ForStatement(for), int, j, k, j, nR, j, ExpressionStatement(), weightedJacobian, j, permutation, k, dk, gamma, weightedJacobian, j, pk, ReturnStatement(return), new, InternalData, weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta]
org.apache.commons.math4.fitting.leastsquares:LevenbergMarquardtOptimizer:qTy:double[]+InternalData#[VariableDeclarationStatement(), final, double, weightedJacobian, internalData.weightedJacobian, VariableDeclarationStatement(), final, int, permutation, internalData.permutation, VariableDeclarationStatement(), final, double, beta, internalData.beta, VariableDeclarationStatement(), final, int, nR, weightedJacobian.length, VariableDeclarationStatement(), final, int, nC, weightedJacobian, 0, length, ForStatement(for), int, k, 0, k, nC, k, VariableDeclarationStatement(), int, pk, permutation, k, VariableDeclarationStatement(), double, gamma, 0, ForStatement(for), int, i, k, i, nR, i, ExpressionStatement(), gamma, weightedJacobian, i, pk, y, i, ExpressionStatement(), gamma, beta, pk, ForStatement(for), int, i, k, i, nR, i, ExpressionStatement(), y, i, gamma, weightedJacobian, i, pk]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getEvaluations:null#[ReturnStatement(return), evaluations]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getIterations:null#[ReturnStatement(return), iterations]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getCovariances:double#[ReturnStatement(return), value, getCovariances, threshold]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getSigma:double#[ReturnStatement(return), value, getSigma, covarianceSingularityThreshold]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getRMS:null#[ReturnStatement(return), value, getRMS]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getJacobian:null#[ReturnStatement(return), value, getJacobian]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getCost:null#[ReturnStatement(return), value, getCost]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getChiSquare:null#[ReturnStatement(return), value, getChiSquare]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getReducedChiSquare:int#[ReturnStatement(return), value, getReducedChiSquare, n]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getResiduals:null#[ReturnStatement(return), value, getResiduals]
org.apache.commons.math4.fitting.leastsquares:OptimumImpl:getPoint:null#[ReturnStatement(return), value, getPoint]
org.apache.commons.math4.fitting:PolynomialCurveFitter:create:int#[ReturnStatement(return), new, PolynomialCurveFitter, double, degree, 1, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:PolynomialCurveFitter:withStartPoint:double[]#[ReturnStatement(return), new, PolynomialCurveFitter, newStart, clone, maxIter]
org.apache.commons.math4.fitting:PolynomialCurveFitter:withMaxIterations:int#[ReturnStatement(return), new, PolynomialCurveFitter, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:PolynomialCurveFitter:getProblem:Collection<WeightedObservedPoint>#[VariableDeclarationStatement(), final, int, len, observations, size, VariableDeclarationStatement(), final, double, target, double, len, VariableDeclarationStatement(), final, double, weights, double, len, VariableDeclarationStatement(), int, i, 0, EnhancedForStatement(for), WeightedObservedPoint, obs, observations, ExpressionStatement(), target, i, obs, getY, ExpressionStatement(), weights, i, obs, getWeight, ExpressionStatement(), i, VariableDeclarationStatement(), final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, FUNCTION, observations, IfStatement(if), initialGuess, null, ThrowStatement(throw), new, MathInternalError, ReturnStatement(return), new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, initialGuess, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting:SimpleCurveFitter:create:ParametricUnivariateFunction+double[]#[ReturnStatement(return), new, SimpleCurveFitter, f, start, Integer.MAX_VALUE]
org.apache.commons.math4.fitting:SimpleCurveFitter:withStartPoint:double[]#[ReturnStatement(return), new, SimpleCurveFitter, function, newStart, clone, maxIter]
org.apache.commons.math4.fitting:SimpleCurveFitter:withMaxIterations:int#[ReturnStatement(return), new, SimpleCurveFitter, function, initialGuess, newMaxIter]
org.apache.commons.math4.fitting:SimpleCurveFitter:getProblem:Collection<WeightedObservedPoint>#[VariableDeclarationStatement(), final, int, len, observations, size, VariableDeclarationStatement(), final, double, target, double, len, VariableDeclarationStatement(), final, double, weights, double, len, VariableDeclarationStatement(), int, count, 0, EnhancedForStatement(for), WeightedObservedPoint, obs, observations, ExpressionStatement(), target, count, obs, getY, ExpressionStatement(), weights, count, obs, getWeight, ExpressionStatement(), count, VariableDeclarationStatement(), final, AbstractCurveFitter.TheoreticalValuesFunction, model, new, AbstractCurveFitter.TheoreticalValuesFunction, function, observations, ReturnStatement(return), new, LeastSquaresBuilder, maxEvaluations, Integer.MAX_VALUE, maxIterations, maxIter, start, initialGuess, target, target, weight, new, DiagonalMatrix, weights, model, model, getModelFunction, model, getModelFunctionJacobian, build]
org.apache.commons.math4.fitting:WeightedObservedPoint:getWeight:null#[ReturnStatement(return), weight]
org.apache.commons.math4.fitting:WeightedObservedPoint:getX:null#[ReturnStatement(return), x]
org.apache.commons.math4.fitting:WeightedObservedPoint:getY:null#[ReturnStatement(return), y]
org.apache.commons.math4.fitting:WeightedObservedPoints:add:double+double#[ExpressionStatement(), add, 1d, x, y]
org.apache.commons.math4.fitting:WeightedObservedPoints:add:double+double+double#[ExpressionStatement(), observations, add, new, WeightedObservedPoint, weight, x, y]
org.apache.commons.math4.fitting:WeightedObservedPoints:add:WeightedObservedPoint#[ExpressionStatement(), observations, add, observed]
org.apache.commons.math4.fitting:WeightedObservedPoints:toList:null#[ReturnStatement(return), new, ArrayList, WeightedObservedPoint, observations]
org.apache.commons.math4.fitting:WeightedObservedPoints:clear:null#[ExpressionStatement(), observations, clear]
org.apache.commons.math4.fraction:AbstractFormat:getDefaultNumberFormat:null#[ReturnStatement(return), getDefaultNumberFormat, Locale, getDefault]
org.apache.commons.math4.fraction:AbstractFormat:getDefaultNumberFormat:Locale#[VariableDeclarationStatement(), final, NumberFormat, nf, NumberFormat, getNumberInstance, locale, ExpressionStatement(), nf, setMaximumFractionDigits, 0, ExpressionStatement(), nf, setParseIntegerOnly, true, ReturnStatement(return), nf]
org.apache.commons.math4.fraction:AbstractFormat:getDenominatorFormat:null#[ReturnStatement(return), denominatorFormat]
org.apache.commons.math4.fraction:AbstractFormat:getNumeratorFormat:null#[ReturnStatement(return), numeratorFormat]
org.apache.commons.math4.fraction:AbstractFormat:setDenominatorFormat:NumberFormat#[IfStatement(if), format, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.DENOMINATOR_FORMAT, ExpressionStatement(), this, denominatorFormat, format]
org.apache.commons.math4.fraction:AbstractFormat:setNumeratorFormat:NumberFormat#[IfStatement(if), format, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.NUMERATOR_FORMAT, ExpressionStatement(), this, numeratorFormat, format]
org.apache.commons.math4.fraction:AbstractFormat:parseAndIgnoreWhitespace:String+ParsePosition#[ExpressionStatement(), parseNextCharacter, source, pos, ExpressionStatement(), pos, setIndex, pos, getIndex, 1]
org.apache.commons.math4.fraction:AbstractFormat:parseNextCharacter:String+ParsePosition#[VariableDeclarationStatement(), int, index, pos, getIndex, VariableDeclarationStatement(), final, int, n, source, length, VariableDeclarationStatement(), char, ret, 0, IfStatement(if), index, n, VariableDeclarationStatement(), char, c, DoStatement(do), ExpressionStatement(), c, source, charAt, index, Character, isWhitespace, c, index, n, ExpressionStatement(), pos, setIndex, index, IfStatement(if), index, n, ExpressionStatement(), ret, c, ReturnStatement(return), ret]
org.apache.commons.math4.fraction:AbstractFormat:format:double+StringBuffer+FieldPosition#[ReturnStatement(return), format, Double, valueOf, value, buffer, position]
org.apache.commons.math4.fraction:AbstractFormat:format:long+StringBuffer+FieldPosition#[ReturnStatement(return), format, Long, valueOf, value, buffer, position]
org.apache.commons.math4.fraction:BigFraction:getReducedFraction:int+int#[IfStatement(if), numerator, 0, ReturnStatement(return), ZERO, ReturnStatement(return), new, BigFraction, numerator, denominator]
org.apache.commons.math4.fraction:BigFraction:abs:null#[ReturnStatement(return), numerator, signum, 1, this, negate]
org.apache.commons.math4.fraction:BigFraction:add:BigInteger#[ExpressionStatement(), MathUtils, checkNotNull, bg, IfStatement(if), numerator, signum, 0, ReturnStatement(return), new, BigFraction, bg, IfStatement(if), bg, signum, 0, ReturnStatement(return), this, ReturnStatement(return), new, BigFraction, numerator, add, denominator, multiply, bg, denominator]
org.apache.commons.math4.fraction:BigFraction:add:int#[ReturnStatement(return), add, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:add:long#[ReturnStatement(return), add, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:add:BigFraction#[ExpressionStatement(), MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, IfStatement(if), fraction.numerator, signum, 0, ReturnStatement(return), this, IfStatement(if), numerator, signum, 0, ReturnStatement(return), fraction, VariableDeclarationStatement(), BigInteger, num, null, VariableDeclarationStatement(), BigInteger, den, null, IfStatement(if), denominator, equals, fraction.denominator, ExpressionStatement(), num, numerator, add, fraction.numerator, ExpressionStatement(), den, denominator, ExpressionStatement(), num, numerator, multiply, fraction.denominator, add, fraction.numerator, multiply, denominator, ExpressionStatement(), den, denominator, multiply, fraction.denominator, IfStatement(if), num, signum, 0, ReturnStatement(return), ZERO, ReturnStatement(return), new, BigFraction, num, den]
org.apache.commons.math4.fraction:BigFraction:bigDecimalValue:null#[ReturnStatement(return), new, BigDecimal, numerator, divide, new, BigDecimal, denominator]
org.apache.commons.math4.fraction:BigFraction:bigDecimalValue:int#[ReturnStatement(return), new, BigDecimal, numerator, divide, new, BigDecimal, denominator, roundingMode]
org.apache.commons.math4.fraction:BigFraction:bigDecimalValue:int+int#[ReturnStatement(return), new, BigDecimal, numerator, divide, new, BigDecimal, denominator, scale, roundingMode]
org.apache.commons.math4.fraction:BigFraction:compareTo:BigFraction#[VariableDeclarationStatement(), int, lhsSigNum, numerator, signum, VariableDeclarationStatement(), int, rhsSigNum, object.numerator, signum, IfStatement(if), lhsSigNum, rhsSigNum, ReturnStatement(return), lhsSigNum, rhsSigNum, 1, 1, IfStatement(if), lhsSigNum, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), BigInteger, nOd, numerator, multiply, object.denominator, VariableDeclarationStatement(), BigInteger, dOn, denominator, multiply, object.numerator, ReturnStatement(return), nOd, compareTo, dOn]
org.apache.commons.math4.fraction:BigFraction:divide:BigInteger#[ExpressionStatement(), MathUtils, checkNotNull, bg, IfStatement(if), bg, signum, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, IfStatement(if), numerator, signum, 0, ReturnStatement(return), ZERO, ReturnStatement(return), new, BigFraction, numerator, denominator, multiply, bg]
org.apache.commons.math4.fraction:BigFraction:divide:int#[ReturnStatement(return), divide, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:divide:long#[ReturnStatement(return), divide, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:divide:BigFraction#[ExpressionStatement(), MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, IfStatement(if), fraction.numerator, signum, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, IfStatement(if), numerator, signum, 0, ReturnStatement(return), ZERO, ReturnStatement(return), multiply, fraction, reciprocal]
org.apache.commons.math4.fraction:BigFraction:doubleValue:null#[VariableDeclarationStatement(), double, result, numerator, doubleValue, denominator, doubleValue, IfStatement(if), Double, isNaN, result, VariableDeclarationStatement(), int, shift, FastMath, max, numerator, bitLength, denominator, bitLength, FastMath, getExponent, Double.MAX_VALUE, ExpressionStatement(), result, numerator, shiftRight, shift, doubleValue, denominator, shiftRight, shift, doubleValue, ReturnStatement(return), result]
org.apache.commons.math4.fraction:BigFraction:equals:Object#[VariableDeclarationStatement(), boolean, ret, false, IfStatement(if), this, other, ExpressionStatement(), ret, true, IfStatement(if), instanceof, other, BigFraction, VariableDeclarationStatement(), BigFraction, rhs, BigFraction, other, reduce, VariableDeclarationStatement(), BigFraction, thisOne, this, reduce, ExpressionStatement(), ret, thisOne.numerator, equals, rhs.numerator, thisOne.denominator, equals, rhs.denominator, ReturnStatement(return), ret]
org.apache.commons.math4.fraction:BigFraction:floatValue:null#[VariableDeclarationStatement(), float, result, numerator, floatValue, denominator, floatValue, IfStatement(if), Double, isNaN, result, VariableDeclarationStatement(), int, shift, FastMath, max, numerator, bitLength, denominator, bitLength, FastMath, getExponent, Float.MAX_VALUE, ExpressionStatement(), result, numerator, shiftRight, shift, floatValue, denominator, shiftRight, shift, floatValue, ReturnStatement(return), result]
org.apache.commons.math4.fraction:BigFraction:getDenominator:null#[ReturnStatement(return), denominator]
org.apache.commons.math4.fraction:BigFraction:getDenominatorAsInt:null#[ReturnStatement(return), denominator, intValue]
org.apache.commons.math4.fraction:BigFraction:getDenominatorAsLong:null#[ReturnStatement(return), denominator, longValue]
org.apache.commons.math4.fraction:BigFraction:getNumerator:null#[ReturnStatement(return), numerator]
org.apache.commons.math4.fraction:BigFraction:getNumeratorAsInt:null#[ReturnStatement(return), numerator, intValue]
org.apache.commons.math4.fraction:BigFraction:getNumeratorAsLong:null#[ReturnStatement(return), numerator, longValue]
org.apache.commons.math4.fraction:BigFraction:hashCode:null#[ReturnStatement(return), 37, 37, 17, numerator, hashCode, denominator, hashCode]
org.apache.commons.math4.fraction:BigFraction:intValue:null#[ReturnStatement(return), numerator, divide, denominator, intValue]
org.apache.commons.math4.fraction:BigFraction:longValue:null#[ReturnStatement(return), numerator, divide, denominator, longValue]
org.apache.commons.math4.fraction:BigFraction:multiply:BigInteger#[ExpressionStatement(), MathUtils, checkNotNull, bg, IfStatement(if), numerator, signum, 0, bg, signum, 0, ReturnStatement(return), ZERO, ReturnStatement(return), new, BigFraction, bg, multiply, numerator, denominator]
org.apache.commons.math4.fraction:BigFraction:multiply:int#[IfStatement(if), i, 0, numerator, signum, 0, ReturnStatement(return), ZERO, ReturnStatement(return), multiply, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:multiply:long#[IfStatement(if), l, 0, numerator, signum, 0, ReturnStatement(return), ZERO, ReturnStatement(return), multiply, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:multiply:BigFraction#[ExpressionStatement(), MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, IfStatement(if), numerator, signum, 0, fraction.numerator, signum, 0, ReturnStatement(return), ZERO, ReturnStatement(return), new, BigFraction, numerator, multiply, fraction.numerator, denominator, multiply, fraction.denominator]
org.apache.commons.math4.fraction:BigFraction:negate:null#[ReturnStatement(return), new, BigFraction, numerator, negate, denominator]
org.apache.commons.math4.fraction:BigFraction:percentageValue:null#[ReturnStatement(return), multiply, ONE_HUNDRED, doubleValue]
org.apache.commons.math4.fraction:BigFraction:pow:int#[IfStatement(if), exponent, 0, ReturnStatement(return), ONE, IfStatement(if), numerator, signum, 0, ReturnStatement(return), this, IfStatement(if), exponent, 0, ReturnStatement(return), new, BigFraction, denominator, pow, exponent, numerator, pow, exponent, ReturnStatement(return), new, BigFraction, numerator, pow, exponent, denominator, pow, exponent]
org.apache.commons.math4.fraction:BigFraction:pow:long#[IfStatement(if), exponent, 0, ReturnStatement(return), ONE, IfStatement(if), numerator, signum, 0, ReturnStatement(return), this, IfStatement(if), exponent, 0, ReturnStatement(return), new, BigFraction, ArithmeticUtils, pow, denominator, exponent, ArithmeticUtils, pow, numerator, exponent, ReturnStatement(return), new, BigFraction, ArithmeticUtils, pow, numerator, exponent, ArithmeticUtils, pow, denominator, exponent]
org.apache.commons.math4.fraction:BigFraction:pow:BigInteger#[IfStatement(if), exponent, signum, 0, ReturnStatement(return), ONE, IfStatement(if), numerator, signum, 0, ReturnStatement(return), this, IfStatement(if), exponent, signum, 1, VariableDeclarationStatement(), final, BigInteger, eNeg, exponent, negate, ReturnStatement(return), new, BigFraction, ArithmeticUtils, pow, denominator, eNeg, ArithmeticUtils, pow, numerator, eNeg, ReturnStatement(return), new, BigFraction, ArithmeticUtils, pow, numerator, exponent, ArithmeticUtils, pow, denominator, exponent]
org.apache.commons.math4.fraction:BigFraction:pow:double#[ReturnStatement(return), FastMath, pow, numerator, doubleValue, exponent, FastMath, pow, denominator, doubleValue, exponent]
org.apache.commons.math4.fraction:BigFraction:reciprocal:null#[ReturnStatement(return), new, BigFraction, denominator, numerator]
org.apache.commons.math4.fraction:BigFraction:reduce:null#[VariableDeclarationStatement(), final, BigInteger, gcd, numerator, gcd, denominator, IfStatement(if), BigInteger.ONE, compareTo, gcd, 0, ReturnStatement(return), new, BigFraction, numerator, divide, gcd, denominator, divide, gcd, ReturnStatement(return), this]
org.apache.commons.math4.fraction:BigFraction:subtract:BigInteger#[ExpressionStatement(), MathUtils, checkNotNull, bg, IfStatement(if), bg, signum, 0, ReturnStatement(return), this, IfStatement(if), numerator, signum, 0, ReturnStatement(return), new, BigFraction, bg, negate, ReturnStatement(return), new, BigFraction, numerator, subtract, denominator, multiply, bg, denominator]
org.apache.commons.math4.fraction:BigFraction:subtract:int#[ReturnStatement(return), subtract, BigInteger, valueOf, i]
org.apache.commons.math4.fraction:BigFraction:subtract:long#[ReturnStatement(return), subtract, BigInteger, valueOf, l]
org.apache.commons.math4.fraction:BigFraction:subtract:BigFraction#[ExpressionStatement(), MathUtils, checkNotNull, fraction, LocalizedFormats.FRACTION, IfStatement(if), fraction.numerator, signum, 0, ReturnStatement(return), this, IfStatement(if), numerator, signum, 0, ReturnStatement(return), fraction, negate, VariableDeclarationStatement(), BigInteger, num, null, VariableDeclarationStatement(), BigInteger, den, null, IfStatement(if), denominator, equals, fraction.denominator, ExpressionStatement(), num, numerator, subtract, fraction.numerator, ExpressionStatement(), den, denominator, ExpressionStatement(), num, numerator, multiply, fraction.denominator, subtract, fraction.numerator, multiply, denominator, ExpressionStatement(), den, denominator, multiply, fraction.denominator, ReturnStatement(return), new, BigFraction, num, den]
org.apache.commons.math4.fraction:BigFraction:toString:null#[VariableDeclarationStatement(), String, str, null, IfStatement(if), BigInteger.ONE, equals, denominator, ExpressionStatement(), str, numerator, toString, IfStatement(if), BigInteger.ZERO, equals, numerator, ExpressionStatement(), str, "0", ExpressionStatement(), str, numerator, " / ", denominator, ReturnStatement(return), str]
org.apache.commons.math4.fraction:BigFraction:getField:null#[ReturnStatement(return), BigFractionField, getInstance]
org.apache.commons.math4.fraction:BigFractionField:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:BigFractionField:getOne:null#[ReturnStatement(return), BigFraction.ONE]
org.apache.commons.math4.fraction:BigFractionField:getZero:null#[ReturnStatement(return), BigFraction.ZERO]
org.apache.commons.math4.fraction:BigFractionField:getRuntimeClass:null#[ReturnStatement(return), BigFraction]
org.apache.commons.math4.fraction:BigFractionField:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:BigFractionFormat:getAvailableLocales:null#[ReturnStatement(return), NumberFormat, getAvailableLocales]
org.apache.commons.math4.fraction:BigFractionFormat:formatBigFraction:BigFraction#[ReturnStatement(return), getImproperInstance, format, f]
org.apache.commons.math4.fraction:BigFractionFormat:getImproperInstance:null#[ReturnStatement(return), getImproperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:BigFractionFormat:getImproperInstance:Locale#[ReturnStatement(return), new, BigFractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:BigFractionFormat:getProperInstance:null#[ReturnStatement(return), getProperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:BigFractionFormat:getProperInstance:Locale#[ReturnStatement(return), new, ProperBigFractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:BigFractionFormat:format:BigFraction+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, ExpressionStatement(), getNumeratorFormat, format, BigFraction, getNumerator, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, " / ", ExpressionStatement(), getDenominatorFormat, format, BigFraction, getDenominator, toAppendTo, pos, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.fraction:BigFractionFormat:format:Object+StringBuffer+FieldPosition#[VariableDeclarationStatement(), final, StringBuffer, ret, IfStatement(if), instanceof, obj, BigFraction, ExpressionStatement(), ret, format, BigFraction, obj, toAppendTo, pos, IfStatement(if), instanceof, obj, BigInteger, ExpressionStatement(), ret, format, new, BigFraction, BigInteger, obj, toAppendTo, pos, IfStatement(if), instanceof, obj, Number, ExpressionStatement(), ret, format, new, BigFraction, Number, obj, doubleValue, toAppendTo, pos, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION, ReturnStatement(return), ret]
org.apache.commons.math4.fraction:BigFractionFormat:parse:String#[VariableDeclarationStatement(), final, ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), final, BigFraction, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, BigFraction, ReturnStatement(return), result]
org.apache.commons.math4.fraction:BigFractionFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), final, int, initialIndex, pos, getIndex, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), final, BigInteger, num, parseNextBigInteger, source, pos, IfStatement(if), num, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), final, int, startIndex, pos, getIndex, VariableDeclarationStatement(), final, char, c, parseNextCharacter, source, pos, SwitchStatement(switch), c, SwitchCase(case), 0, ReturnStatement(return), new, BigFraction, num, SwitchCase(case), '/', BreakStatement(break), SwitchCase(default), ExpressionStatement(), pos, setIndex, initialIndex, ExpressionStatement(), pos, setErrorIndex, startIndex, ReturnStatement(return), null, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), final, BigInteger, den, parseNextBigInteger, source, pos, IfStatement(if), den, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, ReturnStatement(return), new, BigFraction, num, den]
org.apache.commons.math4.fraction:BigFractionFormat:parseNextBigInteger:String+ParsePosition#[VariableDeclarationStatement(), final, int, start, pos, getIndex, VariableDeclarationStatement(), int, end, source, charAt, start, '-', start, 1, start, WhileStatement(while), end, source, length, Character, isDigit, source, charAt, end, ExpressionStatement(), end, TryStatement(try), VariableDeclarationStatement(), BigInteger, n, new, BigInteger, source, substring, start, end, ExpressionStatement(), pos, setIndex, end, ReturnStatement(return), n, catch, NumberFormatException, nfe, ExpressionStatement(), pos, setErrorIndex, start, ReturnStatement(return), null]
org.apache.commons.math4.fraction:Fraction:abs:null#[VariableDeclarationStatement(), Fraction, ret, IfStatement(if), numerator, 0, ExpressionStatement(), ret, this, ExpressionStatement(), ret, negate, ReturnStatement(return), ret]
org.apache.commons.math4.fraction:Fraction:compareTo:Fraction#[VariableDeclarationStatement(), long, nOd, long, numerator, object.denominator, VariableDeclarationStatement(), long, dOn, long, denominator, object.numerator, ReturnStatement(return), nOd, dOn, 1, nOd, dOn, 1, 0]
org.apache.commons.math4.fraction:Fraction:doubleValue:null#[ReturnStatement(return), double, numerator, double, denominator]
org.apache.commons.math4.fraction:Fraction:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, Fraction, VariableDeclarationStatement(), Fraction, rhs, Fraction, other, ReturnStatement(return), numerator, rhs.numerator, denominator, rhs.denominator, ReturnStatement(return), false]
org.apache.commons.math4.fraction:Fraction:floatValue:null#[ReturnStatement(return), float, doubleValue]
org.apache.commons.math4.fraction:Fraction:getDenominator:null#[ReturnStatement(return), denominator]
org.apache.commons.math4.fraction:Fraction:getNumerator:null#[ReturnStatement(return), numerator]
org.apache.commons.math4.fraction:Fraction:hashCode:null#[ReturnStatement(return), 37, 37, 17, numerator, denominator]
org.apache.commons.math4.fraction:Fraction:intValue:null#[ReturnStatement(return), int, doubleValue]
org.apache.commons.math4.fraction:Fraction:longValue:null#[ReturnStatement(return), long, doubleValue]
org.apache.commons.math4.fraction:Fraction:negate:null#[IfStatement(if), numerator, Integer.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator, ReturnStatement(return), new, Fraction, numerator, denominator]
org.apache.commons.math4.fraction:Fraction:reciprocal:null#[ReturnStatement(return), new, Fraction, denominator, numerator]
org.apache.commons.math4.fraction:Fraction:add:Fraction#[ReturnStatement(return), addSub, fraction, true]
org.apache.commons.math4.fraction:Fraction:add:int#[ReturnStatement(return), new, Fraction, numerator, i, denominator, denominator]
org.apache.commons.math4.fraction:Fraction:subtract:Fraction#[ReturnStatement(return), addSub, fraction, false]
org.apache.commons.math4.fraction:Fraction:subtract:int#[ReturnStatement(return), new, Fraction, numerator, i, denominator, denominator]
org.apache.commons.math4.fraction:Fraction:addSub:Fraction+boolean#[IfStatement(if), fraction, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FRACTION, IfStatement(if), numerator, 0, ReturnStatement(return), isAdd, fraction, fraction, negate, IfStatement(if), fraction.numerator, 0, ReturnStatement(return), this, VariableDeclarationStatement(), int, d1, ArithmeticUtils, gcd, denominator, fraction.denominator, IfStatement(if), d1, 1, VariableDeclarationStatement(), int, uvp, ArithmeticUtils, mulAndCheck, numerator, fraction.denominator, VariableDeclarationStatement(), int, upv, ArithmeticUtils, mulAndCheck, fraction.numerator, denominator, ReturnStatement(return), new, Fraction, isAdd, ArithmeticUtils, addAndCheck, uvp, upv, ArithmeticUtils, subAndCheck, uvp, upv, ArithmeticUtils, mulAndCheck, denominator, fraction.denominator, VariableDeclarationStatement(), BigInteger, uvp, BigInteger, valueOf, numerator, multiply, BigInteger, valueOf, fraction.denominator, d1, VariableDeclarationStatement(), BigInteger, upv, BigInteger, valueOf, fraction.numerator, multiply, BigInteger, valueOf, denominator, d1, VariableDeclarationStatement(), BigInteger, t, isAdd, uvp, add, upv, uvp, subtract, upv, VariableDeclarationStatement(), int, tmodd1, t, mod, BigInteger, valueOf, d1, intValue, VariableDeclarationStatement(), int, d2, tmodd1, 0, d1, ArithmeticUtils, gcd, tmodd1, d1, VariableDeclarationStatement(), BigInteger, w, t, divide, BigInteger, valueOf, d2, IfStatement(if), w, bitLength, 31, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY, w, ReturnStatement(return), new, Fraction, w, intValue, ArithmeticUtils, mulAndCheck, denominator, d1, fraction.denominator, d2]
org.apache.commons.math4.fraction:Fraction:multiply:Fraction#[IfStatement(if), fraction, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FRACTION, IfStatement(if), numerator, 0, fraction.numerator, 0, ReturnStatement(return), ZERO, VariableDeclarationStatement(), int, d1, ArithmeticUtils, gcd, numerator, fraction.denominator, VariableDeclarationStatement(), int, d2, ArithmeticUtils, gcd, fraction.numerator, denominator, ReturnStatement(return), getReducedFraction, ArithmeticUtils, mulAndCheck, numerator, d1, fraction.numerator, d2, ArithmeticUtils, mulAndCheck, denominator, d2, fraction.denominator, d1]
org.apache.commons.math4.fraction:Fraction:multiply:int#[ReturnStatement(return), multiply, new, Fraction, i]
org.apache.commons.math4.fraction:Fraction:divide:Fraction#[IfStatement(if), fraction, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.FRACTION, IfStatement(if), fraction.numerator, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator, ReturnStatement(return), multiply, fraction, reciprocal]
org.apache.commons.math4.fraction:Fraction:divide:int#[ReturnStatement(return), divide, new, Fraction, i]
org.apache.commons.math4.fraction:Fraction:percentageValue:null#[ReturnStatement(return), 100, doubleValue]
org.apache.commons.math4.fraction:Fraction:getReducedFraction:int+int#[IfStatement(if), denominator, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator, IfStatement(if), numerator, 0, ReturnStatement(return), ZERO, IfStatement(if), denominator, Integer.MIN_VALUE, numerator, 1, 0, ExpressionStatement(), numerator, 2, ExpressionStatement(), denominator, 2, IfStatement(if), denominator, 0, IfStatement(if), numerator, Integer.MIN_VALUE, denominator, Integer.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator, ExpressionStatement(), numerator, numerator, ExpressionStatement(), denominator, denominator, VariableDeclarationStatement(), int, gcd, ArithmeticUtils, gcd, numerator, denominator, ExpressionStatement(), numerator, gcd, ExpressionStatement(), denominator, gcd, ReturnStatement(return), new, Fraction, numerator, denominator]
org.apache.commons.math4.fraction:Fraction:toString:null#[VariableDeclarationStatement(), String, str, null, IfStatement(if), denominator, 1, ExpressionStatement(), str, Integer, toString, numerator, IfStatement(if), numerator, 0, ExpressionStatement(), str, "0", ExpressionStatement(), str, numerator, " / ", denominator, ReturnStatement(return), str]
org.apache.commons.math4.fraction:Fraction:getField:null#[ReturnStatement(return), FractionField, getInstance]
org.apache.commons.math4.fraction:FractionField:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:FractionField:getOne:null#[ReturnStatement(return), Fraction.ONE]
org.apache.commons.math4.fraction:FractionField:getZero:null#[ReturnStatement(return), Fraction.ZERO]
org.apache.commons.math4.fraction:FractionField:getRuntimeClass:null#[ReturnStatement(return), Fraction]
org.apache.commons.math4.fraction:FractionField:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.fraction:FractionFormat:getAvailableLocales:null#[ReturnStatement(return), NumberFormat, getAvailableLocales]
org.apache.commons.math4.fraction:FractionFormat:formatFraction:Fraction#[ReturnStatement(return), getImproperInstance, format, f]
org.apache.commons.math4.fraction:FractionFormat:getImproperInstance:null#[ReturnStatement(return), getImproperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:FractionFormat:getImproperInstance:Locale#[ReturnStatement(return), new, FractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:FractionFormat:getProperInstance:null#[ReturnStatement(return), getProperInstance, Locale, getDefault]
org.apache.commons.math4.fraction:FractionFormat:getProperInstance:Locale#[ReturnStatement(return), new, ProperFractionFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.fraction:FractionFormat:getDefaultNumberFormat:null#[ReturnStatement(return), getDefaultNumberFormat, Locale, getDefault]
org.apache.commons.math4.fraction:FractionFormat:format:Fraction+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, ExpressionStatement(), getNumeratorFormat, format, fraction, getNumerator, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, " / ", ExpressionStatement(), getDenominatorFormat, format, fraction, getDenominator, toAppendTo, pos, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.fraction:FractionFormat:format:Object+StringBuffer+FieldPosition#[VariableDeclarationStatement(), StringBuffer, ret, null, IfStatement(if), instanceof, obj, Fraction, ExpressionStatement(), ret, format, Fraction, obj, toAppendTo, pos, IfStatement(if), instanceof, obj, Number, ExpressionStatement(), ret, format, new, Fraction, Number, obj, doubleValue, toAppendTo, pos, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION, ReturnStatement(return), ret]
org.apache.commons.math4.fraction:FractionFormat:parse:String#[VariableDeclarationStatement(), final, ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), final, Fraction, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, Fraction, ReturnStatement(return), result]
org.apache.commons.math4.fraction:FractionFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), final, int, initialIndex, pos, getIndex, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), final, Number, num, getNumeratorFormat, parse, source, pos, IfStatement(if), num, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), final, int, startIndex, pos, getIndex, VariableDeclarationStatement(), final, char, c, parseNextCharacter, source, pos, SwitchStatement(switch), c, SwitchCase(case), 0, ReturnStatement(return), new, Fraction, num, intValue, 1, SwitchCase(case), '/', BreakStatement(break), SwitchCase(default), ExpressionStatement(), pos, setIndex, initialIndex, ExpressionStatement(), pos, setErrorIndex, startIndex, ReturnStatement(return), null, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), final, Number, den, getDenominatorFormat, parse, source, pos, IfStatement(if), den, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, ReturnStatement(return), new, Fraction, num, intValue, den, intValue]
org.apache.commons.math4.fraction:ProperBigFractionFormat:format:BigFraction+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, VariableDeclarationStatement(), BigInteger, num, fraction, getNumerator, VariableDeclarationStatement(), BigInteger, den, fraction, getDenominator, VariableDeclarationStatement(), BigInteger, whole, num, divide, den, ExpressionStatement(), num, num, remainder, den, IfStatement(if), BigInteger.ZERO, equals, whole, ExpressionStatement(), getWholeFormat, format, whole, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, ' ', IfStatement(if), num, compareTo, BigInteger.ZERO, 0, ExpressionStatement(), num, num, negate, ExpressionStatement(), getNumeratorFormat, format, num, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, " / ", ExpressionStatement(), getDenominatorFormat, format, den, toAppendTo, pos, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.fraction:ProperBigFractionFormat:getWholeFormat:null#[ReturnStatement(return), wholeFormat]
org.apache.commons.math4.fraction:ProperBigFractionFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), BigFraction, ret, super, parse, source, pos, IfStatement(if), ret, null, ReturnStatement(return), ret, VariableDeclarationStatement(), final, int, initialIndex, pos, getIndex, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), BigInteger, whole, parseNextBigInteger, source, pos, IfStatement(if), whole, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), BigInteger, num, parseNextBigInteger, source, pos, IfStatement(if), num, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, IfStatement(if), num, compareTo, BigInteger.ZERO, 0, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), final, int, startIndex, pos, getIndex, VariableDeclarationStatement(), final, char, c, parseNextCharacter, source, pos, SwitchStatement(switch), c, SwitchCase(case), 0, ReturnStatement(return), new, BigFraction, num, SwitchCase(case), '/', BreakStatement(break), SwitchCase(default), ExpressionStatement(), pos, setIndex, initialIndex, ExpressionStatement(), pos, setErrorIndex, startIndex, ReturnStatement(return), null, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), final, BigInteger, den, parseNextBigInteger, source, pos, IfStatement(if), den, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, IfStatement(if), den, compareTo, BigInteger.ZERO, 0, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), boolean, wholeIsNeg, whole, compareTo, BigInteger.ZERO, 0, IfStatement(if), wholeIsNeg, ExpressionStatement(), whole, whole, negate, ExpressionStatement(), num, whole, multiply, den, add, num, IfStatement(if), wholeIsNeg, ExpressionStatement(), num, num, negate, ReturnStatement(return), new, BigFraction, num, den]
org.apache.commons.math4.fraction:ProperBigFractionFormat:setWholeFormat:NumberFormat#[IfStatement(if), format, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.WHOLE_FORMAT, ExpressionStatement(), this, wholeFormat, format]
org.apache.commons.math4.fraction:ProperFractionFormat:format:Fraction+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, VariableDeclarationStatement(), int, num, fraction, getNumerator, VariableDeclarationStatement(), int, den, fraction, getDenominator, VariableDeclarationStatement(), int, whole, num, den, ExpressionStatement(), num, den, IfStatement(if), whole, 0, ExpressionStatement(), getWholeFormat, format, whole, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, ' ', ExpressionStatement(), num, FastMath, abs, num, ExpressionStatement(), getNumeratorFormat, format, num, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, " / ", ExpressionStatement(), getDenominatorFormat, format, den, toAppendTo, pos, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.fraction:ProperFractionFormat:getWholeFormat:null#[ReturnStatement(return), wholeFormat]
org.apache.commons.math4.fraction:ProperFractionFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), Fraction, ret, super, parse, source, pos, IfStatement(if), ret, null, ReturnStatement(return), ret, VariableDeclarationStatement(), int, initialIndex, pos, getIndex, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, whole, getWholeFormat, parse, source, pos, IfStatement(if), whole, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, num, getNumeratorFormat, parse, source, pos, IfStatement(if), num, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, IfStatement(if), num, intValue, 0, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), int, startIndex, pos, getIndex, VariableDeclarationStatement(), char, c, parseNextCharacter, source, pos, SwitchStatement(switch), c, SwitchCase(case), 0, ReturnStatement(return), new, Fraction, num, intValue, 1, SwitchCase(case), '/', BreakStatement(break), SwitchCase(default), ExpressionStatement(), pos, setIndex, initialIndex, ExpressionStatement(), pos, setErrorIndex, startIndex, ReturnStatement(return), null, ExpressionStatement(), parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, den, getDenominatorFormat, parse, source, pos, IfStatement(if), den, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, IfStatement(if), den, intValue, 0, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), int, w, whole, intValue, VariableDeclarationStatement(), int, n, num, intValue, VariableDeclarationStatement(), int, d, den, intValue, ReturnStatement(return), new, Fraction, FastMath, abs, w, d, n, MathUtils, copySign, 1, w, d]
org.apache.commons.math4.fraction:ProperFractionFormat:setWholeFormat:NumberFormat#[IfStatement(if), format, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.WHOLE_FORMAT, ExpressionStatement(), this, wholeFormat, format]
org.apache.commons.math4.genetics:AbstractListChromosome:getRepresentation:null#[ReturnStatement(return), representation]
org.apache.commons.math4.genetics:AbstractListChromosome:getLength:null#[ReturnStatement(return), getRepresentation, size]
org.apache.commons.math4.genetics:AbstractListChromosome:toString:null#[ReturnStatement(return), String, format, "(f=%s %s)", getFitness, getRepresentation]
org.apache.commons.math4.genetics:BinaryChromosome:checkValidity:List<Integer>#[EnhancedForStatement(for), int, i, chromosomeRepresentation, IfStatement(if), i, 0, i, 1, ThrowStatement(throw), new, InvalidRepresentationException, LocalizedFormats.INVALID_BINARY_DIGIT, i]
org.apache.commons.math4.genetics:BinaryChromosome:randomBinaryRepresentation:int#[VariableDeclarationStatement(), List, Integer, rList, new, ArrayList, Integer, length, ForStatement(for), int, j, 0, j, length, j, ExpressionStatement(), rList, add, GeneticAlgorithm, getRandomGenerator, nextInt, 2, ReturnStatement(return), rList]
org.apache.commons.math4.genetics:BinaryChromosome:isSame:Chromosome#[IfStatement(if), instanceof, another, BinaryChromosome, ReturnStatement(return), false, VariableDeclarationStatement(), BinaryChromosome, anotherBc, BinaryChromosome, another, IfStatement(if), getLength, anotherBc, getLength, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, getRepresentation, size, i, IfStatement(if), getRepresentation, get, i, equals, anotherBc, getRepresentation, get, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.genetics:BinaryMutation:mutate:Chromosome#[IfStatement(if), instanceof, original, BinaryChromosome, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INVALID_BINARY_CHROMOSOME, VariableDeclarationStatement(), BinaryChromosome, origChrom, BinaryChromosome, original, VariableDeclarationStatement(), List, Integer, newRepr, new, ArrayList, Integer, origChrom, getRepresentation, VariableDeclarationStatement(), int, geneIndex, GeneticAlgorithm, getRandomGenerator, nextInt, origChrom, getLength, ExpressionStatement(), newRepr, set, geneIndex, origChrom, getRepresentation, get, geneIndex, 0, 1, 0, VariableDeclarationStatement(), Chromosome, newChrom, origChrom, newFixedLengthChromosome, newRepr, ReturnStatement(return), newChrom]
org.apache.commons.math4.genetics:Chromosome:getFitness:null#[IfStatement(if), this, fitness, NO_FITNESS, ExpressionStatement(), this, fitness, fitness, ReturnStatement(return), this, fitness]
org.apache.commons.math4.genetics:Chromosome:compareTo:Chromosome#[ReturnStatement(return), Double, compare, getFitness, another, getFitness]
org.apache.commons.math4.genetics:Chromosome:isSame:Chromosome#[ReturnStatement(return), false]
org.apache.commons.math4.genetics:Chromosome:findSameChromosome:Population#[EnhancedForStatement(for), Chromosome, anotherChr, population, IfStatement(if), this, isSame, anotherChr, ReturnStatement(return), anotherChr, ReturnStatement(return), null]
org.apache.commons.math4.genetics:Chromosome:searchForFitnessUpdate:Population#[VariableDeclarationStatement(), Chromosome, sameChromosome, findSameChromosome, population, IfStatement(if), sameChromosome, null, ExpressionStatement(), fitness, sameChromosome, getFitness]
org.apache.commons.math4.genetics:ChromosomePair:getFirst:null#[ReturnStatement(return), first]
org.apache.commons.math4.genetics:ChromosomePair:getSecond:null#[ReturnStatement(return), second]
org.apache.commons.math4.genetics:ChromosomePair:toString:null#[ReturnStatement(return), String, format, "(%s,%s)", getFirst, getSecond]
org.apache.commons.math4.genetics:CycleCrossover:isRandomStart:null#[ReturnStatement(return), randomStart]
org.apache.commons.math4.genetics:CycleCrossover:crossover:Chromosome+Chromosome#[IfStatement(if), instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, ReturnStatement(return), mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:CycleCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[VariableDeclarationStatement(), final, int, length, first, getLength, IfStatement(if), length, second, getLength, ThrowStatement(throw), new, DimensionMismatchException, second, getLength, length, VariableDeclarationStatement(), final, List, T, parent1Rep, first, getRepresentation, VariableDeclarationStatement(), final, List, T, parent2Rep, second, getRepresentation, VariableDeclarationStatement(), final, List, T, child1Rep, new, ArrayList, T, second, getRepresentation, VariableDeclarationStatement(), final, List, T, child2Rep, new, ArrayList, T, first, getRepresentation, VariableDeclarationStatement(), final, Set, Integer, visitedIndices, new, HashSet, Integer, length, VariableDeclarationStatement(), final, List, Integer, indices, new, ArrayList, Integer, length, VariableDeclarationStatement(), int, idx, randomStart, GeneticAlgorithm, getRandomGenerator, nextInt, length, 0, VariableDeclarationStatement(), int, cycle, 1, WhileStatement(while), visitedIndices, size, length, ExpressionStatement(), indices, add, idx, VariableDeclarationStatement(), T, item, parent2Rep, get, idx, ExpressionStatement(), idx, parent1Rep, indexOf, item, WhileStatement(while), idx, indices, get, 0, ExpressionStatement(), indices, add, idx, ExpressionStatement(), item, parent2Rep, get, idx, ExpressionStatement(), idx, parent1Rep, indexOf, item, IfStatement(if), cycle, 2, 0, EnhancedForStatement(for), int, i, indices, VariableDeclarationStatement(), T, tmp, child1Rep, get, i, ExpressionStatement(), child1Rep, set, i, child2Rep, get, i, ExpressionStatement(), child2Rep, set, i, tmp, ExpressionStatement(), visitedIndices, addAll, indices, ExpressionStatement(), idx, indices, get, 0, 1, length, WhileStatement(while), visitedIndices, contains, idx, visitedIndices, size, length, ExpressionStatement(), idx, IfStatement(if), idx, length, ExpressionStatement(), idx, 0, ExpressionStatement(), indices, clear, ReturnStatement(return), new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.genetics:ElitisticListPopulation:nextGeneration:null#[VariableDeclarationStatement(), ElitisticListPopulation, nextGeneration, new, ElitisticListPopulation, getPopulationLimit, getElitismRate, VariableDeclarationStatement(), final, List, Chromosome, oldChromosomes, getChromosomeList, ExpressionStatement(), Collections, sort, oldChromosomes, VariableDeclarationStatement(), int, boundIndex, int, FastMath, ceil, 1.0, getElitismRate, oldChromosomes, size, ForStatement(for), int, i, boundIndex, i, oldChromosomes, size, i, ExpressionStatement(), nextGeneration, addChromosome, oldChromosomes, get, i, ReturnStatement(return), nextGeneration]
org.apache.commons.math4.genetics:ElitisticListPopulation:setElitismRate:double#[IfStatement(if), elitismRate, 0, elitismRate, 1, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1, ExpressionStatement(), this, elitismRate, elitismRate]
org.apache.commons.math4.genetics:ElitisticListPopulation:getElitismRate:null#[ReturnStatement(return), this, elitismRate]
org.apache.commons.math4.genetics:FixedElapsedTime:isSatisfied:Population#[IfStatement(if), endTime, 0, ExpressionStatement(), endTime, System, nanoTime, maxTimePeriod, ReturnStatement(return), System, nanoTime, endTime]
org.apache.commons.math4.genetics:FixedGenerationCount:isSatisfied:Population#[IfStatement(if), this, numGenerations, this, maxGenerations, ExpressionStatement(), numGenerations, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.genetics:FixedGenerationCount:getNumGenerations:null#[ReturnStatement(return), numGenerations]
org.apache.commons.math4.genetics:GeneticAlgorithm:setRandomGenerator:RandomGenerator#[ExpressionStatement(), randomGenerator, random]
org.apache.commons.math4.genetics:GeneticAlgorithm:getRandomGenerator:null#[ReturnStatement(return), randomGenerator]
org.apache.commons.math4.genetics:GeneticAlgorithm:evolve:Population+StoppingCondition#[VariableDeclarationStatement(), Population, current, initial, ExpressionStatement(), generationsEvolved, 0, WhileStatement(while), condition, isSatisfied, current, ExpressionStatement(), current, nextGeneration, current, ExpressionStatement(), generationsEvolved, ReturnStatement(return), current]
org.apache.commons.math4.genetics:GeneticAlgorithm:nextGeneration:Population#[VariableDeclarationStatement(), Population, nextGeneration, current, nextGeneration, VariableDeclarationStatement(), RandomGenerator, randGen, getRandomGenerator, WhileStatement(while), nextGeneration, getPopulationSize, nextGeneration, getPopulationLimit, VariableDeclarationStatement(), ChromosomePair, pair, getSelectionPolicy, select, current, IfStatement(if), randGen, nextDouble, getCrossoverRate, ExpressionStatement(), pair, getCrossoverPolicy, crossover, pair, getFirst, pair, getSecond, IfStatement(if), randGen, nextDouble, getMutationRate, ExpressionStatement(), pair, new, ChromosomePair, getMutationPolicy, mutate, pair, getFirst, getMutationPolicy, mutate, pair, getSecond, ExpressionStatement(), nextGeneration, addChromosome, pair, getFirst, IfStatement(if), nextGeneration, getPopulationSize, nextGeneration, getPopulationLimit, ExpressionStatement(), nextGeneration, addChromosome, pair, getSecond, ReturnStatement(return), nextGeneration]
org.apache.commons.math4.genetics:GeneticAlgorithm:getCrossoverPolicy:null#[ReturnStatement(return), crossoverPolicy]
org.apache.commons.math4.genetics:GeneticAlgorithm:getCrossoverRate:null#[ReturnStatement(return), crossoverRate]
org.apache.commons.math4.genetics:GeneticAlgorithm:getMutationPolicy:null#[ReturnStatement(return), mutationPolicy]
org.apache.commons.math4.genetics:GeneticAlgorithm:getMutationRate:null#[ReturnStatement(return), mutationRate]
org.apache.commons.math4.genetics:GeneticAlgorithm:getSelectionPolicy:null#[ReturnStatement(return), selectionPolicy]
org.apache.commons.math4.genetics:GeneticAlgorithm:getGenerationsEvolved:null#[ReturnStatement(return), generationsEvolved]
org.apache.commons.math4.genetics:ListPopulation:addChromosomes:Collection<Chromosome>#[IfStatement(if), chromosomes, size, chromosomeColl, size, populationLimit, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE, chromosomes, size, populationLimit, false, ExpressionStatement(), this, chromosomes, addAll, chromosomeColl]
org.apache.commons.math4.genetics:ListPopulation:getChromosomes:null#[ReturnStatement(return), Collections, unmodifiableList, chromosomes]
org.apache.commons.math4.genetics:ListPopulation:getChromosomeList:null#[ReturnStatement(return), chromosomes]
org.apache.commons.math4.genetics:ListPopulation:addChromosome:Chromosome#[IfStatement(if), chromosomes, size, populationLimit, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE, chromosomes, size, populationLimit, false, ExpressionStatement(), this, chromosomes, add, chromosome]
org.apache.commons.math4.genetics:ListPopulation:getFittestChromosome:null#[VariableDeclarationStatement(), Chromosome, bestChromosome, this, chromosomes, get, 0, EnhancedForStatement(for), Chromosome, chromosome, this, chromosomes, IfStatement(if), chromosome, compareTo, bestChromosome, 0, ExpressionStatement(), bestChromosome, chromosome, ReturnStatement(return), bestChromosome]
org.apache.commons.math4.genetics:ListPopulation:getPopulationLimit:null#[ReturnStatement(return), this, populationLimit]
org.apache.commons.math4.genetics:ListPopulation:setPopulationLimit:int#[IfStatement(if), populationLimit, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit, IfStatement(if), populationLimit, chromosomes, size, ThrowStatement(throw), new, NumberIsTooSmallException, populationLimit, chromosomes, size, true, ExpressionStatement(), this, populationLimit, populationLimit]
org.apache.commons.math4.genetics:ListPopulation:getPopulationSize:null#[ReturnStatement(return), this, chromosomes, size]
org.apache.commons.math4.genetics:ListPopulation:toString:null#[ReturnStatement(return), this, chromosomes, toString]
org.apache.commons.math4.genetics:ListPopulation:iterator:null#[ReturnStatement(return), getChromosomes, iterator]
org.apache.commons.math4.genetics:NPointCrossover:getCrossoverPoints:null#[ReturnStatement(return), crossoverPoints]
org.apache.commons.math4.genetics:NPointCrossover:crossover:Chromosome+Chromosome#[IfStatement(if), instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, ReturnStatement(return), mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:NPointCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[VariableDeclarationStatement(), final, int, length, first, getLength, IfStatement(if), length, second, getLength, ThrowStatement(throw), new, DimensionMismatchException, second, getLength, length, IfStatement(if), crossoverPoints, length, ThrowStatement(throw), new, NumberIsTooLargeException, crossoverPoints, length, false, VariableDeclarationStatement(), final, List, T, parent1Rep, first, getRepresentation, VariableDeclarationStatement(), final, List, T, parent2Rep, second, getRepresentation, VariableDeclarationStatement(), final, List, T, child1Rep, new, ArrayList, T, length, VariableDeclarationStatement(), final, List, T, child2Rep, new, ArrayList, T, length, VariableDeclarationStatement(), final, RandomGenerator, random, GeneticAlgorithm, getRandomGenerator, VariableDeclarationStatement(), List, T, c1, child1Rep, VariableDeclarationStatement(), List, T, c2, child2Rep, VariableDeclarationStatement(), int, remainingPoints, crossoverPoints, VariableDeclarationStatement(), int, lastIndex, 0, ForStatement(for), int, i, 0, i, crossoverPoints, i, remainingPoints, VariableDeclarationStatement(), final, int, crossoverIndex, 1, lastIndex, random, nextInt, length, lastIndex, remainingPoints, ForStatement(for), int, j, lastIndex, j, crossoverIndex, j, ExpressionStatement(), c1, add, parent1Rep, get, j, ExpressionStatement(), c2, add, parent2Rep, get, j, VariableDeclarationStatement(), List, T, tmp, c1, ExpressionStatement(), c1, c2, ExpressionStatement(), c2, tmp, ExpressionStatement(), lastIndex, crossoverIndex, ForStatement(for), int, j, lastIndex, j, length, j, ExpressionStatement(), c1, add, parent1Rep, get, j, ExpressionStatement(), c2, add, parent2Rep, get, j, ReturnStatement(return), new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.genetics:OnePointCrossover:crossover:Chromosome+Chromosome#[IfStatement(if), instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, ReturnStatement(return), crossover, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:OnePointCrossover:crossover:AbstractListChromosome<T>+AbstractListChromosome<T>#[VariableDeclarationStatement(), final, int, length, first, getLength, IfStatement(if), length, second, getLength, ThrowStatement(throw), new, DimensionMismatchException, second, getLength, length, VariableDeclarationStatement(), final, List, T, parent1Rep, first, getRepresentation, VariableDeclarationStatement(), final, List, T, parent2Rep, second, getRepresentation, VariableDeclarationStatement(), final, List, T, child1Rep, new, ArrayList, T, length, VariableDeclarationStatement(), final, List, T, child2Rep, new, ArrayList, T, length, VariableDeclarationStatement(), final, int, crossoverIndex, 1, GeneticAlgorithm, getRandomGenerator, nextInt, length, 2, ForStatement(for), int, i, 0, i, crossoverIndex, i, ExpressionStatement(), child1Rep, add, parent1Rep, get, i, ExpressionStatement(), child2Rep, add, parent2Rep, get, i, ForStatement(for), int, i, crossoverIndex, i, length, i, ExpressionStatement(), child1Rep, add, parent2Rep, get, i, ExpressionStatement(), child2Rep, add, parent1Rep, get, i, ReturnStatement(return), new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.genetics:OrderedCrossover:crossover:Chromosome+Chromosome#[IfStatement(if), instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, ReturnStatement(return), mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:OrderedCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[VariableDeclarationStatement(), final, int, length, first, getLength, IfStatement(if), length, second, getLength, ThrowStatement(throw), new, DimensionMismatchException, second, getLength, length, VariableDeclarationStatement(), final, List, T, parent1Rep, first, getRepresentation, VariableDeclarationStatement(), final, List, T, parent2Rep, second, getRepresentation, VariableDeclarationStatement(), final, List, T, child1, new, ArrayList, T, length, VariableDeclarationStatement(), final, List, T, child2, new, ArrayList, T, length, VariableDeclarationStatement(), final, Set, T, child1Set, new, HashSet, T, length, VariableDeclarationStatement(), final, Set, T, child2Set, new, HashSet, T, length, VariableDeclarationStatement(), final, RandomGenerator, random, GeneticAlgorithm, getRandomGenerator, VariableDeclarationStatement(), int, a, random, nextInt, length, VariableDeclarationStatement(), int, b, DoStatement(do), ExpressionStatement(), b, random, nextInt, length, a, b, VariableDeclarationStatement(), final, int, lb, FastMath, min, a, b, VariableDeclarationStatement(), final, int, ub, FastMath, max, a, b, ExpressionStatement(), child1, addAll, parent1Rep, subList, lb, ub, 1, ExpressionStatement(), child1Set, addAll, child1, ExpressionStatement(), child2, addAll, parent2Rep, subList, lb, ub, 1, ExpressionStatement(), child2Set, addAll, child2, ForStatement(for), int, i, 1, i, length, i, VariableDeclarationStatement(), final, int, idx, ub, i, length, VariableDeclarationStatement(), final, T, item1, parent1Rep, get, idx, VariableDeclarationStatement(), final, T, item2, parent2Rep, get, idx, IfStatement(if), child1Set, contains, item2, ExpressionStatement(), child1, add, item2, ExpressionStatement(), child1Set, add, item2, IfStatement(if), child2Set, contains, item1, ExpressionStatement(), child2, add, item1, ExpressionStatement(), child2Set, add, item1, ExpressionStatement(), Collections, rotate, child1, lb, ExpressionStatement(), Collections, rotate, child2, lb, ReturnStatement(return), new, ChromosomePair, first, newFixedLengthChromosome, child1, second, newFixedLengthChromosome, child2]
org.apache.commons.math4.genetics:RandomKey:decode:List<T>#[ReturnStatement(return), decodeGeneric, sequence, getRepresentation, sortedRepresentation]
org.apache.commons.math4.genetics:RandomKey:decodeGeneric:List<S>+List<Double>+List<Double>#[VariableDeclarationStatement(), int, l, sequence, size, IfStatement(if), representation, size, l, ThrowStatement(throw), new, DimensionMismatchException, representation, size, l, IfStatement(if), sortedRepr, size, l, ThrowStatement(throw), new, DimensionMismatchException, sortedRepr, size, l, VariableDeclarationStatement(), List, Double, reprCopy, new, ArrayList, Double, representation, VariableDeclarationStatement(), List, S, res, new, ArrayList, S, l, ForStatement(for), int, i, 0, i, l, i, VariableDeclarationStatement(), int, index, reprCopy, indexOf, sortedRepr, get, i, ExpressionStatement(), res, add, sequence, get, index, ExpressionStatement(), reprCopy, set, index, null, ReturnStatement(return), res]
org.apache.commons.math4.genetics:RandomKey:isSame:Chromosome#[IfStatement(if), instanceof, another, RandomKey, ReturnStatement(return), false, VariableDeclarationStatement(), RandomKey, anotherRk, RandomKey, another, IfStatement(if), getLength, anotherRk, getLength, ReturnStatement(return), false, VariableDeclarationStatement(), List, Integer, thisPerm, this, baseSeqPermutation, VariableDeclarationStatement(), List, Integer, anotherPerm, anotherRk.baseSeqPermutation, ForStatement(for), int, i, 0, i, getLength, i, IfStatement(if), thisPerm, get, i, anotherPerm, get, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.genetics:RandomKey:checkValidity:List<Double>#[EnhancedForStatement(for), double, val, chromosomeRepresentation, IfStatement(if), val, 0, val, 1, ThrowStatement(throw), new, InvalidRepresentationException, LocalizedFormats.OUT_OF_RANGE_SIMPLE, val, 0, 1]
org.apache.commons.math4.genetics:RandomKey:randomPermutation:int#[VariableDeclarationStatement(), List, Double, repr, new, ArrayList, Double, l, ForStatement(for), int, i, 0, i, l, i, ExpressionStatement(), repr, add, GeneticAlgorithm, getRandomGenerator, nextDouble, ReturnStatement(return), repr]
org.apache.commons.math4.genetics:RandomKey:identityPermutation:int#[VariableDeclarationStatement(), List, Double, repr, new, ArrayList, Double, l, ForStatement(for), int, i, 0, i, l, i, ExpressionStatement(), repr, add, double, i, l, ReturnStatement(return), repr]
org.apache.commons.math4.genetics:RandomKey:comparatorPermutation:List<S>+Comparator<S>#[VariableDeclarationStatement(), List, S, sortedData, new, ArrayList, S, data, ExpressionStatement(), Collections, sort, sortedData, comparator, ReturnStatement(return), inducedPermutation, data, sortedData]
org.apache.commons.math4.genetics:RandomKey:inducedPermutation:List<S>+List<S>#[IfStatement(if), originalData, size, permutedData, size, ThrowStatement(throw), new, DimensionMismatchException, permutedData, size, originalData, size, VariableDeclarationStatement(), int, l, originalData, size, VariableDeclarationStatement(), List, S, origDataCopy, new, ArrayList, S, originalData, VariableDeclarationStatement(), Double, res, Double, l, ForStatement(for), int, i, 0, i, l, i, VariableDeclarationStatement(), int, index, origDataCopy, indexOf, permutedData, get, i, IfStatement(if), index, 1, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA, ExpressionStatement(), res, index, double, i, l, ExpressionStatement(), origDataCopy, set, index, null, ReturnStatement(return), Arrays, asList, res]
org.apache.commons.math4.genetics:RandomKey:toString:null#[ReturnStatement(return), String, format, "(f=%s pi=(%s))", getFitness, baseSeqPermutation]
org.apache.commons.math4.genetics:RandomKey:baseSequence:int#[VariableDeclarationStatement(), List, Integer, baseSequence, new, ArrayList, Integer, l, ForStatement(for), int, i, 0, i, l, i, ExpressionStatement(), baseSequence, add, i, ReturnStatement(return), baseSequence]
org.apache.commons.math4.genetics:RandomKeyMutation:mutate:Chromosome#[IfStatement(if), instanceof, original, RandomKey, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS, original, getClass, getSimpleName, VariableDeclarationStatement(), RandomKey, originalRk, RandomKey, original, VariableDeclarationStatement(), List, Double, repr, originalRk, getRepresentation, VariableDeclarationStatement(), int, rInd, GeneticAlgorithm, getRandomGenerator, nextInt, repr, size, VariableDeclarationStatement(), List, Double, newRepr, new, ArrayList, Double, repr, ExpressionStatement(), newRepr, set, rInd, GeneticAlgorithm, getRandomGenerator, nextDouble, ReturnStatement(return), originalRk, newFixedLengthChromosome, newRepr]
org.apache.commons.math4.genetics:TournamentSelection:select:Population#[ReturnStatement(return), new, ChromosomePair, tournament, ListPopulation, population, tournament, ListPopulation, population]
org.apache.commons.math4.genetics:TournamentSelection:tournament:ListPopulation#[IfStatement(if), population, getPopulationSize, this, arity, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.TOO_LARGE_TOURNAMENT_ARITY, arity, population, getPopulationSize, VariableDeclarationStatement(), ListPopulation, tournamentPopulation, new, ListPopulation, this, arity, Override, public, Population, nextGeneration, ReturnStatement(return), null, VariableDeclarationStatement(), List, Chromosome, chromosomes, new, ArrayList, Chromosome, population, getChromosomes, ForStatement(for), int, i, 0, i, this, arity, i, VariableDeclarationStatement(), int, rind, GeneticAlgorithm, getRandomGenerator, nextInt, chromosomes, size, ExpressionStatement(), tournamentPopulation, addChromosome, chromosomes, get, rind, ExpressionStatement(), chromosomes, remove, rind, ReturnStatement(return), tournamentPopulation, getFittestChromosome]
org.apache.commons.math4.genetics:TournamentSelection:getArity:null#[ReturnStatement(return), arity]
org.apache.commons.math4.genetics:TournamentSelection:setArity:int#[ExpressionStatement(), this, arity, arity]
org.apache.commons.math4.genetics:UniformCrossover:getRatio:null#[ReturnStatement(return), ratio]
org.apache.commons.math4.genetics:UniformCrossover:crossover:Chromosome+Chromosome#[IfStatement(if), instanceof, first, AbstractListChromosome, instanceof, second, AbstractListChromosome, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, ReturnStatement(return), mate, AbstractListChromosome, T, first, AbstractListChromosome, T, second]
org.apache.commons.math4.genetics:UniformCrossover:mate:AbstractListChromosome<T>+AbstractListChromosome<T>#[VariableDeclarationStatement(), final, int, length, first, getLength, IfStatement(if), length, second, getLength, ThrowStatement(throw), new, DimensionMismatchException, second, getLength, length, VariableDeclarationStatement(), final, List, T, parent1Rep, first, getRepresentation, VariableDeclarationStatement(), final, List, T, parent2Rep, second, getRepresentation, VariableDeclarationStatement(), final, List, T, child1Rep, new, ArrayList, T, length, VariableDeclarationStatement(), final, List, T, child2Rep, new, ArrayList, T, length, VariableDeclarationStatement(), final, RandomGenerator, random, GeneticAlgorithm, getRandomGenerator, ForStatement(for), int, index, 0, index, length, index, IfStatement(if), random, nextDouble, ratio, ExpressionStatement(), child1Rep, add, parent2Rep, get, index, ExpressionStatement(), child2Rep, add, parent1Rep, get, index, ExpressionStatement(), child1Rep, add, parent1Rep, get, index, ExpressionStatement(), child2Rep, add, parent2Rep, get, index, ReturnStatement(return), new, ChromosomePair, first, newFixedLengthChromosome, child1Rep, second, newFixedLengthChromosome, child2Rep]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getCenter:null#[ReturnStatement(return), center]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getRadius:null#[ReturnStatement(return), radius]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getSupport:null#[ReturnStatement(return), support, clone]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:getSupportSize:null#[ReturnStatement(return), support.length]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:contains:P#[ReturnStatement(return), point, distance, center, radius]
org.apache.commons.math4.geometry.enclosing:EnclosingBall:contains:P+double#[ReturnStatement(return), point, distance, center, radius, margin]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:enclose:Iterable<P>#[IfStatement(if), points, null, points, iterator, hasNext, ReturnStatement(return), generator, ballOnSupport, new, ArrayList, P, ReturnStatement(return), pivotingBall, points]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:pivotingBall:Iterable<P>#[VariableDeclarationStatement(), final, P, first, points, iterator, next, VariableDeclarationStatement(), final, List, P, extreme, new, ArrayList, P, first, getSpace, getDimension, 1, VariableDeclarationStatement(), final, List, P, support, new, ArrayList, P, first, getSpace, getDimension, 1, ExpressionStatement(), extreme, add, first, VariableDeclarationStatement(), EnclosingBall, S, P, ball, moveToFrontBall, extreme, extreme, size, support, WhileStatement(while), true, VariableDeclarationStatement(), final, P, farthest, selectFarthest, points, ball, IfStatement(if), ball, contains, farthest, tolerance, ReturnStatement(return), ball, ExpressionStatement(), support, clear, ExpressionStatement(), support, add, farthest, VariableDeclarationStatement(), EnclosingBall, S, P, savedBall, ball, ExpressionStatement(), ball, moveToFrontBall, extreme, extreme, size, support, IfStatement(if), ball, getRadius, savedBall, getRadius, ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), extreme, add, 0, farthest, ExpressionStatement(), extreme, subList, ball, getSupportSize, extreme, size, clear]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:moveToFrontBall:List<P>+int+List<P>#[VariableDeclarationStatement(), EnclosingBall, S, P, ball, generator, ballOnSupport, support, IfStatement(if), ball, getSupportSize, ball, getCenter, getSpace, getDimension, ForStatement(for), int, i, 0, i, nbExtreme, i, VariableDeclarationStatement(), final, P, pi, extreme, get, i, IfStatement(if), ball, contains, pi, tolerance, ExpressionStatement(), support, add, pi, ExpressionStatement(), ball, moveToFrontBall, extreme, i, support, ExpressionStatement(), support, remove, support, size, 1, ForStatement(for), int, j, i, j, 0, j, ExpressionStatement(), extreme, set, j, extreme, get, j, 1, ExpressionStatement(), extreme, set, 0, pi, ReturnStatement(return), ball]
org.apache.commons.math4.geometry.enclosing:WelzlEncloser:selectFarthest:Iterable<P>+EnclosingBall<S,P>#[VariableDeclarationStatement(), final, P, center, ball, getCenter, VariableDeclarationStatement(), P, farthest, null, VariableDeclarationStatement(), double, dMax, 1.0, EnhancedForStatement(for), final, P, point, points, VariableDeclarationStatement(), final, double, d, point, distance, center, IfStatement(if), d, dMax, ExpressionStatement(), farthest, point, ExpressionStatement(), dMax, d, ReturnStatement(return), farthest]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:getDimension:null#[ReturnStatement(return), 1]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:getSubSpace:null#[ThrowStatement(throw), new, NoSubSpaceException]
org.apache.commons.math4.geometry.euclidean.oned:Euclidean1D:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getInf:null#[ReturnStatement(return), lower]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getSup:null#[ReturnStatement(return), upper]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getSize:null#[ReturnStatement(return), upper, lower]
org.apache.commons.math4.geometry.euclidean.oned:Interval:getBarycenter:null#[ReturnStatement(return), 0.5, lower, upper]
org.apache.commons.math4.geometry.euclidean.oned:Interval:checkPoint:double+double#[IfStatement(if), point, lower, tolerance, point, upper, tolerance, ReturnStatement(return), Location.OUTSIDE, IfStatement(if), point, lower, tolerance, point, upper, tolerance, ReturnStatement(return), Location.INSIDE, ReturnStatement(return), Location.BOUNDARY]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:buildTree:double+double+double#[IfStatement(if), Double, isInfinite, lower, lower, 0, IfStatement(if), Double, isInfinite, upper, upper, 0, ReturnStatement(return), new, BSPTree, Euclidean1D, Boolean.TRUE, VariableDeclarationStatement(), final, SubHyperplane, Euclidean1D, upperCut, new, OrientedPoint, new, Vector1D, upper, true, tolerance, wholeHyperplane, ReturnStatement(return), new, BSPTree, Euclidean1D, upperCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, Boolean.TRUE, null, VariableDeclarationStatement(), final, SubHyperplane, Euclidean1D, lowerCut, new, OrientedPoint, new, Vector1D, lower, false, tolerance, wholeHyperplane, IfStatement(if), Double, isInfinite, upper, upper, 0, ReturnStatement(return), new, BSPTree, Euclidean1D, lowerCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, Boolean.TRUE, null, VariableDeclarationStatement(), final, SubHyperplane, Euclidean1D, upperCut, new, OrientedPoint, new, Vector1D, upper, true, tolerance, wholeHyperplane, ReturnStatement(return), new, BSPTree, Euclidean1D, lowerCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, upperCut, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, Boolean.TRUE, null, null]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:buildNew:BSPTree<Euclidean1D>#[ReturnStatement(return), new, IntervalsSet, tree, getTolerance]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:computeGeometricalProperties:null#[IfStatement(if), getTree, false, getCut, null, ExpressionStatement(), setBarycenter, Point, Euclidean1D, Vector1D.NaN, ExpressionStatement(), setSize, Boolean, getTree, false, getAttribute, Double.POSITIVE_INFINITY, 0, VariableDeclarationStatement(), double, size, 0.0, VariableDeclarationStatement(), double, sum, 0.0, EnhancedForStatement(for), final, Interval, interval, asList, ExpressionStatement(), size, interval, getSize, ExpressionStatement(), sum, interval, getSize, interval, getBarycenter, ExpressionStatement(), setSize, size, IfStatement(if), Double, isInfinite, size, ExpressionStatement(), setBarycenter, Point, Euclidean1D, Vector1D.NaN, IfStatement(if), size, Precision.SAFE_MIN, ExpressionStatement(), setBarycenter, Point, Euclidean1D, new, Vector1D, sum, size, ExpressionStatement(), setBarycenter, Point, Euclidean1D, OrientedPoint, getTree, false, getCut, getHyperplane, getLocation]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getInf:null#[VariableDeclarationStatement(), BSPTree, Euclidean1D, node, getTree, false, VariableDeclarationStatement(), double, inf, Double.POSITIVE_INFINITY, WhileStatement(while), node, getCut, null, VariableDeclarationStatement(), final, OrientedPoint, op, OrientedPoint, node, getCut, getHyperplane, ExpressionStatement(), inf, op, getLocation, getX, ExpressionStatement(), node, op, isDirect, node, getMinus, node, getPlus, ReturnStatement(return), Boolean, node, getAttribute, Double.NEGATIVE_INFINITY, inf]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getSup:null#[VariableDeclarationStatement(), BSPTree, Euclidean1D, node, getTree, false, VariableDeclarationStatement(), double, sup, Double.NEGATIVE_INFINITY, WhileStatement(while), node, getCut, null, VariableDeclarationStatement(), final, OrientedPoint, op, OrientedPoint, node, getCut, getHyperplane, ExpressionStatement(), sup, op, getLocation, getX, ExpressionStatement(), node, op, isDirect, node, getPlus, node, getMinus, ReturnStatement(return), Boolean, node, getAttribute, Double.POSITIVE_INFINITY, sup]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:projectToBoundary:Point<Euclidean1D>#[VariableDeclarationStatement(), final, double, x, Vector1D, point, getX, VariableDeclarationStatement(), double, previous, Double.NEGATIVE_INFINITY, EnhancedForStatement(for), final, double, a, this, IfStatement(if), x, a, 0, VariableDeclarationStatement(), final, double, previousOffset, x, previous, VariableDeclarationStatement(), final, double, currentOffset, a, 0, x, IfStatement(if), previousOffset, currentOffset, ReturnStatement(return), new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, previous, previousOffset, ReturnStatement(return), new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, a, 0, currentOffset, IfStatement(if), x, a, 1, VariableDeclarationStatement(), final, double, offset0, a, 0, x, VariableDeclarationStatement(), final, double, offset1, x, a, 1, IfStatement(if), offset0, offset1, ReturnStatement(return), new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, a, 1, offset1, ReturnStatement(return), new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, a, 0, offset0, ExpressionStatement(), previous, a, 1, ReturnStatement(return), new, BoundaryProjection, Euclidean1D, point, finiteOrNullPoint, previous, x, previous]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:finiteOrNullPoint:double#[ReturnStatement(return), Double, isInfinite, x, null, new, Vector1D, x]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:asList:null#[VariableDeclarationStatement(), final, List, Interval, list, new, ArrayList, Interval, EnhancedForStatement(for), final, double, a, this, ExpressionStatement(), list, add, new, Interval, a, 0, a, 1, ReturnStatement(return), list]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getFirstLeaf:BSPTree<Euclidean1D>#[IfStatement(if), root, getCut, null, ReturnStatement(return), root, VariableDeclarationStatement(), BSPTree, Euclidean1D, smallest, null, ForStatement(for), BSPTree, Euclidean1D, n, root, n, null, n, previousInternalNode, n, ExpressionStatement(), smallest, n, ReturnStatement(return), leafBefore, smallest]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getFirstIntervalBoundary:null#[VariableDeclarationStatement(), BSPTree, Euclidean1D, node, getTree, false, IfStatement(if), node, getCut, null, ReturnStatement(return), null, ExpressionStatement(), node, getFirstLeaf, node, getParent, WhileStatement(while), node, null, isIntervalStart, node, isIntervalEnd, node, ExpressionStatement(), node, nextInternalNode, node, ReturnStatement(return), node]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isIntervalStart:BSPTree<Euclidean1D>#[IfStatement(if), Boolean, leafBefore, node, getAttribute, ReturnStatement(return), false, IfStatement(if), Boolean, leafAfter, node, getAttribute, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isIntervalEnd:BSPTree<Euclidean1D>#[IfStatement(if), Boolean, leafBefore, node, getAttribute, ReturnStatement(return), false, IfStatement(if), Boolean, leafAfter, node, getAttribute, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:nextInternalNode:BSPTree<Euclidean1D>#[IfStatement(if), childAfter, node, getCut, null, ReturnStatement(return), leafAfter, node, getParent, WhileStatement(while), isAfterParent, node, ExpressionStatement(), node, node, getParent, ReturnStatement(return), node, getParent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:previousInternalNode:BSPTree<Euclidean1D>#[IfStatement(if), childBefore, node, getCut, null, ReturnStatement(return), leafBefore, node, getParent, WhileStatement(while), isBeforeParent, node, ExpressionStatement(), node, node, getParent, ReturnStatement(return), node, getParent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:leafBefore:BSPTree<Euclidean1D>#[ExpressionStatement(), node, childBefore, node, WhileStatement(while), node, getCut, null, ExpressionStatement(), node, childAfter, node, ReturnStatement(return), node]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:leafAfter:BSPTree<Euclidean1D>#[ExpressionStatement(), node, childAfter, node, WhileStatement(while), node, getCut, null, ExpressionStatement(), node, childBefore, node, ReturnStatement(return), node]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isBeforeParent:BSPTree<Euclidean1D>#[VariableDeclarationStatement(), final, BSPTree, Euclidean1D, parent, node, getParent, IfStatement(if), parent, null, ReturnStatement(return), false, ReturnStatement(return), node, childBefore, parent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isAfterParent:BSPTree<Euclidean1D>#[VariableDeclarationStatement(), final, BSPTree, Euclidean1D, parent, node, getParent, IfStatement(if), parent, null, ReturnStatement(return), false, ReturnStatement(return), node, childAfter, parent]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:childBefore:BSPTree<Euclidean1D>#[IfStatement(if), isDirect, node, ReturnStatement(return), node, getMinus, ReturnStatement(return), node, getPlus]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:childAfter:BSPTree<Euclidean1D>#[IfStatement(if), isDirect, node, ReturnStatement(return), node, getPlus, ReturnStatement(return), node, getMinus]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:isDirect:BSPTree<Euclidean1D>#[ReturnStatement(return), OrientedPoint, node, getCut, getHyperplane, isDirect]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:getAngle:BSPTree<Euclidean1D>#[ReturnStatement(return), OrientedPoint, node, getCut, getHyperplane, getLocation, getX]
org.apache.commons.math4.geometry.euclidean.oned:IntervalsSet:iterator:null#[ReturnStatement(return), new, SubIntervalsIterator]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:copySelf:null#[ReturnStatement(return), this]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getOffset:Vector<Euclidean1D>#[ReturnStatement(return), getOffset, Point, Euclidean1D, vector]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getOffset:Point<Euclidean1D>#[VariableDeclarationStatement(), final, double, delta, Vector1D, point, getX, location, getX, ReturnStatement(return), direct, delta, delta]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:wholeHyperplane:null#[ReturnStatement(return), new, SubOrientedPoint, this, null]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:wholeSpace:null#[ReturnStatement(return), new, IntervalsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:sameOrientationAs:Hyperplane<Euclidean1D>#[ReturnStatement(return), direct, OrientedPoint, other, direct]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:project:Point<Euclidean1D>#[ReturnStatement(return), location]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:getLocation:null#[ReturnStatement(return), location]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:isDirect:null#[ReturnStatement(return), direct]
org.apache.commons.math4.geometry.euclidean.oned:OrientedPoint:revertSelf:null#[ExpressionStatement(), direct, direct]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:getSize:null#[ReturnStatement(return), 0]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:isEmpty:null#[ReturnStatement(return), false]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:buildNew:Hyperplane<Euclidean1D>+Region<Euclidean1D>#[ReturnStatement(return), new, SubOrientedPoint, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.euclidean.oned:SubOrientedPoint:split:Hyperplane<Euclidean1D>#[VariableDeclarationStatement(), final, double, global, hyperplane, getOffset, OrientedPoint, getHyperplane, getLocation, IfStatement(if), global, 1.0e-10, ReturnStatement(return), new, SplitSubHyperplane, Euclidean1D, null, this, IfStatement(if), global, 1.0e-10, ReturnStatement(return), new, SplitSubHyperplane, Euclidean1D, this, null, ReturnStatement(return), new, SplitSubHyperplane, Euclidean1D, null, null]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getX:null#[ReturnStatement(return), x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getSpace:null#[ReturnStatement(return), Euclidean1D, getInstance]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getZero:null#[ReturnStatement(return), ZERO]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNorm1:null#[ReturnStatement(return), FastMath, abs, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNorm:null#[ReturnStatement(return), FastMath, abs, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNormSq:null#[ReturnStatement(return), x, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:getNormInf:null#[ReturnStatement(return), FastMath, abs, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:add:Vector<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, v1, Vector1D, v, ReturnStatement(return), new, Vector1D, x, v1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:add:double+Vector<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, v1, Vector1D, v, ReturnStatement(return), new, Vector1D, x, factor, v1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:subtract:Vector<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, p3, Vector1D, p, ReturnStatement(return), new, Vector1D, x, p3.x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:subtract:double+Vector<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, v1, Vector1D, v, ReturnStatement(return), new, Vector1D, x, factor, v1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:normalize:null#[VariableDeclarationStatement(), double, s, getNorm, IfStatement(if), s, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ReturnStatement(return), scalarMultiply, 1, s]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:negate:null#[ReturnStatement(return), new, Vector1D, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:scalarMultiply:double#[ReturnStatement(return), new, Vector1D, a, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:isNaN:null#[ReturnStatement(return), Double, isNaN, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:isInfinite:null#[ReturnStatement(return), isNaN, Double, isInfinite, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distance1:Vector<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, p3, Vector1D, p, VariableDeclarationStatement(), final, double, dx, FastMath, abs, p3.x, x, ReturnStatement(return), dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distance:Point<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, p3, Vector1D, p, VariableDeclarationStatement(), final, double, dx, p3.x, x, ReturnStatement(return), FastMath, abs, dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceInf:Vector<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, p3, Vector1D, p, VariableDeclarationStatement(), final, double, dx, FastMath, abs, p3.x, x, ReturnStatement(return), dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceSq:Vector<Euclidean1D>#[VariableDeclarationStatement(), Vector1D, p3, Vector1D, p, VariableDeclarationStatement(), final, double, dx, p3.x, x, ReturnStatement(return), dx, dx]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:dotProduct:Vector<Euclidean1D>#[VariableDeclarationStatement(), final, Vector1D, v1, Vector1D, v, ReturnStatement(return), x, v1.x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distance:Vector1D+Vector1D#[ReturnStatement(return), p1, distance, p2]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceInf:Vector1D+Vector1D#[ReturnStatement(return), p1, distanceInf, p2]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:distanceSq:Vector1D+Vector1D#[ReturnStatement(return), p1, distanceSq, p2]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, Vector1D, VariableDeclarationStatement(), final, Vector1D, rhs, Vector1D, other, IfStatement(if), rhs, isNaN, ReturnStatement(return), this, isNaN, ReturnStatement(return), x, rhs.x, ReturnStatement(return), false]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 7785, ReturnStatement(return), 997, MathUtils, hash, x]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:toString:null#[ReturnStatement(return), Vector1DFormat, getInstance, format, this]
org.apache.commons.math4.geometry.euclidean.oned:Vector1D:toString:NumberFormat#[ReturnStatement(return), new, Vector1DFormat, format, format, this]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:getInstance:null#[ReturnStatement(return), getInstance, Locale, getDefault]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:getInstance:Locale#[ReturnStatement(return), new, Vector1DFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:format:Vector<Euclidean1D>+StringBuffer+FieldPosition#[VariableDeclarationStatement(), final, Vector1D, p1, Vector1D, vector, ReturnStatement(return), format, toAppendTo, pos, p1, getX]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:parse:String#[VariableDeclarationStatement(), ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), Vector1D, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, Vector1D, ReturnStatement(return), result]
org.apache.commons.math4.geometry.euclidean.oned:Vector1DFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), final, double, coordinates, parseCoordinates, 1, source, pos, IfStatement(if), coordinates, null, ReturnStatement(return), null, ReturnStatement(return), new, Vector1D, coordinates, 0]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:getDimension:null#[ReturnStatement(return), 3]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:getSubSpace:null#[ReturnStatement(return), Euclidean2D, getInstance]
org.apache.commons.math4.geometry.euclidean.threed:Euclidean3D:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:mat2quat:T[][]#[VariableDeclarationStatement(), final, T, quat, MathArrays, buildArray, ort, 0, 0, getField, 4, VariableDeclarationStatement(), T, s, ort, 0, 0, add, ort, 1, 1, add, ort, 2, 2, IfStatement(if), s, getReal, 0.19, ExpressionStatement(), quat, 0, s, add, 1.0, sqrt, multiply, 0.5, VariableDeclarationStatement(), T, inv, quat, 0, reciprocal, multiply, 0.25, ExpressionStatement(), quat, 1, inv, multiply, ort, 1, 2, subtract, ort, 2, 1, ExpressionStatement(), quat, 2, inv, multiply, ort, 2, 0, subtract, ort, 0, 2, ExpressionStatement(), quat, 3, inv, multiply, ort, 0, 1, subtract, ort, 1, 0, ExpressionStatement(), s, ort, 0, 0, subtract, ort, 1, 1, subtract, ort, 2, 2, IfStatement(if), s, getReal, 0.19, ExpressionStatement(), quat, 1, s, add, 1.0, sqrt, multiply, 0.5, VariableDeclarationStatement(), T, inv, quat, 1, reciprocal, multiply, 0.25, ExpressionStatement(), quat, 0, inv, multiply, ort, 1, 2, subtract, ort, 2, 1, ExpressionStatement(), quat, 2, inv, multiply, ort, 0, 1, add, ort, 1, 0, ExpressionStatement(), quat, 3, inv, multiply, ort, 0, 2, add, ort, 2, 0, ExpressionStatement(), s, ort, 1, 1, subtract, ort, 0, 0, subtract, ort, 2, 2, IfStatement(if), s, getReal, 0.19, ExpressionStatement(), quat, 2, s, add, 1.0, sqrt, multiply, 0.5, VariableDeclarationStatement(), T, inv, quat, 2, reciprocal, multiply, 0.25, ExpressionStatement(), quat, 0, inv, multiply, ort, 2, 0, subtract, ort, 0, 2, ExpressionStatement(), quat, 1, inv, multiply, ort, 0, 1, add, ort, 1, 0, ExpressionStatement(), quat, 3, inv, multiply, ort, 2, 1, add, ort, 1, 2, ExpressionStatement(), s, ort, 2, 2, subtract, ort, 0, 0, subtract, ort, 1, 1, ExpressionStatement(), quat, 3, s, add, 1.0, sqrt, multiply, 0.5, VariableDeclarationStatement(), T, inv, quat, 3, reciprocal, multiply, 0.25, ExpressionStatement(), quat, 0, inv, multiply, ort, 0, 1, subtract, ort, 1, 0, ExpressionStatement(), quat, 1, inv, multiply, ort, 0, 2, add, ort, 2, 0, ExpressionStatement(), quat, 2, inv, multiply, ort, 2, 1, add, ort, 1, 2, ReturnStatement(return), quat]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:revert:null#[ReturnStatement(return), new, FieldRotation, T, q0, negate, q1, q2, q3, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ0:null#[ReturnStatement(return), q0]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ1:null#[ReturnStatement(return), q1]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ2:null#[ReturnStatement(return), q2]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getQ3:null#[ReturnStatement(return), q3]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAxis:null#[ReturnStatement(return), getAxis, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAxis:RotationConvention#[VariableDeclarationStatement(), final, T, squaredSine, q1, multiply, q1, add, q2, multiply, q2, add, q3, multiply, q3, IfStatement(if), squaredSine, getReal, 0, VariableDeclarationStatement(), final, Field, T, field, squaredSine, getField, ReturnStatement(return), new, FieldVector3D, T, convention, RotationConvention.VECTOR_OPERATOR, field, getOne, field, getOne, negate, field, getZero, field, getZero, VariableDeclarationStatement(), final, double, sgn, convention, RotationConvention.VECTOR_OPERATOR, 1, 1, IfStatement(if), q0, getReal, 0, VariableDeclarationStatement(), T, inverse, squaredSine, sqrt, reciprocal, multiply, sgn, ReturnStatement(return), new, FieldVector3D, T, q1, multiply, inverse, q2, multiply, inverse, q3, multiply, inverse, VariableDeclarationStatement(), final, T, inverse, squaredSine, sqrt, reciprocal, negate, multiply, sgn, ReturnStatement(return), new, FieldVector3D, T, q1, multiply, inverse, q2, multiply, inverse, q3, multiply, inverse]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAngle:null#[IfStatement(if), q0, getReal, 0.1, q0, getReal, 0.1, ReturnStatement(return), q1, multiply, q1, add, q2, multiply, q2, add, q3, multiply, q3, sqrt, asin, multiply, 2, IfStatement(if), q0, getReal, 0, ReturnStatement(return), q0, negate, acos, multiply, 2, ReturnStatement(return), q0, acos, multiply, 2]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAngles:RotationOrder#[ReturnStatement(return), getAngles, order, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getAngles:RotationOrder+RotationConvention#[IfStatement(if), convention, RotationConvention.VECTOR_OPERATOR, IfStatement(if), order, RotationOrder.XYZ, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v1, getY, negate, atan2, v1, getZ, v2, getZ, asin, v2, getY, negate, atan2, v2, getX, IfStatement(if), order, RotationOrder.XZY, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v1, getZ, atan2, v1, getY, v2, getY, asin, negate, v2, getZ, atan2, v2, getX, IfStatement(if), order, RotationOrder.YXZ, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v1, getX, atan2, v1, getZ, v2, getZ, asin, negate, v2, getX, atan2, v2, getY, IfStatement(if), order, RotationOrder.YZX, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v1, getZ, negate, atan2, v1, getX, v2, getX, asin, v2, getZ, negate, atan2, v2, getY, IfStatement(if), order, RotationOrder.ZXY, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v1, getX, negate, atan2, v1, getY, v2, getY, asin, v2, getX, negate, atan2, v2, getZ, IfStatement(if), order, RotationOrder.ZYX, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v1, getY, atan2, v1, getX, v2, getX, asin, negate, v2, getY, atan2, v2, getZ, IfStatement(if), order, RotationOrder.XYX, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v1, getY, atan2, v1, getZ, negate, v2, getX, acos, v2, getY, atan2, v2, getZ, IfStatement(if), order, RotationOrder.XZX, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 1, 0, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 1, 0, 0, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v1, getZ, atan2, v1, getY, v2, getX, acos, v2, getZ, atan2, v2, getY, negate, IfStatement(if), order, RotationOrder.YXY, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v1, getX, atan2, v1, getZ, v2, getY, acos, v2, getX, atan2, v2, getZ, negate, IfStatement(if), order, RotationOrder.YZY, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 1, 0, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 1, 0, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v1, getZ, atan2, v1, getX, negate, v2, getY, acos, v2, getZ, atan2, v2, getX, IfStatement(if), order, RotationOrder.ZXZ, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v1, getX, atan2, v1, getY, negate, v2, getZ, acos, v2, getX, atan2, v2, getY, VariableDeclarationStatement(), final, FieldVector3D, T, v1, applyTo, vector, 0, 0, 1, VariableDeclarationStatement(), final, FieldVector3D, T, v2, applyInverseTo, vector, 0, 0, 1, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v1, getY, atan2, v1, getX, v2, getZ, acos, v2, getY, atan2, v2, getX, negate, IfStatement(if), order, RotationOrder.XYZ, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v2, getY, negate, atan2, v2, getZ, v2, getX, asin, v1, getY, negate, atan2, v1, getX, IfStatement(if), order, RotationOrder.XZY, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v2, getZ, atan2, v2, getY, v2, getX, asin, negate, v1, getZ, atan2, v1, getX, IfStatement(if), order, RotationOrder.YXZ, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v2, getX, atan2, v2, getZ, v2, getY, asin, negate, v1, getX, atan2, v1, getY, IfStatement(if), order, RotationOrder.YZX, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v2, getZ, negate, atan2, v2, getX, v2, getY, asin, v1, getZ, negate, atan2, v1, getY, IfStatement(if), order, RotationOrder.ZXY, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v2, getX, negate, atan2, v2, getY, v2, getZ, asin, v1, getX, negate, atan2, v1, getZ, IfStatement(if), order, RotationOrder.ZYX, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), buildArray, v2, getY, atan2, v2, getX, v2, getZ, asin, negate, v1, getY, atan2, v1, getZ, IfStatement(if), order, RotationOrder.XYX, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v2, getY, atan2, v2, getZ, negate, v2, getX, acos, v1, getY, atan2, v1, getZ, IfStatement(if), order, RotationOrder.XZX, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getX, getReal, 0.9999999999, v2, getX, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v2, getZ, atan2, v2, getY, v2, getX, acos, v1, getZ, atan2, v1, getY, negate, IfStatement(if), order, RotationOrder.YXY, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v2, getX, atan2, v2, getZ, v2, getY, acos, v1, getX, atan2, v1, getZ, negate, IfStatement(if), order, RotationOrder.YZY, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getY, getReal, 0.9999999999, v2, getY, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v2, getZ, atan2, v2, getX, negate, v2, getY, acos, v1, getZ, atan2, v1, getX, IfStatement(if), order, RotationOrder.ZXZ, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v2, getX, atan2, v2, getY, negate, v2, getZ, acos, v1, getX, atan2, v1, getY, VariableDeclarationStatement(), FieldVector3D, T, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), FieldVector3D, T, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getZ, getReal, 0.9999999999, v2, getZ, getReal, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), buildArray, v2, getY, atan2, v2, getX, v2, getZ, acos, v1, getY, atan2, v1, getX, negate]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:buildArray:T+T+T#[VariableDeclarationStatement(), final, T, array, MathArrays, buildArray, a0, getField, 3, ExpressionStatement(), array, 0, a0, ExpressionStatement(), array, 1, a1, ExpressionStatement(), array, 2, a2, ReturnStatement(return), array]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:vector:double+double+double#[VariableDeclarationStatement(), final, T, zero, q0, getField, getZero, ReturnStatement(return), new, FieldVector3D, T, zero, add, x, zero, add, y, zero, add, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:getMatrix:null#[VariableDeclarationStatement(), final, T, q0q0, q0, multiply, q0, VariableDeclarationStatement(), final, T, q0q1, q0, multiply, q1, VariableDeclarationStatement(), final, T, q0q2, q0, multiply, q2, VariableDeclarationStatement(), final, T, q0q3, q0, multiply, q3, VariableDeclarationStatement(), final, T, q1q1, q1, multiply, q1, VariableDeclarationStatement(), final, T, q1q2, q1, multiply, q2, VariableDeclarationStatement(), final, T, q1q3, q1, multiply, q3, VariableDeclarationStatement(), final, T, q2q2, q2, multiply, q2, VariableDeclarationStatement(), final, T, q2q3, q2, multiply, q3, VariableDeclarationStatement(), final, T, q3q3, q3, multiply, q3, VariableDeclarationStatement(), final, T, m, MathArrays, buildArray, q0, getField, 3, 3, ExpressionStatement(), m, 0, 0, q0q0, add, q1q1, multiply, 2, subtract, 1, ExpressionStatement(), m, 1, 0, q1q2, subtract, q0q3, multiply, 2, ExpressionStatement(), m, 2, 0, q1q3, add, q0q2, multiply, 2, ExpressionStatement(), m, 0, 1, q1q2, add, q0q3, multiply, 2, ExpressionStatement(), m, 1, 1, q0q0, add, q2q2, multiply, 2, subtract, 1, ExpressionStatement(), m, 2, 1, q2q3, subtract, q0q1, multiply, 2, ExpressionStatement(), m, 0, 2, q1q3, subtract, q0q2, multiply, 2, ExpressionStatement(), m, 1, 2, q2q3, add, q0q1, multiply, 2, ExpressionStatement(), m, 2, 2, q0q0, add, q3q3, multiply, 2, subtract, 1, ReturnStatement(return), m]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:toRotation:null#[ReturnStatement(return), new, Rotation, q0, getReal, q1, getReal, q2, getReal, q3, getReal, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:FieldVector3D<T>#[VariableDeclarationStatement(), final, T, x, u, getX, VariableDeclarationStatement(), final, T, y, u, getY, VariableDeclarationStatement(), final, T, z, u, getZ, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, ReturnStatement(return), new, FieldVector3D, T, q0, multiply, x, multiply, q0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, q0, multiply, y, multiply, q0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, q0, multiply, z, multiply, q0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Vector3D#[VariableDeclarationStatement(), final, double, x, u, getX, VariableDeclarationStatement(), final, double, y, u, getY, VariableDeclarationStatement(), final, double, z, u, getZ, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, ReturnStatement(return), new, FieldVector3D, T, q0, multiply, q0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, q0, multiply, q0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, q0, multiply, q0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:T[]+T[]#[VariableDeclarationStatement(), final, T, x, in, 0, VariableDeclarationStatement(), final, T, y, in, 1, VariableDeclarationStatement(), final, T, z, in, 2, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, ExpressionStatement(), out, 0, q0, multiply, x, multiply, q0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, ExpressionStatement(), out, 1, q0, multiply, y, multiply, q0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, ExpressionStatement(), out, 2, q0, multiply, z, multiply, q0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:double[]+T[]#[VariableDeclarationStatement(), final, double, x, in, 0, VariableDeclarationStatement(), final, double, y, in, 1, VariableDeclarationStatement(), final, double, z, in, 2, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, ExpressionStatement(), out, 0, q0, multiply, q0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, ExpressionStatement(), out, 1, q0, multiply, q0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, ExpressionStatement(), out, 2, q0, multiply, q0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Rotation+FieldVector3D<T>#[VariableDeclarationStatement(), final, T, x, u, getX, VariableDeclarationStatement(), final, T, y, u, getY, VariableDeclarationStatement(), final, T, z, u, getZ, VariableDeclarationStatement(), final, T, s, x, multiply, r, getQ1, add, y, multiply, r, getQ2, add, z, multiply, r, getQ3, ReturnStatement(return), new, FieldVector3D, T, x, multiply, r, getQ0, subtract, z, multiply, r, getQ2, subtract, y, multiply, r, getQ3, multiply, r, getQ0, add, s, multiply, r, getQ1, multiply, 2, subtract, x, y, multiply, r, getQ0, subtract, x, multiply, r, getQ3, subtract, z, multiply, r, getQ1, multiply, r, getQ0, add, s, multiply, r, getQ2, multiply, 2, subtract, y, z, multiply, r, getQ0, subtract, y, multiply, r, getQ1, subtract, x, multiply, r, getQ2, multiply, r, getQ0, add, s, multiply, r, getQ3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:FieldVector3D<T>#[VariableDeclarationStatement(), final, T, x, u, getX, VariableDeclarationStatement(), final, T, y, u, getY, VariableDeclarationStatement(), final, T, z, u, getZ, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, VariableDeclarationStatement(), final, T, m0, q0, negate, ReturnStatement(return), new, FieldVector3D, T, m0, multiply, x, multiply, m0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, m0, multiply, y, multiply, m0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, m0, multiply, z, multiply, m0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Vector3D#[VariableDeclarationStatement(), final, double, x, u, getX, VariableDeclarationStatement(), final, double, y, u, getY, VariableDeclarationStatement(), final, double, z, u, getZ, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, VariableDeclarationStatement(), final, T, m0, q0, negate, ReturnStatement(return), new, FieldVector3D, T, m0, multiply, m0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, m0, multiply, m0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, m0, multiply, m0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:T[]+T[]#[VariableDeclarationStatement(), final, T, x, in, 0, VariableDeclarationStatement(), final, T, y, in, 1, VariableDeclarationStatement(), final, T, z, in, 2, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, VariableDeclarationStatement(), final, T, m0, q0, negate, ExpressionStatement(), out, 0, m0, multiply, x, multiply, m0, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, ExpressionStatement(), out, 1, m0, multiply, y, multiply, m0, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, ExpressionStatement(), out, 2, m0, multiply, z, multiply, m0, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:double[]+T[]#[VariableDeclarationStatement(), final, double, x, in, 0, VariableDeclarationStatement(), final, double, y, in, 1, VariableDeclarationStatement(), final, double, z, in, 2, VariableDeclarationStatement(), final, T, s, q1, multiply, x, add, q2, multiply, y, add, q3, multiply, z, VariableDeclarationStatement(), final, T, m0, q0, negate, ExpressionStatement(), out, 0, m0, multiply, m0, multiply, x, subtract, q2, multiply, z, subtract, q3, multiply, y, add, s, multiply, q1, multiply, 2, subtract, x, ExpressionStatement(), out, 1, m0, multiply, m0, multiply, y, subtract, q3, multiply, x, subtract, q1, multiply, z, add, s, multiply, q2, multiply, 2, subtract, y, ExpressionStatement(), out, 2, m0, multiply, m0, multiply, z, subtract, q1, multiply, y, subtract, q2, multiply, x, add, s, multiply, q3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Rotation+FieldVector3D<T>#[VariableDeclarationStatement(), final, T, x, u, getX, VariableDeclarationStatement(), final, T, y, u, getY, VariableDeclarationStatement(), final, T, z, u, getZ, VariableDeclarationStatement(), final, T, s, x, multiply, r, getQ1, add, y, multiply, r, getQ2, add, z, multiply, r, getQ3, VariableDeclarationStatement(), final, double, m0, r, getQ0, ReturnStatement(return), new, FieldVector3D, T, x, multiply, m0, subtract, z, multiply, r, getQ2, subtract, y, multiply, r, getQ3, multiply, m0, add, s, multiply, r, getQ1, multiply, 2, subtract, x, y, multiply, m0, subtract, x, multiply, r, getQ3, subtract, z, multiply, r, getQ1, multiply, m0, add, s, multiply, r, getQ2, multiply, 2, subtract, y, z, multiply, m0, subtract, y, multiply, r, getQ1, subtract, x, multiply, r, getQ2, multiply, m0, add, s, multiply, r, getQ3, multiply, 2, subtract, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:FieldRotation<T>#[ReturnStatement(return), compose, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:compose:FieldRotation<T>+RotationConvention#[ReturnStatement(return), convention, RotationConvention.VECTOR_OPERATOR, composeInternal, r, r, composeInternal, this]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInternal:FieldRotation<T>#[ReturnStatement(return), new, FieldRotation, T, r.q0, multiply, q0, subtract, r.q1, multiply, q1, add, r.q2, multiply, q2, add, r.q3, multiply, q3, r.q1, multiply, q0, add, r.q0, multiply, q1, add, r.q2, multiply, q3, subtract, r.q3, multiply, q2, r.q2, multiply, q0, add, r.q0, multiply, q2, add, r.q3, multiply, q1, subtract, r.q1, multiply, q3, r.q3, multiply, q0, add, r.q0, multiply, q3, add, r.q1, multiply, q2, subtract, r.q2, multiply, q1, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Rotation#[ReturnStatement(return), compose, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:compose:Rotation+RotationConvention#[ReturnStatement(return), convention, RotationConvention.VECTOR_OPERATOR, composeInternal, r, applyTo, r, this]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInternal:Rotation#[ReturnStatement(return), new, FieldRotation, T, q0, multiply, r, getQ0, subtract, q1, multiply, r, getQ1, add, q2, multiply, r, getQ2, add, q3, multiply, r, getQ3, q0, multiply, r, getQ1, add, q1, multiply, r, getQ0, add, q3, multiply, r, getQ2, subtract, q2, multiply, r, getQ3, q0, multiply, r, getQ2, add, q2, multiply, r, getQ0, add, q1, multiply, r, getQ3, subtract, q3, multiply, r, getQ1, q0, multiply, r, getQ3, add, q3, multiply, r, getQ0, add, q2, multiply, r, getQ1, subtract, q1, multiply, r, getQ2, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyTo:Rotation+FieldRotation<T>#[ReturnStatement(return), new, FieldRotation, T, rInner.q0, multiply, r1, getQ0, subtract, rInner.q1, multiply, r1, getQ1, add, rInner.q2, multiply, r1, getQ2, add, rInner.q3, multiply, r1, getQ3, rInner.q1, multiply, r1, getQ0, add, rInner.q0, multiply, r1, getQ1, add, rInner.q2, multiply, r1, getQ3, subtract, rInner.q3, multiply, r1, getQ2, rInner.q2, multiply, r1, getQ0, add, rInner.q0, multiply, r1, getQ2, add, rInner.q3, multiply, r1, getQ1, subtract, rInner.q1, multiply, r1, getQ3, rInner.q3, multiply, r1, getQ0, add, rInner.q0, multiply, r1, getQ3, add, rInner.q1, multiply, r1, getQ2, subtract, rInner.q2, multiply, r1, getQ1, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:FieldRotation<T>#[ReturnStatement(return), composeInverse, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverse:FieldRotation<T>+RotationConvention#[ReturnStatement(return), convention, RotationConvention.VECTOR_OPERATOR, composeInverseInternal, r, r, composeInternal, revert]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverseInternal:FieldRotation<T>#[ReturnStatement(return), new, FieldRotation, T, r.q0, multiply, q0, add, r.q1, multiply, q1, add, r.q2, multiply, q2, add, r.q3, multiply, q3, negate, r.q0, multiply, q1, add, r.q2, multiply, q3, subtract, r.q3, multiply, q2, subtract, r.q1, multiply, q0, r.q0, multiply, q2, add, r.q3, multiply, q1, subtract, r.q1, multiply, q3, subtract, r.q2, multiply, q0, r.q0, multiply, q3, add, r.q1, multiply, q2, subtract, r.q2, multiply, q1, subtract, r.q3, multiply, q0, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Rotation#[ReturnStatement(return), composeInverse, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverse:Rotation+RotationConvention#[ReturnStatement(return), convention, RotationConvention.VECTOR_OPERATOR, composeInverseInternal, r, applyTo, r, revert]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:composeInverseInternal:Rotation#[ReturnStatement(return), new, FieldRotation, T, q0, multiply, r, getQ0, add, q1, multiply, r, getQ1, add, q2, multiply, r, getQ2, add, q3, multiply, r, getQ3, negate, q1, multiply, r, getQ0, add, q3, multiply, r, getQ2, subtract, q2, multiply, r, getQ3, subtract, q0, multiply, r, getQ1, q2, multiply, r, getQ0, add, q1, multiply, r, getQ3, subtract, q3, multiply, r, getQ1, subtract, q0, multiply, r, getQ2, q3, multiply, r, getQ0, add, q2, multiply, r, getQ1, subtract, q1, multiply, r, getQ2, subtract, q0, multiply, r, getQ3, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:applyInverseTo:Rotation+FieldRotation<T>#[ReturnStatement(return), new, FieldRotation, T, rInner.q0, multiply, rOuter, getQ0, add, rInner.q1, multiply, rOuter, getQ1, add, rInner.q2, multiply, rOuter, getQ2, add, rInner.q3, multiply, rOuter, getQ3, negate, rInner.q0, multiply, rOuter, getQ1, add, rInner.q2, multiply, rOuter, getQ3, subtract, rInner.q3, multiply, rOuter, getQ2, subtract, rInner.q1, multiply, rOuter, getQ0, rInner.q0, multiply, rOuter, getQ2, add, rInner.q3, multiply, rOuter, getQ1, subtract, rInner.q1, multiply, rOuter, getQ3, subtract, rInner.q2, multiply, rOuter, getQ0, rInner.q0, multiply, rOuter, getQ3, add, rInner.q1, multiply, rOuter, getQ2, subtract, rInner.q2, multiply, rOuter, getQ1, subtract, rInner.q3, multiply, rOuter, getQ0, false]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:orthogonalizeMatrix:T[][]+double#[VariableDeclarationStatement(), T, x00, m, 0, 0, VariableDeclarationStatement(), T, x01, m, 0, 1, VariableDeclarationStatement(), T, x02, m, 0, 2, VariableDeclarationStatement(), T, x10, m, 1, 0, VariableDeclarationStatement(), T, x11, m, 1, 1, VariableDeclarationStatement(), T, x12, m, 1, 2, VariableDeclarationStatement(), T, x20, m, 2, 0, VariableDeclarationStatement(), T, x21, m, 2, 1, VariableDeclarationStatement(), T, x22, m, 2, 2, VariableDeclarationStatement(), double, fn, 0, VariableDeclarationStatement(), double, fn1, VariableDeclarationStatement(), final, T, o, MathArrays, buildArray, m, 0, 0, getField, 3, 3, VariableDeclarationStatement(), int, i, 0, WhileStatement(while), i, 11, VariableDeclarationStatement(), final, T, mx00, m, 0, 0, multiply, x00, add, m, 1, 0, multiply, x10, add, m, 2, 0, multiply, x20, VariableDeclarationStatement(), final, T, mx10, m, 0, 1, multiply, x00, add, m, 1, 1, multiply, x10, add, m, 2, 1, multiply, x20, VariableDeclarationStatement(), final, T, mx20, m, 0, 2, multiply, x00, add, m, 1, 2, multiply, x10, add, m, 2, 2, multiply, x20, VariableDeclarationStatement(), final, T, mx01, m, 0, 0, multiply, x01, add, m, 1, 0, multiply, x11, add, m, 2, 0, multiply, x21, VariableDeclarationStatement(), final, T, mx11, m, 0, 1, multiply, x01, add, m, 1, 1, multiply, x11, add, m, 2, 1, multiply, x21, VariableDeclarationStatement(), final, T, mx21, m, 0, 2, multiply, x01, add, m, 1, 2, multiply, x11, add, m, 2, 2, multiply, x21, VariableDeclarationStatement(), final, T, mx02, m, 0, 0, multiply, x02, add, m, 1, 0, multiply, x12, add, m, 2, 0, multiply, x22, VariableDeclarationStatement(), final, T, mx12, m, 0, 1, multiply, x02, add, m, 1, 1, multiply, x12, add, m, 2, 1, multiply, x22, VariableDeclarationStatement(), final, T, mx22, m, 0, 2, multiply, x02, add, m, 1, 2, multiply, x12, add, m, 2, 2, multiply, x22, ExpressionStatement(), o, 0, 0, x00, subtract, x00, multiply, mx00, add, x01, multiply, mx10, add, x02, multiply, mx20, subtract, m, 0, 0, multiply, 0.5, ExpressionStatement(), o, 0, 1, x01, subtract, x00, multiply, mx01, add, x01, multiply, mx11, add, x02, multiply, mx21, subtract, m, 0, 1, multiply, 0.5, ExpressionStatement(), o, 0, 2, x02, subtract, x00, multiply, mx02, add, x01, multiply, mx12, add, x02, multiply, mx22, subtract, m, 0, 2, multiply, 0.5, ExpressionStatement(), o, 1, 0, x10, subtract, x10, multiply, mx00, add, x11, multiply, mx10, add, x12, multiply, mx20, subtract, m, 1, 0, multiply, 0.5, ExpressionStatement(), o, 1, 1, x11, subtract, x10, multiply, mx01, add, x11, multiply, mx11, add, x12, multiply, mx21, subtract, m, 1, 1, multiply, 0.5, ExpressionStatement(), o, 1, 2, x12, subtract, x10, multiply, mx02, add, x11, multiply, mx12, add, x12, multiply, mx22, subtract, m, 1, 2, multiply, 0.5, ExpressionStatement(), o, 2, 0, x20, subtract, x20, multiply, mx00, add, x21, multiply, mx10, add, x22, multiply, mx20, subtract, m, 2, 0, multiply, 0.5, ExpressionStatement(), o, 2, 1, x21, subtract, x20, multiply, mx01, add, x21, multiply, mx11, add, x22, multiply, mx21, subtract, m, 2, 1, multiply, 0.5, ExpressionStatement(), o, 2, 2, x22, subtract, x20, multiply, mx02, add, x21, multiply, mx12, add, x22, multiply, mx22, subtract, m, 2, 2, multiply, 0.5, VariableDeclarationStatement(), final, double, corr00, o, 0, 0, getReal, m, 0, 0, getReal, VariableDeclarationStatement(), final, double, corr01, o, 0, 1, getReal, m, 0, 1, getReal, VariableDeclarationStatement(), final, double, corr02, o, 0, 2, getReal, m, 0, 2, getReal, VariableDeclarationStatement(), final, double, corr10, o, 1, 0, getReal, m, 1, 0, getReal, VariableDeclarationStatement(), final, double, corr11, o, 1, 1, getReal, m, 1, 1, getReal, VariableDeclarationStatement(), final, double, corr12, o, 1, 2, getReal, m, 1, 2, getReal, VariableDeclarationStatement(), final, double, corr20, o, 2, 0, getReal, m, 2, 0, getReal, VariableDeclarationStatement(), final, double, corr21, o, 2, 1, getReal, m, 2, 1, getReal, VariableDeclarationStatement(), final, double, corr22, o, 2, 2, getReal, m, 2, 2, getReal, ExpressionStatement(), fn1, corr00, corr00, corr01, corr01, corr02, corr02, corr10, corr10, corr11, corr11, corr12, corr12, corr20, corr20, corr21, corr21, corr22, corr22, IfStatement(if), FastMath, abs, fn1, fn, threshold, ReturnStatement(return), o, ExpressionStatement(), x00, o, 0, 0, ExpressionStatement(), x01, o, 0, 1, ExpressionStatement(), x02, o, 0, 2, ExpressionStatement(), x10, o, 1, 0, ExpressionStatement(), x11, o, 1, 1, ExpressionStatement(), x12, o, 1, 2, ExpressionStatement(), x20, o, 2, 0, ExpressionStatement(), x21, o, 2, 1, ExpressionStatement(), x22, o, 2, 2, ExpressionStatement(), fn, fn1, ThrowStatement(throw), new, NotARotationMatrixException, LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX, i, 1]
org.apache.commons.math4.geometry.euclidean.threed:FieldRotation:distance:FieldRotation<T>+FieldRotation<T>#[ReturnStatement(return), r1, composeInverseInternal, r2, getAngle]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getX:null#[ReturnStatement(return), x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getY:null#[ReturnStatement(return), y]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getZ:null#[ReturnStatement(return), z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toArray:null#[VariableDeclarationStatement(), final, T, array, MathArrays, buildArray, x, getField, 3, ExpressionStatement(), array, 0, x, ExpressionStatement(), array, 1, y, ExpressionStatement(), array, 2, z, ReturnStatement(return), array]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toVector3D:null#[ReturnStatement(return), new, Vector3D, x, getReal, y, getReal, z, getReal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNorm1:null#[ReturnStatement(return), x, abs, add, y, abs, add, z, abs]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNorm:null#[ReturnStatement(return), x, multiply, x, add, y, multiply, y, add, z, multiply, z, sqrt]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNormSq:null#[ReturnStatement(return), x, multiply, x, add, y, multiply, y, add, z, multiply, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getNormInf:null#[VariableDeclarationStatement(), final, T, xAbs, x, abs, VariableDeclarationStatement(), final, T, yAbs, y, abs, VariableDeclarationStatement(), final, T, zAbs, z, abs, IfStatement(if), xAbs, getReal, yAbs, getReal, IfStatement(if), yAbs, getReal, zAbs, getReal, ReturnStatement(return), zAbs, ReturnStatement(return), yAbs, IfStatement(if), xAbs, getReal, zAbs, getReal, ReturnStatement(return), zAbs, ReturnStatement(return), xAbs]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getAlpha:null#[ReturnStatement(return), y, atan2, x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:getDelta:null#[ReturnStatement(return), z, divide, getNorm, asin]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, x, add, v.x, y, add, v.y, z, add, v.z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:Vector3D#[ReturnStatement(return), new, FieldVector3D, T, x, add, v, getX, y, add, v, getY, z, add, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:T+FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, x, getField, getOne, this, factor, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:T+Vector3D#[ReturnStatement(return), new, FieldVector3D, T, x, add, factor, multiply, v, getX, y, add, factor, multiply, v, getY, z, add, factor, multiply, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:double+FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, 1.0, this, factor, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:add:double+Vector3D#[ReturnStatement(return), new, FieldVector3D, T, x, add, factor, v, getX, y, add, factor, v, getY, z, add, factor, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, x, subtract, v.x, y, subtract, v.y, z, subtract, v.z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:Vector3D#[ReturnStatement(return), new, FieldVector3D, T, x, subtract, v, getX, y, subtract, v, getY, z, subtract, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:T+FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, x, getField, getOne, this, factor, negate, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:T+Vector3D#[ReturnStatement(return), new, FieldVector3D, T, x, subtract, factor, multiply, v, getX, y, subtract, factor, multiply, v, getY, z, subtract, factor, multiply, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:double+FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, 1.0, this, factor, v]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:subtract:double+Vector3D#[ReturnStatement(return), new, FieldVector3D, T, x, subtract, factor, v, getX, y, subtract, factor, v, getY, z, subtract, factor, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:normalize:null#[VariableDeclarationStatement(), final, T, s, getNorm, IfStatement(if), s, getReal, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ReturnStatement(return), scalarMultiply, s, reciprocal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:orthogonal:null#[VariableDeclarationStatement(), final, double, threshold, 0.6, getNorm, getReal, IfStatement(if), threshold, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, IfStatement(if), FastMath, abs, x, getReal, threshold, VariableDeclarationStatement(), final, T, inverse, y, multiply, y, add, z, multiply, z, sqrt, reciprocal, ReturnStatement(return), new, FieldVector3D, T, inverse, getField, getZero, inverse, multiply, z, inverse, multiply, y, negate, IfStatement(if), FastMath, abs, y, getReal, threshold, VariableDeclarationStatement(), final, T, inverse, x, multiply, x, add, z, multiply, z, sqrt, reciprocal, ReturnStatement(return), new, FieldVector3D, T, inverse, multiply, z, negate, inverse, getField, getZero, inverse, multiply, x, VariableDeclarationStatement(), final, T, inverse, x, multiply, x, add, y, multiply, y, sqrt, reciprocal, ReturnStatement(return), new, FieldVector3D, T, inverse, multiply, y, inverse, multiply, x, negate, inverse, getField, getZero]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:angle:FieldVector3D<T>+FieldVector3D<T>#[VariableDeclarationStatement(), final, T, normProduct, v1, getNorm, multiply, v2, getNorm, IfStatement(if), normProduct, getReal, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, VariableDeclarationStatement(), final, T, dot, dotProduct, v1, v2, VariableDeclarationStatement(), final, double, threshold, normProduct, getReal, 0.9999, IfStatement(if), dot, getReal, threshold, dot, getReal, threshold, VariableDeclarationStatement(), FieldVector3D, T, v3, crossProduct, v1, v2, IfStatement(if), dot, getReal, 0, ReturnStatement(return), v3, getNorm, divide, normProduct, asin, ReturnStatement(return), v3, getNorm, divide, normProduct, asin, subtract, FastMath.PI, negate, ReturnStatement(return), dot, divide, normProduct, acos]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:angle:FieldVector3D<T>+Vector3D#[VariableDeclarationStatement(), final, T, normProduct, v1, getNorm, multiply, v2, getNorm, IfStatement(if), normProduct, getReal, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, VariableDeclarationStatement(), final, T, dot, dotProduct, v1, v2, VariableDeclarationStatement(), final, double, threshold, normProduct, getReal, 0.9999, IfStatement(if), dot, getReal, threshold, dot, getReal, threshold, VariableDeclarationStatement(), FieldVector3D, T, v3, crossProduct, v1, v2, IfStatement(if), dot, getReal, 0, ReturnStatement(return), v3, getNorm, divide, normProduct, asin, ReturnStatement(return), v3, getNorm, divide, normProduct, asin, subtract, FastMath.PI, negate, ReturnStatement(return), dot, divide, normProduct, acos]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:angle:Vector3D+FieldVector3D<T>#[ReturnStatement(return), angle, v2, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:negate:null#[ReturnStatement(return), new, FieldVector3D, T, x, negate, y, negate, z, negate]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:scalarMultiply:T#[ReturnStatement(return), new, FieldVector3D, T, x, multiply, a, y, multiply, a, z, multiply, a]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:scalarMultiply:double#[ReturnStatement(return), new, FieldVector3D, T, x, multiply, a, y, multiply, a, z, multiply, a]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:isNaN:null#[ReturnStatement(return), Double, isNaN, x, getReal, Double, isNaN, y, getReal, Double, isNaN, z, getReal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:isInfinite:null#[ReturnStatement(return), isNaN, Double, isInfinite, x, getReal, Double, isInfinite, y, getReal, Double, isInfinite, z, getReal]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, FieldVector3D, VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, FieldVector3D, T, rhs, FieldVector3D, T, other, IfStatement(if), rhs, isNaN, ReturnStatement(return), this, isNaN, ReturnStatement(return), x, equals, rhs.x, y, equals, rhs.y, z, equals, rhs.z, ReturnStatement(return), false]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 409, ReturnStatement(return), 311, 107, x, hashCode, 83, y, hashCode, z, hashCode]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:FieldVector3D<T>#[ReturnStatement(return), x, linearCombination, x, v.x, y, v.y, z, v.z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:Vector3D#[ReturnStatement(return), x, linearCombination, v, getX, x, v, getY, y, v, getZ, z]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, x, linearCombination, y, v.z, z, negate, v.y, y, linearCombination, z, v.x, x, negate, v.z, z, linearCombination, x, v.y, y, negate, v.x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:Vector3D#[ReturnStatement(return), new, FieldVector3D, T, x, linearCombination, v, getZ, y, v, getY, z, y, linearCombination, v, getX, z, v, getZ, x, z, linearCombination, v, getY, x, v, getX, y]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:FieldVector3D<T>#[VariableDeclarationStatement(), final, T, dx, v.x, subtract, x, abs, VariableDeclarationStatement(), final, T, dy, v.y, subtract, y, abs, VariableDeclarationStatement(), final, T, dz, v.z, subtract, z, abs, ReturnStatement(return), dx, add, dy, add, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:Vector3D#[VariableDeclarationStatement(), final, T, dx, x, subtract, v, getX, abs, VariableDeclarationStatement(), final, T, dy, y, subtract, v, getY, abs, VariableDeclarationStatement(), final, T, dz, z, subtract, v, getZ, abs, ReturnStatement(return), dx, add, dy, add, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:FieldVector3D<T>#[VariableDeclarationStatement(), final, T, dx, v.x, subtract, x, VariableDeclarationStatement(), final, T, dy, v.y, subtract, y, VariableDeclarationStatement(), final, T, dz, v.z, subtract, z, ReturnStatement(return), dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz, sqrt]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:Vector3D#[VariableDeclarationStatement(), final, T, dx, x, subtract, v, getX, VariableDeclarationStatement(), final, T, dy, y, subtract, v, getY, VariableDeclarationStatement(), final, T, dz, z, subtract, v, getZ, ReturnStatement(return), dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz, sqrt]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:FieldVector3D<T>#[VariableDeclarationStatement(), final, T, dx, v.x, subtract, x, abs, VariableDeclarationStatement(), final, T, dy, v.y, subtract, y, abs, VariableDeclarationStatement(), final, T, dz, v.z, subtract, z, abs, IfStatement(if), dx, getReal, dy, getReal, IfStatement(if), dy, getReal, dz, getReal, ReturnStatement(return), dz, ReturnStatement(return), dy, IfStatement(if), dx, getReal, dz, getReal, ReturnStatement(return), dz, ReturnStatement(return), dx]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:Vector3D#[VariableDeclarationStatement(), final, T, dx, x, subtract, v, getX, abs, VariableDeclarationStatement(), final, T, dy, y, subtract, v, getY, abs, VariableDeclarationStatement(), final, T, dz, z, subtract, v, getZ, abs, IfStatement(if), dx, getReal, dy, getReal, IfStatement(if), dy, getReal, dz, getReal, ReturnStatement(return), dz, ReturnStatement(return), dy, IfStatement(if), dx, getReal, dz, getReal, ReturnStatement(return), dz, ReturnStatement(return), dx]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:FieldVector3D<T>#[VariableDeclarationStatement(), final, T, dx, v.x, subtract, x, VariableDeclarationStatement(), final, T, dy, v.y, subtract, y, VariableDeclarationStatement(), final, T, dz, v.z, subtract, z, ReturnStatement(return), dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:Vector3D#[VariableDeclarationStatement(), final, T, dx, x, subtract, v, getX, VariableDeclarationStatement(), final, T, dy, y, subtract, v, getY, VariableDeclarationStatement(), final, T, dz, z, subtract, v, getZ, ReturnStatement(return), dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:FieldVector3D<T>+FieldVector3D<T>#[ReturnStatement(return), v1, dotProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:FieldVector3D<T>+Vector3D#[ReturnStatement(return), v1, dotProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:dotProduct:Vector3D+FieldVector3D<T>#[ReturnStatement(return), v2, dotProduct, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:FieldVector3D<T>+FieldVector3D<T>#[ReturnStatement(return), v1, crossProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:FieldVector3D<T>+Vector3D#[ReturnStatement(return), v1, crossProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:crossProduct:Vector3D+FieldVector3D<T>#[ReturnStatement(return), new, FieldVector3D, T, v2.x, linearCombination, v1, getY, v2.z, v1, getZ, v2.y, v2.y, linearCombination, v1, getZ, v2.x, v1, getX, v2.z, v2.z, linearCombination, v1, getX, v2.y, v1, getY, v2.x]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:FieldVector3D<T>+FieldVector3D<T>#[ReturnStatement(return), v1, distance1, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:FieldVector3D<T>+Vector3D#[ReturnStatement(return), v1, distance1, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance1:Vector3D+FieldVector3D<T>#[ReturnStatement(return), v2, distance1, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:FieldVector3D<T>+FieldVector3D<T>#[ReturnStatement(return), v1, distance, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:FieldVector3D<T>+Vector3D#[ReturnStatement(return), v1, distance, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distance:Vector3D+FieldVector3D<T>#[ReturnStatement(return), v2, distance, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:FieldVector3D<T>+FieldVector3D<T>#[ReturnStatement(return), v1, distanceInf, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:FieldVector3D<T>+Vector3D#[ReturnStatement(return), v1, distanceInf, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceInf:Vector3D+FieldVector3D<T>#[ReturnStatement(return), v2, distanceInf, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:FieldVector3D<T>+FieldVector3D<T>#[ReturnStatement(return), v1, distanceSq, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:FieldVector3D<T>+Vector3D#[ReturnStatement(return), v1, distanceSq, v2]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:distanceSq:Vector3D+FieldVector3D<T>#[ReturnStatement(return), v2, distanceSq, v1]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toString:null#[ReturnStatement(return), Vector3DFormat, getInstance, format, toVector3D]
org.apache.commons.math4.geometry.euclidean.threed:FieldVector3D:toString:NumberFormat#[ReturnStatement(return), new, Vector3DFormat, format, format, toVector3D]
org.apache.commons.math4.geometry.euclidean.threed:Line:reset:Vector3D+Vector3D#[VariableDeclarationStatement(), final, Vector3D, delta, p2, subtract, p1, VariableDeclarationStatement(), final, double, norm2, delta, getNormSq, IfStatement(if), norm2, 0.0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.ZERO_NORM, ExpressionStatement(), this, direction, new, Vector3D, 1.0, FastMath, sqrt, norm2, delta, ExpressionStatement(), zero, new, Vector3D, 1.0, p1, p1, dotProduct, delta, norm2, delta]
org.apache.commons.math4.geometry.euclidean.threed:Line:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Line:revert:null#[VariableDeclarationStatement(), final, Line, reverted, new, Line, this, ExpressionStatement(), reverted.direction, reverted.direction, negate, ReturnStatement(return), reverted]
org.apache.commons.math4.geometry.euclidean.threed:Line:getDirection:null#[ReturnStatement(return), direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:getOrigin:null#[ReturnStatement(return), zero]
org.apache.commons.math4.geometry.euclidean.threed:Line:getAbscissa:Vector3D#[ReturnStatement(return), point, subtract, zero, dotProduct, direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:pointAt:double#[ReturnStatement(return), new, Vector3D, 1.0, zero, abscissa, direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSubSpace:Vector<Euclidean3D>#[ReturnStatement(return), toSubSpace, Point, Euclidean3D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSpace:Vector<Euclidean1D>#[ReturnStatement(return), toSpace, Point, Euclidean1D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSubSpace:Point<Euclidean3D>#[ReturnStatement(return), new, Vector1D, getAbscissa, Vector3D, point]
org.apache.commons.math4.geometry.euclidean.threed:Line:toSpace:Point<Euclidean1D>#[ReturnStatement(return), pointAt, Vector1D, point, getX]
org.apache.commons.math4.geometry.euclidean.threed:Line:isSimilarTo:Line#[VariableDeclarationStatement(), final, double, angle, Vector3D, angle, direction, line.direction, ReturnStatement(return), angle, tolerance, angle, FastMath.PI, tolerance, contains, line.zero]
org.apache.commons.math4.geometry.euclidean.threed:Line:contains:Vector3D#[ReturnStatement(return), distance, p, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Line:distance:Vector3D#[VariableDeclarationStatement(), final, Vector3D, d, p, subtract, zero, VariableDeclarationStatement(), final, Vector3D, n, new, Vector3D, 1.0, d, d, dotProduct, direction, direction, ReturnStatement(return), n, getNorm]
org.apache.commons.math4.geometry.euclidean.threed:Line:distance:Line#[VariableDeclarationStatement(), final, Vector3D, normal, Vector3D, crossProduct, direction, line.direction, VariableDeclarationStatement(), final, double, n, normal, getNorm, IfStatement(if), n, Precision.SAFE_MIN, ReturnStatement(return), distance, line.zero, VariableDeclarationStatement(), final, double, offset, line.zero, subtract, zero, dotProduct, normal, n, ReturnStatement(return), FastMath, abs, offset]
org.apache.commons.math4.geometry.euclidean.threed:Line:closestPoint:Line#[VariableDeclarationStatement(), final, double, cos, direction, dotProduct, line.direction, VariableDeclarationStatement(), final, double, n, 1, cos, cos, IfStatement(if), n, Precision.EPSILON, ReturnStatement(return), zero, VariableDeclarationStatement(), final, Vector3D, delta0, line.zero, subtract, zero, VariableDeclarationStatement(), final, double, a, delta0, dotProduct, direction, VariableDeclarationStatement(), final, double, b, delta0, dotProduct, line.direction, ReturnStatement(return), new, Vector3D, 1, zero, a, b, cos, n, direction]
org.apache.commons.math4.geometry.euclidean.threed:Line:intersection:Line#[VariableDeclarationStatement(), final, Vector3D, closest, closestPoint, line, ReturnStatement(return), line, contains, closest, closest, null]
org.apache.commons.math4.geometry.euclidean.threed:Line:wholeLine:null#[ReturnStatement(return), new, SubLine, this, new, IntervalsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:OutlineExtractor:getOutline:PolyhedronsSet#[VariableDeclarationStatement(), final, BoundaryProjector, projector, new, BoundaryProjector, polyhedronsSet, getTolerance, ExpressionStatement(), polyhedronsSet, getTree, true, visit, projector, VariableDeclarationStatement(), final, PolygonsSet, projected, projector, getProjected, VariableDeclarationStatement(), final, Vector2D, outline, projected, getVertices, ForStatement(for), int, i, 0, i, outline.length, i, VariableDeclarationStatement(), final, Vector2D, rawLoop, outline, i, VariableDeclarationStatement(), int, end, rawLoop.length, VariableDeclarationStatement(), int, j, 0, WhileStatement(while), j, end, IfStatement(if), pointIsBetween, rawLoop, end, j, ForStatement(for), int, k, j, k, end, 1, k, ExpressionStatement(), rawLoop, k, rawLoop, k, 1, ExpressionStatement(), end, ExpressionStatement(), j, IfStatement(if), end, rawLoop.length, ExpressionStatement(), outline, i, Vector2D, end, ExpressionStatement(), System, arraycopy, rawLoop, 0, outline, i, 0, end, ReturnStatement(return), outline]
org.apache.commons.math4.geometry.euclidean.threed:OutlineExtractor:pointIsBetween:Vector2D[]+int+int#[VariableDeclarationStatement(), final, Vector2D, previous, loop, i, n, 1, n, VariableDeclarationStatement(), final, Vector2D, current, loop, i, VariableDeclarationStatement(), final, Vector2D, next, loop, i, 1, n, VariableDeclarationStatement(), final, double, dx1, current, getX, previous, getX, VariableDeclarationStatement(), final, double, dy1, current, getY, previous, getY, VariableDeclarationStatement(), final, double, dx2, next, getX, current, getX, VariableDeclarationStatement(), final, double, dy2, next, getY, current, getY, VariableDeclarationStatement(), final, double, cross, dx1, dy2, dx2, dy1, VariableDeclarationStatement(), final, double, dot, dx1, dx2, dy1, dy2, VariableDeclarationStatement(), final, double, d1d2, FastMath, sqrt, dx1, dx1, dy1, dy1, dx2, dx2, dy2, dy2, ReturnStatement(return), FastMath, abs, cross, 1.0e-6, d1d2, dot, 0.0]
org.apache.commons.math4.geometry.euclidean.threed:Plane:copySelf:null#[ReturnStatement(return), new, Plane, this]
org.apache.commons.math4.geometry.euclidean.threed:Plane:reset:Vector3D+Vector3D#[ExpressionStatement(), setNormal, normal, ExpressionStatement(), originOffset, p, dotProduct, w, ExpressionStatement(), setFrame]
org.apache.commons.math4.geometry.euclidean.threed:Plane:reset:Plane#[ExpressionStatement(), originOffset, original.originOffset, ExpressionStatement(), origin, original.origin, ExpressionStatement(), u, original.u, ExpressionStatement(), v, original.v, ExpressionStatement(), w, original.w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:setNormal:Vector3D#[VariableDeclarationStatement(), final, double, norm, normal, getNorm, IfStatement(if), norm, 1.0e-10, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, ExpressionStatement(), w, new, Vector3D, 1.0, norm, normal]
org.apache.commons.math4.geometry.euclidean.threed:Plane:setFrame:null#[ExpressionStatement(), origin, new, Vector3D, originOffset, w, ExpressionStatement(), u, w, orthogonal, ExpressionStatement(), v, Vector3D, crossProduct, w, u]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOrigin:null#[ReturnStatement(return), origin]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getNormal:null#[ReturnStatement(return), w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getU:null#[ReturnStatement(return), u]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getV:null#[ReturnStatement(return), v]
org.apache.commons.math4.geometry.euclidean.threed:Plane:project:Point<Euclidean3D>#[ReturnStatement(return), toSpace, toSubSpace, point]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:revertSelf:null#[VariableDeclarationStatement(), final, Vector3D, tmp, u, ExpressionStatement(), u, v, ExpressionStatement(), v, tmp, ExpressionStatement(), w, w, negate, ExpressionStatement(), originOffset, originOffset]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSubSpace:Vector<Euclidean3D>#[ReturnStatement(return), toSubSpace, Point, Euclidean3D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSpace:Vector<Euclidean2D>#[ReturnStatement(return), toSpace, Point, Euclidean2D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSubSpace:Point<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, p3D, Vector3D, point, ReturnStatement(return), new, Vector2D, p3D, dotProduct, u, p3D, dotProduct, v]
org.apache.commons.math4.geometry.euclidean.threed:Plane:toSpace:Point<Euclidean2D>#[VariableDeclarationStatement(), final, Vector2D, p2D, Vector2D, point, ReturnStatement(return), new, Vector3D, p2D, getX, u, p2D, getY, v, originOffset, w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getPointAt:Vector2D+double#[ReturnStatement(return), new, Vector3D, inPlane, getX, u, inPlane, getY, v, offset, originOffset, w]
org.apache.commons.math4.geometry.euclidean.threed:Plane:isSimilarTo:Plane#[VariableDeclarationStatement(), final, double, angle, Vector3D, angle, w, plane.w, ReturnStatement(return), angle, 1.0e-10, FastMath, abs, originOffset, plane.originOffset, tolerance, angle, FastMath.PI, 1.0e-10, FastMath, abs, originOffset, plane.originOffset, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:rotate:Vector3D+Rotation#[VariableDeclarationStatement(), final, Vector3D, delta, origin, subtract, center, VariableDeclarationStatement(), final, Plane, plane, new, Plane, center, add, rotation, applyTo, delta, rotation, applyTo, w, tolerance, ExpressionStatement(), plane.u, rotation, applyTo, u, ExpressionStatement(), plane.v, rotation, applyTo, v, ReturnStatement(return), plane]
org.apache.commons.math4.geometry.euclidean.threed:Plane:translate:Vector3D#[VariableDeclarationStatement(), final, Plane, plane, new, Plane, origin, add, translation, w, tolerance, ExpressionStatement(), plane.u, u, ExpressionStatement(), plane.v, v, ReturnStatement(return), plane]
org.apache.commons.math4.geometry.euclidean.threed:Plane:intersection:Line#[VariableDeclarationStatement(), final, Vector3D, direction, line, getDirection, VariableDeclarationStatement(), final, double, dot, w, dotProduct, direction, IfStatement(if), FastMath, abs, dot, 1.0e-10, ReturnStatement(return), null, VariableDeclarationStatement(), final, Vector3D, point, line, toSpace, Point, Euclidean1D, Vector1D.ZERO, VariableDeclarationStatement(), final, double, k, originOffset, w, dotProduct, point, dot, ReturnStatement(return), new, Vector3D, 1.0, point, k, direction]
org.apache.commons.math4.geometry.euclidean.threed:Plane:intersection:Plane#[VariableDeclarationStatement(), final, Vector3D, direction, Vector3D, crossProduct, w, other.w, IfStatement(if), direction, getNorm, tolerance, ReturnStatement(return), null, VariableDeclarationStatement(), final, Vector3D, point, intersection, this, other, new, Plane, direction, tolerance, ReturnStatement(return), new, Line, point, point, add, direction, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:intersection:Plane+Plane+Plane#[VariableDeclarationStatement(), final, double, a1, plane1.w, getX, VariableDeclarationStatement(), final, double, b1, plane1.w, getY, VariableDeclarationStatement(), final, double, c1, plane1.w, getZ, VariableDeclarationStatement(), final, double, d1, plane1.originOffset, VariableDeclarationStatement(), final, double, a2, plane2.w, getX, VariableDeclarationStatement(), final, double, b2, plane2.w, getY, VariableDeclarationStatement(), final, double, c2, plane2.w, getZ, VariableDeclarationStatement(), final, double, d2, plane2.originOffset, VariableDeclarationStatement(), final, double, a3, plane3.w, getX, VariableDeclarationStatement(), final, double, b3, plane3.w, getY, VariableDeclarationStatement(), final, double, c3, plane3.w, getZ, VariableDeclarationStatement(), final, double, d3, plane3.originOffset, VariableDeclarationStatement(), final, double, a23, b2, c3, b3, c2, VariableDeclarationStatement(), final, double, b23, c2, a3, c3, a2, VariableDeclarationStatement(), final, double, c23, a2, b3, a3, b2, VariableDeclarationStatement(), final, double, determinant, a1, a23, b1, b23, c1, c23, IfStatement(if), FastMath, abs, determinant, 1.0e-10, ReturnStatement(return), null, VariableDeclarationStatement(), final, double, r, 1.0, determinant, ReturnStatement(return), new, Vector3D, a23, d1, c1, b3, c3, b1, d2, c2, b1, c1, b2, d3, r, b23, d1, c3, a1, c1, a3, d2, c1, a2, c2, a1, d3, r, c23, d1, b1, a3, b3, a1, d2, b2, a1, b1, a2, d3, r]
org.apache.commons.math4.geometry.euclidean.threed:Plane:wholeHyperplane:null#[ReturnStatement(return), new, SubPlane, this, new, PolygonsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:wholeSpace:null#[ReturnStatement(return), new, PolyhedronsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:contains:Vector3D#[ReturnStatement(return), FastMath, abs, getOffset, p, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOffset:Plane#[ReturnStatement(return), originOffset, sameOrientationAs, plane, plane.originOffset, plane.originOffset]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOffset:Vector<Euclidean3D>#[ReturnStatement(return), getOffset, Point, Euclidean3D, vector]
org.apache.commons.math4.geometry.euclidean.threed:Plane:getOffset:Point<Euclidean3D>#[ReturnStatement(return), Vector3D, point, dotProduct, w, originOffset]
org.apache.commons.math4.geometry.euclidean.threed:Plane:sameOrientationAs:Hyperplane<Euclidean3D>#[ReturnStatement(return), Plane, other, w, dotProduct, w, 0.0]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:buildBoundary:double+double+double+double+double+double+double#[IfStatement(if), xMin, xMax, tolerance, yMin, yMax, tolerance, zMin, zMax, tolerance, ReturnStatement(return), new, BSPTree, Euclidean3D, Boolean.FALSE, VariableDeclarationStatement(), final, Plane, pxMin, new, Plane, new, Vector3D, xMin, 0, 0, Vector3D.MINUS_I, tolerance, VariableDeclarationStatement(), final, Plane, pxMax, new, Plane, new, Vector3D, xMax, 0, 0, Vector3D.PLUS_I, tolerance, VariableDeclarationStatement(), final, Plane, pyMin, new, Plane, new, Vector3D, 0, yMin, 0, Vector3D.MINUS_J, tolerance, VariableDeclarationStatement(), final, Plane, pyMax, new, Plane, new, Vector3D, 0, yMax, 0, Vector3D.PLUS_J, tolerance, VariableDeclarationStatement(), final, Plane, pzMin, new, Plane, new, Vector3D, 0, 0, zMin, Vector3D.MINUS_K, tolerance, VariableDeclarationStatement(), final, Plane, pzMax, new, Plane, new, Vector3D, 0, 0, zMax, Vector3D.PLUS_K, tolerance, VariableDeclarationStatement(), final, Region, Euclidean3D, boundary, new, RegionFactory, Euclidean3D, buildConvex, pxMin, pxMax, pyMin, pyMax, pzMin, pzMax, ReturnStatement(return), boundary, getTree, false]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:buildBoundary:List<Vector3D>+List<int[]>+double#[ForStatement(for), int, i, 0, i, vertices, size, 1, i, VariableDeclarationStatement(), final, Vector3D, vi, vertices, get, i, ForStatement(for), int, j, i, 1, j, vertices, size, j, IfStatement(if), Vector3D, distance, vi, vertices, get, j, tolerance, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.CLOSE_VERTICES, vi, getX, vi, getY, vi, getZ, VariableDeclarationStatement(), final, int, references, findReferences, vertices, facets, VariableDeclarationStatement(), final, int, successors, successors, vertices, facets, references, ForStatement(for), int, vA, 0, vA, vertices, size, vA, EnhancedForStatement(for), final, int, vB, successors, vA, IfStatement(if), vB, 0, VariableDeclarationStatement(), boolean, found, false, EnhancedForStatement(for), final, int, v, successors, vB, ExpressionStatement(), found, found, v, vA, IfStatement(if), found, VariableDeclarationStatement(), final, Vector3D, start, vertices, get, vA, VariableDeclarationStatement(), final, Vector3D, end, vertices, get, vB, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.EDGE_CONNECTED_TO_ONE_FACET, start, getX, start, getY, start, getZ, end, getX, end, getY, end, getZ, VariableDeclarationStatement(), final, List, SubHyperplane, Euclidean3D, boundary, new, ArrayList, SubHyperplane, Euclidean3D, EnhancedForStatement(for), final, int, facet, facets, VariableDeclarationStatement(), Plane, plane, new, Plane, vertices, get, facet, 0, vertices, get, facet, 1, vertices, get, facet, 2, tolerance, VariableDeclarationStatement(), final, Vector2D, two2Points, Vector2D, facet.length, ForStatement(for), int, i, 0, i, facet.length, i, VariableDeclarationStatement(), final, Vector3D, v, vertices, get, facet, i, IfStatement(if), plane, contains, v, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.OUT_OF_PLANE, v, getX, v, getY, v, getZ, ExpressionStatement(), two2Points, i, plane, toSubSpace, v, ExpressionStatement(), boundary, add, new, SubPlane, plane, new, PolygonsSet, tolerance, two2Points, ReturnStatement(return), boundary]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:findReferences:List<Vector3D>+List<int[]>#[VariableDeclarationStatement(), final, int, nbFacets, int, vertices, size, VariableDeclarationStatement(), int, maxFacets, 0, EnhancedForStatement(for), final, int, facet, facets, IfStatement(if), facet.length, 3, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.WRONG_NUMBER_OF_POINTS, 3, facet.length, true, EnhancedForStatement(for), final, int, index, facet, ExpressionStatement(), maxFacets, FastMath, max, maxFacets, nbFacets, index, VariableDeclarationStatement(), final, int, references, int, vertices, size, maxFacets, EnhancedForStatement(for), int, r, references, ExpressionStatement(), Arrays, fill, r, 1, ForStatement(for), int, f, 0, f, facets, size, f, EnhancedForStatement(for), final, int, v, facets, get, f, VariableDeclarationStatement(), int, k, 0, WhileStatement(while), k, maxFacets, references, v, k, 0, ExpressionStatement(), k, ExpressionStatement(), references, v, k, f, ReturnStatement(return), references]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:successors:List<Vector3D>+List<int[]>+int[][]#[VariableDeclarationStatement(), final, int, successors, int, vertices, size, references, 0, length, EnhancedForStatement(for), final, int, s, successors, ExpressionStatement(), Arrays, fill, s, 1, ForStatement(for), int, v, 0, v, vertices, size, v, ForStatement(for), int, k, 0, k, successors, v, length, references, v, k, 0, k, VariableDeclarationStatement(), final, int, facet, facets, get, references, v, k, VariableDeclarationStatement(), int, i, 0, WhileStatement(while), i, facet.length, facet, i, v, ExpressionStatement(), i, ExpressionStatement(), successors, v, k, facet, i, 1, facet.length, ForStatement(for), int, l, 0, l, k, l, IfStatement(if), successors, v, l, successors, v, k, VariableDeclarationStatement(), final, Vector3D, start, vertices, get, v, VariableDeclarationStatement(), final, Vector3D, end, vertices, get, successors, v, k, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.FACET_ORIENTATION_MISMATCH, start, getX, start, getY, start, getZ, end, getX, end, getY, end, getZ, ReturnStatement(return), successors]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:buildNew:BSPTree<Euclidean3D>#[ReturnStatement(return), new, PolyhedronsSet, tree, getTolerance]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:computeGeometricalProperties:null#[ExpressionStatement(), getTree, true, visit, new, FacetsContributionVisitor, IfStatement(if), getSize, 0, ExpressionStatement(), setSize, Double.POSITIVE_INFINITY, ExpressionStatement(), setBarycenter, Point, Euclidean3D, Vector3D.NaN, ExpressionStatement(), setSize, getSize, 3.0, ExpressionStatement(), setBarycenter, Point, Euclidean3D, new, Vector3D, 1.0, 4, getSize, Vector3D, getBarycenter]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:firstIntersection:Vector3D+Line#[ReturnStatement(return), recurseFirstIntersection, getTree, true, point, line]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:recurseFirstIntersection:BSPTree<Euclidean3D>+Vector3D+Line#[VariableDeclarationStatement(), final, SubHyperplane, Euclidean3D, cut, node, getCut, IfStatement(if), cut, null, ReturnStatement(return), null, VariableDeclarationStatement(), final, BSPTree, Euclidean3D, minus, node, getMinus, VariableDeclarationStatement(), final, BSPTree, Euclidean3D, plus, node, getPlus, VariableDeclarationStatement(), final, Plane, plane, Plane, cut, getHyperplane, VariableDeclarationStatement(), final, double, offset, plane, getOffset, Point, Euclidean3D, point, VariableDeclarationStatement(), final, boolean, in, FastMath, abs, offset, getTolerance, VariableDeclarationStatement(), final, BSPTree, Euclidean3D, near, VariableDeclarationStatement(), final, BSPTree, Euclidean3D, far, IfStatement(if), offset, 0, ExpressionStatement(), near, minus, ExpressionStatement(), far, plus, ExpressionStatement(), near, plus, ExpressionStatement(), far, minus, IfStatement(if), in, VariableDeclarationStatement(), final, SubHyperplane, Euclidean3D, facet, boundaryFacet, point, node, IfStatement(if), facet, null, ReturnStatement(return), facet, VariableDeclarationStatement(), final, SubHyperplane, Euclidean3D, crossed, recurseFirstIntersection, near, point, line, IfStatement(if), crossed, null, ReturnStatement(return), crossed, IfStatement(if), in, VariableDeclarationStatement(), final, Vector3D, hit3D, plane, intersection, line, IfStatement(if), hit3D, null, line, getAbscissa, hit3D, line, getAbscissa, point, VariableDeclarationStatement(), final, SubHyperplane, Euclidean3D, facet, boundaryFacet, hit3D, node, IfStatement(if), facet, null, ReturnStatement(return), facet, ReturnStatement(return), recurseFirstIntersection, far, point, line]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:boundaryFacet:Vector3D+BSPTree<Euclidean3D>#[VariableDeclarationStatement(), final, Vector2D, point2D, Plane, node, getCut, getHyperplane, toSubSpace, Point, Euclidean3D, point, VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, BoundaryAttribute, Euclidean3D, attribute, BoundaryAttribute, Euclidean3D, node, getAttribute, IfStatement(if), attribute, getPlusOutside, null, SubPlane, attribute, getPlusOutside, getRemainingRegion, checkPoint, point2D, Location.INSIDE, ReturnStatement(return), attribute, getPlusOutside, IfStatement(if), attribute, getPlusInside, null, SubPlane, attribute, getPlusInside, getRemainingRegion, checkPoint, point2D, Location.INSIDE, ReturnStatement(return), attribute, getPlusInside, ReturnStatement(return), null]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:rotate:Vector3D+Rotation#[ReturnStatement(return), PolyhedronsSet, applyTransform, new, RotationTransform, center, rotation]
org.apache.commons.math4.geometry.euclidean.threed:PolyhedronsSet:translate:Vector3D#[ReturnStatement(return), PolyhedronsSet, applyTransform, new, TranslationTransform, translation]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:mat2quat:double[][]#[VariableDeclarationStatement(), final, double, quat, double, 4, VariableDeclarationStatement(), double, s, ort, 0, 0, ort, 1, 1, ort, 2, 2, IfStatement(if), s, 0.19, ExpressionStatement(), quat, 0, 0.5, FastMath, sqrt, s, 1.0, VariableDeclarationStatement(), double, inv, 0.25, quat, 0, ExpressionStatement(), quat, 1, inv, ort, 1, 2, ort, 2, 1, ExpressionStatement(), quat, 2, inv, ort, 2, 0, ort, 0, 2, ExpressionStatement(), quat, 3, inv, ort, 0, 1, ort, 1, 0, ExpressionStatement(), s, ort, 0, 0, ort, 1, 1, ort, 2, 2, IfStatement(if), s, 0.19, ExpressionStatement(), quat, 1, 0.5, FastMath, sqrt, s, 1.0, VariableDeclarationStatement(), double, inv, 0.25, quat, 1, ExpressionStatement(), quat, 0, inv, ort, 1, 2, ort, 2, 1, ExpressionStatement(), quat, 2, inv, ort, 0, 1, ort, 1, 0, ExpressionStatement(), quat, 3, inv, ort, 0, 2, ort, 2, 0, ExpressionStatement(), s, ort, 1, 1, ort, 0, 0, ort, 2, 2, IfStatement(if), s, 0.19, ExpressionStatement(), quat, 2, 0.5, FastMath, sqrt, s, 1.0, VariableDeclarationStatement(), double, inv, 0.25, quat, 2, ExpressionStatement(), quat, 0, inv, ort, 2, 0, ort, 0, 2, ExpressionStatement(), quat, 1, inv, ort, 0, 1, ort, 1, 0, ExpressionStatement(), quat, 3, inv, ort, 2, 1, ort, 1, 2, ExpressionStatement(), s, ort, 2, 2, ort, 0, 0, ort, 1, 1, ExpressionStatement(), quat, 3, 0.5, FastMath, sqrt, s, 1.0, VariableDeclarationStatement(), double, inv, 0.25, quat, 3, ExpressionStatement(), quat, 0, inv, ort, 0, 1, ort, 1, 0, ExpressionStatement(), quat, 1, inv, ort, 0, 2, ort, 2, 0, ExpressionStatement(), quat, 2, inv, ort, 2, 1, ort, 1, 2, ReturnStatement(return), quat]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:revert:null#[ReturnStatement(return), new, Rotation, q0, q1, q2, q3, false]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ0:null#[ReturnStatement(return), q0]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ1:null#[ReturnStatement(return), q1]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ2:null#[ReturnStatement(return), q2]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getQ3:null#[ReturnStatement(return), q3]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAxis:null#[ReturnStatement(return), getAxis, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAxis:RotationConvention#[VariableDeclarationStatement(), final, double, squaredSine, q1, q1, q2, q2, q3, q3, IfStatement(if), squaredSine, 0, ReturnStatement(return), convention, RotationConvention.VECTOR_OPERATOR, Vector3D.PLUS_I, Vector3D.MINUS_I, VariableDeclarationStatement(), final, double, sgn, convention, RotationConvention.VECTOR_OPERATOR, 1, 1, IfStatement(if), q0, 0, VariableDeclarationStatement(), final, double, inverse, sgn, FastMath, sqrt, squaredSine, ReturnStatement(return), new, Vector3D, q1, inverse, q2, inverse, q3, inverse, VariableDeclarationStatement(), final, double, inverse, sgn, FastMath, sqrt, squaredSine, ReturnStatement(return), new, Vector3D, q1, inverse, q2, inverse, q3, inverse]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAngle:null#[IfStatement(if), q0, 0.1, q0, 0.1, ReturnStatement(return), 2, FastMath, asin, FastMath, sqrt, q1, q1, q2, q2, q3, q3, IfStatement(if), q0, 0, ReturnStatement(return), 2, FastMath, acos, q0, ReturnStatement(return), 2, FastMath, acos, q0]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAngles:RotationOrder#[ReturnStatement(return), getAngles, order, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getAngles:RotationOrder+RotationConvention#[IfStatement(if), convention, RotationConvention.VECTOR_OPERATOR, IfStatement(if), order, RotationOrder.XYZ, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v1, getY, v1, getZ, FastMath, asin, v2, getZ, FastMath, atan2, v2, getY, v2, getX, IfStatement(if), order, RotationOrder.XZY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v1, getZ, v1, getY, FastMath, asin, v2, getY, FastMath, atan2, v2, getZ, v2, getX, IfStatement(if), order, RotationOrder.YXZ, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v1, getX, v1, getZ, FastMath, asin, v2, getZ, FastMath, atan2, v2, getX, v2, getY, IfStatement(if), order, RotationOrder.YZX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v1, getZ, v1, getX, FastMath, asin, v2, getX, FastMath, atan2, v2, getZ, v2, getY, IfStatement(if), order, RotationOrder.ZXY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v1, getX, v1, getY, FastMath, asin, v2, getY, FastMath, atan2, v2, getX, v2, getZ, IfStatement(if), order, RotationOrder.ZYX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v1, getY, v1, getX, FastMath, asin, v2, getX, FastMath, atan2, v2, getY, v2, getZ, IfStatement(if), order, RotationOrder.XYX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v1, getY, v1, getZ, FastMath, acos, v2, getX, FastMath, atan2, v2, getY, v2, getZ, IfStatement(if), order, RotationOrder.XZX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v1, getZ, v1, getY, FastMath, acos, v2, getX, FastMath, atan2, v2, getZ, v2, getY, IfStatement(if), order, RotationOrder.YXY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v1, getX, v1, getZ, FastMath, acos, v2, getY, FastMath, atan2, v2, getX, v2, getZ, IfStatement(if), order, RotationOrder.YZY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v1, getZ, v1, getX, FastMath, acos, v2, getY, FastMath, atan2, v2, getZ, v2, getX, IfStatement(if), order, RotationOrder.ZXZ, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v1, getX, v1, getY, FastMath, acos, v2, getZ, FastMath, atan2, v2, getX, v2, getY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v1, getY, v1, getX, FastMath, acos, v2, getZ, FastMath, atan2, v2, getY, v2, getX, IfStatement(if), order, RotationOrder.XYZ, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v2, getY, v2, getZ, FastMath, asin, v2, getX, FastMath, atan2, v1, getY, v1, getX, IfStatement(if), order, RotationOrder.XZY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v2, getZ, v2, getY, FastMath, asin, v2, getX, FastMath, atan2, v1, getZ, v1, getX, IfStatement(if), order, RotationOrder.YXZ, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v2, getX, v2, getZ, FastMath, asin, v2, getY, FastMath, atan2, v1, getX, v1, getY, IfStatement(if), order, RotationOrder.YZX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v2, getZ, v2, getX, FastMath, asin, v2, getY, FastMath, atan2, v1, getZ, v1, getY, IfStatement(if), order, RotationOrder.ZXY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v2, getX, v2, getY, FastMath, asin, v2, getZ, FastMath, atan2, v1, getX, v1, getZ, IfStatement(if), order, RotationOrder.ZYX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, true, ReturnStatement(return), double, FastMath, atan2, v2, getY, v2, getX, FastMath, asin, v2, getZ, FastMath, atan2, v1, getY, v1, getZ, IfStatement(if), order, RotationOrder.XYX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v2, getY, v2, getZ, FastMath, acos, v2, getX, FastMath, atan2, v1, getY, v1, getZ, IfStatement(if), order, RotationOrder.XZX, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_I, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_I, IfStatement(if), v2, getX, 0.9999999999, v2, getX, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v2, getZ, v2, getY, FastMath, acos, v2, getX, FastMath, atan2, v1, getZ, v1, getY, IfStatement(if), order, RotationOrder.YXY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v2, getX, v2, getZ, FastMath, acos, v2, getY, FastMath, atan2, v1, getX, v1, getZ, IfStatement(if), order, RotationOrder.YZY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_J, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_J, IfStatement(if), v2, getY, 0.9999999999, v2, getY, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v2, getZ, v2, getX, FastMath, acos, v2, getY, FastMath, atan2, v1, getZ, v1, getX, IfStatement(if), order, RotationOrder.ZXZ, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v2, getX, v2, getY, FastMath, acos, v2, getZ, FastMath, atan2, v1, getX, v1, getY, VariableDeclarationStatement(), Vector3D, v1, applyTo, Vector3D.PLUS_K, VariableDeclarationStatement(), Vector3D, v2, applyInverseTo, Vector3D.PLUS_K, IfStatement(if), v2, getZ, 0.9999999999, v2, getZ, 0.9999999999, ThrowStatement(throw), new, CardanEulerSingularityException, false, ReturnStatement(return), double, FastMath, atan2, v2, getY, v2, getX, FastMath, acos, v2, getZ, FastMath, atan2, v1, getY, v1, getX]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:getMatrix:null#[VariableDeclarationStatement(), double, q0q0, q0, q0, VariableDeclarationStatement(), double, q0q1, q0, q1, VariableDeclarationStatement(), double, q0q2, q0, q2, VariableDeclarationStatement(), double, q0q3, q0, q3, VariableDeclarationStatement(), double, q1q1, q1, q1, VariableDeclarationStatement(), double, q1q2, q1, q2, VariableDeclarationStatement(), double, q1q3, q1, q3, VariableDeclarationStatement(), double, q2q2, q2, q2, VariableDeclarationStatement(), double, q2q3, q2, q3, VariableDeclarationStatement(), double, q3q3, q3, q3, VariableDeclarationStatement(), double, m, double, 3, ExpressionStatement(), m, 0, double, 3, ExpressionStatement(), m, 1, double, 3, ExpressionStatement(), m, 2, double, 3, ExpressionStatement(), m, 0, 0, 2.0, q0q0, q1q1, 1.0, ExpressionStatement(), m, 1, 0, 2.0, q1q2, q0q3, ExpressionStatement(), m, 2, 0, 2.0, q1q3, q0q2, ExpressionStatement(), m, 0, 1, 2.0, q1q2, q0q3, ExpressionStatement(), m, 1, 1, 2.0, q0q0, q2q2, 1.0, ExpressionStatement(), m, 2, 1, 2.0, q2q3, q0q1, ExpressionStatement(), m, 0, 2, 2.0, q1q3, q0q2, ExpressionStatement(), m, 1, 2, 2.0, q2q3, q0q1, ExpressionStatement(), m, 2, 2, 2.0, q0q0, q3q3, 1.0, ReturnStatement(return), m]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyTo:Vector3D#[VariableDeclarationStatement(), double, x, u, getX, VariableDeclarationStatement(), double, y, u, getY, VariableDeclarationStatement(), double, z, u, getZ, VariableDeclarationStatement(), double, s, q1, x, q2, y, q3, z, ReturnStatement(return), new, Vector3D, 2, q0, x, q0, q2, z, q3, y, s, q1, x, 2, q0, y, q0, q3, x, q1, z, s, q2, y, 2, q0, z, q0, q1, y, q2, x, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyTo:double[]+double[]#[VariableDeclarationStatement(), final, double, x, in, 0, VariableDeclarationStatement(), final, double, y, in, 1, VariableDeclarationStatement(), final, double, z, in, 2, VariableDeclarationStatement(), final, double, s, q1, x, q2, y, q3, z, ExpressionStatement(), out, 0, 2, q0, x, q0, q2, z, q3, y, s, q1, x, ExpressionStatement(), out, 1, 2, q0, y, q0, q3, x, q1, z, s, q2, y, ExpressionStatement(), out, 2, 2, q0, z, q0, q1, y, q2, x, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyInverseTo:Vector3D#[VariableDeclarationStatement(), double, x, u, getX, VariableDeclarationStatement(), double, y, u, getY, VariableDeclarationStatement(), double, z, u, getZ, VariableDeclarationStatement(), double, s, q1, x, q2, y, q3, z, VariableDeclarationStatement(), double, m0, q0, ReturnStatement(return), new, Vector3D, 2, m0, x, m0, q2, z, q3, y, s, q1, x, 2, m0, y, m0, q3, x, q1, z, s, q2, y, 2, m0, z, m0, q1, y, q2, x, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyInverseTo:double[]+double[]#[VariableDeclarationStatement(), final, double, x, in, 0, VariableDeclarationStatement(), final, double, y, in, 1, VariableDeclarationStatement(), final, double, z, in, 2, VariableDeclarationStatement(), final, double, s, q1, x, q2, y, q3, z, VariableDeclarationStatement(), final, double, m0, q0, ExpressionStatement(), out, 0, 2, m0, x, m0, q2, z, q3, y, s, q1, x, ExpressionStatement(), out, 1, 2, m0, y, m0, q3, x, q1, z, s, q2, y, ExpressionStatement(), out, 2, 2, m0, z, m0, q1, y, q2, x, s, q3, z]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyTo:Rotation#[ReturnStatement(return), compose, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:compose:Rotation+RotationConvention#[ReturnStatement(return), convention, RotationConvention.VECTOR_OPERATOR, composeInternal, r, r, composeInternal, this]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:composeInternal:Rotation#[ReturnStatement(return), new, Rotation, r.q0, q0, r.q1, q1, r.q2, q2, r.q3, q3, r.q1, q0, r.q0, q1, r.q2, q3, r.q3, q2, r.q2, q0, r.q0, q2, r.q3, q1, r.q1, q3, r.q3, q0, r.q0, q3, r.q1, q2, r.q2, q1, false]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:applyInverseTo:Rotation#[ReturnStatement(return), composeInverse, r, RotationConvention.VECTOR_OPERATOR]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:composeInverse:Rotation+RotationConvention#[ReturnStatement(return), convention, RotationConvention.VECTOR_OPERATOR, composeInverseInternal, r, r, composeInternal, revert]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:composeInverseInternal:Rotation#[ReturnStatement(return), new, Rotation, r.q0, q0, r.q1, q1, r.q2, q2, r.q3, q3, r.q1, q0, r.q0, q1, r.q2, q3, r.q3, q2, r.q2, q0, r.q0, q2, r.q3, q1, r.q1, q3, r.q3, q0, r.q0, q3, r.q1, q2, r.q2, q1, false]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:orthogonalizeMatrix:double[][]+double#[VariableDeclarationStatement(), double, m0, m, 0, VariableDeclarationStatement(), double, m1, m, 1, VariableDeclarationStatement(), double, m2, m, 2, VariableDeclarationStatement(), double, x00, m0, 0, VariableDeclarationStatement(), double, x01, m0, 1, VariableDeclarationStatement(), double, x02, m0, 2, VariableDeclarationStatement(), double, x10, m1, 0, VariableDeclarationStatement(), double, x11, m1, 1, VariableDeclarationStatement(), double, x12, m1, 2, VariableDeclarationStatement(), double, x20, m2, 0, VariableDeclarationStatement(), double, x21, m2, 1, VariableDeclarationStatement(), double, x22, m2, 2, VariableDeclarationStatement(), double, fn, 0, VariableDeclarationStatement(), double, fn1, VariableDeclarationStatement(), double, o, double, 3, 3, VariableDeclarationStatement(), double, o0, o, 0, VariableDeclarationStatement(), double, o1, o, 1, VariableDeclarationStatement(), double, o2, o, 2, VariableDeclarationStatement(), int, i, 0, WhileStatement(while), i, 11, VariableDeclarationStatement(), double, mx00, m0, 0, x00, m1, 0, x10, m2, 0, x20, VariableDeclarationStatement(), double, mx10, m0, 1, x00, m1, 1, x10, m2, 1, x20, VariableDeclarationStatement(), double, mx20, m0, 2, x00, m1, 2, x10, m2, 2, x20, VariableDeclarationStatement(), double, mx01, m0, 0, x01, m1, 0, x11, m2, 0, x21, VariableDeclarationStatement(), double, mx11, m0, 1, x01, m1, 1, x11, m2, 1, x21, VariableDeclarationStatement(), double, mx21, m0, 2, x01, m1, 2, x11, m2, 2, x21, VariableDeclarationStatement(), double, mx02, m0, 0, x02, m1, 0, x12, m2, 0, x22, VariableDeclarationStatement(), double, mx12, m0, 1, x02, m1, 1, x12, m2, 1, x22, VariableDeclarationStatement(), double, mx22, m0, 2, x02, m1, 2, x12, m2, 2, x22, ExpressionStatement(), o0, 0, x00, 0.5, x00, mx00, x01, mx10, x02, mx20, m0, 0, ExpressionStatement(), o0, 1, x01, 0.5, x00, mx01, x01, mx11, x02, mx21, m0, 1, ExpressionStatement(), o0, 2, x02, 0.5, x00, mx02, x01, mx12, x02, mx22, m0, 2, ExpressionStatement(), o1, 0, x10, 0.5, x10, mx00, x11, mx10, x12, mx20, m1, 0, ExpressionStatement(), o1, 1, x11, 0.5, x10, mx01, x11, mx11, x12, mx21, m1, 1, ExpressionStatement(), o1, 2, x12, 0.5, x10, mx02, x11, mx12, x12, mx22, m1, 2, ExpressionStatement(), o2, 0, x20, 0.5, x20, mx00, x21, mx10, x22, mx20, m2, 0, ExpressionStatement(), o2, 1, x21, 0.5, x20, mx01, x21, mx11, x22, mx21, m2, 1, ExpressionStatement(), o2, 2, x22, 0.5, x20, mx02, x21, mx12, x22, mx22, m2, 2, VariableDeclarationStatement(), double, corr00, o0, 0, m0, 0, VariableDeclarationStatement(), double, corr01, o0, 1, m0, 1, VariableDeclarationStatement(), double, corr02, o0, 2, m0, 2, VariableDeclarationStatement(), double, corr10, o1, 0, m1, 0, VariableDeclarationStatement(), double, corr11, o1, 1, m1, 1, VariableDeclarationStatement(), double, corr12, o1, 2, m1, 2, VariableDeclarationStatement(), double, corr20, o2, 0, m2, 0, VariableDeclarationStatement(), double, corr21, o2, 1, m2, 1, VariableDeclarationStatement(), double, corr22, o2, 2, m2, 2, ExpressionStatement(), fn1, corr00, corr00, corr01, corr01, corr02, corr02, corr10, corr10, corr11, corr11, corr12, corr12, corr20, corr20, corr21, corr21, corr22, corr22, IfStatement(if), FastMath, abs, fn1, fn, threshold, ReturnStatement(return), o, ExpressionStatement(), x00, o0, 0, ExpressionStatement(), x01, o0, 1, ExpressionStatement(), x02, o0, 2, ExpressionStatement(), x10, o1, 0, ExpressionStatement(), x11, o1, 1, ExpressionStatement(), x12, o1, 2, ExpressionStatement(), x20, o2, 0, ExpressionStatement(), x21, o2, 1, ExpressionStatement(), x22, o2, 2, ExpressionStatement(), fn, fn1, ThrowStatement(throw), new, NotARotationMatrixException, LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX, i, 1]
org.apache.commons.math4.geometry.euclidean.threed:Rotation:distance:Rotation+Rotation#[ReturnStatement(return), r1, composeInverseInternal, r2, getAngle]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:toString:null#[ReturnStatement(return), name]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:getA1:null#[ReturnStatement(return), a1]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:getA2:null#[ReturnStatement(return), a2]
org.apache.commons.math4.geometry.euclidean.threed:RotationOrder:getA3:null#[ReturnStatement(return), a3]
org.apache.commons.math4.geometry.euclidean.threed:Segment:getStart:null#[ReturnStatement(return), start]
org.apache.commons.math4.geometry.euclidean.threed:Segment:getEnd:null#[ReturnStatement(return), end]
org.apache.commons.math4.geometry.euclidean.threed:Segment:getLine:null#[ReturnStatement(return), line]
org.apache.commons.math4.geometry.euclidean.threed:SphereGenerator:ballOnSupport:List<Vector3D>#[IfStatement(if), support, size, 1, ReturnStatement(return), new, EnclosingBall, Euclidean3D, Vector3D, Vector3D.ZERO, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, Vector3D, vA, support, get, 0, IfStatement(if), support, size, 2, ReturnStatement(return), new, EnclosingBall, Euclidean3D, Vector3D, vA, 0, vA, VariableDeclarationStatement(), final, Vector3D, vB, support, get, 1, IfStatement(if), support, size, 3, ReturnStatement(return), new, EnclosingBall, Euclidean3D, Vector3D, new, Vector3D, 0.5, vA, 0.5, vB, 0.5, vA, distance, vB, vA, vB, VariableDeclarationStatement(), final, Vector3D, vC, support, get, 2, IfStatement(if), support, size, 4, VariableDeclarationStatement(), final, Plane, p, new, Plane, vA, vB, vC, 1.0e-10, vA, getNorm1, vB, getNorm1, vC, getNorm1, VariableDeclarationStatement(), final, EnclosingBall, Euclidean2D, Vector2D, disk, new, DiskGenerator, ballOnSupport, Arrays, asList, p, toSubSpace, vA, p, toSubSpace, vB, p, toSubSpace, vC, ReturnStatement(return), new, EnclosingBall, Euclidean3D, Vector3D, p, toSpace, disk, getCenter, disk, getRadius, vA, vB, vC, VariableDeclarationStatement(), final, Vector3D, vD, support, get, 3, VariableDeclarationStatement(), final, BigFraction, c2, BigFraction, new, BigFraction, vA, getX, new, BigFraction, vB, getX, new, BigFraction, vC, getX, new, BigFraction, vD, getX, VariableDeclarationStatement(), final, BigFraction, c3, BigFraction, new, BigFraction, vA, getY, new, BigFraction, vB, getY, new, BigFraction, vC, getY, new, BigFraction, vD, getY, VariableDeclarationStatement(), final, BigFraction, c4, BigFraction, new, BigFraction, vA, getZ, new, BigFraction, vB, getZ, new, BigFraction, vC, getZ, new, BigFraction, vD, getZ, VariableDeclarationStatement(), final, BigFraction, c1, BigFraction, c2, 0, multiply, c2, 0, add, c3, 0, multiply, c3, 0, add, c4, 0, multiply, c4, 0, c2, 1, multiply, c2, 1, add, c3, 1, multiply, c3, 1, add, c4, 1, multiply, c4, 1, c2, 2, multiply, c2, 2, add, c3, 2, multiply, c3, 2, add, c4, 2, multiply, c4, 2, c2, 3, multiply, c2, 3, add, c3, 3, multiply, c3, 3, add, c4, 3, multiply, c4, 3, VariableDeclarationStatement(), final, BigFraction, twoM11, minor, c2, c3, c4, multiply, 2, VariableDeclarationStatement(), final, BigFraction, m12, minor, c1, c3, c4, VariableDeclarationStatement(), final, BigFraction, m13, minor, c1, c2, c4, VariableDeclarationStatement(), final, BigFraction, m14, minor, c1, c2, c3, VariableDeclarationStatement(), final, BigFraction, centerX, m12, divide, twoM11, VariableDeclarationStatement(), final, BigFraction, centerY, m13, divide, twoM11, negate, VariableDeclarationStatement(), final, BigFraction, centerZ, m14, divide, twoM11, VariableDeclarationStatement(), final, BigFraction, dx, c2, 0, subtract, centerX, VariableDeclarationStatement(), final, BigFraction, dy, c3, 0, subtract, centerY, VariableDeclarationStatement(), final, BigFraction, dz, c4, 0, subtract, centerZ, VariableDeclarationStatement(), final, BigFraction, r2, dx, multiply, dx, add, dy, multiply, dy, add, dz, multiply, dz, ReturnStatement(return), new, EnclosingBall, Euclidean3D, Vector3D, new, Vector3D, centerX, doubleValue, centerY, doubleValue, centerZ, doubleValue, FastMath, sqrt, r2, doubleValue, vA, vB, vC, vD]
org.apache.commons.math4.geometry.euclidean.threed:SphereGenerator:minor:BigFraction[]+BigFraction[]+BigFraction[]#[ReturnStatement(return), c2, 0, multiply, c3, 1, multiply, c1, 2, subtract, c1, 3, add, c2, 0, multiply, c3, 2, multiply, c1, 3, subtract, c1, 1, add, c2, 0, multiply, c3, 3, multiply, c1, 1, subtract, c1, 2, add, c2, 1, multiply, c3, 0, multiply, c1, 3, subtract, c1, 2, add, c2, 1, multiply, c3, 2, multiply, c1, 0, subtract, c1, 3, add, c2, 1, multiply, c3, 3, multiply, c1, 2, subtract, c1, 0, add, c2, 2, multiply, c3, 0, multiply, c1, 1, subtract, c1, 3, add, c2, 2, multiply, c3, 1, multiply, c1, 3, subtract, c1, 0, add, c2, 2, multiply, c3, 3, multiply, c1, 0, subtract, c1, 1, add, c2, 3, multiply, c3, 0, multiply, c1, 2, subtract, c1, 1, add, c2, 3, multiply, c3, 1, multiply, c1, 0, subtract, c1, 2, add, c2, 3, multiply, c3, 2, multiply, c1, 1, subtract, c1, 0]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getCartesian:null#[ReturnStatement(return), v]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getR:null#[ReturnStatement(return), r]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getTheta:null#[ReturnStatement(return), theta]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:getPhi:null#[ReturnStatement(return), phi]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:toCartesianGradient:double[]#[ExpressionStatement(), computeJacobian, ReturnStatement(return), double, sGradient, 0, jacobian, 0, 0, sGradient, 1, jacobian, 1, 0, sGradient, 2, jacobian, 2, 0, sGradient, 0, jacobian, 0, 1, sGradient, 1, jacobian, 1, 1, sGradient, 2, jacobian, 2, 1, sGradient, 0, jacobian, 0, 2, sGradient, 2, jacobian, 2, 2]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:toCartesianHessian:double[][]+double[]#[ExpressionStatement(), computeJacobian, ExpressionStatement(), computeHessians, VariableDeclarationStatement(), final, double, hj, double, 3, 3, VariableDeclarationStatement(), final, double, cHessian, double, 3, 3, ExpressionStatement(), hj, 0, 0, sHessian, 0, 0, jacobian, 0, 0, sHessian, 1, 0, jacobian, 1, 0, sHessian, 2, 0, jacobian, 2, 0, ExpressionStatement(), hj, 0, 1, sHessian, 0, 0, jacobian, 0, 1, sHessian, 1, 0, jacobian, 1, 1, sHessian, 2, 0, jacobian, 2, 1, ExpressionStatement(), hj, 0, 2, sHessian, 0, 0, jacobian, 0, 2, sHessian, 2, 0, jacobian, 2, 2, ExpressionStatement(), hj, 1, 0, sHessian, 1, 0, jacobian, 0, 0, sHessian, 1, 1, jacobian, 1, 0, sHessian, 2, 1, jacobian, 2, 0, ExpressionStatement(), hj, 1, 1, sHessian, 1, 0, jacobian, 0, 1, sHessian, 1, 1, jacobian, 1, 1, sHessian, 2, 1, jacobian, 2, 1, ExpressionStatement(), hj, 2, 0, sHessian, 2, 0, jacobian, 0, 0, sHessian, 2, 1, jacobian, 1, 0, sHessian, 2, 2, jacobian, 2, 0, ExpressionStatement(), hj, 2, 1, sHessian, 2, 0, jacobian, 0, 1, sHessian, 2, 1, jacobian, 1, 1, sHessian, 2, 2, jacobian, 2, 1, ExpressionStatement(), hj, 2, 2, sHessian, 2, 0, jacobian, 0, 2, sHessian, 2, 2, jacobian, 2, 2, ExpressionStatement(), cHessian, 0, 0, jacobian, 0, 0, hj, 0, 0, jacobian, 1, 0, hj, 1, 0, jacobian, 2, 0, hj, 2, 0, ExpressionStatement(), cHessian, 1, 0, jacobian, 0, 1, hj, 0, 0, jacobian, 1, 1, hj, 1, 0, jacobian, 2, 1, hj, 2, 0, ExpressionStatement(), cHessian, 2, 0, jacobian, 0, 2, hj, 0, 0, jacobian, 2, 2, hj, 2, 0, ExpressionStatement(), cHessian, 1, 1, jacobian, 0, 1, hj, 0, 1, jacobian, 1, 1, hj, 1, 1, jacobian, 2, 1, hj, 2, 1, ExpressionStatement(), cHessian, 2, 1, jacobian, 0, 2, hj, 0, 1, jacobian, 2, 2, hj, 2, 1, ExpressionStatement(), cHessian, 2, 2, jacobian, 0, 2, hj, 0, 2, jacobian, 2, 2, hj, 2, 2, ExpressionStatement(), cHessian, 0, 0, sGradient, 0, rHessian, 0, 0, sGradient, 1, thetaHessian, 0, 0, sGradient, 2, phiHessian, 0, 0, ExpressionStatement(), cHessian, 1, 0, sGradient, 0, rHessian, 1, 0, sGradient, 1, thetaHessian, 1, 0, sGradient, 2, phiHessian, 1, 0, ExpressionStatement(), cHessian, 2, 0, sGradient, 0, rHessian, 2, 0, sGradient, 2, phiHessian, 2, 0, ExpressionStatement(), cHessian, 1, 1, sGradient, 0, rHessian, 1, 1, sGradient, 1, thetaHessian, 1, 1, sGradient, 2, phiHessian, 1, 1, ExpressionStatement(), cHessian, 2, 1, sGradient, 0, rHessian, 2, 1, sGradient, 2, phiHessian, 2, 1, ExpressionStatement(), cHessian, 2, 2, sGradient, 0, rHessian, 2, 2, sGradient, 2, phiHessian, 2, 2, ExpressionStatement(), cHessian, 0, 1, cHessian, 1, 0, ExpressionStatement(), cHessian, 0, 2, cHessian, 2, 0, ExpressionStatement(), cHessian, 1, 2, cHessian, 2, 1, ReturnStatement(return), cHessian]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:computeJacobian:null#[IfStatement(if), jacobian, null, VariableDeclarationStatement(), final, double, x, v, getX, VariableDeclarationStatement(), final, double, y, v, getY, VariableDeclarationStatement(), final, double, z, v, getZ, VariableDeclarationStatement(), final, double, rho2, x, x, y, y, VariableDeclarationStatement(), final, double, rho, FastMath, sqrt, rho2, VariableDeclarationStatement(), final, double, r2, rho2, z, z, ExpressionStatement(), jacobian, double, 3, 3, ExpressionStatement(), jacobian, 0, 0, x, r, ExpressionStatement(), jacobian, 0, 1, y, r, ExpressionStatement(), jacobian, 0, 2, z, r, ExpressionStatement(), jacobian, 1, 0, y, rho2, ExpressionStatement(), jacobian, 1, 1, x, rho2, ExpressionStatement(), jacobian, 2, 0, x, z, rho, r2, ExpressionStatement(), jacobian, 2, 1, y, z, rho, r2, ExpressionStatement(), jacobian, 2, 2, rho, r2]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:computeHessians:null#[IfStatement(if), rHessian, null, VariableDeclarationStatement(), final, double, x, v, getX, VariableDeclarationStatement(), final, double, y, v, getY, VariableDeclarationStatement(), final, double, z, v, getZ, VariableDeclarationStatement(), final, double, x2, x, x, VariableDeclarationStatement(), final, double, y2, y, y, VariableDeclarationStatement(), final, double, z2, z, z, VariableDeclarationStatement(), final, double, rho2, x2, y2, VariableDeclarationStatement(), final, double, rho, FastMath, sqrt, rho2, VariableDeclarationStatement(), final, double, r2, rho2, z2, VariableDeclarationStatement(), final, double, xOr, x, r, VariableDeclarationStatement(), final, double, yOr, y, r, VariableDeclarationStatement(), final, double, zOr, z, r, VariableDeclarationStatement(), final, double, xOrho2, x, rho2, VariableDeclarationStatement(), final, double, yOrho2, y, rho2, VariableDeclarationStatement(), final, double, xOr3, xOr, r2, VariableDeclarationStatement(), final, double, yOr3, yOr, r2, VariableDeclarationStatement(), final, double, zOr3, zOr, r2, ExpressionStatement(), rHessian, double, 3, 3, ExpressionStatement(), rHessian, 0, 0, y, yOr3, z, zOr3, ExpressionStatement(), rHessian, 1, 0, x, yOr3, ExpressionStatement(), rHessian, 2, 0, z, xOr3, ExpressionStatement(), rHessian, 1, 1, x, xOr3, z, zOr3, ExpressionStatement(), rHessian, 2, 1, y, zOr3, ExpressionStatement(), rHessian, 2, 2, x, xOr3, y, yOr3, ExpressionStatement(), rHessian, 0, 1, rHessian, 1, 0, ExpressionStatement(), rHessian, 0, 2, rHessian, 2, 0, ExpressionStatement(), rHessian, 1, 2, rHessian, 2, 1, ExpressionStatement(), thetaHessian, double, 2, 2, ExpressionStatement(), thetaHessian, 0, 0, 2, xOrho2, yOrho2, ExpressionStatement(), thetaHessian, 1, 0, yOrho2, yOrho2, xOrho2, xOrho2, ExpressionStatement(), thetaHessian, 1, 1, 2, xOrho2, yOrho2, ExpressionStatement(), thetaHessian, 0, 1, thetaHessian, 1, 0, VariableDeclarationStatement(), final, double, rhor2, rho, r2, VariableDeclarationStatement(), final, double, rho2r2, rho, rhor2, VariableDeclarationStatement(), final, double, rhor4, rhor2, r2, VariableDeclarationStatement(), final, double, rho3r4, rhor4, rho2, VariableDeclarationStatement(), final, double, r2P2rho2, 3, rho2, z2, ExpressionStatement(), phiHessian, double, 3, 3, ExpressionStatement(), phiHessian, 0, 0, z, rho2r2, x2, r2P2rho2, rho3r4, ExpressionStatement(), phiHessian, 1, 0, x, y, z, r2P2rho2, rho3r4, ExpressionStatement(), phiHessian, 2, 0, x, rho2, z2, rhor4, ExpressionStatement(), phiHessian, 1, 1, z, rho2r2, y2, r2P2rho2, rho3r4, ExpressionStatement(), phiHessian, 2, 1, y, rho2, z2, rhor4, ExpressionStatement(), phiHessian, 2, 2, 2, rho, zOr3, r, ExpressionStatement(), phiHessian, 0, 1, phiHessian, 1, 0, ExpressionStatement(), phiHessian, 0, 2, phiHessian, 2, 0, ExpressionStatement(), phiHessian, 1, 2, phiHessian, 2, 1]
org.apache.commons.math4.geometry.euclidean.threed:SphericalCoordinates:writeReplace:null#[ReturnStatement(return), new, DataTransferObject, v, getX, v, getY, v, getZ]
org.apache.commons.math4.geometry.euclidean.threed:SubLine:getSegments:null#[VariableDeclarationStatement(), final, List, Interval, list, remainingRegion, asList, VariableDeclarationStatement(), final, List, Segment, segments, new, ArrayList, Segment, list, size, EnhancedForStatement(for), final, Interval, interval, list, VariableDeclarationStatement(), final, Vector3D, start, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getInf, VariableDeclarationStatement(), final, Vector3D, end, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getSup, ExpressionStatement(), segments, add, new, Segment, start, end, line, ReturnStatement(return), segments]
org.apache.commons.math4.geometry.euclidean.threed:SubLine:intersection:SubLine+boolean#[VariableDeclarationStatement(), Vector3D, v1D, line, intersection, subLine.line, IfStatement(if), v1D, null, ReturnStatement(return), null, VariableDeclarationStatement(), Location, loc1, remainingRegion, checkPoint, Point, Euclidean1D, line, toSubSpace, Point, Euclidean3D, v1D, VariableDeclarationStatement(), Location, loc2, subLine.remainingRegion, checkPoint, Point, Euclidean1D, subLine.line, toSubSpace, Point, Euclidean3D, v1D, IfStatement(if), includeEndPoints, ReturnStatement(return), loc1, Location.OUTSIDE, loc2, Location.OUTSIDE, v1D, null, ReturnStatement(return), loc1, Location.INSIDE, loc2, Location.INSIDE, v1D, null]
org.apache.commons.math4.geometry.euclidean.threed:SubLine:buildIntervalSet:Vector3D+Vector3D+double#[VariableDeclarationStatement(), final, Line, line, new, Line, start, end, tolerance, ReturnStatement(return), new, IntervalsSet, line, toSubSpace, Point, Euclidean3D, start, getX, line, toSubSpace, Point, Euclidean3D, end, getX, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:SubPlane:buildNew:Hyperplane<Euclidean3D>+Region<Euclidean2D>#[ReturnStatement(return), new, SubPlane, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.euclidean.threed:SubPlane:split:Hyperplane<Euclidean3D>#[VariableDeclarationStatement(), final, Plane, otherPlane, Plane, hyperplane, VariableDeclarationStatement(), final, Plane, thisPlane, Plane, getHyperplane, VariableDeclarationStatement(), final, Line, inter, otherPlane, intersection, thisPlane, VariableDeclarationStatement(), final, double, tolerance, thisPlane, getTolerance, IfStatement(if), inter, null, VariableDeclarationStatement(), final, double, global, otherPlane, getOffset, thisPlane, IfStatement(if), global, tolerance, ReturnStatement(return), new, SplitSubHyperplane, Euclidean3D, null, this, IfStatement(if), global, tolerance, ReturnStatement(return), new, SplitSubHyperplane, Euclidean3D, this, null, ReturnStatement(return), new, SplitSubHyperplane, Euclidean3D, null, null, VariableDeclarationStatement(), Vector2D, p, thisPlane, toSubSpace, Point, Euclidean3D, inter, toSpace, Point, Euclidean1D, Vector1D.ZERO, VariableDeclarationStatement(), Vector2D, q, thisPlane, toSubSpace, Point, Euclidean3D, inter, toSpace, Point, Euclidean1D, Vector1D.ONE, VariableDeclarationStatement(), Vector3D, crossP, Vector3D, crossProduct, inter, getDirection, thisPlane, getNormal, IfStatement(if), crossP, dotProduct, otherPlane, getNormal, 0, VariableDeclarationStatement(), final, Vector2D, tmp, p, ExpressionStatement(), p, q, ExpressionStatement(), q, tmp, VariableDeclarationStatement(), final, SubHyperplane, Euclidean2D, l2DMinus, new, org.apache.commons.math4.geometry.euclidean.twod.Line, p, q, tolerance, wholeHyperplane, VariableDeclarationStatement(), final, SubHyperplane, Euclidean2D, l2DPlus, new, org.apache.commons.math4.geometry.euclidean.twod.Line, q, p, tolerance, wholeHyperplane, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, splitTree, getRemainingRegion, getTree, false, split, l2DMinus, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, plusTree, getRemainingRegion, isEmpty, splitTree, getPlus, new, BSPTree, Euclidean2D, Boolean.FALSE, new, BSPTree, Euclidean2D, l2DPlus, new, BSPTree, Euclidean2D, Boolean.FALSE, splitTree, getPlus, null, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, minusTree, getRemainingRegion, isEmpty, splitTree, getMinus, new, BSPTree, Euclidean2D, Boolean.FALSE, new, BSPTree, Euclidean2D, l2DMinus, new, BSPTree, Euclidean2D, Boolean.FALSE, splitTree, getMinus, null, ReturnStatement(return), new, SplitSubHyperplane, Euclidean3D, new, SubPlane, thisPlane, copySelf, new, PolygonsSet, plusTree, tolerance, new, SubPlane, thisPlane, copySelf, new, PolygonsSet, minusTree, tolerance]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getX:null#[ReturnStatement(return), x]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getY:null#[ReturnStatement(return), y]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getZ:null#[ReturnStatement(return), z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:toArray:null#[ReturnStatement(return), double, x, y, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getSpace:null#[ReturnStatement(return), Euclidean3D, getInstance]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getZero:null#[ReturnStatement(return), ZERO]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNorm1:null#[ReturnStatement(return), FastMath, abs, x, FastMath, abs, y, FastMath, abs, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNorm:null#[ReturnStatement(return), FastMath, sqrt, x, x, y, y, z, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNormSq:null#[ReturnStatement(return), x, x, y, y, z, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getNormInf:null#[ReturnStatement(return), FastMath, max, FastMath, max, FastMath, abs, x, FastMath, abs, y, FastMath, abs, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getAlpha:null#[ReturnStatement(return), FastMath, atan2, y, x]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:getDelta:null#[ReturnStatement(return), FastMath, asin, z, getNorm]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:add:Vector<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, ReturnStatement(return), new, Vector3D, x, v3.x, y, v3.y, z, v3.z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:add:double+Vector<Euclidean3D>#[ReturnStatement(return), new, Vector3D, 1, this, factor, Vector3D, v]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:subtract:Vector<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, ReturnStatement(return), new, Vector3D, x, v3.x, y, v3.y, z, v3.z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:subtract:double+Vector<Euclidean3D>#[ReturnStatement(return), new, Vector3D, 1, this, factor, Vector3D, v]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:normalize:null#[VariableDeclarationStatement(), double, s, getNorm, IfStatement(if), s, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ReturnStatement(return), scalarMultiply, 1, s]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:orthogonal:null#[VariableDeclarationStatement(), double, threshold, 0.6, getNorm, IfStatement(if), threshold, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, IfStatement(if), FastMath, abs, x, threshold, VariableDeclarationStatement(), double, inverse, 1, FastMath, sqrt, y, y, z, z, ReturnStatement(return), new, Vector3D, 0, inverse, z, inverse, y, IfStatement(if), FastMath, abs, y, threshold, VariableDeclarationStatement(), double, inverse, 1, FastMath, sqrt, x, x, z, z, ReturnStatement(return), new, Vector3D, inverse, z, 0, inverse, x, VariableDeclarationStatement(), double, inverse, 1, FastMath, sqrt, x, x, y, y, ReturnStatement(return), new, Vector3D, inverse, y, inverse, x, 0]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:angle:Vector3D+Vector3D#[VariableDeclarationStatement(), double, normProduct, v1, getNorm, v2, getNorm, IfStatement(if), normProduct, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, VariableDeclarationStatement(), double, dot, v1, dotProduct, v2, VariableDeclarationStatement(), double, threshold, normProduct, 0.9999, IfStatement(if), dot, threshold, dot, threshold, VariableDeclarationStatement(), Vector3D, v3, crossProduct, v1, v2, IfStatement(if), dot, 0, ReturnStatement(return), FastMath, asin, v3, getNorm, normProduct, ReturnStatement(return), FastMath.PI, FastMath, asin, v3, getNorm, normProduct, ReturnStatement(return), FastMath, acos, dot, normProduct]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:negate:null#[ReturnStatement(return), new, Vector3D, x, y, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:scalarMultiply:double#[ReturnStatement(return), new, Vector3D, a, x, a, y, a, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:isNaN:null#[ReturnStatement(return), Double, isNaN, x, Double, isNaN, y, Double, isNaN, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:isInfinite:null#[ReturnStatement(return), isNaN, Double, isInfinite, x, Double, isInfinite, y, Double, isInfinite, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, Vector3D, VariableDeclarationStatement(), final, Vector3D, rhs, Vector3D, other, IfStatement(if), rhs, isNaN, ReturnStatement(return), this, isNaN, ReturnStatement(return), x, rhs.x, y, rhs.y, z, rhs.z, ReturnStatement(return), false]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 642, ReturnStatement(return), 643, 164, MathUtils, hash, x, 3, MathUtils, hash, y, MathUtils, hash, z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:dotProduct:Vector<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, ReturnStatement(return), MathArrays, linearCombination, x, v3.x, y, v3.y, z, v3.z]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:crossProduct:Vector<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, ReturnStatement(return), new, Vector3D, MathArrays, linearCombination, y, v3.z, z, v3.y, MathArrays, linearCombination, z, v3.x, x, v3.z, MathArrays, linearCombination, x, v3.y, y, v3.x]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance1:Vector<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, VariableDeclarationStatement(), final, double, dx, FastMath, abs, v3.x, x, VariableDeclarationStatement(), final, double, dy, FastMath, abs, v3.y, y, VariableDeclarationStatement(), final, double, dz, FastMath, abs, v3.z, z, ReturnStatement(return), dx, dy, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance:Point<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, VariableDeclarationStatement(), final, double, dx, v3.x, x, VariableDeclarationStatement(), final, double, dy, v3.y, y, VariableDeclarationStatement(), final, double, dz, v3.z, z, ReturnStatement(return), FastMath, sqrt, dx, dx, dy, dy, dz, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceInf:Vector<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, VariableDeclarationStatement(), final, double, dx, FastMath, abs, v3.x, x, VariableDeclarationStatement(), final, double, dy, FastMath, abs, v3.y, y, VariableDeclarationStatement(), final, double, dz, FastMath, abs, v3.z, z, ReturnStatement(return), FastMath, max, FastMath, max, dx, dy, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceSq:Vector<Euclidean3D>#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, v, VariableDeclarationStatement(), final, double, dx, v3.x, x, VariableDeclarationStatement(), final, double, dy, v3.y, y, VariableDeclarationStatement(), final, double, dz, v3.z, z, ReturnStatement(return), dx, dx, dy, dy, dz, dz]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:dotProduct:Vector3D+Vector3D#[ReturnStatement(return), v1, dotProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:crossProduct:Vector3D+Vector3D#[ReturnStatement(return), v1, crossProduct, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance1:Vector3D+Vector3D#[ReturnStatement(return), v1, distance1, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distance:Vector3D+Vector3D#[ReturnStatement(return), v1, distance, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceInf:Vector3D+Vector3D#[ReturnStatement(return), v1, distanceInf, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:distanceSq:Vector3D+Vector3D#[ReturnStatement(return), v1, distanceSq, v2]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:toString:null#[ReturnStatement(return), Vector3DFormat, getInstance, format, this]
org.apache.commons.math4.geometry.euclidean.threed:Vector3D:toString:NumberFormat#[ReturnStatement(return), new, Vector3DFormat, format, format, this]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:getInstance:null#[ReturnStatement(return), getInstance, Locale, getDefault]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:getInstance:Locale#[ReturnStatement(return), new, Vector3DFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:format:Vector<Euclidean3D>+StringBuffer+FieldPosition#[VariableDeclarationStatement(), final, Vector3D, v3, Vector3D, vector, ReturnStatement(return), format, toAppendTo, pos, v3, getX, v3, getY, v3, getZ]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:parse:String#[VariableDeclarationStatement(), ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), Vector3D, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, Vector3D, ReturnStatement(return), result]
org.apache.commons.math4.geometry.euclidean.threed:Vector3DFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), final, double, coordinates, parseCoordinates, 3, source, pos, IfStatement(if), coordinates, null, ReturnStatement(return), null, ReturnStatement(return), new, Vector3D, coordinates, 0, coordinates, 1, coordinates, 2]
org.apache.commons.math4.geometry.euclidean.twod:DiskGenerator:ballOnSupport:List<Vector2D>#[IfStatement(if), support, size, 1, ReturnStatement(return), new, EnclosingBall, Euclidean2D, Vector2D, Vector2D.ZERO, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, Vector2D, vA, support, get, 0, IfStatement(if), support, size, 2, ReturnStatement(return), new, EnclosingBall, Euclidean2D, Vector2D, vA, 0, vA, VariableDeclarationStatement(), final, Vector2D, vB, support, get, 1, IfStatement(if), support, size, 3, ReturnStatement(return), new, EnclosingBall, Euclidean2D, Vector2D, new, Vector2D, 0.5, vA, 0.5, vB, 0.5, vA, distance, vB, vA, vB, VariableDeclarationStatement(), final, Vector2D, vC, support, get, 2, VariableDeclarationStatement(), final, BigFraction, c2, BigFraction, new, BigFraction, vA, getX, new, BigFraction, vB, getX, new, BigFraction, vC, getX, VariableDeclarationStatement(), final, BigFraction, c3, BigFraction, new, BigFraction, vA, getY, new, BigFraction, vB, getY, new, BigFraction, vC, getY, VariableDeclarationStatement(), final, BigFraction, c1, BigFraction, c2, 0, multiply, c2, 0, add, c3, 0, multiply, c3, 0, c2, 1, multiply, c2, 1, add, c3, 1, multiply, c3, 1, c2, 2, multiply, c2, 2, add, c3, 2, multiply, c3, 2, VariableDeclarationStatement(), final, BigFraction, twoM11, minor, c2, c3, multiply, 2, VariableDeclarationStatement(), final, BigFraction, m12, minor, c1, c3, VariableDeclarationStatement(), final, BigFraction, m13, minor, c1, c2, VariableDeclarationStatement(), final, BigFraction, centerX, m12, divide, twoM11, VariableDeclarationStatement(), final, BigFraction, centerY, m13, divide, twoM11, negate, VariableDeclarationStatement(), final, BigFraction, dx, c2, 0, subtract, centerX, VariableDeclarationStatement(), final, BigFraction, dy, c3, 0, subtract, centerY, VariableDeclarationStatement(), final, BigFraction, r2, dx, multiply, dx, add, dy, multiply, dy, ReturnStatement(return), new, EnclosingBall, Euclidean2D, Vector2D, new, Vector2D, centerX, doubleValue, centerY, doubleValue, FastMath, sqrt, r2, doubleValue, vA, vB, vC]
org.apache.commons.math4.geometry.euclidean.twod:DiskGenerator:minor:BigFraction[]+BigFraction[]#[ReturnStatement(return), c2, 0, multiply, c1, 2, subtract, c1, 1, add, c2, 1, multiply, c1, 0, subtract, c1, 2, add, c2, 2, multiply, c1, 1, subtract, c1, 0]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:getDimension:null#[ReturnStatement(return), 2]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:getSubSpace:null#[ReturnStatement(return), Euclidean1D, getInstance]
org.apache.commons.math4.geometry.euclidean.twod:Euclidean2D:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.euclidean.twod.hull:AbstractConvexHullGenerator2D:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.euclidean.twod.hull:AbstractConvexHullGenerator2D:isIncludeCollinearPoints:null#[ReturnStatement(return), includeCollinearPoints]
org.apache.commons.math4.geometry.euclidean.twod.hull:AbstractConvexHullGenerator2D:generate:Collection<Vector2D>#[ExpressionStatement(), MathUtils, checkNotNull, points, VariableDeclarationStatement(), Collection, Vector2D, hullVertices, null, IfStatement(if), points, size, 2, ExpressionStatement(), hullVertices, points, ExpressionStatement(), hullVertices, findHullVertices, points, TryStatement(try), ReturnStatement(return), new, ConvexHull2D, hullVertices, toArray, Vector2D, hullVertices, size, tolerance, catch, MathIllegalArgumentException, e, ThrowStatement(throw), new, ConvergenceException]
org.apache.commons.math4.geometry.euclidean.twod.hull:AklToussaintHeuristic:reducePoints:Collection<Vector2D>#[VariableDeclarationStatement(), int, size, 0, VariableDeclarationStatement(), Vector2D, minX, null, VariableDeclarationStatement(), Vector2D, maxX, null, VariableDeclarationStatement(), Vector2D, minY, null, VariableDeclarationStatement(), Vector2D, maxY, null, EnhancedForStatement(for), Vector2D, p, points, IfStatement(if), minX, null, p, getX, minX, getX, ExpressionStatement(), minX, p, IfStatement(if), maxX, null, p, getX, maxX, getX, ExpressionStatement(), maxX, p, IfStatement(if), minY, null, p, getY, minY, getY, ExpressionStatement(), minY, p, IfStatement(if), maxY, null, p, getY, maxY, getY, ExpressionStatement(), maxY, p, ExpressionStatement(), size, IfStatement(if), size, 4, ReturnStatement(return), points, VariableDeclarationStatement(), final, List, Vector2D, quadrilateral, buildQuadrilateral, minY, maxX, maxY, minX, IfStatement(if), quadrilateral, size, 3, ReturnStatement(return), points, VariableDeclarationStatement(), final, List, Vector2D, reducedPoints, new, ArrayList, Vector2D, quadrilateral, EnhancedForStatement(for), final, Vector2D, p, points, IfStatement(if), insideQuadrilateral, p, quadrilateral, ExpressionStatement(), reducedPoints, add, p, ReturnStatement(return), reducedPoints]
org.apache.commons.math4.geometry.euclidean.twod.hull:AklToussaintHeuristic:buildQuadrilateral:Vector2D...#[VariableDeclarationStatement(), List, Vector2D, quadrilateral, new, ArrayList, Vector2D, EnhancedForStatement(for), Vector2D, p, points, IfStatement(if), quadrilateral, contains, p, ExpressionStatement(), quadrilateral, add, p, ReturnStatement(return), quadrilateral]
org.apache.commons.math4.geometry.euclidean.twod.hull:AklToussaintHeuristic:insideQuadrilateral:Vector2D+List<Vector2D>#[VariableDeclarationStatement(), Vector2D, p1, quadrilateralPoints, get, 0, VariableDeclarationStatement(), Vector2D, p2, quadrilateralPoints, get, 1, IfStatement(if), point, equals, p1, point, equals, p2, ReturnStatement(return), true, VariableDeclarationStatement(), final, double, last, point, crossProduct, p1, p2, VariableDeclarationStatement(), final, int, size, quadrilateralPoints, size, ForStatement(for), int, i, 1, i, size, i, ExpressionStatement(), p1, p2, ExpressionStatement(), p2, quadrilateralPoints, get, i, 1, size, 0, i, 1, IfStatement(if), point, equals, p1, point, equals, p2, ReturnStatement(return), true, IfStatement(if), last, point, crossProduct, p1, p2, 0, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:isConvex:Vector2D[]#[IfStatement(if), hullVertices.length, 3, ReturnStatement(return), true, VariableDeclarationStatement(), int, sign, 0, ForStatement(for), int, i, 0, i, hullVertices.length, i, VariableDeclarationStatement(), final, Vector2D, p1, hullVertices, i, 0, hullVertices.length, 1, i, 1, VariableDeclarationStatement(), final, Vector2D, p2, hullVertices, i, VariableDeclarationStatement(), final, Vector2D, p3, hullVertices, i, hullVertices.length, 1, 0, i, 1, VariableDeclarationStatement(), final, Vector2D, d1, p2, subtract, p1, VariableDeclarationStatement(), final, Vector2D, d2, p3, subtract, p2, VariableDeclarationStatement(), final, double, crossProduct, MathArrays, linearCombination, d1, getX, d2, getY, d1, getY, d2, getX, VariableDeclarationStatement(), final, int, cmp, Precision, compareTo, crossProduct, 0.0, tolerance, IfStatement(if), cmp, 0.0, IfStatement(if), sign, 0.0, cmp, sign, ReturnStatement(return), false, ExpressionStatement(), sign, cmp, ReturnStatement(return), true]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:getVertices:null#[ReturnStatement(return), vertices, clone]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:getLineSegments:null#[ReturnStatement(return), retrieveLineSegments, clone]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:retrieveLineSegments:null#[IfStatement(if), lineSegments, null, VariableDeclarationStatement(), final, int, size, vertices.length, IfStatement(if), size, 1, ExpressionStatement(), this, lineSegments, Segment, 0, IfStatement(if), size, 2, ExpressionStatement(), this, lineSegments, Segment, 1, VariableDeclarationStatement(), final, Vector2D, p1, vertices, 0, VariableDeclarationStatement(), final, Vector2D, p2, vertices, 1, ExpressionStatement(), this, lineSegments, 0, new, Segment, p1, p2, new, Line, p1, p2, tolerance, ExpressionStatement(), this, lineSegments, Segment, size, VariableDeclarationStatement(), Vector2D, firstPoint, null, VariableDeclarationStatement(), Vector2D, lastPoint, null, VariableDeclarationStatement(), int, index, 0, EnhancedForStatement(for), Vector2D, point, vertices, IfStatement(if), lastPoint, null, ExpressionStatement(), firstPoint, point, ExpressionStatement(), lastPoint, point, ExpressionStatement(), this, lineSegments, index, new, Segment, lastPoint, point, new, Line, lastPoint, point, tolerance, ExpressionStatement(), lastPoint, point, ExpressionStatement(), this, lineSegments, index, new, Segment, lastPoint, firstPoint, new, Line, lastPoint, firstPoint, tolerance, ReturnStatement(return), lineSegments]
org.apache.commons.math4.geometry.euclidean.twod.hull:ConvexHull2D:createRegion:null#[IfStatement(if), vertices.length, 3, ThrowStatement(throw), new, InsufficientDataException, VariableDeclarationStatement(), final, RegionFactory, Euclidean2D, factory, new, RegionFactory, Euclidean2D, VariableDeclarationStatement(), final, Segment, segments, retrieveLineSegments, VariableDeclarationStatement(), final, Line, lineArray, Line, segments.length, ForStatement(for), int, i, 0, i, segments.length, i, ExpressionStatement(), lineArray, i, segments, i, getLine, ReturnStatement(return), factory, buildConvex, lineArray]
org.apache.commons.math4.geometry.euclidean.twod.hull:MonotoneChain:findHullVertices:Collection<Vector2D>#[VariableDeclarationStatement(), final, List, Vector2D, pointsSortedByXAxis, new, ArrayList, Vector2D, points, ExpressionStatement(), Collections, sort, pointsSortedByXAxis, new, Comparator, Vector2D, Override, public, int, compare, final, Vector2D, o1, final, Vector2D, o2, VariableDeclarationStatement(), final, double, tolerance, getTolerance, VariableDeclarationStatement(), final, int, diff, Precision, compareTo, o1, getX, o2, getX, tolerance, IfStatement(if), diff, 0, ReturnStatement(return), Precision, compareTo, o1, getY, o2, getY, tolerance, ReturnStatement(return), diff, VariableDeclarationStatement(), final, List, Vector2D, lowerHull, new, ArrayList, Vector2D, EnhancedForStatement(for), Vector2D, p, pointsSortedByXAxis, ExpressionStatement(), updateHull, p, lowerHull, VariableDeclarationStatement(), final, List, Vector2D, upperHull, new, ArrayList, Vector2D, ForStatement(for), int, idx, pointsSortedByXAxis, size, 1, idx, 0, idx, VariableDeclarationStatement(), final, Vector2D, p, pointsSortedByXAxis, get, idx, ExpressionStatement(), updateHull, p, upperHull, VariableDeclarationStatement(), final, List, Vector2D, hullVertices, new, ArrayList, Vector2D, lowerHull, size, upperHull, size, 2, ForStatement(for), int, idx, 0, idx, lowerHull, size, 1, idx, ExpressionStatement(), hullVertices, add, lowerHull, get, idx, ForStatement(for), int, idx, 0, idx, upperHull, size, 1, idx, ExpressionStatement(), hullVertices, add, upperHull, get, idx, IfStatement(if), hullVertices, isEmpty, lowerHull, isEmpty, ExpressionStatement(), hullVertices, add, lowerHull, get, 0, ReturnStatement(return), hullVertices]
org.apache.commons.math4.geometry.euclidean.twod.hull:MonotoneChain:updateHull:Vector2D+List<Vector2D>#[VariableDeclarationStatement(), final, double, tolerance, getTolerance, IfStatement(if), hull, size, 1, VariableDeclarationStatement(), final, Vector2D, p1, hull, get, 0, IfStatement(if), p1, distance, point, tolerance, ReturnStatement(return), WhileStatement(while), hull, size, 2, VariableDeclarationStatement(), final, int, size, hull, size, VariableDeclarationStatement(), final, Vector2D, p1, hull, get, size, 2, VariableDeclarationStatement(), final, Vector2D, p2, hull, get, size, 1, VariableDeclarationStatement(), final, double, offset, new, Line, p1, p2, tolerance, getOffset, point, IfStatement(if), FastMath, abs, offset, tolerance, VariableDeclarationStatement(), final, double, distanceToCurrent, p1, distance, point, IfStatement(if), distanceToCurrent, tolerance, p2, distance, point, tolerance, ReturnStatement(return), VariableDeclarationStatement(), final, double, distanceToLast, p1, distance, p2, IfStatement(if), isIncludeCollinearPoints, VariableDeclarationStatement(), final, int, index, distanceToCurrent, distanceToLast, size, 1, size, ExpressionStatement(), hull, add, index, point, IfStatement(if), distanceToCurrent, distanceToLast, ExpressionStatement(), hull, remove, size, 1, ExpressionStatement(), hull, add, point, ReturnStatement(return), IfStatement(if), offset, 0, ExpressionStatement(), hull, remove, size, 1, BreakStatement(break), ExpressionStatement(), hull, add, point]
org.apache.commons.math4.geometry.euclidean.twod:Line:copySelf:null#[ReturnStatement(return), new, Line, this]
org.apache.commons.math4.geometry.euclidean.twod:Line:reset:Vector2D+Vector2D#[ExpressionStatement(), unlinkReverse, VariableDeclarationStatement(), final, double, dx, p2, getX, p1, getX, VariableDeclarationStatement(), final, double, dy, p2, getY, p1, getY, VariableDeclarationStatement(), final, double, d, FastMath, hypot, dx, dy, IfStatement(if), d, 0.0, ExpressionStatement(), angle, 0.0, ExpressionStatement(), cos, 1.0, ExpressionStatement(), sin, 0.0, ExpressionStatement(), originOffset, p1, getY, ExpressionStatement(), angle, FastMath.PI, FastMath, atan2, dy, dx, ExpressionStatement(), cos, dx, d, ExpressionStatement(), sin, dy, d, ExpressionStatement(), originOffset, MathArrays, linearCombination, p2, getX, p1, getY, p1, getX, p2, getY, d]
org.apache.commons.math4.geometry.euclidean.twod:Line:reset:Vector2D+double#[ExpressionStatement(), unlinkReverse, ExpressionStatement(), this, angle, MathUtils, normalizeAngle, alpha, FastMath.PI, ExpressionStatement(), cos, FastMath, cos, this, angle, ExpressionStatement(), sin, FastMath, sin, this, angle, ExpressionStatement(), originOffset, MathArrays, linearCombination, cos, p, getY, sin, p, getX]
org.apache.commons.math4.geometry.euclidean.twod:Line:revertSelf:null#[ExpressionStatement(), unlinkReverse, IfStatement(if), angle, FastMath.PI, ExpressionStatement(), angle, FastMath.PI, ExpressionStatement(), angle, FastMath.PI, ExpressionStatement(), cos, cos, ExpressionStatement(), sin, sin, ExpressionStatement(), originOffset, originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:unlinkReverse:null#[IfStatement(if), reverse, null, ExpressionStatement(), reverse.reverse, null, ExpressionStatement(), reverse, null]
org.apache.commons.math4.geometry.euclidean.twod:Line:getReverse:null#[IfStatement(if), reverse, null, ExpressionStatement(), reverse, new, Line, angle, FastMath.PI, angle, FastMath.PI, angle, FastMath.PI, cos, sin, originOffset, tolerance, ExpressionStatement(), reverse.reverse, this, ReturnStatement(return), reverse]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSubSpace:Vector<Euclidean2D>#[ReturnStatement(return), toSubSpace, Point, Euclidean2D, vector]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSpace:Vector<Euclidean1D>#[ReturnStatement(return), toSpace, Point, Euclidean1D, vector]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSubSpace:Point<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, p2, Vector2D, point, ReturnStatement(return), new, Vector1D, MathArrays, linearCombination, cos, p2, getX, sin, p2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Line:toSpace:Point<Euclidean1D>#[VariableDeclarationStatement(), final, double, abscissa, Vector1D, point, getX, ReturnStatement(return), new, Vector2D, MathArrays, linearCombination, abscissa, cos, originOffset, sin, MathArrays, linearCombination, abscissa, sin, originOffset, cos]
org.apache.commons.math4.geometry.euclidean.twod:Line:intersection:Line#[VariableDeclarationStatement(), final, double, d, MathArrays, linearCombination, sin, other.cos, other.sin, cos, IfStatement(if), FastMath, abs, d, tolerance, ReturnStatement(return), null, ReturnStatement(return), new, Vector2D, MathArrays, linearCombination, cos, other.originOffset, other.cos, originOffset, d, MathArrays, linearCombination, sin, other.originOffset, other.sin, originOffset, d]
org.apache.commons.math4.geometry.euclidean.twod:Line:project:Point<Euclidean2D>#[ReturnStatement(return), toSpace, toSubSpace, point]
org.apache.commons.math4.geometry.euclidean.twod:Line:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:wholeHyperplane:null#[ReturnStatement(return), new, SubLine, this, new, IntervalsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:wholeSpace:null#[ReturnStatement(return), new, PolygonsSet, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOffset:Line#[ReturnStatement(return), originOffset, MathArrays, linearCombination, cos, line.cos, sin, line.sin, 0, line.originOffset, line.originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOffset:Vector<Euclidean2D>#[ReturnStatement(return), getOffset, Point, Euclidean2D, vector]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOffset:Point<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, p2, Vector2D, point, ReturnStatement(return), MathArrays, linearCombination, sin, p2, getX, cos, p2, getY, 1.0, originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:sameOrientationAs:Hyperplane<Euclidean2D>#[VariableDeclarationStatement(), final, Line, otherL, Line, other, ReturnStatement(return), MathArrays, linearCombination, sin, otherL.sin, cos, otherL.cos, 0.0]
org.apache.commons.math4.geometry.euclidean.twod:Line:getPointAt:Vector1D+double#[VariableDeclarationStatement(), final, double, x, abscissa, getX, VariableDeclarationStatement(), final, double, dOffset, offset, originOffset, ReturnStatement(return), new, Vector2D, MathArrays, linearCombination, x, cos, dOffset, sin, MathArrays, linearCombination, x, sin, dOffset, cos]
org.apache.commons.math4.geometry.euclidean.twod:Line:contains:Vector2D#[ReturnStatement(return), FastMath, abs, getOffset, p, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:distance:Vector2D#[ReturnStatement(return), FastMath, abs, getOffset, p]
org.apache.commons.math4.geometry.euclidean.twod:Line:isParallelTo:Line#[ReturnStatement(return), FastMath, abs, MathArrays, linearCombination, sin, line.cos, cos, line.sin, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Line:translateToPoint:Vector2D#[ExpressionStatement(), originOffset, MathArrays, linearCombination, cos, p, getY, sin, p, getX]
org.apache.commons.math4.geometry.euclidean.twod:Line:getAngle:null#[ReturnStatement(return), MathUtils, normalizeAngle, angle, FastMath.PI]
org.apache.commons.math4.geometry.euclidean.twod:Line:setAngle:double#[ExpressionStatement(), unlinkReverse, ExpressionStatement(), this, angle, MathUtils, normalizeAngle, angle, FastMath.PI, ExpressionStatement(), cos, FastMath, cos, this, angle, ExpressionStatement(), sin, FastMath, sin, this, angle]
org.apache.commons.math4.geometry.euclidean.twod:Line:getOriginOffset:null#[ReturnStatement(return), originOffset]
org.apache.commons.math4.geometry.euclidean.twod:Line:setOriginOffset:double#[ExpressionStatement(), unlinkReverse, ExpressionStatement(), originOffset, offset]
org.apache.commons.math4.geometry.euclidean.twod:Line:getTransform:double+double+double+double+double+double#[ReturnStatement(return), new, LineTransform, cXX, cYX, cXY, cYY, cX1, cY1]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:add:Vector2D[]#[ExpressionStatement(), add, new, NestedLoops, bLoop, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:add:NestedLoops#[EnhancedForStatement(for), final, NestedLoops, child, surrounded, IfStatement(if), child.polygon, contains, node.polygon, ExpressionStatement(), child, add, node, ReturnStatement(return), ForStatement(for), final, Iterator, NestedLoops, iterator, surrounded, iterator, iterator, hasNext, VariableDeclarationStatement(), final, NestedLoops, child, iterator, next, IfStatement(if), node.polygon, contains, child.polygon, ExpressionStatement(), node.surrounded, add, child, ExpressionStatement(), iterator, remove, VariableDeclarationStatement(), RegionFactory, Euclidean2D, factory, new, RegionFactory, Euclidean2D, EnhancedForStatement(for), final, NestedLoops, child, surrounded, IfStatement(if), factory, intersection, node.polygon, child.polygon, isEmpty, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.CROSSING_BOUNDARY_LOOPS, ExpressionStatement(), surrounded, add, node]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:correctOrientation:null#[EnhancedForStatement(for), NestedLoops, child, surrounded, ExpressionStatement(), child, setClockWise, true]
org.apache.commons.math4.geometry.euclidean.twod:NestedLoops:setClockWise:boolean#[IfStatement(if), originalIsClockwise, clockwise, VariableDeclarationStatement(), int, min, 1, VariableDeclarationStatement(), int, max, loop.length, WhileStatement(while), min, max, VariableDeclarationStatement(), final, Vector2D, tmp, loop, min, ExpressionStatement(), loop, min, loop, max, ExpressionStatement(), loop, max, tmp, EnhancedForStatement(for), final, NestedLoops, child, surrounded, ExpressionStatement(), child, setClockWise, clockwise]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:boxBoundary:double+double+double+double+double#[IfStatement(if), xMin, xMax, tolerance, yMin, yMax, tolerance, ReturnStatement(return), null, VariableDeclarationStatement(), final, Vector2D, minMin, new, Vector2D, xMin, yMin, VariableDeclarationStatement(), final, Vector2D, minMax, new, Vector2D, xMin, yMax, VariableDeclarationStatement(), final, Vector2D, maxMin, new, Vector2D, xMax, yMin, VariableDeclarationStatement(), final, Vector2D, maxMax, new, Vector2D, xMax, yMax, ReturnStatement(return), Line, new, Line, minMin, maxMin, tolerance, new, Line, maxMin, maxMax, tolerance, new, Line, maxMax, minMax, tolerance, new, Line, minMax, minMin, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:verticesToTree:double+Vector2D...#[VariableDeclarationStatement(), final, int, n, vertices.length, IfStatement(if), n, 0, ReturnStatement(return), new, BSPTree, Euclidean2D, Boolean.TRUE, VariableDeclarationStatement(), final, Vertex, vArray, Vertex, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), vArray, i, new, Vertex, vertices, i, VariableDeclarationStatement(), List, Edge, edges, new, ArrayList, Edge, n, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, Vertex, start, vArray, i, VariableDeclarationStatement(), final, Vertex, end, vArray, i, 1, n, VariableDeclarationStatement(), Line, line, start, sharedLineWith, end, IfStatement(if), line, null, ExpressionStatement(), line, new, Line, start, getLocation, end, getLocation, hyperplaneThickness, ExpressionStatement(), edges, add, new, Edge, start, end, line, EnhancedForStatement(for), final, Vertex, vertex, vArray, IfStatement(if), vertex, start, vertex, end, FastMath, abs, line, getOffset, Point, Euclidean2D, vertex, getLocation, hyperplaneThickness, ExpressionStatement(), vertex, bindWith, line, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, tree, new, BSPTree, Euclidean2D, ExpressionStatement(), insertEdges, hyperplaneThickness, tree, edges, ReturnStatement(return), tree]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:insertEdges:double+BSPTree<Euclidean2D>+List<Edge>#[VariableDeclarationStatement(), int, index, 0, VariableDeclarationStatement(), Edge, inserted, null, WhileStatement(while), inserted, null, index, edges, size, ExpressionStatement(), inserted, edges, get, index, IfStatement(if), inserted, getNode, null, IfStatement(if), node, insertCut, inserted, getLine, ExpressionStatement(), inserted, setNode, node, ExpressionStatement(), inserted, null, ExpressionStatement(), inserted, null, IfStatement(if), inserted, null, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, parent, node, getParent, IfStatement(if), parent, null, node, parent, getMinus, ExpressionStatement(), node, setAttribute, Boolean.TRUE, ExpressionStatement(), node, setAttribute, Boolean.FALSE, ReturnStatement(return), VariableDeclarationStatement(), final, List, Edge, plusList, new, ArrayList, Edge, VariableDeclarationStatement(), final, List, Edge, minusList, new, ArrayList, Edge, EnhancedForStatement(for), final, Edge, edge, edges, IfStatement(if), edge, inserted, VariableDeclarationStatement(), final, double, startOffset, inserted, getLine, getOffset, Point, Euclidean2D, edge, getStart, getLocation, VariableDeclarationStatement(), final, double, endOffset, inserted, getLine, getOffset, Point, Euclidean2D, edge, getEnd, getLocation, VariableDeclarationStatement(), Side, startSide, FastMath, abs, startOffset, hyperplaneThickness, Side.HYPER, startOffset, 0, Side.MINUS, Side.PLUS, VariableDeclarationStatement(), Side, endSide, FastMath, abs, endOffset, hyperplaneThickness, Side.HYPER, endOffset, 0, Side.MINUS, Side.PLUS, SwitchStatement(switch), startSide, SwitchCase(case), PLUS, IfStatement(if), endSide, Side.MINUS, VariableDeclarationStatement(), final, Vertex, splitPoint, edge, split, inserted, getLine, ExpressionStatement(), minusList, add, splitPoint, getOutgoing, ExpressionStatement(), plusList, add, splitPoint, getIncoming, ExpressionStatement(), plusList, add, edge, BreakStatement(break), SwitchCase(case), MINUS, IfStatement(if), endSide, Side.PLUS, VariableDeclarationStatement(), final, Vertex, splitPoint, edge, split, inserted, getLine, ExpressionStatement(), minusList, add, splitPoint, getIncoming, ExpressionStatement(), plusList, add, splitPoint, getOutgoing, ExpressionStatement(), minusList, add, edge, BreakStatement(break), SwitchCase(default), IfStatement(if), endSide, Side.PLUS, ExpressionStatement(), plusList, add, edge, IfStatement(if), endSide, Side.MINUS, ExpressionStatement(), minusList, add, edge, BreakStatement(break), IfStatement(if), plusList, isEmpty, ExpressionStatement(), insertEdges, hyperplaneThickness, node, getPlus, plusList, ExpressionStatement(), node, getPlus, setAttribute, Boolean.FALSE, IfStatement(if), minusList, isEmpty, ExpressionStatement(), insertEdges, hyperplaneThickness, node, getMinus, minusList, ExpressionStatement(), node, getMinus, setAttribute, Boolean.TRUE]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:buildNew:BSPTree<Euclidean2D>#[ReturnStatement(return), new, PolygonsSet, tree, getTolerance]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:computeGeometricalProperties:null#[VariableDeclarationStatement(), final, Vector2D, v, getVertices, IfStatement(if), v.length, 0, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, tree, getTree, false, IfStatement(if), tree, getCut, null, Boolean, tree, getAttribute, ExpressionStatement(), setSize, Double.POSITIVE_INFINITY, ExpressionStatement(), setBarycenter, Point, Euclidean2D, Vector2D.NaN, ExpressionStatement(), setSize, 0, ExpressionStatement(), setBarycenter, Point, Euclidean2D, new, Vector2D, 0, 0, IfStatement(if), v, 0, 0, null, ExpressionStatement(), setSize, Double.POSITIVE_INFINITY, ExpressionStatement(), setBarycenter, Point, Euclidean2D, Vector2D.NaN, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), double, sumX, 0, VariableDeclarationStatement(), double, sumY, 0, EnhancedForStatement(for), Vector2D, loop, v, VariableDeclarationStatement(), double, x1, loop, loop.length, 1, getX, VariableDeclarationStatement(), double, y1, loop, loop.length, 1, getY, EnhancedForStatement(for), final, Vector2D, point, loop, VariableDeclarationStatement(), final, double, x0, x1, VariableDeclarationStatement(), final, double, y0, y1, ExpressionStatement(), x1, point, getX, ExpressionStatement(), y1, point, getY, VariableDeclarationStatement(), final, double, factor, x0, y1, y0, x1, ExpressionStatement(), sum, factor, ExpressionStatement(), sumX, factor, x0, x1, ExpressionStatement(), sumY, factor, y0, y1, IfStatement(if), sum, 0, ExpressionStatement(), setSize, Double.POSITIVE_INFINITY, ExpressionStatement(), setBarycenter, Point, Euclidean2D, Vector2D.NaN, ExpressionStatement(), setSize, sum, 2, ExpressionStatement(), setBarycenter, Point, Euclidean2D, new, Vector2D, sumX, 3, sum, sumY, 3, sum]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:getVertices:null#[IfStatement(if), vertices, null, IfStatement(if), getTree, false, getCut, null, ExpressionStatement(), vertices, Vector2D, 0, VariableDeclarationStatement(), final, SegmentsBuilder, visitor, new, SegmentsBuilder, getTolerance, ExpressionStatement(), getTree, true, visit, visitor, VariableDeclarationStatement(), final, List, ConnectableSegment, segments, visitor, getSegments, VariableDeclarationStatement(), int, pending, segments, size, ExpressionStatement(), pending, naturalFollowerConnections, segments, IfStatement(if), pending, 0, ExpressionStatement(), pending, splitEdgeConnections, segments, IfStatement(if), pending, 0, ExpressionStatement(), pending, closeVerticesConnections, segments, VariableDeclarationStatement(), final, ArrayList, List, Segment, loops, new, ArrayList, List, Segment, ForStatement(for), ConnectableSegment, s, getUnprocessed, segments, s, null, s, getUnprocessed, segments, VariableDeclarationStatement(), final, List, Segment, loop, followLoop, s, IfStatement(if), loop, null, IfStatement(if), loop, get, 0, getStart, null, ExpressionStatement(), loops, add, 0, loop, ExpressionStatement(), loops, add, loop, ExpressionStatement(), vertices, Vector2D, loops, size, VariableDeclarationStatement(), int, i, 0, EnhancedForStatement(for), final, List, Segment, loop, loops, IfStatement(if), loop, size, 2, loop, size, 2, loop, get, 0, getStart, null, loop, get, 1, getEnd, null, VariableDeclarationStatement(), final, Line, line, loop, get, 0, getLine, ExpressionStatement(), vertices, i, Vector2D, null, line, toSpace, Point, Euclidean1D, new, Vector1D, Float.MAX_VALUE, line, toSpace, Point, Euclidean1D, new, Vector1D, Float.MAX_VALUE, IfStatement(if), loop, get, 0, getStart, null, VariableDeclarationStatement(), final, Vector2D, array, Vector2D, loop, size, 2, VariableDeclarationStatement(), int, j, 0, EnhancedForStatement(for), Segment, segment, loop, IfStatement(if), j, 0, VariableDeclarationStatement(), double, x, segment, getLine, toSubSpace, Point, Euclidean2D, segment, getEnd, getX, ExpressionStatement(), x, FastMath, max, 1.0, FastMath, abs, x, 2, ExpressionStatement(), array, j, null, ExpressionStatement(), array, j, segment, getLine, toSpace, Point, Euclidean1D, new, Vector1D, x, IfStatement(if), j, array.length, 1, ExpressionStatement(), array, j, segment, getEnd, IfStatement(if), j, array.length, 1, VariableDeclarationStatement(), double, x, segment, getLine, toSubSpace, Point, Euclidean2D, segment, getStart, getX, ExpressionStatement(), x, FastMath, max, 1.0, FastMath, abs, x, 2, ExpressionStatement(), array, j, segment, getLine, toSpace, Point, Euclidean1D, new, Vector1D, x, ExpressionStatement(), vertices, i, array, VariableDeclarationStatement(), final, Vector2D, array, Vector2D, loop, size, VariableDeclarationStatement(), int, j, 0, EnhancedForStatement(for), Segment, segment, loop, ExpressionStatement(), array, j, segment, getStart, ExpressionStatement(), vertices, i, array, ReturnStatement(return), vertices, clone]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:naturalFollowerConnections:List<ConnectableSegment>#[VariableDeclarationStatement(), int, connected, 0, EnhancedForStatement(for), final, ConnectableSegment, segment, segments, IfStatement(if), segment, getNext, null, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, node, segment, getNode, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, end, segment, getEndNode, EnhancedForStatement(for), final, ConnectableSegment, candidateNext, segments, IfStatement(if), candidateNext, getPrevious, null, candidateNext, getNode, end, candidateNext, getStartNode, node, ExpressionStatement(), segment, setNext, candidateNext, ExpressionStatement(), candidateNext, setPrevious, segment, ExpressionStatement(), connected, BreakStatement(break), ReturnStatement(return), connected]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:splitEdgeConnections:List<ConnectableSegment>#[VariableDeclarationStatement(), int, connected, 0, EnhancedForStatement(for), final, ConnectableSegment, segment, segments, IfStatement(if), segment, getNext, null, VariableDeclarationStatement(), final, Hyperplane, Euclidean2D, hyperplane, segment, getNode, getCut, getHyperplane, VariableDeclarationStatement(), final, BSPTree, Euclidean2D, end, segment, getEndNode, EnhancedForStatement(for), final, ConnectableSegment, candidateNext, segments, IfStatement(if), candidateNext, getPrevious, null, candidateNext, getNode, getCut, getHyperplane, hyperplane, candidateNext, getStartNode, end, ExpressionStatement(), segment, setNext, candidateNext, ExpressionStatement(), candidateNext, setPrevious, segment, ExpressionStatement(), connected, BreakStatement(break), ReturnStatement(return), connected]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:closeVerticesConnections:List<ConnectableSegment>#[VariableDeclarationStatement(), int, connected, 0, EnhancedForStatement(for), final, ConnectableSegment, segment, segments, IfStatement(if), segment, getNext, null, segment, getEnd, null, VariableDeclarationStatement(), final, Vector2D, end, segment, getEnd, VariableDeclarationStatement(), ConnectableSegment, selectedNext, null, VariableDeclarationStatement(), double, min, Double.POSITIVE_INFINITY, EnhancedForStatement(for), final, ConnectableSegment, candidateNext, segments, IfStatement(if), candidateNext, getPrevious, null, candidateNext, getStart, null, VariableDeclarationStatement(), final, double, distance, Vector2D, distance, end, candidateNext, getStart, IfStatement(if), distance, min, ExpressionStatement(), selectedNext, candidateNext, ExpressionStatement(), min, distance, IfStatement(if), min, getTolerance, ExpressionStatement(), segment, setNext, selectedNext, ExpressionStatement(), selectedNext, setPrevious, segment, ExpressionStatement(), connected, ReturnStatement(return), connected]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:getUnprocessed:List<ConnectableSegment>#[EnhancedForStatement(for), final, ConnectableSegment, segment, segments, IfStatement(if), segment, isProcessed, ReturnStatement(return), segment, ReturnStatement(return), null]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:followLoop:ConnectableSegment#[VariableDeclarationStatement(), final, List, Segment, loop, new, ArrayList, Segment, ExpressionStatement(), loop, add, defining, ExpressionStatement(), defining, setProcessed, true, VariableDeclarationStatement(), ConnectableSegment, next, defining, getNext, WhileStatement(while), next, defining, next, null, ExpressionStatement(), loop, add, next, ExpressionStatement(), next, setProcessed, true, ExpressionStatement(), next, next, getNext, IfStatement(if), next, null, VariableDeclarationStatement(), ConnectableSegment, previous, defining, getPrevious, WhileStatement(while), previous, null, ExpressionStatement(), loop, add, 0, previous, ExpressionStatement(), previous, setProcessed, true, ExpressionStatement(), previous, previous, getPrevious, ExpressionStatement(), filterSpuriousVertices, loop, IfStatement(if), loop, size, 2, loop, get, 0, getStart, null, ReturnStatement(return), null, ReturnStatement(return), loop]
org.apache.commons.math4.geometry.euclidean.twod:PolygonsSet:filterSpuriousVertices:List<Segment>#[ForStatement(for), int, i, 0, i, loop, size, i, VariableDeclarationStatement(), final, Segment, previous, loop, get, i, VariableDeclarationStatement(), int, j, i, 1, loop, size, VariableDeclarationStatement(), final, Segment, next, loop, get, j, IfStatement(if), next, null, Precision, equals, previous, getLine, getAngle, next, getLine, getAngle, Precision.EPSILON, ExpressionStatement(), loop, set, j, new, Segment, previous, getStart, next, getEnd, previous, getLine, ExpressionStatement(), loop, remove, i]
org.apache.commons.math4.geometry.euclidean.twod:Segment:getStart:null#[ReturnStatement(return), start]
org.apache.commons.math4.geometry.euclidean.twod:Segment:getEnd:null#[ReturnStatement(return), end]
org.apache.commons.math4.geometry.euclidean.twod:Segment:getLine:null#[ReturnStatement(return), line]
org.apache.commons.math4.geometry.euclidean.twod:Segment:distance:Vector2D#[VariableDeclarationStatement(), final, double, deltaX, end, getX, start, getX, VariableDeclarationStatement(), final, double, deltaY, end, getY, start, getY, VariableDeclarationStatement(), final, double, r, p, getX, start, getX, deltaX, p, getY, start, getY, deltaY, deltaX, deltaX, deltaY, deltaY, IfStatement(if), r, 0, r, 1, VariableDeclarationStatement(), final, double, dist1, getStart, distance, Point, Euclidean2D, p, VariableDeclarationStatement(), final, double, dist2, getEnd, distance, Point, Euclidean2D, p, ReturnStatement(return), FastMath, min, dist1, dist2, VariableDeclarationStatement(), final, double, px, start, getX, r, deltaX, VariableDeclarationStatement(), final, double, py, start, getY, r, deltaY, VariableDeclarationStatement(), final, Vector2D, interPt, new, Vector2D, px, py, ReturnStatement(return), interPt, distance, Point, Euclidean2D, p]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:getSegments:null#[VariableDeclarationStatement(), final, Line, line, Line, getHyperplane, VariableDeclarationStatement(), final, List, Interval, list, IntervalsSet, getRemainingRegion, asList, VariableDeclarationStatement(), final, List, Segment, segments, new, ArrayList, Segment, list, size, EnhancedForStatement(for), final, Interval, interval, list, VariableDeclarationStatement(), final, Vector2D, start, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getInf, VariableDeclarationStatement(), final, Vector2D, end, line, toSpace, Point, Euclidean1D, new, Vector1D, interval, getSup, ExpressionStatement(), segments, add, new, Segment, start, end, line, ReturnStatement(return), segments]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:intersection:SubLine+boolean#[VariableDeclarationStatement(), Line, line1, Line, getHyperplane, VariableDeclarationStatement(), Line, line2, Line, subLine, getHyperplane, VariableDeclarationStatement(), Vector2D, v2D, line1, intersection, line2, IfStatement(if), v2D, null, ReturnStatement(return), null, VariableDeclarationStatement(), Location, loc1, getRemainingRegion, checkPoint, line1, toSubSpace, Point, Euclidean2D, v2D, VariableDeclarationStatement(), Location, loc2, subLine, getRemainingRegion, checkPoint, line2, toSubSpace, Point, Euclidean2D, v2D, IfStatement(if), includeEndPoints, ReturnStatement(return), loc1, Location.OUTSIDE, loc2, Location.OUTSIDE, v2D, null, ReturnStatement(return), loc1, Location.INSIDE, loc2, Location.INSIDE, v2D, null]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:buildIntervalSet:Vector2D+Vector2D+double#[VariableDeclarationStatement(), final, Line, line, new, Line, start, end, tolerance, ReturnStatement(return), new, IntervalsSet, line, toSubSpace, Point, Euclidean2D, start, getX, line, toSubSpace, Point, Euclidean2D, end, getX, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:buildNew:Hyperplane<Euclidean2D>+Region<Euclidean1D>#[ReturnStatement(return), new, SubLine, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.euclidean.twod:SubLine:split:Hyperplane<Euclidean2D>#[VariableDeclarationStatement(), final, Line, thisLine, Line, getHyperplane, VariableDeclarationStatement(), final, Line, otherLine, Line, hyperplane, VariableDeclarationStatement(), final, Vector2D, crossing, thisLine, intersection, otherLine, VariableDeclarationStatement(), final, double, tolerance, thisLine, getTolerance, IfStatement(if), crossing, null, VariableDeclarationStatement(), final, double, global, otherLine, getOffset, thisLine, IfStatement(if), global, tolerance, ReturnStatement(return), new, SplitSubHyperplane, Euclidean2D, null, this, IfStatement(if), global, tolerance, ReturnStatement(return), new, SplitSubHyperplane, Euclidean2D, this, null, ReturnStatement(return), new, SplitSubHyperplane, Euclidean2D, null, null, VariableDeclarationStatement(), final, boolean, direct, FastMath, sin, thisLine, getAngle, otherLine, getAngle, 0, VariableDeclarationStatement(), final, Vector1D, x, thisLine, toSubSpace, Point, Euclidean2D, crossing, VariableDeclarationStatement(), final, SubHyperplane, Euclidean1D, subPlus, new, OrientedPoint, x, direct, tolerance, wholeHyperplane, VariableDeclarationStatement(), final, SubHyperplane, Euclidean1D, subMinus, new, OrientedPoint, x, direct, tolerance, wholeHyperplane, VariableDeclarationStatement(), final, BSPTree, Euclidean1D, splitTree, getRemainingRegion, getTree, false, split, subMinus, VariableDeclarationStatement(), final, BSPTree, Euclidean1D, plusTree, getRemainingRegion, isEmpty, splitTree, getPlus, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, subPlus, new, BSPTree, Euclidean1D, Boolean.FALSE, splitTree, getPlus, null, VariableDeclarationStatement(), final, BSPTree, Euclidean1D, minusTree, getRemainingRegion, isEmpty, splitTree, getMinus, new, BSPTree, Euclidean1D, Boolean.FALSE, new, BSPTree, Euclidean1D, subMinus, new, BSPTree, Euclidean1D, Boolean.FALSE, splitTree, getMinus, null, ReturnStatement(return), new, SplitSubHyperplane, Euclidean2D, new, SubLine, thisLine, copySelf, new, IntervalsSet, plusTree, tolerance, new, SubLine, thisLine, copySelf, new, IntervalsSet, minusTree, tolerance]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getX:null#[ReturnStatement(return), x]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getY:null#[ReturnStatement(return), y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:toArray:null#[ReturnStatement(return), double, x, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getSpace:null#[ReturnStatement(return), Euclidean2D, getInstance]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getZero:null#[ReturnStatement(return), ZERO]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNorm1:null#[ReturnStatement(return), FastMath, abs, x, FastMath, abs, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNorm:null#[ReturnStatement(return), FastMath, sqrt, x, x, y, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNormSq:null#[ReturnStatement(return), x, x, y, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:getNormInf:null#[ReturnStatement(return), FastMath, max, FastMath, abs, x, FastMath, abs, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:add:Vector<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, v2, Vector2D, v, ReturnStatement(return), new, Vector2D, x, v2, getX, y, v2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:add:double+Vector<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, v2, Vector2D, v, ReturnStatement(return), new, Vector2D, x, factor, v2, getX, y, factor, v2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:subtract:Vector<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, p3, Vector2D, p, ReturnStatement(return), new, Vector2D, x, p3.x, y, p3.y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:subtract:double+Vector<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, v2, Vector2D, v, ReturnStatement(return), new, Vector2D, x, factor, v2, getX, y, factor, v2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:normalize:null#[VariableDeclarationStatement(), double, s, getNorm, IfStatement(if), s, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ReturnStatement(return), scalarMultiply, 1, s]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:angle:Vector2D+Vector2D#[VariableDeclarationStatement(), double, normProduct, v1, getNorm, v2, getNorm, IfStatement(if), normProduct, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, VariableDeclarationStatement(), double, dot, v1, dotProduct, v2, VariableDeclarationStatement(), double, threshold, normProduct, 0.9999, IfStatement(if), dot, threshold, dot, threshold, VariableDeclarationStatement(), final, double, n, FastMath, abs, MathArrays, linearCombination, v1.x, v2.y, v1.y, v2.x, IfStatement(if), dot, 0, ReturnStatement(return), FastMath, asin, n, normProduct, ReturnStatement(return), FastMath.PI, FastMath, asin, n, normProduct, ReturnStatement(return), FastMath, acos, dot, normProduct]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:negate:null#[ReturnStatement(return), new, Vector2D, x, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:scalarMultiply:double#[ReturnStatement(return), new, Vector2D, a, x, a, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:isNaN:null#[ReturnStatement(return), Double, isNaN, x, Double, isNaN, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:isInfinite:null#[ReturnStatement(return), isNaN, Double, isInfinite, x, Double, isInfinite, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distance1:Vector<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, p3, Vector2D, p, VariableDeclarationStatement(), final, double, dx, FastMath, abs, p3.x, x, VariableDeclarationStatement(), final, double, dy, FastMath, abs, p3.y, y, ReturnStatement(return), dx, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distance:Point<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, p3, Vector2D, p, VariableDeclarationStatement(), final, double, dx, p3.x, x, VariableDeclarationStatement(), final, double, dy, p3.y, y, ReturnStatement(return), FastMath, sqrt, dx, dx, dy, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceInf:Vector<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, p3, Vector2D, p, VariableDeclarationStatement(), final, double, dx, FastMath, abs, p3.x, x, VariableDeclarationStatement(), final, double, dy, FastMath, abs, p3.y, y, ReturnStatement(return), FastMath, max, dx, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceSq:Vector<Euclidean2D>#[VariableDeclarationStatement(), Vector2D, p3, Vector2D, p, VariableDeclarationStatement(), final, double, dx, p3.x, x, VariableDeclarationStatement(), final, double, dy, p3.y, y, ReturnStatement(return), dx, dx, dy, dy]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:dotProduct:Vector<Euclidean2D>#[VariableDeclarationStatement(), final, Vector2D, v2, Vector2D, v, ReturnStatement(return), MathArrays, linearCombination, x, v2.x, y, v2.y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:crossProduct:Vector2D+Vector2D#[VariableDeclarationStatement(), final, double, x1, p2, getX, p1, getX, VariableDeclarationStatement(), final, double, y1, getY, p1, getY, VariableDeclarationStatement(), final, double, x2, getX, p1, getX, VariableDeclarationStatement(), final, double, y2, p2, getY, p1, getY, ReturnStatement(return), MathArrays, linearCombination, x1, y1, x2, y2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distance:Vector2D+Vector2D#[ReturnStatement(return), p1, distance, p2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceInf:Vector2D+Vector2D#[ReturnStatement(return), p1, distanceInf, p2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:distanceSq:Vector2D+Vector2D#[ReturnStatement(return), p1, distanceSq, p2]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, Vector2D, VariableDeclarationStatement(), final, Vector2D, rhs, Vector2D, other, IfStatement(if), rhs, isNaN, ReturnStatement(return), this, isNaN, ReturnStatement(return), x, rhs.x, y, rhs.y, ReturnStatement(return), false]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 542, ReturnStatement(return), 122, 76, MathUtils, hash, x, MathUtils, hash, y]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:toString:null#[ReturnStatement(return), Vector2DFormat, getInstance, format, this]
org.apache.commons.math4.geometry.euclidean.twod:Vector2D:toString:NumberFormat#[ReturnStatement(return), new, Vector2DFormat, format, format, this]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:getInstance:null#[ReturnStatement(return), getInstance, Locale, getDefault]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:getInstance:Locale#[ReturnStatement(return), new, Vector2DFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:format:Vector<Euclidean2D>+StringBuffer+FieldPosition#[VariableDeclarationStatement(), final, Vector2D, p2, Vector2D, vector, ReturnStatement(return), format, toAppendTo, pos, p2, getX, p2, getY]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:parse:String#[VariableDeclarationStatement(), ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), Vector2D, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, Vector2D, ReturnStatement(return), result]
org.apache.commons.math4.geometry.euclidean.twod:Vector2DFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), final, double, coordinates, parseCoordinates, 2, source, pos, IfStatement(if), coordinates, null, ReturnStatement(return), null, ReturnStatement(return), new, Vector2D, coordinates, 0, coordinates, 1]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:insertCuts:BSPTree<S>+Collection<SubHyperplane<S>>#[VariableDeclarationStatement(), final, Iterator, SubHyperplane, S, iterator, boundary, iterator, VariableDeclarationStatement(), Hyperplane, S, inserted, null, WhileStatement(while), inserted, null, iterator, hasNext, ExpressionStatement(), inserted, iterator, next, getHyperplane, IfStatement(if), node, insertCut, inserted, copySelf, ExpressionStatement(), inserted, null, IfStatement(if), iterator, hasNext, ReturnStatement(return), VariableDeclarationStatement(), final, ArrayList, SubHyperplane, S, plusList, new, ArrayList, SubHyperplane, S, VariableDeclarationStatement(), final, ArrayList, SubHyperplane, S, minusList, new, ArrayList, SubHyperplane, S, WhileStatement(while), iterator, hasNext, VariableDeclarationStatement(), final, SubHyperplane, S, other, iterator, next, VariableDeclarationStatement(), final, SubHyperplane.SplitSubHyperplane, S, split, other, split, inserted, SwitchStatement(switch), split, getSide, SwitchCase(case), PLUS, ExpressionStatement(), plusList, add, other, BreakStatement(break), SwitchCase(case), MINUS, ExpressionStatement(), minusList, add, other, BreakStatement(break), SwitchCase(case), BOTH, ExpressionStatement(), plusList, add, split, getPlus, ExpressionStatement(), minusList, add, split, getMinus, BreakStatement(break), SwitchCase(default), ExpressionStatement(), insertCuts, node, getPlus, plusList, ExpressionStatement(), insertCuts, node, getMinus, minusList]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:copySelf:null#[ReturnStatement(return), buildNew, tree, copySelf]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isEmpty:null#[ReturnStatement(return), isEmpty, tree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isEmpty:BSPTree<S>#[IfStatement(if), node, getCut, null, ReturnStatement(return), Boolean, node, getAttribute, ReturnStatement(return), isEmpty, node, getMinus, isEmpty, node, getPlus]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isFull:null#[ReturnStatement(return), isFull, tree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:isFull:BSPTree<S>#[IfStatement(if), node, getCut, null, ReturnStatement(return), Boolean, node, getAttribute, ReturnStatement(return), isFull, node, getMinus, isFull, node, getPlus]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:contains:Region<S>#[ReturnStatement(return), new, RegionFactory, S, difference, region, this, isEmpty]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:projectToBoundary:Point<S>#[VariableDeclarationStatement(), final, BoundaryProjector, S, T, projector, new, BoundaryProjector, S, T, point, ExpressionStatement(), getTree, true, visit, projector, ReturnStatement(return), projector, getProjection]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:Vector<S>#[ReturnStatement(return), checkPoint, Point, S, point]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:Point<S>#[ReturnStatement(return), checkPoint, tree, point]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:BSPTree<S>+Vector<S>#[ReturnStatement(return), checkPoint, node, Point, S, point]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:checkPoint:BSPTree<S>+Point<S>#[VariableDeclarationStatement(), final, BSPTree, S, cell, node, getCell, point, tolerance, IfStatement(if), cell, getCut, null, ReturnStatement(return), Boolean, cell, getAttribute, Location.INSIDE, Location.OUTSIDE, VariableDeclarationStatement(), final, Location, minusCode, checkPoint, cell, getMinus, point, VariableDeclarationStatement(), final, Location, plusCode, checkPoint, cell, getPlus, point, ReturnStatement(return), minusCode, plusCode, minusCode, Location.BOUNDARY]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getTree:boolean#[IfStatement(if), includeBoundaryAttributes, tree, getCut, null, tree, getAttribute, null, ExpressionStatement(), tree, visit, new, BoundaryBuilder, S, ReturnStatement(return), tree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getBoundarySize:null#[VariableDeclarationStatement(), final, BoundarySizeVisitor, S, visitor, new, BoundarySizeVisitor, S, ExpressionStatement(), getTree, true, visit, visitor, ReturnStatement(return), visitor, getSize]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getSize:null#[IfStatement(if), barycenter, null, ExpressionStatement(), computeGeometricalProperties, ReturnStatement(return), size]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:setSize:double#[ExpressionStatement(), this, size, size]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:getBarycenter:null#[IfStatement(if), barycenter, null, ExpressionStatement(), computeGeometricalProperties, ReturnStatement(return), barycenter]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:setBarycenter:Vector<S>#[ExpressionStatement(), setBarycenter, Point, S, barycenter]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:setBarycenter:Point<S>#[ExpressionStatement(), this, barycenter, barycenter]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:intersection:SubHyperplane<S>#[ReturnStatement(return), recurseIntersection, tree, sub]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:recurseIntersection:BSPTree<S>+SubHyperplane<S>#[IfStatement(if), node, getCut, null, ReturnStatement(return), Boolean, node, getAttribute, sub, copySelf, null, VariableDeclarationStatement(), final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, VariableDeclarationStatement(), final, SubHyperplane.SplitSubHyperplane, S, split, sub, split, hyperplane, IfStatement(if), split, getPlus, null, IfStatement(if), split, getMinus, null, VariableDeclarationStatement(), final, SubHyperplane, S, plus, recurseIntersection, node, getPlus, split, getPlus, VariableDeclarationStatement(), final, SubHyperplane, S, minus, recurseIntersection, node, getMinus, split, getMinus, IfStatement(if), plus, null, ReturnStatement(return), minus, IfStatement(if), minus, null, ReturnStatement(return), plus, ReturnStatement(return), plus, reunite, minus, ReturnStatement(return), recurseIntersection, node, getPlus, sub, IfStatement(if), split, getMinus, null, ReturnStatement(return), recurseIntersection, node, getMinus, sub, ReturnStatement(return), recurseIntersection, node, getPlus, recurseIntersection, node, getMinus, sub]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:applyTransform:Transform<S,T>#[VariableDeclarationStatement(), final, Map, BSPTree, S, BSPTree, S, map, new, HashMap, BSPTree, S, BSPTree, S, VariableDeclarationStatement(), final, BSPTree, S, transformedTree, recurseTransform, getTree, false, transform, map, EnhancedForStatement(for), final, Map.Entry, BSPTree, S, BSPTree, S, entry, map, entrySet, IfStatement(if), entry, getKey, getCut, null, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, S, original, BoundaryAttribute, S, entry, getKey, getAttribute, IfStatement(if), original, null, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, S, transformed, BoundaryAttribute, S, entry, getValue, getAttribute, EnhancedForStatement(for), final, BSPTree, S, splitter, original, getSplitters, ExpressionStatement(), transformed, getSplitters, add, map, get, splitter, ReturnStatement(return), buildNew, transformedTree]
org.apache.commons.math4.geometry.partitioning:AbstractRegion:recurseTransform:BSPTree<S>+Transform<S,T>+Map<BSPTree<S>,BSPTree<S>>#[VariableDeclarationStatement(), final, BSPTree, S, transformedNode, IfStatement(if), node, getCut, null, ExpressionStatement(), transformedNode, new, BSPTree, S, node, getAttribute, VariableDeclarationStatement(), final, SubHyperplane, S, sub, node, getCut, VariableDeclarationStatement(), final, SubHyperplane, S, tSub, AbstractSubHyperplane, S, T, sub, applyTransform, transform, VariableDeclarationStatement(), BoundaryAttribute, S, attribute, BoundaryAttribute, S, node, getAttribute, IfStatement(if), attribute, null, VariableDeclarationStatement(), final, SubHyperplane, S, tPO, attribute, getPlusOutside, null, null, AbstractSubHyperplane, S, T, attribute, getPlusOutside, applyTransform, transform, VariableDeclarationStatement(), final, SubHyperplane, S, tPI, attribute, getPlusInside, null, null, AbstractSubHyperplane, S, T, attribute, getPlusInside, applyTransform, transform, ExpressionStatement(), attribute, new, BoundaryAttribute, S, tPO, tPI, new, NodesSet, S, ExpressionStatement(), transformedNode, new, BSPTree, S, tSub, recurseTransform, node, getPlus, transform, map, recurseTransform, node, getMinus, transform, map, attribute, ExpressionStatement(), map, put, node, transformedNode, ReturnStatement(return), transformedNode]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:copySelf:null#[ReturnStatement(return), buildNew, hyperplane, copySelf, remainingRegion]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:getHyperplane:null#[ReturnStatement(return), hyperplane]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:getRemainingRegion:null#[ReturnStatement(return), remainingRegion]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:getSize:null#[ReturnStatement(return), remainingRegion, getSize]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:reunite:SubHyperplane<S>#[VariableDeclarationStatement(), SuppressWarnings, "unchecked", AbstractSubHyperplane, S, T, o, AbstractSubHyperplane, S, T, other, ReturnStatement(return), buildNew, hyperplane, new, RegionFactory, T, union, remainingRegion, o.remainingRegion]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:applyTransform:Transform<S,T>#[VariableDeclarationStatement(), final, Hyperplane, S, tHyperplane, transform, apply, hyperplane, VariableDeclarationStatement(), final, Map, BSPTree, T, BSPTree, T, map, new, HashMap, BSPTree, T, BSPTree, T, VariableDeclarationStatement(), final, BSPTree, T, tTree, recurseTransform, remainingRegion, getTree, false, tHyperplane, transform, map, EnhancedForStatement(for), final, Map.Entry, BSPTree, T, BSPTree, T, entry, map, entrySet, IfStatement(if), entry, getKey, getCut, null, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, T, original, BoundaryAttribute, T, entry, getKey, getAttribute, IfStatement(if), original, null, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, T, transformed, BoundaryAttribute, T, entry, getValue, getAttribute, EnhancedForStatement(for), final, BSPTree, T, splitter, original, getSplitters, ExpressionStatement(), transformed, getSplitters, add, map, get, splitter, ReturnStatement(return), buildNew, tHyperplane, remainingRegion, buildNew, tTree]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:recurseTransform:BSPTree<T>+Hyperplane<S>+Transform<S,T>+Map<BSPTree<T>,BSPTree<T>>#[VariableDeclarationStatement(), final, BSPTree, T, transformedNode, IfStatement(if), node, getCut, null, ExpressionStatement(), transformedNode, new, BSPTree, T, node, getAttribute, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, T, attribute, BoundaryAttribute, T, node, getAttribute, IfStatement(if), attribute, null, VariableDeclarationStatement(), final, SubHyperplane, T, tPO, attribute, getPlusOutside, null, null, transform, apply, attribute, getPlusOutside, hyperplane, transformed, VariableDeclarationStatement(), final, SubHyperplane, T, tPI, attribute, getPlusInside, null, null, transform, apply, attribute, getPlusInside, hyperplane, transformed, ExpressionStatement(), attribute, new, BoundaryAttribute, T, tPO, tPI, new, NodesSet, T, ExpressionStatement(), transformedNode, new, BSPTree, T, transform, apply, node, getCut, hyperplane, transformed, recurseTransform, node, getPlus, transformed, transform, map, recurseTransform, node, getMinus, transformed, transform, map, attribute, ExpressionStatement(), map, put, node, transformedNode, ReturnStatement(return), transformedNode]
org.apache.commons.math4.geometry.partitioning:AbstractSubHyperplane:isEmpty:null#[ReturnStatement(return), remainingRegion, isEmpty]
org.apache.commons.math4.geometry.partitioning:BoundaryAttribute:getPlusOutside:null#[ReturnStatement(return), plusOutside]
org.apache.commons.math4.geometry.partitioning:BoundaryAttribute:getPlusInside:null#[ReturnStatement(return), plusInside]
org.apache.commons.math4.geometry.partitioning:BoundaryAttribute:getSplitters:null#[ReturnStatement(return), splitters]
org.apache.commons.math4.geometry.partitioning:BoundaryBuilder:visitOrder:BSPTree<S>#[ReturnStatement(return), Order.PLUS_MINUS_SUB]
org.apache.commons.math4.geometry.partitioning:BoundaryBuilder:visitInternalNode:BSPTree<S>#[VariableDeclarationStatement(), SubHyperplane, S, plusOutside, null, VariableDeclarationStatement(), SubHyperplane, S, plusInside, null, VariableDeclarationStatement(), NodesSet, S, splitters, null, VariableDeclarationStatement(), final, Characterization, S, plusChar, new, Characterization, S, node, getPlus, node, getCut, copySelf, IfStatement(if), plusChar, touchOutside, VariableDeclarationStatement(), final, Characterization, S, minusChar, new, Characterization, S, node, getMinus, plusChar, outsideTouching, IfStatement(if), minusChar, touchInside, ExpressionStatement(), plusOutside, minusChar, insideTouching, ExpressionStatement(), splitters, new, NodesSet, S, ExpressionStatement(), splitters, addAll, minusChar, getInsideSplitters, ExpressionStatement(), splitters, addAll, plusChar, getOutsideSplitters, IfStatement(if), plusChar, touchInside, VariableDeclarationStatement(), final, Characterization, S, minusChar, new, Characterization, S, node, getMinus, plusChar, insideTouching, IfStatement(if), minusChar, touchOutside, ExpressionStatement(), plusInside, minusChar, outsideTouching, IfStatement(if), splitters, null, ExpressionStatement(), splitters, new, NodesSet, S, ExpressionStatement(), splitters, addAll, minusChar, getOutsideSplitters, ExpressionStatement(), splitters, addAll, plusChar, getInsideSplitters, IfStatement(if), splitters, null, ForStatement(for), BSPTree, S, up, node, getParent, up, null, up, up, getParent, ExpressionStatement(), splitters, add, up, ExpressionStatement(), node, setAttribute, new, BoundaryAttribute, S, plusOutside, plusInside, splitters]
org.apache.commons.math4.geometry.partitioning:BoundaryProjection:getOriginal:null#[ReturnStatement(return), original]
org.apache.commons.math4.geometry.partitioning:BoundaryProjection:getProjected:null#[ReturnStatement(return), projected]
org.apache.commons.math4.geometry.partitioning:BoundaryProjection:getOffset:null#[ReturnStatement(return), offset]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:visitOrder:BSPTree<S>#[IfStatement(if), node, getCut, getHyperplane, getOffset, original, 0, ReturnStatement(return), Order.MINUS_SUB_PLUS, ReturnStatement(return), Order.PLUS_SUB_MINUS]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:visitInternalNode:BSPTree<S>#[VariableDeclarationStatement(), final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, VariableDeclarationStatement(), final, double, signedOffset, hyperplane, getOffset, original, IfStatement(if), FastMath, abs, signedOffset, offset, VariableDeclarationStatement(), final, Point, S, regular, hyperplane, project, original, VariableDeclarationStatement(), final, List, Region, T, boundaryParts, boundaryRegions, node, VariableDeclarationStatement(), boolean, regularFound, false, EnhancedForStatement(for), final, Region, T, part, boundaryParts, IfStatement(if), regularFound, belongsToPart, regular, hyperplane, part, ExpressionStatement(), projected, regular, ExpressionStatement(), offset, FastMath, abs, signedOffset, ExpressionStatement(), regularFound, true, IfStatement(if), regularFound, EnhancedForStatement(for), final, Region, T, part, boundaryParts, VariableDeclarationStatement(), final, Point, S, spI, singularProjection, regular, hyperplane, part, IfStatement(if), spI, null, VariableDeclarationStatement(), final, double, distance, original, distance, spI, IfStatement(if), distance, offset, ExpressionStatement(), projected, spI, ExpressionStatement(), offset, distance]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:visitLeafNode:BSPTree<S>#[IfStatement(if), leaf, null, ExpressionStatement(), leaf, node]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:getProjection:null#[ExpressionStatement(), offset, FastMath, copySign, offset, Boolean, leaf, getAttribute, 1, 1, ReturnStatement(return), new, BoundaryProjection, S, original, projected, offset]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:boundaryRegions:BSPTree<S>#[VariableDeclarationStatement(), final, List, Region, T, regions, new, ArrayList, Region, T, 2, VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, BoundaryAttribute, S, ba, BoundaryAttribute, S, node, getAttribute, ExpressionStatement(), addRegion, ba, getPlusInside, regions, ExpressionStatement(), addRegion, ba, getPlusOutside, regions, ReturnStatement(return), regions]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:addRegion:SubHyperplane<S>+List<Region<T>>#[IfStatement(if), sub, null, VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, Region, T, region, AbstractSubHyperplane, S, T, sub, getRemainingRegion, IfStatement(if), region, null, ExpressionStatement(), list, add, region]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:belongsToPart:Point<S>+Hyperplane<S>+Region<T>#[VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, Embedding, S, T, embedding, Embedding, S, T, hyperplane, ReturnStatement(return), part, checkPoint, embedding, toSubSpace, point, Location.OUTSIDE]
org.apache.commons.math4.geometry.partitioning:BoundaryProjector:singularProjection:Point<S>+Hyperplane<S>+Region<T>#[VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, Embedding, S, T, embedding, Embedding, S, T, hyperplane, VariableDeclarationStatement(), final, BoundaryProjection, T, bp, part, projectToBoundary, embedding, toSubSpace, point, ReturnStatement(return), bp, getProjected, null, null, embedding, toSpace, bp, getProjected]
org.apache.commons.math4.geometry.partitioning:BoundarySizeVisitor:visitOrder:BSPTree<S>#[ReturnStatement(return), Order.MINUS_SUB_PLUS]
org.apache.commons.math4.geometry.partitioning:BoundarySizeVisitor:visitInternalNode:BSPTree<S>#[VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, BoundaryAttribute, S, attribute, BoundaryAttribute, S, node, getAttribute, IfStatement(if), attribute, getPlusOutside, null, ExpressionStatement(), boundarySize, attribute, getPlusOutside, getSize, IfStatement(if), attribute, getPlusInside, null, ExpressionStatement(), boundarySize, attribute, getPlusInside, getSize]
org.apache.commons.math4.geometry.partitioning:BoundarySizeVisitor:getSize:null#[ReturnStatement(return), boundarySize]
org.apache.commons.math4.geometry.partitioning:BSPTree:insertCut:Hyperplane<S>#[IfStatement(if), cut, null, ExpressionStatement(), plus.parent, null, ExpressionStatement(), minus.parent, null, VariableDeclarationStatement(), final, SubHyperplane, S, chopped, fitToCell, hyperplane, wholeHyperplane, IfStatement(if), chopped, null, chopped, isEmpty, ExpressionStatement(), cut, null, ExpressionStatement(), plus, null, ExpressionStatement(), minus, null, ReturnStatement(return), false, ExpressionStatement(), cut, chopped, ExpressionStatement(), plus, new, BSPTree, S, ExpressionStatement(), plus.parent, this, ExpressionStatement(), minus, new, BSPTree, S, ExpressionStatement(), minus.parent, this, ReturnStatement(return), true]
org.apache.commons.math4.geometry.partitioning:BSPTree:copySelf:null#[IfStatement(if), cut, null, ReturnStatement(return), new, BSPTree, S, attribute, ReturnStatement(return), new, BSPTree, S, cut, copySelf, plus, copySelf, minus, copySelf, attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:getCut:null#[ReturnStatement(return), cut]
org.apache.commons.math4.geometry.partitioning:BSPTree:getPlus:null#[ReturnStatement(return), plus]
org.apache.commons.math4.geometry.partitioning:BSPTree:getMinus:null#[ReturnStatement(return), minus]
org.apache.commons.math4.geometry.partitioning:BSPTree:getParent:null#[ReturnStatement(return), parent]
org.apache.commons.math4.geometry.partitioning:BSPTree:setAttribute:Object#[ExpressionStatement(), this, attribute, attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:getAttribute:null#[ReturnStatement(return), attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:visit:BSPTreeVisitor<S>#[IfStatement(if), cut, null, ExpressionStatement(), visitor, visitLeafNode, this, SwitchStatement(switch), visitor, visitOrder, this, SwitchCase(case), PLUS_MINUS_SUB, ExpressionStatement(), plus, visit, visitor, ExpressionStatement(), minus, visit, visitor, ExpressionStatement(), visitor, visitInternalNode, this, BreakStatement(break), SwitchCase(case), PLUS_SUB_MINUS, ExpressionStatement(), plus, visit, visitor, ExpressionStatement(), visitor, visitInternalNode, this, ExpressionStatement(), minus, visit, visitor, BreakStatement(break), SwitchCase(case), MINUS_PLUS_SUB, ExpressionStatement(), minus, visit, visitor, ExpressionStatement(), plus, visit, visitor, ExpressionStatement(), visitor, visitInternalNode, this, BreakStatement(break), SwitchCase(case), MINUS_SUB_PLUS, ExpressionStatement(), minus, visit, visitor, ExpressionStatement(), visitor, visitInternalNode, this, ExpressionStatement(), plus, visit, visitor, BreakStatement(break), SwitchCase(case), SUB_PLUS_MINUS, ExpressionStatement(), visitor, visitInternalNode, this, ExpressionStatement(), plus, visit, visitor, ExpressionStatement(), minus, visit, visitor, BreakStatement(break), SwitchCase(case), SUB_MINUS_PLUS, ExpressionStatement(), visitor, visitInternalNode, this, ExpressionStatement(), minus, visit, visitor, ExpressionStatement(), plus, visit, visitor, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError]
org.apache.commons.math4.geometry.partitioning:BSPTree:fitToCell:SubHyperplane<S>#[VariableDeclarationStatement(), SubHyperplane, S, s, sub, ForStatement(for), BSPTree, S, tree, this, tree.parent, null, s, null, tree, tree.parent, IfStatement(if), tree, tree.parent.plus, ExpressionStatement(), s, s, split, tree.parent.cut, getHyperplane, getPlus, ExpressionStatement(), s, s, split, tree.parent.cut, getHyperplane, getMinus, ReturnStatement(return), s]
org.apache.commons.math4.geometry.partitioning:BSPTree:getCell:Point<S>+double#[IfStatement(if), cut, null, ReturnStatement(return), this, VariableDeclarationStatement(), final, double, offset, cut, getHyperplane, getOffset, point, IfStatement(if), FastMath, abs, offset, tolerance, ReturnStatement(return), this, IfStatement(if), offset, 0, ReturnStatement(return), minus, getCell, point, tolerance, ReturnStatement(return), plus, getCell, point, tolerance]
org.apache.commons.math4.geometry.partitioning:BSPTree:getCloseCuts:Point<S>+double#[VariableDeclarationStatement(), final, List, BSPTree, S, close, new, ArrayList, BSPTree, S, ExpressionStatement(), recurseCloseCuts, point, maxOffset, close, ReturnStatement(return), close]
org.apache.commons.math4.geometry.partitioning:BSPTree:recurseCloseCuts:Point<S>+double+List<BSPTree<S>>#[IfStatement(if), cut, null, VariableDeclarationStatement(), final, double, offset, cut, getHyperplane, getOffset, point, IfStatement(if), offset, maxOffset, ExpressionStatement(), minus, recurseCloseCuts, point, maxOffset, close, IfStatement(if), offset, maxOffset, ExpressionStatement(), plus, recurseCloseCuts, point, maxOffset, close, ExpressionStatement(), close, add, this, ExpressionStatement(), minus, recurseCloseCuts, point, maxOffset, close, ExpressionStatement(), plus, recurseCloseCuts, point, maxOffset, close]
org.apache.commons.math4.geometry.partitioning:BSPTree:condense:null#[IfStatement(if), cut, null, plus.cut, null, minus.cut, null, plus.attribute, null, minus.attribute, null, plus.attribute, null, plus.attribute, equals, minus.attribute, ExpressionStatement(), attribute, plus.attribute, null, minus.attribute, plus.attribute, ExpressionStatement(), cut, null, ExpressionStatement(), plus, null, ExpressionStatement(), minus, null]
org.apache.commons.math4.geometry.partitioning:BSPTree:merge:BSPTree<S>+LeafMerger<S>#[ReturnStatement(return), merge, tree, leafMerger, null, false]
org.apache.commons.math4.geometry.partitioning:BSPTree:merge:BSPTree<S>+LeafMerger<S>+BSPTree<S>+boolean#[IfStatement(if), cut, null, ReturnStatement(return), leafMerger, merge, this, tree, parentTree, isPlusChild, true, IfStatement(if), tree.cut, null, ReturnStatement(return), leafMerger, merge, tree, this, parentTree, isPlusChild, false, VariableDeclarationStatement(), final, BSPTree, S, merged, tree, split, cut, IfStatement(if), parentTree, null, ExpressionStatement(), merged.parent, parentTree, IfStatement(if), isPlusChild, ExpressionStatement(), parentTree.plus, merged, ExpressionStatement(), parentTree.minus, merged, ExpressionStatement(), plus, merge, merged.plus, leafMerger, merged, true, ExpressionStatement(), minus, merge, merged.minus, leafMerger, merged, false, ExpressionStatement(), merged, condense, IfStatement(if), merged.cut, null, ExpressionStatement(), merged.cut, merged, fitToCell, merged.cut, getHyperplane, wholeHyperplane, ReturnStatement(return), merged]
org.apache.commons.math4.geometry.partitioning:BSPTree:split:SubHyperplane<S>#[IfStatement(if), cut, null, ReturnStatement(return), new, BSPTree, S, sub, copySelf, new, BSPTree, S, attribute, null, VariableDeclarationStatement(), final, Hyperplane, S, cHyperplane, cut, getHyperplane, VariableDeclarationStatement(), final, Hyperplane, S, sHyperplane, sub, getHyperplane, VariableDeclarationStatement(), final, SubHyperplane.SplitSubHyperplane, S, subParts, sub, split, cHyperplane, SwitchStatement(switch), subParts, getSide, SwitchCase(case), PLUS, VariableDeclarationStatement(), final, BSPTree, S, split, plus, split, sub, IfStatement(if), cut, split, sHyperplane, getSide, Side.PLUS, ExpressionStatement(), split.plus, new, BSPTree, S, cut, copySelf, split.plus, minus, copySelf, attribute, ExpressionStatement(), split.plus, condense, ExpressionStatement(), split.plus.parent, split, ExpressionStatement(), split.minus, new, BSPTree, S, cut, copySelf, split.minus, minus, copySelf, attribute, ExpressionStatement(), split.minus, condense, ExpressionStatement(), split.minus.parent, split, ReturnStatement(return), split, SwitchCase(case), MINUS, VariableDeclarationStatement(), final, BSPTree, S, split, minus, split, sub, IfStatement(if), cut, split, sHyperplane, getSide, Side.PLUS, ExpressionStatement(), split.plus, new, BSPTree, S, cut, copySelf, plus, copySelf, split.plus, attribute, ExpressionStatement(), split.plus, condense, ExpressionStatement(), split.plus.parent, split, ExpressionStatement(), split.minus, new, BSPTree, S, cut, copySelf, plus, copySelf, split.minus, attribute, ExpressionStatement(), split.minus, condense, ExpressionStatement(), split.minus.parent, split, ReturnStatement(return), split, SwitchCase(case), BOTH, VariableDeclarationStatement(), final, SubHyperplane.SplitSubHyperplane, S, cutParts, cut, split, sHyperplane, VariableDeclarationStatement(), final, BSPTree, S, split, new, BSPTree, S, sub, plus, split, subParts, getPlus, minus, split, subParts, getMinus, null, ExpressionStatement(), split.plus.cut, cutParts, getPlus, ExpressionStatement(), split.minus.cut, cutParts, getMinus, VariableDeclarationStatement(), final, BSPTree, S, tmp, split.plus.minus, ExpressionStatement(), split.plus.minus, split.minus.plus, ExpressionStatement(), split.plus.minus.parent, split.plus, ExpressionStatement(), split.minus.plus, tmp, ExpressionStatement(), split.minus.plus.parent, split.minus, ExpressionStatement(), split.plus, condense, ExpressionStatement(), split.minus, condense, ReturnStatement(return), split, SwitchCase(default), ReturnStatement(return), cHyperplane, sameOrientationAs, sHyperplane, new, BSPTree, S, sub, plus, copySelf, minus, copySelf, attribute, new, BSPTree, S, sub, minus, copySelf, plus, copySelf, attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:insertInTree:BSPTree<S>+boolean+VanishingCutHandler<S>#[ExpressionStatement(), parent, parentTree, IfStatement(if), parentTree, null, IfStatement(if), isPlusChild, ExpressionStatement(), parentTree.plus, this, ExpressionStatement(), parentTree.minus, this, IfStatement(if), cut, null, ForStatement(for), BSPTree, S, tree, this, tree.parent, null, tree, tree.parent, VariableDeclarationStatement(), final, Hyperplane, S, hyperplane, tree.parent.cut, getHyperplane, IfStatement(if), tree, tree.parent.plus, ExpressionStatement(), cut, cut, split, hyperplane, getPlus, ExpressionStatement(), plus, chopOffMinus, hyperplane, vanishingHandler, ExpressionStatement(), minus, chopOffMinus, hyperplane, vanishingHandler, ExpressionStatement(), cut, cut, split, hyperplane, getMinus, ExpressionStatement(), plus, chopOffPlus, hyperplane, vanishingHandler, ExpressionStatement(), minus, chopOffPlus, hyperplane, vanishingHandler, IfStatement(if), cut, null, VariableDeclarationStatement(), final, BSPTree, S, fixed, vanishingHandler, fixNode, this, ExpressionStatement(), cut, fixed.cut, ExpressionStatement(), plus, fixed.plus, ExpressionStatement(), minus, fixed.minus, ExpressionStatement(), attribute, fixed.attribute, IfStatement(if), cut, null, BreakStatement(break), ExpressionStatement(), condense]
org.apache.commons.math4.geometry.partitioning:BSPTree:pruneAroundConvexCell:Object+Object+Object#[VariableDeclarationStatement(), BSPTree, S, tree, new, BSPTree, S, cellAttribute, ForStatement(for), BSPTree, S, current, this, current.parent, null, current, current.parent, VariableDeclarationStatement(), final, SubHyperplane, S, parentCut, current.parent.cut, copySelf, VariableDeclarationStatement(), final, BSPTree, S, sibling, new, BSPTree, S, otherLeafsAttributes, IfStatement(if), current, current.parent.plus, ExpressionStatement(), tree, new, BSPTree, S, parentCut, tree, sibling, internalAttributes, ExpressionStatement(), tree, new, BSPTree, S, parentCut, sibling, tree, internalAttributes, ReturnStatement(return), tree]
org.apache.commons.math4.geometry.partitioning:BSPTree:chopOffMinus:Hyperplane<S>+VanishingCutHandler<S>#[IfStatement(if), cut, null, ExpressionStatement(), cut, cut, split, hyperplane, getPlus, ExpressionStatement(), plus, chopOffMinus, hyperplane, vanishingHandler, ExpressionStatement(), minus, chopOffMinus, hyperplane, vanishingHandler, IfStatement(if), cut, null, VariableDeclarationStatement(), final, BSPTree, S, fixed, vanishingHandler, fixNode, this, ExpressionStatement(), cut, fixed.cut, ExpressionStatement(), plus, fixed.plus, ExpressionStatement(), minus, fixed.minus, ExpressionStatement(), attribute, fixed.attribute]
org.apache.commons.math4.geometry.partitioning:BSPTree:chopOffPlus:Hyperplane<S>+VanishingCutHandler<S>#[IfStatement(if), cut, null, ExpressionStatement(), cut, cut, split, hyperplane, getMinus, ExpressionStatement(), plus, chopOffPlus, hyperplane, vanishingHandler, ExpressionStatement(), minus, chopOffPlus, hyperplane, vanishingHandler, IfStatement(if), cut, null, VariableDeclarationStatement(), final, BSPTree, S, fixed, vanishingHandler, fixNode, this, ExpressionStatement(), cut, fixed.cut, ExpressionStatement(), plus, fixed.plus, ExpressionStatement(), minus, fixed.minus, ExpressionStatement(), attribute, fixed.attribute]
org.apache.commons.math4.geometry.partitioning:Characterization:characterize:BSPTree<S>+SubHyperplane<S>+List<BSPTree<S>>#[IfStatement(if), node, getCut, null, VariableDeclarationStatement(), final, boolean, inside, Boolean, node, getAttribute, IfStatement(if), inside, ExpressionStatement(), addInsideTouching, sub, splitters, ExpressionStatement(), addOutsideTouching, sub, splitters, VariableDeclarationStatement(), final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, VariableDeclarationStatement(), final, SubHyperplane.SplitSubHyperplane, S, split, sub, split, hyperplane, SwitchStatement(switch), split, getSide, SwitchCase(case), PLUS, ExpressionStatement(), characterize, node, getPlus, sub, splitters, BreakStatement(break), SwitchCase(case), MINUS, ExpressionStatement(), characterize, node, getMinus, sub, splitters, BreakStatement(break), SwitchCase(case), BOTH, ExpressionStatement(), splitters, add, node, ExpressionStatement(), characterize, node, getPlus, split, getPlus, splitters, ExpressionStatement(), characterize, node, getMinus, split, getMinus, splitters, ExpressionStatement(), splitters, remove, splitters, size, 1, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError]
org.apache.commons.math4.geometry.partitioning:Characterization:addOutsideTouching:SubHyperplane<S>+List<BSPTree<S>>#[IfStatement(if), outsideTouching, null, ExpressionStatement(), outsideTouching, sub, ExpressionStatement(), outsideTouching, outsideTouching, reunite, sub, ExpressionStatement(), outsideSplitters, addAll, splitters]
org.apache.commons.math4.geometry.partitioning:Characterization:addInsideTouching:SubHyperplane<S>+List<BSPTree<S>>#[IfStatement(if), insideTouching, null, ExpressionStatement(), insideTouching, sub, ExpressionStatement(), insideTouching, insideTouching, reunite, sub, ExpressionStatement(), insideSplitters, addAll, splitters]
org.apache.commons.math4.geometry.partitioning:Characterization:touchOutside:null#[ReturnStatement(return), outsideTouching, null, outsideTouching, isEmpty]
org.apache.commons.math4.geometry.partitioning:Characterization:outsideTouching:null#[ReturnStatement(return), outsideTouching]
org.apache.commons.math4.geometry.partitioning:Characterization:getOutsideSplitters:null#[ReturnStatement(return), outsideSplitters]
org.apache.commons.math4.geometry.partitioning:Characterization:touchInside:null#[ReturnStatement(return), insideTouching, null, insideTouching, isEmpty]
org.apache.commons.math4.geometry.partitioning:Characterization:insideTouching:null#[ReturnStatement(return), insideTouching]
org.apache.commons.math4.geometry.partitioning:Characterization:getInsideSplitters:null#[ReturnStatement(return), insideSplitters]
org.apache.commons.math4.geometry.partitioning:InsideFinder:recurseSides:BSPTree<S>+SubHyperplane<S>#[IfStatement(if), node, getCut, null, IfStatement(if), Boolean, node, getAttribute, ExpressionStatement(), plusFound, true, ExpressionStatement(), minusFound, true, ReturnStatement(return), VariableDeclarationStatement(), final, Hyperplane, S, hyperplane, node, getCut, getHyperplane, VariableDeclarationStatement(), final, SubHyperplane.SplitSubHyperplane, S, split, sub, split, hyperplane, SwitchStatement(switch), split, getSide, SwitchCase(case), PLUS, IfStatement(if), node, getCut, split, sub, getHyperplane, getSide, Side.PLUS, IfStatement(if), region, isEmpty, node, getMinus, ExpressionStatement(), plusFound, true, IfStatement(if), region, isEmpty, node, getMinus, ExpressionStatement(), minusFound, true, IfStatement(if), plusFound, minusFound, ExpressionStatement(), recurseSides, node, getPlus, sub, BreakStatement(break), SwitchCase(case), MINUS, IfStatement(if), node, getCut, split, sub, getHyperplane, getSide, Side.PLUS, IfStatement(if), region, isEmpty, node, getPlus, ExpressionStatement(), plusFound, true, IfStatement(if), region, isEmpty, node, getPlus, ExpressionStatement(), minusFound, true, IfStatement(if), plusFound, minusFound, ExpressionStatement(), recurseSides, node, getMinus, sub, BreakStatement(break), SwitchCase(case), BOTH, ExpressionStatement(), recurseSides, node, getPlus, split, getPlus, IfStatement(if), plusFound, minusFound, ExpressionStatement(), recurseSides, node, getMinus, split, getMinus, BreakStatement(break), SwitchCase(default), IfStatement(if), node, getCut, getHyperplane, sameOrientationAs, sub, getHyperplane, IfStatement(if), node, getPlus, getCut, null, Boolean, node, getPlus, getAttribute, ExpressionStatement(), plusFound, true, IfStatement(if), node, getMinus, getCut, null, Boolean, node, getMinus, getAttribute, ExpressionStatement(), minusFound, true, IfStatement(if), node, getPlus, getCut, null, Boolean, node, getPlus, getAttribute, ExpressionStatement(), minusFound, true, IfStatement(if), node, getMinus, getCut, null, Boolean, node, getMinus, getAttribute, ExpressionStatement(), plusFound, true]
org.apache.commons.math4.geometry.partitioning:InsideFinder:plusFound:null#[ReturnStatement(return), plusFound]
org.apache.commons.math4.geometry.partitioning:InsideFinder:minusFound:null#[ReturnStatement(return), minusFound]
org.apache.commons.math4.geometry.partitioning:NodesSet:add:BSPTree<S>#[EnhancedForStatement(for), final, BSPTree, S, existing, list, IfStatement(if), node, existing, ReturnStatement(return), ExpressionStatement(), list, add, node]
org.apache.commons.math4.geometry.partitioning:NodesSet:addAll:Iterable<BSPTree<S>>#[EnhancedForStatement(for), final, BSPTree, S, node, iterator, ExpressionStatement(), add, node]
org.apache.commons.math4.geometry.partitioning:NodesSet:iterator:null#[ReturnStatement(return), list, iterator]
org.apache.commons.math4.geometry.partitioning:RegionFactory:buildConvex:Hyperplane<S>...#[IfStatement(if), hyperplanes, null, hyperplanes.length, 0, ReturnStatement(return), null, VariableDeclarationStatement(), final, Region, S, region, hyperplanes, 0, wholeSpace, VariableDeclarationStatement(), BSPTree, S, node, region, getTree, false, ExpressionStatement(), node, setAttribute, Boolean.TRUE, EnhancedForStatement(for), final, Hyperplane, S, hyperplane, hyperplanes, IfStatement(if), node, insertCut, hyperplane, ExpressionStatement(), node, setAttribute, null, ExpressionStatement(), node, getPlus, setAttribute, Boolean.FALSE, ExpressionStatement(), node, node, getMinus, ExpressionStatement(), node, setAttribute, Boolean.TRUE, VariableDeclarationStatement(), SubHyperplane, S, s, hyperplane, wholeHyperplane, ForStatement(for), BSPTree, S, tree, node, tree, getParent, null, s, null, tree, tree, getParent, VariableDeclarationStatement(), final, Hyperplane, S, other, tree, getParent, getCut, getHyperplane, VariableDeclarationStatement(), final, SplitSubHyperplane, S, split, s, split, other, SwitchStatement(switch), split, getSide, SwitchCase(case), HYPER, IfStatement(if), hyperplane, sameOrientationAs, other, ReturnStatement(return), getComplement, hyperplanes, 0, wholeSpace, BreakStatement(break), SwitchCase(case), PLUS, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_CONVEX_HYPERPLANES, SwitchCase(default), ExpressionStatement(), s, split, getMinus, ReturnStatement(return), region]
org.apache.commons.math4.geometry.partitioning:RegionFactory:union:Region<S>+Region<S>#[VariableDeclarationStatement(), final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, UnionMerger, ExpressionStatement(), tree, visit, nodeCleaner, ReturnStatement(return), region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:intersection:Region<S>+Region<S>#[VariableDeclarationStatement(), final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, IntersectionMerger, ExpressionStatement(), tree, visit, nodeCleaner, ReturnStatement(return), region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:xor:Region<S>+Region<S>#[VariableDeclarationStatement(), final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, XorMerger, ExpressionStatement(), tree, visit, nodeCleaner, ReturnStatement(return), region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:difference:Region<S>+Region<S>#[VariableDeclarationStatement(), final, BSPTree, S, tree, region1, getTree, false, merge, region2, getTree, false, new, DifferenceMerger, region1, region2, ExpressionStatement(), tree, visit, nodeCleaner, ReturnStatement(return), region1, buildNew, tree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:getComplement:Region<S>#[ReturnStatement(return), region, buildNew, recurseComplement, region, getTree, false]
org.apache.commons.math4.geometry.partitioning:RegionFactory:recurseComplement:BSPTree<S>#[VariableDeclarationStatement(), final, Map, BSPTree, S, BSPTree, S, map, new, HashMap, BSPTree, S, BSPTree, S, VariableDeclarationStatement(), final, BSPTree, S, transformedTree, recurseComplement, node, map, EnhancedForStatement(for), final, Map.Entry, BSPTree, S, BSPTree, S, entry, map, entrySet, IfStatement(if), entry, getKey, getCut, null, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, S, original, BoundaryAttribute, S, entry, getKey, getAttribute, IfStatement(if), original, null, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, S, transformed, BoundaryAttribute, S, entry, getValue, getAttribute, EnhancedForStatement(for), final, BSPTree, S, splitter, original, getSplitters, ExpressionStatement(), transformed, getSplitters, add, map, get, splitter, ReturnStatement(return), transformedTree]
org.apache.commons.math4.geometry.partitioning:RegionFactory:recurseComplement:BSPTree<S>+Map<BSPTree<S>,BSPTree<S>>#[VariableDeclarationStatement(), final, BSPTree, S, transformedNode, IfStatement(if), node, getCut, null, ExpressionStatement(), transformedNode, new, BSPTree, S, Boolean, node, getAttribute, Boolean.FALSE, Boolean.TRUE, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BoundaryAttribute, S, attribute, BoundaryAttribute, S, node, getAttribute, IfStatement(if), attribute, null, VariableDeclarationStatement(), final, SubHyperplane, S, plusOutside, attribute, getPlusInside, null, null, attribute, getPlusInside, copySelf, VariableDeclarationStatement(), final, SubHyperplane, S, plusInside, attribute, getPlusOutside, null, null, attribute, getPlusOutside, copySelf, ExpressionStatement(), attribute, new, BoundaryAttribute, S, plusOutside, plusInside, new, NodesSet, S, ExpressionStatement(), transformedNode, new, BSPTree, S, node, getCut, copySelf, recurseComplement, node, getPlus, map, recurseComplement, node, getMinus, map, attribute, ExpressionStatement(), map, put, node, transformedNode, ReturnStatement(return), transformedNode]
org.apache.commons.math4.geometry.spherical.oned:Arc:getInf:null#[ReturnStatement(return), lower]
org.apache.commons.math4.geometry.spherical.oned:Arc:getSup:null#[ReturnStatement(return), upper]
org.apache.commons.math4.geometry.spherical.oned:Arc:getSize:null#[ReturnStatement(return), upper, lower]
org.apache.commons.math4.geometry.spherical.oned:Arc:getBarycenter:null#[ReturnStatement(return), middle]
org.apache.commons.math4.geometry.spherical.oned:Arc:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.spherical.oned:Arc:checkPoint:double#[VariableDeclarationStatement(), final, double, normalizedPoint, MathUtils, normalizeAngle, point, middle, IfStatement(if), normalizedPoint, lower, tolerance, normalizedPoint, upper, tolerance, ReturnStatement(return), Location.OUTSIDE, IfStatement(if), normalizedPoint, lower, tolerance, normalizedPoint, upper, tolerance, ReturnStatement(return), Location.INSIDE, ReturnStatement(return), getSize, MathUtils.TWO_PI, tolerance, Location.INSIDE, Location.BOUNDARY]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:buildTree:double+double+double#[IfStatement(if), Precision, equals, lower, upper, 0, upper, lower, MathUtils.TWO_PI, ReturnStatement(return), new, BSPTree, Sphere1D, Boolean.TRUE, IfStatement(if), lower, upper, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper, true, VariableDeclarationStatement(), final, double, normalizedLower, MathUtils, normalizeAngle, lower, FastMath.PI, VariableDeclarationStatement(), final, double, normalizedUpper, normalizedLower, upper, lower, VariableDeclarationStatement(), final, SubHyperplane, Sphere1D, lowerCut, new, LimitAngle, new, S1Point, normalizedLower, false, tolerance, wholeHyperplane, IfStatement(if), normalizedUpper, MathUtils.TWO_PI, VariableDeclarationStatement(), final, SubHyperplane, Sphere1D, upperCut, new, LimitAngle, new, S1Point, normalizedUpper, true, tolerance, wholeHyperplane, ReturnStatement(return), new, BSPTree, Sphere1D, lowerCut, new, BSPTree, Sphere1D, Boolean.FALSE, new, BSPTree, Sphere1D, upperCut, new, BSPTree, Sphere1D, Boolean.FALSE, new, BSPTree, Sphere1D, Boolean.TRUE, null, null, VariableDeclarationStatement(), final, SubHyperplane, Sphere1D, upperCut, new, LimitAngle, new, S1Point, normalizedUpper, MathUtils.TWO_PI, true, tolerance, wholeHyperplane, ReturnStatement(return), new, BSPTree, Sphere1D, lowerCut, new, BSPTree, Sphere1D, upperCut, new, BSPTree, Sphere1D, Boolean.FALSE, new, BSPTree, Sphere1D, Boolean.TRUE, null, new, BSPTree, Sphere1D, Boolean.TRUE, null]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:check2PiConsistency:null#[VariableDeclarationStatement(), BSPTree, Sphere1D, root, getTree, false, IfStatement(if), root, getCut, null, ReturnStatement(return), VariableDeclarationStatement(), final, Boolean, stateBefore, Boolean, getFirstLeaf, root, getAttribute, VariableDeclarationStatement(), final, Boolean, stateAfter, Boolean, getLastLeaf, root, getAttribute, IfStatement(if), stateBefore, stateAfter, ThrowStatement(throw), new, InconsistentStateAt2PiWrapping]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getFirstLeaf:BSPTree<Sphere1D>#[IfStatement(if), root, getCut, null, ReturnStatement(return), root, VariableDeclarationStatement(), BSPTree, Sphere1D, smallest, null, ForStatement(for), BSPTree, Sphere1D, n, root, n, null, n, previousInternalNode, n, ExpressionStatement(), smallest, n, ReturnStatement(return), leafBefore, smallest]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getLastLeaf:BSPTree<Sphere1D>#[IfStatement(if), root, getCut, null, ReturnStatement(return), root, VariableDeclarationStatement(), BSPTree, Sphere1D, largest, null, ForStatement(for), BSPTree, Sphere1D, n, root, n, null, n, nextInternalNode, n, ExpressionStatement(), largest, n, ReturnStatement(return), leafAfter, largest]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getFirstArcStart:null#[VariableDeclarationStatement(), BSPTree, Sphere1D, node, getTree, false, IfStatement(if), node, getCut, null, ReturnStatement(return), null, ExpressionStatement(), node, getFirstLeaf, node, getParent, WhileStatement(while), node, null, isArcStart, node, ExpressionStatement(), node, nextInternalNode, node, ReturnStatement(return), node]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isArcStart:BSPTree<Sphere1D>#[IfStatement(if), Boolean, leafBefore, node, getAttribute, ReturnStatement(return), false, IfStatement(if), Boolean, leafAfter, node, getAttribute, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isArcEnd:BSPTree<Sphere1D>#[IfStatement(if), Boolean, leafBefore, node, getAttribute, ReturnStatement(return), false, IfStatement(if), Boolean, leafAfter, node, getAttribute, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:nextInternalNode:BSPTree<Sphere1D>#[IfStatement(if), childAfter, node, getCut, null, ReturnStatement(return), leafAfter, node, getParent, WhileStatement(while), isAfterParent, node, ExpressionStatement(), node, node, getParent, ReturnStatement(return), node, getParent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:previousInternalNode:BSPTree<Sphere1D>#[IfStatement(if), childBefore, node, getCut, null, ReturnStatement(return), leafBefore, node, getParent, WhileStatement(while), isBeforeParent, node, ExpressionStatement(), node, node, getParent, ReturnStatement(return), node, getParent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:leafBefore:BSPTree<Sphere1D>#[ExpressionStatement(), node, childBefore, node, WhileStatement(while), node, getCut, null, ExpressionStatement(), node, childAfter, node, ReturnStatement(return), node]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:leafAfter:BSPTree<Sphere1D>#[ExpressionStatement(), node, childAfter, node, WhileStatement(while), node, getCut, null, ExpressionStatement(), node, childBefore, node, ReturnStatement(return), node]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isBeforeParent:BSPTree<Sphere1D>#[VariableDeclarationStatement(), final, BSPTree, Sphere1D, parent, node, getParent, IfStatement(if), parent, null, ReturnStatement(return), false, ReturnStatement(return), node, childBefore, parent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isAfterParent:BSPTree<Sphere1D>#[VariableDeclarationStatement(), final, BSPTree, Sphere1D, parent, node, getParent, IfStatement(if), parent, null, ReturnStatement(return), false, ReturnStatement(return), node, childAfter, parent]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:childBefore:BSPTree<Sphere1D>#[IfStatement(if), isDirect, node, ReturnStatement(return), node, getMinus, ReturnStatement(return), node, getPlus]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:childAfter:BSPTree<Sphere1D>#[IfStatement(if), isDirect, node, ReturnStatement(return), node, getPlus, ReturnStatement(return), node, getMinus]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:isDirect:BSPTree<Sphere1D>#[ReturnStatement(return), LimitAngle, node, getCut, getHyperplane, isDirect]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:getAngle:BSPTree<Sphere1D>#[ReturnStatement(return), LimitAngle, node, getCut, getHyperplane, getLocation, getAlpha]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:buildNew:BSPTree<Sphere1D>#[ReturnStatement(return), new, ArcsSet, tree, getTolerance]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:computeGeometricalProperties:null#[IfStatement(if), getTree, false, getCut, null, ExpressionStatement(), setBarycenter, S1Point.NaN, ExpressionStatement(), setSize, Boolean, getTree, false, getAttribute, MathUtils.TWO_PI, 0, VariableDeclarationStatement(), double, size, 0.0, VariableDeclarationStatement(), double, sum, 0.0, EnhancedForStatement(for), final, double, a, this, VariableDeclarationStatement(), final, double, length, a, 1, a, 0, ExpressionStatement(), size, length, ExpressionStatement(), sum, length, a, 0, a, 1, ExpressionStatement(), setSize, size, IfStatement(if), Precision, equals, size, MathUtils.TWO_PI, 0, ExpressionStatement(), setBarycenter, S1Point.NaN, IfStatement(if), size, Precision.SAFE_MIN, ExpressionStatement(), setBarycenter, new, S1Point, sum, 2, size, VariableDeclarationStatement(), final, LimitAngle, limit, LimitAngle, getTree, false, getCut, getHyperplane, ExpressionStatement(), setBarycenter, limit, getLocation]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:projectToBoundary:Point<Sphere1D>#[VariableDeclarationStatement(), final, double, alpha, S1Point, point, getAlpha, VariableDeclarationStatement(), boolean, wrapFirst, false, VariableDeclarationStatement(), double, first, Double.NaN, VariableDeclarationStatement(), double, previous, Double.NaN, EnhancedForStatement(for), final, double, a, this, IfStatement(if), Double, isNaN, first, ExpressionStatement(), first, a, 0, IfStatement(if), wrapFirst, IfStatement(if), alpha, a, 0, IfStatement(if), Double, isNaN, previous, ExpressionStatement(), wrapFirst, true, VariableDeclarationStatement(), final, double, previousOffset, alpha, previous, VariableDeclarationStatement(), final, double, currentOffset, a, 0, alpha, IfStatement(if), previousOffset, currentOffset, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, previous, previousOffset, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, a, 0, currentOffset, IfStatement(if), alpha, a, 1, VariableDeclarationStatement(), final, double, offset0, a, 0, alpha, VariableDeclarationStatement(), final, double, offset1, alpha, a, 1, IfStatement(if), offset0, offset1, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, a, 1, offset1, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, a, 0, offset0, ExpressionStatement(), previous, a, 1, IfStatement(if), Double, isNaN, previous, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, null, MathUtils.TWO_PI, IfStatement(if), wrapFirst, VariableDeclarationStatement(), final, double, previousOffset, alpha, previous, MathUtils.TWO_PI, VariableDeclarationStatement(), final, double, currentOffset, first, alpha, IfStatement(if), previousOffset, currentOffset, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, previous, previousOffset, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, first, currentOffset, VariableDeclarationStatement(), final, double, previousOffset, alpha, previous, VariableDeclarationStatement(), final, double, currentOffset, first, MathUtils.TWO_PI, alpha, IfStatement(if), previousOffset, currentOffset, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, previous, previousOffset, ReturnStatement(return), new, BoundaryProjection, Sphere1D, point, new, S1Point, first, currentOffset]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:asList:null#[VariableDeclarationStatement(), final, List, Arc, list, new, ArrayList, Arc, EnhancedForStatement(for), final, double, a, this, ExpressionStatement(), list, add, new, Arc, a, 0, a, 1, getTolerance, ReturnStatement(return), list]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:iterator:null#[ReturnStatement(return), new, SubArcsIterator]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:side:Arc#[ReturnStatement(return), split, arc, getSide]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:split:Arc#[VariableDeclarationStatement(), final, List, Double, minus, new, ArrayList, Double, VariableDeclarationStatement(), final, List, Double, plus, new, ArrayList, Double, VariableDeclarationStatement(), final, double, reference, FastMath.PI, arc, getInf, VariableDeclarationStatement(), final, double, arcLength, arc, getSup, arc, getInf, EnhancedForStatement(for), final, double, a, this, VariableDeclarationStatement(), final, double, syncedStart, MathUtils, normalizeAngle, a, 0, reference, arc, getInf, VariableDeclarationStatement(), final, double, arcOffset, a, 0, syncedStart, VariableDeclarationStatement(), final, double, syncedEnd, a, 1, arcOffset, IfStatement(if), syncedStart, arcLength, ExpressionStatement(), minus, add, a, 0, IfStatement(if), syncedEnd, arcLength, VariableDeclarationStatement(), final, double, minusToPlus, arcLength, arcOffset, ExpressionStatement(), minus, add, minusToPlus, ExpressionStatement(), plus, add, minusToPlus, IfStatement(if), syncedEnd, MathUtils.TWO_PI, VariableDeclarationStatement(), final, double, plusToMinus, MathUtils.TWO_PI, arcOffset, ExpressionStatement(), plus, add, plusToMinus, ExpressionStatement(), minus, add, plusToMinus, ExpressionStatement(), minus, add, a, 1, ExpressionStatement(), plus, add, a, 1, ExpressionStatement(), minus, add, a, 1, ExpressionStatement(), plus, add, a, 0, IfStatement(if), syncedEnd, MathUtils.TWO_PI, VariableDeclarationStatement(), final, double, plusToMinus, MathUtils.TWO_PI, arcOffset, ExpressionStatement(), plus, add, plusToMinus, ExpressionStatement(), minus, add, plusToMinus, IfStatement(if), syncedEnd, MathUtils.TWO_PI, arcLength, VariableDeclarationStatement(), final, double, minusToPlus, MathUtils.TWO_PI, arcLength, arcOffset, ExpressionStatement(), minus, add, minusToPlus, ExpressionStatement(), plus, add, minusToPlus, ExpressionStatement(), plus, add, a, 1, ExpressionStatement(), minus, add, a, 1, ExpressionStatement(), plus, add, a, 1, ReturnStatement(return), new, Split, createSplitPart, plus, createSplitPart, minus]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:addArcLimit:BSPTree<Sphere1D>+double+boolean#[VariableDeclarationStatement(), final, LimitAngle, limit, new, LimitAngle, new, S1Point, alpha, isStart, getTolerance, VariableDeclarationStatement(), final, BSPTree, Sphere1D, node, tree, getCell, limit, getLocation, getTolerance, IfStatement(if), node, getCut, null, ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), node, insertCut, limit, ExpressionStatement(), node, setAttribute, null, ExpressionStatement(), node, getPlus, setAttribute, Boolean.FALSE, ExpressionStatement(), node, getMinus, setAttribute, Boolean.TRUE]
org.apache.commons.math4.geometry.spherical.oned:ArcsSet:createSplitPart:List<Double>#[IfStatement(if), limits, isEmpty, ReturnStatement(return), null, ForStatement(for), int, i, 0, i, limits, size, i, VariableDeclarationStatement(), final, int, j, i, 1, limits, size, VariableDeclarationStatement(), final, double, lA, limits, get, i, VariableDeclarationStatement(), final, double, lB, MathUtils, normalizeAngle, limits, get, j, lA, IfStatement(if), FastMath, abs, lB, lA, getTolerance, IfStatement(if), j, 0, ExpressionStatement(), limits, remove, j, ExpressionStatement(), limits, remove, i, ExpressionStatement(), i, i, 1, VariableDeclarationStatement(), final, double, lEnd, limits, remove, limits, size, 1, VariableDeclarationStatement(), final, double, lStart, limits, remove, 0, IfStatement(if), limits, isEmpty, IfStatement(if), lEnd, lStart, FastMath.PI, ReturnStatement(return), new, ArcsSet, new, BSPTree, Sphere1D, Boolean.TRUE, getTolerance, ReturnStatement(return), null, ExpressionStatement(), limits, add, limits, remove, 0, MathUtils.TWO_PI, VariableDeclarationStatement(), BSPTree, Sphere1D, tree, new, BSPTree, Sphere1D, Boolean.FALSE, ForStatement(for), int, i, 0, i, limits, size, 1, i, 2, ExpressionStatement(), addArcLimit, tree, limits, get, i, true, ExpressionStatement(), addArcLimit, tree, limits, get, i, 1, false, IfStatement(if), tree, getCut, null, ReturnStatement(return), null, ReturnStatement(return), new, ArcsSet, tree, getTolerance]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:copySelf:null#[ReturnStatement(return), this]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getOffset:Point<Sphere1D>#[VariableDeclarationStatement(), final, double, delta, S1Point, point, getAlpha, location, getAlpha, ReturnStatement(return), direct, delta, delta]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:isDirect:null#[ReturnStatement(return), direct]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getReverse:null#[ReturnStatement(return), new, LimitAngle, location, direct, tolerance]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:wholeHyperplane:null#[ReturnStatement(return), new, SubLimitAngle, this, null]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:wholeSpace:null#[ReturnStatement(return), new, ArcsSet, tolerance]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:sameOrientationAs:Hyperplane<Sphere1D>#[ReturnStatement(return), direct, LimitAngle, other, direct]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getLocation:null#[ReturnStatement(return), location]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:project:Point<Sphere1D>#[ReturnStatement(return), location]
org.apache.commons.math4.geometry.spherical.oned:LimitAngle:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.spherical.oned:S1Point:getAlpha:null#[ReturnStatement(return), alpha]
org.apache.commons.math4.geometry.spherical.oned:S1Point:getVector:null#[ReturnStatement(return), vector]
org.apache.commons.math4.geometry.spherical.oned:S1Point:getSpace:null#[ReturnStatement(return), Sphere1D, getInstance]
org.apache.commons.math4.geometry.spherical.oned:S1Point:isNaN:null#[ReturnStatement(return), Double, isNaN, alpha]
org.apache.commons.math4.geometry.spherical.oned:S1Point:distance:Point<Sphere1D>#[ReturnStatement(return), distance, this, S1Point, point]
org.apache.commons.math4.geometry.spherical.oned:S1Point:distance:S1Point+S1Point#[ReturnStatement(return), Vector2D, angle, p1.vector, p2.vector]
org.apache.commons.math4.geometry.spherical.oned:S1Point:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, S1Point, VariableDeclarationStatement(), final, S1Point, rhs, S1Point, other, IfStatement(if), rhs, isNaN, ReturnStatement(return), this, isNaN, ReturnStatement(return), alpha, rhs.alpha, ReturnStatement(return), false]
org.apache.commons.math4.geometry.spherical.oned:S1Point:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 542, ReturnStatement(return), 1759, MathUtils, hash, alpha]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:getDimension:null#[ReturnStatement(return), 1]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:getSubSpace:null#[ThrowStatement(throw), new, NoSubSpaceException]
org.apache.commons.math4.geometry.spherical.oned:Sphere1D:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:getSize:null#[ReturnStatement(return), 0]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:isEmpty:null#[ReturnStatement(return), false]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:buildNew:Hyperplane<Sphere1D>+Region<Sphere1D>#[ReturnStatement(return), new, SubLimitAngle, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.spherical.oned:SubLimitAngle:split:Hyperplane<Sphere1D>#[VariableDeclarationStatement(), final, double, global, hyperplane, getOffset, LimitAngle, getHyperplane, getLocation, ReturnStatement(return), global, 1.0e-10, new, SplitSubHyperplane, Sphere1D, null, this, new, SplitSubHyperplane, Sphere1D, this, null]
org.apache.commons.math4.geometry.spherical.twod:Circle:copySelf:null#[ReturnStatement(return), new, Circle, this]
org.apache.commons.math4.geometry.spherical.twod:Circle:reset:Vector3D#[ExpressionStatement(), this, pole, newPole, normalize, ExpressionStatement(), this, x, newPole, orthogonal, ExpressionStatement(), this, y, Vector3D, crossProduct, newPole, x, normalize]
org.apache.commons.math4.geometry.spherical.twod:Circle:revertSelf:null#[ExpressionStatement(), y, y, negate, ExpressionStatement(), pole, pole, negate]
org.apache.commons.math4.geometry.spherical.twod:Circle:getReverse:null#[ReturnStatement(return), new, Circle, pole, negate, x, y, negate, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:project:Point<Sphere2D>#[ReturnStatement(return), toSpace, toSubSpace, point]
org.apache.commons.math4.geometry.spherical.twod:Circle:getTolerance:null#[ReturnStatement(return), tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:toSubSpace:Point<Sphere2D>#[ReturnStatement(return), new, S1Point, getPhase, S2Point, point, getVector]
org.apache.commons.math4.geometry.spherical.twod:Circle:getPhase:Vector3D#[ReturnStatement(return), FastMath.PI, FastMath, atan2, direction, dotProduct, y, direction, dotProduct, x]
org.apache.commons.math4.geometry.spherical.twod:Circle:toSpace:Point<Sphere1D>#[ReturnStatement(return), new, S2Point, getPointAt, S1Point, point, getAlpha]
org.apache.commons.math4.geometry.spherical.twod:Circle:getPointAt:double#[ReturnStatement(return), new, Vector3D, FastMath, cos, alpha, x, FastMath, sin, alpha, y]
org.apache.commons.math4.geometry.spherical.twod:Circle:getXAxis:null#[ReturnStatement(return), x]
org.apache.commons.math4.geometry.spherical.twod:Circle:getYAxis:null#[ReturnStatement(return), y]
org.apache.commons.math4.geometry.spherical.twod:Circle:getPole:null#[ReturnStatement(return), pole]
org.apache.commons.math4.geometry.spherical.twod:Circle:getInsideArc:Circle#[VariableDeclarationStatement(), final, double, alpha, getPhase, other.pole, VariableDeclarationStatement(), final, double, halfPi, 0.5, FastMath.PI, ReturnStatement(return), new, Arc, alpha, halfPi, alpha, halfPi, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:wholeHyperplane:null#[ReturnStatement(return), new, SubCircle, this, new, ArcsSet, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:wholeSpace:null#[ReturnStatement(return), new, SphericalPolygonsSet, tolerance]
org.apache.commons.math4.geometry.spherical.twod:Circle:getOffset:Point<Sphere2D>#[ReturnStatement(return), getOffset, S2Point, point, getVector]
org.apache.commons.math4.geometry.spherical.twod:Circle:getOffset:Vector3D#[ReturnStatement(return), Vector3D, angle, pole, direction, 0.5, FastMath.PI]
org.apache.commons.math4.geometry.spherical.twod:Circle:sameOrientationAs:Hyperplane<Sphere2D>#[VariableDeclarationStatement(), final, Circle, otherC, Circle, other, ReturnStatement(return), Vector3D, dotProduct, pole, otherC.pole, 0.0]
org.apache.commons.math4.geometry.spherical.twod:Circle:getTransform:Rotation#[ReturnStatement(return), new, CircleTransform, rotation]
org.apache.commons.math4.geometry.spherical.twod:Edge:getStart:null#[ReturnStatement(return), start]
org.apache.commons.math4.geometry.spherical.twod:Edge:getEnd:null#[ReturnStatement(return), end]
org.apache.commons.math4.geometry.spherical.twod:Edge:getLength:null#[ReturnStatement(return), length]
org.apache.commons.math4.geometry.spherical.twod:Edge:getCircle:null#[ReturnStatement(return), circle]
org.apache.commons.math4.geometry.spherical.twod:Edge:getPointAt:double#[ReturnStatement(return), circle, getPointAt, alpha, circle, getPhase, start, getLocation, getVector]
org.apache.commons.math4.geometry.spherical.twod:Edge:setNextEdge:Edge#[ExpressionStatement(), end, next, getStart, ExpressionStatement(), end, setIncoming, this, ExpressionStatement(), end, bindWith, getCircle]
org.apache.commons.math4.geometry.spherical.twod:Edge:split:Circle+List<Edge>+List<Edge>#[VariableDeclarationStatement(), final, double, edgeStart, circle, getPhase, start, getLocation, getVector, VariableDeclarationStatement(), final, Arc, arc, circle, getInsideArc, splitCircle, VariableDeclarationStatement(), final, double, arcRelativeStart, MathUtils, normalizeAngle, arc, getInf, edgeStart, FastMath.PI, edgeStart, VariableDeclarationStatement(), final, double, arcRelativeEnd, arcRelativeStart, arc, getSize, VariableDeclarationStatement(), final, double, unwrappedEnd, arcRelativeEnd, MathUtils.TWO_PI, VariableDeclarationStatement(), final, double, tolerance, circle, getTolerance, VariableDeclarationStatement(), Vertex, previousVertex, start, IfStatement(if), unwrappedEnd, length, tolerance, ExpressionStatement(), insideList, add, this, VariableDeclarationStatement(), double, alreadyManagedLength, 0, IfStatement(if), unwrappedEnd, 0, ExpressionStatement(), previousVertex, addSubEdge, previousVertex, new, Vertex, new, S2Point, circle, getPointAt, edgeStart, unwrappedEnd, unwrappedEnd, insideList, splitCircle, ExpressionStatement(), alreadyManagedLength, unwrappedEnd, IfStatement(if), arcRelativeStart, length, tolerance, IfStatement(if), unwrappedEnd, 0, ExpressionStatement(), previousVertex, addSubEdge, previousVertex, end, length, alreadyManagedLength, outsideList, splitCircle, ExpressionStatement(), outsideList, add, this, ExpressionStatement(), previousVertex, addSubEdge, previousVertex, new, Vertex, new, S2Point, circle, getPointAt, edgeStart, arcRelativeStart, arcRelativeStart, alreadyManagedLength, outsideList, splitCircle, ExpressionStatement(), alreadyManagedLength, arcRelativeStart, IfStatement(if), arcRelativeEnd, length, tolerance, ExpressionStatement(), previousVertex, addSubEdge, previousVertex, end, length, alreadyManagedLength, insideList, splitCircle, ExpressionStatement(), previousVertex, addSubEdge, previousVertex, new, Vertex, new, S2Point, circle, getPointAt, edgeStart, arcRelativeStart, arcRelativeStart, alreadyManagedLength, insideList, splitCircle, ExpressionStatement(), alreadyManagedLength, arcRelativeStart, ExpressionStatement(), previousVertex, addSubEdge, previousVertex, end, length, alreadyManagedLength, outsideList, splitCircle]
org.apache.commons.math4.geometry.spherical.twod:Edge:addSubEdge:Vertex+Vertex+double+List<Edge>+Circle#[IfStatement(if), subLength, circle, getTolerance, ReturnStatement(return), subStart, ExpressionStatement(), subEnd, bindWith, splitCircle, VariableDeclarationStatement(), final, Edge, edge, new, Edge, subStart, subEnd, subLength, circle, ExpressionStatement(), list, add, edge, ReturnStatement(return), subEnd]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:visitOrder:BSPTree<Sphere2D>#[ReturnStatement(return), Order.MINUS_SUB_PLUS]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:visitInternalNode:BSPTree<Sphere2D>#[ExpressionStatement(), nodeToEdgesList, put, node, new, ArrayList, Edge, VariableDeclarationStatement(), SuppressWarnings, "unchecked", final, BoundaryAttribute, Sphere2D, attribute, BoundaryAttribute, Sphere2D, node, getAttribute, IfStatement(if), attribute, getPlusOutside, null, ExpressionStatement(), addContribution, SubCircle, attribute, getPlusOutside, false, node, IfStatement(if), attribute, getPlusInside, null, ExpressionStatement(), addContribution, SubCircle, attribute, getPlusInside, true, node]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:addContribution:SubCircle+boolean+BSPTree<Sphere2D>#[VariableDeclarationStatement(), final, Circle, circle, Circle, sub, getHyperplane, VariableDeclarationStatement(), final, List, Arc, arcs, ArcsSet, sub, getRemainingRegion, asList, EnhancedForStatement(for), final, Arc, a, arcs, VariableDeclarationStatement(), final, Vertex, start, new, Vertex, S2Point, circle, toSpace, new, S1Point, a, getInf, VariableDeclarationStatement(), final, Vertex, end, new, Vertex, S2Point, circle, toSpace, new, S1Point, a, getSup, ExpressionStatement(), start, bindWith, circle, ExpressionStatement(), end, bindWith, circle, VariableDeclarationStatement(), final, Edge, edge, IfStatement(if), reversed, ExpressionStatement(), edge, new, Edge, end, start, a, getSize, circle, getReverse, ExpressionStatement(), edge, new, Edge, start, end, a, getSize, circle, ExpressionStatement(), edgeToNode, put, edge, node, ExpressionStatement(), nodeToEdgesList, get, node, add, edge]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:getFollowingEdge:Edge#[VariableDeclarationStatement(), final, S2Point, point, previous, getEnd, getLocation, VariableDeclarationStatement(), final, List, BSPTree, Sphere2D, candidates, root, getCloseCuts, point, tolerance, VariableDeclarationStatement(), double, closest, tolerance, VariableDeclarationStatement(), Edge, following, null, EnhancedForStatement(for), final, BSPTree, Sphere2D, node, candidates, EnhancedForStatement(for), final, Edge, edge, nodeToEdgesList, get, node, IfStatement(if), edge, previous, edge, getStart, getIncoming, null, VariableDeclarationStatement(), final, Vector3D, edgeStart, edge, getStart, getLocation, getVector, VariableDeclarationStatement(), final, double, gap, Vector3D, angle, point, getVector, edgeStart, IfStatement(if), gap, closest, ExpressionStatement(), closest, gap, ExpressionStatement(), following, edge, IfStatement(if), following, null, VariableDeclarationStatement(), final, Vector3D, previousStart, previous, getStart, getLocation, getVector, IfStatement(if), Vector3D, angle, point, getVector, previousStart, tolerance, ReturnStatement(return), previous, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.OUTLINE_BOUNDARY_LOOP_OPEN, ReturnStatement(return), following]
org.apache.commons.math4.geometry.spherical.twod:EdgesBuilder:getEdges:null#[EnhancedForStatement(for), final, Edge, previous, edgeToNode, keySet, ExpressionStatement(), previous, setNextEdge, getFollowingEdge, previous, ReturnStatement(return), new, ArrayList, Edge, edgeToNode, keySet]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:visitOrder:BSPTree<Sphere2D>#[ReturnStatement(return), Order.MINUS_SUB_PLUS]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:visitLeafNode:BSPTree<Sphere2D>#[IfStatement(if), Boolean, node, getAttribute, VariableDeclarationStatement(), final, SphericalPolygonsSet, convex, new, SphericalPolygonsSet, node, pruneAroundConvexCell, Boolean.TRUE, Boolean.FALSE, null, tolerance, VariableDeclarationStatement(), final, List, Vertex, boundary, convex, getBoundaryLoops, IfStatement(if), boundary, size, 1, ThrowStatement(throw), new, MathInternalError, VariableDeclarationStatement(), final, double, area, convexCellArea, boundary, get, 0, VariableDeclarationStatement(), final, Vector3D, barycenter, convexCellBarycenter, boundary, get, 0, ExpressionStatement(), convexCellsInsidePoints, add, barycenter, ExpressionStatement(), summedArea, area, ExpressionStatement(), summedBarycenter, new, Vector3D, 1, summedBarycenter, area, barycenter]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:convexCellArea:Vertex#[VariableDeclarationStatement(), int, n, 0, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), Edge, e, start, getOutgoing, n, 0, e, getStart, start, e, e, getEnd, getOutgoing, VariableDeclarationStatement(), final, Vector3D, previousPole, e, getCircle, getPole, VariableDeclarationStatement(), final, Vector3D, nextPole, e, getEnd, getOutgoing, getCircle, getPole, VariableDeclarationStatement(), final, Vector3D, point, e, getEnd, getLocation, getVector, VariableDeclarationStatement(), double, alpha, FastMath, atan2, Vector3D, dotProduct, nextPole, Vector3D, crossProduct, point, previousPole, Vector3D, dotProduct, nextPole, previousPole, IfStatement(if), alpha, 0, ExpressionStatement(), alpha, MathUtils.TWO_PI, ExpressionStatement(), sum, alpha, ExpressionStatement(), n, ReturnStatement(return), sum, n, 2, FastMath.PI]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:convexCellBarycenter:Vertex#[VariableDeclarationStatement(), int, n, 0, VariableDeclarationStatement(), Vector3D, sumB, Vector3D.ZERO, ForStatement(for), Edge, e, start, getOutgoing, n, 0, e, getStart, start, e, e, getEnd, getOutgoing, ExpressionStatement(), sumB, new, Vector3D, 1, sumB, e, getLength, e, getCircle, getPole, ExpressionStatement(), n, ReturnStatement(return), sumB, normalize]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:getArea:null#[ReturnStatement(return), summedArea]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:getBarycenter:null#[IfStatement(if), summedBarycenter, getNormSq, 0, ReturnStatement(return), S2Point.NaN, ReturnStatement(return), new, S2Point, summedBarycenter]
org.apache.commons.math4.geometry.spherical.twod:PropertiesComputer:getConvexCellsInsidePoints:null#[ReturnStatement(return), convexCellsInsidePoints]
org.apache.commons.math4.geometry.spherical.twod:S2Point:vector:double+double#[IfStatement(if), phi, 0, phi, FastMath.PI, ThrowStatement(throw), new, OutOfRangeException, phi, 0, FastMath.PI, VariableDeclarationStatement(), final, double, cosTheta, FastMath, cos, theta, VariableDeclarationStatement(), final, double, sinTheta, FastMath, sin, theta, VariableDeclarationStatement(), final, double, cosPhi, FastMath, cos, phi, VariableDeclarationStatement(), final, double, sinPhi, FastMath, sin, phi, ReturnStatement(return), new, Vector3D, cosTheta, sinPhi, sinTheta, sinPhi, cosPhi]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getTheta:null#[ReturnStatement(return), theta]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getPhi:null#[ReturnStatement(return), phi]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getVector:null#[ReturnStatement(return), vector]
org.apache.commons.math4.geometry.spherical.twod:S2Point:getSpace:null#[ReturnStatement(return), Sphere2D, getInstance]
org.apache.commons.math4.geometry.spherical.twod:S2Point:isNaN:null#[ReturnStatement(return), Double, isNaN, theta, Double, isNaN, phi]
org.apache.commons.math4.geometry.spherical.twod:S2Point:negate:null#[ReturnStatement(return), new, S2Point, theta, FastMath.PI, phi, vector, negate]
org.apache.commons.math4.geometry.spherical.twod:S2Point:distance:Point<Sphere2D>#[ReturnStatement(return), distance, this, S2Point, point]
org.apache.commons.math4.geometry.spherical.twod:S2Point:distance:S2Point+S2Point#[ReturnStatement(return), Vector3D, angle, p1.vector, p2.vector]
org.apache.commons.math4.geometry.spherical.twod:S2Point:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, S2Point, VariableDeclarationStatement(), final, S2Point, rhs, S2Point, other, IfStatement(if), rhs, isNaN, ReturnStatement(return), this, isNaN, ReturnStatement(return), theta, rhs.theta, phi, rhs.phi, ReturnStatement(return), false]
org.apache.commons.math4.geometry.spherical.twod:S2Point:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 542, ReturnStatement(return), 134, 37, MathUtils, hash, theta, MathUtils, hash, phi]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:getDimension:null#[ReturnStatement(return), 2]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:getSubSpace:null#[ReturnStatement(return), Sphere1D, getInstance]
org.apache.commons.math4.geometry.spherical.twod:Sphere2D:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:createRegularPolygonVertices:Vector3D+Vector3D+double+int#[VariableDeclarationStatement(), final, S2Point, array, S2Point, n, VariableDeclarationStatement(), final, Rotation, r0, new, Rotation, Vector3D, crossProduct, center, meridian, outsideRadius, RotationConvention.VECTOR_OPERATOR, ExpressionStatement(), array, 0, new, S2Point, r0, applyTo, center, VariableDeclarationStatement(), final, Rotation, r, new, Rotation, center, MathUtils.TWO_PI, n, RotationConvention.VECTOR_OPERATOR, ForStatement(for), int, i, 1, i, n, i, ExpressionStatement(), array, i, new, S2Point, r, applyTo, array, i, 1, getVector, ReturnStatement(return), array]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:verticesToTree:double+S2Point...#[VariableDeclarationStatement(), final, int, n, vertices.length, IfStatement(if), n, 0, ReturnStatement(return), new, BSPTree, Sphere2D, Boolean.TRUE, VariableDeclarationStatement(), final, Vertex, vArray, Vertex, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), vArray, i, new, Vertex, vertices, i, VariableDeclarationStatement(), List, Edge, edges, new, ArrayList, Edge, n, VariableDeclarationStatement(), Vertex, end, vArray, n, 1, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, Vertex, start, end, ExpressionStatement(), end, vArray, i, VariableDeclarationStatement(), Circle, circle, start, sharedCircleWith, end, IfStatement(if), circle, null, ExpressionStatement(), circle, new, Circle, start, getLocation, end, getLocation, hyperplaneThickness, ExpressionStatement(), edges, add, new, Edge, start, end, Vector3D, angle, start, getLocation, getVector, end, getLocation, getVector, circle, EnhancedForStatement(for), final, Vertex, vertex, vArray, IfStatement(if), vertex, start, vertex, end, FastMath, abs, circle, getOffset, vertex, getLocation, hyperplaneThickness, ExpressionStatement(), vertex, bindWith, circle, VariableDeclarationStatement(), final, BSPTree, Sphere2D, tree, new, BSPTree, Sphere2D, ExpressionStatement(), insertEdges, hyperplaneThickness, tree, edges, ReturnStatement(return), tree]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:insertEdges:double+BSPTree<Sphere2D>+List<Edge>#[VariableDeclarationStatement(), int, index, 0, VariableDeclarationStatement(), Edge, inserted, null, WhileStatement(while), inserted, null, index, edges, size, ExpressionStatement(), inserted, edges, get, index, IfStatement(if), node, insertCut, inserted, getCircle, ExpressionStatement(), inserted, null, IfStatement(if), inserted, null, VariableDeclarationStatement(), final, BSPTree, Sphere2D, parent, node, getParent, IfStatement(if), parent, null, node, parent, getMinus, ExpressionStatement(), node, setAttribute, Boolean.TRUE, ExpressionStatement(), node, setAttribute, Boolean.FALSE, ReturnStatement(return), VariableDeclarationStatement(), final, List, Edge, outsideList, new, ArrayList, Edge, VariableDeclarationStatement(), final, List, Edge, insideList, new, ArrayList, Edge, EnhancedForStatement(for), final, Edge, edge, edges, IfStatement(if), edge, inserted, ExpressionStatement(), edge, split, inserted, getCircle, outsideList, insideList, IfStatement(if), outsideList, isEmpty, ExpressionStatement(), insertEdges, hyperplaneThickness, node, getPlus, outsideList, ExpressionStatement(), node, getPlus, setAttribute, Boolean.FALSE, IfStatement(if), insideList, isEmpty, ExpressionStatement(), insertEdges, hyperplaneThickness, node, getMinus, insideList, ExpressionStatement(), node, getMinus, setAttribute, Boolean.TRUE]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:buildNew:BSPTree<Sphere2D>#[ReturnStatement(return), new, SphericalPolygonsSet, tree, getTolerance]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:computeGeometricalProperties:null#[VariableDeclarationStatement(), final, BSPTree, Sphere2D, tree, getTree, true, IfStatement(if), tree, getCut, null, IfStatement(if), tree, getCut, null, Boolean, tree, getAttribute, ExpressionStatement(), setSize, 4, FastMath.PI, ExpressionStatement(), setBarycenter, new, S2Point, 0, 0, ExpressionStatement(), setSize, 0, ExpressionStatement(), setBarycenter, S2Point.NaN, VariableDeclarationStatement(), final, PropertiesComputer, pc, new, PropertiesComputer, getTolerance, ExpressionStatement(), tree, visit, pc, ExpressionStatement(), setSize, pc, getArea, ExpressionStatement(), setBarycenter, pc, getBarycenter]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getBoundaryLoops:null#[IfStatement(if), loops, null, IfStatement(if), getTree, false, getCut, null, ExpressionStatement(), loops, Collections, emptyList, VariableDeclarationStatement(), final, BSPTree, Sphere2D, root, getTree, true, VariableDeclarationStatement(), final, EdgesBuilder, visitor, new, EdgesBuilder, root, getTolerance, ExpressionStatement(), root, visit, visitor, VariableDeclarationStatement(), final, List, Edge, edges, visitor, getEdges, ExpressionStatement(), loops, new, ArrayList, Vertex, WhileStatement(while), edges, isEmpty, VariableDeclarationStatement(), Edge, edge, edges, get, 0, VariableDeclarationStatement(), final, Vertex, startVertex, edge, getStart, ExpressionStatement(), loops, add, startVertex, DoStatement(do), ForStatement(for), final, Iterator, Edge, iterator, edges, iterator, iterator, hasNext, IfStatement(if), iterator, next, edge, ExpressionStatement(), iterator, remove, BreakStatement(break), ExpressionStatement(), edge, edge, getEnd, getOutgoing, edge, getStart, startVertex, ReturnStatement(return), Collections, unmodifiableList, loops]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getEnclosingCap:null#[IfStatement(if), isEmpty, ReturnStatement(return), new, EnclosingBall, Sphere2D, S2Point, S2Point.PLUS_K, Double.NEGATIVE_INFINITY, IfStatement(if), isFull, ReturnStatement(return), new, EnclosingBall, Sphere2D, S2Point, S2Point.PLUS_K, Double.POSITIVE_INFINITY, VariableDeclarationStatement(), final, BSPTree, Sphere2D, root, getTree, false, IfStatement(if), isEmpty, root, getMinus, isFull, root, getPlus, VariableDeclarationStatement(), final, Circle, circle, Circle, root, getCut, getHyperplane, ReturnStatement(return), new, EnclosingBall, Sphere2D, S2Point, new, S2Point, circle, getPole, negate, 0.5, FastMath.PI, IfStatement(if), isFull, root, getMinus, isEmpty, root, getPlus, VariableDeclarationStatement(), final, Circle, circle, Circle, root, getCut, getHyperplane, ReturnStatement(return), new, EnclosingBall, Sphere2D, S2Point, new, S2Point, circle, getPole, 0.5, FastMath.PI, VariableDeclarationStatement(), final, List, Vector3D, points, getInsidePoints, VariableDeclarationStatement(), final, List, Vertex, boundary, getBoundaryLoops, EnhancedForStatement(for), final, Vertex, loopStart, boundary, VariableDeclarationStatement(), int, count, 0, ForStatement(for), Vertex, v, loopStart, count, 0, v, loopStart, v, v, getOutgoing, getEnd, ExpressionStatement(), count, ExpressionStatement(), points, add, v, getLocation, getVector, VariableDeclarationStatement(), final, SphereGenerator, generator, new, SphereGenerator, VariableDeclarationStatement(), final, WelzlEncloser, Euclidean3D, Vector3D, encloser, new, WelzlEncloser, Euclidean3D, Vector3D, getTolerance, generator, VariableDeclarationStatement(), EnclosingBall, Euclidean3D, Vector3D, enclosing3D, encloser, enclose, points, VariableDeclarationStatement(), final, Vector3D, support3D, enclosing3D, getSupport, VariableDeclarationStatement(), final, double, r, enclosing3D, getRadius, VariableDeclarationStatement(), final, double, h, enclosing3D, getCenter, getNorm, IfStatement(if), h, getTolerance, VariableDeclarationStatement(), EnclosingBall, Sphere2D, S2Point, enclosingS2, new, EnclosingBall, Sphere2D, S2Point, S2Point.PLUS_K, Double.POSITIVE_INFINITY, EnhancedForStatement(for), Vector3D, outsidePoint, getOutsidePoints, VariableDeclarationStatement(), final, S2Point, outsideS2, new, S2Point, outsidePoint, VariableDeclarationStatement(), final, BoundaryProjection, Sphere2D, projection, projectToBoundary, outsideS2, IfStatement(if), FastMath.PI, projection, getOffset, enclosingS2, getRadius, ExpressionStatement(), enclosingS2, new, EnclosingBall, Sphere2D, S2Point, outsideS2, negate, FastMath.PI, projection, getOffset, S2Point, projection, getProjected, ReturnStatement(return), enclosingS2, VariableDeclarationStatement(), final, S2Point, support, S2Point, support3D.length, ForStatement(for), int, i, 0, i, support3D.length, i, ExpressionStatement(), support, i, new, S2Point, support3D, i, VariableDeclarationStatement(), final, EnclosingBall, Sphere2D, S2Point, enclosingS2, new, EnclosingBall, Sphere2D, S2Point, new, S2Point, enclosing3D, getCenter, FastMath, acos, 1, h, h, r, r, 2, h, support, ReturnStatement(return), enclosingS2]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getInsidePoints:null#[VariableDeclarationStatement(), final, PropertiesComputer, pc, new, PropertiesComputer, getTolerance, ExpressionStatement(), getTree, true, visit, pc, ReturnStatement(return), pc, getConvexCellsInsidePoints]
org.apache.commons.math4.geometry.spherical.twod:SphericalPolygonsSet:getOutsidePoints:null#[VariableDeclarationStatement(), final, SphericalPolygonsSet, complement, SphericalPolygonsSet, new, RegionFactory, Sphere2D, getComplement, this, VariableDeclarationStatement(), final, PropertiesComputer, pc, new, PropertiesComputer, getTolerance, ExpressionStatement(), complement, getTree, true, visit, pc, ReturnStatement(return), pc, getConvexCellsInsidePoints]
org.apache.commons.math4.geometry.spherical.twod:SubCircle:buildNew:Hyperplane<Sphere2D>+Region<Sphere1D>#[ReturnStatement(return), new, SubCircle, hyperplane, remainingRegion]
org.apache.commons.math4.geometry.spherical.twod:SubCircle:split:Hyperplane<Sphere2D>#[VariableDeclarationStatement(), final, Circle, thisCircle, Circle, getHyperplane, VariableDeclarationStatement(), final, Circle, otherCircle, Circle, hyperplane, VariableDeclarationStatement(), final, double, angle, Vector3D, angle, thisCircle, getPole, otherCircle, getPole, IfStatement(if), angle, thisCircle, getTolerance, angle, FastMath.PI, thisCircle, getTolerance, ReturnStatement(return), new, SplitSubHyperplane, Sphere2D, null, null, VariableDeclarationStatement(), final, Arc, arc, thisCircle, getInsideArc, otherCircle, VariableDeclarationStatement(), final, ArcsSet.Split, split, ArcsSet, getRemainingRegion, split, arc, VariableDeclarationStatement(), final, ArcsSet, plus, split, getPlus, VariableDeclarationStatement(), final, ArcsSet, minus, split, getMinus, ReturnStatement(return), new, SplitSubHyperplane, Sphere2D, plus, null, null, new, SubCircle, thisCircle, copySelf, plus, minus, null, null, new, SubCircle, thisCircle, copySelf, minus]
org.apache.commons.math4.geometry.spherical.twod:Vertex:getLocation:null#[ReturnStatement(return), location]
org.apache.commons.math4.geometry.spherical.twod:Vertex:bindWith:Circle#[ExpressionStatement(), circles, add, circle]
org.apache.commons.math4.geometry.spherical.twod:Vertex:sharedCircleWith:Vertex#[EnhancedForStatement(for), final, Circle, circle1, circles, EnhancedForStatement(for), final, Circle, circle2, vertex.circles, IfStatement(if), circle1, circle2, ReturnStatement(return), circle1, ReturnStatement(return), null]
org.apache.commons.math4.geometry.spherical.twod:Vertex:setIncoming:Edge#[ExpressionStatement(), this, incoming, incoming, ExpressionStatement(), bindWith, incoming, getCircle]
org.apache.commons.math4.geometry.spherical.twod:Vertex:getIncoming:null#[ReturnStatement(return), incoming]
org.apache.commons.math4.geometry.spherical.twod:Vertex:setOutgoing:Edge#[ExpressionStatement(), this, outgoing, outgoing, ExpressionStatement(), bindWith, outgoing, getCircle]
org.apache.commons.math4.geometry.spherical.twod:Vertex:getOutgoing:null#[ReturnStatement(return), outgoing]
org.apache.commons.math4.geometry:VectorFormat:getAvailableLocales:null#[ReturnStatement(return), NumberFormat, getAvailableLocales]
org.apache.commons.math4.geometry:VectorFormat:getPrefix:null#[ReturnStatement(return), prefix]
org.apache.commons.math4.geometry:VectorFormat:getSuffix:null#[ReturnStatement(return), suffix]
org.apache.commons.math4.geometry:VectorFormat:getSeparator:null#[ReturnStatement(return), separator]
org.apache.commons.math4.geometry:VectorFormat:getFormat:null#[ReturnStatement(return), format]
org.apache.commons.math4.geometry:VectorFormat:format:Vector<S>#[ReturnStatement(return), format, vector, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.geometry:VectorFormat:format:StringBuffer+FieldPosition+double...#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, ExpressionStatement(), toAppendTo, append, prefix, ForStatement(for), int, i, 0, i, coordinates.length, i, IfStatement(if), i, 0, ExpressionStatement(), toAppendTo, append, separator, ExpressionStatement(), CompositeFormat, formatDouble, coordinates, i, format, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, suffix, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.geometry:VectorFormat:parseCoordinates:int+String+ParsePosition#[VariableDeclarationStatement(), int, initialIndex, pos, getIndex, VariableDeclarationStatement(), double, coordinates, double, dimension, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedPrefix, pos, ReturnStatement(return), null, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), i, 0, CompositeFormat, parseFixedstring, source, trimmedSeparator, pos, ReturnStatement(return), null, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, c, CompositeFormat, parseNumber, source, format, pos, IfStatement(if), c, null, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, ExpressionStatement(), coordinates, i, c, doubleValue, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedSuffix, pos, ReturnStatement(return), null, ReturnStatement(return), coordinates]
org.apache.commons.math4.linear:AbstractFieldMatrix:extractField:T[][]#[IfStatement(if), d, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), d.length, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, IfStatement(if), d, 0, length, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, ReturnStatement(return), d, 0, 0, getField]
org.apache.commons.math4.linear:AbstractFieldMatrix:extractField:T[]#[IfStatement(if), d.length, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, ReturnStatement(return), d, 0, getField]
org.apache.commons.math4.linear:AbstractFieldMatrix:getField:null#[ReturnStatement(return), field]
org.apache.commons.math4.linear:AbstractFieldMatrix:add:FieldMatrix<T>#[ExpressionStatement(), checkAdditionCompatible, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, add, m, getEntry, row, col, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:subtract:FieldMatrix<T>#[ExpressionStatement(), checkSubtractionCompatible, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, subtract, m, getEntry, row, col, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:scalarAdd:T#[VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, add, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:scalarMultiply:T#[VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, multiply, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:multiply:FieldMatrix<T>#[ExpressionStatement(), checkMultiplicationCompatible, m, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, m, getColumnDimension, VariableDeclarationStatement(), final, int, nSum, getColumnDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, nRows, nCols, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), T, sum, field, getZero, ForStatement(for), int, i, 0, i, nSum, i, ExpressionStatement(), sum, sum, add, getEntry, row, i, multiply, m, getEntry, i, col, ExpressionStatement(), out, setEntry, row, col, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:preMultiply:FieldMatrix<T>#[ReturnStatement(return), m, multiply, this]
org.apache.commons.math4.linear:AbstractFieldMatrix:power:int#[IfStatement(if), p, 0, ThrowStatement(throw), new, NotPositiveException, p, IfStatement(if), isSquare, ThrowStatement(throw), new, NonSquareMatrixException, getRowDimension, getColumnDimension, IfStatement(if), p, 0, ReturnStatement(return), MatrixUtils, createFieldIdentityMatrix, this, getField, this, getRowDimension, IfStatement(if), p, 1, ReturnStatement(return), this, copy, VariableDeclarationStatement(), final, int, power, p, 1, VariableDeclarationStatement(), final, char, binaryRepresentation, Integer, toBinaryString, power, toCharArray, VariableDeclarationStatement(), final, ArrayList, Integer, nonZeroPositions, new, ArrayList, Integer, ForStatement(for), int, i, 0, i, binaryRepresentation.length, i, IfStatement(if), binaryRepresentation, i, '1', VariableDeclarationStatement(), final, int, pos, binaryRepresentation.length, i, 1, ExpressionStatement(), nonZeroPositions, add, pos, VariableDeclarationStatement(), ArrayList, FieldMatrix, T, results, new, ArrayList, FieldMatrix, T, binaryRepresentation.length, ExpressionStatement(), results, add, 0, this, copy, ForStatement(for), int, i, 1, i, binaryRepresentation.length, i, VariableDeclarationStatement(), final, FieldMatrix, T, s, results, get, i, 1, VariableDeclarationStatement(), final, FieldMatrix, T, r, s, multiply, s, ExpressionStatement(), results, add, i, r, VariableDeclarationStatement(), FieldMatrix, T, result, this, copy, EnhancedForStatement(for), Integer, i, nonZeroPositions, ExpressionStatement(), result, result, multiply, results, get, i, ReturnStatement(return), result]
org.apache.commons.math4.linear:AbstractFieldMatrix:getData:null#[VariableDeclarationStatement(), final, T, data, MathArrays, buildArray, field, getRowDimension, getColumnDimension, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, T, dataI, data, i, ForStatement(for), int, j, 0, j, dataI.length, j, ExpressionStatement(), dataI, j, getEntry, i, j, ReturnStatement(return), data]
org.apache.commons.math4.linear:AbstractFieldMatrix:getSubMatrix:int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, VariableDeclarationStatement(), final, FieldMatrix, T, subMatrix, createMatrix, endRow, startRow, 1, endColumn, startColumn, 1, ForStatement(for), int, i, startRow, i, endRow, i, ForStatement(for), int, j, startColumn, j, endColumn, j, ExpressionStatement(), subMatrix, setEntry, i, startRow, j, startColumn, getEntry, i, j, ReturnStatement(return), subMatrix]
org.apache.commons.math4.linear:AbstractFieldMatrix:getSubMatrix:int[]+int[]#[ExpressionStatement(), checkSubMatrixIndex, selectedRows, selectedColumns, VariableDeclarationStatement(), final, FieldMatrix, T, subMatrix, createMatrix, selectedRows.length, selectedColumns.length, ExpressionStatement(), subMatrix, walkInOptimizedOrder, new, DefaultFieldMatrixChangingVisitor, T, field, getZero, Override, public, T, visit, final, int, row, final, int, column, final, T, value, ReturnStatement(return), getEntry, selectedRows, row, selectedColumns, column, ReturnStatement(return), subMatrix]
org.apache.commons.math4.linear:AbstractFieldMatrix:copySubMatrix:int+int+int+int+T[][]#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, VariableDeclarationStatement(), final, int, rowsCount, endRow, 1, startRow, VariableDeclarationStatement(), final, int, columnsCount, endColumn, 1, startColumn, IfStatement(if), destination.length, rowsCount, destination, 0, length, columnsCount, ThrowStatement(throw), new, MatrixDimensionMismatchException, destination.length, destination, 0, length, rowsCount, columnsCount, ExpressionStatement(), walkInOptimizedOrder, new, DefaultFieldMatrixPreservingVisitor, T, field, getZero, private, int, startRow, private, int, startColumn, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, ExpressionStatement(), this, startRow, startRow, ExpressionStatement(), this, startColumn, startColumn, Override, public, void, visit, final, int, row, final, int, column, final, T, value, ExpressionStatement(), destination, row, startRow, column, startColumn, value, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractFieldMatrix:copySubMatrix:int[]+int[]+T[][]#[ExpressionStatement(), checkSubMatrixIndex, selectedRows, selectedColumns, IfStatement(if), destination.length, selectedRows.length, destination, 0, length, selectedColumns.length, ThrowStatement(throw), new, MatrixDimensionMismatchException, destination.length, destination, 0, length, selectedRows.length, selectedColumns.length, ForStatement(for), int, i, 0, i, selectedRows.length, i, VariableDeclarationStatement(), final, T, destinationI, destination, i, ForStatement(for), int, j, 0, j, selectedColumns.length, j, ExpressionStatement(), destinationI, j, getEntry, selectedRows, i, selectedColumns, j]
org.apache.commons.math4.linear:AbstractFieldMatrix:setSubMatrix:T[][]+int+int#[IfStatement(if), subMatrix, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, int, nRows, subMatrix.length, IfStatement(if), nRows, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, VariableDeclarationStatement(), final, int, nCols, subMatrix, 0, length, IfStatement(if), nCols, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, ForStatement(for), int, r, 1, r, nRows, r, IfStatement(if), subMatrix, r, length, nCols, ThrowStatement(throw), new, DimensionMismatchException, nCols, subMatrix, r, length, ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, ExpressionStatement(), checkRowIndex, nRows, row, 1, ExpressionStatement(), checkColumnIndex, nCols, column, 1, ForStatement(for), int, i, 0, i, nRows, i, ForStatement(for), int, j, 0, j, nCols, j, ExpressionStatement(), setEntry, row, i, column, j, subMatrix, i, j]
org.apache.commons.math4.linear:AbstractFieldMatrix:getRowMatrix:int#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), out, setEntry, 0, i, getEntry, row, i, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setRowMatrix:int+FieldMatrix<T>#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), matrix, getRowDimension, 1, matrix, getColumnDimension, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), setEntry, row, i, matrix, getEntry, 0, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getColumnMatrix:int#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), out, setEntry, i, 0, getEntry, i, column, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setColumnMatrix:int+FieldMatrix<T>#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), matrix, getRowDimension, nRows, matrix, getColumnDimension, 1, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), setEntry, i, column, matrix, getEntry, i, 0]
org.apache.commons.math4.linear:AbstractFieldMatrix:getRowVector:int#[ReturnStatement(return), new, ArrayFieldVector, T, field, getRow, row, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:setRowVector:int+FieldVector<T>#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), vector, getDimension, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, 1, vector, getDimension, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), setEntry, row, i, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getColumnVector:int#[ReturnStatement(return), new, ArrayFieldVector, T, field, getColumn, column, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:setColumnVector:int+FieldVector<T>#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), vector, getDimension, nRows, ThrowStatement(throw), new, MatrixDimensionMismatchException, vector, getDimension, 1, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), setEntry, i, column, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getRow:int#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, field, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), out, i, getEntry, row, i, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setRow:int+T[]#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), array.length, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), setEntry, row, i, array, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:getColumn:int#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, field, nRows, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), out, i, getEntry, i, column, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:setColumn:int+T[]#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), array.length, nRows, ThrowStatement(throw), new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), setEntry, i, column, array, i]
org.apache.commons.math4.linear:AbstractFieldMatrix:transpose:null#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, createMatrix, nCols, nRows, ExpressionStatement(), walkInOptimizedOrder, new, DefaultFieldMatrixPreservingVisitor, T, field, getZero, Override, public, void, visit, final, int, row, final, int, column, final, T, value, ExpressionStatement(), out, setEntry, column, row, value, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:isSquare:null#[ReturnStatement(return), getColumnDimension, getRowDimension]
org.apache.commons.math4.linear:AbstractFieldMatrix:getTrace:null#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), nRows, nCols, ThrowStatement(throw), new, NonSquareMatrixException, nRows, nCols, VariableDeclarationStatement(), T, trace, field, getZero, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), trace, trace, add, getEntry, i, i, ReturnStatement(return), trace]
org.apache.commons.math4.linear:AbstractFieldMatrix:operate:T[]#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v.length, nCols, ThrowStatement(throw), new, DimensionMismatchException, v.length, nCols, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, field, nRows, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), T, sum, field, getZero, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), sum, sum, add, getEntry, row, i, multiply, v, i, ExpressionStatement(), out, row, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:operate:FieldVector<T>#[TryStatement(try), ReturnStatement(return), new, ArrayFieldVector, T, field, operate, ArrayFieldVector, T, v, getDataRef, false, catch, ClassCastException, cce, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v, getDimension, nCols, ThrowStatement(throw), new, DimensionMismatchException, v, getDimension, nCols, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, field, nRows, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), T, sum, field, getZero, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), sum, sum, add, getEntry, row, i, multiply, v, getEntry, i, ExpressionStatement(), out, row, sum, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:preMultiply:T[]#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v.length, nRows, ThrowStatement(throw), new, DimensionMismatchException, v.length, nRows, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, field, nCols, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), T, sum, field, getZero, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), sum, sum, add, getEntry, i, col, multiply, v, i, ExpressionStatement(), out, col, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractFieldMatrix:preMultiply:FieldVector<T>#[TryStatement(try), ReturnStatement(return), new, ArrayFieldVector, T, field, preMultiply, ArrayFieldVector, T, v, getDataRef, false, catch, ClassCastException, cce, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v, getDimension, nRows, ThrowStatement(throw), new, DimensionMismatchException, v, getDimension, nRows, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, field, nCols, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), T, sum, field, getZero, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), sum, sum, add, getEntry, i, col, multiply, v, getEntry, i, ExpressionStatement(), out, col, sum, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, row, 0, row, rows, row, ForStatement(for), int, column, 0, column, columns, column, VariableDeclarationStatement(), final, T, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, T, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, row, 0, row, rows, row, ForStatement(for), int, column, 0, column, columns, column, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, row, startRow, row, endRow, row, ForStatement(for), int, column, startColumn, column, endColumn, column, VariableDeclarationStatement(), final, T, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, T, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, row, startRow, row, endRow, row, ForStatement(for), int, column, startColumn, column, endColumn, column, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, column, 0, column, columns, column, ForStatement(for), int, row, 0, row, rows, row, VariableDeclarationStatement(), final, T, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, T, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, column, 0, column, columns, column, ForStatement(for), int, row, 0, row, rows, row, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, column, startColumn, column, endColumn, column, ForStatement(for), int, row, startRow, row, endRow, row, VariableDeclarationStatement(), final, T, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, T, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, column, startColumn, column, endColumn, column, ForStatement(for), int, row, startRow, row, endRow, row, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>#[ReturnStatement(return), walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>#[ReturnStatement(return), walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[ReturnStatement(return), walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[ReturnStatement(return), walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractFieldMatrix:toString:null#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, StringBuffer, res, new, StringBuffer, VariableDeclarationStatement(), String, fullClassName, getClass, getName, VariableDeclarationStatement(), String, shortClassName, fullClassName, substring, fullClassName, lastIndexOf, '.', 1, ExpressionStatement(), res, append, shortClassName, append, "{", ForStatement(for), int, i, 0, i, nRows, i, IfStatement(if), i, 0, ExpressionStatement(), res, append, ",", ExpressionStatement(), res, append, "{", ForStatement(for), int, j, 0, j, nCols, j, IfStatement(if), j, 0, ExpressionStatement(), res, append, ",", ExpressionStatement(), res, append, getEntry, i, j, ExpressionStatement(), res, append, "}", ExpressionStatement(), res, append, "}", ReturnStatement(return), res, toString]
org.apache.commons.math4.linear:AbstractFieldMatrix:equals:Object#[IfStatement(if), object, this, ReturnStatement(return), true, IfStatement(if), instanceof, object, FieldMatrix, false, ReturnStatement(return), false, VariableDeclarationStatement(), FieldMatrix, m, FieldMatrix, object, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), m, getColumnDimension, nCols, m, getRowDimension, nRows, ReturnStatement(return), false, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, IfStatement(if), getEntry, row, col, equals, m, getEntry, row, col, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.linear:AbstractFieldMatrix:hashCode:null#[VariableDeclarationStatement(), int, ret, 322562, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, ExpressionStatement(), ret, ret, 31, nRows, ExpressionStatement(), ret, ret, 31, nCols, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, ExpressionStatement(), ret, ret, 31, 11, row, 1, 17, col, 1, getEntry, row, col, hashCode, ReturnStatement(return), ret]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkRowIndex:int#[IfStatement(if), row, 0, row, getRowDimension, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.ROW_INDEX, row, 0, getRowDimension, 1]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkColumnIndex:int#[IfStatement(if), column, 0, column, getColumnDimension, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.COLUMN_INDEX, column, 0, getColumnDimension, 1]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkSubMatrixIndex:int+int+int+int#[ExpressionStatement(), checkRowIndex, startRow, ExpressionStatement(), checkRowIndex, endRow, IfStatement(if), endRow, startRow, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, endRow, startRow, true, ExpressionStatement(), checkColumnIndex, startColumn, ExpressionStatement(), checkColumnIndex, endColumn, IfStatement(if), endColumn, startColumn, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN, endColumn, startColumn, true]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkSubMatrixIndex:int[]+int[]#[IfStatement(if), selectedRows, null, selectedColumns, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), selectedRows.length, 0, selectedColumns.length, 0, ThrowStatement(throw), new, NoDataException, EnhancedForStatement(for), final, int, row, selectedRows, ExpressionStatement(), checkRowIndex, row, EnhancedForStatement(for), final, int, column, selectedColumns, ExpressionStatement(), checkColumnIndex, column]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkAdditionCompatible:FieldMatrix<T>#[IfStatement(if), getRowDimension, m, getRowDimension, getColumnDimension, m, getColumnDimension, ThrowStatement(throw), new, MatrixDimensionMismatchException, m, getRowDimension, m, getColumnDimension, getRowDimension, getColumnDimension]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkSubtractionCompatible:FieldMatrix<T>#[IfStatement(if), getRowDimension, m, getRowDimension, getColumnDimension, m, getColumnDimension, ThrowStatement(throw), new, MatrixDimensionMismatchException, m, getRowDimension, m, getColumnDimension, getRowDimension, getColumnDimension]
org.apache.commons.math4.linear:AbstractFieldMatrix:checkMultiplicationCompatible:FieldMatrix<T>#[IfStatement(if), getColumnDimension, m, getRowDimension, ThrowStatement(throw), new, DimensionMismatchException, m, getRowDimension, getColumnDimension]
org.apache.commons.math4.linear:AbstractRealMatrix:add:RealMatrix#[ExpressionStatement(), MatrixUtils, checkAdditionCompatible, this, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, m, getEntry, row, col, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:subtract:RealMatrix#[ExpressionStatement(), MatrixUtils, checkSubtractionCompatible, this, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, m, getEntry, row, col, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:scalarAdd:double#[VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:scalarMultiply:double#[VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:multiply:RealMatrix#[ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, m, getColumnDimension, VariableDeclarationStatement(), final, int, nSum, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, nRows, nCols, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nSum, i, ExpressionStatement(), sum, getEntry, row, i, m, getEntry, i, col, ExpressionStatement(), out, setEntry, row, col, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:preMultiply:RealMatrix#[ReturnStatement(return), m, multiply, this]
org.apache.commons.math4.linear:AbstractRealMatrix:power:int#[IfStatement(if), p, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.NOT_POSITIVE_EXPONENT, p, IfStatement(if), isSquare, ThrowStatement(throw), new, NonSquareMatrixException, getRowDimension, getColumnDimension, IfStatement(if), p, 0, ReturnStatement(return), MatrixUtils, createRealIdentityMatrix, this, getRowDimension, IfStatement(if), p, 1, ReturnStatement(return), this, copy, VariableDeclarationStatement(), final, int, power, p, 1, VariableDeclarationStatement(), final, char, binaryRepresentation, Integer, toBinaryString, power, toCharArray, VariableDeclarationStatement(), final, ArrayList, Integer, nonZeroPositions, new, ArrayList, Integer, VariableDeclarationStatement(), int, maxI, 1, ForStatement(for), int, i, 0, i, binaryRepresentation.length, i, IfStatement(if), binaryRepresentation, i, '1', VariableDeclarationStatement(), final, int, pos, binaryRepresentation.length, i, 1, ExpressionStatement(), nonZeroPositions, add, pos, IfStatement(if), maxI, 1, ExpressionStatement(), maxI, pos, VariableDeclarationStatement(), RealMatrix, results, RealMatrix, maxI, 1, ExpressionStatement(), results, 0, this, copy, ForStatement(for), int, i, 1, i, maxI, i, ExpressionStatement(), results, i, results, i, 1, multiply, results, i, 1, VariableDeclarationStatement(), RealMatrix, result, this, copy, EnhancedForStatement(for), Integer, i, nonZeroPositions, ExpressionStatement(), result, result, multiply, results, i, ReturnStatement(return), result]
org.apache.commons.math4.linear:AbstractRealMatrix:getData:null#[VariableDeclarationStatement(), final, double, data, double, getRowDimension, getColumnDimension, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, dataI, data, i, ForStatement(for), int, j, 0, j, dataI.length, j, ExpressionStatement(), dataI, j, getEntry, i, j, ReturnStatement(return), data]
org.apache.commons.math4.linear:AbstractRealMatrix:getNorm:null#[ReturnStatement(return), walkInColumnOrder, new, RealMatrixPreservingVisitor, private, double, endRow, private, double, columnSum, private, double, maxColSum, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, ExpressionStatement(), this, endRow, endRow, ExpressionStatement(), columnSum, 0, ExpressionStatement(), maxColSum, 0, Override, public, void, visit, final, int, row, final, int, column, final, double, value, ExpressionStatement(), columnSum, FastMath, abs, value, IfStatement(if), row, endRow, ExpressionStatement(), maxColSum, FastMath, max, maxColSum, columnSum, ExpressionStatement(), columnSum, 0, Override, public, double, end, ReturnStatement(return), maxColSum]
org.apache.commons.math4.linear:AbstractRealMatrix:getFrobeniusNorm:null#[ReturnStatement(return), walkInOptimizedOrder, new, RealMatrixPreservingVisitor, private, double, sum, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, ExpressionStatement(), sum, 0, Override, public, void, visit, final, int, row, final, int, column, final, double, value, ExpressionStatement(), sum, value, value, Override, public, double, end, ReturnStatement(return), FastMath, sqrt, sum]
org.apache.commons.math4.linear:AbstractRealMatrix:getSubMatrix:int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, VariableDeclarationStatement(), final, RealMatrix, subMatrix, createMatrix, endRow, startRow, 1, endColumn, startColumn, 1, ForStatement(for), int, i, startRow, i, endRow, i, ForStatement(for), int, j, startColumn, j, endColumn, j, ExpressionStatement(), subMatrix, setEntry, i, startRow, j, startColumn, getEntry, i, j, ReturnStatement(return), subMatrix]
org.apache.commons.math4.linear:AbstractRealMatrix:getSubMatrix:int[]+int[]#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, selectedRows, selectedColumns, VariableDeclarationStatement(), final, RealMatrix, subMatrix, createMatrix, selectedRows.length, selectedColumns.length, ExpressionStatement(), subMatrix, walkInOptimizedOrder, new, DefaultRealMatrixChangingVisitor, Override, public, double, visit, final, int, row, final, int, column, final, double, value, ReturnStatement(return), getEntry, selectedRows, row, selectedColumns, column, ReturnStatement(return), subMatrix]
org.apache.commons.math4.linear:AbstractRealMatrix:copySubMatrix:int+int+int+int+double[][]#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, VariableDeclarationStatement(), final, int, rowsCount, endRow, 1, startRow, VariableDeclarationStatement(), final, int, columnsCount, endColumn, 1, startColumn, IfStatement(if), destination.length, rowsCount, destination, 0, length, columnsCount, ThrowStatement(throw), new, MatrixDimensionMismatchException, destination.length, destination, 0, length, rowsCount, columnsCount, ForStatement(for), int, i, 1, i, rowsCount, i, IfStatement(if), destination, i, length, columnsCount, ThrowStatement(throw), new, MatrixDimensionMismatchException, destination.length, destination, i, length, rowsCount, columnsCount, ExpressionStatement(), walkInOptimizedOrder, new, DefaultRealMatrixPreservingVisitor, private, int, startRow, private, int, startColumn, Override, public, void, start, final, int, rows, final, int, columns, final, int, startRow, final, int, endRow, final, int, startColumn, final, int, endColumn, ExpressionStatement(), this, startRow, startRow, ExpressionStatement(), this, startColumn, startColumn, Override, public, void, visit, final, int, row, final, int, column, final, double, value, ExpressionStatement(), destination, row, startRow, column, startColumn, value, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractRealMatrix:copySubMatrix:int[]+int[]+double[][]#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, selectedRows, selectedColumns, VariableDeclarationStatement(), final, int, nCols, selectedColumns.length, IfStatement(if), destination.length, selectedRows.length, destination, 0, length, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, destination.length, destination, 0, length, selectedRows.length, selectedColumns.length, ForStatement(for), int, i, 0, i, selectedRows.length, i, VariableDeclarationStatement(), final, double, destinationI, destination, i, IfStatement(if), destinationI.length, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, destination.length, destinationI.length, selectedRows.length, selectedColumns.length, ForStatement(for), int, j, 0, j, selectedColumns.length, j, ExpressionStatement(), destinationI, j, getEntry, selectedRows, i, selectedColumns, j]
org.apache.commons.math4.linear:AbstractRealMatrix:setSubMatrix:double[][]+int+int#[ExpressionStatement(), MathUtils, checkNotNull, subMatrix, VariableDeclarationStatement(), final, int, nRows, subMatrix.length, IfStatement(if), nRows, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, VariableDeclarationStatement(), final, int, nCols, subMatrix, 0, length, IfStatement(if), nCols, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, ForStatement(for), int, r, 1, r, nRows, r, IfStatement(if), subMatrix, r, length, nCols, ThrowStatement(throw), new, DimensionMismatchException, nCols, subMatrix, r, length, ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, ExpressionStatement(), MatrixUtils, checkRowIndex, this, nRows, row, 1, ExpressionStatement(), MatrixUtils, checkColumnIndex, this, nCols, column, 1, ForStatement(for), int, i, 0, i, nRows, i, ForStatement(for), int, j, 0, j, nCols, j, ExpressionStatement(), setEntry, row, i, column, j, subMatrix, i, j]
org.apache.commons.math4.linear:AbstractRealMatrix:getRowMatrix:int#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), out, setEntry, 0, i, getEntry, row, i, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:setRowMatrix:int+RealMatrix#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), matrix, getRowDimension, 1, matrix, getColumnDimension, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), setEntry, row, i, matrix, getEntry, 0, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getColumnMatrix:int#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), out, setEntry, i, 0, getEntry, i, column, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:setColumnMatrix:int+RealMatrix#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), matrix, getRowDimension, nRows, matrix, getColumnDimension, 1, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), setEntry, i, column, matrix, getEntry, i, 0]
org.apache.commons.math4.linear:AbstractRealMatrix:getRowVector:int#[ReturnStatement(return), new, ArrayRealVector, getRow, row, false]
org.apache.commons.math4.linear:AbstractRealMatrix:setRowVector:int+RealVector#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), vector, getDimension, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, 1, vector, getDimension, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), setEntry, row, i, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getColumnVector:int#[ReturnStatement(return), new, ArrayRealVector, getColumn, column, false]
org.apache.commons.math4.linear:AbstractRealMatrix:setColumnVector:int+RealVector#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), vector, getDimension, nRows, ThrowStatement(throw), new, MatrixDimensionMismatchException, vector, getDimension, 1, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), setEntry, i, column, vector, getEntry, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getRow:int#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, double, out, double, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), out, i, getEntry, row, i, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:setRow:int+double[]#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), array.length, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), setEntry, row, i, array, i]
org.apache.commons.math4.linear:AbstractRealMatrix:getColumn:int#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, double, out, double, nRows, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), out, i, getEntry, i, column, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:setColumn:int+double[]#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), array.length, nRows, ThrowStatement(throw), new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), setEntry, i, column, array, i]
org.apache.commons.math4.linear:AbstractRealMatrix:addToEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, ExpressionStatement(), setEntry, row, column, getEntry, row, column, increment]
org.apache.commons.math4.linear:AbstractRealMatrix:multiplyEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, ExpressionStatement(), setEntry, row, column, getEntry, row, column, factor]
org.apache.commons.math4.linear:AbstractRealMatrix:transpose:null#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, RealMatrix, out, createMatrix, nCols, nRows, ExpressionStatement(), walkInOptimizedOrder, new, DefaultRealMatrixPreservingVisitor, Override, public, void, visit, final, int, row, final, int, column, final, double, value, ExpressionStatement(), out, setEntry, column, row, value, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:isSquare:null#[ReturnStatement(return), getColumnDimension, getRowDimension]
org.apache.commons.math4.linear:AbstractRealMatrix:getTrace:null#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), nRows, nCols, ThrowStatement(throw), new, NonSquareMatrixException, nRows, nCols, VariableDeclarationStatement(), double, trace, 0, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), trace, getEntry, i, i, ReturnStatement(return), trace]
org.apache.commons.math4.linear:AbstractRealMatrix:operate:double[]#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v.length, nCols, ThrowStatement(throw), new, DimensionMismatchException, v.length, nCols, VariableDeclarationStatement(), final, double, out, double, nRows, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), sum, getEntry, row, i, v, i, ExpressionStatement(), out, row, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:operate:RealVector#[TryStatement(try), ReturnStatement(return), new, ArrayRealVector, operate, ArrayRealVector, v, getDataRef, false, catch, ClassCastException, cce, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v, getDimension, nCols, ThrowStatement(throw), new, DimensionMismatchException, v, getDimension, nCols, VariableDeclarationStatement(), final, double, out, double, nRows, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), sum, getEntry, row, i, v, getEntry, i, ExpressionStatement(), out, row, sum, ReturnStatement(return), new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:AbstractRealMatrix:preMultiply:double[]#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v.length, nRows, ThrowStatement(throw), new, DimensionMismatchException, v.length, nRows, VariableDeclarationStatement(), final, double, out, double, nCols, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), sum, getEntry, i, col, v, i, ExpressionStatement(), out, col, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:AbstractRealMatrix:preMultiply:RealVector#[TryStatement(try), ReturnStatement(return), new, ArrayRealVector, preMultiply, ArrayRealVector, v, getDataRef, false, catch, ClassCastException, cce, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v, getDimension, nRows, ThrowStatement(throw), new, DimensionMismatchException, v, getDimension, nRows, VariableDeclarationStatement(), final, double, out, double, nCols, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), sum, getEntry, i, col, v, getEntry, i, ExpressionStatement(), out, col, sum, ReturnStatement(return), new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixChangingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, row, 0, row, rows, row, ForStatement(for), int, column, 0, column, columns, column, VariableDeclarationStatement(), final, double, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, double, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, row, 0, row, rows, row, ForStatement(for), int, column, 0, column, columns, column, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixChangingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, row, startRow, row, endRow, row, ForStatement(for), int, column, startColumn, column, endColumn, column, VariableDeclarationStatement(), final, double, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, double, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, row, startRow, row, endRow, row, ForStatement(for), int, column, startColumn, column, endColumn, column, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, column, 0, column, columns, column, ForStatement(for), int, row, 0, row, rows, row, VariableDeclarationStatement(), final, double, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, double, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, column, 0, column, columns, column, ForStatement(for), int, row, 0, row, rows, row, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, column, startColumn, column, endColumn, column, ForStatement(for), int, row, startRow, row, endRow, row, VariableDeclarationStatement(), final, double, oldValue, getEntry, row, column, VariableDeclarationStatement(), final, double, newValue, visitor, visit, row, column, oldValue, ExpressionStatement(), setEntry, row, column, newValue, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, column, startColumn, column, endColumn, column, ForStatement(for), int, row, startRow, row, endRow, row, ExpressionStatement(), visitor, visit, row, column, getEntry, row, column, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor#[ReturnStatement(return), walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor#[ReturnStatement(return), walkInRowOrder, visitor]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor+int+int+int+int#[ReturnStatement(return), walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor+int+int+int+int#[ReturnStatement(return), walkInRowOrder, visitor, startRow, endRow, startColumn, endColumn]
org.apache.commons.math4.linear:AbstractRealMatrix:toString:null#[VariableDeclarationStatement(), final, StringBuilder, res, new, StringBuilder, VariableDeclarationStatement(), String, fullClassName, getClass, getName, VariableDeclarationStatement(), String, shortClassName, fullClassName, substring, fullClassName, lastIndexOf, '.', 1, ExpressionStatement(), res, append, shortClassName, ExpressionStatement(), res, append, DEFAULT_FORMAT, format, this, ReturnStatement(return), res, toString]
org.apache.commons.math4.linear:AbstractRealMatrix:equals:Object#[IfStatement(if), object, this, ReturnStatement(return), true, IfStatement(if), instanceof, object, RealMatrix, false, ReturnStatement(return), false, VariableDeclarationStatement(), RealMatrix, m, RealMatrix, object, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), m, getColumnDimension, nCols, m, getRowDimension, nRows, ReturnStatement(return), false, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, IfStatement(if), getEntry, row, col, m, getEntry, row, col, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.linear:AbstractRealMatrix:hashCode:null#[VariableDeclarationStatement(), int, ret, 7, VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, ExpressionStatement(), ret, ret, 31, nRows, ExpressionStatement(), ret, ret, 31, nCols, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, ExpressionStatement(), ret, ret, 31, 11, row, 1, 17, col, 1, MathUtils, hash, getEntry, row, col, ReturnStatement(return), ret]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:createMatrix:int+int#[ReturnStatement(return), new, Array2DRowFieldMatrix, T, getField, rowDimension, columnDimension]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:copy:null#[ReturnStatement(return), new, Array2DRowFieldMatrix, T, getField, copyOut, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:add:Array2DRowFieldMatrix<T>#[ExpressionStatement(), checkAdditionCompatible, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, T, outData, MathArrays, buildArray, getField, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, VariableDeclarationStatement(), final, T, dataRow, data, row, VariableDeclarationStatement(), final, T, mRow, m.data, row, VariableDeclarationStatement(), final, T, outDataRow, outData, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), outDataRow, col, dataRow, col, add, mRow, col, ReturnStatement(return), new, Array2DRowFieldMatrix, T, getField, outData, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:subtract:Array2DRowFieldMatrix<T>#[ExpressionStatement(), checkSubtractionCompatible, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, T, outData, MathArrays, buildArray, getField, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, VariableDeclarationStatement(), final, T, dataRow, data, row, VariableDeclarationStatement(), final, T, mRow, m.data, row, VariableDeclarationStatement(), final, T, outDataRow, outData, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), outDataRow, col, dataRow, col, subtract, mRow, col, ReturnStatement(return), new, Array2DRowFieldMatrix, T, getField, outData, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:multiply:Array2DRowFieldMatrix<T>#[ExpressionStatement(), checkMultiplicationCompatible, m, VariableDeclarationStatement(), final, int, nRows, this, getRowDimension, VariableDeclarationStatement(), final, int, nCols, m, getColumnDimension, VariableDeclarationStatement(), final, int, nSum, this, getColumnDimension, VariableDeclarationStatement(), final, T, outData, MathArrays, buildArray, getField, nRows, nCols, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), final, T, dataRow, data, row, VariableDeclarationStatement(), final, T, outDataRow, outData, row, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), T, sum, getField, getZero, ForStatement(for), int, i, 0, i, nSum, i, ExpressionStatement(), sum, sum, add, dataRow, i, multiply, m.data, i, col, ExpressionStatement(), outDataRow, col, sum, ReturnStatement(return), new, Array2DRowFieldMatrix, T, getField, outData, false]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getData:null#[ReturnStatement(return), copyOut]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getDataRef:null#[ReturnStatement(return), data]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:setSubMatrix:T[][]+int+int#[IfStatement(if), data, null, IfStatement(if), row, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row, IfStatement(if), column, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column, VariableDeclarationStatement(), final, int, nRows, subMatrix.length, IfStatement(if), nRows, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, VariableDeclarationStatement(), final, int, nCols, subMatrix, 0, length, IfStatement(if), nCols, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, ExpressionStatement(), data, MathArrays, buildArray, getField, subMatrix.length, nCols, ForStatement(for), int, i, 0, i, data.length, i, IfStatement(if), subMatrix, i, length, nCols, ThrowStatement(throw), new, DimensionMismatchException, nCols, subMatrix, i, length, ExpressionStatement(), System, arraycopy, subMatrix, i, 0, data, i, row, column, nCols, ExpressionStatement(), super, setSubMatrix, subMatrix, row, column]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getEntry:int+int#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, ReturnStatement(return), data, row, column]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:setEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, ExpressionStatement(), data, row, column, value]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:addToEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, ExpressionStatement(), data, row, column, data, row, column, add, increment]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:multiplyEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, ExpressionStatement(), data, row, column, data, row, column, multiply, factor]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getRowDimension:null#[ReturnStatement(return), data, null, 0, data.length]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:getColumnDimension:null#[ReturnStatement(return), data, null, data, 0, null, 0, data, 0, length]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:operate:T[]#[VariableDeclarationStatement(), final, int, nRows, this, getRowDimension, VariableDeclarationStatement(), final, int, nCols, this, getColumnDimension, IfStatement(if), v.length, nCols, ThrowStatement(throw), new, DimensionMismatchException, v.length, nCols, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, getField, nRows, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), final, T, dataRow, data, row, VariableDeclarationStatement(), T, sum, getField, getZero, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), sum, sum, add, dataRow, i, multiply, v, i, ExpressionStatement(), out, row, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:preMultiply:T[]#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v.length, nRows, ThrowStatement(throw), new, DimensionMismatchException, v.length, nRows, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, getField, nCols, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), T, sum, getField, getZero, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), sum, sum, add, data, i, col, multiply, v, i, ExpressionStatement(), out, col, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, i, 0, i, rows, i, VariableDeclarationStatement(), final, T, rowI, data, i, ForStatement(for), int, j, 0, j, columns, j, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, i, 0, i, rows, i, VariableDeclarationStatement(), final, T, rowI, data, i, ForStatement(for), int, j, 0, j, columns, j, ExpressionStatement(), visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, i, startRow, i, endRow, i, VariableDeclarationStatement(), final, T, rowI, data, i, ForStatement(for), int, j, startColumn, j, endColumn, j, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, i, startRow, i, endRow, i, VariableDeclarationStatement(), final, T, rowI, data, i, ForStatement(for), int, j, startColumn, j, endColumn, j, ExpressionStatement(), visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, j, 0, j, columns, j, ForStatement(for), int, i, 0, i, rows, i, VariableDeclarationStatement(), final, T, rowI, data, i, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, j, 0, j, columns, j, ForStatement(for), int, i, 0, i, rows, i, ExpressionStatement(), visitor, visit, i, j, data, i, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, j, startColumn, j, endColumn, j, ForStatement(for), int, i, startRow, i, endRow, i, VariableDeclarationStatement(), final, T, rowI, data, i, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:walkInColumnOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, j, startColumn, j, endColumn, j, ForStatement(for), int, i, startRow, i, endRow, i, ExpressionStatement(), visitor, visit, i, j, data, i, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:copyOut:null#[VariableDeclarationStatement(), final, int, nRows, this, getRowDimension, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, getField, nRows, getColumnDimension, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), System, arraycopy, data, i, 0, out, i, 0, data, i, length, ReturnStatement(return), out]
org.apache.commons.math4.linear:Array2DRowFieldMatrix:copyIn:T[][]#[ExpressionStatement(), setSubMatrix, in, 0, 0]
org.apache.commons.math4.linear:Array2DRowRealMatrix:createMatrix:int+int#[ReturnStatement(return), new, Array2DRowRealMatrix, rowDimension, columnDimension]
org.apache.commons.math4.linear:Array2DRowRealMatrix:copy:null#[ReturnStatement(return), new, Array2DRowRealMatrix, copyOut, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:add:Array2DRowRealMatrix#[ExpressionStatement(), MatrixUtils, checkAdditionCompatible, this, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, double, outData, double, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, VariableDeclarationStatement(), final, double, dataRow, data, row, VariableDeclarationStatement(), final, double, mRow, m.data, row, VariableDeclarationStatement(), final, double, outDataRow, outData, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), outDataRow, col, dataRow, col, mRow, col, ReturnStatement(return), new, Array2DRowRealMatrix, outData, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:subtract:Array2DRowRealMatrix#[ExpressionStatement(), MatrixUtils, checkSubtractionCompatible, this, m, VariableDeclarationStatement(), final, int, rowCount, getRowDimension, VariableDeclarationStatement(), final, int, columnCount, getColumnDimension, VariableDeclarationStatement(), final, double, outData, double, rowCount, columnCount, ForStatement(for), int, row, 0, row, rowCount, row, VariableDeclarationStatement(), final, double, dataRow, data, row, VariableDeclarationStatement(), final, double, mRow, m.data, row, VariableDeclarationStatement(), final, double, outDataRow, outData, row, ForStatement(for), int, col, 0, col, columnCount, col, ExpressionStatement(), outDataRow, col, dataRow, col, mRow, col, ReturnStatement(return), new, Array2DRowRealMatrix, outData, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:multiply:Array2DRowRealMatrix#[ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, int, nRows, this, getRowDimension, VariableDeclarationStatement(), final, int, nCols, m, getColumnDimension, VariableDeclarationStatement(), final, int, nSum, this, getColumnDimension, VariableDeclarationStatement(), final, double, outData, double, nRows, nCols, VariableDeclarationStatement(), final, double, mCol, double, nSum, VariableDeclarationStatement(), final, double, mData, m.data, ForStatement(for), int, col, 0, col, nCols, col, ForStatement(for), int, mRow, 0, mRow, nSum, mRow, ExpressionStatement(), mCol, mRow, mData, mRow, col, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), final, double, dataRow, data, row, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nSum, i, ExpressionStatement(), sum, dataRow, i, mCol, i, ExpressionStatement(), outData, row, col, sum, ReturnStatement(return), new, Array2DRowRealMatrix, outData, false]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getData:null#[ReturnStatement(return), copyOut]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getDataRef:null#[ReturnStatement(return), data]
org.apache.commons.math4.linear:Array2DRowRealMatrix:setSubMatrix:double[][]+int+int#[IfStatement(if), data, null, IfStatement(if), row, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row, IfStatement(if), column, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column, ExpressionStatement(), MathUtils, checkNotNull, subMatrix, VariableDeclarationStatement(), final, int, nRows, subMatrix.length, IfStatement(if), nRows, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, VariableDeclarationStatement(), final, int, nCols, subMatrix, 0, length, IfStatement(if), nCols, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, ExpressionStatement(), data, double, subMatrix.length, nCols, ForStatement(for), int, i, 0, i, data.length, i, IfStatement(if), subMatrix, i, length, nCols, ThrowStatement(throw), new, DimensionMismatchException, subMatrix, i, length, nCols, ExpressionStatement(), System, arraycopy, subMatrix, i, 0, data, i, row, column, nCols, ExpressionStatement(), super, setSubMatrix, subMatrix, row, column]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getEntry:int+int#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, ReturnStatement(return), data, row, column]
org.apache.commons.math4.linear:Array2DRowRealMatrix:setEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, ExpressionStatement(), data, row, column, value]
org.apache.commons.math4.linear:Array2DRowRealMatrix:addToEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, ExpressionStatement(), data, row, column, increment]
org.apache.commons.math4.linear:Array2DRowRealMatrix:multiplyEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, ExpressionStatement(), data, row, column, factor]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getRowDimension:null#[ReturnStatement(return), data, null, 0, data.length]
org.apache.commons.math4.linear:Array2DRowRealMatrix:getColumnDimension:null#[ReturnStatement(return), data, null, data, 0, null, 0, data, 0, length]
org.apache.commons.math4.linear:Array2DRowRealMatrix:operate:double[]#[VariableDeclarationStatement(), final, int, nRows, this, getRowDimension, VariableDeclarationStatement(), final, int, nCols, this, getColumnDimension, IfStatement(if), v.length, nCols, ThrowStatement(throw), new, DimensionMismatchException, v.length, nCols, VariableDeclarationStatement(), final, double, out, double, nRows, ForStatement(for), int, row, 0, row, nRows, row, VariableDeclarationStatement(), final, double, dataRow, data, row, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), sum, dataRow, i, v, i, ExpressionStatement(), out, row, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:Array2DRowRealMatrix:preMultiply:double[]#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), v.length, nRows, ThrowStatement(throw), new, DimensionMismatchException, v.length, nRows, VariableDeclarationStatement(), final, double, out, double, nCols, ForStatement(for), int, col, 0, col, nCols, col, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), sum, data, i, col, v, i, ExpressionStatement(), out, col, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixChangingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, i, 0, i, rows, i, VariableDeclarationStatement(), final, double, rowI, data, i, ForStatement(for), int, j, 0, j, columns, j, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, i, 0, i, rows, i, VariableDeclarationStatement(), final, double, rowI, data, i, ForStatement(for), int, j, 0, j, columns, j, ExpressionStatement(), visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixChangingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, i, startRow, i, endRow, i, VariableDeclarationStatement(), final, double, rowI, data, i, ForStatement(for), int, j, startColumn, j, endColumn, j, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, i, startRow, i, endRow, i, VariableDeclarationStatement(), final, double, rowI, data, i, ForStatement(for), int, j, startColumn, j, endColumn, j, ExpressionStatement(), visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, j, 0, j, columns, j, ForStatement(for), int, i, 0, i, rows, i, VariableDeclarationStatement(), final, double, rowI, data, i, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor#[VariableDeclarationStatement(), final, int, rows, getRowDimension, VariableDeclarationStatement(), final, int, columns, getColumnDimension, ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, j, 0, j, columns, j, ForStatement(for), int, i, 0, i, rows, i, ExpressionStatement(), visitor, visit, i, j, data, i, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixChangingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, j, startColumn, j, endColumn, j, ForStatement(for), int, i, startRow, i, endRow, i, VariableDeclarationStatement(), final, double, rowI, data, i, ExpressionStatement(), rowI, j, visitor, visit, i, j, rowI, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:walkInColumnOrder:RealMatrixPreservingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, getRowDimension, getColumnDimension, startRow, endRow, startColumn, endColumn, ForStatement(for), int, j, startColumn, j, endColumn, j, ForStatement(for), int, i, startRow, i, endRow, i, ExpressionStatement(), visitor, visit, i, j, data, i, j, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:Array2DRowRealMatrix:copyOut:null#[VariableDeclarationStatement(), final, int, nRows, this, getRowDimension, VariableDeclarationStatement(), final, double, out, double, nRows, this, getColumnDimension, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), System, arraycopy, data, i, 0, out, i, 0, data, i, length, ReturnStatement(return), out]
org.apache.commons.math4.linear:Array2DRowRealMatrix:copyIn:double[][]#[ExpressionStatement(), setSubMatrix, in, 0, 0]
org.apache.commons.math4.linear:ArrayFieldVector:getField:null#[ReturnStatement(return), field]
org.apache.commons.math4.linear:ArrayFieldVector:copy:null#[ReturnStatement(return), new, ArrayFieldVector, T, this, true]
org.apache.commons.math4.linear:ArrayFieldVector:add:FieldVector<T>#[TryStatement(try), ReturnStatement(return), add, ArrayFieldVector, T, v, catch, ClassCastException, cce, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, add, v, getEntry, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:add:ArrayFieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v.data.length, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, add, v.data, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:subtract:FieldVector<T>#[TryStatement(try), ReturnStatement(return), subtract, ArrayFieldVector, T, v, catch, ClassCastException, cce, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, subtract, v, getEntry, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:subtract:ArrayFieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v.data.length, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, subtract, v.data, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapAdd:T#[VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, add, d, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapAddToSelf:T#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, data, i, add, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayFieldVector:mapSubtract:T#[VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, subtract, d, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapSubtractToSelf:T#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, data, i, subtract, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayFieldVector:mapMultiply:T#[VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, multiply, d, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapMultiplyToSelf:T#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, data, i, multiply, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayFieldVector:mapDivide:T#[ExpressionStatement(), MathUtils, checkNotNull, d, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, divide, d, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapDivideToSelf:T#[ExpressionStatement(), MathUtils, checkNotNull, d, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, data, i, divide, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayFieldVector:mapInv:null#[VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, VariableDeclarationStatement(), final, T, one, field, getOne, ForStatement(for), int, i, 0, i, data.length, i, TryStatement(try), ExpressionStatement(), out, i, one, divide, data, i, catch, final, MathArithmeticException, e, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.INDEX, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:mapInvToSelf:null#[VariableDeclarationStatement(), final, T, one, field, getOne, ForStatement(for), int, i, 0, i, data.length, i, TryStatement(try), ExpressionStatement(), data, i, one, divide, data, i, catch, final, MathArithmeticException, e, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.INDEX, i, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayFieldVector:ebeMultiply:FieldVector<T>#[TryStatement(try), ReturnStatement(return), ebeMultiply, ArrayFieldVector, T, v, catch, ClassCastException, cce, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, multiply, v, getEntry, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:ebeMultiply:ArrayFieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v.data.length, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, data, i, multiply, v.data, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:ebeDivide:FieldVector<T>#[TryStatement(try), ReturnStatement(return), ebeDivide, ArrayFieldVector, T, v, catch, ClassCastException, cce, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, TryStatement(try), ExpressionStatement(), out, i, data, i, divide, v, getEntry, i, catch, final, MathArithmeticException, e, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.INDEX, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:ebeDivide:ArrayFieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v.data.length, VariableDeclarationStatement(), T, out, MathArrays, buildArray, field, data.length, ForStatement(for), int, i, 0, i, data.length, i, TryStatement(try), ExpressionStatement(), out, i, data, i, divide, v.data, i, catch, final, MathArithmeticException, e, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.INDEX, i, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:getDataRef:null#[ReturnStatement(return), data]
org.apache.commons.math4.linear:ArrayFieldVector:dotProduct:FieldVector<T>#[TryStatement(try), ReturnStatement(return), dotProduct, ArrayFieldVector, T, v, catch, ClassCastException, cce, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), T, dot, field, getZero, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), dot, dot, add, data, i, multiply, v, getEntry, i, ReturnStatement(return), dot]
org.apache.commons.math4.linear:ArrayFieldVector:dotProduct:ArrayFieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v.data.length, VariableDeclarationStatement(), T, dot, field, getZero, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), dot, dot, add, data, i, multiply, v.data, i, ReturnStatement(return), dot]
org.apache.commons.math4.linear:ArrayFieldVector:projection:FieldVector<T>#[ReturnStatement(return), v, mapMultiply, dotProduct, v, divide, v, dotProduct, v]
org.apache.commons.math4.linear:ArrayFieldVector:projection:ArrayFieldVector<T>#[ReturnStatement(return), ArrayFieldVector, T, v, mapMultiply, dotProduct, v, divide, v, dotProduct, v]
org.apache.commons.math4.linear:ArrayFieldVector:outerProduct:FieldVector<T>#[TryStatement(try), ReturnStatement(return), outerProduct, ArrayFieldVector, T, v, catch, ClassCastException, cce, VariableDeclarationStatement(), final, int, m, data.length, VariableDeclarationStatement(), final, int, n, v, getDimension, VariableDeclarationStatement(), final, FieldMatrix, T, out, new, Array2DRowFieldMatrix, T, field, m, n, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), out, setEntry, i, j, data, i, multiply, v, getEntry, j, ReturnStatement(return), out]
org.apache.commons.math4.linear:ArrayFieldVector:outerProduct:ArrayFieldVector<T>#[VariableDeclarationStatement(), final, int, m, data.length, VariableDeclarationStatement(), final, int, n, v.data.length, VariableDeclarationStatement(), final, FieldMatrix, T, out, new, Array2DRowFieldMatrix, T, field, m, n, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), out, setEntry, i, j, data, i, multiply, v.data, j, ReturnStatement(return), out]
org.apache.commons.math4.linear:ArrayFieldVector:getEntry:int#[ReturnStatement(return), data, index]
org.apache.commons.math4.linear:ArrayFieldVector:getDimension:null#[ReturnStatement(return), data.length]
org.apache.commons.math4.linear:ArrayFieldVector:append:FieldVector<T>#[TryStatement(try), ReturnStatement(return), append, ArrayFieldVector, T, v, catch, ClassCastException, cce, ReturnStatement(return), new, ArrayFieldVector, T, this, new, ArrayFieldVector, T, v]
org.apache.commons.math4.linear:ArrayFieldVector:append:ArrayFieldVector<T>#[ReturnStatement(return), new, ArrayFieldVector, T, this, v]
org.apache.commons.math4.linear:ArrayFieldVector:append:T#[VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, field, data.length, 1, ExpressionStatement(), System, arraycopy, data, 0, out, 0, data.length, ExpressionStatement(), out, data.length, in, ReturnStatement(return), new, ArrayFieldVector, T, field, out, false]
org.apache.commons.math4.linear:ArrayFieldVector:getSubVector:int+int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, VariableDeclarationStatement(), ArrayFieldVector, T, out, new, ArrayFieldVector, T, field, n, TryStatement(try), ExpressionStatement(), System, arraycopy, data, index, out.data, 0, n, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, n, 1, ReturnStatement(return), out]
org.apache.commons.math4.linear:ArrayFieldVector:setEntry:int+T#[TryStatement(try), ExpressionStatement(), data, index, value, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index]
org.apache.commons.math4.linear:ArrayFieldVector:setSubVector:int+FieldVector<T>#[TryStatement(try), TryStatement(try), ExpressionStatement(), set, index, ArrayFieldVector, T, v, catch, ClassCastException, cce, ForStatement(for), int, i, index, i, index, v, getDimension, i, ExpressionStatement(), data, i, v, getEntry, i, index, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, v, getDimension, 1]
org.apache.commons.math4.linear:ArrayFieldVector:set:int+ArrayFieldVector<T>#[TryStatement(try), ExpressionStatement(), System, arraycopy, v.data, 0, data, index, v.data.length, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, v.data.length, 1]
org.apache.commons.math4.linear:ArrayFieldVector:set:T#[ExpressionStatement(), Arrays, fill, data, value]
org.apache.commons.math4.linear:ArrayFieldVector:toArray:null#[ReturnStatement(return), data, clone]
org.apache.commons.math4.linear:ArrayFieldVector:checkVectorDimensions:FieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v, getDimension]
org.apache.commons.math4.linear:ArrayFieldVector:checkVectorDimensions:int#[IfStatement(if), data.length, n, ThrowStatement(throw), new, DimensionMismatchException, data.length, n]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>#[VariableDeclarationStatement(), final, int, dim, getDimension, ExpressionStatement(), visitor, start, dim, 0, dim, 1, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, getDimension, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>#[VariableDeclarationStatement(), final, int, dim, getDimension, ExpressionStatement(), visitor, start, dim, 0, dim, 1, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), setEntry, i, visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, getDimension, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), setEntry, i, visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:ArrayFieldVector:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), other, null, ReturnStatement(return), false, TryStatement(try), VariableDeclarationStatement(), SuppressWarnings, "unchecked", FieldVector, T, rhs, FieldVector, T, other, IfStatement(if), data.length, rhs, getDimension, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, data.length, i, IfStatement(if), data, i, equals, rhs, getEntry, i, ReturnStatement(return), false, ReturnStatement(return), true, catch, ClassCastException, ex, ReturnStatement(return), false]
org.apache.commons.math4.linear:ArrayFieldVector:hashCode:null#[VariableDeclarationStatement(), int, h, 3542, EnhancedForStatement(for), final, T, a, data, ExpressionStatement(), h, a, hashCode, ReturnStatement(return), h]
org.apache.commons.math4.linear:ArrayFieldVector:checkIndex:int#[IfStatement(if), index, 0, index, getDimension, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, getDimension, 1]
org.apache.commons.math4.linear:ArrayFieldVector:checkIndices:int+int#[VariableDeclarationStatement(), final, int, dim, getDimension, IfStatement(if), start, 0, start, dim, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, start, 0, dim, 1, IfStatement(if), end, 0, end, dim, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, end, 0, dim, 1, IfStatement(if), end, start, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false]
org.apache.commons.math4.linear:ArrayRealVector:copy:null#[ReturnStatement(return), new, ArrayRealVector, this, true]
org.apache.commons.math4.linear:ArrayRealVector:add:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, VariableDeclarationStatement(), final, int, dim, vData.length, ExpressionStatement(), checkVectorDimensions, dim, VariableDeclarationStatement(), ArrayRealVector, result, new, ArrayRealVector, dim, VariableDeclarationStatement(), double, resultData, result.data, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), resultData, i, data, i, vData, i, ReturnStatement(return), result, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, out, data, clone, VariableDeclarationStatement(), Iterator, Entry, it, v, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), out, e, getIndex, e, getValue, ReturnStatement(return), new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:subtract:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, VariableDeclarationStatement(), final, int, dim, vData.length, ExpressionStatement(), checkVectorDimensions, dim, VariableDeclarationStatement(), ArrayRealVector, result, new, ArrayRealVector, dim, VariableDeclarationStatement(), double, resultData, result.data, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), resultData, i, data, i, vData, i, ReturnStatement(return), result, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, out, data, clone, VariableDeclarationStatement(), Iterator, Entry, it, v, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), out, e, getIndex, e, getValue, ReturnStatement(return), new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:map:UnivariateFunction#[ReturnStatement(return), copy, mapToSelf, function]
org.apache.commons.math4.linear:ArrayRealVector:mapToSelf:UnivariateFunction#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, function, value, data, i, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayRealVector:mapAddToSelf:double#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayRealVector:mapSubtractToSelf:double#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayRealVector:mapMultiplyToSelf:double#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayRealVector:mapDivideToSelf:double#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayRealVector:ebeMultiply:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, VariableDeclarationStatement(), final, int, dim, vData.length, ExpressionStatement(), checkVectorDimensions, dim, VariableDeclarationStatement(), ArrayRealVector, result, new, ArrayRealVector, dim, VariableDeclarationStatement(), double, resultData, result.data, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), resultData, i, data, i, vData, i, ReturnStatement(return), result, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, out, data, clone, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, v, getEntry, i, ReturnStatement(return), new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:ebeDivide:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, VariableDeclarationStatement(), final, int, dim, vData.length, ExpressionStatement(), checkVectorDimensions, dim, VariableDeclarationStatement(), ArrayRealVector, result, new, ArrayRealVector, dim, VariableDeclarationStatement(), double, resultData, result.data, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), resultData, i, data, i, vData, i, ReturnStatement(return), result, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, out, data, clone, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), out, i, v, getEntry, i, ReturnStatement(return), new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:getDataRef:null#[ReturnStatement(return), data]
org.apache.commons.math4.linear:ArrayRealVector:dotProduct:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, ExpressionStatement(), checkVectorDimensions, vData.length, VariableDeclarationStatement(), double, dot, 0, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), dot, data, i, vData, i, ReturnStatement(return), dot, ReturnStatement(return), super, dotProduct, v]
org.apache.commons.math4.linear:ArrayRealVector:getNorm:null#[VariableDeclarationStatement(), double, sum, 0, EnhancedForStatement(for), double, a, data, ExpressionStatement(), sum, a, a, ReturnStatement(return), FastMath, sqrt, sum]
org.apache.commons.math4.linear:ArrayRealVector:getL1Norm:null#[VariableDeclarationStatement(), double, sum, 0, EnhancedForStatement(for), double, a, data, ExpressionStatement(), sum, FastMath, abs, a, ReturnStatement(return), sum]
org.apache.commons.math4.linear:ArrayRealVector:getLInfNorm:null#[VariableDeclarationStatement(), double, max, 0, EnhancedForStatement(for), double, a, data, ExpressionStatement(), max, FastMath, max, max, FastMath, abs, a, ReturnStatement(return), max]
org.apache.commons.math4.linear:ArrayRealVector:getDistance:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, ExpressionStatement(), checkVectorDimensions, vData.length, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, delta, data, i, vData, i, ExpressionStatement(), sum, delta, delta, ReturnStatement(return), FastMath, sqrt, sum, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, delta, data, i, v, getEntry, i, ExpressionStatement(), sum, delta, delta, ReturnStatement(return), FastMath, sqrt, sum]
org.apache.commons.math4.linear:ArrayRealVector:getL1Distance:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, ExpressionStatement(), checkVectorDimensions, vData.length, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, delta, data, i, vData, i, ExpressionStatement(), sum, FastMath, abs, delta, ReturnStatement(return), sum, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, delta, data, i, v, getEntry, i, ExpressionStatement(), sum, FastMath, abs, delta, ReturnStatement(return), sum]
org.apache.commons.math4.linear:ArrayRealVector:getLInfDistance:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, ExpressionStatement(), checkVectorDimensions, vData.length, VariableDeclarationStatement(), double, max, 0, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, delta, data, i, vData, i, ExpressionStatement(), max, FastMath, max, max, FastMath, abs, delta, ReturnStatement(return), max, ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, max, 0, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, delta, data, i, v, getEntry, i, ExpressionStatement(), max, FastMath, max, max, FastMath, abs, delta, ReturnStatement(return), max]
org.apache.commons.math4.linear:ArrayRealVector:outerProduct:RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, VariableDeclarationStatement(), final, double, vData, ArrayRealVector, v, data, VariableDeclarationStatement(), final, int, m, data.length, VariableDeclarationStatement(), final, int, n, vData.length, VariableDeclarationStatement(), final, RealMatrix, out, MatrixUtils, createRealMatrix, m, n, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), out, setEntry, i, j, data, i, vData, j, ReturnStatement(return), out, VariableDeclarationStatement(), final, int, m, data.length, VariableDeclarationStatement(), final, int, n, v, getDimension, VariableDeclarationStatement(), final, RealMatrix, out, MatrixUtils, createRealMatrix, m, n, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), out, setEntry, i, j, data, i, v, getEntry, j, ReturnStatement(return), out]
org.apache.commons.math4.linear:ArrayRealVector:getEntry:int#[TryStatement(try), ReturnStatement(return), data, index, catch, IndexOutOfBoundsException, e, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, getDimension, 1]
org.apache.commons.math4.linear:ArrayRealVector:getDimension:null#[ReturnStatement(return), data.length]
org.apache.commons.math4.linear:ArrayRealVector:append:RealVector#[TryStatement(try), ReturnStatement(return), new, ArrayRealVector, this, ArrayRealVector, v, catch, ClassCastException, cce, ReturnStatement(return), new, ArrayRealVector, this, v]
org.apache.commons.math4.linear:ArrayRealVector:append:ArrayRealVector#[ReturnStatement(return), new, ArrayRealVector, this, v]
org.apache.commons.math4.linear:ArrayRealVector:append:double#[VariableDeclarationStatement(), final, double, out, double, data.length, 1, ExpressionStatement(), System, arraycopy, data, 0, out, 0, data.length, ExpressionStatement(), out, data.length, in, ReturnStatement(return), new, ArrayRealVector, out, false]
org.apache.commons.math4.linear:ArrayRealVector:getSubVector:int+int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, VariableDeclarationStatement(), ArrayRealVector, out, new, ArrayRealVector, n, TryStatement(try), ExpressionStatement(), System, arraycopy, data, index, out.data, 0, n, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, n, 1, ReturnStatement(return), out]
org.apache.commons.math4.linear:ArrayRealVector:setEntry:int+double#[TryStatement(try), ExpressionStatement(), data, index, value, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index]
org.apache.commons.math4.linear:ArrayRealVector:addToEntry:int+double#[TryStatement(try), ExpressionStatement(), data, index, increment, catch, IndexOutOfBoundsException, e, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, data.length, 1]
org.apache.commons.math4.linear:ArrayRealVector:setSubVector:int+RealVector#[IfStatement(if), instanceof, v, ArrayRealVector, ExpressionStatement(), setSubVector, index, ArrayRealVector, v, data, TryStatement(try), ForStatement(for), int, i, index, i, index, v, getDimension, i, ExpressionStatement(), data, i, v, getEntry, i, index, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, v, getDimension, 1]
org.apache.commons.math4.linear:ArrayRealVector:setSubVector:int+double[]#[TryStatement(try), ExpressionStatement(), System, arraycopy, v, 0, data, index, v.length, catch, IndexOutOfBoundsException, e, ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, v.length, 1]
org.apache.commons.math4.linear:ArrayRealVector:set:double#[ExpressionStatement(), Arrays, fill, data, value]
org.apache.commons.math4.linear:ArrayRealVector:toArray:null#[ReturnStatement(return), data, clone]
org.apache.commons.math4.linear:ArrayRealVector:toString:null#[ReturnStatement(return), DEFAULT_FORMAT, format, this]
org.apache.commons.math4.linear:ArrayRealVector:checkVectorDimensions:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension]
org.apache.commons.math4.linear:ArrayRealVector:checkVectorDimensions:int#[IfStatement(if), data.length, n, ThrowStatement(throw), new, DimensionMismatchException, data.length, n]
org.apache.commons.math4.linear:ArrayRealVector:isNaN:null#[EnhancedForStatement(for), double, v, data, IfStatement(if), Double, isNaN, v, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.linear:ArrayRealVector:isInfinite:null#[IfStatement(if), isNaN, ReturnStatement(return), false, EnhancedForStatement(for), double, v, data, IfStatement(if), Double, isInfinite, v, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.linear:ArrayRealVector:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, RealVector, ReturnStatement(return), false, VariableDeclarationStatement(), RealVector, rhs, RealVector, other, IfStatement(if), data.length, rhs, getDimension, ReturnStatement(return), false, IfStatement(if), rhs, isNaN, ReturnStatement(return), this, isNaN, ForStatement(for), int, i, 0, i, data.length, i, IfStatement(if), data, i, rhs, getEntry, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.linear:ArrayRealVector:hashCode:null#[IfStatement(if), isNaN, ReturnStatement(return), 9, ReturnStatement(return), MathUtils, hash, data]
org.apache.commons.math4.linear:ArrayRealVector:combine:double+double+RealVector#[ReturnStatement(return), copy, combineToSelf, a, b, y]
org.apache.commons.math4.linear:ArrayRealVector:combineToSelf:double+double+RealVector#[IfStatement(if), instanceof, y, ArrayRealVector, VariableDeclarationStatement(), final, double, yData, ArrayRealVector, y, data, ExpressionStatement(), checkVectorDimensions, yData.length, ForStatement(for), int, i, 0, i, this, data, length, i, ExpressionStatement(), data, i, a, data, i, b, yData, i, ExpressionStatement(), checkVectorDimensions, y, ForStatement(for), int, i, 0, i, this, data, length, i, ExpressionStatement(), data, i, a, data, i, b, y, getEntry, i, ReturnStatement(return), this]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorPreservingVisitor#[ExpressionStatement(), visitor, start, data.length, 0, data.length, 1, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), visitor, visit, i, data, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorPreservingVisitor+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, data.length, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), visitor, visit, i, data, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorPreservingVisitor#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorPreservingVisitor+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorChangingVisitor#[ExpressionStatement(), visitor, start, data.length, 0, data.length, 1, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, visitor, visit, i, data, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInDefaultOrder:RealVectorChangingVisitor+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, data.length, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), data, i, visitor, visit, i, data, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorChangingVisitor#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:ArrayRealVector:walkInOptimizedOrder:RealVectorChangingVisitor+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:BiDiagonalTransformer:getU:null#[IfStatement(if), cachedU, null, VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), final, int, n, householderVectors, 0, length, VariableDeclarationStatement(), final, int, p, main.length, VariableDeclarationStatement(), final, int, diagOffset, m, n, 0, 1, VariableDeclarationStatement(), final, double, diagonal, m, n, main, secondary, VariableDeclarationStatement(), double, ua, double, m, m, ForStatement(for), int, k, m, 1, k, p, k, ExpressionStatement(), ua, k, k, 1, ForStatement(for), int, k, p, 1, k, diagOffset, k, VariableDeclarationStatement(), final, double, hK, householderVectors, k, ExpressionStatement(), ua, k, k, 1, IfStatement(if), hK, k, diagOffset, 0.0, ForStatement(for), int, j, k, j, m, j, VariableDeclarationStatement(), double, alpha, 0, ForStatement(for), int, i, k, i, m, i, ExpressionStatement(), alpha, ua, i, j, householderVectors, i, k, diagOffset, ExpressionStatement(), alpha, diagonal, k, diagOffset, hK, k, diagOffset, ForStatement(for), int, i, k, i, m, i, ExpressionStatement(), ua, i, j, alpha, householderVectors, i, k, diagOffset, IfStatement(if), diagOffset, 0, ExpressionStatement(), ua, 0, 0, 1, ExpressionStatement(), cachedU, MatrixUtils, createRealMatrix, ua, ReturnStatement(return), cachedU]
org.apache.commons.math4.linear:BiDiagonalTransformer:getB:null#[IfStatement(if), cachedB, null, VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), final, int, n, householderVectors, 0, length, VariableDeclarationStatement(), double, ba, double, m, n, ForStatement(for), int, i, 0, i, main.length, i, ExpressionStatement(), ba, i, i, main, i, IfStatement(if), m, n, IfStatement(if), i, 0, ExpressionStatement(), ba, i, i, 1, secondary, i, 1, IfStatement(if), i, main.length, 1, ExpressionStatement(), ba, i, i, 1, secondary, i, ExpressionStatement(), cachedB, MatrixUtils, createRealMatrix, ba, ReturnStatement(return), cachedB]
org.apache.commons.math4.linear:BiDiagonalTransformer:getV:null#[IfStatement(if), cachedV, null, VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), final, int, n, householderVectors, 0, length, VariableDeclarationStatement(), final, int, p, main.length, VariableDeclarationStatement(), final, int, diagOffset, m, n, 1, 0, VariableDeclarationStatement(), final, double, diagonal, m, n, secondary, main, VariableDeclarationStatement(), double, va, double, n, n, ForStatement(for), int, k, n, 1, k, p, k, ExpressionStatement(), va, k, k, 1, ForStatement(for), int, k, p, 1, k, diagOffset, k, VariableDeclarationStatement(), final, double, hK, householderVectors, k, diagOffset, ExpressionStatement(), va, k, k, 1, IfStatement(if), hK, k, 0.0, ForStatement(for), int, j, k, j, n, j, VariableDeclarationStatement(), double, beta, 0, ForStatement(for), int, i, k, i, n, i, ExpressionStatement(), beta, va, i, j, hK, i, ExpressionStatement(), beta, diagonal, k, diagOffset, hK, k, ForStatement(for), int, i, k, i, n, i, ExpressionStatement(), va, i, j, beta, hK, i, IfStatement(if), diagOffset, 0, ExpressionStatement(), va, 0, 0, 1, ExpressionStatement(), cachedV, MatrixUtils, createRealMatrix, va, ReturnStatement(return), cachedV]
org.apache.commons.math4.linear:BiDiagonalTransformer:getHouseholderVectorsRef:null#[ReturnStatement(return), householderVectors]
org.apache.commons.math4.linear:BiDiagonalTransformer:getMainDiagonalRef:null#[ReturnStatement(return), main]
org.apache.commons.math4.linear:BiDiagonalTransformer:getSecondaryDiagonalRef:null#[ReturnStatement(return), secondary]
org.apache.commons.math4.linear:BiDiagonalTransformer:isUpperBiDiagonal:null#[ReturnStatement(return), householderVectors.length, householderVectors, 0, length]
org.apache.commons.math4.linear:BiDiagonalTransformer:transformToUpperBiDiagonal:null#[VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), final, int, n, householderVectors, 0, length, ForStatement(for), int, k, 0, k, n, k, VariableDeclarationStatement(), double, xNormSqr, 0, ForStatement(for), int, i, k, i, m, i, VariableDeclarationStatement(), final, double, c, householderVectors, i, k, ExpressionStatement(), xNormSqr, c, c, VariableDeclarationStatement(), final, double, hK, householderVectors, k, VariableDeclarationStatement(), final, double, a, hK, k, 0, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, ExpressionStatement(), main, k, a, IfStatement(if), a, 0.0, ExpressionStatement(), hK, k, a, ForStatement(for), int, j, k, 1, j, n, j, VariableDeclarationStatement(), double, alpha, 0, ForStatement(for), int, i, k, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, ExpressionStatement(), alpha, hI, j, hI, k, ExpressionStatement(), alpha, a, householderVectors, k, k, ForStatement(for), int, i, k, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, ExpressionStatement(), hI, j, alpha, hI, k, IfStatement(if), k, n, 1, ExpressionStatement(), xNormSqr, 0, ForStatement(for), int, j, k, 1, j, n, j, VariableDeclarationStatement(), final, double, c, hK, j, ExpressionStatement(), xNormSqr, c, c, VariableDeclarationStatement(), final, double, b, hK, k, 1, 0, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, ExpressionStatement(), secondary, k, b, IfStatement(if), b, 0.0, ExpressionStatement(), hK, k, 1, b, ForStatement(for), int, i, k, 1, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, VariableDeclarationStatement(), double, beta, 0, ForStatement(for), int, j, k, 1, j, n, j, ExpressionStatement(), beta, hI, j, hK, j, ExpressionStatement(), beta, b, hK, k, 1, ForStatement(for), int, j, k, 1, j, n, j, ExpressionStatement(), hI, j, beta, hK, j]
org.apache.commons.math4.linear:BiDiagonalTransformer:transformToLowerBiDiagonal:null#[VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), final, int, n, householderVectors, 0, length, ForStatement(for), int, k, 0, k, m, k, VariableDeclarationStatement(), final, double, hK, householderVectors, k, VariableDeclarationStatement(), double, xNormSqr, 0, ForStatement(for), int, j, k, j, n, j, VariableDeclarationStatement(), final, double, c, hK, j, ExpressionStatement(), xNormSqr, c, c, VariableDeclarationStatement(), final, double, a, hK, k, 0, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, ExpressionStatement(), main, k, a, IfStatement(if), a, 0.0, ExpressionStatement(), hK, k, a, ForStatement(for), int, i, k, 1, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, VariableDeclarationStatement(), double, alpha, 0, ForStatement(for), int, j, k, j, n, j, ExpressionStatement(), alpha, hI, j, hK, j, ExpressionStatement(), alpha, a, householderVectors, k, k, ForStatement(for), int, j, k, j, n, j, ExpressionStatement(), hI, j, alpha, hK, j, IfStatement(if), k, m, 1, VariableDeclarationStatement(), final, double, hKp1, householderVectors, k, 1, ExpressionStatement(), xNormSqr, 0, ForStatement(for), int, i, k, 1, i, m, i, VariableDeclarationStatement(), final, double, c, householderVectors, i, k, ExpressionStatement(), xNormSqr, c, c, VariableDeclarationStatement(), final, double, b, hKp1, k, 0, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, ExpressionStatement(), secondary, k, b, IfStatement(if), b, 0.0, ExpressionStatement(), hKp1, k, b, ForStatement(for), int, j, k, 1, j, n, j, VariableDeclarationStatement(), double, beta, 0, ForStatement(for), int, i, k, 1, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, ExpressionStatement(), beta, hI, j, hI, k, ExpressionStatement(), beta, b, hKp1, k, ForStatement(for), int, i, k, 1, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, ExpressionStatement(), hI, j, beta, hI, k]
org.apache.commons.math4.linear:BlockFieldMatrix:toBlocksLayout:T[][]#[VariableDeclarationStatement(), final, int, rows, rawData.length, VariableDeclarationStatement(), final, int, columns, rawData, 0, length, VariableDeclarationStatement(), final, int, blockRows, rows, BLOCK_SIZE, 1, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockColumns, columns, BLOCK_SIZE, 1, BLOCK_SIZE, ForStatement(for), int, i, 0, i, rawData.length, i, VariableDeclarationStatement(), final, int, length, rawData, i, length, IfStatement(if), length, columns, ThrowStatement(throw), new, DimensionMismatchException, columns, length, VariableDeclarationStatement(), final, Field, T, field, extractField, rawData, VariableDeclarationStatement(), final, T, blocks, MathArrays, buildArray, field, blockRows, blockColumns, 1, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, iHeight, pEnd, pStart, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, int, jWidth, qEnd, qStart, VariableDeclarationStatement(), final, T, block, MathArrays, buildArray, field, iHeight, jWidth, ExpressionStatement(), blocks, blockIndex, block, VariableDeclarationStatement(), int, index, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ExpressionStatement(), System, arraycopy, rawData, p, qStart, block, index, jWidth, ExpressionStatement(), index, jWidth, ExpressionStatement(), blockIndex, ReturnStatement(return), blocks]
org.apache.commons.math4.linear:BlockFieldMatrix:createBlocksLayout:Field<T>+int+int#[VariableDeclarationStatement(), final, int, blockRows, rows, BLOCK_SIZE, 1, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockColumns, columns, BLOCK_SIZE, 1, BLOCK_SIZE, VariableDeclarationStatement(), final, T, blocks, MathArrays, buildArray, field, blockRows, blockColumns, 1, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, iHeight, pEnd, pStart, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, int, jWidth, qEnd, qStart, ExpressionStatement(), blocks, blockIndex, MathArrays, buildArray, field, iHeight, jWidth, ExpressionStatement(), blockIndex, ReturnStatement(return), blocks]
org.apache.commons.math4.linear:BlockFieldMatrix:createMatrix:int+int#[ReturnStatement(return), new, BlockFieldMatrix, T, getField, rowDimension, columnDimension]
org.apache.commons.math4.linear:BlockFieldMatrix:copy:null#[VariableDeclarationStatement(), BlockFieldMatrix, T, copied, new, BlockFieldMatrix, T, getField, rows, columns, ForStatement(for), int, i, 0, i, blocks.length, i, ExpressionStatement(), System, arraycopy, blocks, i, 0, copied.blocks, i, 0, blocks, i, length, ReturnStatement(return), copied]
org.apache.commons.math4.linear:BlockFieldMatrix:add:FieldMatrix<T>#[TryStatement(try), ReturnStatement(return), add, BlockFieldMatrix, T, m, catch, ClassCastException, cce, ExpressionStatement(), checkAdditionCompatible, m, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, T, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), outBlock, k, tBlock, k, add, m, getEntry, p, q, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:add:BlockFieldMatrix<T>#[ExpressionStatement(), checkAdditionCompatible, m, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, T, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, T, mBlock, m.blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, add, mBlock, k, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:subtract:FieldMatrix<T>#[TryStatement(try), ReturnStatement(return), subtract, BlockFieldMatrix, T, m, catch, ClassCastException, cce, ExpressionStatement(), checkSubtractionCompatible, m, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, T, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), outBlock, k, tBlock, k, subtract, m, getEntry, p, q, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:subtract:BlockFieldMatrix<T>#[ExpressionStatement(), checkSubtractionCompatible, m, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, T, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, T, mBlock, m.blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, subtract, mBlock, k, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:scalarAdd:T#[VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, T, tBlock, blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, add, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:scalarMultiply:T#[VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, T, tBlock, blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, multiply, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:multiply:FieldMatrix<T>#[TryStatement(try), ReturnStatement(return), multiply, BlockFieldMatrix, T, m, catch, ClassCastException, cce, ExpressionStatement(), checkMultiplicationCompatible, m, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, m, getColumnDimension, VariableDeclarationStatement(), final, T, zero, getField, getZero, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, m, getColumnDimension, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, ForStatement(for), int, kBlock, 0, kBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, int, kWidth, blockWidth, kBlock, VariableDeclarationStatement(), final, T, tBlock, blocks, iBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, int, rStart, kBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, int, lStart, p, pStart, kWidth, VariableDeclarationStatement(), final, int, lEnd, lStart, kWidth, ForStatement(for), int, q, qStart, q, qEnd, q, VariableDeclarationStatement(), T, sum, zero, VariableDeclarationStatement(), int, r, rStart, ForStatement(for), int, l, lStart, l, lEnd, l, ExpressionStatement(), sum, sum, add, tBlock, l, multiply, m, getEntry, r, q, ExpressionStatement(), r, ExpressionStatement(), outBlock, k, outBlock, k, add, sum, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:multiply:BlockFieldMatrix<T>#[ExpressionStatement(), checkMultiplicationCompatible, m, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, m.columns, VariableDeclarationStatement(), final, T, zero, getField, getZero, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, out, blockWidth, jBlock, VariableDeclarationStatement(), final, int, jWidth2, jWidth, jWidth, VariableDeclarationStatement(), final, int, jWidth3, jWidth2, jWidth, VariableDeclarationStatement(), final, int, jWidth4, jWidth3, jWidth, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, ForStatement(for), int, kBlock, 0, kBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, int, kWidth, blockWidth, kBlock, VariableDeclarationStatement(), final, T, tBlock, blocks, iBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, T, mBlock, m.blocks, kBlock, m.blockColumns, jBlock, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, int, lStart, p, pStart, kWidth, VariableDeclarationStatement(), final, int, lEnd, lStart, kWidth, ForStatement(for), int, nStart, 0, nStart, jWidth, nStart, VariableDeclarationStatement(), T, sum, zero, VariableDeclarationStatement(), int, l, lStart, VariableDeclarationStatement(), int, n, nStart, WhileStatement(while), l, lEnd, 3, ExpressionStatement(), sum, sum, add, tBlock, l, multiply, mBlock, n, add, tBlock, l, 1, multiply, mBlock, n, jWidth, add, tBlock, l, 2, multiply, mBlock, n, jWidth2, add, tBlock, l, 3, multiply, mBlock, n, jWidth3, ExpressionStatement(), l, 4, ExpressionStatement(), n, jWidth4, WhileStatement(while), l, lEnd, ExpressionStatement(), sum, sum, add, tBlock, l, multiply, mBlock, n, ExpressionStatement(), n, jWidth, ExpressionStatement(), outBlock, k, outBlock, k, add, sum, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:getData:null#[VariableDeclarationStatement(), final, T, data, MathArrays, buildArray, getField, getRowDimension, getColumnDimension, VariableDeclarationStatement(), final, int, lastColumns, columns, blockColumns, 1, BLOCK_SIZE, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), int, regularPos, 0, VariableDeclarationStatement(), int, lastPos, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, T, dataP, data, p, VariableDeclarationStatement(), int, blockIndex, iBlock, blockColumns, VariableDeclarationStatement(), int, dataPos, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, 1, jBlock, ExpressionStatement(), System, arraycopy, blocks, blockIndex, regularPos, dataP, dataPos, BLOCK_SIZE, ExpressionStatement(), dataPos, BLOCK_SIZE, ExpressionStatement(), System, arraycopy, blocks, blockIndex, lastPos, dataP, dataPos, lastColumns, ExpressionStatement(), regularPos, BLOCK_SIZE, ExpressionStatement(), lastPos, lastColumns, ReturnStatement(return), data]
org.apache.commons.math4.linear:BlockFieldMatrix:getSubMatrix:int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, endRow, startRow, 1, endColumn, startColumn, 1, VariableDeclarationStatement(), final, int, blockStartRow, startRow, BLOCK_SIZE, VariableDeclarationStatement(), final, int, rowsShift, startRow, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockStartColumn, startColumn, BLOCK_SIZE, VariableDeclarationStatement(), final, int, columnsShift, startColumn, BLOCK_SIZE, VariableDeclarationStatement(), int, pBlock, blockStartRow, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, out, blockHeight, iBlock, VariableDeclarationStatement(), int, qBlock, blockStartColumn, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, out, blockWidth, jBlock, VariableDeclarationStatement(), final, int, outIndex, iBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, T, outBlock, out.blocks, outIndex, VariableDeclarationStatement(), final, int, index, pBlock, blockColumns, qBlock, VariableDeclarationStatement(), final, int, width, blockWidth, qBlock, VariableDeclarationStatement(), final, int, heightExcess, iHeight, rowsShift, BLOCK_SIZE, VariableDeclarationStatement(), final, int, widthExcess, jWidth, columnsShift, BLOCK_SIZE, IfStatement(if), heightExcess, 0, IfStatement(if), widthExcess, 0, VariableDeclarationStatement(), final, int, width2, blockWidth, qBlock, 1, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, ExpressionStatement(), copyBlockPart, blocks, index, 1, width2, rowsShift, BLOCK_SIZE, 0, widthExcess, outBlock, jWidth, 0, jWidth, widthExcess, ExpressionStatement(), copyBlockPart, blocks, index, blockColumns, width, 0, heightExcess, columnsShift, BLOCK_SIZE, outBlock, jWidth, iHeight, heightExcess, 0, ExpressionStatement(), copyBlockPart, blocks, index, blockColumns, 1, width2, 0, heightExcess, 0, widthExcess, outBlock, jWidth, iHeight, heightExcess, jWidth, widthExcess, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, jWidth, columnsShift, outBlock, jWidth, 0, 0, ExpressionStatement(), copyBlockPart, blocks, index, blockColumns, width, 0, heightExcess, columnsShift, jWidth, columnsShift, outBlock, jWidth, iHeight, heightExcess, 0, IfStatement(if), widthExcess, 0, VariableDeclarationStatement(), final, int, width2, blockWidth, qBlock, 1, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, iHeight, rowsShift, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, ExpressionStatement(), copyBlockPart, blocks, index, 1, width2, rowsShift, iHeight, rowsShift, 0, widthExcess, outBlock, jWidth, 0, jWidth, widthExcess, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, iHeight, rowsShift, columnsShift, jWidth, columnsShift, outBlock, jWidth, 0, 0, ExpressionStatement(), qBlock, ExpressionStatement(), pBlock, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:copyBlockPart:T[]+int+int+int+int+int+T[]+int+int+int#[VariableDeclarationStatement(), final, int, length, srcEndColumn, srcStartColumn, VariableDeclarationStatement(), int, srcPos, srcStartRow, srcWidth, srcStartColumn, VariableDeclarationStatement(), int, dstPos, dstStartRow, dstWidth, dstStartColumn, ForStatement(for), int, srcRow, srcStartRow, srcRow, srcEndRow, srcRow, ExpressionStatement(), System, arraycopy, srcBlock, srcPos, dstBlock, dstPos, length, ExpressionStatement(), srcPos, srcWidth, ExpressionStatement(), dstPos, dstWidth]
org.apache.commons.math4.linear:BlockFieldMatrix:setSubMatrix:T[][]+int+int#[ExpressionStatement(), MathUtils, checkNotNull, subMatrix, VariableDeclarationStatement(), final, int, refLength, subMatrix, 0, length, IfStatement(if), refLength, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, VariableDeclarationStatement(), final, int, endRow, row, subMatrix.length, 1, VariableDeclarationStatement(), final, int, endColumn, column, refLength, 1, ExpressionStatement(), checkSubMatrixIndex, row, endRow, column, endColumn, EnhancedForStatement(for), final, T, subRow, subMatrix, IfStatement(if), subRow.length, refLength, ThrowStatement(throw), new, DimensionMismatchException, refLength, subRow.length, VariableDeclarationStatement(), final, int, blockStartRow, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockEndRow, endRow, BLOCK_SIZE, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockStartColumn, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockEndColumn, endColumn, BLOCK_SIZE, BLOCK_SIZE, ForStatement(for), int, iBlock, blockStartRow, iBlock, blockEndRow, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, int, firstRow, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iStart, FastMath, max, row, firstRow, VariableDeclarationStatement(), final, int, iEnd, FastMath, min, endRow, 1, firstRow, iHeight, ForStatement(for), int, jBlock, blockStartColumn, jBlock, blockEndColumn, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, firstColumn, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jStart, FastMath, max, column, firstColumn, VariableDeclarationStatement(), final, int, jEnd, FastMath, min, endColumn, 1, firstColumn, jWidth, VariableDeclarationStatement(), final, int, jLength, jEnd, jStart, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, iStart, i, iEnd, i, ExpressionStatement(), System, arraycopy, subMatrix, i, row, jStart, column, block, i, firstRow, jWidth, jStart, firstColumn, jLength]
org.apache.commons.math4.linear:BlockFieldMatrix:getRowMatrix:int#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, 1, columns, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outBlockIndex, 0, VariableDeclarationStatement(), int, outIndex, 0, VariableDeclarationStatement(), T, outBlock, out.blocks, outBlockIndex, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, available, outBlock.length, outIndex, IfStatement(if), jWidth, available, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outBlock, outIndex, available, ExpressionStatement(), outBlock, out.blocks, outBlockIndex, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outBlock, 0, jWidth, available, ExpressionStatement(), outIndex, jWidth, available, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outBlock, outIndex, jWidth, ExpressionStatement(), outIndex, jWidth, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:setRowMatrix:int+FieldMatrix<T>#[TryStatement(try), ExpressionStatement(), setRowMatrix, row, BlockFieldMatrix, T, matrix, catch, ClassCastException, cce, ExpressionStatement(), super, setRowMatrix, row, matrix]
org.apache.commons.math4.linear:BlockFieldMatrix:setRowMatrix:int+BlockFieldMatrix<T>#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), matrix, getRowDimension, 1, matrix, getColumnDimension, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, mBlockIndex, 0, VariableDeclarationStatement(), int, mIndex, 0, VariableDeclarationStatement(), T, mBlock, matrix.blocks, mBlockIndex, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, available, mBlock.length, mIndex, IfStatement(if), jWidth, available, ExpressionStatement(), System, arraycopy, mBlock, mIndex, block, iRow, jWidth, available, ExpressionStatement(), mBlock, matrix.blocks, mBlockIndex, ExpressionStatement(), System, arraycopy, mBlock, 0, block, iRow, jWidth, jWidth, available, ExpressionStatement(), mIndex, jWidth, available, ExpressionStatement(), System, arraycopy, mBlock, mIndex, block, iRow, jWidth, jWidth, ExpressionStatement(), mIndex, jWidth]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumnMatrix:int#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, rows, 1, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outBlockIndex, 0, VariableDeclarationStatement(), int, outIndex, 0, VariableDeclarationStatement(), T, outBlock, out.blocks, outBlockIndex, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, IfStatement(if), outIndex, outBlock.length, ExpressionStatement(), outBlock, out.blocks, outBlockIndex, ExpressionStatement(), outIndex, 0, ExpressionStatement(), outBlock, outIndex, block, i, jWidth, jColumn, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumnMatrix:int+FieldMatrix<T>#[TryStatement(try), ExpressionStatement(), setColumnMatrix, column, BlockFieldMatrix, T, matrix, catch, ClassCastException, cce, ExpressionStatement(), super, setColumnMatrix, column, matrix]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumnMatrix:int+BlockFieldMatrix<T>#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), matrix, getRowDimension, nRows, matrix, getColumnDimension, 1, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, mBlockIndex, 0, VariableDeclarationStatement(), int, mIndex, 0, VariableDeclarationStatement(), T, mBlock, matrix.blocks, mBlockIndex, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, IfStatement(if), mIndex, mBlock.length, ExpressionStatement(), mBlock, matrix.blocks, mBlockIndex, ExpressionStatement(), mIndex, 0, ExpressionStatement(), block, i, jWidth, jColumn, mBlock, mIndex]
org.apache.commons.math4.linear:BlockFieldMatrix:getRowVector:int#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, T, outData, MathArrays, buildArray, getField, columns, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outData, outIndex, jWidth, ExpressionStatement(), outIndex, jWidth, ReturnStatement(return), new, ArrayFieldVector, T, getField, outData, false]
org.apache.commons.math4.linear:BlockFieldMatrix:setRowVector:int+FieldVector<T>#[TryStatement(try), ExpressionStatement(), setRow, row, ArrayFieldVector, T, vector, getDataRef, catch, ClassCastException, cce, ExpressionStatement(), super, setRowVector, row, vector]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumnVector:int#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, T, outData, MathArrays, buildArray, getField, rows, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, ExpressionStatement(), outData, outIndex, block, i, jWidth, jColumn, ReturnStatement(return), new, ArrayFieldVector, T, getField, outData, false]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumnVector:int+FieldVector<T>#[TryStatement(try), ExpressionStatement(), setColumn, column, ArrayFieldVector, T, vector, getDataRef, catch, ClassCastException, cce, ExpressionStatement(), super, setColumnVector, column, vector]
org.apache.commons.math4.linear:BlockFieldMatrix:getRow:int#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, getField, columns, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, out, outIndex, jWidth, ExpressionStatement(), outIndex, jWidth, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:setRow:int+T[]#[ExpressionStatement(), checkRowIndex, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), array.length, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), System, arraycopy, array, outIndex, block, iRow, jWidth, jWidth, ExpressionStatement(), outIndex, jWidth]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumn:int#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, getField, rows, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, ExpressionStatement(), out, outIndex, block, i, jWidth, jColumn, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:setColumn:int+T[]#[ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), array.length, nRows, ThrowStatement(throw), new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, ExpressionStatement(), block, i, jWidth, jColumn, array, outIndex]
org.apache.commons.math4.linear:BlockFieldMatrix:getEntry:int+int#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, ReturnStatement(return), blocks, iBlock, blockColumns, jBlock, k]
org.apache.commons.math4.linear:BlockFieldMatrix:setEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, ExpressionStatement(), blocks, iBlock, blockColumns, jBlock, k, value]
org.apache.commons.math4.linear:BlockFieldMatrix:addToEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, T, blockIJ, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), blockIJ, k, blockIJ, k, add, increment]
org.apache.commons.math4.linear:BlockFieldMatrix:multiplyEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, T, blockIJ, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), blockIJ, k, blockIJ, k, multiply, factor]
org.apache.commons.math4.linear:BlockFieldMatrix:transpose:null#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, BlockFieldMatrix, T, out, new, BlockFieldMatrix, T, getField, nCols, nRows, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockColumns, iBlock, ForStatement(for), int, jBlock, 0, jBlock, blockRows, jBlock, VariableDeclarationStatement(), final, T, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, T, tBlock, blocks, jBlock, blockColumns, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, int, lInc, pEnd, pStart, VariableDeclarationStatement(), int, l, p, pStart, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), outBlock, k, tBlock, l, ExpressionStatement(), k, ExpressionStatement(), l, lInc, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:getRowDimension:null#[ReturnStatement(return), rows]
org.apache.commons.math4.linear:BlockFieldMatrix:getColumnDimension:null#[ReturnStatement(return), columns]
org.apache.commons.math4.linear:BlockFieldMatrix:operate:T[]#[IfStatement(if), v.length, columns, ThrowStatement(throw), new, DimensionMismatchException, v.length, columns, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, getField, rows, VariableDeclarationStatement(), final, T, zero, getField, getZero, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), T, sum, zero, VariableDeclarationStatement(), int, q, qStart, WhileStatement(while), q, qEnd, 3, ExpressionStatement(), sum, sum, add, block, k, multiply, v, q, add, block, k, 1, multiply, v, q, 1, add, block, k, 2, multiply, v, q, 2, add, block, k, 3, multiply, v, q, 3, ExpressionStatement(), k, 4, ExpressionStatement(), q, 4, WhileStatement(while), q, qEnd, ExpressionStatement(), sum, sum, add, block, k, multiply, v, q, ExpressionStatement(), out, p, out, p, add, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:preMultiply:T[]#[IfStatement(if), v.length, rows, ThrowStatement(throw), new, DimensionMismatchException, v.length, rows, VariableDeclarationStatement(), final, T, out, MathArrays, buildArray, getField, columns, VariableDeclarationStatement(), final, T, zero, getField, getZero, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, jWidth2, jWidth, jWidth, VariableDeclarationStatement(), final, int, jWidth3, jWidth2, jWidth, VariableDeclarationStatement(), final, int, jWidth4, jWidth3, jWidth, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, q, qStart, q, qEnd, q, VariableDeclarationStatement(), int, k, q, qStart, VariableDeclarationStatement(), T, sum, zero, VariableDeclarationStatement(), int, p, pStart, WhileStatement(while), p, pEnd, 3, ExpressionStatement(), sum, sum, add, block, k, multiply, v, p, add, block, k, jWidth, multiply, v, p, 1, add, block, k, jWidth2, multiply, v, p, 2, add, block, k, jWidth3, multiply, v, p, 3, ExpressionStatement(), k, jWidth4, ExpressionStatement(), p, 4, WhileStatement(while), p, pEnd, ExpressionStatement(), sum, sum, add, block, k, multiply, v, p, ExpressionStatement(), k, jWidth, ExpressionStatement(), out, q, out, q, add, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, pStart, jWidth, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, pStart, jWidth, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInRowOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, T, block, blocks, blockIndex, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, T, block, blocks, blockIndex, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixChangingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:walkInOptimizedOrder:FieldMatrixPreservingVisitor<T>+int+int+int+int#[ExpressionStatement(), checkSubMatrixIndex, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, T, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockFieldMatrix:blockHeight:int#[ReturnStatement(return), blockRow, blockRows, 1, rows, blockRow, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:BlockFieldMatrix:blockWidth:int#[ReturnStatement(return), blockColumn, blockColumns, 1, columns, blockColumn, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:BlockRealMatrix:toBlocksLayout:double[][]#[VariableDeclarationStatement(), final, int, rows, rawData.length, VariableDeclarationStatement(), final, int, columns, rawData, 0, length, VariableDeclarationStatement(), final, int, blockRows, rows, BLOCK_SIZE, 1, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockColumns, columns, BLOCK_SIZE, 1, BLOCK_SIZE, ForStatement(for), int, i, 0, i, rawData.length, i, VariableDeclarationStatement(), final, int, length, rawData, i, length, IfStatement(if), length, columns, ThrowStatement(throw), new, DimensionMismatchException, columns, length, VariableDeclarationStatement(), final, double, blocks, double, blockRows, blockColumns, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, iHeight, pEnd, pStart, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, int, jWidth, qEnd, qStart, VariableDeclarationStatement(), final, double, block, double, iHeight, jWidth, ExpressionStatement(), blocks, blockIndex, block, VariableDeclarationStatement(), int, index, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ExpressionStatement(), System, arraycopy, rawData, p, qStart, block, index, jWidth, ExpressionStatement(), index, jWidth, ExpressionStatement(), blockIndex, ReturnStatement(return), blocks]
org.apache.commons.math4.linear:BlockRealMatrix:createBlocksLayout:int+int#[VariableDeclarationStatement(), final, int, blockRows, rows, BLOCK_SIZE, 1, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockColumns, columns, BLOCK_SIZE, 1, BLOCK_SIZE, VariableDeclarationStatement(), final, double, blocks, double, blockRows, blockColumns, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, iHeight, pEnd, pStart, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, int, jWidth, qEnd, qStart, ExpressionStatement(), blocks, blockIndex, double, iHeight, jWidth, ExpressionStatement(), blockIndex, ReturnStatement(return), blocks]
org.apache.commons.math4.linear:BlockRealMatrix:createMatrix:int+int#[ReturnStatement(return), new, BlockRealMatrix, rowDimension, columnDimension]
org.apache.commons.math4.linear:BlockRealMatrix:copy:null#[VariableDeclarationStatement(), BlockRealMatrix, copied, new, BlockRealMatrix, rows, columns, ForStatement(for), int, i, 0, i, blocks.length, i, ExpressionStatement(), System, arraycopy, blocks, i, 0, copied.blocks, i, 0, blocks, i, length, ReturnStatement(return), copied]
org.apache.commons.math4.linear:BlockRealMatrix:add:RealMatrix#[TryStatement(try), ReturnStatement(return), add, BlockRealMatrix, m, catch, ClassCastException, cce, ExpressionStatement(), MatrixUtils, checkAdditionCompatible, this, m, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, double, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), outBlock, k, tBlock, k, m, getEntry, p, q, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:add:BlockRealMatrix#[ExpressionStatement(), MatrixUtils, checkAdditionCompatible, this, m, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, double, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, double, mBlock, m.blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, mBlock, k, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:subtract:RealMatrix#[TryStatement(try), ReturnStatement(return), subtract, BlockRealMatrix, m, catch, ClassCastException, cce, ExpressionStatement(), MatrixUtils, checkSubtractionCompatible, this, m, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, double, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), outBlock, k, tBlock, k, m, getEntry, p, q, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:subtract:BlockRealMatrix#[ExpressionStatement(), MatrixUtils, checkSubtractionCompatible, this, m, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, double, tBlock, blocks, blockIndex, VariableDeclarationStatement(), final, double, mBlock, m.blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, mBlock, k, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:scalarAdd:double#[VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, double, tBlock, blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:scalarMultiply:double#[VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, columns, ForStatement(for), int, blockIndex, 0, blockIndex, out.blocks.length, blockIndex, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, double, tBlock, blocks, blockIndex, ForStatement(for), int, k, 0, k, outBlock.length, k, ExpressionStatement(), outBlock, k, tBlock, k, d, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:multiply:RealMatrix#[TryStatement(try), ReturnStatement(return), multiply, BlockRealMatrix, m, catch, ClassCastException, cce, ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, m, getColumnDimension, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, m, getColumnDimension, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, ForStatement(for), int, kBlock, 0, kBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, int, kWidth, blockWidth, kBlock, VariableDeclarationStatement(), final, double, tBlock, blocks, iBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, int, rStart, kBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, int, lStart, p, pStart, kWidth, VariableDeclarationStatement(), final, int, lEnd, lStart, kWidth, ForStatement(for), int, q, qStart, q, qEnd, q, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), int, r, rStart, ForStatement(for), int, l, lStart, l, lEnd, l, ExpressionStatement(), sum, tBlock, l, m, getEntry, r, q, ExpressionStatement(), r, ExpressionStatement(), outBlock, k, sum, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:multiply:BlockRealMatrix#[ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, m.columns, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, out, blockWidth, jBlock, VariableDeclarationStatement(), final, int, jWidth2, jWidth, jWidth, VariableDeclarationStatement(), final, int, jWidth3, jWidth2, jWidth, VariableDeclarationStatement(), final, int, jWidth4, jWidth3, jWidth, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, ForStatement(for), int, kBlock, 0, kBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, int, kWidth, blockWidth, kBlock, VariableDeclarationStatement(), final, double, tBlock, blocks, iBlock, blockColumns, kBlock, VariableDeclarationStatement(), final, double, mBlock, m.blocks, kBlock, m.blockColumns, jBlock, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, int, lStart, p, pStart, kWidth, VariableDeclarationStatement(), final, int, lEnd, lStart, kWidth, ForStatement(for), int, nStart, 0, nStart, jWidth, nStart, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), int, l, lStart, VariableDeclarationStatement(), int, n, nStart, WhileStatement(while), l, lEnd, 3, ExpressionStatement(), sum, tBlock, l, mBlock, n, tBlock, l, 1, mBlock, n, jWidth, tBlock, l, 2, mBlock, n, jWidth2, tBlock, l, 3, mBlock, n, jWidth3, ExpressionStatement(), l, 4, ExpressionStatement(), n, jWidth4, WhileStatement(while), l, lEnd, ExpressionStatement(), sum, tBlock, l, mBlock, n, ExpressionStatement(), n, jWidth, ExpressionStatement(), outBlock, k, sum, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:getData:null#[VariableDeclarationStatement(), final, double, data, double, getRowDimension, getColumnDimension, VariableDeclarationStatement(), final, int, lastColumns, columns, blockColumns, 1, BLOCK_SIZE, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), int, regularPos, 0, VariableDeclarationStatement(), int, lastPos, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, double, dataP, data, p, VariableDeclarationStatement(), int, blockIndex, iBlock, blockColumns, VariableDeclarationStatement(), int, dataPos, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, 1, jBlock, ExpressionStatement(), System, arraycopy, blocks, blockIndex, regularPos, dataP, dataPos, BLOCK_SIZE, ExpressionStatement(), dataPos, BLOCK_SIZE, ExpressionStatement(), System, arraycopy, blocks, blockIndex, lastPos, dataP, dataPos, lastColumns, ExpressionStatement(), regularPos, BLOCK_SIZE, ExpressionStatement(), lastPos, lastColumns, ReturnStatement(return), data]
org.apache.commons.math4.linear:BlockRealMatrix:getNorm:null#[VariableDeclarationStatement(), final, double, colSums, double, BLOCK_SIZE, VariableDeclarationStatement(), double, maxColSum, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, ExpressionStatement(), Arrays, fill, colSums, 0, jWidth, 0.0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, j, 0, j, jWidth, j, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, iHeight, i, ExpressionStatement(), sum, FastMath, abs, block, i, jWidth, j, ExpressionStatement(), colSums, j, sum, ForStatement(for), int, j, 0, j, jWidth, j, ExpressionStatement(), maxColSum, FastMath, max, maxColSum, colSums, j, ReturnStatement(return), maxColSum]
org.apache.commons.math4.linear:BlockRealMatrix:getFrobeniusNorm:null#[VariableDeclarationStatement(), double, sum2, 0, ForStatement(for), int, blockIndex, 0, blockIndex, blocks.length, blockIndex, EnhancedForStatement(for), final, double, entry, blocks, blockIndex, ExpressionStatement(), sum2, entry, entry, ReturnStatement(return), FastMath, sqrt, sum2]
org.apache.commons.math4.linear:BlockRealMatrix:getSubMatrix:int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, endRow, startRow, 1, endColumn, startColumn, 1, VariableDeclarationStatement(), final, int, blockStartRow, startRow, BLOCK_SIZE, VariableDeclarationStatement(), final, int, rowsShift, startRow, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockStartColumn, startColumn, BLOCK_SIZE, VariableDeclarationStatement(), final, int, columnsShift, startColumn, BLOCK_SIZE, VariableDeclarationStatement(), int, pBlock, blockStartRow, ForStatement(for), int, iBlock, 0, iBlock, out.blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, out, blockHeight, iBlock, VariableDeclarationStatement(), int, qBlock, blockStartColumn, ForStatement(for), int, jBlock, 0, jBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, out, blockWidth, jBlock, VariableDeclarationStatement(), final, int, outIndex, iBlock, out.blockColumns, jBlock, VariableDeclarationStatement(), final, double, outBlock, out.blocks, outIndex, VariableDeclarationStatement(), final, int, index, pBlock, blockColumns, qBlock, VariableDeclarationStatement(), final, int, width, blockWidth, qBlock, VariableDeclarationStatement(), final, int, heightExcess, iHeight, rowsShift, BLOCK_SIZE, VariableDeclarationStatement(), final, int, widthExcess, jWidth, columnsShift, BLOCK_SIZE, IfStatement(if), heightExcess, 0, IfStatement(if), widthExcess, 0, VariableDeclarationStatement(), final, int, width2, blockWidth, qBlock, 1, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, ExpressionStatement(), copyBlockPart, blocks, index, 1, width2, rowsShift, BLOCK_SIZE, 0, widthExcess, outBlock, jWidth, 0, jWidth, widthExcess, ExpressionStatement(), copyBlockPart, blocks, index, blockColumns, width, 0, heightExcess, columnsShift, BLOCK_SIZE, outBlock, jWidth, iHeight, heightExcess, 0, ExpressionStatement(), copyBlockPart, blocks, index, blockColumns, 1, width2, 0, heightExcess, 0, widthExcess, outBlock, jWidth, iHeight, heightExcess, jWidth, widthExcess, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, BLOCK_SIZE, columnsShift, jWidth, columnsShift, outBlock, jWidth, 0, 0, ExpressionStatement(), copyBlockPart, blocks, index, blockColumns, width, 0, heightExcess, columnsShift, jWidth, columnsShift, outBlock, jWidth, iHeight, heightExcess, 0, IfStatement(if), widthExcess, 0, VariableDeclarationStatement(), final, int, width2, blockWidth, qBlock, 1, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, iHeight, rowsShift, columnsShift, BLOCK_SIZE, outBlock, jWidth, 0, 0, ExpressionStatement(), copyBlockPart, blocks, index, 1, width2, rowsShift, iHeight, rowsShift, 0, widthExcess, outBlock, jWidth, 0, jWidth, widthExcess, ExpressionStatement(), copyBlockPart, blocks, index, width, rowsShift, iHeight, rowsShift, columnsShift, jWidth, columnsShift, outBlock, jWidth, 0, 0, ExpressionStatement(), qBlock, ExpressionStatement(), pBlock, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:copyBlockPart:double[]+int+int+int+int+int+double[]+int+int+int#[VariableDeclarationStatement(), final, int, length, srcEndColumn, srcStartColumn, VariableDeclarationStatement(), int, srcPos, srcStartRow, srcWidth, srcStartColumn, VariableDeclarationStatement(), int, dstPos, dstStartRow, dstWidth, dstStartColumn, ForStatement(for), int, srcRow, srcStartRow, srcRow, srcEndRow, srcRow, ExpressionStatement(), System, arraycopy, srcBlock, srcPos, dstBlock, dstPos, length, ExpressionStatement(), srcPos, srcWidth, ExpressionStatement(), dstPos, dstWidth]
org.apache.commons.math4.linear:BlockRealMatrix:setSubMatrix:double[][]+int+int#[ExpressionStatement(), MathUtils, checkNotNull, subMatrix, VariableDeclarationStatement(), final, int, refLength, subMatrix, 0, length, IfStatement(if), refLength, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, VariableDeclarationStatement(), final, int, endRow, row, subMatrix.length, 1, VariableDeclarationStatement(), final, int, endColumn, column, refLength, 1, ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, row, endRow, column, endColumn, EnhancedForStatement(for), final, double, subRow, subMatrix, IfStatement(if), subRow.length, refLength, ThrowStatement(throw), new, DimensionMismatchException, refLength, subRow.length, VariableDeclarationStatement(), final, int, blockStartRow, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockEndRow, endRow, BLOCK_SIZE, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockStartColumn, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, blockEndColumn, endColumn, BLOCK_SIZE, BLOCK_SIZE, ForStatement(for), int, iBlock, blockStartRow, iBlock, blockEndRow, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, int, firstRow, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iStart, FastMath, max, row, firstRow, VariableDeclarationStatement(), final, int, iEnd, FastMath, min, endRow, 1, firstRow, iHeight, ForStatement(for), int, jBlock, blockStartColumn, jBlock, blockEndColumn, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, firstColumn, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jStart, FastMath, max, column, firstColumn, VariableDeclarationStatement(), final, int, jEnd, FastMath, min, endColumn, 1, firstColumn, jWidth, VariableDeclarationStatement(), final, int, jLength, jEnd, jStart, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, iStart, i, iEnd, i, ExpressionStatement(), System, arraycopy, subMatrix, i, row, jStart, column, block, i, firstRow, jWidth, jStart, firstColumn, jLength]
org.apache.commons.math4.linear:BlockRealMatrix:getRowMatrix:int#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, 1, columns, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outBlockIndex, 0, VariableDeclarationStatement(), int, outIndex, 0, VariableDeclarationStatement(), double, outBlock, out.blocks, outBlockIndex, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, available, outBlock.length, outIndex, IfStatement(if), jWidth, available, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outBlock, outIndex, available, ExpressionStatement(), outBlock, out.blocks, outBlockIndex, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outBlock, 0, jWidth, available, ExpressionStatement(), outIndex, jWidth, available, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outBlock, outIndex, jWidth, ExpressionStatement(), outIndex, jWidth, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:setRowMatrix:int+RealMatrix#[TryStatement(try), ExpressionStatement(), setRowMatrix, row, BlockRealMatrix, matrix, catch, ClassCastException, cce, ExpressionStatement(), super, setRowMatrix, row, matrix]
org.apache.commons.math4.linear:BlockRealMatrix:setRowMatrix:int+BlockRealMatrix#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), matrix, getRowDimension, 1, matrix, getColumnDimension, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, 1, nCols, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, mBlockIndex, 0, VariableDeclarationStatement(), int, mIndex, 0, VariableDeclarationStatement(), double, mBlock, matrix.blocks, mBlockIndex, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, available, mBlock.length, mIndex, IfStatement(if), jWidth, available, ExpressionStatement(), System, arraycopy, mBlock, mIndex, block, iRow, jWidth, available, ExpressionStatement(), mBlock, matrix.blocks, mBlockIndex, ExpressionStatement(), System, arraycopy, mBlock, 0, block, iRow, jWidth, jWidth, available, ExpressionStatement(), mIndex, jWidth, available, ExpressionStatement(), System, arraycopy, mBlock, mIndex, block, iRow, jWidth, jWidth, ExpressionStatement(), mIndex, jWidth]
org.apache.commons.math4.linear:BlockRealMatrix:getColumnMatrix:int#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, 1, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outBlockIndex, 0, VariableDeclarationStatement(), int, outIndex, 0, VariableDeclarationStatement(), double, outBlock, out.blocks, outBlockIndex, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, IfStatement(if), outIndex, outBlock.length, ExpressionStatement(), outBlock, out.blocks, outBlockIndex, ExpressionStatement(), outIndex, 0, ExpressionStatement(), outBlock, outIndex, block, i, jWidth, jColumn, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:setColumnMatrix:int+RealMatrix#[TryStatement(try), ExpressionStatement(), setColumnMatrix, column, BlockRealMatrix, matrix, catch, ClassCastException, cce, ExpressionStatement(), super, setColumnMatrix, column, matrix]
org.apache.commons.math4.linear:BlockRealMatrix:setColumnMatrix:int+BlockRealMatrix#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), matrix, getRowDimension, nRows, matrix, getColumnDimension, 1, ThrowStatement(throw), new, MatrixDimensionMismatchException, matrix, getRowDimension, matrix, getColumnDimension, nRows, 1, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, mBlockIndex, 0, VariableDeclarationStatement(), int, mIndex, 0, VariableDeclarationStatement(), double, mBlock, matrix.blocks, mBlockIndex, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, IfStatement(if), mIndex, mBlock.length, ExpressionStatement(), mBlock, matrix.blocks, mBlockIndex, ExpressionStatement(), mIndex, 0, ExpressionStatement(), block, i, jWidth, jColumn, mBlock, mIndex]
org.apache.commons.math4.linear:BlockRealMatrix:getRowVector:int#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, double, outData, double, columns, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, outData, outIndex, jWidth, ExpressionStatement(), outIndex, jWidth, ReturnStatement(return), new, ArrayRealVector, outData, false]
org.apache.commons.math4.linear:BlockRealMatrix:setRowVector:int+RealVector#[TryStatement(try), ExpressionStatement(), setRow, row, ArrayRealVector, vector, getDataRef, catch, ClassCastException, cce, ExpressionStatement(), super, setRowVector, row, vector]
org.apache.commons.math4.linear:BlockRealMatrix:getColumnVector:int#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, double, outData, double, rows, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, ExpressionStatement(), outData, outIndex, block, i, jWidth, jColumn, ReturnStatement(return), new, ArrayRealVector, outData, false]
org.apache.commons.math4.linear:BlockRealMatrix:setColumnVector:int+RealVector#[TryStatement(try), ExpressionStatement(), setColumn, column, ArrayRealVector, vector, getDataRef, catch, ClassCastException, cce, ExpressionStatement(), super, setColumnVector, column, vector]
org.apache.commons.math4.linear:BlockRealMatrix:getRow:int#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, double, out, double, columns, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), System, arraycopy, block, iRow, jWidth, out, outIndex, jWidth, ExpressionStatement(), outIndex, jWidth, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:setRow:int+double[]#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, IfStatement(if), array.length, nCols, ThrowStatement(throw), new, MatrixDimensionMismatchException, 1, array.length, 1, nCols, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, iRow, row, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ExpressionStatement(), System, arraycopy, array, outIndex, block, iRow, jWidth, jWidth, ExpressionStatement(), outIndex, jWidth]
org.apache.commons.math4.linear:BlockRealMatrix:getColumn:int#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, double, out, double, rows, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, ExpressionStatement(), out, outIndex, block, i, jWidth, jColumn, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:setColumn:int+double[]#[ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, nRows, getRowDimension, IfStatement(if), array.length, nRows, ThrowStatement(throw), new, MatrixDimensionMismatchException, array.length, 1, nRows, 1, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jColumn, column, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), int, outIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, iHeight, blockHeight, iBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, i, 0, i, iHeight, i, ExpressionStatement(), block, i, jWidth, jColumn, array, outIndex]
org.apache.commons.math4.linear:BlockRealMatrix:getEntry:int+int#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, ReturnStatement(return), blocks, iBlock, blockColumns, jBlock, k]
org.apache.commons.math4.linear:BlockRealMatrix:setEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, ExpressionStatement(), blocks, iBlock, blockColumns, jBlock, k, value]
org.apache.commons.math4.linear:BlockRealMatrix:addToEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, ExpressionStatement(), blocks, iBlock, blockColumns, jBlock, k, increment]
org.apache.commons.math4.linear:BlockRealMatrix:multiplyEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, VariableDeclarationStatement(), final, int, iBlock, row, BLOCK_SIZE, VariableDeclarationStatement(), final, int, jBlock, column, BLOCK_SIZE, VariableDeclarationStatement(), final, int, k, row, iBlock, BLOCK_SIZE, blockWidth, jBlock, column, jBlock, BLOCK_SIZE, ExpressionStatement(), blocks, iBlock, blockColumns, jBlock, k, factor]
org.apache.commons.math4.linear:BlockRealMatrix:transpose:null#[VariableDeclarationStatement(), final, int, nRows, getRowDimension, VariableDeclarationStatement(), final, int, nCols, getColumnDimension, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, nCols, nRows, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockColumns, iBlock, ForStatement(for), int, jBlock, 0, jBlock, blockRows, jBlock, VariableDeclarationStatement(), final, double, outBlock, out.blocks, blockIndex, VariableDeclarationStatement(), final, double, tBlock, blocks, jBlock, blockColumns, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, rows, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), final, int, lInc, pEnd, pStart, VariableDeclarationStatement(), int, l, p, pStart, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), outBlock, k, tBlock, l, ExpressionStatement(), k, ExpressionStatement(), l, lInc, ExpressionStatement(), blockIndex, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:getRowDimension:null#[ReturnStatement(return), rows]
org.apache.commons.math4.linear:BlockRealMatrix:getColumnDimension:null#[ReturnStatement(return), columns]
org.apache.commons.math4.linear:BlockRealMatrix:operate:double[]#[IfStatement(if), v.length, columns, ThrowStatement(throw), new, DimensionMismatchException, v.length, columns, VariableDeclarationStatement(), final, double, out, double, rows, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), int, q, qStart, WhileStatement(while), q, qEnd, 3, ExpressionStatement(), sum, block, k, v, q, block, k, 1, v, q, 1, block, k, 2, v, q, 2, block, k, 3, v, q, 3, ExpressionStatement(), k, 4, ExpressionStatement(), q, 4, WhileStatement(while), q, qEnd, ExpressionStatement(), sum, block, k, v, q, ExpressionStatement(), out, p, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:preMultiply:double[]#[IfStatement(if), v.length, rows, ThrowStatement(throw), new, DimensionMismatchException, v.length, rows, VariableDeclarationStatement(), final, double, out, double, columns, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, jWidth2, jWidth, jWidth, VariableDeclarationStatement(), final, int, jWidth3, jWidth2, jWidth, VariableDeclarationStatement(), final, int, jWidth4, jWidth3, jWidth, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, q, qStart, q, qEnd, q, VariableDeclarationStatement(), int, k, q, qStart, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), int, p, pStart, WhileStatement(while), p, pEnd, 3, ExpressionStatement(), sum, block, k, v, p, block, k, jWidth, v, p, 1, block, k, jWidth2, v, p, 2, block, k, jWidth3, v, p, 3, ExpressionStatement(), k, jWidth4, ExpressionStatement(), p, 4, WhileStatement(while), p, pEnd, ExpressionStatement(), sum, block, k, v, p, ExpressionStatement(), k, jWidth, ExpressionStatement(), out, q, sum, ReturnStatement(return), out]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixChangingVisitor#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, pStart, jWidth, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, pStart, jWidth, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixChangingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInRowOrder:RealMatrixPreservingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, double, block, blocks, blockIndex, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor#[ExpressionStatement(), visitor, start, rows, columns, 0, rows, 1, 0, columns, 1, VariableDeclarationStatement(), int, blockIndex, 0, ForStatement(for), int, iBlock, 0, iBlock, blockRows, iBlock, VariableDeclarationStatement(), final, int, pStart, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, pStart, BLOCK_SIZE, rows, ForStatement(for), int, jBlock, 0, jBlock, blockColumns, jBlock, VariableDeclarationStatement(), final, int, qStart, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, qStart, BLOCK_SIZE, columns, VariableDeclarationStatement(), final, double, block, blocks, blockIndex, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, p, pStart, p, pEnd, p, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ExpressionStatement(), blockIndex, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixChangingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), block, k, visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:walkInOptimizedOrder:RealMatrixPreservingVisitor+int+int+int+int#[ExpressionStatement(), MatrixUtils, checkSubMatrixIndex, this, startRow, endRow, startColumn, endColumn, ExpressionStatement(), visitor, start, rows, columns, startRow, endRow, startColumn, endColumn, ForStatement(for), int, iBlock, startRow, BLOCK_SIZE, iBlock, 1, endRow, BLOCK_SIZE, iBlock, VariableDeclarationStatement(), final, int, p0, iBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, pStart, FastMath, max, startRow, p0, VariableDeclarationStatement(), final, int, pEnd, FastMath, min, iBlock, 1, BLOCK_SIZE, 1, endRow, ForStatement(for), int, jBlock, startColumn, BLOCK_SIZE, jBlock, 1, endColumn, BLOCK_SIZE, jBlock, VariableDeclarationStatement(), final, int, jWidth, blockWidth, jBlock, VariableDeclarationStatement(), final, int, q0, jBlock, BLOCK_SIZE, VariableDeclarationStatement(), final, int, qStart, FastMath, max, startColumn, q0, VariableDeclarationStatement(), final, int, qEnd, FastMath, min, jBlock, 1, BLOCK_SIZE, 1, endColumn, VariableDeclarationStatement(), final, double, block, blocks, iBlock, blockColumns, jBlock, ForStatement(for), int, p, pStart, p, pEnd, p, VariableDeclarationStatement(), int, k, p, p0, jWidth, qStart, q0, ForStatement(for), int, q, qStart, q, qEnd, q, ExpressionStatement(), visitor, visit, p, q, block, k, ExpressionStatement(), k, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:BlockRealMatrix:blockHeight:int#[ReturnStatement(return), blockRow, blockRows, 1, rows, blockRow, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:BlockRealMatrix:blockWidth:int#[ReturnStatement(return), blockColumn, blockColumns, 1, columns, blockColumn, BLOCK_SIZE, BLOCK_SIZE]
org.apache.commons.math4.linear:CholeskyDecomposition:getL:null#[IfStatement(if), cachedL, null, ExpressionStatement(), cachedL, getLT, transpose, ReturnStatement(return), cachedL]
org.apache.commons.math4.linear:CholeskyDecomposition:getLT:null#[IfStatement(if), cachedLT, null, ExpressionStatement(), cachedLT, MatrixUtils, createRealMatrix, lTData, ReturnStatement(return), cachedLT]
org.apache.commons.math4.linear:CholeskyDecomposition:getDeterminant:null#[VariableDeclarationStatement(), double, determinant, 1.0, ForStatement(for), int, i, 0, i, lTData.length, i, VariableDeclarationStatement(), double, lTii, lTData, i, i, ExpressionStatement(), determinant, lTii, lTii, ReturnStatement(return), determinant]
org.apache.commons.math4.linear:CholeskyDecomposition:getSolver:null#[ReturnStatement(return), new, Solver, lTData]
org.apache.commons.math4.linear:ConjugateGradient:getCheck:null#[ReturnStatement(return), check]
org.apache.commons.math4.linear:ConjugateGradient:solveInPlace:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), checkParameters, a, m, b, x0, VariableDeclarationStatement(), final, IterationManager, manager, getIterationManager, ExpressionStatement(), manager, resetIterationCount, VariableDeclarationStatement(), final, double, rmax, delta, b, getNorm, VariableDeclarationStatement(), final, RealVector, bro, RealVector, unmodifiableRealVector, b, ExpressionStatement(), manager, incrementIterationCount, VariableDeclarationStatement(), final, RealVector, x, x0, VariableDeclarationStatement(), final, RealVector, xro, RealVector, unmodifiableRealVector, x, VariableDeclarationStatement(), final, RealVector, p, x, copy, VariableDeclarationStatement(), RealVector, q, a, operate, p, VariableDeclarationStatement(), final, RealVector, r, b, combine, 1, 1, q, VariableDeclarationStatement(), final, RealVector, rro, RealVector, unmodifiableRealVector, r, VariableDeclarationStatement(), double, rnorm, r, getNorm, VariableDeclarationStatement(), RealVector, z, IfStatement(if), m, null, ExpressionStatement(), z, r, ExpressionStatement(), z, null, VariableDeclarationStatement(), IterativeLinearSolverEvent, evt, ExpressionStatement(), evt, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, xro, bro, rro, rnorm, ExpressionStatement(), manager, fireInitializationEvent, evt, IfStatement(if), rnorm, rmax, ExpressionStatement(), manager, fireTerminationEvent, evt, ReturnStatement(return), x, VariableDeclarationStatement(), double, rhoPrev, 0., WhileStatement(while), true, ExpressionStatement(), manager, incrementIterationCount, ExpressionStatement(), evt, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, xro, bro, rro, rnorm, ExpressionStatement(), manager, fireIterationStartedEvent, evt, IfStatement(if), m, null, ExpressionStatement(), z, m, operate, r, VariableDeclarationStatement(), final, double, rhoNext, r, dotProduct, z, IfStatement(if), check, rhoNext, 0., VariableDeclarationStatement(), final, NonPositiveDefiniteOperatorException, e, ExpressionStatement(), e, new, NonPositiveDefiniteOperatorException, VariableDeclarationStatement(), final, ExceptionContext, context, e, getContext, ExpressionStatement(), context, setValue, OPERATOR, m, ExpressionStatement(), context, setValue, VECTOR, r, ThrowStatement(throw), e, IfStatement(if), manager, getIterations, 2, ExpressionStatement(), p, setSubVector, 0, z, ExpressionStatement(), p, combineToSelf, rhoNext, rhoPrev, 1., z, ExpressionStatement(), q, a, operate, p, VariableDeclarationStatement(), final, double, pq, p, dotProduct, q, IfStatement(if), check, pq, 0., VariableDeclarationStatement(), final, NonPositiveDefiniteOperatorException, e, ExpressionStatement(), e, new, NonPositiveDefiniteOperatorException, VariableDeclarationStatement(), final, ExceptionContext, context, e, getContext, ExpressionStatement(), context, setValue, OPERATOR, a, ExpressionStatement(), context, setValue, VECTOR, p, ThrowStatement(throw), e, VariableDeclarationStatement(), final, double, alpha, rhoNext, pq, ExpressionStatement(), x, combineToSelf, 1., alpha, p, ExpressionStatement(), r, combineToSelf, 1., alpha, q, ExpressionStatement(), rhoPrev, rhoNext, ExpressionStatement(), rnorm, r, getNorm, ExpressionStatement(), evt, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, xro, bro, rro, rnorm, ExpressionStatement(), manager, fireIterationPerformedEvent, evt, IfStatement(if), rnorm, rmax, ExpressionStatement(), manager, fireTerminationEvent, evt, ReturnStatement(return), x]
org.apache.commons.math4.linear:DefaultFieldMatrixChangingVisitor:visit:int+int+T#[ReturnStatement(return), value]
org.apache.commons.math4.linear:DefaultFieldMatrixChangingVisitor:end:null#[ReturnStatement(return), zero]
org.apache.commons.math4.linear:DefaultFieldMatrixPreservingVisitor:end:null#[ReturnStatement(return), zero]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getNormOfResidual:null#[ReturnStatement(return), rnorm]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getResidual:null#[IfStatement(if), r, null, ReturnStatement(return), r, ThrowStatement(throw), new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getRightHandSideVector:null#[ReturnStatement(return), b]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:getSolution:null#[ReturnStatement(return), x]
org.apache.commons.math4.linear:DefaultIterativeLinearSolverEvent:providesResidual:null#[ReturnStatement(return), r, null]
org.apache.commons.math4.linear:DefaultRealMatrixChangingVisitor:visit:int+int+double#[ReturnStatement(return), value]
org.apache.commons.math4.linear:DefaultRealMatrixChangingVisitor:end:null#[ReturnStatement(return), 0]
org.apache.commons.math4.linear:DefaultRealMatrixPreservingVisitor:end:null#[ReturnStatement(return), 0]
org.apache.commons.math4.linear:DiagonalMatrix:createMatrix:int+int#[IfStatement(if), rowDimension, columnDimension, ThrowStatement(throw), new, DimensionMismatchException, rowDimension, columnDimension, ReturnStatement(return), new, DiagonalMatrix, rowDimension]
org.apache.commons.math4.linear:DiagonalMatrix:copy:null#[ReturnStatement(return), new, DiagonalMatrix, data]
org.apache.commons.math4.linear:DiagonalMatrix:add:DiagonalMatrix#[ExpressionStatement(), MatrixUtils, checkAdditionCompatible, this, m, VariableDeclarationStatement(), final, int, dim, getRowDimension, VariableDeclarationStatement(), final, double, outData, double, dim, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), outData, i, data, i, m.data, i, ReturnStatement(return), new, DiagonalMatrix, outData, false]
org.apache.commons.math4.linear:DiagonalMatrix:subtract:DiagonalMatrix#[ExpressionStatement(), MatrixUtils, checkSubtractionCompatible, this, m, VariableDeclarationStatement(), final, int, dim, getRowDimension, VariableDeclarationStatement(), final, double, outData, double, dim, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), outData, i, data, i, m.data, i, ReturnStatement(return), new, DiagonalMatrix, outData, false]
org.apache.commons.math4.linear:DiagonalMatrix:multiply:DiagonalMatrix#[ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, int, dim, getRowDimension, VariableDeclarationStatement(), final, double, outData, double, dim, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), outData, i, data, i, m.data, i, ReturnStatement(return), new, DiagonalMatrix, outData, false]
org.apache.commons.math4.linear:DiagonalMatrix:multiply:RealMatrix#[IfStatement(if), instanceof, m, DiagonalMatrix, ReturnStatement(return), multiply, DiagonalMatrix, m, ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, int, nRows, m, getRowDimension, VariableDeclarationStatement(), final, int, nCols, m, getColumnDimension, VariableDeclarationStatement(), final, double, product, double, nRows, nCols, ForStatement(for), int, r, 0, r, nRows, r, ForStatement(for), int, c, 0, c, nCols, c, ExpressionStatement(), product, r, c, data, r, m, getEntry, r, c, ReturnStatement(return), new, Array2DRowRealMatrix, product, false]
org.apache.commons.math4.linear:DiagonalMatrix:getData:null#[VariableDeclarationStatement(), final, int, dim, getRowDimension, VariableDeclarationStatement(), final, double, out, double, dim, dim, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), out, i, i, data, i, ReturnStatement(return), out]
org.apache.commons.math4.linear:DiagonalMatrix:getDataRef:null#[ReturnStatement(return), data]
org.apache.commons.math4.linear:DiagonalMatrix:getEntry:int+int#[ExpressionStatement(), MatrixUtils, checkMatrixIndex, this, row, column, ReturnStatement(return), row, column, data, row, 0]
org.apache.commons.math4.linear:DiagonalMatrix:setEntry:int+int+double#[IfStatement(if), row, column, ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), data, row, value, ExpressionStatement(), ensureZero, value]
org.apache.commons.math4.linear:DiagonalMatrix:addToEntry:int+int+double#[IfStatement(if), row, column, ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), data, row, increment, ExpressionStatement(), ensureZero, increment]
org.apache.commons.math4.linear:DiagonalMatrix:multiplyEntry:int+int+double#[IfStatement(if), row, column, ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), data, row, factor]
org.apache.commons.math4.linear:DiagonalMatrix:getRowDimension:null#[ReturnStatement(return), data.length]
org.apache.commons.math4.linear:DiagonalMatrix:getColumnDimension:null#[ReturnStatement(return), data.length]
org.apache.commons.math4.linear:DiagonalMatrix:operate:double[]#[ReturnStatement(return), multiply, new, DiagonalMatrix, v, false, getDataRef]
org.apache.commons.math4.linear:DiagonalMatrix:preMultiply:double[]#[ReturnStatement(return), operate, v]
org.apache.commons.math4.linear:DiagonalMatrix:preMultiply:RealVector#[VariableDeclarationStatement(), final, double, vectorData, IfStatement(if), instanceof, v, ArrayRealVector, ExpressionStatement(), vectorData, ArrayRealVector, v, getDataRef, ExpressionStatement(), vectorData, v, toArray, ReturnStatement(return), MatrixUtils, createRealVector, preMultiply, vectorData]
org.apache.commons.math4.linear:DiagonalMatrix:ensureZero:double#[IfStatement(if), Precision, equals, 0.0, value, 1, ThrowStatement(throw), new, NumberIsTooLargeException, FastMath, abs, value, 0, true]
org.apache.commons.math4.linear:DiagonalMatrix:inverse:null#[ReturnStatement(return), inverse, 0]
org.apache.commons.math4.linear:DiagonalMatrix:inverse:double#[IfStatement(if), isSingular, threshold, ThrowStatement(throw), new, SingularMatrixException, VariableDeclarationStatement(), final, double, result, double, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), result, i, 1.0, data, i, ReturnStatement(return), new, DiagonalMatrix, result, false]
org.apache.commons.math4.linear:DiagonalMatrix:isSingular:double#[ForStatement(for), int, i, 0, i, data.length, i, IfStatement(if), Precision, equals, data, i, 0.0, threshold, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.linear:EigenDecomposition:getV:null#[IfStatement(if), cachedV, null, VariableDeclarationStatement(), final, int, m, eigenvectors.length, ExpressionStatement(), cachedV, MatrixUtils, createRealMatrix, m, m, ForStatement(for), int, k, 0, k, m, k, ExpressionStatement(), cachedV, setColumnVector, k, eigenvectors, k, ReturnStatement(return), cachedV]
org.apache.commons.math4.linear:EigenDecomposition:getD:null#[IfStatement(if), cachedD, null, ExpressionStatement(), cachedD, MatrixUtils, createRealDiagonalMatrix, realEigenvalues, ForStatement(for), int, i, 0, i, imagEigenvalues.length, i, IfStatement(if), Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, ExpressionStatement(), cachedD, setEntry, i, i, 1, imagEigenvalues, i, IfStatement(if), Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, ExpressionStatement(), cachedD, setEntry, i, i, 1, imagEigenvalues, i, ReturnStatement(return), cachedD]
org.apache.commons.math4.linear:EigenDecomposition:getVT:null#[IfStatement(if), cachedVt, null, VariableDeclarationStatement(), final, int, m, eigenvectors.length, ExpressionStatement(), cachedVt, MatrixUtils, createRealMatrix, m, m, ForStatement(for), int, k, 0, k, m, k, ExpressionStatement(), cachedVt, setRowVector, k, eigenvectors, k, ReturnStatement(return), cachedVt]
org.apache.commons.math4.linear:EigenDecomposition:hasComplexEigenvalues:null#[ForStatement(for), int, i, 0, i, imagEigenvalues.length, i, IfStatement(if), Precision, equals, imagEigenvalues, i, 0.0, EPSILON, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.linear:EigenDecomposition:getRealEigenvalues:null#[ReturnStatement(return), realEigenvalues, clone]
org.apache.commons.math4.linear:EigenDecomposition:getRealEigenvalue:int#[ReturnStatement(return), realEigenvalues, i]
org.apache.commons.math4.linear:EigenDecomposition:getImagEigenvalues:null#[ReturnStatement(return), imagEigenvalues, clone]
org.apache.commons.math4.linear:EigenDecomposition:getImagEigenvalue:int#[ReturnStatement(return), imagEigenvalues, i]
org.apache.commons.math4.linear:EigenDecomposition:getEigenvector:int#[ReturnStatement(return), eigenvectors, i, copy]
org.apache.commons.math4.linear:EigenDecomposition:getDeterminant:null#[VariableDeclarationStatement(), double, determinant, 1, EnhancedForStatement(for), double, lambda, realEigenvalues, ExpressionStatement(), determinant, lambda, ReturnStatement(return), determinant]
org.apache.commons.math4.linear:EigenDecomposition:getSquareRoot:null#[IfStatement(if), isSymmetric, ThrowStatement(throw), new, MathUnsupportedOperationException, VariableDeclarationStatement(), final, double, sqrtEigenValues, double, realEigenvalues.length, ForStatement(for), int, i, 0, i, realEigenvalues.length, i, VariableDeclarationStatement(), final, double, eigen, realEigenvalues, i, IfStatement(if), eigen, 0, ThrowStatement(throw), new, MathUnsupportedOperationException, ExpressionStatement(), sqrtEigenValues, i, FastMath, sqrt, eigen, VariableDeclarationStatement(), final, RealMatrix, sqrtEigen, MatrixUtils, createRealDiagonalMatrix, sqrtEigenValues, VariableDeclarationStatement(), final, RealMatrix, v, getV, VariableDeclarationStatement(), final, RealMatrix, vT, getVT, ReturnStatement(return), v, multiply, sqrtEigen, multiply, vT]
org.apache.commons.math4.linear:EigenDecomposition:getSolver:null#[IfStatement(if), hasComplexEigenvalues, ThrowStatement(throw), new, MathUnsupportedOperationException, ReturnStatement(return), new, Solver, realEigenvalues, imagEigenvalues, eigenvectors]
org.apache.commons.math4.linear:EigenDecomposition:transformToTridiagonal:RealMatrix#[ExpressionStatement(), transformer, new, TriDiagonalTransformer, matrix, ExpressionStatement(), main, transformer, getMainDiagonalRef, ExpressionStatement(), secondary, transformer, getSecondaryDiagonalRef]
org.apache.commons.math4.linear:EigenDecomposition:findEigenVectors:double[][]#[VariableDeclarationStatement(), final, double, z, householderMatrix, clone, VariableDeclarationStatement(), final, int, n, main.length, ExpressionStatement(), realEigenvalues, double, n, ExpressionStatement(), imagEigenvalues, double, n, VariableDeclarationStatement(), final, double, e, double, n, ForStatement(for), int, i, 0, i, n, 1, i, ExpressionStatement(), realEigenvalues, i, main, i, ExpressionStatement(), e, i, secondary, i, ExpressionStatement(), realEigenvalues, n, 1, main, n, 1, ExpressionStatement(), e, n, 1, 0, VariableDeclarationStatement(), double, maxAbsoluteValue, 0, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), FastMath, abs, realEigenvalues, i, maxAbsoluteValue, ExpressionStatement(), maxAbsoluteValue, FastMath, abs, realEigenvalues, i, IfStatement(if), FastMath, abs, e, i, maxAbsoluteValue, ExpressionStatement(), maxAbsoluteValue, FastMath, abs, e, i, IfStatement(if), maxAbsoluteValue, 0, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), FastMath, abs, realEigenvalues, i, Precision.EPSILON, maxAbsoluteValue, ExpressionStatement(), realEigenvalues, i, 0, IfStatement(if), FastMath, abs, e, i, Precision.EPSILON, maxAbsoluteValue, ExpressionStatement(), e, i, 0, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), int, its, 0, VariableDeclarationStatement(), int, m, DoStatement(do), ForStatement(for), m, j, m, n, 1, m, VariableDeclarationStatement(), double, delta, FastMath, abs, realEigenvalues, m, FastMath, abs, realEigenvalues, m, 1, IfStatement(if), FastMath, abs, e, m, delta, delta, BreakStatement(break), IfStatement(if), m, j, IfStatement(if), its, MAX_ITER, ThrowStatement(throw), new, MaxCountExceededException, LocalizedFormats.CONVERGENCE_FAILED, MAX_ITER, ExpressionStatement(), its, VariableDeclarationStatement(), double, q, realEigenvalues, j, 1, realEigenvalues, j, 2, e, j, VariableDeclarationStatement(), double, t, FastMath, sqrt, 1, q, q, IfStatement(if), q, 0.0, ExpressionStatement(), q, realEigenvalues, m, realEigenvalues, j, e, j, q, t, ExpressionStatement(), q, realEigenvalues, m, realEigenvalues, j, e, j, q, t, VariableDeclarationStatement(), double, u, 0.0, VariableDeclarationStatement(), double, s, 1.0, VariableDeclarationStatement(), double, c, 1.0, VariableDeclarationStatement(), int, i, ForStatement(for), i, m, 1, i, j, i, VariableDeclarationStatement(), double, p, s, e, i, VariableDeclarationStatement(), double, h, c, e, i, IfStatement(if), FastMath, abs, p, FastMath, abs, q, ExpressionStatement(), c, q, p, ExpressionStatement(), t, FastMath, sqrt, c, c, 1.0, ExpressionStatement(), e, i, 1, p, t, ExpressionStatement(), s, 1.0, t, ExpressionStatement(), c, s, ExpressionStatement(), s, p, q, ExpressionStatement(), t, FastMath, sqrt, s, s, 1.0, ExpressionStatement(), e, i, 1, q, t, ExpressionStatement(), c, 1.0, t, ExpressionStatement(), s, c, IfStatement(if), e, i, 1, 0.0, ExpressionStatement(), realEigenvalues, i, 1, u, ExpressionStatement(), e, m, 0.0, BreakStatement(break), ExpressionStatement(), q, realEigenvalues, i, 1, u, ExpressionStatement(), t, realEigenvalues, i, q, s, 2.0, c, h, ExpressionStatement(), u, s, t, ExpressionStatement(), realEigenvalues, i, 1, q, u, ExpressionStatement(), q, c, t, h, ForStatement(for), int, ia, 0, ia, n, ia, ExpressionStatement(), p, z, ia, i, 1, ExpressionStatement(), z, ia, i, 1, s, z, ia, i, c, p, ExpressionStatement(), z, ia, i, c, z, ia, i, s, p, IfStatement(if), t, 0.0, i, j, ContinueStatement(continue), ExpressionStatement(), realEigenvalues, j, u, ExpressionStatement(), e, j, q, ExpressionStatement(), e, m, 0.0, m, j, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), int, k, i, VariableDeclarationStatement(), double, p, realEigenvalues, i, ForStatement(for), int, j, i, 1, j, n, j, IfStatement(if), realEigenvalues, j, p, ExpressionStatement(), k, j, ExpressionStatement(), p, realEigenvalues, j, IfStatement(if), k, i, ExpressionStatement(), realEigenvalues, k, realEigenvalues, i, ExpressionStatement(), realEigenvalues, i, p, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), p, z, j, i, ExpressionStatement(), z, j, i, z, j, k, ExpressionStatement(), z, j, k, p, ExpressionStatement(), maxAbsoluteValue, 0, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), FastMath, abs, realEigenvalues, i, maxAbsoluteValue, ExpressionStatement(), maxAbsoluteValue, FastMath, abs, realEigenvalues, i, IfStatement(if), maxAbsoluteValue, 0.0, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), FastMath, abs, realEigenvalues, i, Precision.EPSILON, maxAbsoluteValue, ExpressionStatement(), realEigenvalues, i, 0, ExpressionStatement(), eigenvectors, ArrayRealVector, n, VariableDeclarationStatement(), final, double, tmp, double, n, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), tmp, j, z, j, i, ExpressionStatement(), eigenvectors, i, new, ArrayRealVector, tmp]
org.apache.commons.math4.linear:EigenDecomposition:transformToSchur:RealMatrix#[VariableDeclarationStatement(), final, SchurTransformer, schurTransform, new, SchurTransformer, matrix, VariableDeclarationStatement(), final, double, matT, schurTransform, getT, getData, ExpressionStatement(), realEigenvalues, double, matT.length, ExpressionStatement(), imagEigenvalues, double, matT.length, ForStatement(for), int, i, 0, i, realEigenvalues.length, i, IfStatement(if), i, realEigenvalues.length, 1, Precision, equals, matT, i, 1, i, 0.0, EPSILON, ExpressionStatement(), realEigenvalues, i, matT, i, i, VariableDeclarationStatement(), final, double, x, matT, i, 1, i, 1, VariableDeclarationStatement(), final, double, p, 0.5, matT, i, i, x, VariableDeclarationStatement(), final, double, z, FastMath, sqrt, FastMath, abs, p, p, matT, i, 1, i, matT, i, i, 1, ExpressionStatement(), realEigenvalues, i, x, p, ExpressionStatement(), imagEigenvalues, i, z, ExpressionStatement(), realEigenvalues, i, 1, x, p, ExpressionStatement(), imagEigenvalues, i, 1, z, ExpressionStatement(), i, ReturnStatement(return), schurTransform]
org.apache.commons.math4.linear:EigenDecomposition:cdiv:double+double+double+double#[ReturnStatement(return), new, Complex, xr, xi, divide, new, Complex, yr, yi]
org.apache.commons.math4.linear:EigenDecomposition:findEigenVectorsFromSchur:SchurTransformer#[VariableDeclarationStatement(), final, double, matrixT, schur, getT, getData, VariableDeclarationStatement(), final, double, matrixP, schur, getP, getData, VariableDeclarationStatement(), final, int, n, matrixT.length, VariableDeclarationStatement(), double, norm, 0.0, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, FastMath, max, i, 1, 0, j, n, j, ExpressionStatement(), norm, FastMath, abs, matrixT, i, j, IfStatement(if), Precision, equals, norm, 0.0, EPSILON, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, VariableDeclarationStatement(), double, r, 0.0, VariableDeclarationStatement(), double, s, 0.0, VariableDeclarationStatement(), double, z, 0.0, ForStatement(for), int, idx, n, 1, idx, 0, idx, VariableDeclarationStatement(), double, p, realEigenvalues, idx, VariableDeclarationStatement(), double, q, imagEigenvalues, idx, IfStatement(if), Precision, equals, q, 0.0, VariableDeclarationStatement(), int, l, idx, ExpressionStatement(), matrixT, idx, idx, 1.0, ForStatement(for), int, i, idx, 1, i, 0, i, VariableDeclarationStatement(), double, w, matrixT, i, i, p, ExpressionStatement(), r, 0.0, ForStatement(for), int, j, l, j, idx, j, ExpressionStatement(), r, matrixT, i, j, matrixT, j, idx, IfStatement(if), Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, ExpressionStatement(), z, w, ExpressionStatement(), s, r, ExpressionStatement(), l, i, IfStatement(if), Precision, equals, imagEigenvalues, i, 0.0, IfStatement(if), w, 0.0, ExpressionStatement(), matrixT, i, idx, r, w, ExpressionStatement(), matrixT, i, idx, r, Precision.EPSILON, norm, VariableDeclarationStatement(), double, x, matrixT, i, i, 1, VariableDeclarationStatement(), double, y, matrixT, i, 1, i, ExpressionStatement(), q, realEigenvalues, i, p, realEigenvalues, i, p, imagEigenvalues, i, imagEigenvalues, i, VariableDeclarationStatement(), double, t, x, s, z, r, q, ExpressionStatement(), matrixT, i, idx, t, IfStatement(if), FastMath, abs, x, FastMath, abs, z, ExpressionStatement(), matrixT, i, 1, idx, r, w, t, x, ExpressionStatement(), matrixT, i, 1, idx, s, y, t, z, VariableDeclarationStatement(), double, t, FastMath, abs, matrixT, i, idx, IfStatement(if), Precision.EPSILON, t, t, 1, ForStatement(for), int, j, i, j, idx, j, ExpressionStatement(), matrixT, j, idx, t, IfStatement(if), q, 0.0, VariableDeclarationStatement(), int, l, idx, 1, IfStatement(if), FastMath, abs, matrixT, idx, idx, 1, FastMath, abs, matrixT, idx, 1, idx, ExpressionStatement(), matrixT, idx, 1, idx, 1, q, matrixT, idx, idx, 1, ExpressionStatement(), matrixT, idx, 1, idx, matrixT, idx, idx, p, matrixT, idx, idx, 1, VariableDeclarationStatement(), final, Complex, result, cdiv, 0.0, matrixT, idx, 1, idx, matrixT, idx, 1, idx, 1, p, q, ExpressionStatement(), matrixT, idx, 1, idx, 1, result, getReal, ExpressionStatement(), matrixT, idx, 1, idx, result, getImaginary, ExpressionStatement(), matrixT, idx, idx, 1, 0.0, ExpressionStatement(), matrixT, idx, idx, 1.0, ForStatement(for), int, i, idx, 2, i, 0, i, VariableDeclarationStatement(), double, ra, 0.0, VariableDeclarationStatement(), double, sa, 0.0, ForStatement(for), int, j, l, j, idx, j, ExpressionStatement(), ra, matrixT, i, j, matrixT, j, idx, 1, ExpressionStatement(), sa, matrixT, i, j, matrixT, j, idx, VariableDeclarationStatement(), double, w, matrixT, i, i, p, IfStatement(if), Precision, compareTo, imagEigenvalues, i, 0.0, EPSILON, 0, ExpressionStatement(), z, w, ExpressionStatement(), r, ra, ExpressionStatement(), s, sa, ExpressionStatement(), l, i, IfStatement(if), Precision, equals, imagEigenvalues, i, 0.0, VariableDeclarationStatement(), final, Complex, c, cdiv, ra, sa, w, q, ExpressionStatement(), matrixT, i, idx, 1, c, getReal, ExpressionStatement(), matrixT, i, idx, c, getImaginary, VariableDeclarationStatement(), double, x, matrixT, i, i, 1, VariableDeclarationStatement(), double, y, matrixT, i, 1, i, VariableDeclarationStatement(), double, vr, realEigenvalues, i, p, realEigenvalues, i, p, imagEigenvalues, i, imagEigenvalues, i, q, q, VariableDeclarationStatement(), final, double, vi, realEigenvalues, i, p, 2.0, q, IfStatement(if), Precision, equals, vr, 0.0, Precision, equals, vi, 0.0, ExpressionStatement(), vr, Precision.EPSILON, norm, FastMath, abs, w, FastMath, abs, q, FastMath, abs, x, FastMath, abs, y, FastMath, abs, z, VariableDeclarationStatement(), final, Complex, c, cdiv, x, r, z, ra, q, sa, x, s, z, sa, q, ra, vr, vi, ExpressionStatement(), matrixT, i, idx, 1, c, getReal, ExpressionStatement(), matrixT, i, idx, c, getImaginary, IfStatement(if), FastMath, abs, x, FastMath, abs, z, FastMath, abs, q, ExpressionStatement(), matrixT, i, 1, idx, 1, ra, w, matrixT, i, idx, 1, q, matrixT, i, idx, x, ExpressionStatement(), matrixT, i, 1, idx, sa, w, matrixT, i, idx, q, matrixT, i, idx, 1, x, VariableDeclarationStatement(), final, Complex, c2, cdiv, r, y, matrixT, i, idx, 1, s, y, matrixT, i, idx, z, q, ExpressionStatement(), matrixT, i, 1, idx, 1, c2, getReal, ExpressionStatement(), matrixT, i, 1, idx, c2, getImaginary, VariableDeclarationStatement(), double, t, FastMath, max, FastMath, abs, matrixT, i, idx, 1, FastMath, abs, matrixT, i, idx, IfStatement(if), Precision.EPSILON, t, t, 1, ForStatement(for), int, j, i, j, idx, j, ExpressionStatement(), matrixT, j, idx, 1, t, ExpressionStatement(), matrixT, j, idx, t, ForStatement(for), int, j, n, 1, j, 0, j, ForStatement(for), int, i, 0, i, n, 1, i, ExpressionStatement(), z, 0.0, ForStatement(for), int, k, 0, k, FastMath, min, j, n, 1, k, ExpressionStatement(), z, matrixP, i, k, matrixT, k, j, ExpressionStatement(), matrixP, i, j, z, ExpressionStatement(), eigenvectors, ArrayRealVector, n, VariableDeclarationStatement(), final, double, tmp, double, n, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), tmp, j, matrixP, j, i, ExpressionStatement(), eigenvectors, i, new, ArrayRealVector, tmp]
org.apache.commons.math4.linear:FieldLUDecomposition:getL:null#[IfStatement(if), cachedL, null, singular, VariableDeclarationStatement(), final, int, m, pivot.length, ExpressionStatement(), cachedL, new, Array2DRowFieldMatrix, T, field, m, m, ForStatement(for), int, i, 0, i, m, i, VariableDeclarationStatement(), final, T, luI, lu, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), cachedL, setEntry, i, j, luI, j, ExpressionStatement(), cachedL, setEntry, i, i, field, getOne, ReturnStatement(return), cachedL]
org.apache.commons.math4.linear:FieldLUDecomposition:getU:null#[IfStatement(if), cachedU, null, singular, VariableDeclarationStatement(), final, int, m, pivot.length, ExpressionStatement(), cachedU, new, Array2DRowFieldMatrix, T, field, m, m, ForStatement(for), int, i, 0, i, m, i, VariableDeclarationStatement(), final, T, luI, lu, i, ForStatement(for), int, j, i, j, m, j, ExpressionStatement(), cachedU, setEntry, i, j, luI, j, ReturnStatement(return), cachedU]
org.apache.commons.math4.linear:FieldLUDecomposition:getP:null#[IfStatement(if), cachedP, null, singular, VariableDeclarationStatement(), final, int, m, pivot.length, ExpressionStatement(), cachedP, new, Array2DRowFieldMatrix, T, field, m, m, ForStatement(for), int, i, 0, i, m, i, ExpressionStatement(), cachedP, setEntry, i, pivot, i, field, getOne, ReturnStatement(return), cachedP]
org.apache.commons.math4.linear:FieldLUDecomposition:getPivot:null#[ReturnStatement(return), pivot, clone]
org.apache.commons.math4.linear:FieldLUDecomposition:getDeterminant:null#[IfStatement(if), singular, ReturnStatement(return), field, getZero, VariableDeclarationStatement(), final, int, m, pivot.length, VariableDeclarationStatement(), T, determinant, even, field, getOne, field, getZero, subtract, field, getOne, ForStatement(for), int, i, 0, i, m, i, ExpressionStatement(), determinant, determinant, multiply, lu, i, i, ReturnStatement(return), determinant]
org.apache.commons.math4.linear:FieldLUDecomposition:getSolver:null#[ReturnStatement(return), new, Solver, T, field, lu, pivot, singular]
org.apache.commons.math4.linear:HessenbergTransformer:getP:null#[IfStatement(if), cachedP, null, VariableDeclarationStatement(), final, int, n, householderVectors.length, VariableDeclarationStatement(), final, int, high, n, 1, VariableDeclarationStatement(), final, double, pa, double, n, n, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), pa, i, j, i, j, 1, 0, ForStatement(for), int, m, high, 1, m, 1, m, IfStatement(if), householderVectors, m, m, 1, 0.0, ForStatement(for), int, i, m, 1, i, high, i, ExpressionStatement(), ort, i, householderVectors, i, m, 1, ForStatement(for), int, j, m, j, high, j, VariableDeclarationStatement(), double, g, 0.0, ForStatement(for), int, i, m, i, high, i, ExpressionStatement(), g, ort, i, pa, i, j, ExpressionStatement(), g, g, ort, m, householderVectors, m, m, 1, ForStatement(for), int, i, m, i, high, i, ExpressionStatement(), pa, i, j, g, ort, i, ExpressionStatement(), cachedP, MatrixUtils, createRealMatrix, pa, ReturnStatement(return), cachedP]
org.apache.commons.math4.linear:HessenbergTransformer:getPT:null#[IfStatement(if), cachedPt, null, ExpressionStatement(), cachedPt, getP, transpose, ReturnStatement(return), cachedPt]
org.apache.commons.math4.linear:HessenbergTransformer:getH:null#[IfStatement(if), cachedH, null, VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), final, double, h, double, m, m, ForStatement(for), int, i, 0, i, m, i, IfStatement(if), i, 0, ExpressionStatement(), h, i, i, 1, householderVectors, i, i, 1, ForStatement(for), int, j, i, j, m, j, ExpressionStatement(), h, i, j, householderVectors, i, j, ExpressionStatement(), cachedH, MatrixUtils, createRealMatrix, h, ReturnStatement(return), cachedH]
org.apache.commons.math4.linear:HessenbergTransformer:getHouseholderVectorsRef:null#[ReturnStatement(return), householderVectors]
org.apache.commons.math4.linear:HessenbergTransformer:transform:null#[VariableDeclarationStatement(), final, int, n, householderVectors.length, VariableDeclarationStatement(), final, int, high, n, 1, ForStatement(for), int, m, 1, m, high, 1, m, VariableDeclarationStatement(), double, scale, 0, ForStatement(for), int, i, m, i, high, i, ExpressionStatement(), scale, FastMath, abs, householderVectors, i, m, 1, IfStatement(if), Precision, equals, scale, 0, VariableDeclarationStatement(), double, h, 0, ForStatement(for), int, i, high, i, m, i, ExpressionStatement(), ort, i, householderVectors, i, m, 1, scale, ExpressionStatement(), h, ort, i, ort, i, VariableDeclarationStatement(), final, double, g, ort, m, 0, FastMath, sqrt, h, FastMath, sqrt, h, ExpressionStatement(), h, ort, m, g, ExpressionStatement(), ort, m, g, ForStatement(for), int, j, m, j, n, j, VariableDeclarationStatement(), double, f, 0, ForStatement(for), int, i, high, i, m, i, ExpressionStatement(), f, ort, i, householderVectors, i, j, ExpressionStatement(), f, h, ForStatement(for), int, i, m, i, high, i, ExpressionStatement(), householderVectors, i, j, f, ort, i, ForStatement(for), int, i, 0, i, high, i, VariableDeclarationStatement(), double, f, 0, ForStatement(for), int, j, high, j, m, j, ExpressionStatement(), f, ort, j, householderVectors, i, j, ExpressionStatement(), f, h, ForStatement(for), int, j, m, j, high, j, ExpressionStatement(), householderVectors, i, j, f, ort, j, ExpressionStatement(), ort, m, scale, ort, m, ExpressionStatement(), householderVectors, m, m, 1, scale, g]
org.apache.commons.math4.linear:IterativeLinearSolver:checkParameters:RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, a, ExpressionStatement(), MathUtils, checkNotNull, b, ExpressionStatement(), MathUtils, checkNotNull, x0, IfStatement(if), a, getRowDimension, a, getColumnDimension, ThrowStatement(throw), new, NonSquareOperatorException, a, getRowDimension, a, getColumnDimension, IfStatement(if), b, getDimension, a, getRowDimension, ThrowStatement(throw), new, DimensionMismatchException, b, getDimension, a, getRowDimension, IfStatement(if), x0, getDimension, a, getColumnDimension, ThrowStatement(throw), new, DimensionMismatchException, x0, getDimension, a, getColumnDimension]
org.apache.commons.math4.linear:IterativeLinearSolver:getIterationManager:null#[ReturnStatement(return), manager]
org.apache.commons.math4.linear:IterativeLinearSolver:solve:RealLinearOperator+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, a, VariableDeclarationStatement(), final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, ExpressionStatement(), x, set, 0., ReturnStatement(return), solveInPlace, a, b, x]
org.apache.commons.math4.linear:IterativeLinearSolver:solve:RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, x0, ReturnStatement(return), solveInPlace, a, b, x0, copy]
org.apache.commons.math4.linear:IterativeLinearSolverEvent:getResidual:null#[ThrowStatement(throw), new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:IterativeLinearSolverEvent:providesResidual:null#[ReturnStatement(return), false]
org.apache.commons.math4.linear:JacobiPreconditioner:create:RealLinearOperator#[VariableDeclarationStatement(), final, int, n, a, getColumnDimension, IfStatement(if), a, getRowDimension, n, ThrowStatement(throw), new, NonSquareOperatorException, a, getRowDimension, n, VariableDeclarationStatement(), final, double, diag, double, n, IfStatement(if), instanceof, a, AbstractRealMatrix, VariableDeclarationStatement(), final, AbstractRealMatrix, m, AbstractRealMatrix, a, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), diag, i, m, getEntry, i, i, VariableDeclarationStatement(), final, ArrayRealVector, x, new, ArrayRealVector, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), x, set, 0., ExpressionStatement(), x, setEntry, i, 1., ExpressionStatement(), diag, i, a, operate, x, getEntry, i, ReturnStatement(return), new, JacobiPreconditioner, diag, false]
org.apache.commons.math4.linear:JacobiPreconditioner:getColumnDimension:null#[ReturnStatement(return), diag, getDimension]
org.apache.commons.math4.linear:JacobiPreconditioner:getRowDimension:null#[ReturnStatement(return), diag, getDimension]
org.apache.commons.math4.linear:JacobiPreconditioner:operate:RealVector#[ReturnStatement(return), new, ArrayRealVector, MathArrays, ebeDivide, x, toArray, diag, toArray, false]
org.apache.commons.math4.linear:JacobiPreconditioner:sqrt:null#[VariableDeclarationStatement(), final, RealVector, sqrtDiag, diag, map, new, Sqrt, ReturnStatement(return), new, RealLinearOperator, Override, public, RealVector, operate, final, RealVector, x, ReturnStatement(return), new, ArrayRealVector, MathArrays, ebeDivide, x, toArray, sqrtDiag, toArray, false, Override, public, int, getRowDimension, ReturnStatement(return), sqrtDiag, getDimension, Override, public, int, getColumnDimension, ReturnStatement(return), sqrtDiag, getDimension]
org.apache.commons.math4.linear:LUDecomposition:getL:null#[IfStatement(if), cachedL, null, singular, VariableDeclarationStatement(), final, int, m, pivot.length, ExpressionStatement(), cachedL, MatrixUtils, createRealMatrix, m, m, ForStatement(for), int, i, 0, i, m, i, VariableDeclarationStatement(), final, double, luI, lu, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), cachedL, setEntry, i, j, luI, j, ExpressionStatement(), cachedL, setEntry, i, i, 1.0, ReturnStatement(return), cachedL]
org.apache.commons.math4.linear:LUDecomposition:getU:null#[IfStatement(if), cachedU, null, singular, VariableDeclarationStatement(), final, int, m, pivot.length, ExpressionStatement(), cachedU, MatrixUtils, createRealMatrix, m, m, ForStatement(for), int, i, 0, i, m, i, VariableDeclarationStatement(), final, double, luI, lu, i, ForStatement(for), int, j, i, j, m, j, ExpressionStatement(), cachedU, setEntry, i, j, luI, j, ReturnStatement(return), cachedU]
org.apache.commons.math4.linear:LUDecomposition:getP:null#[IfStatement(if), cachedP, null, singular, VariableDeclarationStatement(), final, int, m, pivot.length, ExpressionStatement(), cachedP, MatrixUtils, createRealMatrix, m, m, ForStatement(for), int, i, 0, i, m, i, ExpressionStatement(), cachedP, setEntry, i, pivot, i, 1.0, ReturnStatement(return), cachedP]
org.apache.commons.math4.linear:LUDecomposition:getPivot:null#[ReturnStatement(return), pivot, clone]
org.apache.commons.math4.linear:LUDecomposition:getDeterminant:null#[IfStatement(if), singular, ReturnStatement(return), 0, VariableDeclarationStatement(), final, int, m, pivot.length, VariableDeclarationStatement(), double, determinant, even, 1, 1, ForStatement(for), int, i, 0, i, m, i, ExpressionStatement(), determinant, lu, i, i, ReturnStatement(return), determinant]
org.apache.commons.math4.linear:LUDecomposition:getSolver:null#[ReturnStatement(return), new, Solver, lu, pivot, singular]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getWrongRowDimension:null#[ReturnStatement(return), getWrongDimension, 0]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getExpectedRowDimension:null#[ReturnStatement(return), getExpectedDimension, 0]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getWrongColumnDimension:null#[ReturnStatement(return), getWrongDimension, 1]
org.apache.commons.math4.linear:MatrixDimensionMismatchException:getExpectedColumnDimension:null#[ReturnStatement(return), getExpectedDimension, 1]
org.apache.commons.math4.linear:MatrixUtils:createRealMatrix:int+int#[ReturnStatement(return), rows, columns, 4096, new, Array2DRowRealMatrix, rows, columns, new, BlockRealMatrix, rows, columns]
org.apache.commons.math4.linear:MatrixUtils:createFieldMatrix:Field<T>+int+int#[ReturnStatement(return), rows, columns, 4096, new, Array2DRowFieldMatrix, T, field, rows, columns, new, BlockFieldMatrix, T, field, rows, columns]
org.apache.commons.math4.linear:MatrixUtils:createRealMatrix:double[][]#[IfStatement(if), data, null, data, 0, null, ThrowStatement(throw), new, NullArgumentException, ReturnStatement(return), data.length, data, 0, length, 4096, new, Array2DRowRealMatrix, data, new, BlockRealMatrix, data]
org.apache.commons.math4.linear:MatrixUtils:createFieldMatrix:T[][]#[IfStatement(if), data, null, data, 0, null, ThrowStatement(throw), new, NullArgumentException, ReturnStatement(return), data.length, data, 0, length, 4096, new, Array2DRowFieldMatrix, T, data, new, BlockFieldMatrix, T, data]
org.apache.commons.math4.linear:MatrixUtils:createRealIdentityMatrix:int#[VariableDeclarationStatement(), final, RealMatrix, m, createRealMatrix, dimension, dimension, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), m, setEntry, i, i, 1.0, ReturnStatement(return), m]
org.apache.commons.math4.linear:MatrixUtils:createFieldIdentityMatrix:Field<T>+int#[VariableDeclarationStatement(), final, T, zero, field, getZero, VariableDeclarationStatement(), final, T, one, field, getOne, VariableDeclarationStatement(), final, T, d, MathArrays, buildArray, field, dimension, dimension, ForStatement(for), int, row, 0, row, dimension, row, VariableDeclarationStatement(), final, T, dRow, d, row, ExpressionStatement(), Arrays, fill, dRow, zero, ExpressionStatement(), dRow, row, one, ReturnStatement(return), new, Array2DRowFieldMatrix, T, field, d, false]
org.apache.commons.math4.linear:MatrixUtils:createRealDiagonalMatrix:double[]#[VariableDeclarationStatement(), final, RealMatrix, m, createRealMatrix, diagonal.length, diagonal.length, ForStatement(for), int, i, 0, i, diagonal.length, i, ExpressionStatement(), m, setEntry, i, i, diagonal, i, ReturnStatement(return), m]
org.apache.commons.math4.linear:MatrixUtils:createFieldDiagonalMatrix:T[]#[VariableDeclarationStatement(), final, FieldMatrix, T, m, createFieldMatrix, diagonal, 0, getField, diagonal.length, diagonal.length, ForStatement(for), int, i, 0, i, diagonal.length, i, ExpressionStatement(), m, setEntry, i, i, diagonal, i, ReturnStatement(return), m]
org.apache.commons.math4.linear:MatrixUtils:createRealVector:double[]#[IfStatement(if), data, null, ThrowStatement(throw), new, NullArgumentException, ReturnStatement(return), new, ArrayRealVector, data, true]
org.apache.commons.math4.linear:MatrixUtils:createFieldVector:T[]#[IfStatement(if), data, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), data.length, 0, ThrowStatement(throw), new, ZeroException, LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ReturnStatement(return), new, ArrayFieldVector, T, data, 0, getField, data, true]
org.apache.commons.math4.linear:MatrixUtils:createRowRealMatrix:double[]#[IfStatement(if), rowData, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, int, nCols, rowData.length, VariableDeclarationStatement(), final, RealMatrix, m, createRealMatrix, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), m, setEntry, 0, i, rowData, i, ReturnStatement(return), m]
org.apache.commons.math4.linear:MatrixUtils:createRowFieldMatrix:T[]#[IfStatement(if), rowData, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, int, nCols, rowData.length, IfStatement(if), nCols, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_COLUMN, VariableDeclarationStatement(), final, FieldMatrix, T, m, createFieldMatrix, rowData, 0, getField, 1, nCols, ForStatement(for), int, i, 0, i, nCols, i, ExpressionStatement(), m, setEntry, 0, i, rowData, i, ReturnStatement(return), m]
org.apache.commons.math4.linear:MatrixUtils:createColumnRealMatrix:double[]#[IfStatement(if), columnData, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, int, nRows, columnData.length, VariableDeclarationStatement(), final, RealMatrix, m, createRealMatrix, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), m, setEntry, i, 0, columnData, i, ReturnStatement(return), m]
org.apache.commons.math4.linear:MatrixUtils:createColumnFieldMatrix:T[]#[IfStatement(if), columnData, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, int, nRows, columnData.length, IfStatement(if), nRows, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.AT_LEAST_ONE_ROW, VariableDeclarationStatement(), final, FieldMatrix, T, m, createFieldMatrix, columnData, 0, getField, nRows, 1, ForStatement(for), int, i, 0, i, nRows, i, ExpressionStatement(), m, setEntry, i, 0, columnData, i, ReturnStatement(return), m]
org.apache.commons.math4.linear:MatrixUtils:isSymmetricInternal:RealMatrix+double+boolean#[VariableDeclarationStatement(), final, int, rows, matrix, getRowDimension, IfStatement(if), rows, matrix, getColumnDimension, IfStatement(if), raiseException, ThrowStatement(throw), new, NonSquareMatrixException, rows, matrix, getColumnDimension, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, rows, i, ForStatement(for), int, j, i, 1, j, rows, j, VariableDeclarationStatement(), final, double, mij, matrix, getEntry, i, j, VariableDeclarationStatement(), final, double, mji, matrix, getEntry, j, i, IfStatement(if), FastMath, abs, mij, mji, FastMath, max, FastMath, abs, mij, FastMath, abs, mji, relativeTolerance, IfStatement(if), raiseException, ThrowStatement(throw), new, NonSymmetricMatrixException, i, j, relativeTolerance, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.linear:MatrixUtils:checkSymmetric:RealMatrix+double#[ExpressionStatement(), isSymmetricInternal, matrix, eps, true]
org.apache.commons.math4.linear:MatrixUtils:isSymmetric:RealMatrix+double#[ReturnStatement(return), isSymmetricInternal, matrix, eps, false]
org.apache.commons.math4.linear:MatrixUtils:checkMatrixIndex:AnyMatrix+int+int#[ExpressionStatement(), checkRowIndex, m, row, ExpressionStatement(), checkColumnIndex, m, column]
org.apache.commons.math4.linear:MatrixUtils:checkRowIndex:AnyMatrix+int#[IfStatement(if), row, 0, row, m, getRowDimension, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.ROW_INDEX, row, 0, m, getRowDimension, 1]
org.apache.commons.math4.linear:MatrixUtils:checkColumnIndex:AnyMatrix+int#[IfStatement(if), column, 0, column, m, getColumnDimension, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.COLUMN_INDEX, column, 0, m, getColumnDimension, 1]
org.apache.commons.math4.linear:MatrixUtils:checkSubMatrixIndex:AnyMatrix+int+int+int+int#[ExpressionStatement(), checkRowIndex, m, startRow, ExpressionStatement(), checkRowIndex, m, endRow, IfStatement(if), endRow, startRow, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, endRow, startRow, false, ExpressionStatement(), checkColumnIndex, m, startColumn, ExpressionStatement(), checkColumnIndex, m, endColumn, IfStatement(if), endColumn, startColumn, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN, endColumn, startColumn, false]
org.apache.commons.math4.linear:MatrixUtils:checkSubMatrixIndex:AnyMatrix+int[]+int[]#[IfStatement(if), selectedRows, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), selectedColumns, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), selectedRows.length, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY, IfStatement(if), selectedColumns.length, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY, EnhancedForStatement(for), final, int, row, selectedRows, ExpressionStatement(), checkRowIndex, m, row, EnhancedForStatement(for), final, int, column, selectedColumns, ExpressionStatement(), checkColumnIndex, m, column]
org.apache.commons.math4.linear:MatrixUtils:checkAdditionCompatible:AnyMatrix+AnyMatrix#[IfStatement(if), left, getRowDimension, right, getRowDimension, left, getColumnDimension, right, getColumnDimension, ThrowStatement(throw), new, MatrixDimensionMismatchException, left, getRowDimension, left, getColumnDimension, right, getRowDimension, right, getColumnDimension]
org.apache.commons.math4.linear:MatrixUtils:checkSubtractionCompatible:AnyMatrix+AnyMatrix#[IfStatement(if), left, getRowDimension, right, getRowDimension, left, getColumnDimension, right, getColumnDimension, ThrowStatement(throw), new, MatrixDimensionMismatchException, left, getRowDimension, left, getColumnDimension, right, getRowDimension, right, getColumnDimension]
org.apache.commons.math4.linear:MatrixUtils:checkMultiplicationCompatible:AnyMatrix+AnyMatrix#[IfStatement(if), left, getColumnDimension, right, getRowDimension, ThrowStatement(throw), new, DimensionMismatchException, left, getColumnDimension, right, getRowDimension]
org.apache.commons.math4.linear:MatrixUtils:fractionMatrixToRealMatrix:FieldMatrix<Fraction>#[VariableDeclarationStatement(), final, FractionMatrixConverter, converter, new, FractionMatrixConverter, ExpressionStatement(), m, walkInOptimizedOrder, converter, ReturnStatement(return), converter, getConvertedMatrix]
org.apache.commons.math4.linear:MatrixUtils:bigFractionMatrixToRealMatrix:FieldMatrix<BigFraction>#[VariableDeclarationStatement(), final, BigFractionMatrixConverter, converter, new, BigFractionMatrixConverter, ExpressionStatement(), m, walkInOptimizedOrder, converter, ReturnStatement(return), converter, getConvertedMatrix]
org.apache.commons.math4.linear:MatrixUtils:serializeRealVector:RealVector+ObjectOutputStream#[VariableDeclarationStatement(), final, int, n, vector, getDimension, ExpressionStatement(), oos, writeInt, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), oos, writeDouble, vector, getEntry, i]
org.apache.commons.math4.linear:MatrixUtils:deserializeRealVector:Object+String+ObjectInputStream#[TryStatement(try), VariableDeclarationStatement(), final, int, n, ois, readInt, VariableDeclarationStatement(), final, double, data, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), data, i, ois, readDouble, VariableDeclarationStatement(), final, RealVector, vector, new, ArrayRealVector, data, false, VariableDeclarationStatement(), final, java.lang.reflect.Field, f, instance, getClass, getDeclaredField, fieldName, ExpressionStatement(), f, setAccessible, true, ExpressionStatement(), f, set, instance, vector, catch, NoSuchFieldException, nsfe, VariableDeclarationStatement(), IOException, ioe, new, IOException, ExpressionStatement(), ioe, initCause, nsfe, ThrowStatement(throw), ioe, catch, IllegalAccessException, iae, VariableDeclarationStatement(), IOException, ioe, new, IOException, ExpressionStatement(), ioe, initCause, iae, ThrowStatement(throw), ioe]
org.apache.commons.math4.linear:MatrixUtils:serializeRealMatrix:RealMatrix+ObjectOutputStream#[VariableDeclarationStatement(), final, int, n, matrix, getRowDimension, VariableDeclarationStatement(), final, int, m, matrix, getColumnDimension, ExpressionStatement(), oos, writeInt, n, ExpressionStatement(), oos, writeInt, m, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, 0, j, m, j, ExpressionStatement(), oos, writeDouble, matrix, getEntry, i, j]
org.apache.commons.math4.linear:MatrixUtils:deserializeRealMatrix:Object+String+ObjectInputStream#[TryStatement(try), VariableDeclarationStatement(), final, int, n, ois, readInt, VariableDeclarationStatement(), final, int, m, ois, readInt, VariableDeclarationStatement(), final, double, data, double, n, m, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, dataI, data, i, ForStatement(for), int, j, 0, j, m, j, ExpressionStatement(), dataI, j, ois, readDouble, VariableDeclarationStatement(), final, RealMatrix, matrix, new, Array2DRowRealMatrix, data, false, VariableDeclarationStatement(), final, java.lang.reflect.Field, f, instance, getClass, getDeclaredField, fieldName, ExpressionStatement(), f, setAccessible, true, ExpressionStatement(), f, set, instance, matrix, catch, NoSuchFieldException, nsfe, VariableDeclarationStatement(), IOException, ioe, new, IOException, ExpressionStatement(), ioe, initCause, nsfe, ThrowStatement(throw), ioe, catch, IllegalAccessException, iae, VariableDeclarationStatement(), IOException, ioe, new, IOException, ExpressionStatement(), ioe, initCause, iae, ThrowStatement(throw), ioe]
org.apache.commons.math4.linear:MatrixUtils:solveLowerTriangularSystem:RealMatrix+RealVector#[IfStatement(if), rm, null, b, null, rm, getRowDimension, b, getDimension, ThrowStatement(throw), new, DimensionMismatchException, rm, null, 0, rm, getRowDimension, b, null, 0, b, getDimension, IfStatement(if), rm, getColumnDimension, rm, getRowDimension, ThrowStatement(throw), new, NonSquareMatrixException, rm, getRowDimension, rm, getColumnDimension, VariableDeclarationStatement(), int, rows, rm, getRowDimension, ForStatement(for), int, i, 0, i, rows, i, VariableDeclarationStatement(), double, diag, rm, getEntry, i, i, IfStatement(if), FastMath, abs, diag, Precision.SAFE_MIN, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, VariableDeclarationStatement(), double, bi, b, getEntry, i, diag, ExpressionStatement(), b, setEntry, i, bi, ForStatement(for), int, j, i, 1, j, rows, j, ExpressionStatement(), b, setEntry, j, b, getEntry, j, bi, rm, getEntry, j, i]
org.apache.commons.math4.linear:MatrixUtils:solveUpperTriangularSystem:RealMatrix+RealVector#[IfStatement(if), rm, null, b, null, rm, getRowDimension, b, getDimension, ThrowStatement(throw), new, DimensionMismatchException, rm, null, 0, rm, getRowDimension, b, null, 0, b, getDimension, IfStatement(if), rm, getColumnDimension, rm, getRowDimension, ThrowStatement(throw), new, NonSquareMatrixException, rm, getRowDimension, rm, getColumnDimension, VariableDeclarationStatement(), int, rows, rm, getRowDimension, ForStatement(for), int, i, rows, 1, i, 1, i, VariableDeclarationStatement(), double, diag, rm, getEntry, i, i, IfStatement(if), FastMath, abs, diag, Precision.SAFE_MIN, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, VariableDeclarationStatement(), double, bi, b, getEntry, i, diag, ExpressionStatement(), b, setEntry, i, bi, ForStatement(for), int, j, i, 1, j, 1, j, ExpressionStatement(), b, setEntry, j, b, getEntry, j, bi, rm, getEntry, j, i]
org.apache.commons.math4.linear:MatrixUtils:blockInverse:RealMatrix+int#[VariableDeclarationStatement(), final, int, n, m, getRowDimension, IfStatement(if), m, getColumnDimension, n, ThrowStatement(throw), new, NonSquareMatrixException, m, getRowDimension, m, getColumnDimension, VariableDeclarationStatement(), final, int, splitIndex1, splitIndex, 1, VariableDeclarationStatement(), final, RealMatrix, a, m, getSubMatrix, 0, splitIndex, 0, splitIndex, VariableDeclarationStatement(), final, RealMatrix, b, m, getSubMatrix, 0, splitIndex, splitIndex1, n, 1, VariableDeclarationStatement(), final, RealMatrix, c, m, getSubMatrix, splitIndex1, n, 1, 0, splitIndex, VariableDeclarationStatement(), final, RealMatrix, d, m, getSubMatrix, splitIndex1, n, 1, splitIndex1, n, 1, VariableDeclarationStatement(), final, SingularValueDecomposition, aDec, new, SingularValueDecomposition, a, VariableDeclarationStatement(), final, DecompositionSolver, aSolver, aDec, getSolver, IfStatement(if), aSolver, isNonSingular, ThrowStatement(throw), new, SingularMatrixException, VariableDeclarationStatement(), final, RealMatrix, aInv, aSolver, getInverse, VariableDeclarationStatement(), final, SingularValueDecomposition, dDec, new, SingularValueDecomposition, d, VariableDeclarationStatement(), final, DecompositionSolver, dSolver, dDec, getSolver, IfStatement(if), dSolver, isNonSingular, ThrowStatement(throw), new, SingularMatrixException, VariableDeclarationStatement(), final, RealMatrix, dInv, dSolver, getInverse, VariableDeclarationStatement(), final, RealMatrix, tmp1, a, subtract, b, multiply, dInv, multiply, c, VariableDeclarationStatement(), final, SingularValueDecomposition, tmp1Dec, new, SingularValueDecomposition, tmp1, VariableDeclarationStatement(), final, DecompositionSolver, tmp1Solver, tmp1Dec, getSolver, IfStatement(if), tmp1Solver, isNonSingular, ThrowStatement(throw), new, SingularMatrixException, VariableDeclarationStatement(), final, RealMatrix, result00, tmp1Solver, getInverse, VariableDeclarationStatement(), final, RealMatrix, tmp2, d, subtract, c, multiply, aInv, multiply, b, VariableDeclarationStatement(), final, SingularValueDecomposition, tmp2Dec, new, SingularValueDecomposition, tmp2, VariableDeclarationStatement(), final, DecompositionSolver, tmp2Solver, tmp2Dec, getSolver, IfStatement(if), tmp2Solver, isNonSingular, ThrowStatement(throw), new, SingularMatrixException, VariableDeclarationStatement(), final, RealMatrix, result11, tmp2Solver, getInverse, VariableDeclarationStatement(), final, RealMatrix, result01, aInv, multiply, b, multiply, result11, scalarMultiply, 1, VariableDeclarationStatement(), final, RealMatrix, result10, dInv, multiply, c, multiply, result00, scalarMultiply, 1, VariableDeclarationStatement(), final, RealMatrix, result, new, Array2DRowRealMatrix, n, n, ExpressionStatement(), result, setSubMatrix, result00, getData, 0, 0, ExpressionStatement(), result, setSubMatrix, result01, getData, 0, splitIndex1, ExpressionStatement(), result, setSubMatrix, result10, getData, splitIndex1, 0, ExpressionStatement(), result, setSubMatrix, result11, getData, splitIndex1, splitIndex1, ReturnStatement(return), result]
org.apache.commons.math4.linear:MatrixUtils:inverse:RealMatrix#[ReturnStatement(return), inverse, matrix, 0]
org.apache.commons.math4.linear:MatrixUtils:inverse:RealMatrix+double#[ExpressionStatement(), MathUtils, checkNotNull, matrix, IfStatement(if), matrix, isSquare, ThrowStatement(throw), new, NonSquareMatrixException, matrix, getRowDimension, matrix, getColumnDimension, IfStatement(if), instanceof, matrix, DiagonalMatrix, ReturnStatement(return), DiagonalMatrix, matrix, inverse, threshold, VariableDeclarationStatement(), QRDecomposition, decomposition, new, QRDecomposition, matrix, threshold, ReturnStatement(return), decomposition, getSolver, getInverse]
org.apache.commons.math4.linear:NonPositiveDefiniteMatrixException:getRow:null#[ReturnStatement(return), index]
org.apache.commons.math4.linear:NonPositiveDefiniteMatrixException:getColumn:null#[ReturnStatement(return), index]
org.apache.commons.math4.linear:NonPositiveDefiniteMatrixException:getThreshold:null#[ReturnStatement(return), threshold]
org.apache.commons.math4.linear:NonSymmetricMatrixException:getRow:null#[ReturnStatement(return), row]
org.apache.commons.math4.linear:NonSymmetricMatrixException:getColumn:null#[ReturnStatement(return), column]
org.apache.commons.math4.linear:NonSymmetricMatrixException:getThreshold:null#[ReturnStatement(return), threshold]
org.apache.commons.math4.linear:OpenMapRealMatrix:copy:null#[ReturnStatement(return), new, OpenMapRealMatrix, this]
org.apache.commons.math4.linear:OpenMapRealMatrix:createMatrix:int+int#[ReturnStatement(return), new, OpenMapRealMatrix, rowDimension, columnDimension]
org.apache.commons.math4.linear:OpenMapRealMatrix:getColumnDimension:null#[ReturnStatement(return), columns]
org.apache.commons.math4.linear:OpenMapRealMatrix:add:OpenMapRealMatrix#[ExpressionStatement(), MatrixUtils, checkAdditionCompatible, this, m, VariableDeclarationStatement(), final, OpenMapRealMatrix, out, new, OpenMapRealMatrix, this, ForStatement(for), OpenIntToDoubleHashMap.Iterator, iterator, m.entries, iterator, iterator, hasNext, ExpressionStatement(), iterator, advance, VariableDeclarationStatement(), final, int, row, iterator, key, columns, VariableDeclarationStatement(), final, int, col, iterator, key, row, columns, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, iterator, value, ReturnStatement(return), out]
org.apache.commons.math4.linear:OpenMapRealMatrix:subtract:RealMatrix#[TryStatement(try), ReturnStatement(return), subtract, OpenMapRealMatrix, m, catch, ClassCastException, cce, ReturnStatement(return), OpenMapRealMatrix, super, subtract, m]
org.apache.commons.math4.linear:OpenMapRealMatrix:subtract:OpenMapRealMatrix#[ExpressionStatement(), MatrixUtils, checkAdditionCompatible, this, m, VariableDeclarationStatement(), final, OpenMapRealMatrix, out, new, OpenMapRealMatrix, this, ForStatement(for), OpenIntToDoubleHashMap.Iterator, iterator, m.entries, iterator, iterator, hasNext, ExpressionStatement(), iterator, advance, VariableDeclarationStatement(), final, int, row, iterator, key, columns, VariableDeclarationStatement(), final, int, col, iterator, key, row, columns, ExpressionStatement(), out, setEntry, row, col, getEntry, row, col, iterator, value, ReturnStatement(return), out]
org.apache.commons.math4.linear:OpenMapRealMatrix:multiply:RealMatrix#[TryStatement(try), ReturnStatement(return), multiply, OpenMapRealMatrix, m, catch, ClassCastException, cce, ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, int, outCols, m, getColumnDimension, VariableDeclarationStatement(), final, BlockRealMatrix, out, new, BlockRealMatrix, rows, outCols, ForStatement(for), OpenIntToDoubleHashMap.Iterator, iterator, entries, iterator, iterator, hasNext, ExpressionStatement(), iterator, advance, VariableDeclarationStatement(), final, double, value, iterator, value, VariableDeclarationStatement(), final, int, key, iterator, key, VariableDeclarationStatement(), final, int, i, key, columns, VariableDeclarationStatement(), final, int, k, key, columns, ForStatement(for), int, j, 0, j, outCols, j, ExpressionStatement(), out, addToEntry, i, j, value, m, getEntry, k, j, ReturnStatement(return), out]
org.apache.commons.math4.linear:OpenMapRealMatrix:multiply:OpenMapRealMatrix#[ExpressionStatement(), MatrixUtils, checkMultiplicationCompatible, this, m, VariableDeclarationStatement(), final, int, outCols, m, getColumnDimension, VariableDeclarationStatement(), OpenMapRealMatrix, out, new, OpenMapRealMatrix, rows, outCols, ForStatement(for), OpenIntToDoubleHashMap.Iterator, iterator, entries, iterator, iterator, hasNext, ExpressionStatement(), iterator, advance, VariableDeclarationStatement(), final, double, value, iterator, value, VariableDeclarationStatement(), final, int, key, iterator, key, VariableDeclarationStatement(), final, int, i, key, columns, VariableDeclarationStatement(), final, int, k, key, columns, ForStatement(for), int, j, 0, j, outCols, j, VariableDeclarationStatement(), final, int, rightKey, m, computeKey, k, j, IfStatement(if), m.entries, containsKey, rightKey, VariableDeclarationStatement(), final, int, outKey, out, computeKey, i, j, VariableDeclarationStatement(), final, double, outValue, out.entries, get, outKey, value, m.entries, get, rightKey, IfStatement(if), outValue, 0.0, ExpressionStatement(), out.entries, remove, outKey, ExpressionStatement(), out.entries, put, outKey, outValue, ReturnStatement(return), out]
org.apache.commons.math4.linear:OpenMapRealMatrix:getEntry:int+int#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, ReturnStatement(return), entries, get, computeKey, row, column]
org.apache.commons.math4.linear:OpenMapRealMatrix:getRowDimension:null#[ReturnStatement(return), rows]
org.apache.commons.math4.linear:OpenMapRealMatrix:setEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, IfStatement(if), value, 0.0, ExpressionStatement(), entries, remove, computeKey, row, column, ExpressionStatement(), entries, put, computeKey, row, column, value]
org.apache.commons.math4.linear:OpenMapRealMatrix:addToEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, key, computeKey, row, column, VariableDeclarationStatement(), final, double, value, entries, get, key, increment, IfStatement(if), value, 0.0, ExpressionStatement(), entries, remove, key, ExpressionStatement(), entries, put, key, value]
org.apache.commons.math4.linear:OpenMapRealMatrix:multiplyEntry:int+int+double#[ExpressionStatement(), MatrixUtils, checkRowIndex, this, row, ExpressionStatement(), MatrixUtils, checkColumnIndex, this, column, VariableDeclarationStatement(), final, int, key, computeKey, row, column, VariableDeclarationStatement(), final, double, value, entries, get, key, factor, IfStatement(if), value, 0.0, ExpressionStatement(), entries, remove, key, ExpressionStatement(), entries, put, key, value]
org.apache.commons.math4.linear:OpenMapRealMatrix:computeKey:int+int#[ReturnStatement(return), row, columns, column]
org.apache.commons.math4.linear:OpenMapRealVector:getEntries:null#[ReturnStatement(return), entries]
org.apache.commons.math4.linear:OpenMapRealVector:isDefaultValue:double#[ReturnStatement(return), FastMath, abs, value, epsilon]
org.apache.commons.math4.linear:OpenMapRealVector:add:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, IfStatement(if), instanceof, v, OpenMapRealVector, ReturnStatement(return), add, OpenMapRealVector, v, ReturnStatement(return), super, add, v]
org.apache.commons.math4.linear:OpenMapRealVector:add:OpenMapRealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), boolean, copyThis, entries, size, v.entries, size, VariableDeclarationStatement(), OpenMapRealVector, res, copyThis, this, copy, v, copy, VariableDeclarationStatement(), Iterator, iter, copyThis, v.entries, iterator, entries, iterator, VariableDeclarationStatement(), OpenIntToDoubleHashMap, randomAccess, copyThis, entries, v.entries, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), randomAccess, containsKey, key, ExpressionStatement(), res, setEntry, key, randomAccess, get, key, iter, value, ExpressionStatement(), res, setEntry, key, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:append:OpenMapRealVector#[VariableDeclarationStatement(), OpenMapRealVector, res, new, OpenMapRealVector, this, v, getDimension, VariableDeclarationStatement(), Iterator, iter, v.entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, setEntry, iter, key, virtualSize, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:append:RealVector#[IfStatement(if), instanceof, v, OpenMapRealVector, ReturnStatement(return), append, OpenMapRealVector, v, VariableDeclarationStatement(), final, OpenMapRealVector, res, new, OpenMapRealVector, this, v, getDimension, ForStatement(for), int, i, 0, i, v, getDimension, i, ExpressionStatement(), res, setEntry, i, virtualSize, v, getEntry, i, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:append:double#[VariableDeclarationStatement(), OpenMapRealVector, res, new, OpenMapRealVector, this, 1, ExpressionStatement(), res, setEntry, virtualSize, d, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:copy:null#[ReturnStatement(return), new, OpenMapRealVector, this]
org.apache.commons.math4.linear:OpenMapRealVector:ebeDivide:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), OpenMapRealVector, res, new, OpenMapRealVector, this, VariableDeclarationStatement(), final, int, n, getDimension, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), res, setEntry, i, this, getEntry, i, v, getEntry, i, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:ebeMultiply:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), OpenMapRealVector, res, new, OpenMapRealVector, this, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, setEntry, iter, key, iter, value, v, getEntry, iter, key, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:getSubVector:int+int#[ExpressionStatement(), checkIndex, index, IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, ExpressionStatement(), checkIndex, index, n, 1, VariableDeclarationStatement(), OpenMapRealVector, res, new, OpenMapRealVector, n, VariableDeclarationStatement(), int, end, index, n, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), key, index, key, end, ExpressionStatement(), res, setEntry, key, index, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:getDimension:null#[ReturnStatement(return), virtualSize]
org.apache.commons.math4.linear:OpenMapRealVector:getDistance:OpenMapRealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), Iterator, iter, entries, iterator, VariableDeclarationStatement(), double, res, 0, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, VariableDeclarationStatement(), double, delta, ExpressionStatement(), delta, iter, value, v, getEntry, key, ExpressionStatement(), res, delta, delta, ExpressionStatement(), iter, v, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), entries, containsKey, key, VariableDeclarationStatement(), final, double, value, iter, value, ExpressionStatement(), res, value, value, ReturnStatement(return), FastMath, sqrt, res]
org.apache.commons.math4.linear:OpenMapRealVector:getDistance:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, IfStatement(if), instanceof, v, OpenMapRealVector, ReturnStatement(return), getDistance, OpenMapRealVector, v, ReturnStatement(return), super, getDistance, v]
org.apache.commons.math4.linear:OpenMapRealVector:getEntry:int#[ExpressionStatement(), checkIndex, index, ReturnStatement(return), entries, get, index]
org.apache.commons.math4.linear:OpenMapRealVector:getL1Distance:OpenMapRealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), double, max, 0, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), double, delta, FastMath, abs, iter, value, v, getEntry, iter, key, ExpressionStatement(), max, delta, ExpressionStatement(), iter, v, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), entries, containsKey, key, VariableDeclarationStatement(), double, delta, FastMath, abs, iter, value, ExpressionStatement(), max, FastMath, abs, delta, ReturnStatement(return), max]
org.apache.commons.math4.linear:OpenMapRealVector:getL1Distance:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, IfStatement(if), instanceof, v, OpenMapRealVector, ReturnStatement(return), getL1Distance, OpenMapRealVector, v, ReturnStatement(return), super, getL1Distance, v]
org.apache.commons.math4.linear:OpenMapRealVector:getLInfDistance:OpenMapRealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), double, max, 0, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), double, delta, FastMath, abs, iter, value, v, getEntry, iter, key, IfStatement(if), delta, max, ExpressionStatement(), max, delta, ExpressionStatement(), iter, v, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), entries, containsKey, key, iter, value, max, ExpressionStatement(), max, iter, value, ReturnStatement(return), max]
org.apache.commons.math4.linear:OpenMapRealVector:getLInfDistance:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, IfStatement(if), instanceof, v, OpenMapRealVector, ReturnStatement(return), getLInfDistance, OpenMapRealVector, v, ReturnStatement(return), super, getLInfDistance, v]
org.apache.commons.math4.linear:OpenMapRealVector:isInfinite:null#[VariableDeclarationStatement(), boolean, infiniteFound, false, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), final, double, value, iter, value, IfStatement(if), Double, isNaN, value, ReturnStatement(return), false, IfStatement(if), Double, isInfinite, value, ExpressionStatement(), infiniteFound, true, ReturnStatement(return), infiniteFound]
org.apache.commons.math4.linear:OpenMapRealVector:isNaN:null#[VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, IfStatement(if), Double, isNaN, iter, value, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.linear:OpenMapRealVector:mapAdd:double#[ReturnStatement(return), copy, mapAddToSelf, d]
org.apache.commons.math4.linear:OpenMapRealVector:mapAddToSelf:double#[ForStatement(for), int, i, 0, i, virtualSize, i, ExpressionStatement(), setEntry, i, getEntry, i, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:OpenMapRealVector:setEntry:int+double#[ExpressionStatement(), checkIndex, index, IfStatement(if), isDefaultValue, value, ExpressionStatement(), entries, put, index, value, IfStatement(if), entries, containsKey, index, ExpressionStatement(), entries, remove, index]
org.apache.commons.math4.linear:OpenMapRealVector:setSubVector:int+RealVector#[ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, v, getDimension, 1, ForStatement(for), int, i, 0, i, v, getDimension, i, ExpressionStatement(), setEntry, i, index, v, getEntry, i]
org.apache.commons.math4.linear:OpenMapRealVector:set:double#[ForStatement(for), int, i, 0, i, virtualSize, i, ExpressionStatement(), setEntry, i, value]
org.apache.commons.math4.linear:OpenMapRealVector:subtract:OpenMapRealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), OpenMapRealVector, res, copy, VariableDeclarationStatement(), Iterator, iter, v, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), entries, containsKey, key, ExpressionStatement(), res, setEntry, key, entries, get, key, iter, value, ExpressionStatement(), res, setEntry, key, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:subtract:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension, IfStatement(if), instanceof, v, OpenMapRealVector, ReturnStatement(return), subtract, OpenMapRealVector, v, ReturnStatement(return), super, subtract, v]
org.apache.commons.math4.linear:OpenMapRealVector:unitVector:null#[VariableDeclarationStatement(), OpenMapRealVector, res, copy, ExpressionStatement(), res, unitize, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:unitize:null#[VariableDeclarationStatement(), double, norm, getNorm, IfStatement(if), isDefaultValue, norm, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), entries, put, iter, key, iter, value, norm]
org.apache.commons.math4.linear:OpenMapRealVector:toArray:null#[VariableDeclarationStatement(), double, res, double, virtualSize, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, iter, key, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:OpenMapRealVector:hashCode:null#[VariableDeclarationStatement(), final, int, prime, 31, VariableDeclarationStatement(), int, result, 1, VariableDeclarationStatement(), long, temp, ExpressionStatement(), temp, Double, doubleToLongBits, epsilon, ExpressionStatement(), result, prime, result, int, temp, temp, 32, ExpressionStatement(), result, prime, result, virtualSize, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), temp, Double, doubleToLongBits, iter, value, ExpressionStatement(), result, prime, result, int, temp, temp, 32, ReturnStatement(return), result]
org.apache.commons.math4.linear:OpenMapRealVector:equals:Object#[IfStatement(if), this, obj, ReturnStatement(return), true, IfStatement(if), instanceof, obj, OpenMapRealVector, ReturnStatement(return), false, VariableDeclarationStatement(), OpenMapRealVector, other, OpenMapRealVector, obj, IfStatement(if), virtualSize, other.virtualSize, ReturnStatement(return), false, IfStatement(if), Double, doubleToLongBits, epsilon, Double, doubleToLongBits, other.epsilon, ReturnStatement(return), false, VariableDeclarationStatement(), Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), double, test, other, getEntry, iter, key, IfStatement(if), Double, doubleToLongBits, test, Double, doubleToLongBits, iter, value, ReturnStatement(return), false, ExpressionStatement(), iter, other, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), double, test, iter, value, IfStatement(if), Double, doubleToLongBits, test, Double, doubleToLongBits, getEntry, iter, key, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.linear:OpenMapRealVector:getSparsity:null#[ReturnStatement(return), double, entries, size, double, getDimension]
org.apache.commons.math4.linear:OpenMapRealVector:sparseIterator:null#[ReturnStatement(return), new, OpenMapSparseIterator]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, x0, ReturnStatement(return), solveInPlace, a, m, b, x0, copy]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, a, VariableDeclarationStatement(), final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, ExpressionStatement(), x, set, 0., ReturnStatement(return), solveInPlace, a, null, b, x]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, x0, ReturnStatement(return), solveInPlace, a, null, b, x0, copy]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:checkParameters:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), checkParameters, a, b, x0, IfStatement(if), m, null, IfStatement(if), m, getColumnDimension, m, getRowDimension, ThrowStatement(throw), new, NonSquareOperatorException, m, getColumnDimension, m, getRowDimension, IfStatement(if), m, getRowDimension, a, getRowDimension, ThrowStatement(throw), new, DimensionMismatchException, m, getRowDimension, a, getRowDimension]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solve:RealLinearOperator+RealLinearOperator+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, a, VariableDeclarationStatement(), final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, ReturnStatement(return), solveInPlace, a, m, b, x]
org.apache.commons.math4.linear:PreconditionedIterativeLinearSolver:solveInPlace:RealLinearOperator+RealVector+RealVector#[ReturnStatement(return), solveInPlace, a, null, b, x0]
org.apache.commons.math4.linear:QRDecomposition:decompose:double[][]#[ForStatement(for), int, minor, 0, minor, FastMath, min, matrix.length, matrix, 0, length, minor, ExpressionStatement(), performHouseholderReflection, minor, matrix]
org.apache.commons.math4.linear:QRDecomposition:performHouseholderReflection:int+double[][]#[VariableDeclarationStatement(), final, double, qrtMinor, matrix, minor, VariableDeclarationStatement(), double, xNormSqr, 0, ForStatement(for), int, row, minor, row, qrtMinor.length, row, VariableDeclarationStatement(), final, double, c, qrtMinor, row, ExpressionStatement(), xNormSqr, c, c, VariableDeclarationStatement(), final, double, a, qrtMinor, minor, 0, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, ExpressionStatement(), rDiag, minor, a, IfStatement(if), a, 0.0, ExpressionStatement(), qrtMinor, minor, a, ForStatement(for), int, col, minor, 1, col, matrix.length, col, VariableDeclarationStatement(), final, double, qrtCol, matrix, col, VariableDeclarationStatement(), double, alpha, 0, ForStatement(for), int, row, minor, row, qrtCol.length, row, ExpressionStatement(), alpha, qrtCol, row, qrtMinor, row, ExpressionStatement(), alpha, a, qrtMinor, minor, ForStatement(for), int, row, minor, row, qrtCol.length, row, ExpressionStatement(), qrtCol, row, alpha, qrtMinor, row]
org.apache.commons.math4.linear:QRDecomposition:getR:null#[IfStatement(if), cachedR, null, VariableDeclarationStatement(), final, int, n, qrt.length, VariableDeclarationStatement(), final, int, m, qrt, 0, length, VariableDeclarationStatement(), double, ra, double, m, n, ForStatement(for), int, row, FastMath, min, m, n, 1, row, 0, row, ExpressionStatement(), ra, row, row, rDiag, row, ForStatement(for), int, col, row, 1, col, n, col, ExpressionStatement(), ra, row, col, qrt, col, row, ExpressionStatement(), cachedR, MatrixUtils, createRealMatrix, ra, ReturnStatement(return), cachedR]
org.apache.commons.math4.linear:QRDecomposition:getQ:null#[IfStatement(if), cachedQ, null, ExpressionStatement(), cachedQ, getQT, transpose, ReturnStatement(return), cachedQ]
org.apache.commons.math4.linear:QRDecomposition:getQT:null#[IfStatement(if), cachedQT, null, VariableDeclarationStatement(), final, int, n, qrt.length, VariableDeclarationStatement(), final, int, m, qrt, 0, length, VariableDeclarationStatement(), double, qta, double, m, m, ForStatement(for), int, minor, m, 1, minor, FastMath, min, m, n, minor, ExpressionStatement(), qta, minor, minor, 1.0d, ForStatement(for), int, minor, FastMath, min, m, n, 1, minor, 0, minor, VariableDeclarationStatement(), final, double, qrtMinor, qrt, minor, ExpressionStatement(), qta, minor, minor, 1.0d, IfStatement(if), qrtMinor, minor, 0.0, ForStatement(for), int, col, minor, col, m, col, VariableDeclarationStatement(), double, alpha, 0, ForStatement(for), int, row, minor, row, m, row, ExpressionStatement(), alpha, qta, col, row, qrtMinor, row, ExpressionStatement(), alpha, rDiag, minor, qrtMinor, minor, ForStatement(for), int, row, minor, row, m, row, ExpressionStatement(), qta, col, row, alpha, qrtMinor, row, ExpressionStatement(), cachedQT, MatrixUtils, createRealMatrix, qta, ReturnStatement(return), cachedQT]
org.apache.commons.math4.linear:QRDecomposition:getH:null#[IfStatement(if), cachedH, null, VariableDeclarationStatement(), final, int, n, qrt.length, VariableDeclarationStatement(), final, int, m, qrt, 0, length, VariableDeclarationStatement(), double, ha, double, m, n, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, FastMath, min, i, 1, n, j, ExpressionStatement(), ha, i, j, qrt, j, i, rDiag, j, ExpressionStatement(), cachedH, MatrixUtils, createRealMatrix, ha, ReturnStatement(return), cachedH]
org.apache.commons.math4.linear:QRDecomposition:getSolver:null#[ReturnStatement(return), new, Solver, qrt, rDiag, threshold]
org.apache.commons.math4.linear:RealLinearOperator:operateTranspose:RealVector#[ThrowStatement(throw), new, UnsupportedOperationException]
org.apache.commons.math4.linear:RealLinearOperator:isTransposable:null#[ReturnStatement(return), false]
org.apache.commons.math4.linear:RealMatrixFormat:getAvailableLocales:null#[ReturnStatement(return), NumberFormat, getAvailableLocales]
org.apache.commons.math4.linear:RealMatrixFormat:getPrefix:null#[ReturnStatement(return), prefix]
org.apache.commons.math4.linear:RealMatrixFormat:getSuffix:null#[ReturnStatement(return), suffix]
org.apache.commons.math4.linear:RealMatrixFormat:getRowPrefix:null#[ReturnStatement(return), rowPrefix]
org.apache.commons.math4.linear:RealMatrixFormat:getRowSuffix:null#[ReturnStatement(return), rowSuffix]
org.apache.commons.math4.linear:RealMatrixFormat:getRowSeparator:null#[ReturnStatement(return), rowSeparator]
org.apache.commons.math4.linear:RealMatrixFormat:getColumnSeparator:null#[ReturnStatement(return), columnSeparator]
org.apache.commons.math4.linear:RealMatrixFormat:getFormat:null#[ReturnStatement(return), format]
org.apache.commons.math4.linear:RealMatrixFormat:getInstance:null#[ReturnStatement(return), getInstance, Locale, getDefault]
org.apache.commons.math4.linear:RealMatrixFormat:getInstance:Locale#[ReturnStatement(return), new, RealMatrixFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.linear:RealMatrixFormat:format:RealMatrix#[ReturnStatement(return), format, m, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.linear:RealMatrixFormat:format:RealMatrix+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, ExpressionStatement(), toAppendTo, append, prefix, VariableDeclarationStatement(), final, int, rows, matrix, getRowDimension, ForStatement(for), int, i, 0, i, rows, i, ExpressionStatement(), toAppendTo, append, rowPrefix, ForStatement(for), int, j, 0, j, matrix, getColumnDimension, j, IfStatement(if), j, 0, ExpressionStatement(), toAppendTo, append, columnSeparator, ExpressionStatement(), CompositeFormat, formatDouble, matrix, getEntry, i, j, format, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, rowSuffix, IfStatement(if), i, rows, 1, ExpressionStatement(), toAppendTo, append, rowSeparator, ExpressionStatement(), toAppendTo, append, suffix, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.linear:RealMatrixFormat:parse:String#[VariableDeclarationStatement(), final, ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), final, RealMatrix, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, Array2DRowRealMatrix, ReturnStatement(return), result]
org.apache.commons.math4.linear:RealMatrixFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), int, initialIndex, pos, getIndex, VariableDeclarationStatement(), final, String, trimmedPrefix, prefix, trim, VariableDeclarationStatement(), final, String, trimmedSuffix, suffix, trim, VariableDeclarationStatement(), final, String, trimmedRowPrefix, rowPrefix, trim, VariableDeclarationStatement(), final, String, trimmedRowSuffix, rowSuffix, trim, VariableDeclarationStatement(), final, String, trimmedColumnSeparator, columnSeparator, trim, VariableDeclarationStatement(), final, String, trimmedRowSeparator, rowSeparator, trim, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedPrefix, pos, ReturnStatement(return), null, VariableDeclarationStatement(), List, List, Number, matrix, new, ArrayList, List, Number, VariableDeclarationStatement(), List, Number, rowComponents, new, ArrayList, Number, ForStatement(for), boolean, loop, true, loop, IfStatement(if), rowComponents, isEmpty, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedColumnSeparator, pos, IfStatement(if), trimmedRowSuffix, length, 0, CompositeFormat, parseFixedstring, source, trimmedRowSuffix, pos, ReturnStatement(return), null, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedRowSeparator, pos, ExpressionStatement(), matrix, add, rowComponents, ExpressionStatement(), rowComponents, new, ArrayList, Number, ContinueStatement(continue), ExpressionStatement(), loop, false, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), trimmedRowPrefix, length, 0, CompositeFormat, parseFixedstring, source, trimmedRowPrefix, pos, ReturnStatement(return), null, IfStatement(if), loop, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, component, CompositeFormat, parseNumber, source, format, pos, IfStatement(if), component, null, ExpressionStatement(), rowComponents, add, component, IfStatement(if), rowComponents, isEmpty, ExpressionStatement(), loop, false, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, IfStatement(if), rowComponents, isEmpty, ExpressionStatement(), matrix, add, rowComponents, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedSuffix, pos, ReturnStatement(return), null, IfStatement(if), matrix, isEmpty, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, VariableDeclarationStatement(), double, data, double, matrix, size, VariableDeclarationStatement(), int, row, 0, EnhancedForStatement(for), List, Number, rowList, matrix, ExpressionStatement(), data, row, double, rowList, size, ForStatement(for), int, i, 0, i, rowList, size, i, ExpressionStatement(), data, row, i, rowList, get, i, doubleValue, ExpressionStatement(), row, ReturnStatement(return), MatrixUtils, createRealMatrix, data]
org.apache.commons.math4.linear:RealVector:addToEntry:int+double#[ExpressionStatement(), setEntry, index, getEntry, index, increment]
org.apache.commons.math4.linear:RealVector:checkVectorDimensions:RealVector#[ExpressionStatement(), checkVectorDimensions, v, getDimension]
org.apache.commons.math4.linear:RealVector:checkVectorDimensions:int#[VariableDeclarationStatement(), int, d, getDimension, IfStatement(if), d, n, ThrowStatement(throw), new, DimensionMismatchException, d, n]
org.apache.commons.math4.linear:RealVector:checkIndex:int#[IfStatement(if), index, 0, index, getDimension, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, index, 0, getDimension, 1]
org.apache.commons.math4.linear:RealVector:checkIndices:int+int#[VariableDeclarationStatement(), final, int, dim, getDimension, IfStatement(if), start, 0, start, dim, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, start, 0, dim, 1, IfStatement(if), end, 0, end, dim, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, end, 0, dim, 1, IfStatement(if), end, start, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false]
org.apache.commons.math4.linear:RealVector:add:RealVector#[ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), RealVector, result, v, copy, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, VariableDeclarationStatement(), final, int, index, e, getIndex, ExpressionStatement(), result, setEntry, index, e, getValue, result, getEntry, index, ReturnStatement(return), result]
org.apache.commons.math4.linear:RealVector:subtract:RealVector#[ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), RealVector, result, v, mapMultiply, 1d, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, VariableDeclarationStatement(), final, int, index, e, getIndex, ExpressionStatement(), result, setEntry, index, e, getValue, result, getEntry, index, ReturnStatement(return), result]
org.apache.commons.math4.linear:RealVector:mapAdd:double#[ReturnStatement(return), copy, mapAddToSelf, d]
org.apache.commons.math4.linear:RealVector:mapAddToSelf:double#[IfStatement(if), d, 0, ReturnStatement(return), mapToSelf, FunctionUtils, fix2ndArgument, new, Add, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:RealVector:dotProduct:RealVector#[ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), final, int, n, getDimension, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), d, getEntry, i, v, getEntry, i, ReturnStatement(return), d]
org.apache.commons.math4.linear:RealVector:cosine:RealVector#[VariableDeclarationStatement(), final, double, norm, getNorm, VariableDeclarationStatement(), final, double, vNorm, v, getNorm, IfStatement(if), norm, 0, vNorm, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, ReturnStatement(return), dotProduct, v, norm, vNorm]
org.apache.commons.math4.linear:RealVector:getDistance:RealVector#[ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, VariableDeclarationStatement(), final, double, diff, e, getValue, v, getEntry, e, getIndex, ExpressionStatement(), d, diff, diff, ReturnStatement(return), FastMath, sqrt, d]
org.apache.commons.math4.linear:RealVector:getNorm:null#[VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, VariableDeclarationStatement(), final, double, value, e, getValue, ExpressionStatement(), sum, value, value, ReturnStatement(return), FastMath, sqrt, sum]
org.apache.commons.math4.linear:RealVector:getL1Norm:null#[VariableDeclarationStatement(), double, norm, 0, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), norm, FastMath, abs, e, getValue, ReturnStatement(return), norm]
org.apache.commons.math4.linear:RealVector:getLInfNorm:null#[VariableDeclarationStatement(), double, norm, 0, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), norm, FastMath, max, norm, FastMath, abs, e, getValue, ReturnStatement(return), norm]
org.apache.commons.math4.linear:RealVector:getL1Distance:RealVector#[ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), d, FastMath, abs, e, getValue, v, getEntry, e, getIndex, ReturnStatement(return), d]
org.apache.commons.math4.linear:RealVector:getLInfDistance:RealVector#[ExpressionStatement(), checkVectorDimensions, v, VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), d, FastMath, max, FastMath, abs, e, getValue, v, getEntry, e, getIndex, d, ReturnStatement(return), d]
org.apache.commons.math4.linear:RealVector:getMinIndex:null#[VariableDeclarationStatement(), int, minIndex, 1, VariableDeclarationStatement(), double, minValue, Double.POSITIVE_INFINITY, VariableDeclarationStatement(), Iterator, Entry, iterator, iterator, WhileStatement(while), iterator, hasNext, VariableDeclarationStatement(), final, Entry, entry, iterator, next, IfStatement(if), entry, getValue, minValue, ExpressionStatement(), minIndex, entry, getIndex, ExpressionStatement(), minValue, entry, getValue, ReturnStatement(return), minIndex]
org.apache.commons.math4.linear:RealVector:getMinValue:null#[VariableDeclarationStatement(), final, int, minIndex, getMinIndex, ReturnStatement(return), minIndex, 0, Double.NaN, getEntry, minIndex]
org.apache.commons.math4.linear:RealVector:getMaxIndex:null#[VariableDeclarationStatement(), int, maxIndex, 1, VariableDeclarationStatement(), double, maxValue, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), Iterator, Entry, iterator, iterator, WhileStatement(while), iterator, hasNext, VariableDeclarationStatement(), final, Entry, entry, iterator, next, IfStatement(if), entry, getValue, maxValue, ExpressionStatement(), maxIndex, entry, getIndex, ExpressionStatement(), maxValue, entry, getValue, ReturnStatement(return), maxIndex]
org.apache.commons.math4.linear:RealVector:getMaxValue:null#[VariableDeclarationStatement(), final, int, maxIndex, getMaxIndex, ReturnStatement(return), maxIndex, 0, Double.NaN, getEntry, maxIndex]
org.apache.commons.math4.linear:RealVector:mapMultiply:double#[ReturnStatement(return), copy, mapMultiplyToSelf, d]
org.apache.commons.math4.linear:RealVector:mapMultiplyToSelf:double#[ReturnStatement(return), mapToSelf, FunctionUtils, fix2ndArgument, new, Multiply, d]
org.apache.commons.math4.linear:RealVector:mapSubtract:double#[ReturnStatement(return), copy, mapSubtractToSelf, d]
org.apache.commons.math4.linear:RealVector:mapSubtractToSelf:double#[ReturnStatement(return), mapAddToSelf, d]
org.apache.commons.math4.linear:RealVector:mapDivide:double#[ReturnStatement(return), copy, mapDivideToSelf, d]
org.apache.commons.math4.linear:RealVector:mapDivideToSelf:double#[ReturnStatement(return), mapToSelf, FunctionUtils, fix2ndArgument, new, Divide, d]
org.apache.commons.math4.linear:RealVector:outerProduct:RealVector#[VariableDeclarationStatement(), final, int, m, this, getDimension, VariableDeclarationStatement(), final, int, n, v, getDimension, VariableDeclarationStatement(), final, RealMatrix, product, IfStatement(if), instanceof, v, SparseRealVector, instanceof, this, SparseRealVector, ExpressionStatement(), product, new, OpenMapRealMatrix, m, n, ExpressionStatement(), product, new, Array2DRowRealMatrix, m, n, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), product, setEntry, i, j, this, getEntry, i, v, getEntry, j, ReturnStatement(return), product]
org.apache.commons.math4.linear:RealVector:projection:RealVector#[VariableDeclarationStatement(), final, double, norm2, v, dotProduct, v, IfStatement(if), norm2, 0.0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, ReturnStatement(return), v, mapMultiply, dotProduct, v, v, dotProduct, v]
org.apache.commons.math4.linear:RealVector:set:double#[VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), e, setValue, value]
org.apache.commons.math4.linear:RealVector:toArray:null#[VariableDeclarationStatement(), int, dim, getDimension, VariableDeclarationStatement(), double, values, double, dim, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), values, i, getEntry, i, ReturnStatement(return), values]
org.apache.commons.math4.linear:RealVector:unitVector:null#[VariableDeclarationStatement(), final, double, norm, getNorm, IfStatement(if), norm, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, ReturnStatement(return), mapDivide, norm]
org.apache.commons.math4.linear:RealVector:unitize:null#[VariableDeclarationStatement(), final, double, norm, getNorm, IfStatement(if), norm, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NORM, ExpressionStatement(), mapDivideToSelf, getNorm]
org.apache.commons.math4.linear:RealVector:sparseIterator:null#[ReturnStatement(return), new, SparseEntryIterator]
org.apache.commons.math4.linear:RealVector:iterator:null#[VariableDeclarationStatement(), final, int, dim, getDimension, ReturnStatement(return), new, Iterator, Entry, private, int, i, 0, private, Entry, e, new, Entry, Override, public, boolean, hasNext, ReturnStatement(return), i, dim, Override, public, Entry, next, IfStatement(if), i, dim, ExpressionStatement(), e, setIndex, i, ReturnStatement(return), e, ThrowStatement(throw), new, NoSuchElementException, Override, public, void, remove, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVector:map:UnivariateFunction#[ReturnStatement(return), copy, mapToSelf, function]
org.apache.commons.math4.linear:RealVector:mapToSelf:UnivariateFunction#[VariableDeclarationStatement(), Iterator, Entry, it, iterator, WhileStatement(while), it, hasNext, VariableDeclarationStatement(), final, Entry, e, it, next, ExpressionStatement(), e, setValue, function, value, e, getValue, ReturnStatement(return), this]
org.apache.commons.math4.linear:RealVector:combine:double+double+RealVector#[ReturnStatement(return), copy, combineToSelf, a, b, y]
org.apache.commons.math4.linear:RealVector:combineToSelf:double+double+RealVector#[ExpressionStatement(), checkVectorDimensions, y, ForStatement(for), int, i, 0, i, getDimension, i, VariableDeclarationStatement(), final, double, xi, getEntry, i, VariableDeclarationStatement(), final, double, yi, y, getEntry, i, ExpressionStatement(), setEntry, i, a, xi, b, yi, ReturnStatement(return), this]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorPreservingVisitor#[VariableDeclarationStatement(), final, int, dim, getDimension, ExpressionStatement(), visitor, start, dim, 0, dim, 1, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorPreservingVisitor+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, getDimension, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorPreservingVisitor#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorPreservingVisitor+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorChangingVisitor#[VariableDeclarationStatement(), final, int, dim, getDimension, ExpressionStatement(), visitor, start, dim, 0, dim, 1, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), setEntry, i, visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:RealVector:walkInDefaultOrder:RealVectorChangingVisitor+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, getDimension, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), setEntry, i, visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorChangingVisitor#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:RealVector:walkInOptimizedOrder:RealVectorChangingVisitor+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:RealVector:equals:Object#[ThrowStatement(throw), new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVector:hashCode:null#[ThrowStatement(throw), new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVector:unmodifiableRealVector:RealVector#[ReturnStatement(return), new, RealVector, Override, public, RealVector, mapToSelf, UnivariateFunction, function, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, RealVector, map, UnivariateFunction, function, ReturnStatement(return), v, map, function, Override, public, Iterator, Entry, iterator, VariableDeclarationStatement(), final, Iterator, Entry, i, v, iterator, ReturnStatement(return), new, Iterator, Entry, private, final, UnmodifiableEntry, e, new, UnmodifiableEntry, Override, public, boolean, hasNext, ReturnStatement(return), i, hasNext, Override, public, Entry, next, ExpressionStatement(), e, setIndex, i, next, getIndex, ReturnStatement(return), e, Override, public, void, remove, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, Iterator, Entry, sparseIterator, VariableDeclarationStatement(), final, Iterator, Entry, i, v, sparseIterator, ReturnStatement(return), new, Iterator, Entry, private, final, UnmodifiableEntry, e, new, UnmodifiableEntry, Override, public, boolean, hasNext, ReturnStatement(return), i, hasNext, Override, public, Entry, next, ExpressionStatement(), e, setIndex, i, next, getIndex, ReturnStatement(return), e, Override, public, void, remove, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, RealVector, copy, ReturnStatement(return), v, copy, Override, public, RealVector, add, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, add, w, Override, public, RealVector, subtract, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, subtract, w, Override, public, RealVector, mapAdd, double, d, ReturnStatement(return), v, mapAdd, d, Override, public, RealVector, mapAddToSelf, double, d, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, RealVector, mapSubtract, double, d, ReturnStatement(return), v, mapSubtract, d, Override, public, RealVector, mapSubtractToSelf, double, d, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, RealVector, mapMultiply, double, d, ReturnStatement(return), v, mapMultiply, d, Override, public, RealVector, mapMultiplyToSelf, double, d, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, RealVector, mapDivide, double, d, ReturnStatement(return), v, mapDivide, d, Override, public, RealVector, mapDivideToSelf, double, d, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, RealVector, ebeMultiply, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, ebeMultiply, w, Override, public, RealVector, ebeDivide, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, ebeDivide, w, Override, public, double, dotProduct, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, dotProduct, w, Override, public, double, cosine, RealVector, w, DimensionMismatchException, MathArithmeticException, ReturnStatement(return), v, cosine, w, Override, public, double, getNorm, ReturnStatement(return), v, getNorm, Override, public, double, getL1Norm, ReturnStatement(return), v, getL1Norm, Override, public, double, getLInfNorm, ReturnStatement(return), v, getLInfNorm, Override, public, double, getDistance, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, getDistance, w, Override, public, double, getL1Distance, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, getL1Distance, w, Override, public, double, getLInfDistance, RealVector, w, DimensionMismatchException, ReturnStatement(return), v, getLInfDistance, w, Override, public, RealVector, unitVector, MathArithmeticException, ReturnStatement(return), v, unitVector, Override, public, void, unitize, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, RealMatrix, outerProduct, RealVector, w, ReturnStatement(return), v, outerProduct, w, Override, public, double, getEntry, int, index, OutOfRangeException, ReturnStatement(return), v, getEntry, index, Override, public, void, setEntry, int, index, double, value, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, void, addToEntry, int, index, double, value, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, int, getDimension, ReturnStatement(return), v, getDimension, Override, public, RealVector, append, RealVector, w, ReturnStatement(return), v, append, w, Override, public, RealVector, append, double, d, ReturnStatement(return), v, append, d, Override, public, RealVector, getSubVector, int, index, int, n, OutOfRangeException, NotPositiveException, ReturnStatement(return), v, getSubVector, index, n, Override, public, void, setSubVector, int, index, RealVector, w, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, void, set, double, value, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, Override, public, double, toArray, ReturnStatement(return), v, toArray, Override, public, boolean, isNaN, ReturnStatement(return), v, isNaN, Override, public, boolean, isInfinite, ReturnStatement(return), v, isInfinite, Override, public, RealVector, combine, double, a, double, b, RealVector, y, DimensionMismatchException, ReturnStatement(return), v, combine, a, b, y, Override, public, RealVector, combineToSelf, double, a, double, b, RealVector, y, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException, UnmodifiableEntry, Entry, Override, public, double, getValue, ReturnStatement(return), v, getEntry, getIndex, Override, public, void, setValue, double, value, MathUnsupportedOperationException, ThrowStatement(throw), new, MathUnsupportedOperationException]
org.apache.commons.math4.linear:RealVectorFormat:getAvailableLocales:null#[ReturnStatement(return), NumberFormat, getAvailableLocales]
org.apache.commons.math4.linear:RealVectorFormat:getPrefix:null#[ReturnStatement(return), prefix]
org.apache.commons.math4.linear:RealVectorFormat:getSuffix:null#[ReturnStatement(return), suffix]
org.apache.commons.math4.linear:RealVectorFormat:getSeparator:null#[ReturnStatement(return), separator]
org.apache.commons.math4.linear:RealVectorFormat:getFormat:null#[ReturnStatement(return), format]
org.apache.commons.math4.linear:RealVectorFormat:getInstance:null#[ReturnStatement(return), getInstance, Locale, getDefault]
org.apache.commons.math4.linear:RealVectorFormat:getInstance:Locale#[ReturnStatement(return), new, RealVectorFormat, CompositeFormat, getDefaultNumberFormat, locale]
org.apache.commons.math4.linear:RealVectorFormat:format:RealVector#[ReturnStatement(return), format, v, new, StringBuffer, new, FieldPosition, 0, toString]
org.apache.commons.math4.linear:RealVectorFormat:format:RealVector+StringBuffer+FieldPosition#[ExpressionStatement(), pos, setBeginIndex, 0, ExpressionStatement(), pos, setEndIndex, 0, ExpressionStatement(), toAppendTo, append, prefix, ForStatement(for), int, i, 0, i, vector, getDimension, i, IfStatement(if), i, 0, ExpressionStatement(), toAppendTo, append, separator, ExpressionStatement(), CompositeFormat, formatDouble, vector, getEntry, i, format, toAppendTo, pos, ExpressionStatement(), toAppendTo, append, suffix, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.linear:RealVectorFormat:parse:String#[VariableDeclarationStatement(), final, ParsePosition, parsePosition, new, ParsePosition, 0, VariableDeclarationStatement(), final, ArrayRealVector, result, parse, source, parsePosition, IfStatement(if), parsePosition, getIndex, 0, ThrowStatement(throw), new, MathParseException, source, parsePosition, getErrorIndex, ArrayRealVector, ReturnStatement(return), result]
org.apache.commons.math4.linear:RealVectorFormat:parse:String+ParsePosition#[VariableDeclarationStatement(), int, initialIndex, pos, getIndex, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedPrefix, pos, ReturnStatement(return), null, VariableDeclarationStatement(), List, Number, components, new, ArrayList, Number, ForStatement(for), boolean, loop, true, loop, IfStatement(if), components, isEmpty, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedSeparator, pos, ExpressionStatement(), loop, false, IfStatement(if), loop, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, VariableDeclarationStatement(), Number, component, CompositeFormat, parseNumber, source, format, pos, IfStatement(if), component, null, ExpressionStatement(), components, add, component, ExpressionStatement(), pos, setIndex, initialIndex, ReturnStatement(return), null, ExpressionStatement(), CompositeFormat, parseAndIgnoreWhitespace, source, pos, IfStatement(if), CompositeFormat, parseFixedstring, source, trimmedSuffix, pos, ReturnStatement(return), null, VariableDeclarationStatement(), double, data, double, components, size, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, components, get, i, doubleValue, ReturnStatement(return), new, ArrayRealVector, data, false]
org.apache.commons.math4.linear:RectangularCholeskyDecomposition:getRootMatrix:null#[ReturnStatement(return), root]
org.apache.commons.math4.linear:RectangularCholeskyDecomposition:getRank:null#[ReturnStatement(return), rank]
org.apache.commons.math4.linear:RRQRDecomposition:decompose:double[][]#[ExpressionStatement(), p, int, qrt.length, ForStatement(for), int, i, 0, i, p.length, i, ExpressionStatement(), p, i, i, ExpressionStatement(), super, decompose, qrt]
org.apache.commons.math4.linear:RRQRDecomposition:performHouseholderReflection:int+double[][]#[VariableDeclarationStatement(), double, l2NormSquaredMax, 0, VariableDeclarationStatement(), int, l2NormSquaredMaxIndex, minor, ForStatement(for), int, i, minor, i, qrt.length, i, VariableDeclarationStatement(), double, l2NormSquared, 0, ForStatement(for), int, j, 0, j, qrt, i, length, j, ExpressionStatement(), l2NormSquared, qrt, i, j, qrt, i, j, IfStatement(if), l2NormSquared, l2NormSquaredMax, ExpressionStatement(), l2NormSquaredMax, l2NormSquared, ExpressionStatement(), l2NormSquaredMaxIndex, i, IfStatement(if), l2NormSquaredMaxIndex, minor, VariableDeclarationStatement(), double, tmp1, qrt, minor, ExpressionStatement(), qrt, minor, qrt, l2NormSquaredMaxIndex, ExpressionStatement(), qrt, l2NormSquaredMaxIndex, tmp1, VariableDeclarationStatement(), int, tmp2, p, minor, ExpressionStatement(), p, minor, p, l2NormSquaredMaxIndex, ExpressionStatement(), p, l2NormSquaredMaxIndex, tmp2, ExpressionStatement(), super, performHouseholderReflection, minor, qrt]
org.apache.commons.math4.linear:RRQRDecomposition:getP:null#[IfStatement(if), cachedP, null, VariableDeclarationStatement(), int, n, p.length, ExpressionStatement(), cachedP, MatrixUtils, createRealMatrix, n, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), cachedP, setEntry, p, i, i, 1, ReturnStatement(return), cachedP]
org.apache.commons.math4.linear:RRQRDecomposition:getRank:double#[VariableDeclarationStatement(), RealMatrix, r, getR, VariableDeclarationStatement(), int, rows, r, getRowDimension, VariableDeclarationStatement(), int, columns, r, getColumnDimension, VariableDeclarationStatement(), int, rank, 1, VariableDeclarationStatement(), double, lastNorm, r, getFrobeniusNorm, VariableDeclarationStatement(), double, rNorm, lastNorm, WhileStatement(while), rank, FastMath, min, rows, columns, VariableDeclarationStatement(), double, thisNorm, r, getSubMatrix, rank, rows, 1, rank, columns, 1, getFrobeniusNorm, IfStatement(if), thisNorm, 0, thisNorm, lastNorm, rNorm, dropThreshold, BreakStatement(break), ExpressionStatement(), lastNorm, thisNorm, ExpressionStatement(), rank, ReturnStatement(return), rank]
org.apache.commons.math4.linear:RRQRDecomposition:getSolver:null#[ReturnStatement(return), new, Solver, super, getSolver, this, getP]
org.apache.commons.math4.linear:SchurTransformer:getP:null#[IfStatement(if), cachedP, null, ExpressionStatement(), cachedP, MatrixUtils, createRealMatrix, matrixP, ReturnStatement(return), cachedP]
org.apache.commons.math4.linear:SchurTransformer:getPT:null#[IfStatement(if), cachedPt, null, ExpressionStatement(), cachedPt, getP, transpose, ReturnStatement(return), cachedPt]
org.apache.commons.math4.linear:SchurTransformer:getT:null#[IfStatement(if), cachedT, null, ExpressionStatement(), cachedT, MatrixUtils, createRealMatrix, matrixT, ReturnStatement(return), cachedT]
org.apache.commons.math4.linear:SchurTransformer:transform:null#[VariableDeclarationStatement(), final, int, n, matrixT.length, VariableDeclarationStatement(), final, double, norm, getNorm, VariableDeclarationStatement(), final, ShiftInfo, shift, new, ShiftInfo, VariableDeclarationStatement(), int, iteration, 0, VariableDeclarationStatement(), int, iu, n, 1, WhileStatement(while), iu, 0, VariableDeclarationStatement(), final, int, il, findSmallSubDiagonalElement, iu, norm, IfStatement(if), il, iu, ExpressionStatement(), matrixT, iu, iu, shift.exShift, ExpressionStatement(), iu, ExpressionStatement(), iteration, 0, IfStatement(if), il, iu, 1, VariableDeclarationStatement(), double, p, matrixT, iu, 1, iu, 1, matrixT, iu, iu, 2.0, VariableDeclarationStatement(), double, q, p, p, matrixT, iu, iu, 1, matrixT, iu, 1, iu, ExpressionStatement(), matrixT, iu, iu, shift.exShift, ExpressionStatement(), matrixT, iu, 1, iu, 1, shift.exShift, IfStatement(if), q, 0, VariableDeclarationStatement(), double, z, FastMath, sqrt, FastMath, abs, q, IfStatement(if), p, 0, ExpressionStatement(), z, p, z, ExpressionStatement(), z, p, z, VariableDeclarationStatement(), final, double, x, matrixT, iu, iu, 1, VariableDeclarationStatement(), final, double, s, FastMath, abs, x, FastMath, abs, z, ExpressionStatement(), p, x, s, ExpressionStatement(), q, z, s, VariableDeclarationStatement(), final, double, r, FastMath, sqrt, p, p, q, q, ExpressionStatement(), p, r, ExpressionStatement(), q, r, ForStatement(for), int, j, iu, 1, j, n, j, ExpressionStatement(), z, matrixT, iu, 1, j, ExpressionStatement(), matrixT, iu, 1, j, q, z, p, matrixT, iu, j, ExpressionStatement(), matrixT, iu, j, q, matrixT, iu, j, p, z, ForStatement(for), int, i, 0, i, iu, i, ExpressionStatement(), z, matrixT, i, iu, 1, ExpressionStatement(), matrixT, i, iu, 1, q, z, p, matrixT, i, iu, ExpressionStatement(), matrixT, i, iu, q, matrixT, i, iu, p, z, ForStatement(for), int, i, 0, i, n, 1, i, ExpressionStatement(), z, matrixP, i, iu, 1, ExpressionStatement(), matrixP, i, iu, 1, q, z, p, matrixP, i, iu, ExpressionStatement(), matrixP, i, iu, q, matrixP, i, iu, p, z, ExpressionStatement(), iu, 2, ExpressionStatement(), iteration, 0, ExpressionStatement(), computeShift, il, iu, iteration, shift, IfStatement(if), iteration, MAX_ITERATIONS, ThrowStatement(throw), new, MaxCountExceededException, LocalizedFormats.CONVERGENCE_FAILED, MAX_ITERATIONS, VariableDeclarationStatement(), final, double, hVec, double, 3, VariableDeclarationStatement(), final, int, im, initQRStep, il, iu, shift, hVec, ExpressionStatement(), performDoubleQRStep, il, im, iu, shift, hVec]
org.apache.commons.math4.linear:SchurTransformer:getNorm:null#[VariableDeclarationStatement(), double, norm, 0.0, ForStatement(for), int, i, 0, i, matrixT.length, i, ForStatement(for), int, j, FastMath, max, i, 1, 0, j, matrixT.length, j, ExpressionStatement(), norm, FastMath, abs, matrixT, i, j, ReturnStatement(return), norm]
org.apache.commons.math4.linear:SchurTransformer:findSmallSubDiagonalElement:int+double#[VariableDeclarationStatement(), int, l, startIdx, WhileStatement(while), l, 0, VariableDeclarationStatement(), double, s, FastMath, abs, matrixT, l, 1, l, 1, FastMath, abs, matrixT, l, l, IfStatement(if), s, 0.0, ExpressionStatement(), s, norm, IfStatement(if), FastMath, abs, matrixT, l, l, 1, epsilon, s, BreakStatement(break), ExpressionStatement(), l, ReturnStatement(return), l]
org.apache.commons.math4.linear:SchurTransformer:computeShift:int+int+int+ShiftInfo#[ExpressionStatement(), shift.x, matrixT, idx, idx, ExpressionStatement(), shift.y, shift.w, 0.0, IfStatement(if), l, idx, ExpressionStatement(), shift.y, matrixT, idx, 1, idx, 1, ExpressionStatement(), shift.w, matrixT, idx, idx, 1, matrixT, idx, 1, idx, IfStatement(if), iteration, 10, ExpressionStatement(), shift.exShift, shift.x, ForStatement(for), int, i, 0, i, idx, i, ExpressionStatement(), matrixT, i, i, shift.x, VariableDeclarationStatement(), final, double, s, FastMath, abs, matrixT, idx, idx, 1, FastMath, abs, matrixT, idx, 1, idx, 2, ExpressionStatement(), shift.x, 0.75, s, ExpressionStatement(), shift.y, 0.75, s, ExpressionStatement(), shift.w, 0.4375, s, s, IfStatement(if), iteration, 30, VariableDeclarationStatement(), double, s, shift.y, shift.x, 2.0, ExpressionStatement(), s, s, s, shift.w, IfStatement(if), s, 0.0, ExpressionStatement(), s, FastMath, sqrt, s, IfStatement(if), shift.y, shift.x, ExpressionStatement(), s, s, ExpressionStatement(), s, shift.x, shift.w, shift.y, shift.x, 2.0, s, ForStatement(for), int, i, 0, i, idx, i, ExpressionStatement(), matrixT, i, i, s, ExpressionStatement(), shift.exShift, s, ExpressionStatement(), shift.x, shift.y, shift.w, 0.964]
org.apache.commons.math4.linear:SchurTransformer:initQRStep:int+int+ShiftInfo+double[]#[VariableDeclarationStatement(), int, im, iu, 2, WhileStatement(while), im, il, VariableDeclarationStatement(), final, double, z, matrixT, im, im, VariableDeclarationStatement(), final, double, r, shift.x, z, VariableDeclarationStatement(), double, s, shift.y, z, ExpressionStatement(), hVec, 0, r, s, shift.w, matrixT, im, 1, im, matrixT, im, im, 1, ExpressionStatement(), hVec, 1, matrixT, im, 1, im, 1, z, r, s, ExpressionStatement(), hVec, 2, matrixT, im, 2, im, 1, IfStatement(if), im, il, BreakStatement(break), VariableDeclarationStatement(), final, double, lhs, FastMath, abs, matrixT, im, im, 1, FastMath, abs, hVec, 1, FastMath, abs, hVec, 2, VariableDeclarationStatement(), final, double, rhs, FastMath, abs, hVec, 0, FastMath, abs, matrixT, im, 1, im, 1, FastMath, abs, z, FastMath, abs, matrixT, im, 1, im, 1, IfStatement(if), lhs, epsilon, rhs, BreakStatement(break), ExpressionStatement(), im, ReturnStatement(return), im]
org.apache.commons.math4.linear:SchurTransformer:performDoubleQRStep:int+int+int+ShiftInfo+double[]#[VariableDeclarationStatement(), final, int, n, matrixT.length, VariableDeclarationStatement(), double, p, hVec, 0, VariableDeclarationStatement(), double, q, hVec, 1, VariableDeclarationStatement(), double, r, hVec, 2, ForStatement(for), int, k, im, k, iu, 1, k, VariableDeclarationStatement(), boolean, notlast, k, iu, 1, IfStatement(if), k, im, ExpressionStatement(), p, matrixT, k, k, 1, ExpressionStatement(), q, matrixT, k, 1, k, 1, ExpressionStatement(), r, notlast, matrixT, k, 2, k, 1, 0.0, ExpressionStatement(), shift.x, FastMath, abs, p, FastMath, abs, q, FastMath, abs, r, IfStatement(if), Precision, equals, shift.x, 0.0, epsilon, ContinueStatement(continue), ExpressionStatement(), p, shift.x, ExpressionStatement(), q, shift.x, ExpressionStatement(), r, shift.x, VariableDeclarationStatement(), double, s, FastMath, sqrt, p, p, q, q, r, r, IfStatement(if), p, 0.0, ExpressionStatement(), s, s, IfStatement(if), s, 0.0, IfStatement(if), k, im, ExpressionStatement(), matrixT, k, k, 1, s, shift.x, IfStatement(if), il, im, ExpressionStatement(), matrixT, k, k, 1, matrixT, k, k, 1, ExpressionStatement(), p, s, ExpressionStatement(), shift.x, p, s, ExpressionStatement(), shift.y, q, s, VariableDeclarationStatement(), double, z, r, s, ExpressionStatement(), q, p, ExpressionStatement(), r, p, ForStatement(for), int, j, k, j, n, j, ExpressionStatement(), p, matrixT, k, j, q, matrixT, k, 1, j, IfStatement(if), notlast, ExpressionStatement(), p, r, matrixT, k, 2, j, ExpressionStatement(), matrixT, k, 2, j, p, z, ExpressionStatement(), matrixT, k, j, p, shift.x, ExpressionStatement(), matrixT, k, 1, j, p, shift.y, ForStatement(for), int, i, 0, i, FastMath, min, iu, k, 3, i, ExpressionStatement(), p, shift.x, matrixT, i, k, shift.y, matrixT, i, k, 1, IfStatement(if), notlast, ExpressionStatement(), p, z, matrixT, i, k, 2, ExpressionStatement(), matrixT, i, k, 2, p, r, ExpressionStatement(), matrixT, i, k, p, ExpressionStatement(), matrixT, i, k, 1, p, q, VariableDeclarationStatement(), final, int, high, matrixT.length, 1, ForStatement(for), int, i, 0, i, high, i, ExpressionStatement(), p, shift.x, matrixP, i, k, shift.y, matrixP, i, k, 1, IfStatement(if), notlast, ExpressionStatement(), p, z, matrixP, i, k, 2, ExpressionStatement(), matrixP, i, k, 2, p, r, ExpressionStatement(), matrixP, i, k, p, ExpressionStatement(), matrixP, i, k, 1, p, q, ForStatement(for), int, i, im, 2, i, iu, i, ExpressionStatement(), matrixT, i, i, 2, 0.0, IfStatement(if), i, im, 2, ExpressionStatement(), matrixT, i, i, 3, 0.0]
org.apache.commons.math4.linear:SingularValueDecomposition:getU:null#[ReturnStatement(return), cachedU]
org.apache.commons.math4.linear:SingularValueDecomposition:getUT:null#[IfStatement(if), cachedUt, null, ExpressionStatement(), cachedUt, getU, transpose, ReturnStatement(return), cachedUt]
org.apache.commons.math4.linear:SingularValueDecomposition:getS:null#[IfStatement(if), cachedS, null, ExpressionStatement(), cachedS, MatrixUtils, createRealDiagonalMatrix, singularValues, ReturnStatement(return), cachedS]
org.apache.commons.math4.linear:SingularValueDecomposition:getSingularValues:null#[ReturnStatement(return), singularValues, clone]
org.apache.commons.math4.linear:SingularValueDecomposition:getV:null#[ReturnStatement(return), cachedV]
org.apache.commons.math4.linear:SingularValueDecomposition:getVT:null#[IfStatement(if), cachedVt, null, ExpressionStatement(), cachedVt, getV, transpose, ReturnStatement(return), cachedVt]
org.apache.commons.math4.linear:SingularValueDecomposition:getCovariance:double#[VariableDeclarationStatement(), final, int, p, singularValues.length, VariableDeclarationStatement(), int, dimension, 0, WhileStatement(while), dimension, p, singularValues, dimension, minSingularValue, ExpressionStatement(), dimension, IfStatement(if), dimension, 0, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.TOO_LARGE_CUTOFF_SINGULAR_VALUE, minSingularValue, singularValues, 0, true, VariableDeclarationStatement(), final, double, data, double, dimension, p, ExpressionStatement(), getVT, walkInOptimizedOrder, new, DefaultRealMatrixPreservingVisitor, Override, public, void, visit, final, int, row, final, int, column, final, double, value, ExpressionStatement(), data, row, column, value, singularValues, row, 0, dimension, 1, 0, p, 1, VariableDeclarationStatement(), RealMatrix, jv, new, Array2DRowRealMatrix, data, false, ReturnStatement(return), jv, transpose, multiply, jv]
org.apache.commons.math4.linear:SingularValueDecomposition:getNorm:null#[ReturnStatement(return), singularValues, 0]
org.apache.commons.math4.linear:SingularValueDecomposition:getConditionNumber:null#[ReturnStatement(return), singularValues, 0, singularValues, n, 1]
org.apache.commons.math4.linear:SingularValueDecomposition:getInverseConditionNumber:null#[ReturnStatement(return), singularValues, n, 1, singularValues, 0]
org.apache.commons.math4.linear:SingularValueDecomposition:getRank:null#[VariableDeclarationStatement(), int, r, 0, ForStatement(for), int, i, 0, i, singularValues.length, i, IfStatement(if), singularValues, i, tol, ExpressionStatement(), r, ReturnStatement(return), r]
org.apache.commons.math4.linear:SingularValueDecomposition:getSolver:null#[ReturnStatement(return), new, Solver, singularValues, getUT, getV, getRank, m, tol]
org.apache.commons.math4.linear:SparseFieldMatrix:addToEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, key, computeKey, row, column, VariableDeclarationStatement(), final, T, value, entries, get, key, add, increment, IfStatement(if), getField, getZero, equals, value, ExpressionStatement(), entries, remove, key, ExpressionStatement(), entries, put, key, value]
org.apache.commons.math4.linear:SparseFieldMatrix:copy:null#[ReturnStatement(return), new, SparseFieldMatrix, T, this]
org.apache.commons.math4.linear:SparseFieldMatrix:createMatrix:int+int#[ReturnStatement(return), new, SparseFieldMatrix, T, getField, rowDimension, columnDimension]
org.apache.commons.math4.linear:SparseFieldMatrix:getColumnDimension:null#[ReturnStatement(return), columns]
org.apache.commons.math4.linear:SparseFieldMatrix:getEntry:int+int#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, ReturnStatement(return), entries, get, computeKey, row, column]
org.apache.commons.math4.linear:SparseFieldMatrix:getRowDimension:null#[ReturnStatement(return), rows]
org.apache.commons.math4.linear:SparseFieldMatrix:multiplyEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, VariableDeclarationStatement(), final, int, key, computeKey, row, column, VariableDeclarationStatement(), final, T, value, entries, get, key, multiply, factor, IfStatement(if), getField, getZero, equals, value, ExpressionStatement(), entries, remove, key, ExpressionStatement(), entries, put, key, value]
org.apache.commons.math4.linear:SparseFieldMatrix:setEntry:int+int+T#[ExpressionStatement(), checkRowIndex, row, ExpressionStatement(), checkColumnIndex, column, IfStatement(if), getField, getZero, equals, value, ExpressionStatement(), entries, remove, computeKey, row, column, ExpressionStatement(), entries, put, computeKey, row, column, value]
org.apache.commons.math4.linear:SparseFieldMatrix:computeKey:int+int#[ReturnStatement(return), row, columns, column]
org.apache.commons.math4.linear:SparseFieldVector:getEntries:null#[ReturnStatement(return), entries]
org.apache.commons.math4.linear:SparseFieldVector:add:SparseFieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), SparseFieldVector, T, res, SparseFieldVector, T, copy, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, v, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, VariableDeclarationStatement(), T, value, iter, value, IfStatement(if), entries, containsKey, key, ExpressionStatement(), res, setEntry, key, entries, get, key, add, value, ExpressionStatement(), res, setEntry, key, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:append:SparseFieldVector<T>#[VariableDeclarationStatement(), SparseFieldVector, T, res, new, SparseFieldVector, T, this, v, getDimension, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, v.entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, setEntry, iter, key, virtualSize, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:append:FieldVector<T>#[IfStatement(if), instanceof, v, SparseFieldVector, ReturnStatement(return), append, SparseFieldVector, T, v, VariableDeclarationStatement(), final, int, n, v, getDimension, VariableDeclarationStatement(), FieldVector, T, res, new, SparseFieldVector, T, this, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), res, setEntry, i, virtualSize, v, getEntry, i, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:append:T#[ExpressionStatement(), MathUtils, checkNotNull, d, VariableDeclarationStatement(), FieldVector, T, res, new, SparseFieldVector, T, this, 1, ExpressionStatement(), res, setEntry, virtualSize, d, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:copy:null#[ReturnStatement(return), new, SparseFieldVector, T, this]
org.apache.commons.math4.linear:SparseFieldVector:dotProduct:FieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), T, res, field, getZero, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, res, add, v, getEntry, iter, key, multiply, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:ebeDivide:FieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), SparseFieldVector, T, res, new, SparseFieldVector, T, this, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, res.entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, setEntry, iter, key, iter, value, divide, v, getEntry, iter, key, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:ebeMultiply:FieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), SparseFieldVector, T, res, new, SparseFieldVector, T, this, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, res.entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, setEntry, iter, key, iter, value, multiply, v, getEntry, iter, key, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:getDimension:null#[ReturnStatement(return), virtualSize]
org.apache.commons.math4.linear:SparseFieldVector:getEntry:int#[ExpressionStatement(), checkIndex, index, ReturnStatement(return), entries, get, index]
org.apache.commons.math4.linear:SparseFieldVector:getField:null#[ReturnStatement(return), field]
org.apache.commons.math4.linear:SparseFieldVector:getSubVector:int+int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n, ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, n, 1, VariableDeclarationStatement(), SparseFieldVector, T, res, new, SparseFieldVector, T, field, n, VariableDeclarationStatement(), int, end, index, n, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), key, index, key, end, ExpressionStatement(), res, setEntry, key, index, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:mapAdd:T#[ReturnStatement(return), copy, mapAddToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapAddToSelf:T#[ForStatement(for), int, i, 0, i, virtualSize, i, ExpressionStatement(), setEntry, i, getEntry, i, add, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:SparseFieldVector:mapDivide:T#[ReturnStatement(return), copy, mapDivideToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapDivideToSelf:T#[VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), entries, put, iter, key, iter, value, divide, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:SparseFieldVector:mapInv:null#[ReturnStatement(return), copy, mapInvToSelf]
org.apache.commons.math4.linear:SparseFieldVector:mapInvToSelf:null#[ForStatement(for), int, i, 0, i, virtualSize, i, ExpressionStatement(), setEntry, i, field, getOne, divide, getEntry, i, ReturnStatement(return), this]
org.apache.commons.math4.linear:SparseFieldVector:mapMultiply:T#[ReturnStatement(return), copy, mapMultiplyToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapMultiplyToSelf:T#[VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), entries, put, iter, key, iter, value, multiply, d, ReturnStatement(return), this]
org.apache.commons.math4.linear:SparseFieldVector:mapSubtract:T#[ReturnStatement(return), copy, mapSubtractToSelf, d]
org.apache.commons.math4.linear:SparseFieldVector:mapSubtractToSelf:T#[ReturnStatement(return), mapAddToSelf, field, getZero, subtract, d]
org.apache.commons.math4.linear:SparseFieldVector:outerProduct:SparseFieldVector<T>#[VariableDeclarationStatement(), final, int, n, v, getDimension, VariableDeclarationStatement(), SparseFieldMatrix, T, res, new, SparseFieldMatrix, T, field, virtualSize, n, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter2, v.entries, iterator, WhileStatement(while), iter2, hasNext, ExpressionStatement(), iter2, advance, ExpressionStatement(), res, setEntry, iter, key, iter2, key, iter, value, multiply, iter2, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:outerProduct:FieldVector<T>#[IfStatement(if), instanceof, v, SparseFieldVector, ReturnStatement(return), outerProduct, SparseFieldVector, T, v, VariableDeclarationStatement(), final, int, n, v, getDimension, VariableDeclarationStatement(), FieldMatrix, T, res, new, SparseFieldMatrix, T, field, virtualSize, n, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, row, iter, key, VariableDeclarationStatement(), FieldElement, T, value, iter, value, ForStatement(for), int, col, 0, col, n, col, ExpressionStatement(), res, setEntry, row, col, value, multiply, v, getEntry, col, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:projection:FieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v, getDimension, ReturnStatement(return), v, mapMultiply, dotProduct, v, divide, v, dotProduct, v]
org.apache.commons.math4.linear:SparseFieldVector:set:T#[ExpressionStatement(), MathUtils, checkNotNull, value, ForStatement(for), int, i, 0, i, virtualSize, i, ExpressionStatement(), setEntry, i, value]
org.apache.commons.math4.linear:SparseFieldVector:setEntry:int+T#[ExpressionStatement(), MathUtils, checkNotNull, value, ExpressionStatement(), checkIndex, index, ExpressionStatement(), entries, put, index, value]
org.apache.commons.math4.linear:SparseFieldVector:setSubVector:int+FieldVector<T>#[ExpressionStatement(), checkIndex, index, ExpressionStatement(), checkIndex, index, v, getDimension, 1, VariableDeclarationStatement(), final, int, n, v, getDimension, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), setEntry, i, index, v, getEntry, i]
org.apache.commons.math4.linear:SparseFieldVector:subtract:SparseFieldVector<T>#[ExpressionStatement(), checkVectorDimensions, v, getDimension, VariableDeclarationStatement(), SparseFieldVector, T, res, SparseFieldVector, T, copy, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, v, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, key, iter, key, IfStatement(if), entries, containsKey, key, ExpressionStatement(), res, setEntry, key, entries, get, key, subtract, iter, value, ExpressionStatement(), res, setEntry, key, field, getZero, subtract, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:subtract:FieldVector<T>#[IfStatement(if), instanceof, v, SparseFieldVector, ReturnStatement(return), subtract, SparseFieldVector, T, v, VariableDeclarationStatement(), final, int, n, v, getDimension, ExpressionStatement(), checkVectorDimensions, n, VariableDeclarationStatement(), SparseFieldVector, T, res, new, SparseFieldVector, T, this, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), entries, containsKey, i, ExpressionStatement(), res, setEntry, i, entries, get, i, subtract, v, getEntry, i, ExpressionStatement(), res, setEntry, i, field, getZero, subtract, v, getEntry, i, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:toArray:null#[VariableDeclarationStatement(), T, res, MathArrays, buildArray, field, virtualSize, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, ExpressionStatement(), res, iter, key, iter, value, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:checkIndex:int#[IfStatement(if), index, 0, index, getDimension, ThrowStatement(throw), new, OutOfRangeException, index, 0, getDimension, 1]
org.apache.commons.math4.linear:SparseFieldVector:checkIndices:int+int#[VariableDeclarationStatement(), final, int, dim, getDimension, IfStatement(if), start, 0, start, dim, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, start, 0, dim, 1, IfStatement(if), end, 0, end, dim, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.INDEX, end, 0, dim, 1, IfStatement(if), end, start, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false]
org.apache.commons.math4.linear:SparseFieldVector:checkVectorDimensions:int#[IfStatement(if), getDimension, n, ThrowStatement(throw), new, DimensionMismatchException, getDimension, n]
org.apache.commons.math4.linear:SparseFieldVector:add:FieldVector<T>#[IfStatement(if), instanceof, v, SparseFieldVector, ReturnStatement(return), add, SparseFieldVector, T, v, VariableDeclarationStatement(), final, int, n, v, getDimension, ExpressionStatement(), checkVectorDimensions, n, VariableDeclarationStatement(), SparseFieldVector, T, res, new, SparseFieldVector, T, field, getDimension, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), res, setEntry, i, v, getEntry, i, add, getEntry, i, ReturnStatement(return), res]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>#[VariableDeclarationStatement(), final, int, dim, getDimension, ExpressionStatement(), visitor, start, dim, 0, dim, 1, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorPreservingVisitor<T>+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, getDimension, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorPreservingVisitor<T>+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>#[VariableDeclarationStatement(), final, int, dim, getDimension, ExpressionStatement(), visitor, start, dim, 0, dim, 1, ForStatement(for), int, i, 0, i, dim, i, ExpressionStatement(), setEntry, i, visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInDefaultOrder:FieldVectorChangingVisitor<T>+int+int#[ExpressionStatement(), checkIndices, start, end, ExpressionStatement(), visitor, start, getDimension, start, end, ForStatement(for), int, i, start, i, end, i, ExpressionStatement(), setEntry, i, visitor, visit, i, getEntry, i, ReturnStatement(return), visitor, end]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>#[ReturnStatement(return), walkInDefaultOrder, visitor]
org.apache.commons.math4.linear:SparseFieldVector:walkInOptimizedOrder:FieldVectorChangingVisitor<T>+int+int#[ReturnStatement(return), walkInDefaultOrder, visitor, start, end]
org.apache.commons.math4.linear:SparseFieldVector:hashCode:null#[VariableDeclarationStatement(), final, int, prime, 31, VariableDeclarationStatement(), int, result, 1, ExpressionStatement(), result, prime, result, field, null, 0, field, hashCode, ExpressionStatement(), result, prime, result, virtualSize, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), int, temp, iter, value, hashCode, ExpressionStatement(), result, prime, result, temp, ReturnStatement(return), result]
org.apache.commons.math4.linear:SparseFieldVector:equals:Object#[IfStatement(if), this, obj, ReturnStatement(return), true, IfStatement(if), instanceof, obj, SparseFieldVector, ReturnStatement(return), false, VariableDeclarationStatement(), SuppressWarnings, "unchecked", SparseFieldVector, T, other, SparseFieldVector, T, obj, IfStatement(if), field, null, IfStatement(if), other.field, null, ReturnStatement(return), false, IfStatement(if), field, equals, other.field, ReturnStatement(return), false, IfStatement(if), virtualSize, other.virtualSize, ReturnStatement(return), false, VariableDeclarationStatement(), OpenIntToFieldHashMap, T, Iterator, iter, entries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), T, test, other, getEntry, iter, key, IfStatement(if), test, equals, iter, value, ReturnStatement(return), false, ExpressionStatement(), iter, other, getEntries, iterator, WhileStatement(while), iter, hasNext, ExpressionStatement(), iter, advance, VariableDeclarationStatement(), T, test, iter, value, IfStatement(if), test, equals, getEntry, iter, key, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.linear:SymmLQ:getCheck:null#[ReturnStatement(return), check]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealLinearOperator+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, a, VariableDeclarationStatement(), final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, ReturnStatement(return), solveInPlace, a, m, b, x, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealLinearOperator+RealVector+boolean+double#[ExpressionStatement(), MathUtils, checkNotNull, a, VariableDeclarationStatement(), final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, ReturnStatement(return), solveInPlace, a, m, b, x, goodb, shift]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, x, ReturnStatement(return), solveInPlace, a, m, b, x, copy, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, a, VariableDeclarationStatement(), final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, ExpressionStatement(), x, set, 0., ReturnStatement(return), solveInPlace, a, null, b, x, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealVector+boolean+double#[ExpressionStatement(), MathUtils, checkNotNull, a, VariableDeclarationStatement(), final, RealVector, x, new, ArrayRealVector, a, getColumnDimension, ReturnStatement(return), solveInPlace, a, null, b, x, goodb, shift]
org.apache.commons.math4.linear:SymmLQ:solve:RealLinearOperator+RealVector+RealVector#[ExpressionStatement(), MathUtils, checkNotNull, x, ReturnStatement(return), solveInPlace, a, null, b, x, copy, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solveInPlace:RealLinearOperator+RealLinearOperator+RealVector+RealVector#[ReturnStatement(return), solveInPlace, a, m, b, x, false, 0.]
org.apache.commons.math4.linear:SymmLQ:solveInPlace:RealLinearOperator+RealLinearOperator+RealVector+RealVector+boolean+double#[ExpressionStatement(), checkParameters, a, m, b, x, VariableDeclarationStatement(), final, IterationManager, manager, getIterationManager, ExpressionStatement(), manager, resetIterationCount, ExpressionStatement(), manager, incrementIterationCount, VariableDeclarationStatement(), final, State, state, ExpressionStatement(), state, new, State, a, m, b, goodb, shift, delta, check, ExpressionStatement(), state, init, ExpressionStatement(), state, refineSolution, x, VariableDeclarationStatement(), IterativeLinearSolverEvent, event, ExpressionStatement(), event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, IfStatement(if), state, bEqualsNullVector, ExpressionStatement(), manager, fireTerminationEvent, event, ReturnStatement(return), x, VariableDeclarationStatement(), final, boolean, earlyStop, ExpressionStatement(), earlyStop, state, betaEqualsZero, state, hasConverged, ExpressionStatement(), manager, fireInitializationEvent, event, IfStatement(if), earlyStop, DoStatement(do), ExpressionStatement(), manager, incrementIterationCount, ExpressionStatement(), event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, ExpressionStatement(), manager, fireIterationStartedEvent, event, ExpressionStatement(), state, update, ExpressionStatement(), state, refineSolution, x, ExpressionStatement(), event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, ExpressionStatement(), manager, fireIterationPerformedEvent, event, state, hasConverged, ExpressionStatement(), event, new, DefaultIterativeLinearSolverEvent, this, manager, getIterations, x, b, state, getNormOfResidual, ExpressionStatement(), manager, fireTerminationEvent, event, ReturnStatement(return), x]
org.apache.commons.math4.linear:SymmLQ:solveInPlace:RealLinearOperator+RealVector+RealVector#[ReturnStatement(return), solveInPlace, a, null, b, x, false, 0.]
org.apache.commons.math4.linear:TriDiagonalTransformer:getQ:null#[IfStatement(if), cachedQ, null, ExpressionStatement(), cachedQ, getQT, transpose, ReturnStatement(return), cachedQ]
org.apache.commons.math4.linear:TriDiagonalTransformer:getQT:null#[IfStatement(if), cachedQt, null, VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), double, qta, double, m, m, ForStatement(for), int, k, m, 1, k, 1, k, VariableDeclarationStatement(), final, double, hK, householderVectors, k, 1, ExpressionStatement(), qta, k, k, 1, IfStatement(if), hK, k, 0.0, VariableDeclarationStatement(), final, double, inv, 1.0, secondary, k, 1, hK, k, VariableDeclarationStatement(), double, beta, 1.0, secondary, k, 1, ExpressionStatement(), qta, k, k, 1, beta, hK, k, ForStatement(for), int, i, k, 1, i, m, i, ExpressionStatement(), qta, k, i, beta, hK, i, ForStatement(for), int, j, k, 1, j, m, j, ExpressionStatement(), beta, 0, ForStatement(for), int, i, k, 1, i, m, i, ExpressionStatement(), beta, qta, j, i, hK, i, ExpressionStatement(), beta, inv, ExpressionStatement(), qta, j, k, beta, hK, k, ForStatement(for), int, i, k, 1, i, m, i, ExpressionStatement(), qta, j, i, beta, hK, i, ExpressionStatement(), qta, 0, 0, 1, ExpressionStatement(), cachedQt, MatrixUtils, createRealMatrix, qta, ReturnStatement(return), cachedQt]
org.apache.commons.math4.linear:TriDiagonalTransformer:getT:null#[IfStatement(if), cachedT, null, VariableDeclarationStatement(), final, int, m, main.length, VariableDeclarationStatement(), double, ta, double, m, m, ForStatement(for), int, i, 0, i, m, i, ExpressionStatement(), ta, i, i, main, i, IfStatement(if), i, 0, ExpressionStatement(), ta, i, i, 1, secondary, i, 1, IfStatement(if), i, main.length, 1, ExpressionStatement(), ta, i, i, 1, secondary, i, ExpressionStatement(), cachedT, MatrixUtils, createRealMatrix, ta, ReturnStatement(return), cachedT]
org.apache.commons.math4.linear:TriDiagonalTransformer:getHouseholderVectorsRef:null#[ReturnStatement(return), householderVectors]
org.apache.commons.math4.linear:TriDiagonalTransformer:getMainDiagonalRef:null#[ReturnStatement(return), main]
org.apache.commons.math4.linear:TriDiagonalTransformer:getSecondaryDiagonalRef:null#[ReturnStatement(return), secondary]
org.apache.commons.math4.linear:TriDiagonalTransformer:transform:null#[VariableDeclarationStatement(), final, int, m, householderVectors.length, VariableDeclarationStatement(), final, double, z, double, m, ForStatement(for), int, k, 0, k, m, 1, k, VariableDeclarationStatement(), final, double, hK, householderVectors, k, ExpressionStatement(), main, k, hK, k, VariableDeclarationStatement(), double, xNormSqr, 0, ForStatement(for), int, j, k, 1, j, m, j, VariableDeclarationStatement(), final, double, c, hK, j, ExpressionStatement(), xNormSqr, c, c, VariableDeclarationStatement(), final, double, a, hK, k, 1, 0, FastMath, sqrt, xNormSqr, FastMath, sqrt, xNormSqr, ExpressionStatement(), secondary, k, a, IfStatement(if), a, 0.0, ExpressionStatement(), hK, k, 1, a, VariableDeclarationStatement(), final, double, beta, 1, a, hK, k, 1, ExpressionStatement(), Arrays, fill, z, k, 1, m, 0, ForStatement(for), int, i, k, 1, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, VariableDeclarationStatement(), final, double, hKI, hK, i, VariableDeclarationStatement(), double, zI, hI, i, hKI, ForStatement(for), int, j, i, 1, j, m, j, VariableDeclarationStatement(), final, double, hIJ, hI, j, ExpressionStatement(), zI, hIJ, hK, j, ExpressionStatement(), z, j, hIJ, hKI, ExpressionStatement(), z, i, beta, z, i, zI, VariableDeclarationStatement(), double, gamma, 0, ForStatement(for), int, i, k, 1, i, m, i, ExpressionStatement(), gamma, z, i, hK, i, ExpressionStatement(), gamma, beta, 2, ForStatement(for), int, i, k, 1, i, m, i, ExpressionStatement(), z, i, gamma, hK, i, ForStatement(for), int, i, k, 1, i, m, i, VariableDeclarationStatement(), final, double, hI, householderVectors, i, ForStatement(for), int, j, i, j, m, j, ExpressionStatement(), hI, j, hK, i, z, j, z, i, hK, j, ExpressionStatement(), main, m, 1, householderVectors, m, 1, m, 1]
org.apache.commons.math4.ml.clustering:CentroidCluster:getCenter:null#[ReturnStatement(return), center]
org.apache.commons.math4.ml.clustering:Cluster:addPoint:T#[ExpressionStatement(), points, add, point]
org.apache.commons.math4.ml.clustering:Cluster:getPoints:null#[ReturnStatement(return), points]
org.apache.commons.math4.ml.clustering:Clusterer:getDistanceMeasure:null#[ReturnStatement(return), measure]
org.apache.commons.math4.ml.clustering:Clusterer:distance:Clusterable+Clusterable#[ReturnStatement(return), measure, compute, p1, getPoint, p2, getPoint]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:getEps:null#[ReturnStatement(return), eps]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:getMinPts:null#[ReturnStatement(return), minPts]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:cluster:Collection<T>#[ExpressionStatement(), MathUtils, checkNotNull, points, VariableDeclarationStatement(), final, List, Cluster, T, clusters, new, ArrayList, Cluster, T, VariableDeclarationStatement(), final, Map, Clusterable, PointStatus, visited, new, HashMap, Clusterable, PointStatus, EnhancedForStatement(for), final, T, point, points, IfStatement(if), visited, get, point, null, ContinueStatement(continue), VariableDeclarationStatement(), final, List, T, neighbors, getNeighbors, point, points, IfStatement(if), neighbors, size, minPts, VariableDeclarationStatement(), final, Cluster, T, cluster, new, Cluster, T, ExpressionStatement(), clusters, add, expandCluster, cluster, point, neighbors, points, visited, ExpressionStatement(), visited, put, point, PointStatus.NOISE, ReturnStatement(return), clusters]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:expandCluster:Cluster<T>+T+List<T>+Collection<T>+Map<Clusterable,PointStatus>#[ExpressionStatement(), cluster, addPoint, point, ExpressionStatement(), visited, put, point, PointStatus.PART_OF_CLUSTER, VariableDeclarationStatement(), List, T, seeds, new, ArrayList, T, neighbors, VariableDeclarationStatement(), int, index, 0, WhileStatement(while), index, seeds, size, VariableDeclarationStatement(), final, T, current, seeds, get, index, VariableDeclarationStatement(), PointStatus, pStatus, visited, get, current, IfStatement(if), pStatus, null, VariableDeclarationStatement(), final, List, T, currentNeighbors, getNeighbors, current, points, IfStatement(if), currentNeighbors, size, minPts, ExpressionStatement(), seeds, merge, seeds, currentNeighbors, IfStatement(if), pStatus, PointStatus.PART_OF_CLUSTER, ExpressionStatement(), visited, put, current, PointStatus.PART_OF_CLUSTER, ExpressionStatement(), cluster, addPoint, current, ExpressionStatement(), index, ReturnStatement(return), cluster]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:getNeighbors:T+Collection<T>#[VariableDeclarationStatement(), final, List, T, neighbors, new, ArrayList, T, EnhancedForStatement(for), final, T, neighbor, points, IfStatement(if), point, neighbor, distance, neighbor, point, eps, ExpressionStatement(), neighbors, add, neighbor, ReturnStatement(return), neighbors]
org.apache.commons.math4.ml.clustering:DBSCANClusterer:merge:List<T>+List<T>#[VariableDeclarationStatement(), final, Set, T, oneSet, new, HashSet, T, one, EnhancedForStatement(for), T, item, two, IfStatement(if), oneSet, contains, item, ExpressionStatement(), one, add, item, ReturnStatement(return), one]
org.apache.commons.math4.ml.clustering:DoublePoint:getPoint:null#[ReturnStatement(return), point]
org.apache.commons.math4.ml.clustering:DoublePoint:equals:Object#[IfStatement(if), instanceof, other, DoublePoint, ReturnStatement(return), false, ReturnStatement(return), Arrays, equals, point, DoublePoint, other, point]
org.apache.commons.math4.ml.clustering:DoublePoint:hashCode:null#[ReturnStatement(return), Arrays, hashCode, point]
org.apache.commons.math4.ml.clustering:DoublePoint:toString:null#[ReturnStatement(return), Arrays, toString, point]
org.apache.commons.math4.ml.clustering.evaluation:ClusterEvaluator:isBetterScore:double+double#[ReturnStatement(return), score1, score2]
org.apache.commons.math4.ml.clustering.evaluation:ClusterEvaluator:distance:Clusterable+Clusterable#[ReturnStatement(return), measure, compute, p1, getPoint, p2, getPoint]
org.apache.commons.math4.ml.clustering.evaluation:ClusterEvaluator:centroidOf:Cluster<T>#[VariableDeclarationStatement(), final, List, T, points, cluster, getPoints, IfStatement(if), points, isEmpty, ReturnStatement(return), null, IfStatement(if), instanceof, cluster, CentroidCluster, ReturnStatement(return), CentroidCluster, T, cluster, getCenter, VariableDeclarationStatement(), final, int, dimension, points, get, 0, getPoint, length, VariableDeclarationStatement(), final, double, centroid, double, dimension, EnhancedForStatement(for), final, T, p, points, VariableDeclarationStatement(), final, double, point, p, getPoint, ForStatement(for), int, i, 0, i, centroid.length, i, ExpressionStatement(), centroid, i, point, i, ForStatement(for), int, i, 0, i, centroid.length, i, ExpressionStatement(), centroid, i, points, size, ReturnStatement(return), new, DoublePoint, centroid]
org.apache.commons.math4.ml.clustering.evaluation:SumOfClusterVariances:score:Cluster<T>>#[VariableDeclarationStatement(), double, varianceSum, 0.0, EnhancedForStatement(for), final, Cluster, T, cluster, clusters, IfStatement(if), cluster, getPoints, isEmpty, VariableDeclarationStatement(), final, Clusterable, center, centroidOf, cluster, VariableDeclarationStatement(), final, Variance, stat, new, Variance, EnhancedForStatement(for), final, T, point, cluster, getPoints, ExpressionStatement(), stat, increment, distance, point, center, ExpressionStatement(), varianceSum, stat, getResult, ReturnStatement(return), varianceSum]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getK:null#[ReturnStatement(return), k]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getFuzziness:null#[ReturnStatement(return), fuzziness]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getMaxIterations:null#[ReturnStatement(return), maxIterations]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getEpsilon:null#[ReturnStatement(return), epsilon]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getRandomGenerator:null#[ReturnStatement(return), random]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getMembershipMatrix:null#[IfStatement(if), membershipMatrix, null, ThrowStatement(throw), new, MathIllegalStateException, ReturnStatement(return), MatrixUtils, createRealMatrix, membershipMatrix]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getDataPoints:null#[ReturnStatement(return), points]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getClusters:null#[ReturnStatement(return), clusters]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:getObjectiveFunctionValue:null#[IfStatement(if), points, null, clusters, null, ThrowStatement(throw), new, MathIllegalStateException, VariableDeclarationStatement(), int, i, 0, VariableDeclarationStatement(), double, objFunction, 0.0, EnhancedForStatement(for), final, T, point, points, VariableDeclarationStatement(), int, j, 0, EnhancedForStatement(for), final, CentroidCluster, T, cluster, clusters, VariableDeclarationStatement(), final, double, dist, distance, point, cluster, getCenter, ExpressionStatement(), objFunction, dist, dist, FastMath, pow, membershipMatrix, i, j, fuzziness, ExpressionStatement(), j, ExpressionStatement(), i, ReturnStatement(return), objFunction]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:cluster:Collection<T>#[ExpressionStatement(), MathUtils, checkNotNull, dataPoints, VariableDeclarationStatement(), final, int, size, dataPoints, size, IfStatement(if), size, k, ThrowStatement(throw), new, NumberIsTooSmallException, size, k, false, ExpressionStatement(), points, Collections, unmodifiableList, new, ArrayList, T, dataPoints, ExpressionStatement(), clusters, new, ArrayList, CentroidCluster, T, ExpressionStatement(), membershipMatrix, double, size, k, VariableDeclarationStatement(), final, double, oldMatrix, double, size, k, IfStatement(if), size, 0, ReturnStatement(return), clusters, ExpressionStatement(), initializeMembershipMatrix, VariableDeclarationStatement(), final, int, pointDimension, points, get, 0, getPoint, length, ForStatement(for), int, i, 0, i, k, i, ExpressionStatement(), clusters, add, new, CentroidCluster, T, new, DoublePoint, double, pointDimension, VariableDeclarationStatement(), int, iteration, 0, VariableDeclarationStatement(), final, int, max, maxIterations, 0, Integer.MAX_VALUE, maxIterations, VariableDeclarationStatement(), double, difference, 0.0, DoStatement(do), ExpressionStatement(), saveMembershipMatrix, oldMatrix, ExpressionStatement(), updateClusterCenters, ExpressionStatement(), updateMembershipMatrix, ExpressionStatement(), difference, calculateMaxMembershipChange, oldMatrix, difference, epsilon, iteration, max, ReturnStatement(return), clusters]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:updateClusterCenters:null#[VariableDeclarationStatement(), int, j, 0, VariableDeclarationStatement(), final, List, CentroidCluster, T, newClusters, new, ArrayList, CentroidCluster, T, k, EnhancedForStatement(for), final, CentroidCluster, T, cluster, clusters, VariableDeclarationStatement(), final, Clusterable, center, cluster, getCenter, VariableDeclarationStatement(), int, i, 0, VariableDeclarationStatement(), double, arr, double, center, getPoint, length, VariableDeclarationStatement(), double, sum, 0.0, EnhancedForStatement(for), final, T, point, points, VariableDeclarationStatement(), final, double, u, FastMath, pow, membershipMatrix, i, j, fuzziness, VariableDeclarationStatement(), final, double, pointArr, point, getPoint, ForStatement(for), int, idx, 0, idx, arr.length, idx, ExpressionStatement(), arr, idx, u, pointArr, idx, ExpressionStatement(), sum, u, ExpressionStatement(), i, ExpressionStatement(), MathArrays, scaleInPlace, 1.0, sum, arr, ExpressionStatement(), newClusters, add, new, CentroidCluster, T, new, DoublePoint, arr, ExpressionStatement(), j, ExpressionStatement(), clusters, clear, ExpressionStatement(), clusters, newClusters]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:updateMembershipMatrix:null#[ForStatement(for), int, i, 0, i, points, size, i, VariableDeclarationStatement(), final, T, point, points, get, i, VariableDeclarationStatement(), double, maxMembership, Double.MIN_VALUE, VariableDeclarationStatement(), int, newCluster, 1, ForStatement(for), int, j, 0, j, clusters, size, j, VariableDeclarationStatement(), double, sum, 0.0, VariableDeclarationStatement(), final, double, distA, FastMath, abs, distance, point, clusters, get, j, getCenter, IfStatement(if), distA, 0.0, EnhancedForStatement(for), final, CentroidCluster, T, c, clusters, VariableDeclarationStatement(), final, double, distB, FastMath, abs, distance, point, c, getCenter, IfStatement(if), distB, 0.0, ExpressionStatement(), sum, Double.POSITIVE_INFINITY, BreakStatement(break), ExpressionStatement(), sum, FastMath, pow, distA, distB, 2.0, fuzziness, 1.0, VariableDeclarationStatement(), double, membership, IfStatement(if), sum, 0.0, ExpressionStatement(), membership, 1.0, IfStatement(if), sum, Double.POSITIVE_INFINITY, ExpressionStatement(), membership, 0.0, ExpressionStatement(), membership, 1.0, sum, ExpressionStatement(), membershipMatrix, i, j, membership, IfStatement(if), membershipMatrix, i, j, maxMembership, ExpressionStatement(), maxMembership, membershipMatrix, i, j, ExpressionStatement(), newCluster, j, ExpressionStatement(), clusters, get, newCluster, addPoint, point]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:initializeMembershipMatrix:null#[ForStatement(for), int, i, 0, i, points, size, i, ForStatement(for), int, j, 0, j, k, j, ExpressionStatement(), membershipMatrix, i, j, random, nextDouble, ExpressionStatement(), membershipMatrix, i, MathArrays, normalizeArray, membershipMatrix, i, 1.0]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:calculateMaxMembershipChange:double[][]#[VariableDeclarationStatement(), double, maxMembership, 0.0, ForStatement(for), int, i, 0, i, points, size, i, ForStatement(for), int, j, 0, j, clusters, size, j, VariableDeclarationStatement(), double, v, FastMath, abs, membershipMatrix, i, j, matrix, i, j, ExpressionStatement(), maxMembership, FastMath, max, v, maxMembership, ReturnStatement(return), maxMembership]
org.apache.commons.math4.ml.clustering:FuzzyKMeansClusterer:saveMembershipMatrix:double[][]#[ForStatement(for), int, i, 0, i, points, size, i, ExpressionStatement(), System, arraycopy, membershipMatrix, i, 0, matrix, i, 0, clusters, size]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getK:null#[ReturnStatement(return), k]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getMaxIterations:null#[ReturnStatement(return), maxIterations]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getRandomGenerator:null#[ReturnStatement(return), random]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getEmptyClusterStrategy:null#[ReturnStatement(return), emptyStrategy]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:cluster:Collection<T>#[ExpressionStatement(), MathUtils, checkNotNull, points, IfStatement(if), points, size, k, ThrowStatement(throw), new, NumberIsTooSmallException, points, size, k, false, VariableDeclarationStatement(), List, CentroidCluster, T, clusters, chooseInitialCenters, points, VariableDeclarationStatement(), int, assignments, int, points, size, ExpressionStatement(), assignPointsToClusters, clusters, points, assignments, VariableDeclarationStatement(), final, int, max, maxIterations, 0, Integer.MAX_VALUE, maxIterations, ForStatement(for), int, count, 0, count, max, count, VariableDeclarationStatement(), boolean, emptyCluster, false, VariableDeclarationStatement(), List, CentroidCluster, T, newClusters, new, ArrayList, CentroidCluster, T, EnhancedForStatement(for), final, CentroidCluster, T, cluster, clusters, VariableDeclarationStatement(), final, Clusterable, newCenter, IfStatement(if), cluster, getPoints, isEmpty, SwitchStatement(switch), emptyStrategy, SwitchCase(case), LARGEST_VARIANCE, ExpressionStatement(), newCenter, getPointFromLargestVarianceCluster, clusters, BreakStatement(break), SwitchCase(case), LARGEST_POINTS_NUMBER, ExpressionStatement(), newCenter, getPointFromLargestNumberCluster, clusters, BreakStatement(break), SwitchCase(case), FARTHEST_POINT, ExpressionStatement(), newCenter, getFarthestPoint, clusters, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, ExpressionStatement(), emptyCluster, true, ExpressionStatement(), newCenter, centroidOf, cluster, getPoints, cluster, getCenter, getPoint, length, ExpressionStatement(), newClusters, add, new, CentroidCluster, T, newCenter, VariableDeclarationStatement(), int, changes, assignPointsToClusters, newClusters, points, assignments, ExpressionStatement(), clusters, newClusters, IfStatement(if), changes, 0, emptyCluster, ReturnStatement(return), clusters, ReturnStatement(return), clusters]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:assignPointsToClusters:List<CentroidCluster<T>>+Collection<T>+int[]#[VariableDeclarationStatement(), int, assignedDifferently, 0, VariableDeclarationStatement(), int, pointIndex, 0, EnhancedForStatement(for), final, T, p, points, VariableDeclarationStatement(), int, clusterIndex, getNearestCluster, clusters, p, IfStatement(if), clusterIndex, assignments, pointIndex, ExpressionStatement(), assignedDifferently, VariableDeclarationStatement(), CentroidCluster, T, cluster, clusters, get, clusterIndex, ExpressionStatement(), cluster, addPoint, p, ExpressionStatement(), assignments, pointIndex, clusterIndex, ReturnStatement(return), assignedDifferently]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:chooseInitialCenters:Collection<T>#[VariableDeclarationStatement(), final, List, T, pointList, Collections, unmodifiableList, new, ArrayList, T, points, VariableDeclarationStatement(), final, int, numPoints, pointList, size, VariableDeclarationStatement(), final, boolean, taken, boolean, numPoints, VariableDeclarationStatement(), final, List, CentroidCluster, T, resultSet, new, ArrayList, CentroidCluster, T, VariableDeclarationStatement(), final, int, firstPointIndex, random, nextInt, numPoints, VariableDeclarationStatement(), final, T, firstPoint, pointList, get, firstPointIndex, ExpressionStatement(), resultSet, add, new, CentroidCluster, T, firstPoint, ExpressionStatement(), taken, firstPointIndex, true, VariableDeclarationStatement(), final, double, minDistSquared, double, numPoints, ForStatement(for), int, i, 0, i, numPoints, i, IfStatement(if), i, firstPointIndex, VariableDeclarationStatement(), double, d, distance, firstPoint, pointList, get, i, ExpressionStatement(), minDistSquared, i, d, d, WhileStatement(while), resultSet, size, k, VariableDeclarationStatement(), double, distSqSum, 0.0, ForStatement(for), int, i, 0, i, numPoints, i, IfStatement(if), taken, i, ExpressionStatement(), distSqSum, minDistSquared, i, VariableDeclarationStatement(), final, double, r, random, nextDouble, distSqSum, VariableDeclarationStatement(), int, nextPointIndex, 1, VariableDeclarationStatement(), double, sum, 0.0, ForStatement(for), int, i, 0, i, numPoints, i, IfStatement(if), taken, i, ExpressionStatement(), sum, minDistSquared, i, IfStatement(if), sum, r, ExpressionStatement(), nextPointIndex, i, BreakStatement(break), IfStatement(if), nextPointIndex, 1, ForStatement(for), int, i, numPoints, 1, i, 0, i, IfStatement(if), taken, i, ExpressionStatement(), nextPointIndex, i, BreakStatement(break), IfStatement(if), nextPointIndex, 0, VariableDeclarationStatement(), final, T, p, pointList, get, nextPointIndex, ExpressionStatement(), resultSet, add, new, CentroidCluster, T, p, ExpressionStatement(), taken, nextPointIndex, true, IfStatement(if), resultSet, size, k, ForStatement(for), int, j, 0, j, numPoints, j, IfStatement(if), taken, j, VariableDeclarationStatement(), double, d, distance, p, pointList, get, j, VariableDeclarationStatement(), double, d2, d, d, IfStatement(if), d2, minDistSquared, j, ExpressionStatement(), minDistSquared, j, d2, BreakStatement(break), ReturnStatement(return), resultSet]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getPointFromLargestVarianceCluster:Collection<CentroidCluster<T>>#[VariableDeclarationStatement(), double, maxVariance, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), Cluster, T, selected, null, EnhancedForStatement(for), final, CentroidCluster, T, cluster, clusters, IfStatement(if), cluster, getPoints, isEmpty, VariableDeclarationStatement(), final, Clusterable, center, cluster, getCenter, VariableDeclarationStatement(), final, Variance, stat, new, Variance, EnhancedForStatement(for), final, T, point, cluster, getPoints, ExpressionStatement(), stat, increment, distance, point, center, VariableDeclarationStatement(), final, double, variance, stat, getResult, IfStatement(if), variance, maxVariance, ExpressionStatement(), maxVariance, variance, ExpressionStatement(), selected, cluster, IfStatement(if), selected, null, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, VariableDeclarationStatement(), final, List, T, selectedPoints, selected, getPoints, ReturnStatement(return), selectedPoints, remove, random, nextInt, selectedPoints, size]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getPointFromLargestNumberCluster:Cluster<T>>#[VariableDeclarationStatement(), int, maxNumber, 0, VariableDeclarationStatement(), Cluster, T, selected, null, EnhancedForStatement(for), final, Cluster, T, cluster, clusters, VariableDeclarationStatement(), final, int, number, cluster, getPoints, size, IfStatement(if), number, maxNumber, ExpressionStatement(), maxNumber, number, ExpressionStatement(), selected, cluster, IfStatement(if), selected, null, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, VariableDeclarationStatement(), final, List, T, selectedPoints, selected, getPoints, ReturnStatement(return), selectedPoints, remove, random, nextInt, selectedPoints, size]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getFarthestPoint:Collection<CentroidCluster<T>>#[VariableDeclarationStatement(), double, maxDistance, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), Cluster, T, selectedCluster, null, VariableDeclarationStatement(), int, selectedPoint, 1, EnhancedForStatement(for), final, CentroidCluster, T, cluster, clusters, VariableDeclarationStatement(), final, Clusterable, center, cluster, getCenter, VariableDeclarationStatement(), final, List, T, points, cluster, getPoints, ForStatement(for), int, i, 0, i, points, size, i, VariableDeclarationStatement(), final, double, distance, distance, points, get, i, center, IfStatement(if), distance, maxDistance, ExpressionStatement(), maxDistance, distance, ExpressionStatement(), selectedCluster, cluster, ExpressionStatement(), selectedPoint, i, IfStatement(if), selectedCluster, null, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS, ReturnStatement(return), selectedCluster, getPoints, remove, selectedPoint]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:getNearestCluster:Collection<CentroidCluster<T>>+T#[VariableDeclarationStatement(), double, minDistance, Double.MAX_VALUE, VariableDeclarationStatement(), int, clusterIndex, 0, VariableDeclarationStatement(), int, minCluster, 0, EnhancedForStatement(for), final, CentroidCluster, T, c, clusters, VariableDeclarationStatement(), final, double, distance, distance, point, c, getCenter, IfStatement(if), distance, minDistance, ExpressionStatement(), minDistance, distance, ExpressionStatement(), minCluster, clusterIndex, ExpressionStatement(), clusterIndex, ReturnStatement(return), minCluster]
org.apache.commons.math4.ml.clustering:KMeansPlusPlusClusterer:centroidOf:Collection<T>+int#[VariableDeclarationStatement(), final, double, centroid, double, dimension, EnhancedForStatement(for), final, T, p, points, VariableDeclarationStatement(), final, double, point, p, getPoint, ForStatement(for), int, i, 0, i, centroid.length, i, ExpressionStatement(), centroid, i, point, i, ForStatement(for), int, i, 0, i, centroid.length, i, ExpressionStatement(), centroid, i, points, size, ReturnStatement(return), new, DoublePoint, centroid]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:getClusterer:null#[ReturnStatement(return), clusterer]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:getNumTrials:null#[ReturnStatement(return), numTrials]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:getClusterEvaluator:null#[ReturnStatement(return), evaluator]
org.apache.commons.math4.ml.clustering:MultiKMeansPlusPlusClusterer:cluster:Collection<T>#[VariableDeclarationStatement(), List, CentroidCluster, T, best, null, VariableDeclarationStatement(), double, bestVarianceSum, Double.POSITIVE_INFINITY, ForStatement(for), int, i, 0, i, numTrials, i, VariableDeclarationStatement(), List, CentroidCluster, T, clusters, clusterer, cluster, points, VariableDeclarationStatement(), final, double, varianceSum, evaluator, score, clusters, IfStatement(if), evaluator, isBetterScore, varianceSum, bestVarianceSum, ExpressionStatement(), best, clusters, ExpressionStatement(), bestVarianceSum, varianceSum, ReturnStatement(return), best]
org.apache.commons.math4.ml.distance:CanberraDistance:compute:double[]+double[]#[ExpressionStatement(), MathArrays, checkEqualLength, a, b, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, a.length, i, VariableDeclarationStatement(), final, double, num, FastMath, abs, a, i, b, i, VariableDeclarationStatement(), final, double, denom, FastMath, abs, a, i, FastMath, abs, b, i, ExpressionStatement(), sum, num, 0.0, denom, 0.0, 0.0, num, denom, ReturnStatement(return), sum]
org.apache.commons.math4.ml.distance:ChebyshevDistance:compute:double[]+double[]#[ReturnStatement(return), MathArrays, distanceInf, a, b]
org.apache.commons.math4.ml.distance:EarthMoversDistance:compute:double[]+double[]#[ExpressionStatement(), MathArrays, checkEqualLength, a, b, VariableDeclarationStatement(), double, lastDistance, 0, VariableDeclarationStatement(), double, totalDistance, 0, ForStatement(for), int, i, 0, i, a.length, i, VariableDeclarationStatement(), final, double, currentDistance, a, i, lastDistance, b, i, ExpressionStatement(), totalDistance, FastMath, abs, currentDistance, ExpressionStatement(), lastDistance, currentDistance, ReturnStatement(return), totalDistance]
org.apache.commons.math4.ml.distance:EuclideanDistance:compute:double[]+double[]#[ReturnStatement(return), MathArrays, distance, a, b]
org.apache.commons.math4.ml.distance:ManhattanDistance:compute:double[]+double[]#[ReturnStatement(return), MathArrays, distance1, a, b]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:uniform:RandomGenerator+double+double#[ReturnStatement(return), randomize, new, UniformRealDistribution, rng, min, max, function, new, Constant, 0, 0, 0]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:uniform:double+double#[ReturnStatement(return), randomize, new, UniformRealDistribution, min, max, function, new, Constant, 0, 0, 0]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:function:UnivariateFunction+double+double#[ReturnStatement(return), new, FeatureInitializer, private, double, arg, init, Override, public, double, value, VariableDeclarationStatement(), final, double, result, f, value, arg, ExpressionStatement(), arg, inc, ReturnStatement(return), result]
org.apache.commons.math4.ml.neuralnet:FeatureInitializerFactory:randomize:RealDistribution+FeatureInitializer#[ReturnStatement(return), new, FeatureInitializer, Override, public, double, value, ReturnStatement(return), orig, value, random, sample]
org.apache.commons.math4.ml.neuralnet:MapUtils:findBest:double[]+Iterable<Neuron>+DistanceMeasure#[VariableDeclarationStatement(), Neuron, best, null, VariableDeclarationStatement(), double, min, Double.POSITIVE_INFINITY, EnhancedForStatement(for), final, Neuron, n, neurons, VariableDeclarationStatement(), final, double, d, distance, compute, n, getFeatures, features, IfStatement(if), d, min, ExpressionStatement(), min, d, ExpressionStatement(), best, n, ReturnStatement(return), best]
org.apache.commons.math4.ml.neuralnet:MapUtils:findBestAndSecondBest:double[]+Iterable<Neuron>+DistanceMeasure#[VariableDeclarationStatement(), Neuron, best, null, null, VariableDeclarationStatement(), double, min, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, EnhancedForStatement(for), final, Neuron, n, neurons, VariableDeclarationStatement(), final, double, d, distance, compute, n, getFeatures, features, IfStatement(if), d, min, 0, ExpressionStatement(), min, 1, min, 0, ExpressionStatement(), best, 1, best, 0, ExpressionStatement(), min, 0, d, ExpressionStatement(), best, 0, n, IfStatement(if), d, min, 1, ExpressionStatement(), min, 1, d, ExpressionStatement(), best, 1, n, ReturnStatement(return), new, Pair, Neuron, Neuron, best, 0, best, 1]
org.apache.commons.math4.ml.neuralnet:MapUtils:sort:double[]+Iterable<Neuron>+DistanceMeasure#[VariableDeclarationStatement(), final, List, PairNeuronDouble, list, new, ArrayList, PairNeuronDouble, EnhancedForStatement(for), final, Neuron, n, neurons, VariableDeclarationStatement(), final, double, d, distance, compute, n, getFeatures, features, ExpressionStatement(), list, add, new, PairNeuronDouble, n, d, ExpressionStatement(), Collections, sort, list, PairNeuronDouble.COMPARATOR, VariableDeclarationStatement(), final, int, len, list, size, VariableDeclarationStatement(), final, Neuron, sorted, Neuron, len, ForStatement(for), int, i, 0, i, len, i, ExpressionStatement(), sorted, i, list, get, i, getNeuron, ReturnStatement(return), sorted]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeU:NeuronSquareMesh2D+DistanceMeasure#[VariableDeclarationStatement(), final, int, numRows, map, getNumberOfRows, VariableDeclarationStatement(), final, int, numCols, map, getNumberOfColumns, VariableDeclarationStatement(), final, double, uMatrix, double, numRows, numCols, VariableDeclarationStatement(), final, Network, net, map, getNetwork, ForStatement(for), int, i, 0, i, numRows, i, ForStatement(for), int, j, 0, j, numCols, j, VariableDeclarationStatement(), final, Neuron, neuron, map, getNeuron, i, j, VariableDeclarationStatement(), final, Collection, Neuron, neighbours, net, getNeighbours, neuron, VariableDeclarationStatement(), final, double, features, neuron, getFeatures, VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), int, count, 0, EnhancedForStatement(for), Neuron, n, neighbours, ExpressionStatement(), count, ExpressionStatement(), d, distance, compute, features, n, getFeatures, ExpressionStatement(), uMatrix, i, j, d, count, ReturnStatement(return), uMatrix]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeHitHistogram:Iterable<double[]>+NeuronSquareMesh2D+DistanceMeasure#[VariableDeclarationStatement(), final, HashMap, Neuron, Integer, hit, new, HashMap, Neuron, Integer, VariableDeclarationStatement(), final, Network, net, map, getNetwork, EnhancedForStatement(for), double, f, data, VariableDeclarationStatement(), final, Neuron, best, findBest, f, net, distance, VariableDeclarationStatement(), final, Integer, count, hit, get, best, IfStatement(if), count, null, ExpressionStatement(), hit, put, best, 1, ExpressionStatement(), hit, put, best, count, 1, VariableDeclarationStatement(), final, int, numRows, map, getNumberOfRows, VariableDeclarationStatement(), final, int, numCols, map, getNumberOfColumns, VariableDeclarationStatement(), final, int, histo, int, numRows, numCols, ForStatement(for), int, i, 0, i, numRows, i, ForStatement(for), int, j, 0, j, numCols, j, VariableDeclarationStatement(), final, Neuron, neuron, map, getNeuron, i, j, VariableDeclarationStatement(), final, Integer, count, hit, get, neuron, IfStatement(if), count, null, ExpressionStatement(), histo, i, j, 0, ExpressionStatement(), histo, i, j, count, ReturnStatement(return), histo]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeQuantizationError:Iterable<double[]>+Iterable<Neuron>+DistanceMeasure#[VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), int, count, 0, EnhancedForStatement(for), double, f, data, ExpressionStatement(), count, ExpressionStatement(), d, distance, compute, f, findBest, f, neurons, distance, getFeatures, IfStatement(if), count, 0, ThrowStatement(throw), new, NoDataException, ReturnStatement(return), d, count]
org.apache.commons.math4.ml.neuralnet:MapUtils:computeTopographicError:Iterable<double[]>+Network+DistanceMeasure#[VariableDeclarationStatement(), int, notAdjacentCount, 0, VariableDeclarationStatement(), int, count, 0, EnhancedForStatement(for), double, f, data, ExpressionStatement(), count, VariableDeclarationStatement(), final, Pair, Neuron, Neuron, p, findBestAndSecondBest, f, net, distance, IfStatement(if), net, getNeighbours, p, getFirst, contains, p, getSecond, ExpressionStatement(), notAdjacentCount, IfStatement(if), count, 0, ThrowStatement(throw), new, NoDataException, ReturnStatement(return), double, notAdjacentCount, count]
org.apache.commons.math4.ml.neuralnet:Network:copy:null#[VariableDeclarationStatement(), final, Network, copy, new, Network, nextId, get, featureSize, EnhancedForStatement(for), Map.Entry, Long, Neuron, e, neuronMap, entrySet, ExpressionStatement(), copy.neuronMap, put, e, getKey, e, getValue, copy, EnhancedForStatement(for), Map.Entry, Long, Set, Long, e, linkMap, entrySet, ExpressionStatement(), copy.linkMap, put, e, getKey, new, HashSet, Long, e, getValue, ReturnStatement(return), copy]
org.apache.commons.math4.ml.neuralnet:Network:iterator:null#[ReturnStatement(return), neuronMap, values, iterator]
org.apache.commons.math4.ml.neuralnet:Network:getNeurons:Comparator<Neuron>#[VariableDeclarationStatement(), final, List, Neuron, neurons, new, ArrayList, Neuron, ExpressionStatement(), neurons, addAll, neuronMap, values, ExpressionStatement(), Collections, sort, neurons, comparator, ReturnStatement(return), neurons]
org.apache.commons.math4.ml.neuralnet:Network:createNeuron:double[]#[IfStatement(if), features.length, featureSize, ThrowStatement(throw), new, DimensionMismatchException, features.length, featureSize, VariableDeclarationStatement(), final, long, id, createNextId, ExpressionStatement(), neuronMap, put, id, new, Neuron, id, features, ExpressionStatement(), linkMap, put, id, new, HashSet, Long, ReturnStatement(return), id]
org.apache.commons.math4.ml.neuralnet:Network:deleteNeuron:Neuron#[VariableDeclarationStatement(), final, Collection, Neuron, neighbours, getNeighbours, neuron, EnhancedForStatement(for), Neuron, n, neighbours, ExpressionStatement(), deleteLink, n, neuron, ExpressionStatement(), neuronMap, remove, neuron, getIdentifier]
org.apache.commons.math4.ml.neuralnet:Network:getFeaturesSize:null#[ReturnStatement(return), featureSize]
org.apache.commons.math4.ml.neuralnet:Network:addLink:Neuron+Neuron#[VariableDeclarationStatement(), final, long, aId, a, getIdentifier, VariableDeclarationStatement(), final, long, bId, b, getIdentifier, IfStatement(if), a, getNeuron, aId, ThrowStatement(throw), new, NoSuchElementException, Long, toString, aId, IfStatement(if), b, getNeuron, bId, ThrowStatement(throw), new, NoSuchElementException, Long, toString, bId, ExpressionStatement(), addLinkToLinkSet, linkMap, get, aId, bId]
org.apache.commons.math4.ml.neuralnet:Network:addLinkToLinkSet:Set<Long>+long#[ExpressionStatement(), linkSet, add, id]
org.apache.commons.math4.ml.neuralnet:Network:deleteLink:Neuron+Neuron#[VariableDeclarationStatement(), final, long, aId, a, getIdentifier, VariableDeclarationStatement(), final, long, bId, b, getIdentifier, IfStatement(if), a, getNeuron, aId, ThrowStatement(throw), new, NoSuchElementException, Long, toString, aId, IfStatement(if), b, getNeuron, bId, ThrowStatement(throw), new, NoSuchElementException, Long, toString, bId, ExpressionStatement(), deleteLinkFromLinkSet, linkMap, get, aId, bId]
org.apache.commons.math4.ml.neuralnet:Network:deleteLinkFromLinkSet:Set<Long>+long#[ExpressionStatement(), linkSet, remove, id]
org.apache.commons.math4.ml.neuralnet:Network:getNeuron:long#[VariableDeclarationStatement(), final, Neuron, n, neuronMap, get, id, IfStatement(if), n, null, ThrowStatement(throw), new, NoSuchElementException, Long, toString, id, ReturnStatement(return), n]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Iterable<Neuron>#[ReturnStatement(return), getNeighbours, neurons, null]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Iterable<Neuron>+Iterable<Neuron>#[VariableDeclarationStatement(), final, Set, Long, idList, new, HashSet, Long, EnhancedForStatement(for), Neuron, n, neurons, ExpressionStatement(), idList, addAll, linkMap, get, n, getIdentifier, IfStatement(if), exclude, null, EnhancedForStatement(for), Neuron, n, exclude, ExpressionStatement(), idList, remove, n, getIdentifier, VariableDeclarationStatement(), final, List, Neuron, neuronList, new, ArrayList, Neuron, EnhancedForStatement(for), Long, id, idList, ExpressionStatement(), neuronList, add, getNeuron, id, ReturnStatement(return), neuronList]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Neuron#[ReturnStatement(return), getNeighbours, neuron, null]
org.apache.commons.math4.ml.neuralnet:Network:getNeighbours:Neuron+Iterable<Neuron>#[VariableDeclarationStatement(), final, Set, Long, idList, linkMap, get, neuron, getIdentifier, IfStatement(if), exclude, null, EnhancedForStatement(for), Neuron, n, exclude, ExpressionStatement(), idList, remove, n, getIdentifier, VariableDeclarationStatement(), final, List, Neuron, neuronList, new, ArrayList, Neuron, EnhancedForStatement(for), Long, id, idList, ExpressionStatement(), neuronList, add, getNeuron, id, ReturnStatement(return), neuronList]
org.apache.commons.math4.ml.neuralnet:Network:createNextId:null#[ReturnStatement(return), nextId, getAndIncrement]
org.apache.commons.math4.ml.neuralnet:Network:readObject:ObjectInputStream#[ThrowStatement(throw), new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet:Network:writeReplace:null#[VariableDeclarationStatement(), final, Neuron, neuronList, neuronMap, values, toArray, Neuron, 0, VariableDeclarationStatement(), final, long, neighbourIdList, long, neuronList.length, ForStatement(for), int, i, 0, i, neuronList.length, i, VariableDeclarationStatement(), final, Collection, Neuron, neighbours, getNeighbours, neuronList, i, VariableDeclarationStatement(), final, long, neighboursId, long, neighbours, size, VariableDeclarationStatement(), int, count, 0, EnhancedForStatement(for), Neuron, n, neighbours, ExpressionStatement(), neighboursId, count, n, getIdentifier, ExpressionStatement(), count, ExpressionStatement(), neighbourIdList, i, neighboursId, ReturnStatement(return), new, SerializationProxy, nextId, get, featureSize, neuronList, neighbourIdList]
org.apache.commons.math4.ml.neuralnet:Neuron:copy:null#[VariableDeclarationStatement(), final, Neuron, copy, new, Neuron, getIdentifier, getFeatures, ExpressionStatement(), copy.numberOfAttemptedUpdates, set, numberOfAttemptedUpdates, get, ExpressionStatement(), copy.numberOfSuccessfulUpdates, set, numberOfSuccessfulUpdates, get, ReturnStatement(return), copy]
org.apache.commons.math4.ml.neuralnet:Neuron:getIdentifier:null#[ReturnStatement(return), identifier]
org.apache.commons.math4.ml.neuralnet:Neuron:getSize:null#[ReturnStatement(return), size]
org.apache.commons.math4.ml.neuralnet:Neuron:getFeatures:null#[ReturnStatement(return), features, get, clone]
org.apache.commons.math4.ml.neuralnet:Neuron:compareAndSetFeatures:double[]+double[]#[IfStatement(if), update.length, size, ThrowStatement(throw), new, DimensionMismatchException, update.length, size, VariableDeclarationStatement(), final, double, current, features, get, IfStatement(if), containSameValues, current, expect, ReturnStatement(return), false, ExpressionStatement(), numberOfAttemptedUpdates, incrementAndGet, IfStatement(if), features, compareAndSet, current, update, clone, ExpressionStatement(), numberOfSuccessfulUpdates, incrementAndGet, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.ml.neuralnet:Neuron:getNumberOfAttemptedUpdates:null#[ReturnStatement(return), numberOfAttemptedUpdates, get]
org.apache.commons.math4.ml.neuralnet:Neuron:getNumberOfSuccessfulUpdates:null#[ReturnStatement(return), numberOfSuccessfulUpdates, get]
org.apache.commons.math4.ml.neuralnet:Neuron:containSameValues:double[]+double[]#[IfStatement(if), expect.length, size, ThrowStatement(throw), new, DimensionMismatchException, expect.length, size, ForStatement(for), int, i, 0, i, size, i, IfStatement(if), Precision, equals, current, i, expect, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.ml.neuralnet:Neuron:readObject:ObjectInputStream#[ThrowStatement(throw), new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet:Neuron:writeReplace:null#[ReturnStatement(return), new, SerializationProxy, identifier, features, get]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:getNetwork:null#[ReturnStatement(return), network]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:getSize:null#[ReturnStatement(return), size]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:getFeatures:int#[IfStatement(if), i, 0, i, size, ThrowStatement(throw), new, OutOfRangeException, i, 0, size, 1, ReturnStatement(return), network, getNeuron, identifiers, i, getFeatures]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:createLinks:null#[ForStatement(for), int, i, 0, i, size, 1, i, ExpressionStatement(), network, addLink, network, getNeuron, i, network, getNeuron, i, 1, ForStatement(for), int, i, size, 1, i, 0, i, ExpressionStatement(), network, addLink, network, getNeuron, i, network, getNeuron, i, 1, IfStatement(if), wrap, ExpressionStatement(), network, addLink, network, getNeuron, 0, network, getNeuron, size, 1, ExpressionStatement(), network, addLink, network, getNeuron, size, 1, network, getNeuron, 0]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:readObject:ObjectInputStream#[ThrowStatement(throw), new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet.oned:NeuronString:writeReplace:null#[VariableDeclarationStatement(), final, double, featuresList, double, size, ForStatement(for), int, i, 0, i, size, i, ExpressionStatement(), featuresList, i, getFeatures, i, ReturnStatement(return), new, SerializationProxy, wrap, featuresList]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenTrainingTask:run:null#[WhileStatement(while), featuresIterator, hasNext, ExpressionStatement(), updateAction, update, net, featuresIterator, next]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:update:Network+double[]#[VariableDeclarationStatement(), final, long, numCalls, numberOfCalls, incrementAndGet, 1, VariableDeclarationStatement(), final, double, currentLearning, learningFactor, value, numCalls, VariableDeclarationStatement(), final, Neuron, best, findAndUpdateBestNeuron, net, features, currentLearning, VariableDeclarationStatement(), final, int, currentNeighbourhood, neighbourhoodSize, value, numCalls, VariableDeclarationStatement(), final, Gaussian, neighbourhoodDecay, new, Gaussian, currentLearning, 0, currentNeighbourhood, IfStatement(if), currentNeighbourhood, 0, VariableDeclarationStatement(), Collection, Neuron, neighbours, new, HashSet, Neuron, ExpressionStatement(), neighbours, add, best, VariableDeclarationStatement(), final, HashSet, Neuron, exclude, new, HashSet, Neuron, ExpressionStatement(), exclude, add, best, VariableDeclarationStatement(), int, radius, 1, DoStatement(do), ExpressionStatement(), neighbours, net, getNeighbours, neighbours, exclude, EnhancedForStatement(for), Neuron, n, neighbours, ExpressionStatement(), updateNeighbouringNeuron, n, features, neighbourhoodDecay, value, radius, ExpressionStatement(), exclude, addAll, neighbours, ExpressionStatement(), radius, radius, currentNeighbourhood]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:getNumberOfCalls:null#[ReturnStatement(return), numberOfCalls, get]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:attemptNeuronUpdate:Neuron+double[]+double#[VariableDeclarationStatement(), final, double, expect, n, getFeatures, VariableDeclarationStatement(), final, double, update, computeFeatures, expect, features, learningRate, ReturnStatement(return), n, compareAndSetFeatures, expect, update]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:updateNeighbouringNeuron:Neuron+double[]+double#[WhileStatement(while), true, IfStatement(if), attemptNeuronUpdate, n, features, learningRate, BreakStatement(break)]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:findAndUpdateBestNeuron:Network+double[]+double#[WhileStatement(while), true, VariableDeclarationStatement(), final, Neuron, best, MapUtils, findBest, features, net, distance, IfStatement(if), attemptNeuronUpdate, best, features, learningRate, ReturnStatement(return), best]
org.apache.commons.math4.ml.neuralnet.sofm:KohonenUpdateAction:computeFeatures:double[]+double[]+double#[VariableDeclarationStatement(), final, ArrayRealVector, c, new, ArrayRealVector, current, false, VariableDeclarationStatement(), final, ArrayRealVector, s, new, ArrayRealVector, sample, false, ReturnStatement(return), s, subtract, c, mapMultiplyToSelf, learningRate, add, c, toArray]
org.apache.commons.math4.ml.neuralnet.sofm:LearningFactorFunctionFactory:exponentialDecay:double+double+long#[IfStatement(if), initValue, 0, initValue, 1, ThrowStatement(throw), new, OutOfRangeException, initValue, 0, 1, ReturnStatement(return), new, LearningFactorFunction, private, final, ExponentialDecayFunction, decay, new, ExponentialDecayFunction, initValue, valueAtNumCall, numCall, Override, public, double, value, long, n, ReturnStatement(return), decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm:LearningFactorFunctionFactory:quasiSigmoidDecay:double+double+long#[IfStatement(if), initValue, 0, initValue, 1, ThrowStatement(throw), new, OutOfRangeException, initValue, 0, 1, ReturnStatement(return), new, LearningFactorFunction, private, final, QuasiSigmoidDecayFunction, decay, new, QuasiSigmoidDecayFunction, initValue, slope, numCall, Override, public, double, value, long, n, ReturnStatement(return), decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm:NeighbourhoodSizeFunctionFactory:exponentialDecay:double+double+long#[ReturnStatement(return), new, NeighbourhoodSizeFunction, private, final, ExponentialDecayFunction, decay, new, ExponentialDecayFunction, initValue, valueAtNumCall, numCall, Override, public, int, value, long, n, ReturnStatement(return), int, FastMath, rint, decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm:NeighbourhoodSizeFunctionFactory:quasiSigmoidDecay:double+double+long#[ReturnStatement(return), new, NeighbourhoodSizeFunction, private, final, QuasiSigmoidDecayFunction, decay, new, QuasiSigmoidDecayFunction, initValue, slope, numCall, Override, public, int, value, long, n, ReturnStatement(return), int, FastMath, rint, decay, value, n]
org.apache.commons.math4.ml.neuralnet.sofm.util:ExponentialDecayFunction:value:long#[ReturnStatement(return), a, FastMath, exp, numCall, oneOverB]
org.apache.commons.math4.ml.neuralnet.sofm.util:QuasiSigmoidDecayFunction:value:long#[ReturnStatement(return), scale, sigmoid, value, numCall]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:copy:null#[VariableDeclarationStatement(), final, long, idGrid, long, numberOfRows, numberOfColumns, ForStatement(for), int, r, 0, r, numberOfRows, r, ForStatement(for), int, c, 0, c, numberOfColumns, c, ExpressionStatement(), idGrid, r, c, identifiers, r, c, ReturnStatement(return), new, NeuronSquareMesh2D, wrapRows, wrapColumns, neighbourhood, network, copy, idGrid]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:iterator:null#[ReturnStatement(return), network, iterator]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNetwork:null#[ReturnStatement(return), network]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNumberOfRows:null#[ReturnStatement(return), numberOfRows]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNumberOfColumns:null#[ReturnStatement(return), numberOfColumns]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNeuron:int+int#[IfStatement(if), i, 0, i, numberOfRows, ThrowStatement(throw), new, OutOfRangeException, i, 0, numberOfRows, 1, IfStatement(if), j, 0, j, numberOfColumns, ThrowStatement(throw), new, OutOfRangeException, j, 0, numberOfColumns, 1, ReturnStatement(return), network, getNeuron, identifiers, i, j]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getNeuron:int+int+HorizontalDirection+VerticalDirection#[VariableDeclarationStatement(), final, int, location, getLocation, row, col, alongRowDir, alongColDir, ReturnStatement(return), location, null, null, getNeuron, location, 0, location, 1]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:getLocation:int+int+HorizontalDirection+VerticalDirection#[VariableDeclarationStatement(), final, int, colOffset, SwitchStatement(switch), alongRowDir, SwitchCase(case), LEFT, ExpressionStatement(), colOffset, 1, BreakStatement(break), SwitchCase(case), RIGHT, ExpressionStatement(), colOffset, 1, BreakStatement(break), SwitchCase(case), CENTER, ExpressionStatement(), colOffset, 0, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, VariableDeclarationStatement(), int, colIndex, col, colOffset, IfStatement(if), wrapColumns, IfStatement(if), colIndex, 0, ExpressionStatement(), colIndex, numberOfColumns, ExpressionStatement(), colIndex, numberOfColumns, VariableDeclarationStatement(), final, int, rowOffset, SwitchStatement(switch), alongColDir, SwitchCase(case), UP, ExpressionStatement(), rowOffset, 1, BreakStatement(break), SwitchCase(case), DOWN, ExpressionStatement(), rowOffset, 1, BreakStatement(break), SwitchCase(case), CENTER, ExpressionStatement(), rowOffset, 0, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, VariableDeclarationStatement(), int, rowIndex, row, rowOffset, IfStatement(if), wrapRows, IfStatement(if), rowIndex, 0, ExpressionStatement(), rowIndex, numberOfRows, ExpressionStatement(), rowIndex, numberOfRows, IfStatement(if), rowIndex, 0, rowIndex, numberOfRows, colIndex, 0, colIndex, numberOfColumns, ReturnStatement(return), null, ReturnStatement(return), int, rowIndex, colIndex]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:createLinks:null#[VariableDeclarationStatement(), final, List, Long, linkEnd, new, ArrayList, Long, VariableDeclarationStatement(), final, int, iLast, numberOfRows, 1, VariableDeclarationStatement(), final, int, jLast, numberOfColumns, 1, ForStatement(for), int, i, 0, i, numberOfRows, i, ForStatement(for), int, j, 0, j, numberOfColumns, j, ExpressionStatement(), linkEnd, clear, SwitchStatement(switch), neighbourhood, SwitchCase(case), MOORE, IfStatement(if), i, 0, IfStatement(if), j, 0, ExpressionStatement(), linkEnd, add, identifiers, i, 1, j, 1, IfStatement(if), j, jLast, ExpressionStatement(), linkEnd, add, identifiers, i, 1, j, 1, IfStatement(if), i, iLast, IfStatement(if), j, 0, ExpressionStatement(), linkEnd, add, identifiers, i, 1, j, 1, IfStatement(if), j, jLast, ExpressionStatement(), linkEnd, add, identifiers, i, 1, j, 1, IfStatement(if), wrapRows, IfStatement(if), i, 0, IfStatement(if), j, 0, ExpressionStatement(), linkEnd, add, identifiers, iLast, j, 1, IfStatement(if), j, jLast, ExpressionStatement(), linkEnd, add, identifiers, iLast, j, 1, IfStatement(if), i, iLast, IfStatement(if), j, 0, ExpressionStatement(), linkEnd, add, identifiers, 0, j, 1, IfStatement(if), j, jLast, ExpressionStatement(), linkEnd, add, identifiers, 0, j, 1, IfStatement(if), wrapColumns, IfStatement(if), j, 0, IfStatement(if), i, 0, ExpressionStatement(), linkEnd, add, identifiers, i, 1, jLast, IfStatement(if), i, iLast, ExpressionStatement(), linkEnd, add, identifiers, i, 1, jLast, IfStatement(if), j, jLast, IfStatement(if), i, 0, ExpressionStatement(), linkEnd, add, identifiers, i, 1, 0, IfStatement(if), i, iLast, ExpressionStatement(), linkEnd, add, identifiers, i, 1, 0, IfStatement(if), wrapRows, wrapColumns, IfStatement(if), i, 0, j, 0, ExpressionStatement(), linkEnd, add, identifiers, iLast, jLast, IfStatement(if), i, 0, j, jLast, ExpressionStatement(), linkEnd, add, identifiers, iLast, 0, IfStatement(if), i, iLast, j, 0, ExpressionStatement(), linkEnd, add, identifiers, 0, jLast, IfStatement(if), i, iLast, j, jLast, ExpressionStatement(), linkEnd, add, identifiers, 0, 0, SwitchCase(case), VON_NEUMANN, IfStatement(if), i, 0, ExpressionStatement(), linkEnd, add, identifiers, i, 1, j, IfStatement(if), i, iLast, ExpressionStatement(), linkEnd, add, identifiers, i, 1, j, IfStatement(if), wrapRows, IfStatement(if), i, 0, ExpressionStatement(), linkEnd, add, identifiers, iLast, j, IfStatement(if), i, iLast, ExpressionStatement(), linkEnd, add, identifiers, 0, j, IfStatement(if), j, 0, ExpressionStatement(), linkEnd, add, identifiers, i, j, 1, IfStatement(if), j, jLast, ExpressionStatement(), linkEnd, add, identifiers, i, j, 1, IfStatement(if), wrapColumns, IfStatement(if), j, 0, ExpressionStatement(), linkEnd, add, identifiers, i, jLast, IfStatement(if), j, jLast, ExpressionStatement(), linkEnd, add, identifiers, i, 0, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, VariableDeclarationStatement(), final, Neuron, aNeuron, network, getNeuron, identifiers, i, j, EnhancedForStatement(for), long, b, linkEnd, VariableDeclarationStatement(), final, Neuron, bNeuron, network, getNeuron, b, ExpressionStatement(), network, addLink, aNeuron, bNeuron]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:readObject:ObjectInputStream#[ThrowStatement(throw), new, IllegalStateException]
org.apache.commons.math4.ml.neuralnet.twod:NeuronSquareMesh2D:writeReplace:null#[VariableDeclarationStatement(), final, double, featuresList, double, numberOfRows, numberOfColumns, ForStatement(for), int, i, 0, i, numberOfRows, i, ForStatement(for), int, j, 0, j, numberOfColumns, j, ExpressionStatement(), featuresList, i, j, getNeuron, i, j, getFeatures, ReturnStatement(return), new, SerializationProxy, wrapRows, wrapColumns, neighbourhood, featuresList]
org.apache.commons.math4.ml.neuralnet.twod.util:HitHistogram:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[VariableDeclarationStatement(), final, int, nR, map, getNumberOfRows, VariableDeclarationStatement(), final, int, nC, map, getNumberOfColumns, VariableDeclarationStatement(), final, LocationFinder, finder, new, LocationFinder, map, VariableDeclarationStatement(), int, numSamples, 0, VariableDeclarationStatement(), final, double, hit, double, nR, nC, EnhancedForStatement(for), double, sample, data, VariableDeclarationStatement(), final, Neuron, best, MapUtils, findBest, sample, map, distance, VariableDeclarationStatement(), final, LocationFinder.Location, loc, finder, getLocation, best, VariableDeclarationStatement(), final, int, row, loc, getRow, VariableDeclarationStatement(), final, int, col, loc, getColumn, ExpressionStatement(), hit, row, col, 1, ExpressionStatement(), numSamples, IfStatement(if), normalizeCount, ForStatement(for), int, r, 0, r, nR, r, ForStatement(for), int, c, 0, c, nC, c, ExpressionStatement(), hit, r, c, numSamples, ReturnStatement(return), hit]
org.apache.commons.math4.ml.neuralnet.twod.util:LocationFinder:getLocation:Neuron#[ReturnStatement(return), locations, get, n, getIdentifier]
org.apache.commons.math4.ml.neuralnet.twod.util:QuantizationError:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[VariableDeclarationStatement(), final, int, nR, map, getNumberOfRows, VariableDeclarationStatement(), final, int, nC, map, getNumberOfColumns, VariableDeclarationStatement(), final, LocationFinder, finder, new, LocationFinder, map, VariableDeclarationStatement(), final, int, hit, int, nR, nC, VariableDeclarationStatement(), final, double, error, double, nR, nC, EnhancedForStatement(for), double, sample, data, VariableDeclarationStatement(), final, Neuron, best, MapUtils, findBest, sample, map, distance, VariableDeclarationStatement(), final, LocationFinder.Location, loc, finder, getLocation, best, VariableDeclarationStatement(), final, int, row, loc, getRow, VariableDeclarationStatement(), final, int, col, loc, getColumn, ExpressionStatement(), hit, row, col, 1, ExpressionStatement(), error, row, col, distance, compute, sample, best, getFeatures, ForStatement(for), int, r, 0, r, nR, r, ForStatement(for), int, c, 0, c, nC, c, VariableDeclarationStatement(), final, int, count, hit, r, c, IfStatement(if), count, 0, ExpressionStatement(), error, r, c, count, ReturnStatement(return), error]
org.apache.commons.math4.ml.neuralnet.twod.util:SmoothedDataHistogram:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[VariableDeclarationStatement(), final, int, nR, map, getNumberOfRows, VariableDeclarationStatement(), final, int, nC, map, getNumberOfColumns, VariableDeclarationStatement(), final, int, mapSize, nR, nC, IfStatement(if), mapSize, smoothingBins, ThrowStatement(throw), new, NumberIsTooSmallException, mapSize, smoothingBins, true, VariableDeclarationStatement(), final, LocationFinder, finder, new, LocationFinder, map, VariableDeclarationStatement(), final, double, histo, double, nR, nC, EnhancedForStatement(for), double, sample, data, VariableDeclarationStatement(), final, Neuron, sorted, MapUtils, sort, sample, map, getNetwork, distance, ForStatement(for), int, i, 0, i, smoothingBins, i, VariableDeclarationStatement(), final, LocationFinder.Location, loc, finder, getLocation, sorted, i, VariableDeclarationStatement(), final, int, row, loc, getRow, VariableDeclarationStatement(), final, int, col, loc, getColumn, ExpressionStatement(), histo, row, col, smoothingBins, i, membershipNormalization, ReturnStatement(return), histo]
org.apache.commons.math4.ml.neuralnet.twod.util:TopographicErrorHistogram:computeImage:NeuronSquareMesh2D+Iterable<double[]>#[VariableDeclarationStatement(), final, int, nR, map, getNumberOfRows, VariableDeclarationStatement(), final, int, nC, map, getNumberOfColumns, VariableDeclarationStatement(), final, Network, net, map, getNetwork, VariableDeclarationStatement(), final, LocationFinder, finder, new, LocationFinder, map, VariableDeclarationStatement(), final, int, hit, int, nR, nC, VariableDeclarationStatement(), final, double, error, double, nR, nC, EnhancedForStatement(for), double, sample, data, VariableDeclarationStatement(), final, Pair, Neuron, Neuron, p, MapUtils, findBestAndSecondBest, sample, map, distance, VariableDeclarationStatement(), final, Neuron, best, p, getFirst, VariableDeclarationStatement(), final, LocationFinder.Location, loc, finder, getLocation, best, VariableDeclarationStatement(), final, int, row, loc, getRow, VariableDeclarationStatement(), final, int, col, loc, getColumn, ExpressionStatement(), hit, row, col, 1, IfStatement(if), net, getNeighbours, best, contains, p, getSecond, ExpressionStatement(), error, row, col, 1, IfStatement(if), relativeCount, ForStatement(for), int, r, 0, r, nR, r, ForStatement(for), int, c, 0, c, nC, c, ExpressionStatement(), error, r, c, hit, r, c, ReturnStatement(return), error]
org.apache.commons.math4.ml.neuralnet.twod.util:UnifiedDistanceMatrix:computeImage:NeuronSquareMesh2D#[IfStatement(if), individualDistances, ReturnStatement(return), individualDistances, map, ReturnStatement(return), averageDistances, map]
org.apache.commons.math4.ml.neuralnet.twod.util:UnifiedDistanceMatrix:individualDistances:NeuronSquareMesh2D#[VariableDeclarationStatement(), final, int, numRows, map, getNumberOfRows, VariableDeclarationStatement(), final, int, numCols, map, getNumberOfColumns, VariableDeclarationStatement(), final, double, uMatrix, double, numRows, 2, 1, numCols, 2, 1, ForStatement(for), int, i, 0, i, numRows, i, VariableDeclarationStatement(), final, int, iR, 2, i, 1, ForStatement(for), int, j, 0, j, numCols, j, VariableDeclarationStatement(), final, int, jR, 2, j, 1, VariableDeclarationStatement(), final, double, current, map, getNeuron, i, j, getFeatures, VariableDeclarationStatement(), Neuron, neighbour, ExpressionStatement(), neighbour, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.CENTER, IfStatement(if), neighbour, null, ExpressionStatement(), uMatrix, iR, jR, 1, distance, compute, current, neighbour, getFeatures, ExpressionStatement(), neighbour, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.CENTER, NeuronSquareMesh2D.VerticalDirection.DOWN, IfStatement(if), neighbour, null, ExpressionStatement(), uMatrix, iR, 1, jR, distance, compute, current, neighbour, getFeatures, ForStatement(for), int, i, 0, i, numRows, i, VariableDeclarationStatement(), final, int, iR, 2, i, 1, ForStatement(for), int, j, 0, j, numCols, j, VariableDeclarationStatement(), final, int, jR, 2, j, 1, VariableDeclarationStatement(), final, Neuron, current, map, getNeuron, i, j, VariableDeclarationStatement(), final, Neuron, right, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.CENTER, VariableDeclarationStatement(), final, Neuron, bottom, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.CENTER, NeuronSquareMesh2D.VerticalDirection.DOWN, VariableDeclarationStatement(), final, Neuron, bottomRight, map, getNeuron, i, j, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.DOWN, VariableDeclarationStatement(), final, double, current2BottomRight, bottomRight, null, 0, distance, compute, current, getFeatures, bottomRight, getFeatures, VariableDeclarationStatement(), final, double, right2Bottom, right, null, bottom, null, 0, distance, compute, right, getFeatures, bottom, getFeatures, ExpressionStatement(), uMatrix, iR, 1, jR, 1, 0.5, current2BottomRight, right2Bottom, VariableDeclarationStatement(), final, int, lastRow, uMatrix.length, 1, ExpressionStatement(), uMatrix, 0, uMatrix, lastRow, VariableDeclarationStatement(), final, int, lastCol, uMatrix, 0, length, 1, ForStatement(for), int, r, 0, r, lastRow, r, ExpressionStatement(), uMatrix, r, 0, uMatrix, r, lastCol, ReturnStatement(return), uMatrix]
org.apache.commons.math4.ml.neuralnet.twod.util:UnifiedDistanceMatrix:averageDistances:NeuronSquareMesh2D#[VariableDeclarationStatement(), final, int, numRows, map, getNumberOfRows, VariableDeclarationStatement(), final, int, numCols, map, getNumberOfColumns, VariableDeclarationStatement(), final, double, uMatrix, double, numRows, numCols, VariableDeclarationStatement(), final, Network, net, map, getNetwork, ForStatement(for), int, i, 0, i, numRows, i, ForStatement(for), int, j, 0, j, numCols, j, VariableDeclarationStatement(), final, Neuron, neuron, map, getNeuron, i, j, VariableDeclarationStatement(), final, Collection, Neuron, neighbours, net, getNeighbours, neuron, VariableDeclarationStatement(), final, double, features, neuron, getFeatures, VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), int, count, 0, EnhancedForStatement(for), Neuron, n, neighbours, ExpressionStatement(), count, ExpressionStatement(), d, distance, compute, features, n, getFeatures, ExpressionStatement(), uMatrix, i, j, d, count, ReturnStatement(return), uMatrix]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getField:null#[ReturnStatement(return), field]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getName:null#[ReturnStatement(return), name]
org.apache.commons.math4.ode:AbstractFieldIntegrator:addStepHandler:FieldStepHandler<T>#[ExpressionStatement(), stepHandlers, add, handler]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getStepHandlers:null#[ReturnStatement(return), Collections, unmodifiableCollection, stepHandlers]
org.apache.commons.math4.ode:AbstractFieldIntegrator:clearStepHandlers:null#[ExpressionStatement(), stepHandlers, clear]
org.apache.commons.math4.ode:AbstractFieldIntegrator:addEventHandler:FieldEventHandler<T>+double+double+int#[ExpressionStatement(), addEventHandler, handler, maxCheckInterval, convergence, maxIterationCount, new, FieldBracketingNthOrderBrentSolver, T, field, getZero, add, DEFAULT_RELATIVE_ACCURACY, field, getZero, add, convergence, field, getZero, add, DEFAULT_FUNCTION_VALUE_ACCURACY, 5]
org.apache.commons.math4.ode:AbstractFieldIntegrator:addEventHandler:FieldEventHandler<T>+double+double+int+BracketedRealFieldUnivariateSolver<T>#[ExpressionStatement(), eventsStates, add, new, FieldEventState, T, handler, maxCheckInterval, field, getZero, add, convergence, maxIterationCount, solver]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEventHandlers:null#[VariableDeclarationStatement(), final, List, FieldEventHandler, T, list, new, ArrayList, FieldEventHandler, T, eventsStates, size, EnhancedForStatement(for), FieldEventState, T, state, eventsStates, ExpressionStatement(), list, add, state, getEventHandler, ReturnStatement(return), Collections, unmodifiableCollection, list]
org.apache.commons.math4.ode:AbstractFieldIntegrator:clearEventHandlers:null#[ExpressionStatement(), eventsStates, clear]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getCurrentStepStart:null#[ReturnStatement(return), stepStart]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getCurrentSignedStepsize:null#[ReturnStatement(return), stepSize]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setMaxEvaluations:int#[ExpressionStatement(), evaluations, evaluations, withMaximalCount, maxEvaluations, 0, Integer.MAX_VALUE, maxEvaluations]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getMaxEvaluations:null#[ReturnStatement(return), evaluations, getMaximalCount]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEvaluations:null#[ReturnStatement(return), evaluations, getCount]
org.apache.commons.math4.ode:AbstractFieldIntegrator:initIntegration:FieldExpandableODE<T>+T+T[]+T#[ExpressionStatement(), this, equations, eqn, ExpressionStatement(), evaluations, evaluations, withStart, 0, ExpressionStatement(), eqn, init, t0, y0, t, VariableDeclarationStatement(), final, T, y0Dot, computeDerivatives, t0, y0, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, state0, new, FieldODEStateAndDerivative, T, t0, y0, y0Dot, EnhancedForStatement(for), final, FieldEventState, T, state, eventsStates, ExpressionStatement(), state, getEventHandler, init, state0, t, EnhancedForStatement(for), FieldStepHandler, T, handler, stepHandlers, ExpressionStatement(), handler, init, state0, t, ExpressionStatement(), setStateInitialized, false, ReturnStatement(return), state0]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEquations:null#[ReturnStatement(return), equations]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getEvaluationsCounter:null#[ReturnStatement(return), evaluations]
org.apache.commons.math4.ode:AbstractFieldIntegrator:computeDerivatives:T+T[]#[ExpressionStatement(), evaluations, increment, ReturnStatement(return), equations, computeDerivatives, t, y]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setStateInitialized:boolean#[ExpressionStatement(), this, statesInitialized, stateInitialized]
org.apache.commons.math4.ode:AbstractFieldIntegrator:acceptStep:AbstractFieldStepInterpolator<T>+T#[VariableDeclarationStatement(), FieldODEStateAndDerivative, T, previousState, interpolator, getGlobalPreviousState, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, currentState, interpolator, getGlobalCurrentState, IfStatement(if), statesInitialized, EnhancedForStatement(for), FieldEventState, T, state, eventsStates, ExpressionStatement(), state, reinitializeBegin, interpolator, ExpressionStatement(), statesInitialized, true, VariableDeclarationStatement(), final, int, orderingSign, interpolator, isForward, 1, 1, VariableDeclarationStatement(), SortedSet, FieldEventState, T, occurringEvents, new, TreeSet, FieldEventState, T, new, Comparator, FieldEventState, T, Override, public, int, compare, FieldEventState, T, es0, FieldEventState, T, es1, ReturnStatement(return), orderingSign, Double, compare, es0, getEventTime, getReal, es1, getEventTime, getReal, EnhancedForStatement(for), final, FieldEventState, T, state, eventsStates, IfStatement(if), state, evaluateStep, interpolator, ExpressionStatement(), occurringEvents, add, state, VariableDeclarationStatement(), AbstractFieldStepInterpolator, T, restricted, interpolator, WhileStatement(while), occurringEvents, isEmpty, VariableDeclarationStatement(), final, Iterator, FieldEventState, T, iterator, occurringEvents, iterator, VariableDeclarationStatement(), final, FieldEventState, T, currentEvent, iterator, next, ExpressionStatement(), iterator, remove, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, eventState, restricted, getInterpolatedState, currentEvent, getEventTime, ExpressionStatement(), restricted, restricted, restrictStep, previousState, eventState, EnhancedForStatement(for), final, FieldEventState, T, state, eventsStates, ExpressionStatement(), state, stepAccepted, eventState, ExpressionStatement(), isLastStep, isLastStep, state, stop, EnhancedForStatement(for), final, FieldStepHandler, T, handler, stepHandlers, ExpressionStatement(), handler, handleStep, restricted, isLastStep, IfStatement(if), isLastStep, ReturnStatement(return), eventState, VariableDeclarationStatement(), FieldODEState, T, newState, null, ExpressionStatement(), resetOccurred, false, EnhancedForStatement(for), final, FieldEventState, T, state, eventsStates, ExpressionStatement(), newState, state, reset, eventState, IfStatement(if), newState, null, VariableDeclarationStatement(), final, T, y, equations, getMapper, mapState, newState, VariableDeclarationStatement(), final, T, yDot, computeDerivatives, newState, getTime, y, ExpressionStatement(), resetOccurred, true, ReturnStatement(return), equations, getMapper, mapStateAndDerivative, newState, getTime, y, yDot, ExpressionStatement(), previousState, eventState, ExpressionStatement(), restricted, restricted, restrictStep, eventState, currentState, IfStatement(if), currentEvent, evaluateStep, restricted, ExpressionStatement(), occurringEvents, add, currentEvent, EnhancedForStatement(for), final, FieldEventState, T, state, eventsStates, ExpressionStatement(), state, stepAccepted, currentState, ExpressionStatement(), isLastStep, isLastStep, state, stop, ExpressionStatement(), isLastStep, isLastStep, currentState, getTime, subtract, tEnd, abs, getReal, FastMath, ulp, tEnd, getReal, EnhancedForStatement(for), FieldStepHandler, T, handler, stepHandlers, ExpressionStatement(), handler, handleStep, restricted, isLastStep, ReturnStatement(return), currentState]
org.apache.commons.math4.ode:AbstractFieldIntegrator:sanityChecks:FieldODEState<T>+T#[VariableDeclarationStatement(), final, double, threshold, 1000, FastMath, ulp, FastMath, max, FastMath, abs, eqn, getTime, getReal, FastMath, abs, t, getReal, VariableDeclarationStatement(), final, double, dt, eqn, getTime, subtract, t, abs, getReal, IfStatement(if), dt, threshold, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false]
org.apache.commons.math4.ode:AbstractFieldIntegrator:resetOccurred:null#[ReturnStatement(return), resetOccurred]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setStepSize:T#[ExpressionStatement(), this, stepSize, stepSize]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getStepSize:null#[ReturnStatement(return), stepSize]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setStepStart:FieldODEStateAndDerivative<T>#[ExpressionStatement(), this, stepStart, stepStart]
org.apache.commons.math4.ode:AbstractFieldIntegrator:getStepStart:null#[ReturnStatement(return), stepStart]
org.apache.commons.math4.ode:AbstractFieldIntegrator:setIsLastStep:boolean#[ExpressionStatement(), this, isLastStep, isLastStep]
org.apache.commons.math4.ode:AbstractFieldIntegrator:isLastStep:null#[ReturnStatement(return), isLastStep]
org.apache.commons.math4.ode:AbstractIntegrator:getName:null#[ReturnStatement(return), name]
org.apache.commons.math4.ode:AbstractIntegrator:addStepHandler:StepHandler#[ExpressionStatement(), stepHandlers, add, handler]
org.apache.commons.math4.ode:AbstractIntegrator:getStepHandlers:null#[ReturnStatement(return), Collections, unmodifiableCollection, stepHandlers]
org.apache.commons.math4.ode:AbstractIntegrator:clearStepHandlers:null#[ExpressionStatement(), stepHandlers, clear]
org.apache.commons.math4.ode:AbstractIntegrator:addEventHandler:EventHandler+double+double+int#[ExpressionStatement(), addEventHandler, handler, maxCheckInterval, convergence, maxIterationCount, new, BracketingNthOrderBrentSolver, convergence, 5]
org.apache.commons.math4.ode:AbstractIntegrator:addEventHandler:EventHandler+double+double+int+UnivariateSolver#[ExpressionStatement(), eventsStates, add, new, EventState, handler, maxCheckInterval, convergence, maxIterationCount, solver]
org.apache.commons.math4.ode:AbstractIntegrator:getEventHandlers:null#[VariableDeclarationStatement(), final, List, EventHandler, list, new, ArrayList, EventHandler, eventsStates, size, EnhancedForStatement(for), EventState, state, eventsStates, ExpressionStatement(), list, add, state, getEventHandler, ReturnStatement(return), Collections, unmodifiableCollection, list]
org.apache.commons.math4.ode:AbstractIntegrator:clearEventHandlers:null#[ExpressionStatement(), eventsStates, clear]
org.apache.commons.math4.ode:AbstractIntegrator:getCurrentStepStart:null#[ReturnStatement(return), stepStart]
org.apache.commons.math4.ode:AbstractIntegrator:getCurrentSignedStepsize:null#[ReturnStatement(return), stepSize]
org.apache.commons.math4.ode:AbstractIntegrator:setMaxEvaluations:int#[ExpressionStatement(), evaluations, evaluations, withMaximalCount, maxEvaluations, 0, Integer.MAX_VALUE, maxEvaluations]
org.apache.commons.math4.ode:AbstractIntegrator:getMaxEvaluations:null#[ReturnStatement(return), evaluations, getMaximalCount]
org.apache.commons.math4.ode:AbstractIntegrator:getEvaluations:null#[ReturnStatement(return), evaluations, getCount]
org.apache.commons.math4.ode:AbstractIntegrator:initIntegration:double+double[]+double#[ExpressionStatement(), evaluations, evaluations, withStart, 0, EnhancedForStatement(for), final, EventState, state, eventsStates, ExpressionStatement(), state, setExpandable, expandable, ExpressionStatement(), state, getEventHandler, init, t0, y0, t, EnhancedForStatement(for), StepHandler, handler, stepHandlers, ExpressionStatement(), handler, init, t0, y0, t, ExpressionStatement(), setStateInitialized, false]
org.apache.commons.math4.ode:AbstractIntegrator:setEquations:ExpandableStatefulODE#[ExpressionStatement(), this, expandable, equations]
org.apache.commons.math4.ode:AbstractIntegrator:getExpandable:null#[ReturnStatement(return), expandable]
org.apache.commons.math4.ode:AbstractIntegrator:getCounter:null#[ReturnStatement(return), evaluations]
org.apache.commons.math4.ode:AbstractIntegrator:integrate:FirstOrderDifferentialEquations+double+double[]+double+double[]#[IfStatement(if), y0.length, equations, getDimension, ThrowStatement(throw), new, DimensionMismatchException, y0.length, equations, getDimension, IfStatement(if), y.length, equations, getDimension, ThrowStatement(throw), new, DimensionMismatchException, y.length, equations, getDimension, VariableDeclarationStatement(), final, ExpandableStatefulODE, expandableODE, new, ExpandableStatefulODE, equations, ExpressionStatement(), expandableODE, setTime, t0, ExpressionStatement(), expandableODE, setPrimaryState, y0, ExpressionStatement(), integrate, expandableODE, t, ExpressionStatement(), System, arraycopy, expandableODE, getPrimaryState, 0, y, 0, y.length, ReturnStatement(return), expandableODE, getTime]
org.apache.commons.math4.ode:AbstractIntegrator:computeDerivatives:double+double[]+double[]#[ExpressionStatement(), evaluations, increment, ExpressionStatement(), expandable, computeDerivatives, t, y, yDot]
org.apache.commons.math4.ode:AbstractIntegrator:setStateInitialized:boolean#[ExpressionStatement(), this, statesInitialized, stateInitialized]
org.apache.commons.math4.ode:AbstractIntegrator:acceptStep:AbstractStepInterpolator+double[]+double[]+double#[VariableDeclarationStatement(), double, previousT, interpolator, getGlobalPreviousTime, VariableDeclarationStatement(), final, double, currentT, interpolator, getGlobalCurrentTime, IfStatement(if), statesInitialized, EnhancedForStatement(for), EventState, state, eventsStates, ExpressionStatement(), state, reinitializeBegin, interpolator, ExpressionStatement(), statesInitialized, true, VariableDeclarationStatement(), final, int, orderingSign, interpolator, isForward, 1, 1, VariableDeclarationStatement(), SortedSet, EventState, occurringEvents, new, TreeSet, EventState, new, Comparator, EventState, Override, public, int, compare, EventState, es0, EventState, es1, ReturnStatement(return), orderingSign, Double, compare, es0, getEventTime, es1, getEventTime, EnhancedForStatement(for), final, EventState, state, eventsStates, IfStatement(if), state, evaluateStep, interpolator, ExpressionStatement(), occurringEvents, add, state, WhileStatement(while), occurringEvents, isEmpty, VariableDeclarationStatement(), final, Iterator, EventState, iterator, occurringEvents, iterator, VariableDeclarationStatement(), final, EventState, currentEvent, iterator, next, ExpressionStatement(), iterator, remove, VariableDeclarationStatement(), final, double, eventT, currentEvent, getEventTime, ExpressionStatement(), interpolator, setSoftPreviousTime, previousT, ExpressionStatement(), interpolator, setSoftCurrentTime, eventT, ExpressionStatement(), interpolator, setInterpolatedTime, eventT, VariableDeclarationStatement(), final, double, eventYComplete, double, y.length, ExpressionStatement(), expandable, getPrimaryMapper, insertEquationData, interpolator, getInterpolatedState, eventYComplete, VariableDeclarationStatement(), int, index, 0, EnhancedForStatement(for), EquationsMapper, secondary, expandable, getSecondaryMappers, ExpressionStatement(), secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, index, eventYComplete, EnhancedForStatement(for), final, EventState, state, eventsStates, ExpressionStatement(), state, stepAccepted, eventT, eventYComplete, ExpressionStatement(), isLastStep, isLastStep, state, stop, EnhancedForStatement(for), final, StepHandler, handler, stepHandlers, ExpressionStatement(), handler, handleStep, interpolator, isLastStep, IfStatement(if), isLastStep, ExpressionStatement(), System, arraycopy, eventYComplete, 0, y, 0, y.length, ReturnStatement(return), eventT, VariableDeclarationStatement(), boolean, needReset, false, ExpressionStatement(), resetOccurred, false, EnhancedForStatement(for), final, EventState, state, eventsStates, ExpressionStatement(), needReset, needReset, state, reset, eventT, eventYComplete, IfStatement(if), needReset, ExpressionStatement(), interpolator, setInterpolatedTime, eventT, ExpressionStatement(), System, arraycopy, eventYComplete, 0, y, 0, y.length, ExpressionStatement(), computeDerivatives, eventT, y, yDot, ExpressionStatement(), resetOccurred, true, ReturnStatement(return), eventT, ExpressionStatement(), previousT, eventT, ExpressionStatement(), interpolator, setSoftPreviousTime, eventT, ExpressionStatement(), interpolator, setSoftCurrentTime, currentT, IfStatement(if), currentEvent, evaluateStep, interpolator, ExpressionStatement(), occurringEvents, add, currentEvent, ExpressionStatement(), interpolator, setInterpolatedTime, currentT, VariableDeclarationStatement(), final, double, currentY, double, y.length, ExpressionStatement(), expandable, getPrimaryMapper, insertEquationData, interpolator, getInterpolatedState, currentY, VariableDeclarationStatement(), int, index, 0, EnhancedForStatement(for), EquationsMapper, secondary, expandable, getSecondaryMappers, ExpressionStatement(), secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, index, currentY, EnhancedForStatement(for), final, EventState, state, eventsStates, ExpressionStatement(), state, stepAccepted, currentT, currentY, ExpressionStatement(), isLastStep, isLastStep, state, stop, ExpressionStatement(), isLastStep, isLastStep, Precision, equals, currentT, tEnd, 1, EnhancedForStatement(for), StepHandler, handler, stepHandlers, ExpressionStatement(), handler, handleStep, interpolator, isLastStep, ReturnStatement(return), currentT]
org.apache.commons.math4.ode:AbstractIntegrator:sanityChecks:ExpandableStatefulODE+double#[VariableDeclarationStatement(), final, double, threshold, 1000, FastMath, ulp, FastMath, max, FastMath, abs, equations, getTime, FastMath, abs, t, VariableDeclarationStatement(), final, double, dt, FastMath, abs, equations, getTime, t, IfStatement(if), dt, threshold, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false]
org.apache.commons.math4.ode:AbstractParameterizable:getParametersNames:null#[ReturnStatement(return), parametersNames]
org.apache.commons.math4.ode:AbstractParameterizable:isSupported:String#[EnhancedForStatement(for), final, String, supportedName, parametersNames, IfStatement(if), supportedName, equals, name, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.ode:AbstractParameterizable:complainIfNotSupported:String#[IfStatement(if), isSupported, name, ThrowStatement(throw), new, UnknownParameterException, name]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:append:ContinuousOutputFieldModel<T>#[IfStatement(if), model.steps, size, 0, ReturnStatement(return), IfStatement(if), steps, size, 0, ExpressionStatement(), initialTime, model.initialTime, ExpressionStatement(), forward, model.forward, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, s1, steps, get, 0, getPreviousState, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, s2, model.steps, get, 0, getPreviousState, ExpressionStatement(), checkDimensionsEquality, s1, getStateDimension, s2, getStateDimension, ExpressionStatement(), checkDimensionsEquality, s1, getNumberOfSecondaryStates, s2, getNumberOfSecondaryStates, ForStatement(for), int, i, 0, i, s1, getNumberOfSecondaryStates, i, ExpressionStatement(), checkDimensionsEquality, s1, getSecondaryStateDimension, i, s2, getSecondaryStateDimension, i, IfStatement(if), forward, model.forward, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH, VariableDeclarationStatement(), final, FieldStepInterpolator, T, lastInterpolator, steps, get, index, VariableDeclarationStatement(), final, T, current, lastInterpolator, getCurrentState, getTime, VariableDeclarationStatement(), final, T, previous, lastInterpolator, getPreviousState, getTime, VariableDeclarationStatement(), final, T, step, current, subtract, previous, VariableDeclarationStatement(), final, T, gap, model, getInitialTime, subtract, current, IfStatement(if), gap, abs, subtract, step, abs, multiply, 1.0e-3, getReal, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES, gap, abs, getReal, EnhancedForStatement(for), FieldStepInterpolator, T, interpolator, model.steps, ExpressionStatement(), steps, add, interpolator, ExpressionStatement(), index, steps, size, 1, ExpressionStatement(), finalTime, steps, get, index, getCurrentState, getTime]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:checkDimensionsEquality:int+int#[IfStatement(if), d1, d2, ThrowStatement(throw), new, DimensionMismatchException, d2, d1]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:init:FieldODEStateAndDerivative<T>+T#[ExpressionStatement(), initialTime, initialState, getTime, ExpressionStatement(), finalTime, t, ExpressionStatement(), forward, true, ExpressionStatement(), index, 0, ExpressionStatement(), steps, clear]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:handleStep:FieldStepInterpolator<T>+boolean#[IfStatement(if), steps, size, 0, ExpressionStatement(), initialTime, interpolator, getPreviousState, getTime, ExpressionStatement(), forward, interpolator, isForward, ExpressionStatement(), steps, add, interpolator, IfStatement(if), isLast, ExpressionStatement(), finalTime, interpolator, getCurrentState, getTime, ExpressionStatement(), index, steps, size, 1]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:getInitialTime:null#[ReturnStatement(return), initialTime]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:getFinalTime:null#[ReturnStatement(return), finalTime]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:getInterpolatedState:T#[VariableDeclarationStatement(), int, iMin, 0, VariableDeclarationStatement(), final, FieldStepInterpolator, T, sMin, steps, get, iMin, VariableDeclarationStatement(), T, tMin, sMin, getPreviousState, getTime, add, sMin, getCurrentState, getTime, multiply, 0.5, VariableDeclarationStatement(), int, iMax, steps, size, 1, VariableDeclarationStatement(), final, FieldStepInterpolator, T, sMax, steps, get, iMax, VariableDeclarationStatement(), T, tMax, sMax, getPreviousState, getTime, add, sMax, getCurrentState, getTime, multiply, 0.5, IfStatement(if), locatePoint, time, sMin, 0, ExpressionStatement(), index, iMin, ReturnStatement(return), sMin, getInterpolatedState, time, IfStatement(if), locatePoint, time, sMax, 0, ExpressionStatement(), index, iMax, ReturnStatement(return), sMax, getInterpolatedState, time, WhileStatement(while), iMax, iMin, 5, VariableDeclarationStatement(), final, FieldStepInterpolator, T, si, steps, get, index, VariableDeclarationStatement(), final, int, location, locatePoint, time, si, IfStatement(if), location, 0, ExpressionStatement(), iMax, index, ExpressionStatement(), tMax, si, getPreviousState, getTime, add, si, getCurrentState, getTime, multiply, 0.5, IfStatement(if), location, 0, ExpressionStatement(), iMin, index, ExpressionStatement(), tMin, si, getPreviousState, getTime, add, si, getCurrentState, getTime, multiply, 0.5, ReturnStatement(return), si, getInterpolatedState, time, VariableDeclarationStatement(), final, int, iMed, iMin, iMax, 2, VariableDeclarationStatement(), final, FieldStepInterpolator, T, sMed, steps, get, iMed, VariableDeclarationStatement(), final, T, tMed, sMed, getPreviousState, getTime, add, sMed, getCurrentState, getTime, multiply, 0.5, IfStatement(if), tMed, subtract, tMin, abs, subtract, 1.0e-6, getReal, 0, tMax, subtract, tMed, abs, subtract, 1.0e-6, getReal, 0, ExpressionStatement(), index, iMed, VariableDeclarationStatement(), final, T, d12, tMax, subtract, tMed, VariableDeclarationStatement(), final, T, d23, tMed, subtract, tMin, VariableDeclarationStatement(), final, T, d13, tMax, subtract, tMin, VariableDeclarationStatement(), final, T, dt1, time, subtract, tMax, VariableDeclarationStatement(), final, T, dt2, time, subtract, tMed, VariableDeclarationStatement(), final, T, dt3, time, subtract, tMin, VariableDeclarationStatement(), final, T, iLagrange, dt2, multiply, dt3, multiply, d23, multiply, iMax, subtract, dt1, multiply, dt3, multiply, d13, multiply, iMed, add, dt1, multiply, dt2, multiply, d12, multiply, iMin, divide, d12, multiply, d23, multiply, d13, ExpressionStatement(), index, int, FastMath, rint, iLagrange, getReal, VariableDeclarationStatement(), final, int, low, FastMath, max, iMin, 1, 9, iMin, iMax, 10, VariableDeclarationStatement(), final, int, high, FastMath, min, iMax, 1, iMin, 9, iMax, 10, IfStatement(if), index, low, ExpressionStatement(), index, low, IfStatement(if), index, high, ExpressionStatement(), index, high, ExpressionStatement(), index, iMin, WhileStatement(while), index, iMax, locatePoint, time, steps, get, index, 0, ExpressionStatement(), index, ReturnStatement(return), steps, get, index, getInterpolatedState, time]
org.apache.commons.math4.ode:ContinuousOutputFieldModel:locatePoint:T+FieldStepInterpolator<T>#[IfStatement(if), forward, IfStatement(if), time, subtract, interval, getPreviousState, getTime, getReal, 0, ReturnStatement(return), 1, IfStatement(if), time, subtract, interval, getCurrentState, getTime, getReal, 0, ReturnStatement(return), 1, ReturnStatement(return), 0, IfStatement(if), time, subtract, interval, getPreviousState, getTime, getReal, 0, ReturnStatement(return), 1, IfStatement(if), time, subtract, interval, getCurrentState, getTime, getReal, 0, ReturnStatement(return), 1, ReturnStatement(return), 0]
org.apache.commons.math4.ode:ContinuousOutputModel:append:ContinuousOutputModel#[IfStatement(if), model.steps, size, 0, ReturnStatement(return), IfStatement(if), steps, size, 0, ExpressionStatement(), initialTime, model.initialTime, ExpressionStatement(), forward, model.forward, IfStatement(if), getInterpolatedState, length, model, getInterpolatedState, length, ThrowStatement(throw), new, DimensionMismatchException, model, getInterpolatedState, length, getInterpolatedState, length, IfStatement(if), forward, model.forward, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH, VariableDeclarationStatement(), final, StepInterpolator, lastInterpolator, steps, get, index, VariableDeclarationStatement(), final, double, current, lastInterpolator, getCurrentTime, VariableDeclarationStatement(), final, double, previous, lastInterpolator, getPreviousTime, VariableDeclarationStatement(), final, double, step, current, previous, VariableDeclarationStatement(), final, double, gap, model, getInitialTime, current, IfStatement(if), FastMath, abs, gap, 1.0e-3, FastMath, abs, step, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES, FastMath, abs, gap, EnhancedForStatement(for), StepInterpolator, interpolator, model.steps, ExpressionStatement(), steps, add, interpolator, copy, ExpressionStatement(), index, steps, size, 1, ExpressionStatement(), finalTime, steps, get, index, getCurrentTime]
org.apache.commons.math4.ode:ContinuousOutputModel:init:double+double[]+double#[ExpressionStatement(), initialTime, Double.NaN, ExpressionStatement(), finalTime, Double.NaN, ExpressionStatement(), forward, true, ExpressionStatement(), index, 0, ExpressionStatement(), steps, clear]
org.apache.commons.math4.ode:ContinuousOutputModel:handleStep:StepInterpolator+boolean#[IfStatement(if), steps, size, 0, ExpressionStatement(), initialTime, interpolator, getPreviousTime, ExpressionStatement(), forward, interpolator, isForward, ExpressionStatement(), steps, add, interpolator, copy, IfStatement(if), isLast, ExpressionStatement(), finalTime, interpolator, getCurrentTime, ExpressionStatement(), index, steps, size, 1]
org.apache.commons.math4.ode:ContinuousOutputModel:getInitialTime:null#[ReturnStatement(return), initialTime]
org.apache.commons.math4.ode:ContinuousOutputModel:getFinalTime:null#[ReturnStatement(return), finalTime]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedTime:null#[ReturnStatement(return), steps, get, index, getInterpolatedTime]
org.apache.commons.math4.ode:ContinuousOutputModel:setInterpolatedTime:double#[VariableDeclarationStatement(), int, iMin, 0, VariableDeclarationStatement(), final, StepInterpolator, sMin, steps, get, iMin, VariableDeclarationStatement(), double, tMin, 0.5, sMin, getPreviousTime, sMin, getCurrentTime, VariableDeclarationStatement(), int, iMax, steps, size, 1, VariableDeclarationStatement(), final, StepInterpolator, sMax, steps, get, iMax, VariableDeclarationStatement(), double, tMax, 0.5, sMax, getPreviousTime, sMax, getCurrentTime, IfStatement(if), locatePoint, time, sMin, 0, ExpressionStatement(), index, iMin, ExpressionStatement(), sMin, setInterpolatedTime, time, ReturnStatement(return), IfStatement(if), locatePoint, time, sMax, 0, ExpressionStatement(), index, iMax, ExpressionStatement(), sMax, setInterpolatedTime, time, ReturnStatement(return), WhileStatement(while), iMax, iMin, 5, VariableDeclarationStatement(), final, StepInterpolator, si, steps, get, index, VariableDeclarationStatement(), final, int, location, locatePoint, time, si, IfStatement(if), location, 0, ExpressionStatement(), iMax, index, ExpressionStatement(), tMax, 0.5, si, getPreviousTime, si, getCurrentTime, IfStatement(if), location, 0, ExpressionStatement(), iMin, index, ExpressionStatement(), tMin, 0.5, si, getPreviousTime, si, getCurrentTime, ExpressionStatement(), si, setInterpolatedTime, time, ReturnStatement(return), VariableDeclarationStatement(), final, int, iMed, iMin, iMax, 2, VariableDeclarationStatement(), final, StepInterpolator, sMed, steps, get, iMed, VariableDeclarationStatement(), final, double, tMed, 0.5, sMed, getPreviousTime, sMed, getCurrentTime, IfStatement(if), FastMath, abs, tMed, tMin, 1e-6, FastMath, abs, tMax, tMed, 1e-6, ExpressionStatement(), index, iMed, VariableDeclarationStatement(), final, double, d12, tMax, tMed, VariableDeclarationStatement(), final, double, d23, tMed, tMin, VariableDeclarationStatement(), final, double, d13, tMax, tMin, VariableDeclarationStatement(), final, double, dt1, time, tMax, VariableDeclarationStatement(), final, double, dt2, time, tMed, VariableDeclarationStatement(), final, double, dt3, time, tMin, VariableDeclarationStatement(), final, double, iLagrange, dt2, dt3, d23, iMax, dt1, dt3, d13, iMed, dt1, dt2, d12, iMin, d12, d23, d13, ExpressionStatement(), index, int, FastMath, rint, iLagrange, VariableDeclarationStatement(), final, int, low, FastMath, max, iMin, 1, 9, iMin, iMax, 10, VariableDeclarationStatement(), final, int, high, FastMath, min, iMax, 1, iMin, 9, iMax, 10, IfStatement(if), index, low, ExpressionStatement(), index, low, IfStatement(if), index, high, ExpressionStatement(), index, high, ExpressionStatement(), index, iMin, WhileStatement(while), index, iMax, locatePoint, time, steps, get, index, 0, ExpressionStatement(), index, ExpressionStatement(), steps, get, index, setInterpolatedTime, time]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedState:null#[ReturnStatement(return), steps, get, index, getInterpolatedState]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedDerivatives:null#[ReturnStatement(return), steps, get, index, getInterpolatedDerivatives]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedSecondaryState:int#[ReturnStatement(return), steps, get, index, getInterpolatedSecondaryState, secondaryStateIndex]
org.apache.commons.math4.ode:ContinuousOutputModel:getInterpolatedSecondaryDerivatives:int#[ReturnStatement(return), steps, get, index, getInterpolatedSecondaryDerivatives, secondaryStateIndex]
org.apache.commons.math4.ode:ContinuousOutputModel:locatePoint:double+StepInterpolator#[IfStatement(if), forward, IfStatement(if), time, interval, getPreviousTime, ReturnStatement(return), 1, IfStatement(if), time, interval, getCurrentTime, ReturnStatement(return), 1, ReturnStatement(return), 0, IfStatement(if), time, interval, getPreviousTime, ReturnStatement(return), 1, IfStatement(if), time, interval, getCurrentTime, ReturnStatement(return), 1, ReturnStatement(return), 0]
org.apache.commons.math4.ode:EquationsMapper:getFirstIndex:null#[ReturnStatement(return), firstIndex]
org.apache.commons.math4.ode:EquationsMapper:getDimension:null#[ReturnStatement(return), dimension]
org.apache.commons.math4.ode:EquationsMapper:extractEquationData:double[]+double[]#[IfStatement(if), equationData.length, dimension, ThrowStatement(throw), new, DimensionMismatchException, equationData.length, dimension, ExpressionStatement(), System, arraycopy, complete, firstIndex, equationData, 0, dimension]
org.apache.commons.math4.ode:EquationsMapper:insertEquationData:double[]+double[]#[IfStatement(if), equationData.length, dimension, ThrowStatement(throw), new, DimensionMismatchException, equationData.length, dimension, ExpressionStatement(), System, arraycopy, equationData, 0, complete, firstIndex, dimension]
org.apache.commons.math4.ode.events:EventFilter:init:double+double[]+double#[ExpressionStatement(), rawHandler, init, t0, y0, t, ExpressionStatement(), forward, t, t0, ExpressionStatement(), extremeT, forward, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, ExpressionStatement(), Arrays, fill, transformers, Transformer.UNINITIALIZED, ExpressionStatement(), Arrays, fill, updates, extremeT]
org.apache.commons.math4.ode.events:EventFilter:g:double+double[]#[VariableDeclarationStatement(), final, double, rawG, rawHandler, g, t, y, IfStatement(if), forward, VariableDeclarationStatement(), final, int, last, transformers.length, 1, IfStatement(if), extremeT, t, VariableDeclarationStatement(), final, Transformer, previous, transformers, last, VariableDeclarationStatement(), final, Transformer, next, filter, selectTransformer, previous, rawG, forward, IfStatement(if), next, previous, ExpressionStatement(), System, arraycopy, updates, 1, updates, 0, last, ExpressionStatement(), System, arraycopy, transformers, 1, transformers, 0, last, ExpressionStatement(), updates, last, extremeT, ExpressionStatement(), transformers, last, next, ExpressionStatement(), extremeT, t, ReturnStatement(return), next, transformed, rawG, ForStatement(for), int, i, last, i, 0, i, IfStatement(if), updates, i, t, ReturnStatement(return), transformers, i, transformed, rawG, ReturnStatement(return), transformers, 0, transformed, rawG, IfStatement(if), t, extremeT, VariableDeclarationStatement(), final, Transformer, previous, transformers, 0, VariableDeclarationStatement(), final, Transformer, next, filter, selectTransformer, previous, rawG, forward, IfStatement(if), next, previous, ExpressionStatement(), System, arraycopy, updates, 0, updates, 1, updates.length, 1, ExpressionStatement(), System, arraycopy, transformers, 0, transformers, 1, transformers.length, 1, ExpressionStatement(), updates, 0, extremeT, ExpressionStatement(), transformers, 0, next, ExpressionStatement(), extremeT, t, ReturnStatement(return), next, transformed, rawG, ForStatement(for), int, i, 0, i, updates.length, 1, i, IfStatement(if), t, updates, i, ReturnStatement(return), transformers, i, transformed, rawG, ReturnStatement(return), transformers, updates.length, 1, transformed, rawG]
org.apache.commons.math4.ode.events:EventFilter:eventOccurred:double+double[]+boolean#[ReturnStatement(return), rawHandler, eventOccurred, t, y, filter, getTriggeredIncreasing]
org.apache.commons.math4.ode.events:EventFilter:resetState:double+double[]#[ExpressionStatement(), rawHandler, resetState, t, y]
org.apache.commons.math4.ode.events:EventState:getEventHandler:null#[ReturnStatement(return), handler]
org.apache.commons.math4.ode.events:EventState:setExpandable:ExpandableStatefulODE#[ExpressionStatement(), this, expandable, expandable]
org.apache.commons.math4.ode.events:EventState:getMaxCheckInterval:null#[ReturnStatement(return), maxCheckInterval]
org.apache.commons.math4.ode.events:EventState:getConvergence:null#[ReturnStatement(return), convergence]
org.apache.commons.math4.ode.events:EventState:getMaxIterationCount:null#[ReturnStatement(return), maxIterationCount]
org.apache.commons.math4.ode.events:EventState:reinitializeBegin:StepInterpolator#[ExpressionStatement(), t0, interpolator, getPreviousTime, ExpressionStatement(), interpolator, setInterpolatedTime, t0, ExpressionStatement(), g0, handler, g, t0, getCompleteState, interpolator, IfStatement(if), g0, 0, VariableDeclarationStatement(), final, double, epsilon, FastMath, max, solver, getAbsoluteAccuracy, FastMath, abs, solver, getRelativeAccuracy, t0, VariableDeclarationStatement(), final, double, tStart, t0, 0.5, epsilon, ExpressionStatement(), interpolator, setInterpolatedTime, tStart, ExpressionStatement(), g0, handler, g, tStart, getCompleteState, interpolator, ExpressionStatement(), g0Positive, g0, 0]
org.apache.commons.math4.ode.events:EventState:getCompleteState:StepInterpolator#[VariableDeclarationStatement(), final, double, complete, double, expandable, getTotalDimension, ExpressionStatement(), expandable, getPrimaryMapper, insertEquationData, interpolator, getInterpolatedState, complete, VariableDeclarationStatement(), int, index, 0, EnhancedForStatement(for), EquationsMapper, secondary, expandable, getSecondaryMappers, ExpressionStatement(), secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, index, complete, ReturnStatement(return), complete]
org.apache.commons.math4.ode.events:EventState:evaluateStep:StepInterpolator#[TryStatement(try), ExpressionStatement(), forward, interpolator, isForward, VariableDeclarationStatement(), final, double, t1, interpolator, getCurrentTime, VariableDeclarationStatement(), final, double, dt, t1, t0, IfStatement(if), FastMath, abs, dt, convergence, ReturnStatement(return), false, VariableDeclarationStatement(), final, int, n, FastMath, max, 1, int, FastMath, ceil, FastMath, abs, dt, maxCheckInterval, VariableDeclarationStatement(), final, double, h, dt, n, VariableDeclarationStatement(), final, UnivariateFunction, f, new, UnivariateFunction, Override, public, double, value, final, double, t, LocalMaxCountExceededException, TryStatement(try), ExpressionStatement(), interpolator, setInterpolatedTime, t, ReturnStatement(return), handler, g, t, getCompleteState, interpolator, catch, MaxCountExceededException, mcee, ThrowStatement(throw), new, LocalMaxCountExceededException, mcee, VariableDeclarationStatement(), double, ta, t0, VariableDeclarationStatement(), double, ga, g0, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, tb, i, n, 1, t1, t0, i, 1, h, ExpressionStatement(), interpolator, setInterpolatedTime, tb, VariableDeclarationStatement(), final, double, gb, handler, g, tb, getCompleteState, interpolator, IfStatement(if), g0Positive, gb, 0, ExpressionStatement(), increasing, gb, ga, VariableDeclarationStatement(), final, double, root, IfStatement(if), instanceof, solver, BracketedUnivariateSolver, VariableDeclarationStatement(), SuppressWarnings, "unchecked", BracketedUnivariateSolver, UnivariateFunction, bracketing, BracketedUnivariateSolver, UnivariateFunction, solver, ExpressionStatement(), root, forward, bracketing, solve, maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE, bracketing, solve, maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE, VariableDeclarationStatement(), final, double, baseRoot, forward, solver, solve, maxIterationCount, f, ta, tb, solver, solve, maxIterationCount, f, tb, ta, VariableDeclarationStatement(), final, int, remainingEval, maxIterationCount, solver, getEvaluations, VariableDeclarationStatement(), BracketedUnivariateSolver, UnivariateFunction, bracketing, new, PegasusSolver, solver, getRelativeAccuracy, solver, getAbsoluteAccuracy, ExpressionStatement(), root, forward, UnivariateSolverUtils, forceSide, remainingEval, f, bracketing, baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE, UnivariateSolverUtils, forceSide, remainingEval, f, bracketing, baseRoot, tb, ta, AllowedSolution.LEFT_SIDE, IfStatement(if), Double, isNaN, previousEventTime, FastMath, abs, root, ta, convergence, FastMath, abs, root, previousEventTime, convergence, DoStatement(do), ExpressionStatement(), ta, forward, ta, convergence, ta, convergence, ExpressionStatement(), ga, f, value, ta, g0Positive, ga, 0, forward, ta, tb, IfStatement(if), forward, ta, tb, ExpressionStatement(), i, ExpressionStatement(), pendingEventTime, root, ExpressionStatement(), pendingEvent, true, ReturnStatement(return), true, IfStatement(if), Double, isNaN, previousEventTime, FastMath, abs, previousEventTime, root, convergence, ExpressionStatement(), pendingEventTime, root, ExpressionStatement(), pendingEvent, true, ReturnStatement(return), true, ExpressionStatement(), ta, tb, ExpressionStatement(), ga, gb, ExpressionStatement(), ta, tb, ExpressionStatement(), ga, gb, ExpressionStatement(), pendingEvent, false, ExpressionStatement(), pendingEventTime, Double.NaN, ReturnStatement(return), false, catch, LocalMaxCountExceededException, lmcee, ThrowStatement(throw), lmcee, getException]
org.apache.commons.math4.ode.events:EventState:getEventTime:null#[ReturnStatement(return), pendingEvent, pendingEventTime, forward, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.ode.events:EventState:stepAccepted:double+double[]#[ExpressionStatement(), t0, t, ExpressionStatement(), g0, handler, g, t, y, IfStatement(if), pendingEvent, FastMath, abs, pendingEventTime, t, convergence, ExpressionStatement(), previousEventTime, t, ExpressionStatement(), g0Positive, increasing, ExpressionStatement(), nextAction, handler, eventOccurred, t, y, increasing, forward, ExpressionStatement(), g0Positive, g0, 0, ExpressionStatement(), nextAction, EventHandler.Action.CONTINUE]
org.apache.commons.math4.ode.events:EventState:stop:null#[ReturnStatement(return), nextAction, EventHandler.Action.STOP]
org.apache.commons.math4.ode.events:EventState:reset:double+double[]#[IfStatement(if), pendingEvent, FastMath, abs, pendingEventTime, t, convergence, ReturnStatement(return), false, IfStatement(if), nextAction, EventHandler.Action.RESET_STATE, ExpressionStatement(), handler, resetState, t, y, ExpressionStatement(), pendingEvent, false, ExpressionStatement(), pendingEventTime, Double.NaN, ReturnStatement(return), nextAction, EventHandler.Action.RESET_STATE, nextAction, EventHandler.Action.RESET_DERIVATIVES]
org.apache.commons.math4.ode.events:FieldEventState:getEventHandler:null#[ReturnStatement(return), handler]
org.apache.commons.math4.ode.events:FieldEventState:getMaxCheckInterval:null#[ReturnStatement(return), maxCheckInterval]
org.apache.commons.math4.ode.events:FieldEventState:getConvergence:null#[ReturnStatement(return), convergence]
org.apache.commons.math4.ode.events:FieldEventState:getMaxIterationCount:null#[ReturnStatement(return), maxIterationCount]
org.apache.commons.math4.ode.events:FieldEventState:reinitializeBegin:FieldStepInterpolator<T>#[VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, s0, interpolator, getPreviousState, ExpressionStatement(), t0, s0, getTime, ExpressionStatement(), g0, handler, g, s0, IfStatement(if), g0, getReal, 0, VariableDeclarationStatement(), final, double, epsilon, FastMath, max, solver, getAbsoluteAccuracy, getReal, FastMath, abs, solver, getRelativeAccuracy, multiply, t0, getReal, VariableDeclarationStatement(), final, T, tStart, t0, add, 0.5, epsilon, ExpressionStatement(), g0, handler, g, interpolator, getInterpolatedState, tStart, ExpressionStatement(), g0Positive, g0, getReal, 0]
org.apache.commons.math4.ode.events:FieldEventState:evaluateStep:FieldStepInterpolator<T>#[ExpressionStatement(), forward, interpolator, isForward, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, s1, interpolator, getCurrentState, VariableDeclarationStatement(), final, T, t1, s1, getTime, VariableDeclarationStatement(), final, T, dt, t1, subtract, t0, IfStatement(if), dt, abs, subtract, convergence, getReal, 0, ReturnStatement(return), false, VariableDeclarationStatement(), final, int, n, FastMath, max, 1, int, FastMath, ceil, FastMath, abs, dt, getReal, maxCheckInterval, VariableDeclarationStatement(), final, T, h, dt, divide, n, VariableDeclarationStatement(), final, RealFieldUnivariateFunction, T, f, new, RealFieldUnivariateFunction, T, Override, public, T, value, final, T, t, ReturnStatement(return), handler, g, interpolator, getInterpolatedState, t, VariableDeclarationStatement(), T, ta, t0, VariableDeclarationStatement(), T, ga, g0, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, T, tb, i, n, 1, t1, t0, add, h, multiply, i, 1, VariableDeclarationStatement(), final, T, gb, handler, g, interpolator, getInterpolatedState, tb, IfStatement(if), g0Positive, gb, getReal, 0, ExpressionStatement(), increasing, gb, subtract, ga, getReal, 0, VariableDeclarationStatement(), final, T, root, forward, solver, solve, maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE, solver, solve, maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE, IfStatement(if), previousEventTime, null, root, subtract, ta, abs, subtract, convergence, getReal, 0, root, subtract, previousEventTime, abs, subtract, convergence, getReal, 0, DoStatement(do), ExpressionStatement(), ta, forward, ta, add, convergence, ta, subtract, convergence, ExpressionStatement(), ga, f, value, ta, g0Positive, ga, getReal, 0, forward, ta, subtract, tb, getReal, 0, IfStatement(if), forward, ta, subtract, tb, getReal, 0, ExpressionStatement(), i, ExpressionStatement(), pendingEventTime, root, ExpressionStatement(), pendingEvent, true, ReturnStatement(return), true, IfStatement(if), previousEventTime, null, previousEventTime, subtract, root, abs, subtract, convergence, getReal, 0, ExpressionStatement(), pendingEventTime, root, ExpressionStatement(), pendingEvent, true, ReturnStatement(return), true, ExpressionStatement(), ta, tb, ExpressionStatement(), ga, gb, ExpressionStatement(), ta, tb, ExpressionStatement(), ga, gb, ExpressionStatement(), pendingEvent, false, ExpressionStatement(), pendingEventTime, null, ReturnStatement(return), false]
org.apache.commons.math4.ode.events:FieldEventState:getEventTime:null#[ReturnStatement(return), pendingEvent, pendingEventTime, t0, getField, getZero, add, forward, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.ode.events:FieldEventState:stepAccepted:FieldODEStateAndDerivative<T>#[ExpressionStatement(), t0, state, getTime, ExpressionStatement(), g0, handler, g, state, IfStatement(if), pendingEvent, pendingEventTime, subtract, state, getTime, abs, subtract, convergence, getReal, 0, ExpressionStatement(), previousEventTime, state, getTime, ExpressionStatement(), g0Positive, increasing, ExpressionStatement(), nextAction, handler, eventOccurred, state, increasing, forward, ExpressionStatement(), g0Positive, g0, getReal, 0, ExpressionStatement(), nextAction, Action.CONTINUE]
org.apache.commons.math4.ode.events:FieldEventState:stop:null#[ReturnStatement(return), nextAction, Action.STOP]
org.apache.commons.math4.ode.events:FieldEventState:reset:FieldODEStateAndDerivative<T>#[IfStatement(if), pendingEvent, pendingEventTime, subtract, state, getTime, abs, subtract, convergence, getReal, 0, ReturnStatement(return), null, VariableDeclarationStatement(), final, FieldODEState, T, newState, IfStatement(if), nextAction, Action.RESET_STATE, ExpressionStatement(), newState, handler, resetState, state, IfStatement(if), nextAction, Action.RESET_DERIVATIVES, ExpressionStatement(), newState, state, ExpressionStatement(), newState, null, ExpressionStatement(), pendingEvent, false, ExpressionStatement(), pendingEventTime, null, ReturnStatement(return), newState]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimary:null#[ReturnStatement(return), primary]
org.apache.commons.math4.ode:ExpandableStatefulODE:getTotalDimension:null#[IfStatement(if), components, isEmpty, ReturnStatement(return), primaryMapper, getDimension, VariableDeclarationStatement(), final, EquationsMapper, lastMapper, components, get, components, size, 1, mapper, ReturnStatement(return), lastMapper, getFirstIndex, lastMapper, getDimension]
org.apache.commons.math4.ode:ExpandableStatefulODE:computeDerivatives:double+double[]+double[]#[ExpressionStatement(), primaryMapper, extractEquationData, y, primaryState, ExpressionStatement(), primary, computeDerivatives, t, primaryState, primaryStateDot, EnhancedForStatement(for), final, SecondaryComponent, component, components, ExpressionStatement(), component.mapper, extractEquationData, y, component.state, ExpressionStatement(), component.equation, computeDerivatives, t, primaryState, primaryStateDot, component.state, component.stateDot, ExpressionStatement(), component.mapper, insertEquationData, component.stateDot, yDot, ExpressionStatement(), primaryMapper, insertEquationData, primaryStateDot, yDot]
org.apache.commons.math4.ode:ExpandableStatefulODE:addSecondaryEquations:SecondaryEquations#[VariableDeclarationStatement(), final, int, firstIndex, IfStatement(if), components, isEmpty, ExpressionStatement(), components, new, ArrayList, ExpandableStatefulODE.SecondaryComponent, ExpressionStatement(), firstIndex, primary, getDimension, VariableDeclarationStatement(), final, SecondaryComponent, last, components, get, components, size, 1, ExpressionStatement(), firstIndex, last.mapper, getFirstIndex, last.mapper, getDimension, ExpressionStatement(), components, add, new, SecondaryComponent, secondary, firstIndex, ReturnStatement(return), components, size, 1]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimaryMapper:null#[ReturnStatement(return), primaryMapper]
org.apache.commons.math4.ode:ExpandableStatefulODE:getSecondaryMappers:null#[VariableDeclarationStatement(), final, EquationsMapper, mappers, EquationsMapper, components, size, ForStatement(for), int, i, 0, i, mappers.length, i, ExpressionStatement(), mappers, i, components, get, i, mapper, ReturnStatement(return), mappers]
org.apache.commons.math4.ode:ExpandableStatefulODE:setTime:double#[ExpressionStatement(), this, time, time]
org.apache.commons.math4.ode:ExpandableStatefulODE:getTime:null#[ReturnStatement(return), time]
org.apache.commons.math4.ode:ExpandableStatefulODE:setPrimaryState:double[]#[IfStatement(if), primaryState.length, this, primaryState, length, ThrowStatement(throw), new, DimensionMismatchException, primaryState.length, this, primaryState, length, ExpressionStatement(), System, arraycopy, primaryState, 0, this, primaryState, 0, primaryState.length]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimaryState:null#[ReturnStatement(return), primaryState, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:getPrimaryStateDot:null#[ReturnStatement(return), primaryStateDot, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:setSecondaryState:int+double[]#[VariableDeclarationStatement(), double, localArray, components, get, index, state, IfStatement(if), secondaryState.length, localArray.length, ThrowStatement(throw), new, DimensionMismatchException, secondaryState.length, localArray.length, ExpressionStatement(), System, arraycopy, secondaryState, 0, localArray, 0, secondaryState.length]
org.apache.commons.math4.ode:ExpandableStatefulODE:getSecondaryState:int#[ReturnStatement(return), components, get, index, state, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:getSecondaryStateDot:int#[ReturnStatement(return), components, get, index, stateDot, clone]
org.apache.commons.math4.ode:ExpandableStatefulODE:setCompleteState:double[]#[IfStatement(if), completeState.length, getTotalDimension, ThrowStatement(throw), new, DimensionMismatchException, completeState.length, getTotalDimension, ExpressionStatement(), primaryMapper, extractEquationData, completeState, primaryState, EnhancedForStatement(for), final, SecondaryComponent, component, components, ExpressionStatement(), component.mapper, extractEquationData, completeState, component.state]
org.apache.commons.math4.ode:ExpandableStatefulODE:getCompleteState:null#[VariableDeclarationStatement(), double, completeState, double, getTotalDimension, ExpressionStatement(), primaryMapper, insertEquationData, primaryState, completeState, EnhancedForStatement(for), final, SecondaryComponent, component, components, ExpressionStatement(), component.mapper, insertEquationData, component.state, completeState, ReturnStatement(return), completeState]
org.apache.commons.math4.ode:FieldEquationsMapper:getNumberOfEquations:null#[ReturnStatement(return), start.length, 1]
org.apache.commons.math4.ode:FieldEquationsMapper:getTotalDimension:null#[ReturnStatement(return), start, start.length, 1]
org.apache.commons.math4.ode:FieldEquationsMapper:mapState:FieldODEState<T>#[VariableDeclarationStatement(), final, T, y, MathArrays, buildArray, state, getTime, getField, getTotalDimension, VariableDeclarationStatement(), int, index, 0, ExpressionStatement(), insertEquationData, index, state, getState, y, WhileStatement(while), index, getNumberOfEquations, ExpressionStatement(), insertEquationData, index, state, getSecondaryState, index, y, ReturnStatement(return), y]
org.apache.commons.math4.ode:FieldEquationsMapper:mapDerivative:FieldODEStateAndDerivative<T>#[VariableDeclarationStatement(), final, T, yDot, MathArrays, buildArray, state, getTime, getField, getTotalDimension, VariableDeclarationStatement(), int, index, 0, ExpressionStatement(), insertEquationData, index, state, getDerivative, yDot, WhileStatement(while), index, getNumberOfEquations, ExpressionStatement(), insertEquationData, index, state, getSecondaryDerivative, index, yDot, ReturnStatement(return), yDot]
org.apache.commons.math4.ode:FieldEquationsMapper:mapStateAndDerivative:T+T[]+T[]#[IfStatement(if), y.length, getTotalDimension, ThrowStatement(throw), new, DimensionMismatchException, y.length, getTotalDimension, IfStatement(if), yDot.length, getTotalDimension, ThrowStatement(throw), new, DimensionMismatchException, yDot.length, getTotalDimension, VariableDeclarationStatement(), final, int, n, getNumberOfEquations, VariableDeclarationStatement(), int, index, 0, VariableDeclarationStatement(), final, T, state, extractEquationData, index, y, VariableDeclarationStatement(), final, T, derivative, extractEquationData, index, yDot, IfStatement(if), n, 2, ReturnStatement(return), new, FieldODEStateAndDerivative, T, t, state, derivative, VariableDeclarationStatement(), final, T, secondaryState, MathArrays, buildArray, t, getField, n, 1, 1, VariableDeclarationStatement(), final, T, secondaryDerivative, MathArrays, buildArray, t, getField, n, 1, 1, WhileStatement(while), index, getNumberOfEquations, ExpressionStatement(), secondaryState, index, 1, extractEquationData, index, y, ExpressionStatement(), secondaryDerivative, index, 1, extractEquationData, index, yDot, ReturnStatement(return), new, FieldODEStateAndDerivative, T, t, state, derivative, secondaryState, secondaryDerivative]
org.apache.commons.math4.ode:FieldEquationsMapper:extractEquationData:int+T[]#[ExpressionStatement(), checkIndex, index, VariableDeclarationStatement(), final, int, begin, start, index, VariableDeclarationStatement(), final, int, end, start, index, 1, IfStatement(if), complete.length, end, ThrowStatement(throw), new, DimensionMismatchException, complete.length, end, VariableDeclarationStatement(), final, int, dimension, end, begin, VariableDeclarationStatement(), final, T, equationData, MathArrays, buildArray, complete, 0, getField, dimension, ExpressionStatement(), System, arraycopy, complete, begin, equationData, 0, dimension, ReturnStatement(return), equationData]
org.apache.commons.math4.ode:FieldEquationsMapper:insertEquationData:int+T[]+T[]#[ExpressionStatement(), checkIndex, index, VariableDeclarationStatement(), final, int, begin, start, index, VariableDeclarationStatement(), final, int, end, start, index, 1, VariableDeclarationStatement(), final, int, dimension, end, begin, IfStatement(if), complete.length, end, ThrowStatement(throw), new, DimensionMismatchException, complete.length, end, IfStatement(if), equationData.length, dimension, ThrowStatement(throw), new, DimensionMismatchException, equationData.length, dimension, ExpressionStatement(), System, arraycopy, equationData, 0, complete, begin, dimension]
org.apache.commons.math4.ode:FieldEquationsMapper:checkIndex:int#[IfStatement(if), index, 0, index, start.length, 2, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, index, 0, start.length, 2]
org.apache.commons.math4.ode:FieldExpandableODE:getMapper:null#[ReturnStatement(return), mapper]
org.apache.commons.math4.ode:FieldExpandableODE:addSecondaryEquations:FieldSecondaryEquations<T>#[ExpressionStatement(), components, add, secondary, ExpressionStatement(), mapper, new, FieldEquationsMapper, T, mapper, secondary, getDimension, ReturnStatement(return), components, size]
org.apache.commons.math4.ode:FieldExpandableODE:init:T+T[]+T#[VariableDeclarationStatement(), int, index, 0, VariableDeclarationStatement(), final, T, primary0, mapper, extractEquationData, index, y0, ExpressionStatement(), primary, init, t0, primary0, finalTime, WhileStatement(while), index, mapper, getNumberOfEquations, VariableDeclarationStatement(), final, T, secondary0, mapper, extractEquationData, index, y0, ExpressionStatement(), components, get, index, 1, init, t0, primary0, secondary0, finalTime]
org.apache.commons.math4.ode:FieldExpandableODE:computeDerivatives:T+T[]#[VariableDeclarationStatement(), final, T, yDot, MathArrays, buildArray, t, getField, mapper, getTotalDimension, VariableDeclarationStatement(), int, index, 0, VariableDeclarationStatement(), final, T, primaryState, mapper, extractEquationData, index, y, VariableDeclarationStatement(), final, T, primaryStateDot, primary, computeDerivatives, t, primaryState, ExpressionStatement(), mapper, insertEquationData, index, primaryStateDot, yDot, WhileStatement(while), index, mapper, getNumberOfEquations, VariableDeclarationStatement(), final, T, componentState, mapper, extractEquationData, index, y, VariableDeclarationStatement(), final, T, componentStateDot, components, get, index, 1, computeDerivatives, t, primaryState, primaryStateDot, componentState, ExpressionStatement(), mapper, insertEquationData, index, componentStateDot, yDot, ReturnStatement(return), yDot]
org.apache.commons.math4.ode:FieldODEState:copy:Field<T>+T[][]#[IfStatement(if), original, null, ReturnStatement(return), null, VariableDeclarationStatement(), final, T, copied, MathArrays, buildArray, field, original.length, 1, ForStatement(for), int, i, 0, i, original.length, i, ExpressionStatement(), copied, i, original, i, clone, ReturnStatement(return), copied]
org.apache.commons.math4.ode:FieldODEState:getTime:null#[ReturnStatement(return), time]
org.apache.commons.math4.ode:FieldODEState:getStateDimension:null#[ReturnStatement(return), state.length]
org.apache.commons.math4.ode:FieldODEState:getState:null#[ReturnStatement(return), state, clone]
org.apache.commons.math4.ode:FieldODEState:getNumberOfSecondaryStates:null#[ReturnStatement(return), secondaryState, null, 0, secondaryState.length]
org.apache.commons.math4.ode:FieldODEState:getSecondaryStateDimension:int#[ReturnStatement(return), index, 0, state.length, secondaryState, index, 1, length]
org.apache.commons.math4.ode:FieldODEState:getSecondaryState:int#[ReturnStatement(return), index, 0, state, clone, secondaryState, index, 1, clone]
org.apache.commons.math4.ode:FieldODEStateAndDerivative:getDerivative:null#[ReturnStatement(return), derivative, clone]
org.apache.commons.math4.ode:FieldODEStateAndDerivative:getSecondaryDerivative:int#[ReturnStatement(return), index, 0, derivative, clone, secondaryDerivative, index, 1, clone]
org.apache.commons.math4.ode:FirstOrderConverter:getDimension:null#[ReturnStatement(return), 2, dimension]
org.apache.commons.math4.ode:FirstOrderConverter:computeDerivatives:double+double[]+double[]#[ExpressionStatement(), System, arraycopy, y, 0, z, 0, dimension, ExpressionStatement(), System, arraycopy, y, dimension, zDot, 0, dimension, ExpressionStatement(), equations, computeSecondDerivatives, t, z, zDot, zDDot, ExpressionStatement(), System, arraycopy, zDot, 0, yDot, 0, dimension, ExpressionStatement(), System, arraycopy, zDDot, 0, yDot, dimension, dimension]
org.apache.commons.math4.ode:JacobianMatrices:registerVariationalEquations:ExpandableStatefulODE#[VariableDeclarationStatement(), final, FirstOrderDifferentialEquations, ode, instanceof, jode, MainStateJacobianWrapper, MainStateJacobianWrapper, jode, ode, jode, IfStatement(if), expandable, getPrimary, ode, ThrowStatement(throw), new, MismatchedEquations, ExpressionStatement(), efode, expandable, ExpressionStatement(), index, efode, addSecondaryEquations, new, JacobiansSecondaryEquations, ExpressionStatement(), efode, setSecondaryState, index, matricesData]
org.apache.commons.math4.ode:JacobianMatrices:addParameterJacobianProvider:ParameterJacobianProvider#[ExpressionStatement(), jacobianProviders, add, provider]
org.apache.commons.math4.ode:JacobianMatrices:setParameterizedODE:ParameterizedODE#[ExpressionStatement(), this, pode, parameterizedOde, ExpressionStatement(), dirtyParameter, true]
org.apache.commons.math4.ode:JacobianMatrices:setParameterStep:String+double#[EnhancedForStatement(for), ParameterConfiguration, param, selectedParameters, IfStatement(if), parameter, equals, param, getParameterName, ExpressionStatement(), param, setHP, hP, ExpressionStatement(), dirtyParameter, true, ReturnStatement(return), ThrowStatement(throw), new, UnknownParameterException, parameter]
org.apache.commons.math4.ode:JacobianMatrices:setInitialMainStateJacobian:double[][]#[ExpressionStatement(), checkDimension, stateDim, dYdY0, ExpressionStatement(), checkDimension, stateDim, dYdY0, 0, VariableDeclarationStatement(), int, i, 0, EnhancedForStatement(for), final, double, row, dYdY0, ExpressionStatement(), System, arraycopy, row, 0, matricesData, i, stateDim, ExpressionStatement(), i, stateDim, IfStatement(if), efode, null, ExpressionStatement(), efode, setSecondaryState, index, matricesData]
org.apache.commons.math4.ode:JacobianMatrices:setInitialParameterJacobian:String+double[]#[ExpressionStatement(), checkDimension, stateDim, dYdP, VariableDeclarationStatement(), int, i, stateDim, stateDim, EnhancedForStatement(for), ParameterConfiguration, param, selectedParameters, IfStatement(if), pName, equals, param, getParameterName, ExpressionStatement(), System, arraycopy, dYdP, 0, matricesData, i, stateDim, IfStatement(if), efode, null, ExpressionStatement(), efode, setSecondaryState, index, matricesData, ReturnStatement(return), ExpressionStatement(), i, stateDim, ThrowStatement(throw), new, UnknownParameterException, pName]
org.apache.commons.math4.ode:JacobianMatrices:getCurrentMainSetJacobian:double[][]#[VariableDeclarationStatement(), double, p, efode, getSecondaryState, index, VariableDeclarationStatement(), int, j, 0, ForStatement(for), int, i, 0, i, stateDim, i, ExpressionStatement(), System, arraycopy, p, j, dYdY0, i, 0, stateDim, ExpressionStatement(), j, stateDim]
org.apache.commons.math4.ode:JacobianMatrices:getCurrentParameterJacobian:String+double[]#[VariableDeclarationStatement(), double, p, efode, getSecondaryState, index, VariableDeclarationStatement(), int, i, stateDim, stateDim, EnhancedForStatement(for), ParameterConfiguration, param, selectedParameters, IfStatement(if), param, getParameterName, equals, pName, ExpressionStatement(), System, arraycopy, p, i, dYdP, 0, stateDim, ReturnStatement(return), ExpressionStatement(), i, stateDim]
org.apache.commons.math4.ode:JacobianMatrices:checkDimension:int+Object#[VariableDeclarationStatement(), int, arrayDimension, array, null, 0, Array, getLength, array, IfStatement(if), arrayDimension, expected, ThrowStatement(throw), new, DimensionMismatchException, arrayDimension, expected]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getStarterIntegrator:null#[ReturnStatement(return), starter]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setStarterIntegrator:FirstOrderFieldIntegrator<T>#[ExpressionStatement(), this, starter, starterIntegrator]
org.apache.commons.math4.ode:MultistepFieldIntegrator:start:FieldExpandableODE<T>+FieldODEState<T>+T#[ExpressionStatement(), starter, clearEventHandlers, ExpressionStatement(), starter, clearStepHandlers, ExpressionStatement(), starter, addStepHandler, new, FieldNordsieckInitializer, equations, getMapper, nSteps, 3, 2, TryStatement(try), ExpressionStatement(), starter, integrate, equations, initialState, t, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.MULTISTEP_STARTER_STOPPED_EARLY, catch, InitializationCompletedMarkerException, icme, ExpressionStatement(), getEvaluationsCounter, increment, starter, getEvaluations, ExpressionStatement(), starter, clearStepHandlers]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getMinReduction:null#[ReturnStatement(return), minReduction]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setMinReduction:double#[ExpressionStatement(), this, minReduction, minReduction]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getMaxGrowth:null#[ReturnStatement(return), maxGrowth]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setMaxGrowth:double#[ExpressionStatement(), this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getSafety:null#[ReturnStatement(return), safety]
org.apache.commons.math4.ode:MultistepFieldIntegrator:setSafety:double#[ExpressionStatement(), this, safety, safety]
org.apache.commons.math4.ode:MultistepFieldIntegrator:getNSteps:null#[ReturnStatement(return), nSteps]
org.apache.commons.math4.ode:MultistepFieldIntegrator:rescale:T#[VariableDeclarationStatement(), final, T, ratio, newStepSize, divide, getStepSize, ForStatement(for), int, i, 0, i, scaled.length, i, ExpressionStatement(), scaled, i, scaled, i, multiply, ratio, VariableDeclarationStatement(), final, T, nData, nordsieck, getDataRef, VariableDeclarationStatement(), T, power, ratio, ForStatement(for), int, i, 0, i, nData.length, i, ExpressionStatement(), power, power, multiply, ratio, VariableDeclarationStatement(), final, T, nDataI, nData, i, ForStatement(for), int, j, 0, j, nDataI.length, j, ExpressionStatement(), nDataI, j, nDataI, j, multiply, power, ExpressionStatement(), setStepSize, newStepSize]
org.apache.commons.math4.ode:MultistepFieldIntegrator:computeStepGrowShrinkFactor:T#[ReturnStatement(return), MathUtils, min, error, getField, getZero, add, maxGrowth, MathUtils, max, error, getField, getZero, add, minReduction, error, pow, exp, multiply, safety]
org.apache.commons.math4.ode:MultistepIntegrator:getStarterIntegrator:null#[ReturnStatement(return), starter]
org.apache.commons.math4.ode:MultistepIntegrator:setStarterIntegrator:FirstOrderIntegrator#[ExpressionStatement(), this, starter, starterIntegrator]
org.apache.commons.math4.ode:MultistepIntegrator:start:double+double[]+double#[ExpressionStatement(), starter, clearEventHandlers, ExpressionStatement(), starter, clearStepHandlers, ExpressionStatement(), starter, addStepHandler, new, NordsieckInitializer, nSteps, 3, 2, y0.length, TryStatement(try), IfStatement(if), instanceof, starter, AbstractIntegrator, ExpressionStatement(), AbstractIntegrator, starter, integrate, getExpandable, t, ExpressionStatement(), starter, integrate, new, FirstOrderDifferentialEquations, Override, public, int, getDimension, ReturnStatement(return), getExpandable, getTotalDimension, Override, public, void, computeDerivatives, double, t, double, y, double, yDot, ExpressionStatement(), getExpandable, computeDerivatives, t, y, yDot, t0, y0, t, double, y0.length, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.MULTISTEP_STARTER_STOPPED_EARLY, catch, InitializationCompletedMarkerException, icme, ExpressionStatement(), getCounter, increment, starter, getEvaluations, ExpressionStatement(), starter, clearStepHandlers]
org.apache.commons.math4.ode:MultistepIntegrator:getMinReduction:null#[ReturnStatement(return), minReduction]
org.apache.commons.math4.ode:MultistepIntegrator:setMinReduction:double#[ExpressionStatement(), this, minReduction, minReduction]
org.apache.commons.math4.ode:MultistepIntegrator:getMaxGrowth:null#[ReturnStatement(return), maxGrowth]
org.apache.commons.math4.ode:MultistepIntegrator:setMaxGrowth:double#[ExpressionStatement(), this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode:MultistepIntegrator:getSafety:null#[ReturnStatement(return), safety]
org.apache.commons.math4.ode:MultistepIntegrator:setSafety:double#[ExpressionStatement(), this, safety, safety]
org.apache.commons.math4.ode:MultistepIntegrator:getNSteps:null#[ReturnStatement(return), nSteps]
org.apache.commons.math4.ode:MultistepIntegrator:computeStepGrowShrinkFactor:double#[ReturnStatement(return), FastMath, min, maxGrowth, FastMath, max, minReduction, safety, FastMath, pow, error, exp]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthFieldIntegrator:errorEstimation:T[]+T[]+T[]+FieldMatrix<T>#[VariableDeclarationStatement(), T, error, getField, getZero, ForStatement(for), int, i, 0, i, mainSetDimension, i, VariableDeclarationStatement(), final, T, yScale, predictedState, i, abs, VariableDeclarationStatement(), final, T, tol, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, i, add, vecAbsoluteTolerance, i, VariableDeclarationStatement(), T, variation, getField, getZero, VariableDeclarationStatement(), int, sign, predictedNordsieck, getRowDimension, 2, 0, 1, 1, ForStatement(for), int, k, predictedNordsieck, getRowDimension, 1, k, 0, k, ExpressionStatement(), variation, variation, add, predictedNordsieck, getEntry, k, i, multiply, sign, ExpressionStatement(), sign, sign, ExpressionStatement(), variation, variation, subtract, predictedScaled, i, VariableDeclarationStatement(), final, T, ratio, predictedState, i, subtract, previousState, i, add, variation, divide, tol, ExpressionStatement(), error, error, add, ratio, multiply, ratio, ReturnStatement(return), error, divide, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[ExpressionStatement(), sanityChecks, initialState, finalTime, VariableDeclarationStatement(), final, T, t0, initialState, getTime, VariableDeclarationStatement(), final, T, y, equations, getMapper, mapState, initialState, ExpressionStatement(), setStepStart, initIntegration, equations, t0, y, finalTime, VariableDeclarationStatement(), final, boolean, forward, finalTime, subtract, initialState, getTime, getReal, 0, ExpressionStatement(), start, equations, getStepStart, finalTime, VariableDeclarationStatement(), FieldODEStateAndDerivative, T, stepStart, getStepStart, VariableDeclarationStatement(), FieldODEStateAndDerivative, T, stepEnd, AdamsFieldStepInterpolator, taylor, stepStart, stepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, ExpressionStatement(), setIsLastStep, false, DoStatement(do), VariableDeclarationStatement(), T, predictedY, null, VariableDeclarationStatement(), final, T, predictedScaled, MathArrays, buildArray, getField, y.length, VariableDeclarationStatement(), Array2DRowFieldMatrix, T, predictedNordsieck, null, VariableDeclarationStatement(), T, error, getField, getZero, add, 10, WhileStatement(while), error, subtract, 1.0, getReal, 0.0, ExpressionStatement(), predictedY, stepEnd, getState, VariableDeclarationStatement(), final, T, yDot, computeDerivatives, stepEnd, getTime, predictedY, ForStatement(for), int, j, 0, j, predictedScaled.length, j, ExpressionStatement(), predictedScaled, j, getStepSize, multiply, yDot, j, ExpressionStatement(), predictedNordsieck, updateHighOrderDerivativesPhase1, nordsieck, ExpressionStatement(), updateHighOrderDerivativesPhase2, scaled, predictedScaled, predictedNordsieck, ExpressionStatement(), error, errorEstimation, y, predictedY, predictedScaled, predictedNordsieck, IfStatement(if), error, subtract, 1.0, getReal, 0.0, VariableDeclarationStatement(), final, T, factor, computeStepGrowShrinkFactor, error, ExpressionStatement(), rescale, filterStep, getStepSize, multiply, factor, forward, false, ExpressionStatement(), stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, ExpressionStatement(), setStepStart, acceptStep, new, AdamsFieldStepInterpolator, T, getStepSize, stepEnd, predictedScaled, predictedNordsieck, forward, getStepStart, stepEnd, equations, getMapper, finalTime, ExpressionStatement(), scaled, predictedScaled, ExpressionStatement(), nordsieck, predictedNordsieck, IfStatement(if), isLastStep, ExpressionStatement(), System, arraycopy, predictedY, 0, y, 0, y.length, IfStatement(if), resetOccurred, ExpressionStatement(), start, equations, getStepStart, finalTime, VariableDeclarationStatement(), final, T, factor, computeStepGrowShrinkFactor, error, VariableDeclarationStatement(), final, T, scaledH, getStepSize, multiply, factor, VariableDeclarationStatement(), final, T, nextT, getStepStart, getTime, add, scaledH, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, subtract, finalTime, getReal, 0, nextT, subtract, finalTime, getReal, 0, VariableDeclarationStatement(), T, hNew, filterStep, scaledH, forward, nextIsLast, VariableDeclarationStatement(), final, T, filteredNextT, getStepStart, getTime, add, hNew, VariableDeclarationStatement(), final, boolean, filteredNextIsLast, forward, filteredNextT, subtract, finalTime, getReal, 0, filteredNextT, subtract, finalTime, getReal, 0, IfStatement(if), filteredNextIsLast, ExpressionStatement(), hNew, finalTime, subtract, getStepStart, getTime, ExpressionStatement(), rescale, hNew, ExpressionStatement(), stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, isLastStep, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, finalState, getStepStart, ExpressionStatement(), setStepStart, null, ExpressionStatement(), setStepSize, null, ReturnStatement(return), finalState]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthIntegrator:errorEstimation:double[]+double[]+double[]+RealMatrix#[VariableDeclarationStatement(), double, error, 0, ForStatement(for), int, i, 0, i, mainSetDimension, i, VariableDeclarationStatement(), final, double, yScale, FastMath, abs, predictedState, i, VariableDeclarationStatement(), final, double, tol, vecAbsoluteTolerance, null, scalAbsoluteTolerance, scalRelativeTolerance, yScale, vecAbsoluteTolerance, i, vecRelativeTolerance, i, yScale, VariableDeclarationStatement(), double, variation, 0, VariableDeclarationStatement(), int, sign, predictedNordsieck, getRowDimension, 2, 0, 1, 1, ForStatement(for), int, k, predictedNordsieck, getRowDimension, 1, k, 0, k, ExpressionStatement(), variation, sign, predictedNordsieck, getEntry, k, i, ExpressionStatement(), sign, sign, ExpressionStatement(), variation, predictedScaled, i, VariableDeclarationStatement(), final, double, ratio, predictedState, i, previousState, i, variation, tol, ExpressionStatement(), error, ratio, ratio, ReturnStatement(return), FastMath, sqrt, error, mainSetDimension]
org.apache.commons.math4.ode.nonstiff:AdamsBashforthIntegrator:integrate:ExpandableStatefulODE+double#[ExpressionStatement(), sanityChecks, equations, t, ExpressionStatement(), setEquations, equations, VariableDeclarationStatement(), final, boolean, forward, t, equations, getTime, VariableDeclarationStatement(), final, double, y, equations, getCompleteState, VariableDeclarationStatement(), final, double, yDot, double, y.length, VariableDeclarationStatement(), final, NordsieckStepInterpolator, interpolator, new, NordsieckStepInterpolator, ExpressionStatement(), interpolator, reinitialize, y, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, ExpressionStatement(), initIntegration, equations, getTime, y, t, ExpressionStatement(), start, equations, getTime, y, t, ExpressionStatement(), interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, ExpressionStatement(), interpolator, storeTime, stepStart, VariableDeclarationStatement(), double, hNew, stepSize, ExpressionStatement(), interpolator, rescale, hNew, ExpressionStatement(), isLastStep, false, DoStatement(do), ExpressionStatement(), interpolator, shift, VariableDeclarationStatement(), final, double, predictedY, double, y.length, VariableDeclarationStatement(), final, double, predictedScaled, double, y.length, VariableDeclarationStatement(), Array2DRowRealMatrix, predictedNordsieck, null, VariableDeclarationStatement(), double, error, 10, WhileStatement(while), error, 1.0, VariableDeclarationStatement(), final, double, stepEnd, stepStart, hNew, ExpressionStatement(), interpolator, storeTime, stepEnd, VariableDeclarationStatement(), final, ExpandableStatefulODE, expandable, getExpandable, VariableDeclarationStatement(), final, EquationsMapper, primary, expandable, getPrimaryMapper, ExpressionStatement(), primary, insertEquationData, interpolator, getInterpolatedState, predictedY, VariableDeclarationStatement(), int, index, 0, EnhancedForStatement(for), final, EquationsMapper, secondary, expandable, getSecondaryMappers, ExpressionStatement(), secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, index, predictedY, ExpressionStatement(), index, ExpressionStatement(), computeDerivatives, stepEnd, predictedY, yDot, ForStatement(for), int, j, 0, j, predictedScaled.length, j, ExpressionStatement(), predictedScaled, j, hNew, yDot, j, ExpressionStatement(), predictedNordsieck, updateHighOrderDerivativesPhase1, nordsieck, ExpressionStatement(), updateHighOrderDerivativesPhase2, scaled, predictedScaled, predictedNordsieck, ExpressionStatement(), error, errorEstimation, y, predictedY, predictedScaled, predictedNordsieck, IfStatement(if), error, 1.0, VariableDeclarationStatement(), final, double, factor, computeStepGrowShrinkFactor, error, ExpressionStatement(), hNew, filterStep, hNew, factor, forward, false, ExpressionStatement(), interpolator, rescale, hNew, ExpressionStatement(), stepSize, hNew, VariableDeclarationStatement(), final, double, stepEnd, stepStart, stepSize, ExpressionStatement(), interpolator, reinitialize, stepEnd, stepSize, predictedScaled, predictedNordsieck, ExpressionStatement(), interpolator, storeTime, stepEnd, ExpressionStatement(), System, arraycopy, predictedY, 0, y, 0, y.length, ExpressionStatement(), stepStart, acceptStep, interpolator, y, yDot, t, ExpressionStatement(), scaled, predictedScaled, ExpressionStatement(), nordsieck, predictedNordsieck, ExpressionStatement(), interpolator, reinitialize, stepEnd, stepSize, scaled, nordsieck, IfStatement(if), isLastStep, ExpressionStatement(), interpolator, storeTime, stepStart, IfStatement(if), resetOccurred, ExpressionStatement(), start, stepStart, y, t, ExpressionStatement(), interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, VariableDeclarationStatement(), final, double, factor, computeStepGrowShrinkFactor, error, VariableDeclarationStatement(), final, double, scaledH, stepSize, factor, VariableDeclarationStatement(), final, double, nextT, stepStart, scaledH, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, t, nextT, t, ExpressionStatement(), hNew, filterStep, scaledH, forward, nextIsLast, VariableDeclarationStatement(), final, double, filteredNextT, stepStart, hNew, VariableDeclarationStatement(), final, boolean, filteredNextIsLast, forward, filteredNextT, t, filteredNextT, t, IfStatement(if), filteredNextIsLast, ExpressionStatement(), hNew, t, stepStart, ExpressionStatement(), interpolator, rescale, hNew, isLastStep, ExpressionStatement(), equations, setTime, stepStart, ExpressionStatement(), equations, setCompleteState, y, ExpressionStatement(), resetInternalState]
org.apache.commons.math4.ode.nonstiff:AdamsFieldIntegrator:initializeHighOrderDerivatives:T+T[]+T[][]+T[][]#[ReturnStatement(return), transformer, initializeHighOrderDerivatives, h, t, y, yDot]
org.apache.commons.math4.ode.nonstiff:AdamsFieldIntegrator:updateHighOrderDerivativesPhase1:Array2DRowFieldMatrix<T>#[ReturnStatement(return), transformer, updateHighOrderDerivativesPhase1, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsFieldIntegrator:updateHighOrderDerivativesPhase2:T[]+T[]+Array2DRowFieldMatrix<T>#[ExpressionStatement(), transformer, updateHighOrderDerivativesPhase2, start, end, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsFieldStepInterpolator:create:boolean+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, AdamsFieldStepInterpolator, T, scalingH, reference, scaled, nordsieck, newForward, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:AdamsFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[ReturnStatement(return), taylor, reference, time, scalingH, scaled, nordsieck]
org.apache.commons.math4.ode.nonstiff:AdamsFieldStepInterpolator:taylor:FieldODEStateAndDerivative<S>+S+S+S[]+Array2DRowFieldMatrix<S>#[VariableDeclarationStatement(), final, S, x, time, subtract, reference, getTime, VariableDeclarationStatement(), final, S, normalizedAbscissa, x, divide, stepSize, VariableDeclarationStatement(), S, stateVariation, MathArrays, buildArray, time, getField, scaled.length, ExpressionStatement(), Arrays, fill, stateVariation, time, getField, getZero, VariableDeclarationStatement(), S, estimatedDerivatives, MathArrays, buildArray, time, getField, scaled.length, ExpressionStatement(), Arrays, fill, estimatedDerivatives, time, getField, getZero, VariableDeclarationStatement(), final, S, nData, nordsieck, getDataRef, ForStatement(for), int, i, nData.length, 1, i, 0, i, VariableDeclarationStatement(), final, int, order, i, 2, VariableDeclarationStatement(), final, S, nDataI, nData, i, VariableDeclarationStatement(), final, S, power, normalizedAbscissa, pow, order, ForStatement(for), int, j, 0, j, nDataI.length, j, VariableDeclarationStatement(), final, S, d, nDataI, j, multiply, power, ExpressionStatement(), stateVariation, j, stateVariation, j, add, d, ExpressionStatement(), estimatedDerivatives, j, estimatedDerivatives, j, add, d, multiply, order, VariableDeclarationStatement(), S, estimatedState, reference, getState, ForStatement(for), int, j, 0, j, stateVariation.length, j, ExpressionStatement(), stateVariation, j, stateVariation, j, add, scaled, j, multiply, normalizedAbscissa, ExpressionStatement(), estimatedState, j, estimatedState, j, add, stateVariation, j, ExpressionStatement(), estimatedDerivatives, j, estimatedDerivatives, j, add, scaled, j, multiply, normalizedAbscissa, divide, x, ReturnStatement(return), new, FieldODEStateAndDerivative, S, time, estimatedState, estimatedDerivatives]
org.apache.commons.math4.ode.nonstiff:AdamsIntegrator:initializeHighOrderDerivatives:double+double[]+double[][]+double[][]#[ReturnStatement(return), transformer, initializeHighOrderDerivatives, h, t, y, yDot]
org.apache.commons.math4.ode.nonstiff:AdamsIntegrator:updateHighOrderDerivativesPhase1:Array2DRowRealMatrix#[ReturnStatement(return), transformer, updateHighOrderDerivativesPhase1, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsIntegrator:updateHighOrderDerivativesPhase2:double[]+double[]+Array2DRowRealMatrix#[ExpressionStatement(), transformer, updateHighOrderDerivativesPhase2, start, end, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsMoultonFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[ExpressionStatement(), sanityChecks, initialState, finalTime, VariableDeclarationStatement(), final, T, t0, initialState, getTime, VariableDeclarationStatement(), final, T, y, equations, getMapper, mapState, initialState, ExpressionStatement(), setStepStart, initIntegration, equations, t0, y, finalTime, VariableDeclarationStatement(), final, boolean, forward, finalTime, subtract, initialState, getTime, getReal, 0, ExpressionStatement(), start, equations, getStepStart, finalTime, VariableDeclarationStatement(), FieldODEStateAndDerivative, T, stepStart, getStepStart, VariableDeclarationStatement(), FieldODEStateAndDerivative, T, stepEnd, AdamsFieldStepInterpolator, taylor, stepStart, stepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, ExpressionStatement(), setIsLastStep, false, DoStatement(do), VariableDeclarationStatement(), T, predictedY, null, VariableDeclarationStatement(), final, T, predictedScaled, MathArrays, buildArray, getField, y.length, VariableDeclarationStatement(), Array2DRowFieldMatrix, T, predictedNordsieck, null, VariableDeclarationStatement(), T, error, getField, getZero, add, 10, WhileStatement(while), error, subtract, 1.0, getReal, 0.0, ExpressionStatement(), predictedY, stepEnd, getState, VariableDeclarationStatement(), final, T, yDot, computeDerivatives, stepEnd, getTime, predictedY, ForStatement(for), int, j, 0, j, predictedScaled.length, j, ExpressionStatement(), predictedScaled, j, getStepSize, multiply, yDot, j, ExpressionStatement(), predictedNordsieck, updateHighOrderDerivativesPhase1, nordsieck, ExpressionStatement(), updateHighOrderDerivativesPhase2, scaled, predictedScaled, predictedNordsieck, ExpressionStatement(), error, predictedNordsieck, walkInOptimizedOrder, new, Corrector, y, predictedScaled, predictedY, IfStatement(if), error, subtract, 1.0, getReal, 0.0, VariableDeclarationStatement(), final, T, factor, computeStepGrowShrinkFactor, error, ExpressionStatement(), rescale, filterStep, getStepSize, multiply, factor, forward, false, ExpressionStatement(), stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, VariableDeclarationStatement(), final, T, correctedYDot, computeDerivatives, stepEnd, getTime, predictedY, VariableDeclarationStatement(), final, T, correctedScaled, MathArrays, buildArray, getField, y.length, ForStatement(for), int, j, 0, j, correctedScaled.length, j, ExpressionStatement(), correctedScaled, j, getStepSize, multiply, correctedYDot, j, ExpressionStatement(), updateHighOrderDerivativesPhase2, predictedScaled, correctedScaled, predictedNordsieck, ExpressionStatement(), stepEnd, new, FieldODEStateAndDerivative, T, stepEnd, getTime, predictedY, correctedYDot, ExpressionStatement(), setStepStart, acceptStep, new, AdamsFieldStepInterpolator, T, getStepSize, stepEnd, correctedScaled, predictedNordsieck, forward, getStepStart, stepEnd, equations, getMapper, finalTime, ExpressionStatement(), scaled, correctedScaled, ExpressionStatement(), nordsieck, predictedNordsieck, IfStatement(if), isLastStep, ExpressionStatement(), System, arraycopy, predictedY, 0, y, 0, y.length, IfStatement(if), resetOccurred, ExpressionStatement(), start, equations, getStepStart, finalTime, VariableDeclarationStatement(), final, T, factor, computeStepGrowShrinkFactor, error, VariableDeclarationStatement(), final, T, scaledH, getStepSize, multiply, factor, VariableDeclarationStatement(), final, T, nextT, getStepStart, getTime, add, scaledH, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, subtract, finalTime, getReal, 0, nextT, subtract, finalTime, getReal, 0, VariableDeclarationStatement(), T, hNew, filterStep, scaledH, forward, nextIsLast, VariableDeclarationStatement(), final, T, filteredNextT, getStepStart, getTime, add, hNew, VariableDeclarationStatement(), final, boolean, filteredNextIsLast, forward, filteredNextT, subtract, finalTime, getReal, 0, filteredNextT, subtract, finalTime, getReal, 0, IfStatement(if), filteredNextIsLast, ExpressionStatement(), hNew, finalTime, subtract, getStepStart, getTime, ExpressionStatement(), rescale, hNew, ExpressionStatement(), stepEnd, AdamsFieldStepInterpolator, taylor, getStepStart, getStepStart, getTime, add, getStepSize, getStepSize, scaled, nordsieck, isLastStep, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, finalState, getStepStart, ExpressionStatement(), setStepStart, null, ExpressionStatement(), setStepSize, null, ReturnStatement(return), finalState]
org.apache.commons.math4.ode.nonstiff:AdamsMoultonIntegrator:integrate:ExpandableStatefulODE+double#[ExpressionStatement(), sanityChecks, equations, t, ExpressionStatement(), setEquations, equations, VariableDeclarationStatement(), final, boolean, forward, t, equations, getTime, VariableDeclarationStatement(), final, double, y0, equations, getCompleteState, VariableDeclarationStatement(), final, double, y, y0, clone, VariableDeclarationStatement(), final, double, yDot, double, y.length, VariableDeclarationStatement(), final, double, yTmp, double, y.length, VariableDeclarationStatement(), final, double, predictedScaled, double, y.length, VariableDeclarationStatement(), Array2DRowRealMatrix, nordsieckTmp, null, VariableDeclarationStatement(), final, NordsieckStepInterpolator, interpolator, new, NordsieckStepInterpolator, ExpressionStatement(), interpolator, reinitialize, y, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, ExpressionStatement(), initIntegration, equations, getTime, y0, t, ExpressionStatement(), start, equations, getTime, y, t, ExpressionStatement(), interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, ExpressionStatement(), interpolator, storeTime, stepStart, VariableDeclarationStatement(), double, hNew, stepSize, ExpressionStatement(), interpolator, rescale, hNew, ExpressionStatement(), isLastStep, false, DoStatement(do), VariableDeclarationStatement(), double, error, 10, WhileStatement(while), error, 1.0, ExpressionStatement(), stepSize, hNew, VariableDeclarationStatement(), final, double, stepEnd, stepStart, stepSize, ExpressionStatement(), interpolator, setInterpolatedTime, stepEnd, VariableDeclarationStatement(), final, ExpandableStatefulODE, expandable, getExpandable, VariableDeclarationStatement(), final, EquationsMapper, primary, expandable, getPrimaryMapper, ExpressionStatement(), primary, insertEquationData, interpolator, getInterpolatedState, yTmp, VariableDeclarationStatement(), int, index, 0, EnhancedForStatement(for), final, EquationsMapper, secondary, expandable, getSecondaryMappers, ExpressionStatement(), secondary, insertEquationData, interpolator, getInterpolatedSecondaryState, index, yTmp, ExpressionStatement(), index, ExpressionStatement(), computeDerivatives, stepEnd, yTmp, yDot, ForStatement(for), int, j, 0, j, y0.length, j, ExpressionStatement(), predictedScaled, j, stepSize, yDot, j, ExpressionStatement(), nordsieckTmp, updateHighOrderDerivativesPhase1, nordsieck, ExpressionStatement(), updateHighOrderDerivativesPhase2, scaled, predictedScaled, nordsieckTmp, ExpressionStatement(), error, nordsieckTmp, walkInOptimizedOrder, new, Corrector, y, predictedScaled, yTmp, IfStatement(if), error, 1.0, VariableDeclarationStatement(), final, double, factor, computeStepGrowShrinkFactor, error, ExpressionStatement(), hNew, filterStep, stepSize, factor, forward, false, ExpressionStatement(), interpolator, rescale, hNew, VariableDeclarationStatement(), final, double, stepEnd, stepStart, stepSize, ExpressionStatement(), computeDerivatives, stepEnd, yTmp, yDot, VariableDeclarationStatement(), final, double, correctedScaled, double, y0.length, ForStatement(for), int, j, 0, j, y0.length, j, ExpressionStatement(), correctedScaled, j, stepSize, yDot, j, ExpressionStatement(), updateHighOrderDerivativesPhase2, predictedScaled, correctedScaled, nordsieckTmp, ExpressionStatement(), System, arraycopy, yTmp, 0, y, 0, y.length, ExpressionStatement(), interpolator, reinitialize, stepEnd, stepSize, correctedScaled, nordsieckTmp, ExpressionStatement(), interpolator, storeTime, stepStart, ExpressionStatement(), interpolator, shift, ExpressionStatement(), interpolator, storeTime, stepEnd, ExpressionStatement(), stepStart, acceptStep, interpolator, y, yDot, t, ExpressionStatement(), scaled, correctedScaled, ExpressionStatement(), nordsieck, nordsieckTmp, IfStatement(if), isLastStep, ExpressionStatement(), interpolator, storeTime, stepStart, IfStatement(if), resetOccurred, ExpressionStatement(), start, stepStart, y, t, ExpressionStatement(), interpolator, reinitialize, stepStart, stepSize, scaled, nordsieck, VariableDeclarationStatement(), final, double, factor, computeStepGrowShrinkFactor, error, VariableDeclarationStatement(), final, double, scaledH, stepSize, factor, VariableDeclarationStatement(), final, double, nextT, stepStart, scaledH, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, t, nextT, t, ExpressionStatement(), hNew, filterStep, scaledH, forward, nextIsLast, VariableDeclarationStatement(), final, double, filteredNextT, stepStart, hNew, VariableDeclarationStatement(), final, boolean, filteredNextIsLast, forward, filteredNextT, t, filteredNextT, t, IfStatement(if), filteredNextIsLast, ExpressionStatement(), hNew, t, stepStart, ExpressionStatement(), interpolator, rescale, hNew, isLastStep, ExpressionStatement(), equations, setTime, stepStart, ExpressionStatement(), equations, setCompleteState, y, ExpressionStatement(), resetInternalState]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:getInstance:Field<T>+int#[SynchronizedStatement(), CACHE, VariableDeclarationStatement(), Map, Field, RealFieldElement, AdamsNordsieckFieldTransformer, RealFieldElement, map, CACHE, get, nSteps, IfStatement(if), map, null, ExpressionStatement(), map, new, HashMap, Field, RealFieldElement, AdamsNordsieckFieldTransformer, RealFieldElement, ExpressionStatement(), CACHE, put, nSteps, map, VariableDeclarationStatement(), SuppressWarnings, "unchecked", AdamsNordsieckFieldTransformer, T, t, AdamsNordsieckFieldTransformer, T, map, get, field, IfStatement(if), t, null, ExpressionStatement(), t, new, AdamsNordsieckFieldTransformer, T, field, nSteps, ExpressionStatement(), map, put, field, t, ReturnStatement(return), t]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:buildP:int#[VariableDeclarationStatement(), final, T, pData, MathArrays, buildArray, field, rows, rows, ForStatement(for), int, i, 1, i, pData.length, i, VariableDeclarationStatement(), final, T, pI, pData, i, 1, VariableDeclarationStatement(), final, int, factor, i, VariableDeclarationStatement(), T, aj, field, getZero, add, factor, ForStatement(for), int, j, 1, j, pI.length, j, ExpressionStatement(), pI, j, 1, aj, multiply, j, 1, ExpressionStatement(), aj, aj, multiply, factor, ReturnStatement(return), new, Array2DRowFieldMatrix, T, pData, false]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:initializeHighOrderDerivatives:T+T[]+T[][]+T[][]#[VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, field, c1.length, 1, c1.length, 1, VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, field, c1.length, 1, y, 0, length, VariableDeclarationStatement(), final, T, y0, y, 0, VariableDeclarationStatement(), final, T, yDot0, yDot, 0, ForStatement(for), int, i, 1, i, y.length, i, VariableDeclarationStatement(), final, T, di, t, i, subtract, t, 0, VariableDeclarationStatement(), final, T, ratio, di, divide, h, VariableDeclarationStatement(), T, dikM1Ohk, h, reciprocal, VariableDeclarationStatement(), final, T, aI, a, 2, i, 2, VariableDeclarationStatement(), final, T, aDotI, 2, i, 1, a.length, a, 2, i, 1, null, ForStatement(for), int, j, 0, j, aI.length, j, ExpressionStatement(), dikM1Ohk, dikM1Ohk, multiply, ratio, ExpressionStatement(), aI, j, di, multiply, dikM1Ohk, IfStatement(if), aDotI, null, ExpressionStatement(), aDotI, j, dikM1Ohk, multiply, j, 2, VariableDeclarationStatement(), final, T, yI, y, i, VariableDeclarationStatement(), final, T, yDotI, yDot, i, VariableDeclarationStatement(), final, T, bI, b, 2, i, 2, VariableDeclarationStatement(), final, T, bDotI, 2, i, 1, b.length, b, 2, i, 1, null, ForStatement(for), int, j, 0, j, yI.length, j, ExpressionStatement(), bI, j, yI, j, subtract, y0, j, subtract, di, multiply, yDot0, j, IfStatement(if), bDotI, null, ExpressionStatement(), bDotI, j, yDotI, j, subtract, yDot0, j, VariableDeclarationStatement(), final, FieldLUDecomposition, T, decomposition, new, FieldLUDecomposition, T, new, Array2DRowFieldMatrix, T, a, false, VariableDeclarationStatement(), final, FieldMatrix, T, x, decomposition, getSolver, solve, new, Array2DRowFieldMatrix, T, b, false, VariableDeclarationStatement(), final, Array2DRowFieldMatrix, T, truncatedX, new, Array2DRowFieldMatrix, T, field, x, getRowDimension, 1, x, getColumnDimension, ForStatement(for), int, i, 0, i, truncatedX, getRowDimension, i, ForStatement(for), int, j, 0, j, truncatedX, getColumnDimension, j, ExpressionStatement(), truncatedX, setEntry, i, j, x, getEntry, i, j, ReturnStatement(return), truncatedX]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:updateHighOrderDerivativesPhase1:Array2DRowFieldMatrix<T>#[ReturnStatement(return), update, multiply, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckFieldTransformer:updateHighOrderDerivativesPhase2:T[]+T[]+Array2DRowFieldMatrix<T>#[VariableDeclarationStatement(), final, T, data, highOrder, getDataRef, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, T, dataI, data, i, VariableDeclarationStatement(), final, T, c1I, c1, i, ForStatement(for), int, j, 0, j, dataI.length, j, ExpressionStatement(), dataI, j, dataI, j, add, c1I, multiply, start, j, subtract, end, j]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:getInstance:int#[SynchronizedStatement(), CACHE, VariableDeclarationStatement(), AdamsNordsieckTransformer, t, CACHE, get, nSteps, IfStatement(if), t, null, ExpressionStatement(), t, new, AdamsNordsieckTransformer, nSteps, ExpressionStatement(), CACHE, put, nSteps, t, ReturnStatement(return), t]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:getNSteps:null#[ReturnStatement(return), c1.length]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:buildP:int#[VariableDeclarationStatement(), final, BigFraction, pData, BigFraction, rows, rows, ForStatement(for), int, i, 1, i, pData.length, i, VariableDeclarationStatement(), final, BigFraction, pI, pData, i, 1, VariableDeclarationStatement(), final, int, factor, i, VariableDeclarationStatement(), int, aj, factor, ForStatement(for), int, j, 1, j, pI.length, j, ExpressionStatement(), pI, j, 1, new, BigFraction, aj, j, 1, ExpressionStatement(), aj, factor, ReturnStatement(return), new, Array2DRowFieldMatrix, BigFraction, pData, false]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:initializeHighOrderDerivatives:double+double[]+double[][]+double[][]#[VariableDeclarationStatement(), final, double, a, double, c1.length, 1, c1.length, 1, VariableDeclarationStatement(), final, double, b, double, c1.length, 1, y, 0, length, VariableDeclarationStatement(), final, double, y0, y, 0, VariableDeclarationStatement(), final, double, yDot0, yDot, 0, ForStatement(for), int, i, 1, i, y.length, i, VariableDeclarationStatement(), final, double, di, t, i, t, 0, VariableDeclarationStatement(), final, double, ratio, di, h, VariableDeclarationStatement(), double, dikM1Ohk, 1, h, VariableDeclarationStatement(), final, double, aI, a, 2, i, 2, VariableDeclarationStatement(), final, double, aDotI, 2, i, 1, a.length, a, 2, i, 1, null, ForStatement(for), int, j, 0, j, aI.length, j, ExpressionStatement(), dikM1Ohk, ratio, ExpressionStatement(), aI, j, di, dikM1Ohk, IfStatement(if), aDotI, null, ExpressionStatement(), aDotI, j, j, 2, dikM1Ohk, VariableDeclarationStatement(), final, double, yI, y, i, VariableDeclarationStatement(), final, double, yDotI, yDot, i, VariableDeclarationStatement(), final, double, bI, b, 2, i, 2, VariableDeclarationStatement(), final, double, bDotI, 2, i, 1, b.length, b, 2, i, 1, null, ForStatement(for), int, j, 0, j, yI.length, j, ExpressionStatement(), bI, j, yI, j, y0, j, di, yDot0, j, IfStatement(if), bDotI, null, ExpressionStatement(), bDotI, j, yDotI, j, yDot0, j, VariableDeclarationStatement(), final, QRDecomposition, decomposition, new, QRDecomposition, new, Array2DRowRealMatrix, a, false, VariableDeclarationStatement(), final, RealMatrix, x, decomposition, getSolver, solve, new, Array2DRowRealMatrix, b, false, VariableDeclarationStatement(), final, Array2DRowRealMatrix, truncatedX, new, Array2DRowRealMatrix, x, getRowDimension, 1, x, getColumnDimension, ForStatement(for), int, i, 0, i, truncatedX, getRowDimension, i, ForStatement(for), int, j, 0, j, truncatedX, getColumnDimension, j, ExpressionStatement(), truncatedX, setEntry, i, j, x, getEntry, i, j, ReturnStatement(return), truncatedX]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:updateHighOrderDerivativesPhase1:Array2DRowRealMatrix#[ReturnStatement(return), update, multiply, highOrder]
org.apache.commons.math4.ode.nonstiff:AdamsNordsieckTransformer:updateHighOrderDerivativesPhase2:double[]+double[]+Array2DRowRealMatrix#[VariableDeclarationStatement(), final, double, data, highOrder, getDataRef, ForStatement(for), int, i, 0, i, data.length, i, VariableDeclarationStatement(), final, double, dataI, data, i, VariableDeclarationStatement(), final, double, c1I, c1, i, ForStatement(for), int, j, 0, j, dataI.length, j, ExpressionStatement(), dataI, j, c1I, start, j, end, j]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:setStepSizeControl:double+double+double+double#[ExpressionStatement(), minStep, getField, getZero, add, FastMath, abs, minimalStep, ExpressionStatement(), maxStep, getField, getZero, add, FastMath, abs, maximalStep, ExpressionStatement(), initialStep, getField, getOne, negate, ExpressionStatement(), scalAbsoluteTolerance, absoluteTolerance, ExpressionStatement(), scalRelativeTolerance, relativeTolerance, ExpressionStatement(), vecAbsoluteTolerance, null, ExpressionStatement(), vecRelativeTolerance, null]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:setStepSizeControl:double+double+double[]+double[]#[ExpressionStatement(), minStep, getField, getZero, add, FastMath, abs, minimalStep, ExpressionStatement(), maxStep, getField, getZero, add, FastMath, abs, maximalStep, ExpressionStatement(), initialStep, getField, getOne, negate, ExpressionStatement(), scalAbsoluteTolerance, 0, ExpressionStatement(), scalRelativeTolerance, 0, ExpressionStatement(), vecAbsoluteTolerance, absoluteTolerance, clone, ExpressionStatement(), vecRelativeTolerance, relativeTolerance, clone]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:setInitialStepSize:T#[IfStatement(if), initialStepSize, subtract, minStep, getReal, 0, initialStepSize, subtract, maxStep, getReal, 0, ExpressionStatement(), initialStep, getField, getOne, negate, ExpressionStatement(), initialStep, initialStepSize]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:sanityChecks:FieldODEState<T>+T#[ExpressionStatement(), super, sanityChecks, eqn, t, ExpressionStatement(), mainSetDimension, eqn, getStateDimension, IfStatement(if), vecAbsoluteTolerance, null, vecAbsoluteTolerance.length, mainSetDimension, ThrowStatement(throw), new, DimensionMismatchException, mainSetDimension, vecAbsoluteTolerance.length, IfStatement(if), vecRelativeTolerance, null, vecRelativeTolerance.length, mainSetDimension, ThrowStatement(throw), new, DimensionMismatchException, mainSetDimension, vecRelativeTolerance.length]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:initializeStep:boolean+int+T[]+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[IfStatement(if), initialStep, getReal, 0, ReturnStatement(return), forward, initialStep, initialStep, negate, VariableDeclarationStatement(), final, T, y0, mapper, mapState, state0, VariableDeclarationStatement(), final, T, yDot0, mapper, mapDerivative, state0, VariableDeclarationStatement(), T, yOnScale2, getField, getZero, VariableDeclarationStatement(), T, yDotOnScale2, getField, getZero, ForStatement(for), int, j, 0, j, scale.length, j, VariableDeclarationStatement(), final, T, ratio, y0, j, divide, scale, j, ExpressionStatement(), yOnScale2, yOnScale2, add, ratio, multiply, ratio, VariableDeclarationStatement(), final, T, ratioDot, yDot0, j, divide, scale, j, ExpressionStatement(), yDotOnScale2, yDotOnScale2, add, ratioDot, multiply, ratioDot, VariableDeclarationStatement(), T, h, yOnScale2, getReal, 1.0e-10, yDotOnScale2, getReal, 1.0e-10, getField, getZero, add, 1.0e-6, yOnScale2, divide, yDotOnScale2, sqrt, multiply, 0.01, IfStatement(if), forward, ExpressionStatement(), h, h, negate, VariableDeclarationStatement(), final, T, y1, MathArrays, buildArray, getField, y0.length, ForStatement(for), int, j, 0, j, y0.length, j, ExpressionStatement(), y1, j, y0, j, add, yDot0, j, multiply, h, VariableDeclarationStatement(), final, T, yDot1, computeDerivatives, state0, getTime, add, h, y1, VariableDeclarationStatement(), T, yDDotOnScale, getField, getZero, ForStatement(for), int, j, 0, j, scale.length, j, VariableDeclarationStatement(), final, T, ratioDotDot, yDot1, j, subtract, yDot0, j, divide, scale, j, ExpressionStatement(), yDDotOnScale, yDDotOnScale, add, ratioDotDot, multiply, ratioDotDot, ExpressionStatement(), yDDotOnScale, yDDotOnScale, sqrt, divide, h, VariableDeclarationStatement(), final, T, maxInv2, MathUtils, max, yDotOnScale2, sqrt, yDDotOnScale, VariableDeclarationStatement(), final, T, h1, maxInv2, getReal, 1.0e-15, MathUtils, max, getField, getZero, add, 1.0e-6, h, abs, multiply, 0.001, maxInv2, multiply, 100, reciprocal, pow, 1.0, order, ExpressionStatement(), h, MathUtils, min, h, abs, multiply, 100, h1, ExpressionStatement(), h, MathUtils, max, h, state0, getTime, abs, multiply, 1.0e-12, ExpressionStatement(), h, MathUtils, max, minStep, MathUtils, min, maxStep, h, IfStatement(if), forward, ExpressionStatement(), h, h, negate, ReturnStatement(return), h]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:filterStep:T+boolean+boolean#[VariableDeclarationStatement(), T, filteredH, h, IfStatement(if), h, abs, subtract, minStep, getReal, 0, IfStatement(if), acceptSmall, ExpressionStatement(), filteredH, forward, minStep, minStep, negate, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, h, abs, getReal, minStep, getReal, true, IfStatement(if), filteredH, subtract, maxStep, getReal, 0, ExpressionStatement(), filteredH, maxStep, IfStatement(if), filteredH, add, maxStep, getReal, 0, ExpressionStatement(), filteredH, maxStep, negate, ReturnStatement(return), filteredH]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:resetInternalState:null#[ExpressionStatement(), setStepStart, null, ExpressionStatement(), setStepSize, minStep, multiply, maxStep, sqrt]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:getMinStep:null#[ReturnStatement(return), minStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeFieldIntegrator:getMaxStep:null#[ReturnStatement(return), maxStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:setStepSizeControl:double+double+double+double#[ExpressionStatement(), minStep, FastMath, abs, minimalStep, ExpressionStatement(), maxStep, FastMath, abs, maximalStep, ExpressionStatement(), initialStep, 1, ExpressionStatement(), scalAbsoluteTolerance, absoluteTolerance, ExpressionStatement(), scalRelativeTolerance, relativeTolerance, ExpressionStatement(), vecAbsoluteTolerance, null, ExpressionStatement(), vecRelativeTolerance, null]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:setStepSizeControl:double+double+double[]+double[]#[ExpressionStatement(), minStep, FastMath, abs, minimalStep, ExpressionStatement(), maxStep, FastMath, abs, maximalStep, ExpressionStatement(), initialStep, 1, ExpressionStatement(), scalAbsoluteTolerance, 0, ExpressionStatement(), scalRelativeTolerance, 0, ExpressionStatement(), vecAbsoluteTolerance, absoluteTolerance, clone, ExpressionStatement(), vecRelativeTolerance, relativeTolerance, clone]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:setInitialStepSize:double#[IfStatement(if), initialStepSize, minStep, initialStepSize, maxStep, ExpressionStatement(), initialStep, 1.0, ExpressionStatement(), initialStep, initialStepSize]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:sanityChecks:ExpandableStatefulODE+double#[ExpressionStatement(), super, sanityChecks, equations, t, ExpressionStatement(), mainSetDimension, equations, getPrimaryMapper, getDimension, IfStatement(if), vecAbsoluteTolerance, null, vecAbsoluteTolerance.length, mainSetDimension, ThrowStatement(throw), new, DimensionMismatchException, mainSetDimension, vecAbsoluteTolerance.length, IfStatement(if), vecRelativeTolerance, null, vecRelativeTolerance.length, mainSetDimension, ThrowStatement(throw), new, DimensionMismatchException, mainSetDimension, vecRelativeTolerance.length]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:initializeStep:boolean+int+double[]+double+double[]+double[]+double[]+double[]#[IfStatement(if), initialStep, 0, ReturnStatement(return), forward, initialStep, initialStep, VariableDeclarationStatement(), double, ratio, VariableDeclarationStatement(), double, yOnScale2, 0, VariableDeclarationStatement(), double, yDotOnScale2, 0, ForStatement(for), int, j, 0, j, scale.length, j, ExpressionStatement(), ratio, y0, j, scale, j, ExpressionStatement(), yOnScale2, ratio, ratio, ExpressionStatement(), ratio, yDot0, j, scale, j, ExpressionStatement(), yDotOnScale2, ratio, ratio, VariableDeclarationStatement(), double, h, yOnScale2, 1.0e-10, yDotOnScale2, 1.0e-10, 1.0e-6, 0.01, FastMath, sqrt, yOnScale2, yDotOnScale2, IfStatement(if), forward, ExpressionStatement(), h, h, ForStatement(for), int, j, 0, j, y0.length, j, ExpressionStatement(), y1, j, y0, j, h, yDot0, j, ExpressionStatement(), computeDerivatives, t0, h, y1, yDot1, VariableDeclarationStatement(), double, yDDotOnScale, 0, ForStatement(for), int, j, 0, j, scale.length, j, ExpressionStatement(), ratio, yDot1, j, yDot0, j, scale, j, ExpressionStatement(), yDDotOnScale, ratio, ratio, ExpressionStatement(), yDDotOnScale, FastMath, sqrt, yDDotOnScale, h, VariableDeclarationStatement(), final, double, maxInv2, FastMath, max, FastMath, sqrt, yDotOnScale2, yDDotOnScale, VariableDeclarationStatement(), final, double, h1, maxInv2, 1.0e-15, FastMath, max, 1.0e-6, 0.001, FastMath, abs, h, FastMath, pow, 0.01, maxInv2, 1.0, order, ExpressionStatement(), h, FastMath, min, 100.0, FastMath, abs, h, h1, ExpressionStatement(), h, FastMath, max, h, 1.0e-12, FastMath, abs, t0, IfStatement(if), h, getMinStep, ExpressionStatement(), h, getMinStep, IfStatement(if), h, getMaxStep, ExpressionStatement(), h, getMaxStep, IfStatement(if), forward, ExpressionStatement(), h, h, ReturnStatement(return), h]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:filterStep:double+boolean+boolean#[VariableDeclarationStatement(), double, filteredH, h, IfStatement(if), FastMath, abs, h, minStep, IfStatement(if), acceptSmall, ExpressionStatement(), filteredH, forward, minStep, minStep, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, FastMath, abs, h, minStep, true, IfStatement(if), filteredH, maxStep, ExpressionStatement(), filteredH, maxStep, IfStatement(if), filteredH, maxStep, ExpressionStatement(), filteredH, maxStep, ReturnStatement(return), filteredH]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:getCurrentStepStart:null#[ReturnStatement(return), stepStart]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:resetInternalState:null#[ExpressionStatement(), stepStart, Double.NaN, ExpressionStatement(), stepSize, FastMath, sqrt, minStep, maxStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:getMinStep:null#[ReturnStatement(return), minStep]
org.apache.commons.math4.ode.nonstiff:AdaptiveStepsizeIntegrator:getMaxStep:null#[ReturnStatement(return), maxStep]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 3, ExpressionStatement(), c, 0, getField, getOne, multiply, 0.5, ExpressionStatement(), c, 1, c, 0, ExpressionStatement(), c, 2, getField, getOne, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 3, 1, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), a, i, MathArrays, buildArray, getField, i, 1, ExpressionStatement(), a, 0, 0, fraction, 1, 2, ExpressionStatement(), a, 1, 0, getField, getZero, ExpressionStatement(), a, 1, 1, a, 0, 0, ExpressionStatement(), a, 2, 0, getField, getZero, ExpressionStatement(), a, 2, 1, getField, getZero, ExpressionStatement(), a, 2, 2, getField, getOne, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 4, ExpressionStatement(), b, 0, fraction, 1, 6, ExpressionStatement(), b, 1, fraction, 1, 3, ExpressionStatement(), b, 2, b, 1, ExpressionStatement(), b, 3, b, 0, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, ClassicalRungeKuttaFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, ClassicalRungeKuttaFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, one, time, getField, getOne, VariableDeclarationStatement(), final, T, oneMinusTheta, one, subtract, theta, VariableDeclarationStatement(), final, T, oneMinus2Theta, one, subtract, theta, multiply, 2, VariableDeclarationStatement(), final, T, coeffDot1, oneMinusTheta, multiply, oneMinus2Theta, VariableDeclarationStatement(), final, T, coeffDot23, theta, multiply, oneMinusTheta, multiply, 2, VariableDeclarationStatement(), final, T, coeffDot4, theta, multiply, oneMinus2Theta, negate, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, fourTheta2, theta, multiply, theta, multiply, 4, VariableDeclarationStatement(), final, T, s, thetaH, divide, 6.0, VariableDeclarationStatement(), final, T, coeff1, s, multiply, fourTheta2, subtract, theta, multiply, 9, add, 6, VariableDeclarationStatement(), final, T, coeff23, s, multiply, theta, multiply, 6, subtract, fourTheta2, VariableDeclarationStatement(), final, T, coeff4, s, multiply, fourTheta2, subtract, theta, multiply, 3, ExpressionStatement(), interpolatedState, previousStateLinearCombination, coeff1, coeff23, coeff23, coeff4, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot23, coeffDot23, coeffDot4, VariableDeclarationStatement(), final, T, fourTheta, theta, multiply, 4, VariableDeclarationStatement(), final, T, s, oneMinusThetaH, divide, 6, VariableDeclarationStatement(), final, T, coeff1, s, multiply, theta, multiply, fourTheta, negate, add, 5, subtract, 1, VariableDeclarationStatement(), final, T, coeff23, s, multiply, theta, multiply, fourTheta, subtract, 2, subtract, 2, VariableDeclarationStatement(), final, T, coeff4, s, multiply, theta, multiply, fourTheta, negate, subtract, 1, subtract, 1, ExpressionStatement(), interpolatedState, currentStateLinearCombination, coeff1, coeff23, coeff23, coeff4, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot23, coeffDot23, coeffDot4, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaStepInterpolator:doCopy:null#[ReturnStatement(return), new, ClassicalRungeKuttaStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:ClassicalRungeKuttaStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, double, oneMinusTheta, 1, theta, VariableDeclarationStatement(), final, double, oneMinus2Theta, 1, 2, theta, VariableDeclarationStatement(), final, double, coeffDot1, oneMinusTheta, oneMinus2Theta, VariableDeclarationStatement(), final, double, coeffDot23, 2, theta, oneMinusTheta, VariableDeclarationStatement(), final, double, coeffDot4, theta, oneMinus2Theta, IfStatement(if), previousState, null, theta, 0.5, VariableDeclarationStatement(), final, double, fourTheta2, 4, theta, theta, VariableDeclarationStatement(), final, double, s, theta, h, 6.0, VariableDeclarationStatement(), final, double, coeff1, s, 6, 9, theta, fourTheta2, VariableDeclarationStatement(), final, double, coeff23, s, 6, theta, fourTheta2, VariableDeclarationStatement(), final, double, coeff4, s, 3, theta, fourTheta2, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot23, yDotK, 1, i, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, ExpressionStatement(), interpolatedState, i, previousState, i, coeff1, yDot1, coeff23, yDot23, coeff4, yDot4, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot23, yDot23, coeffDot4, yDot4, VariableDeclarationStatement(), final, double, fourTheta, 4, theta, VariableDeclarationStatement(), final, double, s, oneMinusThetaH, 6.0, VariableDeclarationStatement(), final, double, coeff1, s, fourTheta, 5, theta, 1, VariableDeclarationStatement(), final, double, coeff23, s, fourTheta, 2, theta, 2, VariableDeclarationStatement(), final, double, coeff4, s, fourTheta, 1, theta, 1, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot23, yDotK, 1, i, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, ExpressionStatement(), interpolatedState, i, currentState, i, coeff1, yDot1, coeff23, yDot23, coeff4, yDot4, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot23, yDot23, coeffDot4, yDot4]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 6, ExpressionStatement(), c, 0, fraction, 1, 5, ExpressionStatement(), c, 1, fraction, 3, 10, ExpressionStatement(), c, 2, fraction, 4, 5, ExpressionStatement(), c, 3, fraction, 8, 9, ExpressionStatement(), c, 4, getField, getOne, ExpressionStatement(), c, 5, getField, getOne, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 6, 1, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), a, i, MathArrays, buildArray, getField, i, 1, ExpressionStatement(), a, 0, 0, fraction, 1, 5, ExpressionStatement(), a, 1, 0, fraction, 3, 40, ExpressionStatement(), a, 1, 1, fraction, 9, 40, ExpressionStatement(), a, 2, 0, fraction, 44, 45, ExpressionStatement(), a, 2, 1, fraction, 56, 15, ExpressionStatement(), a, 2, 2, fraction, 32, 9, ExpressionStatement(), a, 3, 0, fraction, 19372, 6561, ExpressionStatement(), a, 3, 1, fraction, 25360, 2187, ExpressionStatement(), a, 3, 2, fraction, 64448, 6561, ExpressionStatement(), a, 3, 3, fraction, 212, 729, ExpressionStatement(), a, 4, 0, fraction, 9017, 3168, ExpressionStatement(), a, 4, 1, fraction, 355, 33, ExpressionStatement(), a, 4, 2, fraction, 46732, 5247, ExpressionStatement(), a, 4, 3, fraction, 49, 176, ExpressionStatement(), a, 4, 4, fraction, 5103, 18656, ExpressionStatement(), a, 5, 0, fraction, 35, 384, ExpressionStatement(), a, 5, 1, getField, getZero, ExpressionStatement(), a, 5, 2, fraction, 500, 1113, ExpressionStatement(), a, 5, 3, fraction, 125, 192, ExpressionStatement(), a, 5, 4, fraction, 2187, 6784, ExpressionStatement(), a, 5, 5, fraction, 11, 84, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 7, ExpressionStatement(), b, 0, fraction, 35, 384, ExpressionStatement(), b, 1, getField, getZero, ExpressionStatement(), b, 2, fraction, 500, 1113, ExpressionStatement(), b, 3, fraction, 125, 192, ExpressionStatement(), b, 4, fraction, 2187, 6784, ExpressionStatement(), b, 5, fraction, 11, 84, ExpressionStatement(), b, 6, getField, getZero, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, DormandPrince54FieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:getOrder:null#[ReturnStatement(return), 5]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldIntegrator:estimateError:T[][]+T[]+T[]+T#[VariableDeclarationStatement(), T, error, getField, getZero, ForStatement(for), int, j, 0, j, mainSetDimension, j, VariableDeclarationStatement(), final, T, errSum, yDotK, 0, j, multiply, e1, add, yDotK, 2, j, multiply, e3, add, yDotK, 3, j, multiply, e4, add, yDotK, 4, j, multiply, e5, add, yDotK, 5, j, multiply, e6, add, yDotK, 6, j, multiply, e7, VariableDeclarationStatement(), final, T, yScale, MathUtils, max, y0, j, abs, y1, j, abs, VariableDeclarationStatement(), final, T, tol, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, j, add, vecAbsoluteTolerance, j, VariableDeclarationStatement(), final, T, ratio, h, multiply, errSum, divide, tol, ExpressionStatement(), error, error, add, ratio, multiply, ratio, ReturnStatement(return), error, divide, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, DormandPrince54FieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince54FieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, one, time, getField, getOne, VariableDeclarationStatement(), final, T, eta, one, subtract, theta, VariableDeclarationStatement(), final, T, twoTheta, theta, multiply, 2, VariableDeclarationStatement(), final, T, dot2, one, subtract, twoTheta, VariableDeclarationStatement(), final, T, dot3, theta, multiply, theta, multiply, 3, add, 2, VariableDeclarationStatement(), final, T, dot4, twoTheta, multiply, theta, multiply, twoTheta, subtract, 3, add, 1, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, f1, thetaH, VariableDeclarationStatement(), final, T, f2, f1, multiply, eta, VariableDeclarationStatement(), final, T, f3, f2, multiply, theta, VariableDeclarationStatement(), final, T, f4, f3, multiply, eta, VariableDeclarationStatement(), final, T, coeff0, f1, multiply, a70, subtract, f2, multiply, a70, subtract, 1, add, f3, multiply, a70, multiply, 2, subtract, 1, add, f4, multiply, d0, VariableDeclarationStatement(), final, T, coeff1, time, getField, getZero, VariableDeclarationStatement(), final, T, coeff2, f1, multiply, a72, subtract, f2, multiply, a72, add, f3, multiply, a72, multiply, 2, add, f4, multiply, d2, VariableDeclarationStatement(), final, T, coeff3, f1, multiply, a73, subtract, f2, multiply, a73, add, f3, multiply, a73, multiply, 2, add, f4, multiply, d3, VariableDeclarationStatement(), final, T, coeff4, f1, multiply, a74, subtract, f2, multiply, a74, add, f3, multiply, a74, multiply, 2, add, f4, multiply, d4, VariableDeclarationStatement(), final, T, coeff5, f1, multiply, a75, subtract, f2, multiply, a75, add, f3, multiply, a75, multiply, 2, add, f4, multiply, d5, VariableDeclarationStatement(), final, T, coeff6, f4, multiply, d6, subtract, f3, VariableDeclarationStatement(), final, T, coeffDot0, a70, subtract, dot2, multiply, a70, subtract, 1, add, dot3, multiply, a70, multiply, 2, subtract, 1, add, dot4, multiply, d0, VariableDeclarationStatement(), final, T, coeffDot1, time, getField, getZero, VariableDeclarationStatement(), final, T, coeffDot2, a72, subtract, dot2, multiply, a72, add, dot3, multiply, a72, multiply, 2, add, dot4, multiply, d2, VariableDeclarationStatement(), final, T, coeffDot3, a73, subtract, dot2, multiply, a73, add, dot3, multiply, a73, multiply, 2, add, dot4, multiply, d3, VariableDeclarationStatement(), final, T, coeffDot4, a74, subtract, dot2, multiply, a74, add, dot3, multiply, a74, multiply, 2, add, dot4, multiply, d4, VariableDeclarationStatement(), final, T, coeffDot5, a75, subtract, dot2, multiply, a75, add, dot3, multiply, a75, multiply, 2, add, dot4, multiply, d5, VariableDeclarationStatement(), final, T, coeffDot6, dot4, multiply, d6, subtract, dot3, ExpressionStatement(), interpolatedState, previousStateLinearCombination, coeff0, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot0, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, VariableDeclarationStatement(), final, T, f1, oneMinusThetaH, negate, VariableDeclarationStatement(), final, T, f2, oneMinusThetaH, multiply, theta, VariableDeclarationStatement(), final, T, f3, f2, multiply, theta, VariableDeclarationStatement(), final, T, f4, f3, multiply, eta, VariableDeclarationStatement(), final, T, coeff0, f1, multiply, a70, subtract, f2, multiply, a70, subtract, 1, add, f3, multiply, a70, multiply, 2, subtract, 1, add, f4, multiply, d0, VariableDeclarationStatement(), final, T, coeff1, time, getField, getZero, VariableDeclarationStatement(), final, T, coeff2, f1, multiply, a72, subtract, f2, multiply, a72, add, f3, multiply, a72, multiply, 2, add, f4, multiply, d2, VariableDeclarationStatement(), final, T, coeff3, f1, multiply, a73, subtract, f2, multiply, a73, add, f3, multiply, a73, multiply, 2, add, f4, multiply, d3, VariableDeclarationStatement(), final, T, coeff4, f1, multiply, a74, subtract, f2, multiply, a74, add, f3, multiply, a74, multiply, 2, add, f4, multiply, d4, VariableDeclarationStatement(), final, T, coeff5, f1, multiply, a75, subtract, f2, multiply, a75, add, f3, multiply, a75, multiply, 2, add, f4, multiply, d5, VariableDeclarationStatement(), final, T, coeff6, f4, multiply, d6, subtract, f3, VariableDeclarationStatement(), final, T, coeffDot0, a70, subtract, dot2, multiply, a70, subtract, 1, add, dot3, multiply, a70, multiply, 2, subtract, 1, add, dot4, multiply, d0, VariableDeclarationStatement(), final, T, coeffDot1, time, getField, getZero, VariableDeclarationStatement(), final, T, coeffDot2, a72, subtract, dot2, multiply, a72, add, dot3, multiply, a72, multiply, 2, add, dot4, multiply, d2, VariableDeclarationStatement(), final, T, coeffDot3, a73, subtract, dot2, multiply, a73, add, dot3, multiply, a73, multiply, 2, add, dot4, multiply, d3, VariableDeclarationStatement(), final, T, coeffDot4, a74, subtract, dot2, multiply, a74, add, dot3, multiply, a74, multiply, 2, add, dot4, multiply, d4, VariableDeclarationStatement(), final, T, coeffDot5, a75, subtract, dot2, multiply, a75, add, dot3, multiply, a75, multiply, 2, add, dot4, multiply, d5, VariableDeclarationStatement(), final, T, coeffDot6, dot4, multiply, d6, subtract, dot3, ExpressionStatement(), interpolatedState, currentStateLinearCombination, coeff0, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot0, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:DormandPrince54Integrator:getOrder:null#[ReturnStatement(return), 5]
org.apache.commons.math4.ode.nonstiff:DormandPrince54Integrator:estimateError:double[][]+double[]+double[]+double#[VariableDeclarationStatement(), double, error, 0, ForStatement(for), int, j, 0, j, mainSetDimension, j, VariableDeclarationStatement(), final, double, errSum, E1, yDotK, 0, j, E3, yDotK, 2, j, E4, yDotK, 3, j, E5, yDotK, 4, j, E6, yDotK, 5, j, E7, yDotK, 6, j, VariableDeclarationStatement(), final, double, yScale, FastMath, max, FastMath, abs, y0, j, FastMath, abs, y1, j, VariableDeclarationStatement(), final, double, tol, vecAbsoluteTolerance, null, scalAbsoluteTolerance, scalRelativeTolerance, yScale, vecAbsoluteTolerance, j, vecRelativeTolerance, j, yScale, VariableDeclarationStatement(), final, double, ratio, h, errSum, tol, ExpressionStatement(), error, ratio, ratio, ReturnStatement(return), FastMath, sqrt, error, mainSetDimension]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:doCopy:null#[ReturnStatement(return), new, DormandPrince54StepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:reinitialize:AbstractIntegrator+double[]+double[][]+boolean+EquationsMapper+EquationsMapper[]#[ExpressionStatement(), super, reinitialize, integrator, y, yDotK, forward, primaryMapper, secondaryMappers, ExpressionStatement(), v1, null, ExpressionStatement(), v2, null, ExpressionStatement(), v3, null, ExpressionStatement(), v4, null, ExpressionStatement(), vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:storeTime:double#[ExpressionStatement(), super, storeTime, t, ExpressionStatement(), vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince54StepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[IfStatement(if), vectorsInitialized, IfStatement(if), v1, null, ExpressionStatement(), v1, double, interpolatedState.length, ExpressionStatement(), v2, double, interpolatedState.length, ExpressionStatement(), v3, double, interpolatedState.length, ExpressionStatement(), v4, double, interpolatedState.length, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot0, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 3, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 4, i, VariableDeclarationStatement(), final, double, yDot5, yDotK, 5, i, VariableDeclarationStatement(), final, double, yDot6, yDotK, 6, i, ExpressionStatement(), v1, i, A70, yDot0, A72, yDot2, A73, yDot3, A74, yDot4, A75, yDot5, ExpressionStatement(), v2, i, yDot0, v1, i, ExpressionStatement(), v3, i, v1, i, v2, i, yDot6, ExpressionStatement(), v4, i, D0, yDot0, D2, yDot2, D3, yDot3, D4, yDot4, D5, yDot5, D6, yDot6, ExpressionStatement(), vectorsInitialized, true, VariableDeclarationStatement(), final, double, eta, 1, theta, VariableDeclarationStatement(), final, double, twoTheta, 2, theta, VariableDeclarationStatement(), final, double, dot2, 1, twoTheta, VariableDeclarationStatement(), final, double, dot3, theta, 2, 3, theta, VariableDeclarationStatement(), final, double, dot4, twoTheta, 1, theta, twoTheta, 3, IfStatement(if), previousState, null, theta, 0.5, ForStatement(for), int, i, 0, i, interpolatedState.length, i, ExpressionStatement(), interpolatedState, i, previousState, i, theta, h, v1, i, eta, v2, i, theta, v3, i, eta, v4, i, ExpressionStatement(), interpolatedDerivatives, i, v1, i, dot2, v2, i, dot3, v3, i, dot4, v4, i, ForStatement(for), int, i, 0, i, interpolatedState.length, i, ExpressionStatement(), interpolatedState, i, currentState, i, oneMinusThetaH, v1, i, theta, v2, i, theta, v3, i, eta, v4, i, ExpressionStatement(), interpolatedDerivatives, i, v1, i, dot2, v2, i, dot3, v3, i, dot4, v4, i]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, sqrt6, getField, getOne, multiply, 6, sqrt, VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 15, ExpressionStatement(), c, 0, sqrt6, add, 6, divide, 67.5, ExpressionStatement(), c, 1, sqrt6, add, 6, divide, 45.0, ExpressionStatement(), c, 2, sqrt6, add, 6, divide, 30.0, ExpressionStatement(), c, 3, sqrt6, add, 6, divide, 30.0, ExpressionStatement(), c, 4, fraction, 1, 3, ExpressionStatement(), c, 5, fraction, 1, 4, ExpressionStatement(), c, 6, fraction, 4, 13, ExpressionStatement(), c, 7, fraction, 127, 195, ExpressionStatement(), c, 8, fraction, 3, 5, ExpressionStatement(), c, 9, fraction, 6, 7, ExpressionStatement(), c, 10, getField, getOne, ExpressionStatement(), c, 11, getField, getOne, ExpressionStatement(), c, 12, fraction, 1.0, 10.0, ExpressionStatement(), c, 13, fraction, 1.0, 5.0, ExpressionStatement(), c, 14, fraction, 7.0, 9.0, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, sqrt6, getField, getOne, multiply, 6, sqrt, VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 15, 1, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), a, i, MathArrays, buildArray, getField, i, 1, ExpressionStatement(), a, 0, 0, sqrt6, add, 6, divide, 67.5, ExpressionStatement(), a, 1, 0, sqrt6, add, 6, divide, 180, ExpressionStatement(), a, 1, 1, sqrt6, add, 6, divide, 60, ExpressionStatement(), a, 2, 0, sqrt6, add, 6, divide, 120, ExpressionStatement(), a, 2, 1, getField, getZero, ExpressionStatement(), a, 2, 2, sqrt6, add, 6, divide, 40, ExpressionStatement(), a, 3, 0, sqrt6, multiply, 107, add, 462, divide, 3000, ExpressionStatement(), a, 3, 1, getField, getZero, ExpressionStatement(), a, 3, 2, sqrt6, multiply, 197, add, 402, divide, 1000, ExpressionStatement(), a, 3, 3, sqrt6, multiply, 73, add, 168, divide, 375, ExpressionStatement(), a, 4, 0, fraction, 1, 27, ExpressionStatement(), a, 4, 1, getField, getZero, ExpressionStatement(), a, 4, 2, getField, getZero, ExpressionStatement(), a, 4, 3, sqrt6, add, 16, divide, 108, ExpressionStatement(), a, 4, 4, sqrt6, add, 16, divide, 108, ExpressionStatement(), a, 5, 0, fraction, 19, 512, ExpressionStatement(), a, 5, 1, getField, getZero, ExpressionStatement(), a, 5, 2, getField, getZero, ExpressionStatement(), a, 5, 3, sqrt6, multiply, 23, add, 118, divide, 1024, ExpressionStatement(), a, 5, 4, sqrt6, multiply, 23, add, 118, divide, 1024, ExpressionStatement(), a, 5, 5, fraction, 9, 512, ExpressionStatement(), a, 6, 0, fraction, 13772, 371293, ExpressionStatement(), a, 6, 1, getField, getZero, ExpressionStatement(), a, 6, 2, getField, getZero, ExpressionStatement(), a, 6, 3, sqrt6, multiply, 4784, add, 51544, divide, 371293, ExpressionStatement(), a, 6, 4, sqrt6, multiply, 4784, add, 51544, divide, 371293, ExpressionStatement(), a, 6, 5, fraction, 5688, 371293, ExpressionStatement(), a, 6, 6, fraction, 3072, 371293, ExpressionStatement(), a, 7, 0, fraction, 58656157643.0, 93983540625.0, ExpressionStatement(), a, 7, 1, getField, getZero, ExpressionStatement(), a, 7, 2, getField, getZero, ExpressionStatement(), a, 7, 3, sqrt6, multiply, 318801444819.0, add, 1324889724104.0, divide, 626556937500.0, ExpressionStatement(), a, 7, 4, sqrt6, multiply, 318801444819.0, add, 1324889724104.0, divide, 626556937500.0, ExpressionStatement(), a, 7, 5, fraction, 96044563816.0, 3480871875.0, ExpressionStatement(), a, 7, 6, fraction, 5682451879168.0, 281950621875.0, ExpressionStatement(), a, 7, 7, fraction, 165125654.0, 3796875.0, ExpressionStatement(), a, 8, 0, fraction, 8909899.0, 18653125.0, ExpressionStatement(), a, 8, 1, getField, getZero, ExpressionStatement(), a, 8, 2, getField, getZero, ExpressionStatement(), a, 8, 3, sqrt6, multiply, 1137963.0, add, 4521408.0, divide, 2937500.0, ExpressionStatement(), a, 8, 4, sqrt6, multiply, 1137963.0, add, 4521408.0, divide, 2937500.0, ExpressionStatement(), a, 8, 5, fraction, 96663078.0, 4553125.0, ExpressionStatement(), a, 8, 6, fraction, 2107245056.0, 137915625.0, ExpressionStatement(), a, 8, 7, fraction, 4913652016.0, 147609375.0, ExpressionStatement(), a, 8, 8, fraction, 78894270.0, 3880452869.0, ExpressionStatement(), a, 9, 0, fraction, 20401265806.0, 21769653311.0, ExpressionStatement(), a, 9, 1, getField, getZero, ExpressionStatement(), a, 9, 2, getField, getZero, ExpressionStatement(), a, 9, 3, sqrt6, multiply, 94326.0, add, 354216.0, divide, 112847.0, ExpressionStatement(), a, 9, 4, sqrt6, multiply, 94326.0, add, 354216.0, divide, 112847.0, ExpressionStatement(), a, 9, 5, fraction, 43306765128.0, 5313852383.0, ExpressionStatement(), a, 9, 6, fraction, 20866708358144.0, 1126708119789.0, ExpressionStatement(), a, 9, 7, fraction, 14886003438020.0, 654632330667.0, ExpressionStatement(), a, 9, 8, fraction, 35290686222309375.0, 14152473387134411.0, ExpressionStatement(), a, 9, 9, fraction, 1477884375.0, 485066827.0, ExpressionStatement(), a, 10, 0, fraction, 39815761.0, 17514443.0, ExpressionStatement(), a, 10, 1, getField, getZero, ExpressionStatement(), a, 10, 2, getField, getZero, ExpressionStatement(), a, 10, 3, sqrt6, multiply, 960905.0, add, 3457480.0, divide, 551636.0, ExpressionStatement(), a, 10, 4, sqrt6, multiply, 960905.0, add, 3457480.0, divide, 551636.0, ExpressionStatement(), a, 10, 5, fraction, 844554132.0, 47026969.0, ExpressionStatement(), a, 10, 6, fraction, 8444996352.0, 302158619.0, ExpressionStatement(), a, 10, 7, fraction, 2509602342.0, 877790785.0, ExpressionStatement(), a, 10, 8, fraction, 28388795297996250.0, 3199510091356783.0, ExpressionStatement(), a, 10, 9, fraction, 226716250.0, 18341897.0, ExpressionStatement(), a, 10, 10, fraction, 1371316744.0, 2131383595.0, ExpressionStatement(), a, 11, 0, fraction, 104257.0, 1920240.0, ExpressionStatement(), a, 11, 1, getField, getZero, ExpressionStatement(), a, 11, 2, getField, getZero, ExpressionStatement(), a, 11, 3, getField, getZero, ExpressionStatement(), a, 11, 4, getField, getZero, ExpressionStatement(), a, 11, 5, fraction, 3399327.0, 763840.0, ExpressionStatement(), a, 11, 6, fraction, 66578432.0, 35198415.0, ExpressionStatement(), a, 11, 7, fraction, 1674902723.0, 288716400.0, ExpressionStatement(), a, 11, 8, fraction, 54980371265625.0, 176692375811392.0, ExpressionStatement(), a, 11, 9, fraction, 734375.0, 4826304.0, ExpressionStatement(), a, 11, 10, fraction, 171414593.0, 851261400.0, ExpressionStatement(), a, 11, 11, fraction, 137909.0, 3084480.0, ExpressionStatement(), a, 12, 0, fraction, 13481885573.0, 240030000000.0, ExpressionStatement(), a, 12, 1, getField, getZero, ExpressionStatement(), a, 12, 2, getField, getZero, ExpressionStatement(), a, 12, 3, getField, getZero, ExpressionStatement(), a, 12, 4, getField, getZero, ExpressionStatement(), a, 12, 5, getField, getZero, ExpressionStatement(), a, 12, 6, fraction, 139418837528.0, 549975234375.0, ExpressionStatement(), a, 12, 7, fraction, 11108320068443.0, 45111937500000.0, ExpressionStatement(), a, 12, 8, fraction, 1769651421925959.0, 14249385146080000.0, ExpressionStatement(), a, 12, 9, fraction, 57799439.0, 377055000.0, ExpressionStatement(), a, 12, 10, fraction, 793322643029.0, 96734250000000.0, ExpressionStatement(), a, 12, 11, fraction, 1458939311.0, 192780000000.0, ExpressionStatement(), a, 12, 12, fraction, 4149.0, 500000.0, ExpressionStatement(), a, 13, 0, fraction, 1595561272731.0, 50120273500000.0, ExpressionStatement(), a, 13, 1, getField, getZero, ExpressionStatement(), a, 13, 2, getField, getZero, ExpressionStatement(), a, 13, 3, getField, getZero, ExpressionStatement(), a, 13, 4, getField, getZero, ExpressionStatement(), a, 13, 5, fraction, 975183916491.0, 34457688031250.0, ExpressionStatement(), a, 13, 6, fraction, 38492013932672.0, 718912673015625.0, ExpressionStatement(), a, 13, 7, fraction, 1114881286517557.0, 20298710767500000.0, ExpressionStatement(), a, 13, 8, getField, getZero, ExpressionStatement(), a, 13, 9, getField, getZero, ExpressionStatement(), a, 13, 10, fraction, 2538710946863.0, 23431227861250000.0, ExpressionStatement(), a, 13, 11, fraction, 8824659001.0, 23066716781250.0, ExpressionStatement(), a, 13, 12, fraction, 11518334563.0, 33831184612500.0, ExpressionStatement(), a, 13, 13, fraction, 1912306948.0, 13532473845.0, ExpressionStatement(), a, 14, 0, fraction, 13613986967.0, 31741908048.0, ExpressionStatement(), a, 14, 1, getField, getZero, ExpressionStatement(), a, 14, 2, getField, getZero, ExpressionStatement(), a, 14, 3, getField, getZero, ExpressionStatement(), a, 14, 4, getField, getZero, ExpressionStatement(), a, 14, 5, fraction, 4755612631.0, 1012344804.0, ExpressionStatement(), a, 14, 6, fraction, 42939257944576.0, 5588559685701.0, ExpressionStatement(), a, 14, 7, fraction, 77881972900277.0, 19140370552944.0, ExpressionStatement(), a, 14, 8, fraction, 22719829234375.0, 63689648654052.0, ExpressionStatement(), a, 14, 9, getField, getZero, ExpressionStatement(), a, 14, 10, getField, getZero, ExpressionStatement(), a, 14, 11, getField, getZero, ExpressionStatement(), a, 14, 12, fraction, 1199007803.0, 857031517296.0, ExpressionStatement(), a, 14, 13, fraction, 157882067000.0, 53564469831.0, ExpressionStatement(), a, 14, 14, fraction, 290468882375.0, 31741908048.0, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 16, ExpressionStatement(), b, 0, fraction, 104257, 1920240, ExpressionStatement(), b, 1, getField, getZero, ExpressionStatement(), b, 2, getField, getZero, ExpressionStatement(), b, 3, getField, getZero, ExpressionStatement(), b, 4, getField, getZero, ExpressionStatement(), b, 5, fraction, 3399327.0, 763840.0, ExpressionStatement(), b, 6, fraction, 66578432.0, 35198415.0, ExpressionStatement(), b, 7, fraction, 1674902723.0, 288716400.0, ExpressionStatement(), b, 8, fraction, 54980371265625.0, 176692375811392.0, ExpressionStatement(), b, 9, fraction, 734375.0, 4826304.0, ExpressionStatement(), b, 10, fraction, 171414593.0, 851261400.0, ExpressionStatement(), b, 11, fraction, 137909.0, 3084480.0, ExpressionStatement(), b, 12, getField, getZero, ExpressionStatement(), b, 13, getField, getZero, ExpressionStatement(), b, 14, getField, getZero, ExpressionStatement(), b, 15, getField, getZero, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, DormandPrince853FieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:getOrder:null#[ReturnStatement(return), 8]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldIntegrator:estimateError:T[][]+T[]+T[]+T#[VariableDeclarationStatement(), T, error1, h, getField, getZero, VariableDeclarationStatement(), T, error2, h, getField, getZero, ForStatement(for), int, j, 0, j, mainSetDimension, j, VariableDeclarationStatement(), final, T, errSum1, yDotK, 0, j, multiply, e1_01, add, yDotK, 5, j, multiply, e1_06, add, yDotK, 6, j, multiply, e1_07, add, yDotK, 7, j, multiply, e1_08, add, yDotK, 8, j, multiply, e1_09, add, yDotK, 9, j, multiply, e1_10, add, yDotK, 10, j, multiply, e1_11, add, yDotK, 11, j, multiply, e1_12, VariableDeclarationStatement(), final, T, errSum2, yDotK, 0, j, multiply, e2_01, add, yDotK, 5, j, multiply, e2_06, add, yDotK, 6, j, multiply, e2_07, add, yDotK, 7, j, multiply, e2_08, add, yDotK, 8, j, multiply, e2_09, add, yDotK, 9, j, multiply, e2_10, add, yDotK, 10, j, multiply, e2_11, add, yDotK, 11, j, multiply, e2_12, VariableDeclarationStatement(), final, T, yScale, MathUtils, max, y0, j, abs, y1, j, abs, VariableDeclarationStatement(), final, T, tol, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, j, add, vecAbsoluteTolerance, j, VariableDeclarationStatement(), final, T, ratio1, errSum1, divide, tol, ExpressionStatement(), error1, error1, add, ratio1, multiply, ratio1, VariableDeclarationStatement(), final, T, ratio2, errSum2, divide, tol, ExpressionStatement(), error2, error2, add, ratio2, multiply, ratio2, VariableDeclarationStatement(), T, den, error1, add, error2, multiply, 0.01, IfStatement(if), den, getReal, 0.0, ExpressionStatement(), den, h, getField, getOne, ReturnStatement(return), h, abs, multiply, error1, divide, den, multiply, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, DormandPrince853FieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldStepInterpolator:fraction:Field<T>+double+double#[ReturnStatement(return), field, getZero, add, p, divide, q]
org.apache.commons.math4.ode.nonstiff:DormandPrince853FieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, one, time, getField, getOne, VariableDeclarationStatement(), final, T, eta, one, subtract, theta, VariableDeclarationStatement(), final, T, twoTheta, theta, multiply, 2, VariableDeclarationStatement(), final, T, theta2, theta, multiply, theta, VariableDeclarationStatement(), final, T, dot1, one, subtract, twoTheta, VariableDeclarationStatement(), final, T, dot2, theta, multiply, theta, multiply, 3, add, 2, VariableDeclarationStatement(), final, T, dot3, twoTheta, multiply, theta, multiply, twoTheta, subtract, 3, add, 1, VariableDeclarationStatement(), final, T, dot4, theta2, multiply, theta, multiply, theta, multiply, 5, subtract, 8, add, 3, VariableDeclarationStatement(), final, T, dot5, theta2, multiply, theta, multiply, theta, multiply, theta, multiply, 6, add, 15, subtract, 12, add, 3, VariableDeclarationStatement(), final, T, dot6, theta2, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 7, add, 18, subtract, 15, add, 4, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, f0, thetaH, VariableDeclarationStatement(), final, T, f1, f0, multiply, eta, VariableDeclarationStatement(), final, T, f2, f1, multiply, theta, VariableDeclarationStatement(), final, T, f3, f2, multiply, eta, VariableDeclarationStatement(), final, T, f4, f3, multiply, theta, VariableDeclarationStatement(), final, T, f5, f4, multiply, eta, VariableDeclarationStatement(), final, T, f6, f5, multiply, theta, VariableDeclarationStatement(), final, T, p, MathArrays, buildArray, time, getField, 16, VariableDeclarationStatement(), final, T, q, MathArrays, buildArray, time, getField, 16, ForStatement(for), int, i, 0, i, p.length, i, ExpressionStatement(), p, i, f0, multiply, d, 0, i, add, f1, multiply, d, 1, i, add, f2, multiply, d, 2, i, add, f3, multiply, d, 3, i, add, f4, multiply, d, 4, i, add, f5, multiply, d, 5, i, add, f6, multiply, d, 6, i, ExpressionStatement(), q, i, d, 0, i, add, dot1, multiply, d, 1, i, add, dot2, multiply, d, 2, i, add, dot3, multiply, d, 3, i, add, dot4, multiply, d, 4, i, add, dot5, multiply, d, 5, i, add, dot6, multiply, d, 6, i, ExpressionStatement(), interpolatedState, previousStateLinearCombination, p, 0, p, 1, p, 2, p, 3, p, 4, p, 5, p, 6, p, 7, p, 8, p, 9, p, 10, p, 11, p, 12, p, 13, p, 14, p, 15, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, q, 0, q, 1, q, 2, q, 3, q, 4, q, 5, q, 6, q, 7, q, 8, q, 9, q, 10, q, 11, q, 12, q, 13, q, 14, q, 15, VariableDeclarationStatement(), final, T, f0, oneMinusThetaH, negate, VariableDeclarationStatement(), final, T, f1, f0, multiply, theta, negate, VariableDeclarationStatement(), final, T, f2, f1, multiply, theta, VariableDeclarationStatement(), final, T, f3, f2, multiply, eta, VariableDeclarationStatement(), final, T, f4, f3, multiply, theta, VariableDeclarationStatement(), final, T, f5, f4, multiply, eta, VariableDeclarationStatement(), final, T, f6, f5, multiply, theta, VariableDeclarationStatement(), final, T, p, MathArrays, buildArray, time, getField, 16, VariableDeclarationStatement(), final, T, q, MathArrays, buildArray, time, getField, 16, ForStatement(for), int, i, 0, i, p.length, i, ExpressionStatement(), p, i, f0, multiply, d, 0, i, add, f1, multiply, d, 1, i, add, f2, multiply, d, 2, i, add, f3, multiply, d, 3, i, add, f4, multiply, d, 4, i, add, f5, multiply, d, 5, i, add, f6, multiply, d, 6, i, ExpressionStatement(), q, i, d, 0, i, add, dot1, multiply, d, 1, i, add, dot2, multiply, d, 2, i, add, dot3, multiply, d, 3, i, add, dot4, multiply, d, 4, i, add, dot5, multiply, d, 5, i, add, dot6, multiply, d, 6, i, ExpressionStatement(), interpolatedState, currentStateLinearCombination, p, 0, p, 1, p, 2, p, 3, p, 4, p, 5, p, 6, p, 7, p, 8, p, 9, p, 10, p, 11, p, 12, p, 13, p, 14, p, 15, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, q, 0, q, 1, q, 2, q, 3, q, 4, q, 5, q, 6, q, 7, q, 8, q, 9, q, 10, q, 11, q, 12, q, 13, q, 14, q, 15, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:DormandPrince853Integrator:getOrder:null#[ReturnStatement(return), 8]
org.apache.commons.math4.ode.nonstiff:DormandPrince853Integrator:estimateError:double[][]+double[]+double[]+double#[VariableDeclarationStatement(), double, error1, 0, VariableDeclarationStatement(), double, error2, 0, ForStatement(for), int, j, 0, j, mainSetDimension, j, VariableDeclarationStatement(), final, double, errSum1, E1_01, yDotK, 0, j, E1_06, yDotK, 5, j, E1_07, yDotK, 6, j, E1_08, yDotK, 7, j, E1_09, yDotK, 8, j, E1_10, yDotK, 9, j, E1_11, yDotK, 10, j, E1_12, yDotK, 11, j, VariableDeclarationStatement(), final, double, errSum2, E2_01, yDotK, 0, j, E2_06, yDotK, 5, j, E2_07, yDotK, 6, j, E2_08, yDotK, 7, j, E2_09, yDotK, 8, j, E2_10, yDotK, 9, j, E2_11, yDotK, 10, j, E2_12, yDotK, 11, j, VariableDeclarationStatement(), final, double, yScale, FastMath, max, FastMath, abs, y0, j, FastMath, abs, y1, j, VariableDeclarationStatement(), final, double, tol, vecAbsoluteTolerance, null, scalAbsoluteTolerance, scalRelativeTolerance, yScale, vecAbsoluteTolerance, j, vecRelativeTolerance, j, yScale, VariableDeclarationStatement(), final, double, ratio1, errSum1, tol, ExpressionStatement(), error1, ratio1, ratio1, VariableDeclarationStatement(), final, double, ratio2, errSum2, tol, ExpressionStatement(), error2, ratio2, ratio2, VariableDeclarationStatement(), double, den, error1, 0.01, error2, IfStatement(if), den, 0.0, ExpressionStatement(), den, 1.0, ReturnStatement(return), FastMath, abs, h, error1, FastMath, sqrt, mainSetDimension, den]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:doCopy:null#[ReturnStatement(return), new, DormandPrince853StepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:reinitialize:AbstractIntegrator+double[]+double[][]+boolean+EquationsMapper+EquationsMapper[]#[ExpressionStatement(), super, reinitialize, integrator, y, yDotK, forward, primaryMapper, secondaryMappers, VariableDeclarationStatement(), final, int, dimension, currentState.length, ExpressionStatement(), yDotKLast, double, 3, ForStatement(for), int, k, 0, k, yDotKLast.length, k, ExpressionStatement(), yDotKLast, k, double, dimension, ExpressionStatement(), v, double, 7, ForStatement(for), int, k, 0, k, v.length, k, ExpressionStatement(), v, k, double, dimension, ExpressionStatement(), vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:storeTime:double#[ExpressionStatement(), super, storeTime, t, ExpressionStatement(), vectorsInitialized, false]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[IfStatement(if), vectorsInitialized, IfStatement(if), v, null, ExpressionStatement(), v, double, 7, ForStatement(for), int, k, 0, k, 7, k, ExpressionStatement(), v, k, double, interpolatedState.length, ExpressionStatement(), finalizeStep, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot6, yDotK, 5, i, VariableDeclarationStatement(), final, double, yDot7, yDotK, 6, i, VariableDeclarationStatement(), final, double, yDot8, yDotK, 7, i, VariableDeclarationStatement(), final, double, yDot9, yDotK, 8, i, VariableDeclarationStatement(), final, double, yDot10, yDotK, 9, i, VariableDeclarationStatement(), final, double, yDot11, yDotK, 10, i, VariableDeclarationStatement(), final, double, yDot12, yDotK, 11, i, VariableDeclarationStatement(), final, double, yDot13, yDotK, 12, i, VariableDeclarationStatement(), final, double, yDot14, yDotKLast, 0, i, VariableDeclarationStatement(), final, double, yDot15, yDotKLast, 1, i, VariableDeclarationStatement(), final, double, yDot16, yDotKLast, 2, i, ExpressionStatement(), v, 0, i, B_01, yDot1, B_06, yDot6, B_07, yDot7, B_08, yDot8, B_09, yDot9, B_10, yDot10, B_11, yDot11, B_12, yDot12, ExpressionStatement(), v, 1, i, yDot1, v, 0, i, ExpressionStatement(), v, 2, i, v, 0, i, v, 1, i, yDotK, 12, i, ForStatement(for), int, k, 0, k, D.length, k, ExpressionStatement(), v, k, 3, i, D, k, 0, yDot1, D, k, 1, yDot6, D, k, 2, yDot7, D, k, 3, yDot8, D, k, 4, yDot9, D, k, 5, yDot10, D, k, 6, yDot11, D, k, 7, yDot12, D, k, 8, yDot13, D, k, 9, yDot14, D, k, 10, yDot15, D, k, 11, yDot16, ExpressionStatement(), vectorsInitialized, true, VariableDeclarationStatement(), final, double, eta, 1, theta, VariableDeclarationStatement(), final, double, twoTheta, 2, theta, VariableDeclarationStatement(), final, double, theta2, theta, theta, VariableDeclarationStatement(), final, double, dot1, 1, twoTheta, VariableDeclarationStatement(), final, double, dot2, theta, 2, 3, theta, VariableDeclarationStatement(), final, double, dot3, twoTheta, 1, theta, twoTheta, 3, VariableDeclarationStatement(), final, double, dot4, theta2, 3, theta, 5, theta, 8, VariableDeclarationStatement(), final, double, dot5, theta2, 3, theta, 12, theta, 15, 6, theta, VariableDeclarationStatement(), final, double, dot6, theta2, theta, 4, theta, 15, theta, 18, 7, theta, IfStatement(if), previousState, null, theta, 0.5, ForStatement(for), int, i, 0, i, interpolatedState.length, i, ExpressionStatement(), interpolatedState, i, previousState, i, theta, h, v, 0, i, eta, v, 1, i, theta, v, 2, i, eta, v, 3, i, theta, v, 4, i, eta, v, 5, i, theta, v, 6, i, ExpressionStatement(), interpolatedDerivatives, i, v, 0, i, dot1, v, 1, i, dot2, v, 2, i, dot3, v, 3, i, dot4, v, 4, i, dot5, v, 5, i, dot6, v, 6, i, ForStatement(for), int, i, 0, i, interpolatedState.length, i, ExpressionStatement(), interpolatedState, i, currentState, i, oneMinusThetaH, v, 0, i, theta, v, 1, i, theta, v, 2, i, eta, v, 3, i, theta, v, 4, i, eta, v, 5, i, theta, v, 6, i, ExpressionStatement(), interpolatedDerivatives, i, v, 0, i, dot1, v, 1, i, dot2, v, 2, i, dot3, v, 3, i, dot4, v, 4, i, dot5, v, 5, i, dot6, v, 6, i]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:doFinalize:null#[IfStatement(if), currentState, null, ReturnStatement(return), VariableDeclarationStatement(), double, s, VariableDeclarationStatement(), final, double, yTmp, double, currentState.length, VariableDeclarationStatement(), final, double, pT, getGlobalPreviousTime, ForStatement(for), int, j, 0, j, currentState.length, j, ExpressionStatement(), s, K14_01, yDotK, 0, j, K14_06, yDotK, 5, j, K14_07, yDotK, 6, j, K14_08, yDotK, 7, j, K14_09, yDotK, 8, j, K14_10, yDotK, 9, j, K14_11, yDotK, 10, j, K14_12, yDotK, 11, j, K14_13, yDotK, 12, j, ExpressionStatement(), yTmp, j, currentState, j, h, s, ExpressionStatement(), integrator, computeDerivatives, pT, C14, h, yTmp, yDotKLast, 0, ForStatement(for), int, j, 0, j, currentState.length, j, ExpressionStatement(), s, K15_01, yDotK, 0, j, K15_06, yDotK, 5, j, K15_07, yDotK, 6, j, K15_08, yDotK, 7, j, K15_09, yDotK, 8, j, K15_10, yDotK, 9, j, K15_11, yDotK, 10, j, K15_12, yDotK, 11, j, K15_13, yDotK, 12, j, K15_14, yDotKLast, 0, j, ExpressionStatement(), yTmp, j, currentState, j, h, s, ExpressionStatement(), integrator, computeDerivatives, pT, C15, h, yTmp, yDotKLast, 1, ForStatement(for), int, j, 0, j, currentState.length, j, ExpressionStatement(), s, K16_01, yDotK, 0, j, K16_06, yDotK, 5, j, K16_07, yDotK, 6, j, K16_08, yDotK, 7, j, K16_09, yDotK, 8, j, K16_10, yDotK, 9, j, K16_11, yDotK, 10, j, K16_12, yDotK, 11, j, K16_13, yDotK, 12, j, K16_14, yDotKLast, 0, j, K16_15, yDotKLast, 1, j, ExpressionStatement(), yTmp, j, currentState, j, h, s, ExpressionStatement(), integrator, computeDerivatives, pT, C16, h, yTmp, yDotKLast, 2]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:writeExternal:ObjectOutput#[TryStatement(try), ExpressionStatement(), finalizeStep, catch, MaxCountExceededException, mcee, VariableDeclarationStatement(), final, IOException, ioe, new, IOException, mcee, getLocalizedMessage, ExpressionStatement(), ioe, initCause, mcee, ThrowStatement(throw), ioe, VariableDeclarationStatement(), final, int, dimension, currentState, null, 1, currentState.length, ExpressionStatement(), out, writeInt, dimension, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), out, writeDouble, yDotKLast, 0, i, ExpressionStatement(), out, writeDouble, yDotKLast, 1, i, ExpressionStatement(), out, writeDouble, yDotKLast, 2, i, ExpressionStatement(), super, writeExternal, out]
org.apache.commons.math4.ode.nonstiff:DormandPrince853StepInterpolator:readExternal:ObjectInput#[ExpressionStatement(), yDotKLast, double, 3, VariableDeclarationStatement(), final, int, dimension, in, readInt, ExpressionStatement(), yDotKLast, 0, dimension, 0, null, double, dimension, ExpressionStatement(), yDotKLast, 1, dimension, 0, null, double, dimension, ExpressionStatement(), yDotKLast, 2, dimension, 0, null, double, dimension, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), yDotKLast, 0, i, in, readDouble, ExpressionStatement(), yDotKLast, 1, i, in, readDouble, ExpressionStatement(), yDotKLast, 2, i, in, readDouble, ExpressionStatement(), super, readExternal, in]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:fraction:int+int#[ReturnStatement(return), getField, getOne, multiply, p, divide, q]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:fraction:double+double#[ReturnStatement(return), getField, getOne, multiply, p, divide, q]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:getSafety:null#[ReturnStatement(return), safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:setSafety:T#[ExpressionStatement(), this, safety, safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[ExpressionStatement(), sanityChecks, initialState, finalTime, VariableDeclarationStatement(), final, T, t0, initialState, getTime, VariableDeclarationStatement(), final, T, y0, equations, getMapper, mapState, initialState, ExpressionStatement(), setStepStart, initIntegration, equations, t0, y0, finalTime, VariableDeclarationStatement(), final, boolean, forward, finalTime, subtract, initialState, getTime, getReal, 0, VariableDeclarationStatement(), final, int, stages, c.length, 1, VariableDeclarationStatement(), T, y, y0, VariableDeclarationStatement(), final, T, yDotK, MathArrays, buildArray, getField, stages, 1, VariableDeclarationStatement(), final, T, yTmp, MathArrays, buildArray, getField, y0.length, VariableDeclarationStatement(), T, hNew, getField, getZero, VariableDeclarationStatement(), boolean, firstTime, true, ExpressionStatement(), setIsLastStep, false, DoStatement(do), VariableDeclarationStatement(), T, error, getField, getZero, add, 10, WhileStatement(while), error, subtract, 1.0, getReal, 0, ExpressionStatement(), y, equations, getMapper, mapState, getStepStart, ExpressionStatement(), yDotK, 0, equations, getMapper, mapDerivative, getStepStart, IfStatement(if), firstTime, VariableDeclarationStatement(), final, T, scale, MathArrays, buildArray, getField, mainSetDimension, IfStatement(if), vecAbsoluteTolerance, null, ForStatement(for), int, i, 0, i, scale.length, i, ExpressionStatement(), scale, i, y, i, abs, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, ForStatement(for), int, i, 0, i, scale.length, i, ExpressionStatement(), scale, i, y, i, abs, multiply, vecRelativeTolerance, i, add, vecAbsoluteTolerance, i, ExpressionStatement(), hNew, initializeStep, forward, getOrder, scale, getStepStart, equations, getMapper, ExpressionStatement(), firstTime, false, ExpressionStatement(), setStepSize, hNew, IfStatement(if), forward, IfStatement(if), getStepStart, getTime, add, getStepSize, subtract, finalTime, getReal, 0, ExpressionStatement(), setStepSize, finalTime, subtract, getStepStart, getTime, IfStatement(if), getStepStart, getTime, add, getStepSize, subtract, finalTime, getReal, 0, ExpressionStatement(), setStepSize, finalTime, subtract, getStepStart, getTime, ForStatement(for), int, k, 1, k, stages, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), T, sum, yDotK, 0, j, multiply, a, k, 1, 0, ForStatement(for), int, l, 1, l, k, l, ExpressionStatement(), sum, sum, add, yDotK, l, j, multiply, a, k, 1, l, ExpressionStatement(), yTmp, j, y, j, add, getStepSize, multiply, sum, ExpressionStatement(), yDotK, k, computeDerivatives, getStepStart, getTime, add, getStepSize, multiply, c, k, 1, yTmp, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), T, sum, yDotK, 0, j, multiply, b, 0, ForStatement(for), int, l, 1, l, stages, l, ExpressionStatement(), sum, sum, add, yDotK, l, j, multiply, b, l, ExpressionStatement(), yTmp, j, y, j, add, getStepSize, multiply, sum, ExpressionStatement(), error, estimateError, yDotK, y, yTmp, getStepSize, IfStatement(if), error, subtract, 1.0, getReal, 0, VariableDeclarationStatement(), final, T, factor, MathUtils, min, maxGrowth, MathUtils, max, minReduction, safety, multiply, error, pow, exp, ExpressionStatement(), hNew, filterStep, getStepSize, multiply, factor, forward, false, VariableDeclarationStatement(), final, T, stepEnd, getStepStart, getTime, add, getStepSize, VariableDeclarationStatement(), final, T, yDotTmp, fsal, 0, yDotK, fsal, computeDerivatives, stepEnd, yTmp, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, stateTmp, new, FieldODEStateAndDerivative, T, stepEnd, yTmp, yDotTmp, ExpressionStatement(), System, arraycopy, yTmp, 0, y, 0, y0.length, ExpressionStatement(), setStepStart, acceptStep, createInterpolator, forward, yDotK, getStepStart, stateTmp, equations, getMapper, finalTime, IfStatement(if), isLastStep, VariableDeclarationStatement(), final, T, factor, MathUtils, min, maxGrowth, MathUtils, max, minReduction, safety, multiply, error, pow, exp, VariableDeclarationStatement(), final, T, scaledH, getStepSize, multiply, factor, VariableDeclarationStatement(), final, T, nextT, getStepStart, getTime, add, scaledH, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, subtract, finalTime, getReal, 0, nextT, subtract, finalTime, getReal, 0, ExpressionStatement(), hNew, filterStep, scaledH, forward, nextIsLast, VariableDeclarationStatement(), final, T, filteredNextT, getStepStart, getTime, add, hNew, VariableDeclarationStatement(), final, boolean, filteredNextIsLast, forward, filteredNextT, subtract, finalTime, getReal, 0, filteredNextT, subtract, finalTime, getReal, 0, IfStatement(if), filteredNextIsLast, ExpressionStatement(), hNew, finalTime, subtract, getStepStart, getTime, isLastStep, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, finalState, getStepStart, ExpressionStatement(), resetInternalState, ReturnStatement(return), finalState]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:getMinReduction:null#[ReturnStatement(return), minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:setMinReduction:T#[ExpressionStatement(), this, minReduction, minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:getMaxGrowth:null#[ReturnStatement(return), maxGrowth]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaFieldIntegrator:setMaxGrowth:T#[ExpressionStatement(), this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:getSafety:null#[ReturnStatement(return), safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:setSafety:double#[ExpressionStatement(), this, safety, safety]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:integrate:ExpandableStatefulODE+double#[ExpressionStatement(), sanityChecks, equations, t, ExpressionStatement(), setEquations, equations, VariableDeclarationStatement(), final, boolean, forward, t, equations, getTime, VariableDeclarationStatement(), final, double, y0, equations, getCompleteState, VariableDeclarationStatement(), final, double, y, y0, clone, VariableDeclarationStatement(), final, int, stages, c.length, 1, VariableDeclarationStatement(), final, double, yDotK, double, stages, y.length, VariableDeclarationStatement(), final, double, yTmp, y0, clone, VariableDeclarationStatement(), final, double, yDotTmp, double, y.length, VariableDeclarationStatement(), final, RungeKuttaStepInterpolator, interpolator, RungeKuttaStepInterpolator, prototype, copy, ExpressionStatement(), interpolator, reinitialize, this, yTmp, yDotK, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, ExpressionStatement(), interpolator, storeTime, equations, getTime, ExpressionStatement(), stepStart, equations, getTime, VariableDeclarationStatement(), double, hNew, 0, VariableDeclarationStatement(), boolean, firstTime, true, ExpressionStatement(), initIntegration, equations, getTime, y0, t, ExpressionStatement(), isLastStep, false, DoStatement(do), ExpressionStatement(), interpolator, shift, VariableDeclarationStatement(), double, error, 10, WhileStatement(while), error, 1.0, IfStatement(if), firstTime, fsal, ExpressionStatement(), computeDerivatives, stepStart, y, yDotK, 0, IfStatement(if), firstTime, VariableDeclarationStatement(), final, double, scale, double, mainSetDimension, IfStatement(if), vecAbsoluteTolerance, null, ForStatement(for), int, i, 0, i, scale.length, i, ExpressionStatement(), scale, i, scalAbsoluteTolerance, scalRelativeTolerance, FastMath, abs, y, i, ForStatement(for), int, i, 0, i, scale.length, i, ExpressionStatement(), scale, i, vecAbsoluteTolerance, i, vecRelativeTolerance, i, FastMath, abs, y, i, ExpressionStatement(), hNew, initializeStep, forward, getOrder, scale, stepStart, y, yDotK, 0, yTmp, yDotK, 1, ExpressionStatement(), firstTime, false, ExpressionStatement(), stepSize, hNew, IfStatement(if), forward, IfStatement(if), stepStart, stepSize, t, ExpressionStatement(), stepSize, t, stepStart, IfStatement(if), stepStart, stepSize, t, ExpressionStatement(), stepSize, t, stepStart, ForStatement(for), int, k, 1, k, stages, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), double, sum, a, k, 1, 0, yDotK, 0, j, ForStatement(for), int, l, 1, l, k, l, ExpressionStatement(), sum, a, k, 1, l, yDotK, l, j, ExpressionStatement(), yTmp, j, y, j, stepSize, sum, ExpressionStatement(), computeDerivatives, stepStart, c, k, 1, stepSize, yTmp, yDotK, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), double, sum, b, 0, yDotK, 0, j, ForStatement(for), int, l, 1, l, stages, l, ExpressionStatement(), sum, b, l, yDotK, l, j, ExpressionStatement(), yTmp, j, y, j, stepSize, sum, ExpressionStatement(), error, estimateError, yDotK, y, yTmp, stepSize, IfStatement(if), error, 1.0, VariableDeclarationStatement(), final, double, factor, FastMath, min, maxGrowth, FastMath, max, minReduction, safety, FastMath, pow, error, exp, ExpressionStatement(), hNew, filterStep, stepSize, factor, forward, false, ExpressionStatement(), interpolator, storeTime, stepStart, stepSize, ExpressionStatement(), System, arraycopy, yTmp, 0, y, 0, y0.length, ExpressionStatement(), System, arraycopy, yDotK, stages, 1, 0, yDotTmp, 0, y0.length, ExpressionStatement(), stepStart, acceptStep, interpolator, y, yDotTmp, t, ExpressionStatement(), System, arraycopy, y, 0, yTmp, 0, y.length, IfStatement(if), isLastStep, ExpressionStatement(), interpolator, storeTime, stepStart, IfStatement(if), fsal, ExpressionStatement(), System, arraycopy, yDotTmp, 0, yDotK, 0, 0, y0.length, VariableDeclarationStatement(), final, double, factor, FastMath, min, maxGrowth, FastMath, max, minReduction, safety, FastMath, pow, error, exp, VariableDeclarationStatement(), final, double, scaledH, stepSize, factor, VariableDeclarationStatement(), final, double, nextT, stepStart, scaledH, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, t, nextT, t, ExpressionStatement(), hNew, filterStep, scaledH, forward, nextIsLast, VariableDeclarationStatement(), final, double, filteredNextT, stepStart, hNew, VariableDeclarationStatement(), final, boolean, filteredNextIsLast, forward, filteredNextT, t, filteredNextT, t, IfStatement(if), filteredNextIsLast, ExpressionStatement(), hNew, t, stepStart, isLastStep, ExpressionStatement(), equations, setTime, stepStart, ExpressionStatement(), equations, setCompleteState, y, ExpressionStatement(), resetInternalState]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:getMinReduction:null#[ReturnStatement(return), minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:setMinReduction:double#[ExpressionStatement(), this, minReduction, minReduction]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:getMaxGrowth:null#[ReturnStatement(return), maxGrowth]
org.apache.commons.math4.ode.nonstiff:EmbeddedRungeKuttaIntegrator:setMaxGrowth:double#[ExpressionStatement(), this, maxGrowth, maxGrowth]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:getC:null#[ReturnStatement(return), MathArrays, buildArray, getField, 0]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:getA:null#[ReturnStatement(return), MathArrays, buildArray, getField, 0, 0]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 1, ExpressionStatement(), b, 0, getField, getOne, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:EulerFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, EulerFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:EulerFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, EulerFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:EulerFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, ExpressionStatement(), interpolatedState, previousStateLinearCombination, thetaH, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, time, getField, getOne, ExpressionStatement(), interpolatedState, currentStateLinearCombination, oneMinusThetaH, negate, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, time, getField, getOne, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:EulerStepInterpolator:doCopy:null#[ReturnStatement(return), new, EulerStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:EulerStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[IfStatement(if), previousState, null, theta, 0.5, ForStatement(for), int, i, 0, i, interpolatedState.length, i, ExpressionStatement(), interpolatedState, i, previousState, i, theta, h, yDotK, 0, i, ExpressionStatement(), System, arraycopy, yDotK, 0, 0, interpolatedDerivatives, 0, interpolatedDerivatives.length, ForStatement(for), int, i, 0, i, interpolatedState.length, i, ExpressionStatement(), interpolatedState, i, currentState, i, oneMinusThetaH, yDotK, 0, i, ExpressionStatement(), System, arraycopy, yDotK, 0, 0, interpolatedDerivatives, 0, interpolatedDerivatives.length]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 3, ExpressionStatement(), c, 0, fraction, 1, 2, ExpressionStatement(), c, 1, c, 0, ExpressionStatement(), c, 2, getField, getOne, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, two, getField, getZero, add, 2, VariableDeclarationStatement(), final, T, sqrtTwo, two, sqrt, VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 3, 1, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), a, i, MathArrays, buildArray, getField, i, 1, ExpressionStatement(), a, 0, 0, fraction, 1, 2, ExpressionStatement(), a, 1, 0, sqrtTwo, subtract, 1, multiply, 0.5, ExpressionStatement(), a, 1, 1, sqrtTwo, subtract, 2, multiply, 0.5, ExpressionStatement(), a, 2, 0, getField, getZero, ExpressionStatement(), a, 2, 1, sqrtTwo, multiply, 0.5, ExpressionStatement(), a, 2, 2, sqrtTwo, add, 2, multiply, 0.5, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, two, getField, getZero, add, 2, VariableDeclarationStatement(), final, T, sqrtTwo, two, sqrt, VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 4, ExpressionStatement(), b, 0, fraction, 1, 6, ExpressionStatement(), b, 1, sqrtTwo, subtract, 2, divide, 6, ExpressionStatement(), b, 2, sqrtTwo, add, 2, divide, 6, ExpressionStatement(), b, 3, b, 0, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:GillFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, GillFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:GillFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, GillFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:GillFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, one, time, getField, getOne, VariableDeclarationStatement(), final, T, twoTheta, theta, multiply, 2, VariableDeclarationStatement(), final, T, fourTheta2, twoTheta, multiply, twoTheta, VariableDeclarationStatement(), final, T, coeffDot1, theta, multiply, twoTheta, subtract, 3, add, 1, VariableDeclarationStatement(), final, T, cDot23, twoTheta, multiply, one, subtract, theta, VariableDeclarationStatement(), final, T, coeffDot2, cDot23, multiply, one_minus_inv_sqrt_2, VariableDeclarationStatement(), final, T, coeffDot3, cDot23, multiply, one_plus_inv_sqrt_2, VariableDeclarationStatement(), final, T, coeffDot4, theta, multiply, twoTheta, subtract, 1, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, s, thetaH, divide, 6.0, VariableDeclarationStatement(), final, T, c23, s, multiply, theta, multiply, 6, subtract, fourTheta2, VariableDeclarationStatement(), final, T, coeff1, s, multiply, fourTheta2, subtract, theta, multiply, 9, add, 6, VariableDeclarationStatement(), final, T, coeff2, c23, multiply, one_minus_inv_sqrt_2, VariableDeclarationStatement(), final, T, coeff3, c23, multiply, one_plus_inv_sqrt_2, VariableDeclarationStatement(), final, T, coeff4, s, multiply, fourTheta2, subtract, theta, multiply, 3, ExpressionStatement(), interpolatedState, previousStateLinearCombination, coeff1, coeff2, coeff3, coeff4, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, VariableDeclarationStatement(), final, T, s, oneMinusThetaH, divide, 6.0, VariableDeclarationStatement(), final, T, c23, s, multiply, twoTheta, add, 2, subtract, fourTheta2, VariableDeclarationStatement(), final, T, coeff1, s, multiply, fourTheta2, subtract, theta, multiply, 5, add, 1, VariableDeclarationStatement(), final, T, coeff2, c23, multiply, one_minus_inv_sqrt_2, VariableDeclarationStatement(), final, T, coeff3, c23, multiply, one_plus_inv_sqrt_2, VariableDeclarationStatement(), final, T, coeff4, s, multiply, fourTheta2, add, theta, add, 1, ExpressionStatement(), interpolatedState, currentStateLinearCombination, coeff1, coeff2, coeff3, coeff4, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:GillStepInterpolator:doCopy:null#[ReturnStatement(return), new, GillStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:GillStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, double, twoTheta, 2, theta, VariableDeclarationStatement(), final, double, fourTheta2, twoTheta, twoTheta, VariableDeclarationStatement(), final, double, coeffDot1, theta, twoTheta, 3, 1, VariableDeclarationStatement(), final, double, cDot23, twoTheta, 1, theta, VariableDeclarationStatement(), final, double, coeffDot2, cDot23, ONE_MINUS_INV_SQRT_2, VariableDeclarationStatement(), final, double, coeffDot3, cDot23, ONE_PLUS_INV_SQRT_2, VariableDeclarationStatement(), final, double, coeffDot4, theta, twoTheta, 1, IfStatement(if), previousState, null, theta, 0.5, VariableDeclarationStatement(), final, double, s, theta, h, 6.0, VariableDeclarationStatement(), final, double, c23, s, 6, theta, fourTheta2, VariableDeclarationStatement(), final, double, coeff1, s, 6, 9, theta, fourTheta2, VariableDeclarationStatement(), final, double, coeff2, c23, ONE_MINUS_INV_SQRT_2, VariableDeclarationStatement(), final, double, coeff3, c23, ONE_PLUS_INV_SQRT_2, VariableDeclarationStatement(), final, double, coeff4, s, 3, theta, fourTheta2, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, ExpressionStatement(), interpolatedState, i, previousState, i, coeff1, yDot1, coeff2, yDot2, coeff3, yDot3, coeff4, yDot4, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2, coeffDot3, yDot3, coeffDot4, yDot4, VariableDeclarationStatement(), final, double, s, oneMinusThetaH, 6.0, VariableDeclarationStatement(), final, double, c23, s, 2, twoTheta, fourTheta2, VariableDeclarationStatement(), final, double, coeff1, s, 1, 5, theta, fourTheta2, VariableDeclarationStatement(), final, double, coeff2, c23, ONE_MINUS_INV_SQRT_2, VariableDeclarationStatement(), final, double, coeff3, c23, ONE_PLUS_INV_SQRT_2, VariableDeclarationStatement(), final, double, coeff4, s, 1, theta, fourTheta2, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, ExpressionStatement(), interpolatedState, i, currentState, i, coeff1, yDot1, coeff2, yDot2, coeff3, yDot3, coeff4, yDot4, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2, coeffDot3, yDot3, coeffDot4, yDot4]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setStabilityCheck:boolean+int+int+double#[ExpressionStatement(), this, performTest, performStabilityCheck, ExpressionStatement(), this, maxIter, maxNumIter, 0, 2, maxNumIter, ExpressionStatement(), this, maxChecks, maxNumChecks, 0, 1, maxNumChecks, IfStatement(if), stepsizeReductionFactor, 0.0001, stepsizeReductionFactor, 0.9999, ExpressionStatement(), this, stabilityReduction, 0.5, ExpressionStatement(), this, stabilityReduction, stepsizeReductionFactor]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setControlFactors:double+double+double+double#[IfStatement(if), control1, 0.0001, control1, 0.9999, ExpressionStatement(), this, stepControl1, 0.65, ExpressionStatement(), this, stepControl1, control1, IfStatement(if), control2, 0.0001, control2, 0.9999, ExpressionStatement(), this, stepControl2, 0.94, ExpressionStatement(), this, stepControl2, control2, IfStatement(if), control3, 0.0001, control3, 0.9999, ExpressionStatement(), this, stepControl3, 0.02, ExpressionStatement(), this, stepControl3, control3, IfStatement(if), control4, 1.0001, control4, 999.9, ExpressionStatement(), this, stepControl4, 4.0, ExpressionStatement(), this, stepControl4, control4]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setOrderControl:int+double+double#[IfStatement(if), maximalOrder, 6, maximalOrder, 2, 0, ExpressionStatement(), this, maxOrder, 18, IfStatement(if), control1, 0.0001, control1, 0.9999, ExpressionStatement(), this, orderControl1, 0.8, ExpressionStatement(), this, orderControl1, control1, IfStatement(if), control2, 0.0001, control2, 0.9999, ExpressionStatement(), this, orderControl2, 0.9, ExpressionStatement(), this, orderControl2, control2, ExpressionStatement(), initializeArrays]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:addStepHandler:StepHandler#[ExpressionStatement(), super, addStepHandler, handler, ExpressionStatement(), initializeArrays]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:addEventHandler:EventHandler+double+double+int+UnivariateSolver#[ExpressionStatement(), super, addEventHandler, function, maxCheckInterval, convergence, maxIterationCount, solver, ExpressionStatement(), initializeArrays]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:initializeArrays:null#[VariableDeclarationStatement(), final, int, size, maxOrder, 2, IfStatement(if), sequence, null, sequence.length, size, ExpressionStatement(), sequence, int, size, ExpressionStatement(), costPerStep, int, size, ExpressionStatement(), coeff, double, size, ExpressionStatement(), costPerTimeUnit, double, size, ExpressionStatement(), optimalStep, double, size, ForStatement(for), int, k, 0, k, size, k, ExpressionStatement(), sequence, k, 4, k, 2, ExpressionStatement(), costPerStep, 0, sequence, 0, 1, ForStatement(for), int, k, 1, k, size, k, ExpressionStatement(), costPerStep, k, costPerStep, k, 1, sequence, k, ForStatement(for), int, k, 0, k, size, k, ExpressionStatement(), coeff, k, k, 0, double, k, null, ForStatement(for), int, l, 0, l, k, l, VariableDeclarationStatement(), final, double, ratio, double, sequence, k, sequence, k, l, 1, ExpressionStatement(), coeff, k, l, 1.0, ratio, ratio, 1.0]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:setInterpolationControl:boolean+int#[ExpressionStatement(), this, useInterpolationError, useInterpolationErrorForControl, IfStatement(if), mudifControlParameter, 0, mudifControlParameter, 7, ExpressionStatement(), this, mudif, 4, ExpressionStatement(), this, mudif, mudifControlParameter]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:rescale:double[]+double[]+double[]#[IfStatement(if), vecAbsoluteTolerance, null, ForStatement(for), int, i, 0, i, scale.length, i, VariableDeclarationStatement(), final, double, yi, FastMath, max, FastMath, abs, y1, i, FastMath, abs, y2, i, ExpressionStatement(), scale, i, scalAbsoluteTolerance, scalRelativeTolerance, yi, ForStatement(for), int, i, 0, i, scale.length, i, VariableDeclarationStatement(), final, double, yi, FastMath, max, FastMath, abs, y1, i, FastMath, abs, y2, i, ExpressionStatement(), scale, i, vecAbsoluteTolerance, i, vecRelativeTolerance, i, yi]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:tryStep:double+double[]+double+int+double[]+double[][]+double[]+double[]+double[]#[VariableDeclarationStatement(), final, int, n, sequence, k, VariableDeclarationStatement(), final, double, subStep, step, n, VariableDeclarationStatement(), final, double, subStep2, 2, subStep, VariableDeclarationStatement(), double, t, t0, subStep, ForStatement(for), int, i, 0, i, y0.length, i, ExpressionStatement(), yTmp, i, y0, i, ExpressionStatement(), yEnd, i, y0, i, subStep, f, 0, i, ExpressionStatement(), computeDerivatives, t, yEnd, f, 1, ForStatement(for), int, j, 1, j, n, j, IfStatement(if), 2, j, n, ExpressionStatement(), System, arraycopy, yEnd, 0, yMiddle, 0, y0.length, ExpressionStatement(), t, subStep, ForStatement(for), int, i, 0, i, y0.length, i, VariableDeclarationStatement(), final, double, middle, yEnd, i, ExpressionStatement(), yEnd, i, yTmp, i, subStep2, f, j, i, ExpressionStatement(), yTmp, i, middle, ExpressionStatement(), computeDerivatives, t, yEnd, f, j, 1, IfStatement(if), performTest, j, maxChecks, k, maxIter, VariableDeclarationStatement(), double, initialNorm, 0.0, ForStatement(for), int, l, 0, l, scale.length, l, VariableDeclarationStatement(), final, double, ratio, f, 0, l, scale, l, ExpressionStatement(), initialNorm, ratio, ratio, VariableDeclarationStatement(), double, deltaNorm, 0.0, ForStatement(for), int, l, 0, l, scale.length, l, VariableDeclarationStatement(), final, double, ratio, f, j, 1, l, f, 0, l, scale, l, ExpressionStatement(), deltaNorm, ratio, ratio, IfStatement(if), deltaNorm, 4, FastMath, max, 1.0e-15, initialNorm, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, y0.length, i, ExpressionStatement(), yEnd, i, 0.5, yTmp, i, yEnd, i, subStep, f, n, i, ReturnStatement(return), true]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:extrapolate:int+int+double[][]+double[]#[ForStatement(for), int, j, 1, j, k, j, ForStatement(for), int, i, 0, i, last.length, i, ExpressionStatement(), diag, k, j, 1, i, diag, k, j, i, coeff, k, offset, j, 1, diag, k, j, i, diag, k, j, 1, i, ForStatement(for), int, i, 0, i, last.length, i, ExpressionStatement(), last, i, diag, 0, i, coeff, k, offset, k, 1, diag, 0, i, last, i]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerIntegrator:integrate:ExpandableStatefulODE+double#[ExpressionStatement(), sanityChecks, equations, t, ExpressionStatement(), setEquations, equations, VariableDeclarationStatement(), final, boolean, forward, t, equations, getTime, VariableDeclarationStatement(), final, double, y0, equations, getCompleteState, VariableDeclarationStatement(), final, double, y, y0, clone, VariableDeclarationStatement(), final, double, yDot0, double, y.length, VariableDeclarationStatement(), final, double, y1, double, y.length, VariableDeclarationStatement(), final, double, yTmp, double, y.length, VariableDeclarationStatement(), final, double, yTmpDot, double, y.length, VariableDeclarationStatement(), final, double, diagonal, double, sequence.length, 1, VariableDeclarationStatement(), final, double, y1Diag, double, sequence.length, 1, ForStatement(for), int, k, 0, k, sequence.length, 1, k, ExpressionStatement(), diagonal, k, double, y.length, ExpressionStatement(), y1Diag, k, double, y.length, VariableDeclarationStatement(), final, double, fk, double, sequence.length, ForStatement(for), int, k, 0, k, sequence.length, k, ExpressionStatement(), fk, k, double, sequence, k, 1, ExpressionStatement(), fk, k, 0, yDot0, ForStatement(for), int, l, 0, l, sequence, k, l, ExpressionStatement(), fk, k, l, 1, double, y0.length, IfStatement(if), y, y0, ExpressionStatement(), System, arraycopy, y0, 0, y, 0, y0.length, VariableDeclarationStatement(), final, double, yDot1, double, y0.length, VariableDeclarationStatement(), final, double, yMidDots, double, 1, 2, sequence.length, y0.length, VariableDeclarationStatement(), final, double, scale, double, mainSetDimension, ExpressionStatement(), rescale, y, y, scale, VariableDeclarationStatement(), final, double, tol, vecRelativeTolerance, null, scalRelativeTolerance, vecRelativeTolerance, 0, VariableDeclarationStatement(), final, double, log10R, FastMath, log10, FastMath, max, 1.0e-10, tol, VariableDeclarationStatement(), int, targetIter, FastMath, max, 1, FastMath, min, sequence.length, 2, int, FastMath, floor, 0.5, 0.6, log10R, VariableDeclarationStatement(), final, AbstractStepInterpolator, interpolator, new, GraggBulirschStoerStepInterpolator, y, yDot0, y1, yDot1, yMidDots, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, ExpressionStatement(), interpolator, storeTime, equations, getTime, ExpressionStatement(), stepStart, equations, getTime, VariableDeclarationStatement(), double, hNew, 0, VariableDeclarationStatement(), double, maxError, Double.MAX_VALUE, VariableDeclarationStatement(), boolean, previousRejected, false, VariableDeclarationStatement(), boolean, firstTime, true, VariableDeclarationStatement(), boolean, newStep, true, VariableDeclarationStatement(), boolean, firstStepAlreadyComputed, false, ExpressionStatement(), initIntegration, equations, getTime, y0, t, ExpressionStatement(), costPerTimeUnit, 0, 0, ExpressionStatement(), isLastStep, false, DoStatement(do), VariableDeclarationStatement(), double, error, VariableDeclarationStatement(), boolean, reject, false, IfStatement(if), newStep, ExpressionStatement(), interpolator, shift, IfStatement(if), firstStepAlreadyComputed, ExpressionStatement(), computeDerivatives, stepStart, y, yDot0, IfStatement(if), firstTime, ExpressionStatement(), hNew, initializeStep, forward, 2, targetIter, 1, scale, stepStart, y, yDot0, yTmp, yTmpDot, ExpressionStatement(), newStep, false, ExpressionStatement(), stepSize, hNew, IfStatement(if), forward, stepStart, stepSize, t, forward, stepStart, stepSize, t, ExpressionStatement(), stepSize, t, stepStart, VariableDeclarationStatement(), final, double, nextT, stepStart, stepSize, ExpressionStatement(), isLastStep, forward, nextT, t, nextT, t, VariableDeclarationStatement(), int, k, 1, ForStatement(for), boolean, loop, true, loop, ExpressionStatement(), k, IfStatement(if), tryStep, stepStart, y, stepSize, k, scale, fk, k, k, 0, yMidDots, 0, diagonal, k, 1, k, 0, y1, y1Diag, k, 1, yTmp, ExpressionStatement(), hNew, FastMath, abs, filterStep, stepSize, stabilityReduction, forward, false, ExpressionStatement(), reject, true, ExpressionStatement(), loop, false, IfStatement(if), k, 0, ExpressionStatement(), extrapolate, 0, k, y1Diag, y1, ExpressionStatement(), rescale, y, y1, scale, ExpressionStatement(), error, 0, ForStatement(for), int, j, 0, j, mainSetDimension, j, VariableDeclarationStatement(), final, double, e, FastMath, abs, y1, j, y1Diag, 0, j, scale, j, ExpressionStatement(), error, e, e, ExpressionStatement(), error, FastMath, sqrt, error, mainSetDimension, IfStatement(if), error, 1.0e15, k, 1, error, maxError, ExpressionStatement(), hNew, FastMath, abs, filterStep, stepSize, stabilityReduction, forward, false, ExpressionStatement(), reject, true, ExpressionStatement(), loop, false, ExpressionStatement(), maxError, FastMath, max, 4, error, 1.0, VariableDeclarationStatement(), final, double, exp, 1.0, 2, k, 1, VariableDeclarationStatement(), double, fac, stepControl2, FastMath, pow, error, stepControl1, exp, VariableDeclarationStatement(), final, double, pow, FastMath, pow, stepControl3, exp, ExpressionStatement(), fac, FastMath, max, pow, stepControl4, FastMath, min, 1, pow, fac, ExpressionStatement(), optimalStep, k, FastMath, abs, filterStep, stepSize, fac, forward, true, ExpressionStatement(), costPerTimeUnit, k, costPerStep, k, optimalStep, k, SwitchStatement(switch), k, targetIter, SwitchCase(case), 1, IfStatement(if), targetIter, 1, previousRejected, IfStatement(if), error, 1.0, ExpressionStatement(), loop, false, VariableDeclarationStatement(), final, double, ratio, double, sequence, targetIter, sequence, targetIter, 1, sequence, 0, sequence, 0, IfStatement(if), error, ratio, ratio, ExpressionStatement(), reject, true, ExpressionStatement(), loop, false, ExpressionStatement(), targetIter, k, IfStatement(if), targetIter, 1, costPerTimeUnit, targetIter, 1, orderControl1, costPerTimeUnit, targetIter, ExpressionStatement(), targetIter, ExpressionStatement(), hNew, optimalStep, targetIter, BreakStatement(break), SwitchCase(case), 0, IfStatement(if), error, 1.0, ExpressionStatement(), loop, false, VariableDeclarationStatement(), final, double, ratio, double, sequence, k, 1, sequence, 0, IfStatement(if), error, ratio, ratio, ExpressionStatement(), reject, true, ExpressionStatement(), loop, false, IfStatement(if), targetIter, 1, costPerTimeUnit, targetIter, 1, orderControl1, costPerTimeUnit, targetIter, ExpressionStatement(), targetIter, ExpressionStatement(), hNew, optimalStep, targetIter, BreakStatement(break), SwitchCase(case), 1, IfStatement(if), error, 1.0, ExpressionStatement(), reject, true, IfStatement(if), targetIter, 1, costPerTimeUnit, targetIter, 1, orderControl1, costPerTimeUnit, targetIter, ExpressionStatement(), targetIter, ExpressionStatement(), hNew, optimalStep, targetIter, ExpressionStatement(), loop, false, BreakStatement(break), SwitchCase(default), IfStatement(if), firstTime, isLastStep, error, 1.0, ExpressionStatement(), loop, false, BreakStatement(break), IfStatement(if), reject, ExpressionStatement(), computeDerivatives, stepStart, stepSize, y1, yDot1, VariableDeclarationStatement(), double, hInt, getMaxStep, IfStatement(if), reject, ForStatement(for), int, j, 1, j, k, j, ExpressionStatement(), extrapolate, 0, j, diagonal, yMidDots, 0, VariableDeclarationStatement(), final, int, mu, 2, k, mudif, 3, ForStatement(for), int, l, 0, l, mu, l, VariableDeclarationStatement(), final, int, l2, l, 2, VariableDeclarationStatement(), double, factor, FastMath, pow, 0.5, sequence, l2, l, VariableDeclarationStatement(), int, middleIndex, fk, l2, length, 2, ForStatement(for), int, i, 0, i, y0.length, i, ExpressionStatement(), yMidDots, l, 1, i, factor, fk, l2, middleIndex, l, i, ForStatement(for), int, j, 1, j, k, l2, j, ExpressionStatement(), factor, FastMath, pow, 0.5, sequence, j, l2, l, ExpressionStatement(), middleIndex, fk, l2, j, length, 2, ForStatement(for), int, i, 0, i, y0.length, i, ExpressionStatement(), diagonal, j, 1, i, factor, fk, l2, j, middleIndex, l, i, ExpressionStatement(), extrapolate, l2, j, diagonal, yMidDots, l, 1, ForStatement(for), int, i, 0, i, y0.length, i, ExpressionStatement(), yMidDots, l, 1, i, stepSize, ForStatement(for), int, j, l, 1, 2, j, k, j, ForStatement(for), int, m, fk, j, length, 1, m, 2, l, 1, m, ForStatement(for), int, i, 0, i, y0.length, i, ExpressionStatement(), fk, j, m, i, fk, j, m, 2, i, IfStatement(if), mu, 0, VariableDeclarationStatement(), final, GraggBulirschStoerStepInterpolator, gbsInterpolator, GraggBulirschStoerStepInterpolator, interpolator, ExpressionStatement(), gbsInterpolator, computeCoefficients, mu, stepSize, IfStatement(if), useInterpolationError, VariableDeclarationStatement(), final, double, interpError, gbsInterpolator, estimateError, scale, ExpressionStatement(), hInt, FastMath, abs, stepSize, FastMath, max, FastMath, pow, interpError, 1.0, mu, 4, 0.01, IfStatement(if), interpError, 10.0, ExpressionStatement(), hNew, hInt, ExpressionStatement(), reject, true, IfStatement(if), reject, ExpressionStatement(), interpolator, storeTime, stepStart, stepSize, ExpressionStatement(), stepStart, acceptStep, interpolator, y1, yDot1, t, ExpressionStatement(), interpolator, storeTime, stepStart, ExpressionStatement(), System, arraycopy, y1, 0, y, 0, y0.length, ExpressionStatement(), System, arraycopy, yDot1, 0, yDot0, 0, y0.length, ExpressionStatement(), firstStepAlreadyComputed, true, VariableDeclarationStatement(), int, optimalIter, IfStatement(if), k, 1, ExpressionStatement(), optimalIter, 2, IfStatement(if), previousRejected, ExpressionStatement(), optimalIter, 1, IfStatement(if), k, targetIter, ExpressionStatement(), optimalIter, k, IfStatement(if), costPerTimeUnit, k, 1, orderControl1, costPerTimeUnit, k, ExpressionStatement(), optimalIter, k, 1, IfStatement(if), costPerTimeUnit, k, orderControl2, costPerTimeUnit, k, 1, ExpressionStatement(), optimalIter, FastMath, min, k, 1, sequence.length, 2, ExpressionStatement(), optimalIter, k, 1, IfStatement(if), k, 2, costPerTimeUnit, k, 2, orderControl1, costPerTimeUnit, k, 1, ExpressionStatement(), optimalIter, k, 2, IfStatement(if), costPerTimeUnit, k, orderControl2, costPerTimeUnit, optimalIter, ExpressionStatement(), optimalIter, FastMath, min, k, sequence.length, 2, IfStatement(if), previousRejected, ExpressionStatement(), targetIter, FastMath, min, optimalIter, k, ExpressionStatement(), hNew, FastMath, min, FastMath, abs, stepSize, optimalStep, targetIter, IfStatement(if), optimalIter, k, ExpressionStatement(), hNew, optimalStep, optimalIter, IfStatement(if), k, targetIter, costPerTimeUnit, k, orderControl2, costPerTimeUnit, k, 1, ExpressionStatement(), hNew, filterStep, optimalStep, k, costPerStep, optimalIter, 1, costPerStep, k, forward, false, ExpressionStatement(), hNew, filterStep, optimalStep, k, costPerStep, optimalIter, costPerStep, k, forward, false, ExpressionStatement(), targetIter, optimalIter, ExpressionStatement(), newStep, true, ExpressionStatement(), hNew, FastMath, min, hNew, hInt, IfStatement(if), forward, ExpressionStatement(), hNew, hNew, ExpressionStatement(), firstTime, false, IfStatement(if), reject, ExpressionStatement(), isLastStep, false, ExpressionStatement(), previousRejected, true, ExpressionStatement(), previousRejected, false, isLastStep, ExpressionStatement(), equations, setTime, stepStart, ExpressionStatement(), equations, setCompleteState, y, ExpressionStatement(), resetInternalState]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:resetTables:int#[IfStatement(if), maxDegree, 0, ExpressionStatement(), polynomials, null, ExpressionStatement(), errfac, null, ExpressionStatement(), currentDegree, 1, VariableDeclarationStatement(), final, double, newPols, double, maxDegree, 1, IfStatement(if), polynomials, null, ExpressionStatement(), System, arraycopy, polynomials, 0, newPols, 0, polynomials.length, ForStatement(for), int, i, polynomials.length, i, newPols.length, i, ExpressionStatement(), newPols, i, double, currentState.length, ForStatement(for), int, i, 0, i, newPols.length, i, ExpressionStatement(), newPols, i, double, currentState.length, ExpressionStatement(), polynomials, newPols, IfStatement(if), maxDegree, 4, ExpressionStatement(), errfac, null, ExpressionStatement(), errfac, double, maxDegree, 4, ForStatement(for), int, i, 0, i, errfac.length, i, VariableDeclarationStatement(), final, int, ip5, i, 5, ExpressionStatement(), errfac, i, 1.0, ip5, ip5, VariableDeclarationStatement(), final, double, e, 0.5, FastMath, sqrt, double, i, 1, ip5, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), errfac, i, e, j, 1, ExpressionStatement(), currentDegree, 0]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:doCopy:null#[ReturnStatement(return), new, GraggBulirschStoerStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:computeCoefficients:int+double#[IfStatement(if), polynomials, null, polynomials.length, mu, 4, ExpressionStatement(), resetTables, mu, 4, ExpressionStatement(), currentDegree, mu, 4, ForStatement(for), int, i, 0, i, currentState.length, i, VariableDeclarationStatement(), final, double, yp0, h, y0Dot, i, VariableDeclarationStatement(), final, double, yp1, h, y1Dot, i, VariableDeclarationStatement(), final, double, ydiff, y1, i, currentState, i, VariableDeclarationStatement(), final, double, aspl, ydiff, yp1, VariableDeclarationStatement(), final, double, bspl, yp0, ydiff, ExpressionStatement(), polynomials, 0, i, currentState, i, ExpressionStatement(), polynomials, 1, i, ydiff, ExpressionStatement(), polynomials, 2, i, aspl, ExpressionStatement(), polynomials, 3, i, bspl, IfStatement(if), mu, 0, ReturnStatement(return), VariableDeclarationStatement(), final, double, ph0, 0.5, currentState, i, y1, i, 0.125, aspl, bspl, ExpressionStatement(), polynomials, 4, i, 16, yMidDots, 0, i, ph0, IfStatement(if), mu, 0, VariableDeclarationStatement(), final, double, ph1, ydiff, 0.25, aspl, bspl, ExpressionStatement(), polynomials, 5, i, 16, yMidDots, 1, i, ph1, IfStatement(if), mu, 1, VariableDeclarationStatement(), final, double, ph2, yp1, yp0, ExpressionStatement(), polynomials, 6, i, 16, yMidDots, 2, i, ph2, polynomials, 4, i, IfStatement(if), mu, 2, VariableDeclarationStatement(), final, double, ph3, 6, bspl, aspl, ExpressionStatement(), polynomials, 7, i, 16, yMidDots, 3, i, ph3, 3, polynomials, 5, i, ForStatement(for), int, j, 4, j, mu, j, VariableDeclarationStatement(), final, double, fac1, 0.5, j, j, 1, VariableDeclarationStatement(), final, double, fac2, 2, fac1, j, 2, j, 3, ExpressionStatement(), polynomials, j, 4, i, 16, yMidDots, j, i, fac1, polynomials, j, 2, i, fac2, polynomials, j, i]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:estimateError:double[]#[VariableDeclarationStatement(), double, error, 0, IfStatement(if), currentDegree, 5, ForStatement(for), int, i, 0, i, scale.length, i, VariableDeclarationStatement(), final, double, e, polynomials, currentDegree, i, scale, i, ExpressionStatement(), error, e, e, ExpressionStatement(), error, FastMath, sqrt, error, scale.length, errfac, currentDegree, 5, ReturnStatement(return), error]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, int, dimension, currentState.length, VariableDeclarationStatement(), final, double, oneMinusTheta, 1.0, theta, VariableDeclarationStatement(), final, double, theta05, theta, 0.5, VariableDeclarationStatement(), final, double, tOmT, theta, oneMinusTheta, VariableDeclarationStatement(), final, double, t4, tOmT, tOmT, VariableDeclarationStatement(), final, double, t4Dot, 2, tOmT, 1, 2, theta, VariableDeclarationStatement(), final, double, dot1, 1.0, h, VariableDeclarationStatement(), final, double, dot2, theta, 2, 3, theta, h, VariableDeclarationStatement(), final, double, dot3, 3, theta, 4, theta, 1, h, ForStatement(for), int, i, 0, i, dimension, i, VariableDeclarationStatement(), final, double, p0, polynomials, 0, i, VariableDeclarationStatement(), final, double, p1, polynomials, 1, i, VariableDeclarationStatement(), final, double, p2, polynomials, 2, i, VariableDeclarationStatement(), final, double, p3, polynomials, 3, i, ExpressionStatement(), interpolatedState, i, p0, theta, p1, oneMinusTheta, p2, theta, p3, oneMinusTheta, ExpressionStatement(), interpolatedDerivatives, i, dot1, p1, dot2, p2, dot3, p3, IfStatement(if), currentDegree, 3, VariableDeclarationStatement(), double, cDot, 0, VariableDeclarationStatement(), double, c, polynomials, currentDegree, i, ForStatement(for), int, j, currentDegree, 1, j, 3, j, VariableDeclarationStatement(), final, double, d, 1.0, j, 3, ExpressionStatement(), cDot, d, theta05, cDot, c, ExpressionStatement(), c, polynomials, j, i, c, d, theta05, ExpressionStatement(), interpolatedState, i, t4, c, ExpressionStatement(), interpolatedDerivatives, i, t4, cDot, t4Dot, c, h, IfStatement(if), h, 0, ExpressionStatement(), System, arraycopy, yMidDots, 1, 0, interpolatedDerivatives, 0, dimension]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:writeExternal:ObjectOutput#[VariableDeclarationStatement(), final, int, dimension, currentState, null, 1, currentState.length, ExpressionStatement(), writeBaseExternal, out, ExpressionStatement(), out, writeInt, currentDegree, ForStatement(for), int, k, 0, k, currentDegree, k, ForStatement(for), int, l, 0, l, dimension, l, ExpressionStatement(), out, writeDouble, polynomials, k, l]
org.apache.commons.math4.ode.nonstiff:GraggBulirschStoerStepInterpolator:readExternal:ObjectInput#[VariableDeclarationStatement(), final, double, t, readBaseExternal, in, VariableDeclarationStatement(), final, int, dimension, currentState, null, 1, currentState.length, VariableDeclarationStatement(), final, int, degree, in, readInt, ExpressionStatement(), resetTables, degree, ExpressionStatement(), currentDegree, degree, ForStatement(for), int, k, 0, k, currentDegree, k, ForStatement(for), int, l, 0, l, dimension, l, ExpressionStatement(), polynomials, k, l, in, readDouble, ExpressionStatement(), setInterpolatedTime, t]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 6, ExpressionStatement(), c, 0, fraction, 2, 9, ExpressionStatement(), c, 1, fraction, 1, 3, ExpressionStatement(), c, 2, fraction, 1, 2, ExpressionStatement(), c, 3, fraction, 3, 5, ExpressionStatement(), c, 4, getField, getOne, ExpressionStatement(), c, 5, getField, getOne, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 6, 1, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), a, i, MathArrays, buildArray, getField, i, 1, ExpressionStatement(), a, 0, 0, fraction, 2, 9, ExpressionStatement(), a, 1, 0, fraction, 1, 12, ExpressionStatement(), a, 1, 1, fraction, 1, 4, ExpressionStatement(), a, 2, 0, fraction, 1, 8, ExpressionStatement(), a, 2, 1, getField, getZero, ExpressionStatement(), a, 2, 2, fraction, 3, 8, ExpressionStatement(), a, 3, 0, fraction, 91, 500, ExpressionStatement(), a, 3, 1, fraction, 27, 100, ExpressionStatement(), a, 3, 2, fraction, 78, 125, ExpressionStatement(), a, 3, 3, fraction, 8, 125, ExpressionStatement(), a, 4, 0, fraction, 11, 20, ExpressionStatement(), a, 4, 1, fraction, 27, 20, ExpressionStatement(), a, 4, 2, fraction, 12, 5, ExpressionStatement(), a, 4, 3, fraction, 36, 5, ExpressionStatement(), a, 4, 4, fraction, 5, 1, ExpressionStatement(), a, 5, 0, fraction, 1, 12, ExpressionStatement(), a, 5, 1, getField, getZero, ExpressionStatement(), a, 5, 2, fraction, 27, 32, ExpressionStatement(), a, 5, 3, fraction, 4, 3, ExpressionStatement(), a, 5, 4, fraction, 125, 96, ExpressionStatement(), a, 5, 5, fraction, 5, 48, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 7, ExpressionStatement(), b, 0, fraction, 1, 12, ExpressionStatement(), b, 1, getField, getZero, ExpressionStatement(), b, 2, fraction, 27, 32, ExpressionStatement(), b, 3, fraction, 4, 3, ExpressionStatement(), b, 4, fraction, 125, 96, ExpressionStatement(), b, 5, fraction, 5, 48, ExpressionStatement(), b, 6, getField, getZero, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, HighamHall54FieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:getOrder:null#[ReturnStatement(return), 5]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldIntegrator:estimateError:T[][]+T[]+T[]+T#[VariableDeclarationStatement(), T, error, getField, getZero, ForStatement(for), int, j, 0, j, mainSetDimension, j, VariableDeclarationStatement(), T, errSum, yDotK, 0, j, multiply, e, 0, ForStatement(for), int, l, 1, l, e.length, l, ExpressionStatement(), errSum, errSum, add, yDotK, l, j, multiply, e, l, VariableDeclarationStatement(), final, T, yScale, MathUtils, max, y0, j, abs, y1, j, abs, VariableDeclarationStatement(), final, T, tol, vecAbsoluteTolerance, null, yScale, multiply, scalRelativeTolerance, add, scalAbsoluteTolerance, yScale, multiply, vecRelativeTolerance, j, add, vecAbsoluteTolerance, j, VariableDeclarationStatement(), final, T, ratio, h, multiply, errSum, divide, tol, ExpressionStatement(), error, error, add, ratio, multiply, ratio, ReturnStatement(return), error, divide, mainSetDimension, sqrt]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, HighamHall54FieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:HighamHall54FieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, bDot0, theta, multiply, theta, multiply, theta, multiply, 10.0, add, 16.0, add, 15.0, 2.0, add, 1, VariableDeclarationStatement(), final, T, bDot1, time, getField, getZero, VariableDeclarationStatement(), final, T, bDot2, theta, multiply, theta, multiply, theta, multiply, 135.0, 2.0, add, 729.0, 8.0, add, 459.0, 16.0, VariableDeclarationStatement(), final, T, bDot3, theta, multiply, theta, multiply, theta, multiply, 120.0, add, 152.0, add, 44.0, VariableDeclarationStatement(), final, T, bDot4, theta, multiply, theta, multiply, theta, multiply, 125.0, 2.0, add, 625.0, 8.0, add, 375.0, 16.0, VariableDeclarationStatement(), final, T, bDot5, theta, multiply, 5.0, 8.0, multiply, theta, multiply, 2, subtract, 1, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, b0, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, 5.0, 2.0, add, 16.0, 3.0, add, 15.0, 4.0, add, 1, VariableDeclarationStatement(), final, T, b1, time, getField, getZero, VariableDeclarationStatement(), final, T, b2, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, 135.0, 8.0, add, 243.0, 8.0, add, 459.0, 32.0, VariableDeclarationStatement(), final, T, b3, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, 30.0, add, 152.0, 3.0, add, 22.0, VariableDeclarationStatement(), final, T, b4, thetaH, multiply, theta, multiply, theta, multiply, theta, multiply, 125.0, 8.0, add, 625.0, 24.0, add, 375.0, 32.0, VariableDeclarationStatement(), final, T, b5, thetaH, multiply, theta, multiply, theta, multiply, 5.0, 12.0, add, 5.0, 16.0, ExpressionStatement(), interpolatedState, previousStateLinearCombination, b0, b1, b2, b3, b4, b5, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, bDot0, bDot1, bDot2, bDot3, bDot4, bDot5, VariableDeclarationStatement(), final, T, theta2, theta, multiply, theta, VariableDeclarationStatement(), final, T, h, thetaH, divide, theta, VariableDeclarationStatement(), final, T, b0, h, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 5.0, 2.0, add, 16.0, 3.0, add, 15.0, 4.0, add, 1.0, add, 1.0, 12.0, VariableDeclarationStatement(), final, T, b1, time, getField, getZero, VariableDeclarationStatement(), final, T, b2, h, multiply, theta2, multiply, theta, multiply, theta, multiply, 135.0, 8.0, add, 243.0, 8.0, add, 459.0, 32.0, add, 27.0, 32.0, VariableDeclarationStatement(), final, T, b3, h, multiply, theta2, multiply, theta, multiply, theta, multiply, 30.0, add, 152.0, 3.0, add, 22.0, add, 4.0, 3.0, VariableDeclarationStatement(), final, T, b4, h, multiply, theta2, multiply, theta, multiply, theta, multiply, 125.0, 8.0, add, 625.0, 24.0, add, 375.0, 32.0, add, 125.0, 96.0, VariableDeclarationStatement(), final, T, b5, h, multiply, theta2, multiply, theta, multiply, 5.0, 12.0, add, 5.0, 16.0, add, 5.0, 48.0, ExpressionStatement(), interpolatedState, currentStateLinearCombination, b0, b1, b2, b3, b4, b5, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, bDot0, bDot1, bDot2, bDot3, bDot4, bDot5, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:HighamHall54Integrator:getOrder:null#[ReturnStatement(return), 5]
org.apache.commons.math4.ode.nonstiff:HighamHall54Integrator:estimateError:double[][]+double[]+double[]+double#[VariableDeclarationStatement(), double, error, 0, ForStatement(for), int, j, 0, j, mainSetDimension, j, VariableDeclarationStatement(), double, errSum, STATIC_E, 0, yDotK, 0, j, ForStatement(for), int, l, 1, l, STATIC_E.length, l, ExpressionStatement(), errSum, STATIC_E, l, yDotK, l, j, VariableDeclarationStatement(), final, double, yScale, FastMath, max, FastMath, abs, y0, j, FastMath, abs, y1, j, VariableDeclarationStatement(), final, double, tol, vecAbsoluteTolerance, null, scalAbsoluteTolerance, scalRelativeTolerance, yScale, vecAbsoluteTolerance, j, vecRelativeTolerance, j, yScale, VariableDeclarationStatement(), final, double, ratio, h, errSum, tol, ExpressionStatement(), error, ratio, ratio, ReturnStatement(return), FastMath, sqrt, error, mainSetDimension]
org.apache.commons.math4.ode.nonstiff:HighamHall54StepInterpolator:doCopy:null#[ReturnStatement(return), new, HighamHall54StepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:HighamHall54StepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, double, bDot0, 1, theta, 15.0, 2.0, theta, 16.0, 10.0, theta, VariableDeclarationStatement(), final, double, bDot2, theta, 459.0, 16.0, theta, 729.0, 8.0, 135.0, 2.0, theta, VariableDeclarationStatement(), final, double, bDot3, theta, 44.0, theta, 152.0, 120.0, theta, VariableDeclarationStatement(), final, double, bDot4, theta, 375.0, 16.0, theta, 625.0, 8.0, 125.0, 2.0, theta, VariableDeclarationStatement(), final, double, bDot5, theta, 5.0, 8.0, 2, theta, 1, IfStatement(if), previousState, null, theta, 0.5, VariableDeclarationStatement(), final, double, hTheta, h, theta, VariableDeclarationStatement(), final, double, b0, hTheta, 1.0, theta, 15.0, 4.0, theta, 16.0, 3.0, 5.0, 2.0, theta, VariableDeclarationStatement(), final, double, b2, hTheta, theta, 459.0, 32.0, theta, 243.0, 8.0, theta, 135.0, 8.0, VariableDeclarationStatement(), final, double, b3, hTheta, theta, 22.0, theta, 152.0, 3.0, theta, 30.0, VariableDeclarationStatement(), final, double, b4, hTheta, theta, 375.0, 32.0, theta, 625.0, 24.0, theta, 125.0, 8.0, VariableDeclarationStatement(), final, double, b5, hTheta, theta, 5.0, 16.0, theta, 5.0, 12.0, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot0, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 3, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 4, i, VariableDeclarationStatement(), final, double, yDot5, yDotK, 5, i, ExpressionStatement(), interpolatedState, i, previousState, i, b0, yDot0, b2, yDot2, b3, yDot3, b4, yDot4, b5, yDot5, ExpressionStatement(), interpolatedDerivatives, i, bDot0, yDot0, bDot2, yDot2, bDot3, yDot3, bDot4, yDot4, bDot5, yDot5, VariableDeclarationStatement(), final, double, theta2, theta, theta, VariableDeclarationStatement(), final, double, b0, h, 1.0, 12.0, theta, 1.0, theta, 15.0, 4.0, theta, 16.0, 3.0, theta, 5.0, 2.0, VariableDeclarationStatement(), final, double, b2, h, 27.0, 32.0, theta2, 459.0, 32.0, theta, 243.0, 8.0, theta, 135.0, 8.0, VariableDeclarationStatement(), final, double, b3, h, 4.0, 3.0, theta2, 22.0, theta, 152.0, 3.0, theta, 30.0, VariableDeclarationStatement(), final, double, b4, h, 125.0, 96.0, theta2, 375.0, 32.0, theta, 625.0, 24.0, theta, 125.0, 8.0, VariableDeclarationStatement(), final, double, b5, h, 5.0, 48.0, theta2, 5.0, 16.0, theta, 5.0, 12.0, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot0, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 3, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 4, i, VariableDeclarationStatement(), final, double, yDot5, yDotK, 5, i, ExpressionStatement(), interpolatedState, i, currentState, i, b0, yDot0, b2, yDot2, b3, yDot3, b4, yDot4, b5, yDot5, ExpressionStatement(), interpolatedDerivatives, i, bDot0, yDot0, bDot2, yDot2, bDot3, yDot3, bDot4, yDot4, bDot5, yDot5]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, q, getField, getZero, add, 21, sqrt, VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 6, ExpressionStatement(), c, 0, getField, getOne, ExpressionStatement(), c, 1, fraction, 1, 2, ExpressionStatement(), c, 2, fraction, 2, 3, ExpressionStatement(), c, 3, q, subtract, 7, divide, 14, ExpressionStatement(), c, 4, q, add, 7, divide, 14, ExpressionStatement(), c, 5, getField, getOne, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, q, getField, getZero, add, 21, sqrt, VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 6, 1, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), a, i, MathArrays, buildArray, getField, i, 1, ExpressionStatement(), a, 0, 0, getField, getOne, ExpressionStatement(), a, 1, 0, fraction, 3, 8, ExpressionStatement(), a, 1, 1, fraction, 1, 8, ExpressionStatement(), a, 2, 0, fraction, 8, 27, ExpressionStatement(), a, 2, 1, fraction, 2, 27, ExpressionStatement(), a, 2, 2, a, 2, 0, ExpressionStatement(), a, 3, 0, q, multiply, 9, add, 21, divide, 392, ExpressionStatement(), a, 3, 1, q, multiply, 8, add, 56, divide, 392, ExpressionStatement(), a, 3, 2, q, multiply, 48, add, 336, divide, 392, ExpressionStatement(), a, 3, 3, q, multiply, 3, add, 63, divide, 392, ExpressionStatement(), a, 4, 0, q, multiply, 255, add, 1155, divide, 1960, ExpressionStatement(), a, 4, 1, q, multiply, 40, add, 280, divide, 1960, ExpressionStatement(), a, 4, 2, q, multiply, 320, divide, 1960, ExpressionStatement(), a, 4, 3, q, multiply, 363, add, 63, divide, 1960, ExpressionStatement(), a, 4, 4, q, multiply, 392, add, 2352, divide, 1960, ExpressionStatement(), a, 5, 0, q, multiply, 105, add, 330, divide, 180, ExpressionStatement(), a, 5, 1, fraction, 2, 3, ExpressionStatement(), a, 5, 2, q, multiply, 280, add, 200, divide, 180, ExpressionStatement(), a, 5, 3, q, multiply, 189, add, 126, divide, 180, ExpressionStatement(), a, 5, 4, q, multiply, 126, add, 686, divide, 180, ExpressionStatement(), a, 5, 5, q, multiply, 70, add, 490, divide, 180, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 7, ExpressionStatement(), b, 0, fraction, 1, 20, ExpressionStatement(), b, 1, getField, getZero, ExpressionStatement(), b, 2, fraction, 16, 45, ExpressionStatement(), b, 3, getField, getZero, ExpressionStatement(), b, 4, fraction, 49, 180, ExpressionStatement(), b, 5, b, 4, ExpressionStatement(), b, 6, b, 0, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:LutherFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, LutherFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:LutherFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, LutherFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:LutherFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, coeffDot1, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 21, add, 47, add, 36, add, 54, 5.0, add, 1, VariableDeclarationStatement(), final, T, coeffDot2, time, getField, getZero, VariableDeclarationStatement(), final, T, coeffDot3, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 112, add, 608, 3.0, add, 320, 3.0, add, 208, 15.0, VariableDeclarationStatement(), final, T, coeffDot4, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 567, 5.0, add, 972, 5.0, add, 486, 5.0, add, 324, 25.0, VariableDeclarationStatement(), final, T, coeffDot5, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c5a, divide, 5, add, c5b, divide, 15, add, c5c, divide, 30, add, c5d, divide, 150, VariableDeclarationStatement(), final, T, coeffDot6, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c6a, divide, 5, add, c6b, divide, 15, add, c6c, divide, 30, add, c6d, divide, 150, VariableDeclarationStatement(), final, T, coeffDot7, theta, multiply, theta, multiply, theta, multiply, 3.0, add, 3, add, 3, 5.0, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, s, thetaH, VariableDeclarationStatement(), final, T, coeff1, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 21, 5.0, add, 47, 4.0, add, 12, add, 27, 5.0, add, 1, VariableDeclarationStatement(), final, T, coeff2, time, getField, getZero, VariableDeclarationStatement(), final, T, coeff3, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 112, 5.0, add, 152, 3.0, add, 320, 9.0, add, 104, 15.0, VariableDeclarationStatement(), final, T, coeff4, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 567, 25.0, add, 243, 5.0, add, 162, 5.0, add, 162, 25.0, VariableDeclarationStatement(), final, T, coeff5, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c5a, divide, 25, add, c5b, divide, 60, add, c5c, divide, 90, add, c5d, divide, 300, VariableDeclarationStatement(), final, T, coeff6, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, c6a, divide, 25, add, c6b, divide, 60, add, c6c, divide, 90, add, c6d, divide, 300, VariableDeclarationStatement(), final, T, coeff7, s, multiply, theta, multiply, theta, multiply, theta, multiply, 3, 4.0, add, 1, add, 3, 10.0, ExpressionStatement(), interpolatedState, previousStateLinearCombination, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, coeff7, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, coeffDot7, VariableDeclarationStatement(), final, T, s, oneMinusThetaH, VariableDeclarationStatement(), final, T, coeff1, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 21, 5.0, add, 151, 20.0, add, 89, 20.0, add, 19, 20.0, add, 1, 20.0, VariableDeclarationStatement(), final, T, coeff2, time, getField, getZero, VariableDeclarationStatement(), final, T, coeff3, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 112, 5.0, add, 424, 15.0, add, 328, 45.0, add, 16, 45.0, add, 16, 45.0, VariableDeclarationStatement(), final, T, coeff4, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, 567, 25.0, add, 648, 25.0, add, 162, 25.0, VariableDeclarationStatement(), final, T, coeff5, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, d5a, divide, 25, add, d5b, divide, 300, add, d5c, divide, 900, add, 49, 180.0, add, 49, 180.0, VariableDeclarationStatement(), final, T, coeff6, s, multiply, theta, multiply, theta, multiply, theta, multiply, theta, multiply, d6a, divide, 25, add, d6b, divide, 300, add, d6c, divide, 900, add, 49, 180.0, add, 49, 180.0, VariableDeclarationStatement(), final, T, coeff7, s, multiply, theta, multiply, theta, multiply, theta, multiply, 3, 4.0, add, 1, 4.0, add, 1, 20.0, add, 1, 20.0, ExpressionStatement(), interpolatedState, currentStateLinearCombination, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, coeff7, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, coeffDot5, coeffDot6, coeffDot7, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:LutherStepInterpolator:doCopy:null#[ReturnStatement(return), new, LutherStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:LutherStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, double, coeffDot1, 1, theta, 54, 5.0, theta, 36, theta, 47, theta, 21, VariableDeclarationStatement(), final, double, coeffDot2, 0, VariableDeclarationStatement(), final, double, coeffDot3, theta, 208, 15.0, theta, 320, 3.0, theta, 608, 3.0, theta, 112, VariableDeclarationStatement(), final, double, coeffDot4, theta, 324, 25.0, theta, 486, 5.0, theta, 972, 5.0, theta, 567, 5.0, VariableDeclarationStatement(), final, double, coeffDot5, theta, 833, 343, Q, 150.0, theta, 637, 357, Q, 30.0, theta, 392, 287, Q, 15.0, theta, 49, 49, Q, 5.0, VariableDeclarationStatement(), final, double, coeffDot6, theta, 833, 343, Q, 150.0, theta, 637, 357, Q, 30.0, theta, 392, 287, Q, 15.0, theta, 49, 49, Q, 5.0, VariableDeclarationStatement(), final, double, coeffDot7, theta, 3, 5.0, theta, 3, theta, 3, IfStatement(if), previousState, null, theta, 0.5, VariableDeclarationStatement(), final, double, coeff1, 1, theta, 27, 5.0, theta, 12, theta, 47, 4.0, theta, 21, 5.0, VariableDeclarationStatement(), final, double, coeff2, 0, VariableDeclarationStatement(), final, double, coeff3, theta, 104, 15.0, theta, 320, 9.0, theta, 152, 3.0, theta, 112, 5.0, VariableDeclarationStatement(), final, double, coeff4, theta, 162, 25.0, theta, 162, 5.0, theta, 243, 5.0, theta, 567, 25.0, VariableDeclarationStatement(), final, double, coeff5, theta, 833, 343, Q, 300.0, theta, 637, 357, Q, 90.0, theta, 392, 287, Q, 60.0, theta, 49, 49, Q, 25.0, VariableDeclarationStatement(), final, double, coeff6, theta, 833, 343, Q, 300.0, theta, 637, 357, Q, 90.0, theta, 392, 287, Q, 60.0, theta, 49, 49, Q, 25.0, VariableDeclarationStatement(), final, double, coeff7, theta, 3, 10.0, theta, 1, theta, 3, 4.0, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, VariableDeclarationStatement(), final, double, yDot5, yDotK, 4, i, VariableDeclarationStatement(), final, double, yDot6, yDotK, 5, i, VariableDeclarationStatement(), final, double, yDot7, yDotK, 6, i, ExpressionStatement(), interpolatedState, i, previousState, i, theta, h, coeff1, yDot1, coeff2, yDot2, coeff3, yDot3, coeff4, yDot4, coeff5, yDot5, coeff6, yDot6, coeff7, yDot7, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2, coeffDot3, yDot3, coeffDot4, yDot4, coeffDot5, yDot5, coeffDot6, yDot6, coeffDot7, yDot7, VariableDeclarationStatement(), final, double, coeff1, 1, 20.0, theta, 19, 20.0, theta, 89, 20.0, theta, 151, 20.0, theta, 21, 5.0, VariableDeclarationStatement(), final, double, coeff2, 0, VariableDeclarationStatement(), final, double, coeff3, 16, 45.0, theta, 16, 45.0, theta, 328, 45.0, theta, 424, 15.0, theta, 112, 5.0, VariableDeclarationStatement(), final, double, coeff4, theta, theta, 162, 25.0, theta, 648, 25.0, theta, 567, 25.0, VariableDeclarationStatement(), final, double, coeff5, 49, 180.0, theta, 49, 180.0, theta, 2254, 1029, Q, 900.0, theta, 1372, 847, Q, 300.0, theta, 49, 49, Q, 25.0, VariableDeclarationStatement(), final, double, coeff6, 49, 180.0, theta, 49, 180.0, theta, 2254, 1029, Q, 900.0, theta, 1372, 847, Q, 300.0, theta, 49, 49, Q, 25.0, VariableDeclarationStatement(), final, double, coeff7, 1, 20.0, theta, 1, 20.0, theta, 1, 4.0, theta, 3, 4.0, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, VariableDeclarationStatement(), final, double, yDot5, yDotK, 4, i, VariableDeclarationStatement(), final, double, yDot6, yDotK, 5, i, VariableDeclarationStatement(), final, double, yDot7, yDotK, 6, i, ExpressionStatement(), interpolatedState, i, currentState, i, oneMinusThetaH, coeff1, yDot1, coeff2, yDot2, coeff3, yDot3, coeff4, yDot4, coeff5, yDot5, coeff6, yDot6, coeff7, yDot7, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2, coeffDot3, yDot3, coeffDot4, yDot4, coeffDot5, yDot5, coeffDot6, yDot6, coeffDot7, yDot7]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 1, ExpressionStatement(), c, 0, getField, getOne, multiply, 0.5, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 1, 1, ExpressionStatement(), a, 0, 0, fraction, 1, 2, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 2, ExpressionStatement(), b, 0, getField, getZero, ExpressionStatement(), b, 1, getField, getOne, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:MidpointFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, MidpointFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:MidpointFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, MidpointFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:MidpointFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, coeffDot2, theta, multiply, 2, VariableDeclarationStatement(), final, T, coeffDot1, time, getField, getOne, subtract, coeffDot2, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, coeff1, theta, multiply, oneMinusThetaH, VariableDeclarationStatement(), final, T, coeff2, theta, multiply, thetaH, ExpressionStatement(), interpolatedState, previousStateLinearCombination, coeff1, coeff2, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, VariableDeclarationStatement(), final, T, coeff1, oneMinusThetaH, multiply, theta, VariableDeclarationStatement(), final, T, coeff2, oneMinusThetaH, multiply, theta, add, 1, negate, ExpressionStatement(), interpolatedState, currentStateLinearCombination, coeff1, coeff2, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:MidpointStepInterpolator:doCopy:null#[ReturnStatement(return), new, MidpointStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:MidpointStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, double, coeffDot2, 2, theta, VariableDeclarationStatement(), final, double, coeffDot1, 1, coeffDot2, IfStatement(if), previousState, null, theta, 0.5, VariableDeclarationStatement(), final, double, coeff1, theta, oneMinusThetaH, VariableDeclarationStatement(), final, double, coeff2, theta, theta, h, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, ExpressionStatement(), interpolatedState, i, previousState, i, coeff1, yDot1, coeff2, yDot2, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2, VariableDeclarationStatement(), final, double, coeff1, oneMinusThetaH, theta, VariableDeclarationStatement(), final, double, coeff2, oneMinusThetaH, 1.0, theta, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, ExpressionStatement(), interpolatedState, i, currentState, i, coeff1, yDot1, coeff2, yDot2, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldIntegrator:fraction:int+int#[ReturnStatement(return), getField, getZero, add, p, divide, q]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldIntegrator:integrate:FieldExpandableODE<T>+FieldODEState<T>+T#[ExpressionStatement(), sanityChecks, initialState, finalTime, VariableDeclarationStatement(), final, T, t0, initialState, getTime, VariableDeclarationStatement(), final, T, y0, equations, getMapper, mapState, initialState, ExpressionStatement(), setStepStart, initIntegration, equations, t0, y0, finalTime, VariableDeclarationStatement(), final, boolean, forward, finalTime, subtract, initialState, getTime, getReal, 0, VariableDeclarationStatement(), final, int, stages, c.length, 1, VariableDeclarationStatement(), T, y, y0, VariableDeclarationStatement(), final, T, yDotK, MathArrays, buildArray, getField, stages, 1, VariableDeclarationStatement(), final, T, yTmp, MathArrays, buildArray, getField, y0.length, IfStatement(if), forward, IfStatement(if), getStepStart, getTime, add, step, subtract, finalTime, getReal, 0, ExpressionStatement(), setStepSize, finalTime, subtract, getStepStart, getTime, ExpressionStatement(), setStepSize, step, IfStatement(if), getStepStart, getTime, subtract, step, subtract, finalTime, getReal, 0, ExpressionStatement(), setStepSize, finalTime, subtract, getStepStart, getTime, ExpressionStatement(), setStepSize, step, negate, ExpressionStatement(), setIsLastStep, false, DoStatement(do), ExpressionStatement(), y, equations, getMapper, mapState, getStepStart, ExpressionStatement(), yDotK, 0, equations, getMapper, mapDerivative, getStepStart, ForStatement(for), int, k, 1, k, stages, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), T, sum, yDotK, 0, j, multiply, a, k, 1, 0, ForStatement(for), int, l, 1, l, k, l, ExpressionStatement(), sum, sum, add, yDotK, l, j, multiply, a, k, 1, l, ExpressionStatement(), yTmp, j, y, j, add, getStepSize, multiply, sum, ExpressionStatement(), yDotK, k, computeDerivatives, getStepStart, getTime, add, getStepSize, multiply, c, k, 1, yTmp, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), T, sum, yDotK, 0, j, multiply, b, 0, ForStatement(for), int, l, 1, l, stages, l, ExpressionStatement(), sum, sum, add, yDotK, l, j, multiply, b, l, ExpressionStatement(), yTmp, j, y, j, add, getStepSize, multiply, sum, VariableDeclarationStatement(), final, T, stepEnd, getStepStart, getTime, add, getStepSize, VariableDeclarationStatement(), final, T, yDotTmp, computeDerivatives, stepEnd, yTmp, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, stateTmp, new, FieldODEStateAndDerivative, T, stepEnd, yTmp, yDotTmp, ExpressionStatement(), System, arraycopy, yTmp, 0, y, 0, y0.length, ExpressionStatement(), setStepStart, acceptStep, createInterpolator, forward, yDotK, getStepStart, stateTmp, equations, getMapper, finalTime, IfStatement(if), isLastStep, VariableDeclarationStatement(), final, T, nextT, getStepStart, getTime, add, getStepSize, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, subtract, finalTime, getReal, 0, nextT, subtract, finalTime, getReal, 0, IfStatement(if), nextIsLast, ExpressionStatement(), setStepSize, finalTime, subtract, getStepStart, getTime, isLastStep, VariableDeclarationStatement(), final, FieldODEStateAndDerivative, T, finalState, getStepStart, ExpressionStatement(), setStepStart, null, ExpressionStatement(), setStepSize, null, ReturnStatement(return), finalState]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldIntegrator:singleStep:FirstOrderFieldDifferentialEquations<T>+T+T[]+T#[VariableDeclarationStatement(), final, T, y, y0, clone, VariableDeclarationStatement(), final, int, stages, c.length, 1, VariableDeclarationStatement(), final, T, yDotK, MathArrays, buildArray, getField, stages, 1, VariableDeclarationStatement(), final, T, yTmp, y0, clone, VariableDeclarationStatement(), final, T, h, t, subtract, t0, ExpressionStatement(), yDotK, 0, equations, computeDerivatives, t0, y, ForStatement(for), int, k, 1, k, stages, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), T, sum, yDotK, 0, j, multiply, a, k, 1, 0, ForStatement(for), int, l, 1, l, k, l, ExpressionStatement(), sum, sum, add, yDotK, l, j, multiply, a, k, 1, l, ExpressionStatement(), yTmp, j, y, j, add, h, multiply, sum, ExpressionStatement(), yDotK, k, equations, computeDerivatives, t0, add, h, multiply, c, k, 1, yTmp, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), T, sum, yDotK, 0, j, multiply, b, 0, ForStatement(for), int, l, 1, l, stages, l, ExpressionStatement(), sum, sum, add, yDotK, l, j, multiply, b, l, ExpressionStatement(), y, j, y, j, add, h, multiply, sum, ReturnStatement(return), y]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:create:boolean+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), create, field, newForward, yDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:previousStateLinearCombination:T...#[ReturnStatement(return), combine, getPreviousState, getState, coefficients]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:currentStateLinearCombination:T...#[ReturnStatement(return), combine, getCurrentState, getState, coefficients]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:derivativeLinearCombination:T...#[ReturnStatement(return), combine, MathArrays, buildArray, field, yDotK, 0, length, coefficients]
org.apache.commons.math4.ode.nonstiff:RungeKuttaFieldStepInterpolator:combine:T[]+T...#[ForStatement(for), int, i, 0, i, a.length, i, ForStatement(for), int, k, 0, k, coefficients.length, k, ExpressionStatement(), a, i, a, i, add, coefficients, k, multiply, yDotK, k, i, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:RungeKuttaIntegrator:integrate:ExpandableStatefulODE+double#[ExpressionStatement(), sanityChecks, equations, t, ExpressionStatement(), setEquations, equations, VariableDeclarationStatement(), final, boolean, forward, t, equations, getTime, VariableDeclarationStatement(), final, double, y0, equations, getCompleteState, VariableDeclarationStatement(), final, double, y, y0, clone, VariableDeclarationStatement(), final, int, stages, c.length, 1, VariableDeclarationStatement(), final, double, yDotK, double, stages, ForStatement(for), int, i, 0, i, stages, i, ExpressionStatement(), yDotK, i, double, y0.length, VariableDeclarationStatement(), final, double, yTmp, y0, clone, VariableDeclarationStatement(), final, double, yDotTmp, double, y0.length, VariableDeclarationStatement(), final, RungeKuttaStepInterpolator, interpolator, RungeKuttaStepInterpolator, prototype, copy, ExpressionStatement(), interpolator, reinitialize, this, yTmp, yDotK, forward, equations, getPrimaryMapper, equations, getSecondaryMappers, ExpressionStatement(), interpolator, storeTime, equations, getTime, ExpressionStatement(), stepStart, equations, getTime, IfStatement(if), forward, IfStatement(if), stepStart, step, t, ExpressionStatement(), stepSize, t, stepStart, ExpressionStatement(), stepSize, step, IfStatement(if), stepStart, step, t, ExpressionStatement(), stepSize, t, stepStart, ExpressionStatement(), stepSize, step, ExpressionStatement(), initIntegration, equations, getTime, y0, t, ExpressionStatement(), isLastStep, false, DoStatement(do), ExpressionStatement(), interpolator, shift, ExpressionStatement(), computeDerivatives, stepStart, y, yDotK, 0, ForStatement(for), int, k, 1, k, stages, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), double, sum, a, k, 1, 0, yDotK, 0, j, ForStatement(for), int, l, 1, l, k, l, ExpressionStatement(), sum, a, k, 1, l, yDotK, l, j, ExpressionStatement(), yTmp, j, y, j, stepSize, sum, ExpressionStatement(), computeDerivatives, stepStart, c, k, 1, stepSize, yTmp, yDotK, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), double, sum, b, 0, yDotK, 0, j, ForStatement(for), int, l, 1, l, stages, l, ExpressionStatement(), sum, b, l, yDotK, l, j, ExpressionStatement(), yTmp, j, y, j, stepSize, sum, ExpressionStatement(), interpolator, storeTime, stepStart, stepSize, ExpressionStatement(), System, arraycopy, yTmp, 0, y, 0, y0.length, ExpressionStatement(), System, arraycopy, yDotK, stages, 1, 0, yDotTmp, 0, y0.length, ExpressionStatement(), stepStart, acceptStep, interpolator, y, yDotTmp, t, IfStatement(if), isLastStep, ExpressionStatement(), interpolator, storeTime, stepStart, VariableDeclarationStatement(), final, double, nextT, stepStart, stepSize, VariableDeclarationStatement(), final, boolean, nextIsLast, forward, nextT, t, nextT, t, IfStatement(if), nextIsLast, ExpressionStatement(), stepSize, t, stepStart, isLastStep, ExpressionStatement(), equations, setTime, stepStart, ExpressionStatement(), equations, setCompleteState, y, ExpressionStatement(), stepStart, Double.NaN, ExpressionStatement(), stepSize, Double.NaN]
org.apache.commons.math4.ode.nonstiff:RungeKuttaIntegrator:singleStep:FirstOrderDifferentialEquations+double+double[]+double#[VariableDeclarationStatement(), final, double, y, y0, clone, VariableDeclarationStatement(), final, int, stages, c.length, 1, VariableDeclarationStatement(), final, double, yDotK, double, stages, ForStatement(for), int, i, 0, i, stages, i, ExpressionStatement(), yDotK, i, double, y0.length, VariableDeclarationStatement(), final, double, yTmp, y0, clone, VariableDeclarationStatement(), final, double, h, t, t0, ExpressionStatement(), equations, computeDerivatives, t0, y, yDotK, 0, ForStatement(for), int, k, 1, k, stages, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), double, sum, a, k, 1, 0, yDotK, 0, j, ForStatement(for), int, l, 1, l, k, l, ExpressionStatement(), sum, a, k, 1, l, yDotK, l, j, ExpressionStatement(), yTmp, j, y, j, h, sum, ExpressionStatement(), equations, computeDerivatives, t0, c, k, 1, h, yTmp, yDotK, k, ForStatement(for), int, j, 0, j, y0.length, j, VariableDeclarationStatement(), double, sum, b, 0, yDotK, 0, j, ForStatement(for), int, l, 1, l, stages, l, ExpressionStatement(), sum, b, l, yDotK, l, j, ExpressionStatement(), y, j, h, sum, ReturnStatement(return), y]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:reinitialize:AbstractIntegrator+double[]+double[][]+boolean+EquationsMapper+EquationsMapper[]#[ExpressionStatement(), reinitialize, y, forward, primaryMapper, secondaryMappers, ExpressionStatement(), this, previousState, null, ExpressionStatement(), this, yDotK, yDotArray, ExpressionStatement(), this, integrator, rkIntegrator]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:shift:null#[ExpressionStatement(), previousState, currentState, clone, ExpressionStatement(), super, shift]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:writeExternal:ObjectOutput#[ExpressionStatement(), writeBaseExternal, out, VariableDeclarationStatement(), final, int, n, currentState, null, 1, currentState.length, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), out, writeDouble, previousState, i, VariableDeclarationStatement(), final, int, kMax, yDotK, null, 1, yDotK.length, ExpressionStatement(), out, writeInt, kMax, ForStatement(for), int, k, 0, k, kMax, k, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), out, writeDouble, yDotK, k, i]
org.apache.commons.math4.ode.nonstiff:RungeKuttaStepInterpolator:readExternal:ObjectInput#[VariableDeclarationStatement(), final, double, t, readBaseExternal, in, VariableDeclarationStatement(), final, int, n, currentState, null, 1, currentState.length, IfStatement(if), n, 0, ExpressionStatement(), previousState, null, ExpressionStatement(), previousState, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), previousState, i, in, readDouble, VariableDeclarationStatement(), final, int, kMax, in, readInt, ExpressionStatement(), yDotK, kMax, 0, null, double, kMax, ForStatement(for), int, k, 0, k, kMax, k, ExpressionStatement(), yDotK, k, n, 0, null, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), yDotK, k, i, in, readDouble, ExpressionStatement(), integrator, null, IfStatement(if), currentState, null, ExpressionStatement(), setInterpolatedTime, t, ExpressionStatement(), interpolatedTime, t]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:getC:null#[VariableDeclarationStatement(), final, T, c, MathArrays, buildArray, getField, 3, ExpressionStatement(), c, 0, fraction, 1, 3, ExpressionStatement(), c, 1, c, 0, add, c, 0, ExpressionStatement(), c, 2, getField, getOne, ReturnStatement(return), c]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:getA:null#[VariableDeclarationStatement(), final, T, a, MathArrays, buildArray, getField, 3, 1, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), a, i, MathArrays, buildArray, getField, i, 1, ExpressionStatement(), a, 0, 0, fraction, 1, 3, ExpressionStatement(), a, 1, 0, a, 0, 0, negate, ExpressionStatement(), a, 1, 1, getField, getOne, ExpressionStatement(), a, 2, 0, getField, getOne, ExpressionStatement(), a, 2, 1, getField, getOne, negate, ExpressionStatement(), a, 2, 2, getField, getOne, ReturnStatement(return), a]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:getB:null#[VariableDeclarationStatement(), final, T, b, MathArrays, buildArray, getField, 4, ExpressionStatement(), b, 0, fraction, 1, 8, ExpressionStatement(), b, 1, fraction, 3, 8, ExpressionStatement(), b, 2, b, 1, ExpressionStatement(), b, 3, b, 0, ReturnStatement(return), b]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldIntegrator:createInterpolator:boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, ThreeEighthesFieldStepInterpolator, T, getField, forward, yDotK, globalPreviousState, globalCurrentState, globalPreviousState, globalCurrentState, mapper]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldStepInterpolator:create:Field<T>+boolean+T[][]+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>+FieldEquationsMapper<T>#[ReturnStatement(return), new, ThreeEighthesFieldStepInterpolator, T, newField, newForward, newYDotK, newGlobalPreviousState, newGlobalCurrentState, newSoftPreviousState, newSoftCurrentState, newMapper]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesFieldStepInterpolator:computeInterpolatedStateAndDerivatives:FieldEquationsMapper<T>+T+T+T+T#[VariableDeclarationStatement(), final, T, coeffDot3, theta, multiply, 0.75, VariableDeclarationStatement(), final, T, coeffDot1, coeffDot3, multiply, theta, multiply, 4, subtract, 5, add, 1, VariableDeclarationStatement(), final, T, coeffDot2, coeffDot3, multiply, theta, multiply, 6, add, 5, VariableDeclarationStatement(), final, T, coeffDot4, coeffDot3, multiply, theta, multiply, 2, subtract, 1, VariableDeclarationStatement(), final, T, interpolatedState, VariableDeclarationStatement(), final, T, interpolatedDerivatives, IfStatement(if), getGlobalPreviousState, null, theta, getReal, 0.5, VariableDeclarationStatement(), final, T, s, thetaH, divide, 8, VariableDeclarationStatement(), final, T, fourTheta2, theta, multiply, theta, multiply, 4, VariableDeclarationStatement(), final, T, coeff1, s, multiply, fourTheta2, multiply, 2, subtract, theta, multiply, 15, add, 8, VariableDeclarationStatement(), final, T, coeff2, s, multiply, theta, multiply, 5, subtract, fourTheta2, multiply, 3, VariableDeclarationStatement(), final, T, coeff3, s, multiply, theta, multiply, 3, VariableDeclarationStatement(), final, T, coeff4, s, multiply, fourTheta2, subtract, theta, multiply, 3, ExpressionStatement(), interpolatedState, previousStateLinearCombination, coeff1, coeff2, coeff3, coeff4, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, VariableDeclarationStatement(), final, T, s, oneMinusThetaH, divide, 8, VariableDeclarationStatement(), final, T, fourTheta2, theta, multiply, theta, multiply, 4, VariableDeclarationStatement(), final, T, thetaPlus1, theta, add, 1, VariableDeclarationStatement(), final, T, coeff1, s, multiply, fourTheta2, multiply, 2, subtract, theta, multiply, 7, add, 1, VariableDeclarationStatement(), final, T, coeff2, s, multiply, thetaPlus1, subtract, fourTheta2, multiply, 3, VariableDeclarationStatement(), final, T, coeff3, s, multiply, thetaPlus1, multiply, 3, VariableDeclarationStatement(), final, T, coeff4, s, multiply, thetaPlus1, add, fourTheta2, ExpressionStatement(), interpolatedState, currentStateLinearCombination, coeff1, coeff2, coeff3, coeff4, ExpressionStatement(), interpolatedDerivatives, derivativeLinearCombination, coeffDot1, coeffDot2, coeffDot3, coeffDot4, ReturnStatement(return), new, FieldODEStateAndDerivative, T, time, interpolatedState, interpolatedDerivatives]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesStepInterpolator:doCopy:null#[ReturnStatement(return), new, ThreeEighthesStepInterpolator, this]
org.apache.commons.math4.ode.nonstiff:ThreeEighthesStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, double, coeffDot3, 0.75, theta, VariableDeclarationStatement(), final, double, coeffDot1, coeffDot3, 4, theta, 5, 1, VariableDeclarationStatement(), final, double, coeffDot2, coeffDot3, 5, 6, theta, VariableDeclarationStatement(), final, double, coeffDot4, coeffDot3, 2, theta, 1, IfStatement(if), previousState, null, theta, 0.5, VariableDeclarationStatement(), final, double, s, theta, h, 8.0, VariableDeclarationStatement(), final, double, fourTheta2, 4, theta, theta, VariableDeclarationStatement(), final, double, coeff1, s, 8, 15, theta, 2, fourTheta2, VariableDeclarationStatement(), final, double, coeff2, 3, s, 5, theta, fourTheta2, VariableDeclarationStatement(), final, double, coeff3, 3, s, theta, VariableDeclarationStatement(), final, double, coeff4, s, 3, theta, fourTheta2, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, ExpressionStatement(), interpolatedState, i, previousState, i, coeff1, yDot1, coeff2, yDot2, coeff3, yDot3, coeff4, yDot4, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2, coeffDot3, yDot3, coeffDot4, yDot4, VariableDeclarationStatement(), final, double, s, oneMinusThetaH, 8.0, VariableDeclarationStatement(), final, double, fourTheta2, 4, theta, theta, VariableDeclarationStatement(), final, double, coeff1, s, 1, 7, theta, 2, fourTheta2, VariableDeclarationStatement(), final, double, coeff2, 3, s, 1, theta, fourTheta2, VariableDeclarationStatement(), final, double, coeff3, 3, s, 1, theta, VariableDeclarationStatement(), final, double, coeff4, s, 1, theta, fourTheta2, ForStatement(for), int, i, 0, i, interpolatedState.length, i, VariableDeclarationStatement(), final, double, yDot1, yDotK, 0, i, VariableDeclarationStatement(), final, double, yDot2, yDotK, 1, i, VariableDeclarationStatement(), final, double, yDot3, yDotK, 2, i, VariableDeclarationStatement(), final, double, yDot4, yDotK, 3, i, ExpressionStatement(), interpolatedState, i, currentState, i, coeff1, yDot1, coeff2, yDot2, coeff3, yDot3, coeff4, yDot4, ExpressionStatement(), interpolatedDerivatives, i, coeffDot1, yDot1, coeffDot2, yDot2, coeffDot3, yDot3, coeffDot4, yDot4]
org.apache.commons.math4.ode:ParameterConfiguration:getParameterName:null#[ReturnStatement(return), parameterName]
org.apache.commons.math4.ode:ParameterConfiguration:getHP:null#[ReturnStatement(return), hP]
org.apache.commons.math4.ode:ParameterConfiguration:setHP:double#[ExpressionStatement(), this, hP, hParam]
org.apache.commons.math4.ode:ParameterizedWrapper:getDimension:null#[ReturnStatement(return), fode, getDimension]
org.apache.commons.math4.ode:ParameterizedWrapper:computeDerivatives:double+double[]+double[]#[ExpressionStatement(), fode, computeDerivatives, t, y, yDot]
org.apache.commons.math4.ode:ParameterizedWrapper:getParametersNames:null#[ReturnStatement(return), new, ArrayList, String]
org.apache.commons.math4.ode:ParameterizedWrapper:isSupported:String#[ReturnStatement(return), false]
org.apache.commons.math4.ode:ParameterizedWrapper:getParameter:String#[IfStatement(if), isSupported, name, ThrowStatement(throw), new, UnknownParameterException, name, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.ode:ParameterJacobianWrapper:getParametersNames:null#[ReturnStatement(return), pode, getParametersNames]
org.apache.commons.math4.ode:ParameterJacobianWrapper:isSupported:String#[ReturnStatement(return), pode, isSupported, name]
org.apache.commons.math4.ode:ParameterJacobianWrapper:computeParameterJacobian:double+double[]+double[]+String+double[]#[VariableDeclarationStatement(), final, int, n, fode, getDimension, IfStatement(if), pode, isSupported, paramName, VariableDeclarationStatement(), final, double, tmpDot, double, n, VariableDeclarationStatement(), final, double, p, pode, getParameter, paramName, VariableDeclarationStatement(), final, double, hP, hParam, get, paramName, ExpressionStatement(), pode, setParameter, paramName, p, hP, ExpressionStatement(), fode, computeDerivatives, t, y, tmpDot, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), dFdP, i, tmpDot, i, yDot, i, hP, ExpressionStatement(), pode, setParameter, paramName, p, ExpressionStatement(), Arrays, fill, dFdP, 0, n, 0.0]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:restrictStep:FieldODEStateAndDerivative<T>+FieldODEStateAndDerivative<T>#[ReturnStatement(return), create, forward, globalPreviousState, globalCurrentState, previousState, currentState, mapper]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getGlobalPreviousState:null#[ReturnStatement(return), globalPreviousState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getGlobalCurrentState:null#[ReturnStatement(return), globalCurrentState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getPreviousState:null#[ReturnStatement(return), softPreviousState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getCurrentState:null#[ReturnStatement(return), softCurrentState]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:getInterpolatedState:T#[VariableDeclarationStatement(), final, T, thetaH, time, subtract, globalPreviousState, getTime, VariableDeclarationStatement(), final, T, oneMinusThetaH, globalCurrentState, getTime, subtract, time, VariableDeclarationStatement(), final, T, theta, thetaH, divide, globalCurrentState, getTime, subtract, globalPreviousState, getTime, ReturnStatement(return), computeInterpolatedStateAndDerivatives, mapper, time, theta, thetaH, oneMinusThetaH]
org.apache.commons.math4.ode.sampling:AbstractFieldStepInterpolator:isForward:null#[ReturnStatement(return), forward]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:allocateInterpolatedArrays:int#[IfStatement(if), dimension, 0, ExpressionStatement(), interpolatedState, null, ExpressionStatement(), interpolatedDerivatives, null, ExpressionStatement(), interpolatedPrimaryState, null, ExpressionStatement(), interpolatedPrimaryDerivatives, null, ExpressionStatement(), interpolatedSecondaryState, null, ExpressionStatement(), interpolatedSecondaryDerivatives, null, ExpressionStatement(), interpolatedState, double, dimension, ExpressionStatement(), interpolatedDerivatives, double, dimension, ExpressionStatement(), interpolatedPrimaryState, double, primaryMapper, getDimension, ExpressionStatement(), interpolatedPrimaryDerivatives, double, primaryMapper, getDimension, IfStatement(if), secondaryMappers, null, ExpressionStatement(), interpolatedSecondaryState, null, ExpressionStatement(), interpolatedSecondaryDerivatives, null, ExpressionStatement(), interpolatedSecondaryState, double, secondaryMappers.length, ExpressionStatement(), interpolatedSecondaryDerivatives, double, secondaryMappers.length, ForStatement(for), int, i, 0, i, secondaryMappers.length, i, ExpressionStatement(), interpolatedSecondaryState, i, double, secondaryMappers, i, getDimension, ExpressionStatement(), interpolatedSecondaryDerivatives, i, double, secondaryMappers, i, getDimension]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:reinitialize:double[]+boolean+EquationsMapper+EquationsMapper[]#[ExpressionStatement(), globalPreviousTime, Double.NaN, ExpressionStatement(), globalCurrentTime, Double.NaN, ExpressionStatement(), softPreviousTime, Double.NaN, ExpressionStatement(), softCurrentTime, Double.NaN, ExpressionStatement(), h, Double.NaN, ExpressionStatement(), interpolatedTime, Double.NaN, ExpressionStatement(), currentState, y, ExpressionStatement(), finalized, false, ExpressionStatement(), this, forward, isForward, ExpressionStatement(), this, dirtyState, true, ExpressionStatement(), this, primaryMapper, primary, ExpressionStatement(), this, secondaryMappers, secondary, clone, ExpressionStatement(), allocateInterpolatedArrays, y.length]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:copy:null#[ExpressionStatement(), finalizeStep, ReturnStatement(return), doCopy]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:shift:null#[ExpressionStatement(), globalPreviousTime, globalCurrentTime, ExpressionStatement(), softPreviousTime, globalPreviousTime, ExpressionStatement(), softCurrentTime, globalCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:storeTime:double#[ExpressionStatement(), globalCurrentTime, t, ExpressionStatement(), softCurrentTime, globalCurrentTime, ExpressionStatement(), h, globalCurrentTime, globalPreviousTime, ExpressionStatement(), setInterpolatedTime, t, ExpressionStatement(), finalized, false]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:setSoftPreviousTime:double#[ExpressionStatement(), this, softPreviousTime, softPreviousTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:setSoftCurrentTime:double#[ExpressionStatement(), this, softCurrentTime, softCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getGlobalPreviousTime:null#[ReturnStatement(return), globalPreviousTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getGlobalCurrentTime:null#[ReturnStatement(return), globalCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getPreviousTime:null#[ReturnStatement(return), softPreviousTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getCurrentTime:null#[ReturnStatement(return), softCurrentTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedTime:null#[ReturnStatement(return), interpolatedTime]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:setInterpolatedTime:double#[ExpressionStatement(), interpolatedTime, time, ExpressionStatement(), dirtyState, true]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:isForward:null#[ReturnStatement(return), forward]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:evaluateCompleteInterpolatedState:null#[IfStatement(if), dirtyState, VariableDeclarationStatement(), final, double, oneMinusThetaH, globalCurrentTime, interpolatedTime, VariableDeclarationStatement(), final, double, theta, h, 0, 0, h, oneMinusThetaH, h, ExpressionStatement(), computeInterpolatedStateAndDerivatives, theta, oneMinusThetaH, ExpressionStatement(), dirtyState, false]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedState:null#[ExpressionStatement(), evaluateCompleteInterpolatedState, ExpressionStatement(), primaryMapper, extractEquationData, interpolatedState, interpolatedPrimaryState, ReturnStatement(return), interpolatedPrimaryState]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedDerivatives:null#[ExpressionStatement(), evaluateCompleteInterpolatedState, ExpressionStatement(), primaryMapper, extractEquationData, interpolatedDerivatives, interpolatedPrimaryDerivatives, ReturnStatement(return), interpolatedPrimaryDerivatives]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedSecondaryState:int#[ExpressionStatement(), evaluateCompleteInterpolatedState, ExpressionStatement(), secondaryMappers, index, extractEquationData, interpolatedState, interpolatedSecondaryState, index, ReturnStatement(return), interpolatedSecondaryState, index]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:getInterpolatedSecondaryDerivatives:int#[ExpressionStatement(), evaluateCompleteInterpolatedState, ExpressionStatement(), secondaryMappers, index, extractEquationData, interpolatedDerivatives, interpolatedSecondaryDerivatives, index, ReturnStatement(return), interpolatedSecondaryDerivatives, index]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:finalizeStep:null#[IfStatement(if), finalized, ExpressionStatement(), doFinalize, ExpressionStatement(), finalized, true]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:writeBaseExternal:ObjectOutput#[IfStatement(if), currentState, null, ExpressionStatement(), out, writeInt, 1, ExpressionStatement(), out, writeInt, currentState.length, ExpressionStatement(), out, writeDouble, globalPreviousTime, ExpressionStatement(), out, writeDouble, globalCurrentTime, ExpressionStatement(), out, writeDouble, softPreviousTime, ExpressionStatement(), out, writeDouble, softCurrentTime, ExpressionStatement(), out, writeDouble, h, ExpressionStatement(), out, writeBoolean, forward, ExpressionStatement(), out, writeObject, primaryMapper, ExpressionStatement(), out, write, secondaryMappers.length, EnhancedForStatement(for), final, EquationsMapper, mapper, secondaryMappers, ExpressionStatement(), out, writeObject, mapper, IfStatement(if), currentState, null, ForStatement(for), int, i, 0, i, currentState.length, i, ExpressionStatement(), out, writeDouble, currentState, i, ExpressionStatement(), out, writeDouble, interpolatedTime, TryStatement(try), ExpressionStatement(), finalizeStep, catch, MaxCountExceededException, mcee, VariableDeclarationStatement(), final, IOException, ioe, new, IOException, mcee, getLocalizedMessage, ExpressionStatement(), ioe, initCause, mcee, ThrowStatement(throw), ioe]
org.apache.commons.math4.ode.sampling:AbstractStepInterpolator:readBaseExternal:ObjectInput#[VariableDeclarationStatement(), final, int, dimension, in, readInt, ExpressionStatement(), globalPreviousTime, in, readDouble, ExpressionStatement(), globalCurrentTime, in, readDouble, ExpressionStatement(), softPreviousTime, in, readDouble, ExpressionStatement(), softCurrentTime, in, readDouble, ExpressionStatement(), h, in, readDouble, ExpressionStatement(), forward, in, readBoolean, ExpressionStatement(), primaryMapper, EquationsMapper, in, readObject, ExpressionStatement(), secondaryMappers, EquationsMapper, in, read, ForStatement(for), int, i, 0, i, secondaryMappers.length, i, ExpressionStatement(), secondaryMappers, i, EquationsMapper, in, readObject, ExpressionStatement(), dirtyState, true, IfStatement(if), dimension, 0, ExpressionStatement(), currentState, null, ExpressionStatement(), currentState, double, dimension, ForStatement(for), int, i, 0, i, currentState.length, i, ExpressionStatement(), currentState, i, in, readDouble, ExpressionStatement(), interpolatedTime, Double.NaN, ExpressionStatement(), allocateInterpolatedArrays, dimension, ExpressionStatement(), finalized, true, ReturnStatement(return), in, readDouble]
org.apache.commons.math4.ode.sampling:DummyStepHandler:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.ode.sampling:DummyStepHandler:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:init:FieldODEStateAndDerivative<T>+T#[ExpressionStatement(), first, null, ExpressionStatement(), last, null, ExpressionStatement(), forward, true, ExpressionStatement(), handler, init, initialState, finalTime]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:handleStep:FieldStepInterpolator<T>+boolean#[IfStatement(if), last, null, ExpressionStatement(), first, interpolator, getPreviousState, ExpressionStatement(), last, first, ExpressionStatement(), forward, interpolator, isForward, IfStatement(if), forward, ExpressionStatement(), h, h, VariableDeclarationStatement(), T, nextTime, mode, StepNormalizerMode.INCREMENT, last, getTime, add, h, last, getTime, getField, getZero, add, FastMath, floor, last, getTime, getReal, h, 1, h, IfStatement(if), mode, StepNormalizerMode.MULTIPLES, Precision, equals, nextTime, getReal, last, getTime, getReal, 1, ExpressionStatement(), nextTime, nextTime, add, h, VariableDeclarationStatement(), boolean, nextInStep, isNextInStep, nextTime, interpolator, WhileStatement(while), nextInStep, ExpressionStatement(), doNormalizedStep, false, ExpressionStatement(), last, interpolator, getInterpolatedState, nextTime, ExpressionStatement(), nextTime, nextTime, add, h, ExpressionStatement(), nextInStep, isNextInStep, nextTime, interpolator, IfStatement(if), isLast, VariableDeclarationStatement(), final, boolean, addLast, bounds, lastIncluded, last, getTime, getReal, interpolator, getCurrentState, getTime, getReal, ExpressionStatement(), doNormalizedStep, addLast, IfStatement(if), addLast, ExpressionStatement(), last, interpolator, getCurrentState, ExpressionStatement(), doNormalizedStep, true]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:isNextInStep:T+FieldStepInterpolator<T>#[ReturnStatement(return), forward, nextTime, getReal, interpolator, getCurrentState, getTime, getReal, nextTime, getReal, interpolator, getCurrentState, getTime, getReal]
org.apache.commons.math4.ode.sampling:FieldStepNormalizer:doNormalizedStep:boolean#[IfStatement(if), bounds, firstIncluded, first, getTime, getReal, last, getTime, getReal, ReturnStatement(return), ExpressionStatement(), handler, handleStep, last, isLast]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:doCopy:null#[ReturnStatement(return), new, NordsieckStepInterpolator, this]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:reinitialize:double[]+boolean+EquationsMapper+EquationsMapper[]#[ExpressionStatement(), super, reinitialize, y, forward, primaryMapper, secondaryMappers, ExpressionStatement(), stateVariation, double, y.length]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:reinitialize:double+double+double[]+Array2DRowRealMatrix#[ExpressionStatement(), this, referenceTime, time, ExpressionStatement(), this, scalingH, stepSize, ExpressionStatement(), this, scaled, scaledDerivative, ExpressionStatement(), this, nordsieck, nordsieckVector, ExpressionStatement(), setInterpolatedTime, getInterpolatedTime]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:rescale:double#[VariableDeclarationStatement(), final, double, ratio, stepSize, scalingH, ForStatement(for), int, i, 0, i, scaled.length, i, ExpressionStatement(), scaled, i, ratio, VariableDeclarationStatement(), final, double, nData, nordsieck, getDataRef, VariableDeclarationStatement(), double, power, ratio, ForStatement(for), int, i, 0, i, nData.length, i, ExpressionStatement(), power, ratio, VariableDeclarationStatement(), final, double, nDataI, nData, i, ForStatement(for), int, j, 0, j, nDataI.length, j, ExpressionStatement(), nDataI, j, power, ExpressionStatement(), scalingH, stepSize]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:getInterpolatedStateVariation:null#[ExpressionStatement(), getInterpolatedState, ReturnStatement(return), stateVariation]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:computeInterpolatedStateAndDerivatives:double+double#[VariableDeclarationStatement(), final, double, x, interpolatedTime, referenceTime, VariableDeclarationStatement(), final, double, normalizedAbscissa, x, scalingH, ExpressionStatement(), Arrays, fill, stateVariation, 0.0, ExpressionStatement(), Arrays, fill, interpolatedDerivatives, 0.0, VariableDeclarationStatement(), final, double, nData, nordsieck, getDataRef, ForStatement(for), int, i, nData.length, 1, i, 0, i, VariableDeclarationStatement(), final, int, order, i, 2, VariableDeclarationStatement(), final, double, nDataI, nData, i, VariableDeclarationStatement(), final, double, power, FastMath, pow, normalizedAbscissa, order, ForStatement(for), int, j, 0, j, nDataI.length, j, VariableDeclarationStatement(), final, double, d, nDataI, j, power, ExpressionStatement(), stateVariation, j, d, ExpressionStatement(), interpolatedDerivatives, j, order, d, ForStatement(for), int, j, 0, j, currentState.length, j, ExpressionStatement(), stateVariation, j, scaled, j, normalizedAbscissa, ExpressionStatement(), interpolatedState, j, currentState, j, stateVariation, j, ExpressionStatement(), interpolatedDerivatives, j, interpolatedDerivatives, j, scaled, j, normalizedAbscissa, x]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:writeExternal:ObjectOutput#[ExpressionStatement(), writeBaseExternal, out, ExpressionStatement(), out, writeDouble, scalingH, ExpressionStatement(), out, writeDouble, referenceTime, VariableDeclarationStatement(), final, int, n, currentState, null, 1, currentState.length, IfStatement(if), scaled, null, ExpressionStatement(), out, writeBoolean, false, ExpressionStatement(), out, writeBoolean, true, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), out, writeDouble, scaled, j, IfStatement(if), nordsieck, null, ExpressionStatement(), out, writeBoolean, false, ExpressionStatement(), out, writeBoolean, true, ExpressionStatement(), out, writeObject, nordsieck]
org.apache.commons.math4.ode.sampling:NordsieckStepInterpolator:readExternal:ObjectInput#[VariableDeclarationStatement(), final, double, t, readBaseExternal, in, ExpressionStatement(), scalingH, in, readDouble, ExpressionStatement(), referenceTime, in, readDouble, VariableDeclarationStatement(), final, int, n, currentState, null, 1, currentState.length, VariableDeclarationStatement(), final, boolean, hasScaled, in, readBoolean, IfStatement(if), hasScaled, ExpressionStatement(), scaled, double, n, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), scaled, j, in, readDouble, ExpressionStatement(), scaled, null, VariableDeclarationStatement(), final, boolean, hasNordsieck, in, readBoolean, IfStatement(if), hasNordsieck, ExpressionStatement(), nordsieck, Array2DRowRealMatrix, in, readObject, ExpressionStatement(), nordsieck, null, IfStatement(if), hasScaled, hasNordsieck, ExpressionStatement(), stateVariation, double, n, ExpressionStatement(), setInterpolatedTime, t, ExpressionStatement(), stateVariation, null]
org.apache.commons.math4.ode.sampling:StepNormalizer:init:double+double[]+double#[ExpressionStatement(), firstTime, Double.NaN, ExpressionStatement(), lastTime, Double.NaN, ExpressionStatement(), lastState, null, ExpressionStatement(), lastDerivatives, null, ExpressionStatement(), forward, true, ExpressionStatement(), handler, init, t0, y0, t]
org.apache.commons.math4.ode.sampling:StepNormalizer:handleStep:StepInterpolator+boolean#[IfStatement(if), lastState, null, ExpressionStatement(), firstTime, interpolator, getPreviousTime, ExpressionStatement(), lastTime, interpolator, getPreviousTime, ExpressionStatement(), interpolator, setInterpolatedTime, lastTime, ExpressionStatement(), lastState, interpolator, getInterpolatedState, clone, ExpressionStatement(), lastDerivatives, interpolator, getInterpolatedDerivatives, clone, ExpressionStatement(), forward, interpolator, getCurrentTime, lastTime, IfStatement(if), forward, ExpressionStatement(), h, h, VariableDeclarationStatement(), double, nextTime, mode, StepNormalizerMode.INCREMENT, lastTime, h, FastMath, floor, lastTime, h, 1, h, IfStatement(if), mode, StepNormalizerMode.MULTIPLES, Precision, equals, nextTime, lastTime, 1, ExpressionStatement(), nextTime, h, VariableDeclarationStatement(), boolean, nextInStep, isNextInStep, nextTime, interpolator, WhileStatement(while), nextInStep, ExpressionStatement(), doNormalizedStep, false, ExpressionStatement(), storeStep, interpolator, nextTime, ExpressionStatement(), nextTime, h, ExpressionStatement(), nextInStep, isNextInStep, nextTime, interpolator, IfStatement(if), isLast, VariableDeclarationStatement(), boolean, addLast, bounds, lastIncluded, lastTime, interpolator, getCurrentTime, ExpressionStatement(), doNormalizedStep, addLast, IfStatement(if), addLast, ExpressionStatement(), storeStep, interpolator, interpolator, getCurrentTime, ExpressionStatement(), doNormalizedStep, true]
org.apache.commons.math4.ode.sampling:StepNormalizer:isNextInStep:double+StepInterpolator#[ReturnStatement(return), forward, nextTime, interpolator, getCurrentTime, nextTime, interpolator, getCurrentTime]
org.apache.commons.math4.ode.sampling:StepNormalizer:doNormalizedStep:boolean#[IfStatement(if), bounds, firstIncluded, firstTime, lastTime, ReturnStatement(return), ExpressionStatement(), handler, handleStep, lastTime, lastState, lastDerivatives, isLast]
org.apache.commons.math4.ode.sampling:StepNormalizer:storeStep:StepInterpolator+double#[ExpressionStatement(), lastTime, t, ExpressionStatement(), interpolator, setInterpolatedTime, lastTime, ExpressionStatement(), System, arraycopy, interpolator, getInterpolatedState, 0, lastState, 0, lastState.length, ExpressionStatement(), System, arraycopy, interpolator, getInterpolatedDerivatives, 0, lastDerivatives, 0, lastDerivatives.length]
org.apache.commons.math4.ode:UnknownParameterException:getName:null#[ReturnStatement(return), name]
org.apache.commons.math4.optim:AbstractConvergenceChecker:getRelativeThreshold:null#[ReturnStatement(return), relativeThreshold]
org.apache.commons.math4.optim:AbstractConvergenceChecker:getAbsoluteThreshold:null#[ReturnStatement(return), absoluteThreshold]
org.apache.commons.math4.optim:AbstractOptimizationProblem:getEvaluationCounter:null#[ReturnStatement(return), new, Incrementor, this, maxEvaluations, MAX_EVAL_CALLBACK]
org.apache.commons.math4.optim:AbstractOptimizationProblem:getIterationCounter:null#[ReturnStatement(return), new, Incrementor, this, maxIterations, MAX_ITER_CALLBACK]
org.apache.commons.math4.optim:AbstractOptimizationProblem:getConvergenceChecker:null#[ReturnStatement(return), checker]
org.apache.commons.math4.optim:BaseMultiStartMultivariateOptimizer:getEvaluations:null#[ReturnStatement(return), totalEvaluations]
org.apache.commons.math4.optim:BaseMultiStartMultivariateOptimizer:optimize:OptimizationData...#[ExpressionStatement(), optimData, optData, ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim:BaseMultiStartMultivariateOptimizer:doOptimize:null#[ForStatement(for), int, i, 0, i, optimData.length, i, IfStatement(if), instanceof, optimData, i, MaxEval, ExpressionStatement(), optimData, i, null, ExpressionStatement(), maxEvalIndex, i, IfStatement(if), instanceof, optimData, i, InitialGuess, ExpressionStatement(), optimData, i, null, ExpressionStatement(), initialGuessIndex, i, ContinueStatement(continue), IfStatement(if), maxEvalIndex, 1, ThrowStatement(throw), new, MathIllegalStateException, IfStatement(if), initialGuessIndex, 1, ThrowStatement(throw), new, MathIllegalStateException, VariableDeclarationStatement(), RuntimeException, lastException, null, ExpressionStatement(), totalEvaluations, 0, ExpressionStatement(), clear, VariableDeclarationStatement(), final, int, maxEval, getMaxEvaluations, VariableDeclarationStatement(), final, double, min, getLowerBound, VariableDeclarationStatement(), final, double, max, getUpperBound, VariableDeclarationStatement(), final, double, startPoint, getStartPoint, ForStatement(for), int, i, 0, i, starts, i, TryStatement(try), ExpressionStatement(), optimData, maxEvalIndex, new, MaxEval, maxEval, totalEvaluations, VariableDeclarationStatement(), double, s, null, IfStatement(if), i, 0, ExpressionStatement(), s, startPoint, VariableDeclarationStatement(), int, attempts, 0, WhileStatement(while), s, null, IfStatement(if), attempts, getMaxEvaluations, ThrowStatement(throw), new, TooManyEvaluationsException, getMaxEvaluations, ExpressionStatement(), s, generator, nextVector, ForStatement(for), int, k, 0, s, null, k, s.length, k, IfStatement(if), min, null, s, k, min, k, max, null, s, k, max, k, ExpressionStatement(), s, null, ExpressionStatement(), optimData, initialGuessIndex, new, InitialGuess, s, VariableDeclarationStatement(), final, PAIR, result, optimizer, optimize, optimData, ExpressionStatement(), store, result, catch, RuntimeException, mue, ExpressionStatement(), lastException, mue, ExpressionStatement(), totalEvaluations, optimizer, getEvaluations, VariableDeclarationStatement(), final, PAIR, optima, getOptima, IfStatement(if), optima.length, 0, ThrowStatement(throw), lastException, ReturnStatement(return), optima, 0]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, InitialGuess, ExpressionStatement(), start, InitialGuess, data, getInitialGuess, ContinueStatement(continue), IfStatement(if), instanceof, data, SimpleBounds, VariableDeclarationStatement(), final, SimpleBounds, bounds, SimpleBounds, data, ExpressionStatement(), lowerBound, bounds, getLower, ExpressionStatement(), upperBound, bounds, getUpper, ContinueStatement(continue), ExpressionStatement(), checkParameters]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:getStartPoint:null#[ReturnStatement(return), start, null, null, start, clone]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:getLowerBound:null#[ReturnStatement(return), lowerBound, null, null, lowerBound, clone]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:getUpperBound:null#[ReturnStatement(return), upperBound, null, null, upperBound, clone]
org.apache.commons.math4.optim:BaseMultivariateOptimizer:checkParameters:null#[IfStatement(if), start, null, VariableDeclarationStatement(), final, int, dim, start.length, IfStatement(if), lowerBound, null, IfStatement(if), lowerBound.length, dim, ThrowStatement(throw), new, DimensionMismatchException, lowerBound.length, dim, ForStatement(for), int, i, 0, i, dim, i, VariableDeclarationStatement(), final, double, v, start, i, VariableDeclarationStatement(), final, double, lo, lowerBound, i, IfStatement(if), v, lo, ThrowStatement(throw), new, NumberIsTooSmallException, v, lo, true, IfStatement(if), upperBound, null, IfStatement(if), upperBound.length, dim, ThrowStatement(throw), new, DimensionMismatchException, upperBound.length, dim, ForStatement(for), int, i, 0, i, dim, i, VariableDeclarationStatement(), final, double, v, start, i, VariableDeclarationStatement(), final, double, hi, upperBound, i, IfStatement(if), v, hi, ThrowStatement(throw), new, NumberIsTooLargeException, v, hi, true]
org.apache.commons.math4.optim:BaseOptimizer:getMaxEvaluations:null#[ReturnStatement(return), evaluations, getMaximalCount]
org.apache.commons.math4.optim:BaseOptimizer:getEvaluations:null#[ReturnStatement(return), evaluations, getCount]
org.apache.commons.math4.optim:BaseOptimizer:getMaxIterations:null#[ReturnStatement(return), iterations, getMaximalCount]
org.apache.commons.math4.optim:BaseOptimizer:getIterations:null#[ReturnStatement(return), iterations, getCount]
org.apache.commons.math4.optim:BaseOptimizer:getConvergenceChecker:null#[ReturnStatement(return), checker]
org.apache.commons.math4.optim:BaseOptimizer:optimize:OptimizationData...#[ExpressionStatement(), parseOptimizationData, optData, ExpressionStatement(), evaluations, resetCount, ExpressionStatement(), iterations, resetCount, ReturnStatement(return), doOptimize]
org.apache.commons.math4.optim:BaseOptimizer:optimize:null#[ExpressionStatement(), evaluations, resetCount, ExpressionStatement(), iterations, resetCount, ReturnStatement(return), doOptimize]
org.apache.commons.math4.optim:BaseOptimizer:incrementEvaluationCount:null#[ExpressionStatement(), evaluations, incrementCount]
org.apache.commons.math4.optim:BaseOptimizer:incrementIterationCount:null#[ExpressionStatement(), iterations, incrementCount]
org.apache.commons.math4.optim:BaseOptimizer:parseOptimizationData:OptimizationData...#[EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, MaxEval, ExpressionStatement(), evaluations, setMaximalCount, MaxEval, data, getMaxEval, ContinueStatement(continue), IfStatement(if), instanceof, data, MaxIter, ExpressionStatement(), iterations, setMaximalCount, MaxIter, data, getMaxIter, ContinueStatement(continue)]
org.apache.commons.math4.optim:InitialGuess:getInitialGuess:null#[ReturnStatement(return), init, clone]
org.apache.commons.math4.optim.linear:LinearConstraint:getCoefficients:null#[ReturnStatement(return), coefficients]
org.apache.commons.math4.optim.linear:LinearConstraint:getRelationship:null#[ReturnStatement(return), relationship]
org.apache.commons.math4.optim.linear:LinearConstraint:getValue:null#[ReturnStatement(return), value]
org.apache.commons.math4.optim.linear:LinearConstraint:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, LinearConstraint, VariableDeclarationStatement(), LinearConstraint, rhs, LinearConstraint, other, ReturnStatement(return), relationship, rhs.relationship, value, rhs.value, coefficients, equals, rhs.coefficients, ReturnStatement(return), false]
org.apache.commons.math4.optim.linear:LinearConstraint:hashCode:null#[ReturnStatement(return), relationship, hashCode, Double, valueOf, value, hashCode, coefficients, hashCode]
org.apache.commons.math4.optim.linear:LinearConstraint:writeObject:ObjectOutputStream#[ExpressionStatement(), oos, defaultWriteObject, ExpressionStatement(), MatrixUtils, serializeRealVector, coefficients, oos]
org.apache.commons.math4.optim.linear:LinearConstraint:readObject:ObjectInputStream#[ExpressionStatement(), ois, defaultReadObject, ExpressionStatement(), MatrixUtils, deserializeRealVector, this, "coefficients", ois]
org.apache.commons.math4.optim.linear:LinearConstraintSet:getConstraints:null#[ReturnStatement(return), Collections, unmodifiableSet, linearConstraints]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:getCoefficients:null#[ReturnStatement(return), coefficients]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:getConstantTerm:null#[ReturnStatement(return), constantTerm]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:value:double[]#[ReturnStatement(return), value, new, ArrayRealVector, point, false]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:value:RealVector#[ReturnStatement(return), coefficients, dotProduct, point, constantTerm]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, LinearObjectiveFunction, VariableDeclarationStatement(), LinearObjectiveFunction, rhs, LinearObjectiveFunction, other, ReturnStatement(return), constantTerm, rhs.constantTerm, coefficients, equals, rhs.coefficients, ReturnStatement(return), false]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:hashCode:null#[ReturnStatement(return), Double, valueOf, constantTerm, hashCode, coefficients, hashCode]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:writeObject:ObjectOutputStream#[ExpressionStatement(), oos, defaultWriteObject, ExpressionStatement(), MatrixUtils, serializeRealVector, coefficients, oos]
org.apache.commons.math4.optim.linear:LinearObjectiveFunction:readObject:ObjectInputStream#[ExpressionStatement(), ois, defaultReadObject, ExpressionStatement(), MatrixUtils, deserializeRealVector, this, "coefficients", ois]
org.apache.commons.math4.optim.linear:LinearOptimizer:isRestrictedToNonNegative:null#[ReturnStatement(return), nonNegative]
org.apache.commons.math4.optim.linear:LinearOptimizer:getFunction:null#[ReturnStatement(return), function]
org.apache.commons.math4.optim.linear:LinearOptimizer:getConstraints:null#[ReturnStatement(return), Collections, unmodifiableCollection, linearConstraints]
org.apache.commons.math4.optim.linear:LinearOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.linear:LinearOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, LinearObjectiveFunction, ExpressionStatement(), function, LinearObjectiveFunction, data, ContinueStatement(continue), IfStatement(if), instanceof, data, LinearConstraintSet, ExpressionStatement(), linearConstraints, LinearConstraintSet, data, getConstraints, ContinueStatement(continue), IfStatement(if), instanceof, data, NonNegativeConstraint, ExpressionStatement(), nonNegative, NonNegativeConstraint, data, isRestrictedToNonNegative, ContinueStatement(continue)]
org.apache.commons.math4.optim.linear:NonNegativeConstraint:isRestrictedToNonNegative:null#[ReturnStatement(return), isRestricted]
org.apache.commons.math4.optim.linear:SimplexSolver:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.linear:SimplexSolver:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, ExpressionStatement(), solutionCallback, null, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, SolutionCallback, ExpressionStatement(), solutionCallback, SolutionCallback, data, ContinueStatement(continue), IfStatement(if), instanceof, data, PivotSelectionRule, ExpressionStatement(), pivotSelection, PivotSelectionRule, data, ContinueStatement(continue)]
org.apache.commons.math4.optim.linear:SimplexSolver:getPivotColumn:SimplexTableau#[VariableDeclarationStatement(), double, minValue, 0, VariableDeclarationStatement(), Integer, minPos, null, ForStatement(for), int, i, tableau, getNumObjectiveFunctions, i, tableau, getWidth, 1, i, VariableDeclarationStatement(), final, double, entry, tableau, getEntry, 0, i, IfStatement(if), entry, minValue, ExpressionStatement(), minValue, entry, ExpressionStatement(), minPos, i, IfStatement(if), pivotSelection, PivotSelectionRule.BLAND, isValidPivotColumn, tableau, i, BreakStatement(break), ReturnStatement(return), minPos]
org.apache.commons.math4.optim.linear:SimplexSolver:isValidPivotColumn:SimplexTableau+int#[ForStatement(for), int, i, tableau, getNumObjectiveFunctions, i, tableau, getHeight, i, VariableDeclarationStatement(), final, double, entry, tableau, getEntry, i, col, IfStatement(if), Precision, compareTo, entry, 0d, cutOff, 0, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.optim.linear:SimplexSolver:getPivotRow:SimplexTableau+int#[VariableDeclarationStatement(), List, Integer, minRatioPositions, new, ArrayList, Integer, VariableDeclarationStatement(), double, minRatio, Double.MAX_VALUE, ForStatement(for), int, i, tableau, getNumObjectiveFunctions, i, tableau, getHeight, i, VariableDeclarationStatement(), final, double, rhs, tableau, getEntry, i, tableau, getWidth, 1, VariableDeclarationStatement(), final, double, entry, tableau, getEntry, i, col, IfStatement(if), Precision, compareTo, entry, 0d, cutOff, 0, VariableDeclarationStatement(), final, double, ratio, FastMath, abs, rhs, entry, VariableDeclarationStatement(), final, int, cmp, Double, compare, ratio, minRatio, IfStatement(if), cmp, 0, ExpressionStatement(), minRatioPositions, add, i, IfStatement(if), cmp, 0, ExpressionStatement(), minRatio, ratio, ExpressionStatement(), minRatioPositions, clear, ExpressionStatement(), minRatioPositions, add, i, IfStatement(if), minRatioPositions, size, 0, ReturnStatement(return), null, IfStatement(if), minRatioPositions, size, 1, IfStatement(if), tableau, getNumArtificialVariables, 0, EnhancedForStatement(for), Integer, row, minRatioPositions, ForStatement(for), int, i, 0, i, tableau, getNumArtificialVariables, i, VariableDeclarationStatement(), int, column, i, tableau, getArtificialVariableOffset, VariableDeclarationStatement(), final, double, entry, tableau, getEntry, row, column, IfStatement(if), Precision, equals, entry, 1d, maxUlps, row, equals, tableau, getBasicRow, column, ReturnStatement(return), row, VariableDeclarationStatement(), Integer, minRow, null, VariableDeclarationStatement(), int, minIndex, tableau, getWidth, EnhancedForStatement(for), Integer, row, minRatioPositions, VariableDeclarationStatement(), final, int, basicVar, tableau, getBasicVariable, row, IfStatement(if), basicVar, minIndex, ExpressionStatement(), minIndex, basicVar, ExpressionStatement(), minRow, row, ReturnStatement(return), minRow, ReturnStatement(return), minRatioPositions, get, 0]
org.apache.commons.math4.optim.linear:SimplexSolver:doIteration:SimplexTableau#[ExpressionStatement(), incrementIterationCount, VariableDeclarationStatement(), Integer, pivotCol, getPivotColumn, tableau, VariableDeclarationStatement(), Integer, pivotRow, getPivotRow, tableau, pivotCol, IfStatement(if), pivotRow, null, ThrowStatement(throw), new, UnboundedSolutionException, ExpressionStatement(), tableau, performRowOperations, pivotCol, pivotRow]
org.apache.commons.math4.optim.linear:SimplexSolver:solvePhase1:SimplexTableau#[IfStatement(if), tableau, getNumArtificialVariables, 0, ReturnStatement(return), WhileStatement(while), tableau, isOptimal, ExpressionStatement(), doIteration, tableau, IfStatement(if), Precision, equals, tableau, getEntry, 0, tableau, getRhsOffset, 0d, epsilon, ThrowStatement(throw), new, NoFeasibleSolutionException]
org.apache.commons.math4.optim.linear:SimplexSolver:doOptimize:null#[IfStatement(if), solutionCallback, null, ExpressionStatement(), solutionCallback, setTableau, null, VariableDeclarationStatement(), final, SimplexTableau, tableau, new, SimplexTableau, getFunction, getConstraints, getGoalType, isRestrictedToNonNegative, epsilon, maxUlps, ExpressionStatement(), solvePhase1, tableau, ExpressionStatement(), tableau, dropPhase1Objective, IfStatement(if), solutionCallback, null, ExpressionStatement(), solutionCallback, setTableau, tableau, WhileStatement(while), tableau, isOptimal, ExpressionStatement(), doIteration, tableau, VariableDeclarationStatement(), final, PointValuePair, solution, tableau, getSolution, IfStatement(if), isRestrictedToNonNegative, VariableDeclarationStatement(), final, double, coeff, solution, getPoint, ForStatement(for), int, i, 0, i, coeff.length, i, IfStatement(if), Precision, compareTo, coeff, i, 0, epsilon, 0, ThrowStatement(throw), new, NoFeasibleSolutionException, ReturnStatement(return), solution]
org.apache.commons.math4.optim.linear:SimplexTableau:checkDimensions:LinearObjectiveFunction+Collection<LinearConstraint>#[VariableDeclarationStatement(), final, int, dimension, objectiveFunction, getCoefficients, getDimension, EnhancedForStatement(for), final, LinearConstraint, constraint, c, VariableDeclarationStatement(), final, int, constraintDimension, constraint, getCoefficients, getDimension, IfStatement(if), constraintDimension, dimension, ThrowStatement(throw), new, DimensionMismatchException, constraintDimension, dimension]
org.apache.commons.math4.optim.linear:SimplexTableau:initializeColumnLabels:null#[IfStatement(if), getNumObjectiveFunctions, 2, ExpressionStatement(), columnLabels, add, "W", ExpressionStatement(), columnLabels, add, "Z", ForStatement(for), int, i, 0, i, getOriginalNumDecisionVariables, i, ExpressionStatement(), columnLabels, add, "x", i, IfStatement(if), restrictToNonNegative, ExpressionStatement(), columnLabels, add, NEGATIVE_VAR_COLUMN_LABEL, ForStatement(for), int, i, 0, i, getNumSlackVariables, i, ExpressionStatement(), columnLabels, add, "s", i, ForStatement(for), int, i, 0, i, getNumArtificialVariables, i, ExpressionStatement(), columnLabels, add, "a", i, ExpressionStatement(), columnLabels, add, "RHS"]
org.apache.commons.math4.optim.linear:SimplexTableau:createTableau:boolean#[VariableDeclarationStatement(), int, width, numDecisionVariables, numSlackVariables, numArtificialVariables, getNumObjectiveFunctions, 1, VariableDeclarationStatement(), int, height, constraints, size, getNumObjectiveFunctions, VariableDeclarationStatement(), Array2DRowRealMatrix, matrix, new, Array2DRowRealMatrix, height, width, IfStatement(if), getNumObjectiveFunctions, 2, ExpressionStatement(), matrix, setEntry, 0, 0, 1, VariableDeclarationStatement(), int, zIndex, getNumObjectiveFunctions, 1, 0, 1, ExpressionStatement(), matrix, setEntry, zIndex, zIndex, maximize, 1, 1, VariableDeclarationStatement(), RealVector, objectiveCoefficients, maximize, f, getCoefficients, mapMultiply, 1, f, getCoefficients, ExpressionStatement(), copyArray, objectiveCoefficients, toArray, matrix, getDataRef, zIndex, ExpressionStatement(), matrix, setEntry, zIndex, width, 1, maximize, f, getConstantTerm, 1, f, getConstantTerm, IfStatement(if), restrictToNonNegative, ExpressionStatement(), matrix, setEntry, zIndex, getSlackVariableOffset, 1, getInvertedCoefficientSum, objectiveCoefficients, VariableDeclarationStatement(), int, slackVar, 0, VariableDeclarationStatement(), int, artificialVar, 0, ForStatement(for), int, i, 0, i, constraints, size, i, VariableDeclarationStatement(), LinearConstraint, constraint, constraints, get, i, VariableDeclarationStatement(), int, row, getNumObjectiveFunctions, i, ExpressionStatement(), copyArray, constraint, getCoefficients, toArray, matrix, getDataRef, row, IfStatement(if), restrictToNonNegative, ExpressionStatement(), matrix, setEntry, row, getSlackVariableOffset, 1, getInvertedCoefficientSum, constraint, getCoefficients, ExpressionStatement(), matrix, setEntry, row, width, 1, constraint, getValue, IfStatement(if), constraint, getRelationship, Relationship.LEQ, ExpressionStatement(), matrix, setEntry, row, getSlackVariableOffset, slackVar, 1, IfStatement(if), constraint, getRelationship, Relationship.GEQ, ExpressionStatement(), matrix, setEntry, row, getSlackVariableOffset, slackVar, 1, IfStatement(if), constraint, getRelationship, Relationship.EQ, constraint, getRelationship, Relationship.GEQ, ExpressionStatement(), matrix, setEntry, 0, getArtificialVariableOffset, artificialVar, 1, ExpressionStatement(), matrix, setEntry, row, getArtificialVariableOffset, artificialVar, 1, ExpressionStatement(), matrix, setRowVector, 0, matrix, getRowVector, 0, subtract, matrix, getRowVector, row, ReturnStatement(return), matrix]
org.apache.commons.math4.optim.linear:SimplexTableau:normalizeConstraints:Collection<LinearConstraint>#[VariableDeclarationStatement(), List, LinearConstraint, normalized, new, ArrayList, LinearConstraint, originalConstraints, size, EnhancedForStatement(for), LinearConstraint, constraint, originalConstraints, ExpressionStatement(), normalized, add, normalize, constraint, ReturnStatement(return), normalized]
org.apache.commons.math4.optim.linear:SimplexTableau:normalize:LinearConstraint#[IfStatement(if), constraint, getValue, 0, ReturnStatement(return), new, LinearConstraint, constraint, getCoefficients, mapMultiply, 1, constraint, getRelationship, oppositeRelationship, 1, constraint, getValue, ReturnStatement(return), new, LinearConstraint, constraint, getCoefficients, constraint, getRelationship, constraint, getValue]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumObjectiveFunctions:null#[ReturnStatement(return), this, numArtificialVariables, 0, 2, 1]
org.apache.commons.math4.optim.linear:SimplexTableau:getConstraintTypeCounts:Relationship#[VariableDeclarationStatement(), int, count, 0, EnhancedForStatement(for), final, LinearConstraint, constraint, constraints, IfStatement(if), constraint, getRelationship, relationship, ExpressionStatement(), count, ReturnStatement(return), count]
org.apache.commons.math4.optim.linear:SimplexTableau:getInvertedCoefficientSum:RealVector#[VariableDeclarationStatement(), double, sum, 0, EnhancedForStatement(for), double, coefficient, coefficients, toArray, ExpressionStatement(), sum, coefficient, ReturnStatement(return), sum]
org.apache.commons.math4.optim.linear:SimplexTableau:getBasicRow:int#[VariableDeclarationStatement(), final, int, row, basicVariables, col, ReturnStatement(return), row, 1, null, row]
org.apache.commons.math4.optim.linear:SimplexTableau:getBasicVariable:int#[ReturnStatement(return), basicRows, row]
org.apache.commons.math4.optim.linear:SimplexTableau:initializeBasicVariables:int#[ExpressionStatement(), basicVariables, int, getWidth, 1, ExpressionStatement(), basicRows, int, getHeight, ExpressionStatement(), Arrays, fill, basicVariables, 1, ForStatement(for), int, i, startColumn, i, getWidth, 1, i, VariableDeclarationStatement(), Integer, row, findBasicRow, i, IfStatement(if), row, null, ExpressionStatement(), basicVariables, i, row, ExpressionStatement(), basicRows, row, i]
org.apache.commons.math4.optim.linear:SimplexTableau:findBasicRow:int#[VariableDeclarationStatement(), Integer, row, null, ForStatement(for), int, i, 0, i, getHeight, i, VariableDeclarationStatement(), final, double, entry, getEntry, i, col, IfStatement(if), Precision, equals, entry, 1d, maxUlps, row, null, ExpressionStatement(), row, i, IfStatement(if), Precision, equals, entry, 0d, maxUlps, ReturnStatement(return), null, ReturnStatement(return), row]
org.apache.commons.math4.optim.linear:SimplexTableau:dropPhase1Objective:null#[IfStatement(if), getNumObjectiveFunctions, 1, ReturnStatement(return), VariableDeclarationStatement(), final, Set, Integer, columnsToDrop, new, TreeSet, Integer, ExpressionStatement(), columnsToDrop, add, 0, ForStatement(for), int, i, getNumObjectiveFunctions, i, getArtificialVariableOffset, i, VariableDeclarationStatement(), final, double, entry, getEntry, 0, i, IfStatement(if), Precision, compareTo, entry, 0d, epsilon, 0, ExpressionStatement(), columnsToDrop, add, i, ForStatement(for), int, i, 0, i, getNumArtificialVariables, i, VariableDeclarationStatement(), int, col, i, getArtificialVariableOffset, IfStatement(if), getBasicRow, col, null, ExpressionStatement(), columnsToDrop, add, col, VariableDeclarationStatement(), final, double, matrix, double, getHeight, 1, getWidth, columnsToDrop, size, ForStatement(for), int, i, 1, i, getHeight, i, VariableDeclarationStatement(), int, col, 0, ForStatement(for), int, j, 0, j, getWidth, j, IfStatement(if), columnsToDrop, contains, j, ExpressionStatement(), matrix, i, 1, col, getEntry, i, j, VariableDeclarationStatement(), Integer, drop, columnsToDrop, toArray, Integer, columnsToDrop, size, ForStatement(for), int, i, drop.length, 1, i, 0, i, ExpressionStatement(), columnLabels, remove, int, drop, i, ExpressionStatement(), this, tableau, new, Array2DRowRealMatrix, matrix, ExpressionStatement(), this, numArtificialVariables, 0, ExpressionStatement(), initializeBasicVariables, getNumObjectiveFunctions]
org.apache.commons.math4.optim.linear:SimplexTableau:copyArray:double[]+double[]#[ExpressionStatement(), System, arraycopy, src, 0, dest, getNumObjectiveFunctions, src.length]
org.apache.commons.math4.optim.linear:SimplexTableau:isOptimal:null#[VariableDeclarationStatement(), final, double, objectiveFunctionRow, getRow, 0, VariableDeclarationStatement(), final, int, end, getRhsOffset, ForStatement(for), int, i, getNumObjectiveFunctions, i, end, i, VariableDeclarationStatement(), final, double, entry, objectiveFunctionRow, i, IfStatement(if), Precision, compareTo, entry, 0d, epsilon, 0, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.optim.linear:SimplexTableau:getSolution:null#[VariableDeclarationStatement(), int, negativeVarColumn, columnLabels, indexOf, NEGATIVE_VAR_COLUMN_LABEL, VariableDeclarationStatement(), Integer, negativeVarBasicRow, negativeVarColumn, 0, getBasicRow, negativeVarColumn, null, VariableDeclarationStatement(), double, mostNegative, negativeVarBasicRow, null, 0, getEntry, negativeVarBasicRow, getRhsOffset, VariableDeclarationStatement(), final, Set, Integer, usedBasicRows, new, HashSet, Integer, VariableDeclarationStatement(), final, double, coefficients, double, getOriginalNumDecisionVariables, ForStatement(for), int, i, 0, i, coefficients.length, i, VariableDeclarationStatement(), int, colIndex, columnLabels, indexOf, "x", i, IfStatement(if), colIndex, 0, ExpressionStatement(), coefficients, i, 0, ContinueStatement(continue), VariableDeclarationStatement(), Integer, basicRow, getBasicRow, colIndex, IfStatement(if), basicRow, null, basicRow, 0, ExpressionStatement(), coefficients, i, 0, IfStatement(if), usedBasicRows, contains, basicRow, ExpressionStatement(), coefficients, i, 0, restrictToNonNegative, 0, mostNegative, ExpressionStatement(), usedBasicRows, add, basicRow, ExpressionStatement(), coefficients, i, basicRow, null, 0, getEntry, basicRow, getRhsOffset, restrictToNonNegative, 0, mostNegative, ReturnStatement(return), new, PointValuePair, coefficients, f, value, coefficients]
org.apache.commons.math4.optim.linear:SimplexTableau:performRowOperations:int+int#[VariableDeclarationStatement(), final, double, pivotVal, getEntry, pivotRow, pivotCol, ExpressionStatement(), divideRow, pivotRow, pivotVal, ForStatement(for), int, i, 0, i, getHeight, i, IfStatement(if), i, pivotRow, VariableDeclarationStatement(), final, double, multiplier, getEntry, i, pivotCol, IfStatement(if), multiplier, 0.0, ExpressionStatement(), subtractRow, i, pivotRow, multiplier, VariableDeclarationStatement(), final, int, previousBasicVariable, getBasicVariable, pivotRow, ExpressionStatement(), basicVariables, previousBasicVariable, 1, ExpressionStatement(), basicVariables, pivotCol, pivotRow, ExpressionStatement(), basicRows, pivotRow, pivotCol]
org.apache.commons.math4.optim.linear:SimplexTableau:divideRow:int+double#[VariableDeclarationStatement(), final, double, dividendRow, getRow, dividendRowIndex, ForStatement(for), int, j, 0, j, getWidth, j, ExpressionStatement(), dividendRow, j, divisor]
org.apache.commons.math4.optim.linear:SimplexTableau:subtractRow:int+int+double#[VariableDeclarationStatement(), final, double, minuendRow, getRow, minuendRowIndex, VariableDeclarationStatement(), final, double, subtrahendRow, getRow, subtrahendRowIndex, ForStatement(for), int, i, 0, i, getWidth, i, ExpressionStatement(), minuendRow, i, subtrahendRow, i, multiplier]
org.apache.commons.math4.optim.linear:SimplexTableau:getWidth:null#[ReturnStatement(return), tableau, getColumnDimension]
org.apache.commons.math4.optim.linear:SimplexTableau:getHeight:null#[ReturnStatement(return), tableau, getRowDimension]
org.apache.commons.math4.optim.linear:SimplexTableau:getEntry:int+int#[ReturnStatement(return), tableau, getEntry, row, column]
org.apache.commons.math4.optim.linear:SimplexTableau:setEntry:int+int+double#[ExpressionStatement(), tableau, setEntry, row, column, value]
org.apache.commons.math4.optim.linear:SimplexTableau:getSlackVariableOffset:null#[ReturnStatement(return), getNumObjectiveFunctions, numDecisionVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getArtificialVariableOffset:null#[ReturnStatement(return), getNumObjectiveFunctions, numDecisionVariables, numSlackVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getRhsOffset:null#[ReturnStatement(return), getWidth, 1]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumDecisionVariables:null#[ReturnStatement(return), numDecisionVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getOriginalNumDecisionVariables:null#[ReturnStatement(return), f, getCoefficients, getDimension]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumSlackVariables:null#[ReturnStatement(return), numSlackVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getNumArtificialVariables:null#[ReturnStatement(return), numArtificialVariables]
org.apache.commons.math4.optim.linear:SimplexTableau:getRow:int#[ReturnStatement(return), tableau, getDataRef, row]
org.apache.commons.math4.optim.linear:SimplexTableau:getData:null#[ReturnStatement(return), tableau, getData]
org.apache.commons.math4.optim.linear:SimplexTableau:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, SimplexTableau, VariableDeclarationStatement(), SimplexTableau, rhs, SimplexTableau, other, ReturnStatement(return), restrictToNonNegative, rhs.restrictToNonNegative, numDecisionVariables, rhs.numDecisionVariables, numSlackVariables, rhs.numSlackVariables, numArtificialVariables, rhs.numArtificialVariables, epsilon, rhs.epsilon, maxUlps, rhs.maxUlps, f, equals, rhs.f, constraints, equals, rhs.constraints, tableau, equals, rhs.tableau, ReturnStatement(return), false]
org.apache.commons.math4.optim.linear:SimplexTableau:hashCode:null#[ReturnStatement(return), Boolean, valueOf, restrictToNonNegative, hashCode, numDecisionVariables, numSlackVariables, numArtificialVariables, Double, valueOf, epsilon, hashCode, maxUlps, f, hashCode, constraints, hashCode, tableau, hashCode]
org.apache.commons.math4.optim.linear:SimplexTableau:writeObject:ObjectOutputStream#[ExpressionStatement(), oos, defaultWriteObject, ExpressionStatement(), MatrixUtils, serializeRealMatrix, tableau, oos]
org.apache.commons.math4.optim.linear:SimplexTableau:readObject:ObjectInputStream#[ExpressionStatement(), ois, defaultReadObject, ExpressionStatement(), MatrixUtils, deserializeRealMatrix, this, "tableau", ois]
org.apache.commons.math4.optim.linear:SolutionCallback:setTableau:SimplexTableau#[ExpressionStatement(), this, tableau, tableau]
org.apache.commons.math4.optim.linear:SolutionCallback:getSolution:null#[ReturnStatement(return), tableau, null, tableau, getSolution, null]
org.apache.commons.math4.optim.linear:SolutionCallback:isSolutionOptimal:null#[ReturnStatement(return), tableau, null, tableau, isOptimal, false]
org.apache.commons.math4.optim:MaxEval:getMaxEval:null#[ReturnStatement(return), maxEval]
org.apache.commons.math4.optim:MaxEval:unlimited:null#[ReturnStatement(return), new, MaxEval, Integer.MAX_VALUE]
org.apache.commons.math4.optim:MaxIter:getMaxIter:null#[ReturnStatement(return), maxIter]
org.apache.commons.math4.optim:MaxIter:unlimited:null#[ReturnStatement(return), new, MaxIter, Integer.MAX_VALUE]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:doOptimize:null#[VariableDeclarationStatement(), final, ConvergenceChecker, PointValuePair, checker, getConvergenceChecker, VariableDeclarationStatement(), final, double, point, getStartPoint, VariableDeclarationStatement(), final, GoalType, goal, getGoalType, VariableDeclarationStatement(), final, int, n, point.length, VariableDeclarationStatement(), double, r, computeObjectiveGradient, point, IfStatement(if), goal, GoalType.MINIMIZE, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), r, i, r, i, VariableDeclarationStatement(), double, steepestDescent, preconditioner, precondition, point, r, VariableDeclarationStatement(), double, searchDirection, steepestDescent, clone, VariableDeclarationStatement(), double, delta, 0, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), delta, r, i, searchDirection, i, VariableDeclarationStatement(), PointValuePair, current, null, WhileStatement(while), true, ExpressionStatement(), incrementIterationCount, VariableDeclarationStatement(), final, double, objective, computeObjectiveValue, point, VariableDeclarationStatement(), PointValuePair, previous, current, ExpressionStatement(), current, new, PointValuePair, point, objective, IfStatement(if), previous, null, checker, converged, getIterations, previous, current, ReturnStatement(return), current, VariableDeclarationStatement(), final, double, step, line, search, point, searchDirection, getPoint, ForStatement(for), int, i, 0, i, point.length, i, ExpressionStatement(), point, i, step, searchDirection, i, ExpressionStatement(), r, computeObjectiveGradient, point, IfStatement(if), goal, GoalType.MINIMIZE, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), r, i, r, i, VariableDeclarationStatement(), final, double, deltaOld, delta, VariableDeclarationStatement(), final, double, newSteepestDescent, preconditioner, precondition, point, r, ExpressionStatement(), delta, 0, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), delta, r, i, newSteepestDescent, i, VariableDeclarationStatement(), final, double, beta, SwitchStatement(switch), updateFormula, SwitchCase(case), FLETCHER_REEVES, ExpressionStatement(), beta, delta, deltaOld, BreakStatement(break), SwitchCase(case), POLAK_RIBIERE, VariableDeclarationStatement(), double, deltaMid, 0, ForStatement(for), int, i, 0, i, r.length, i, ExpressionStatement(), deltaMid, r, i, steepestDescent, i, ExpressionStatement(), beta, delta, deltaMid, deltaOld, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), steepestDescent, newSteepestDescent, IfStatement(if), getIterations, n, 0, beta, 0, ExpressionStatement(), searchDirection, steepestDescent, clone, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), searchDirection, i, steepestDescent, i, beta, searchDirection, i]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, ExpressionStatement(), checkParameters]
org.apache.commons.math4.optim.nonlinear.scalar.gradient:NonLinearConjugateGradientOptimizer:checkParameters:null#[IfStatement(if), getLowerBound, null, getUpperBound, null, ThrowStatement(throw), new, MathUnsupportedOperationException, LocalizedFormats.CONSTRAINT]
org.apache.commons.math4.optim.nonlinear.scalar:GradientMultivariateOptimizer:computeObjectiveGradient:double[]#[ReturnStatement(return), gradient, value, params]
org.apache.commons.math4.optim.nonlinear.scalar:GradientMultivariateOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar:GradientMultivariateOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, ObjectiveFunctionGradient, ExpressionStatement(), gradient, ObjectiveFunctionGradient, data, getObjectiveFunctionGradient, BreakStatement(break)]
org.apache.commons.math4.optim.nonlinear.scalar:LeastSquaresConverter:value:double[]#[VariableDeclarationStatement(), final, double, residuals, function, value, point, IfStatement(if), residuals.length, observations.length, ThrowStatement(throw), new, DimensionMismatchException, residuals.length, observations.length, ForStatement(for), int, i, 0, i, residuals.length, i, ExpressionStatement(), residuals, i, observations, i, VariableDeclarationStatement(), double, sumSquares, 0, IfStatement(if), weights, null, ForStatement(for), int, i, 0, i, residuals.length, i, VariableDeclarationStatement(), final, double, ri, residuals, i, ExpressionStatement(), sumSquares, weights, i, ri, ri, IfStatement(if), scale, null, EnhancedForStatement(for), final, double, yi, scale, operate, residuals, ExpressionStatement(), sumSquares, yi, yi, EnhancedForStatement(for), final, double, ri, residuals, ExpressionStatement(), sumSquares, ri, ri, ReturnStatement(return), sumSquares]
org.apache.commons.math4.optim.nonlinear.scalar:LineSearch:search:double[]+double[]#[VariableDeclarationStatement(), final, int, n, startPoint.length, VariableDeclarationStatement(), final, UnivariateFunction, f, new, UnivariateFunction, Override, public, double, value, double, alpha, VariableDeclarationStatement(), final, double, x, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), x, i, startPoint, i, alpha, direction, i, VariableDeclarationStatement(), final, double, obj, mainOptimizer, computeObjectiveValue, x, ReturnStatement(return), obj, VariableDeclarationStatement(), final, GoalType, goal, mainOptimizer, getGoalType, ExpressionStatement(), bracket, search, f, goal, 0, initialBracketingRange, ReturnStatement(return), lineOptimizer, optimize, new, MaxEval, Integer.MAX_VALUE, new, UnivariateObjectiveFunction, f, goal, new, SearchInterval, bracket, getLo, bracket, getHi, bracket, getMid]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:getOptima:null#[ExpressionStatement(), Collections, sort, optima, getPairComparator, ReturnStatement(return), optima, toArray, PointValuePair, 0]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:store:PointValuePair#[ExpressionStatement(), optima, add, optimum]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:clear:null#[ExpressionStatement(), optima, clear]
org.apache.commons.math4.optim.nonlinear.scalar:MultiStartMultivariateOptimizer:getPairComparator:null#[ReturnStatement(return), new, Comparator, PointValuePair, Override, public, int, compare, final, PointValuePair, o1, final, PointValuePair, o2, IfStatement(if), o1, null, ReturnStatement(return), o2, null, 0, 1, IfStatement(if), o2, null, ReturnStatement(return), 1, VariableDeclarationStatement(), final, double, v1, o1, getValue, VariableDeclarationStatement(), final, double, v2, o2, getValue, ReturnStatement(return), optimizer, getGoalType, GoalType.MINIMIZE, Double, compare, v1, v2, Double, compare, v2, v1]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionMappingAdapter:unboundedToBounded:double[]#[VariableDeclarationStatement(), final, double, mapped, double, mappers.length, ForStatement(for), int, i, 0, i, mappers.length, i, ExpressionStatement(), mapped, i, mappers, i, unboundedToBounded, point, i, ReturnStatement(return), mapped]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionMappingAdapter:boundedToUnbounded:double[]#[VariableDeclarationStatement(), final, double, mapped, double, mappers.length, ForStatement(for), int, i, 0, i, mappers.length, i, ExpressionStatement(), mapped, i, mappers, i, boundedToUnbounded, point, i, ReturnStatement(return), mapped]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionMappingAdapter:value:double[]#[ReturnStatement(return), bounded, value, unboundedToBounded, point]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateFunctionPenaltyAdapter:value:double[]#[ForStatement(for), int, i, 0, i, scale.length, i, IfStatement(if), point, i, lower, i, point, i, upper, i, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, j, i, j, scale.length, j, VariableDeclarationStatement(), final, double, overshoot, IfStatement(if), point, j, lower, j, ExpressionStatement(), overshoot, scale, j, lower, j, point, j, IfStatement(if), point, j, upper, j, ExpressionStatement(), overshoot, scale, j, point, j, upper, j, ExpressionStatement(), overshoot, 0, ExpressionStatement(), sum, FastMath, sqrt, overshoot, ReturnStatement(return), offset, sum, ReturnStatement(return), bounded, value, point]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, GoalType, ExpressionStatement(), goal, GoalType, data, ContinueStatement(continue), IfStatement(if), instanceof, data, ObjectiveFunction, ExpressionStatement(), function, ObjectiveFunction, data, getObjectiveFunction, ContinueStatement(continue)]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:getGoalType:null#[ReturnStatement(return), goal]
org.apache.commons.math4.optim.nonlinear.scalar:MultivariateOptimizer:computeObjectiveValue:double[]#[ExpressionStatement(), super, incrementEvaluationCount, ReturnStatement(return), function, value, params]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getDimension:null#[ReturnStatement(return), dimension]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getSize:null#[ReturnStatement(return), simplex.length]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:build:double[]#[IfStatement(if), dimension, startPoint.length, ThrowStatement(throw), new, DimensionMismatchException, dimension, startPoint.length, ExpressionStatement(), simplex, PointValuePair, dimension, 1, ExpressionStatement(), simplex, 0, new, PointValuePair, startPoint, Double.NaN, ForStatement(for), int, i, 0, i, dimension, i, VariableDeclarationStatement(), final, double, confI, startConfiguration, i, VariableDeclarationStatement(), final, double, vertexI, double, dimension, ForStatement(for), int, k, 0, k, dimension, k, ExpressionStatement(), vertexI, k, startPoint, k, confI, k, ExpressionStatement(), simplex, i, 1, new, PointValuePair, vertexI, Double.NaN]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:evaluate:MultivariateFunction+Comparator<PointValuePair>#[ForStatement(for), int, i, 0, i, simplex.length, i, VariableDeclarationStatement(), final, PointValuePair, vertex, simplex, i, VariableDeclarationStatement(), final, double, point, vertex, getPointRef, IfStatement(if), Double, isNaN, vertex, getValue, ExpressionStatement(), simplex, i, new, PointValuePair, point, evaluationFunction, value, point, false, ExpressionStatement(), Arrays, sort, simplex, comparator]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:replaceWorstPoint:PointValuePair+Comparator<PointValuePair>#[ForStatement(for), int, i, 0, i, dimension, i, IfStatement(if), comparator, compare, simplex, i, pointValuePair, 0, VariableDeclarationStatement(), PointValuePair, tmp, simplex, i, ExpressionStatement(), simplex, i, pointValuePair, ExpressionStatement(), pointValuePair, tmp, ExpressionStatement(), simplex, dimension, pointValuePair]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getPoints:null#[VariableDeclarationStatement(), final, PointValuePair, copy, PointValuePair, simplex.length, ExpressionStatement(), System, arraycopy, simplex, 0, copy, 0, simplex.length, ReturnStatement(return), copy]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:getPoint:int#[IfStatement(if), index, 0, index, simplex.length, ThrowStatement(throw), new, OutOfRangeException, index, 0, simplex.length, 1, ReturnStatement(return), simplex, index]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:setPoint:int+PointValuePair#[IfStatement(if), index, 0, index, simplex.length, ThrowStatement(throw), new, OutOfRangeException, index, 0, simplex.length, 1, ExpressionStatement(), simplex, index, point]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:setPoints:PointValuePair[]#[IfStatement(if), points.length, simplex.length, ThrowStatement(throw), new, DimensionMismatchException, points.length, simplex.length, ExpressionStatement(), simplex, points]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:AbstractSimplex:createHypercubeSteps:int+double#[VariableDeclarationStatement(), final, double, steps, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), steps, i, sideLength, ReturnStatement(return), steps]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:doOptimize:null#[VariableDeclarationStatement(), final, double, lowerBound, getLowerBound, VariableDeclarationStatement(), final, double, upperBound, getUpperBound, ExpressionStatement(), setup, lowerBound, upperBound, ExpressionStatement(), isMinimize, getGoalType, GoalType.MINIMIZE, ExpressionStatement(), currentBest, new, ArrayRealVector, getStartPoint, VariableDeclarationStatement(), final, double, value, bobyqa, lowerBound, upperBound, ReturnStatement(return), new, PointValuePair, currentBest, getDataRef, isMinimize, value, value]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:bobyqa:double[]+double[]#[ExpressionStatement(), printMethod, VariableDeclarationStatement(), final, int, n, currentBest, getDimension, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), final, double, boundDiff, boundDifference, j, ExpressionStatement(), lowerDifference, setEntry, j, lowerBound, j, currentBest, getEntry, j, ExpressionStatement(), upperDifference, setEntry, j, upperBound, j, currentBest, getEntry, j, IfStatement(if), lowerDifference, getEntry, j, initialTrustRegionRadius, IfStatement(if), lowerDifference, getEntry, j, ZERO, ExpressionStatement(), currentBest, setEntry, j, lowerBound, j, ExpressionStatement(), lowerDifference, setEntry, j, ZERO, ExpressionStatement(), upperDifference, setEntry, j, boundDiff, ExpressionStatement(), currentBest, setEntry, j, lowerBound, j, initialTrustRegionRadius, ExpressionStatement(), lowerDifference, setEntry, j, initialTrustRegionRadius, VariableDeclarationStatement(), final, double, deltaOne, upperBound, j, currentBest, getEntry, j, ExpressionStatement(), upperDifference, setEntry, j, FastMath, max, deltaOne, initialTrustRegionRadius, IfStatement(if), upperDifference, getEntry, j, initialTrustRegionRadius, IfStatement(if), upperDifference, getEntry, j, ZERO, ExpressionStatement(), currentBest, setEntry, j, upperBound, j, ExpressionStatement(), lowerDifference, setEntry, j, boundDiff, ExpressionStatement(), upperDifference, setEntry, j, ZERO, ExpressionStatement(), currentBest, setEntry, j, upperBound, j, initialTrustRegionRadius, VariableDeclarationStatement(), final, double, deltaOne, lowerBound, j, currentBest, getEntry, j, VariableDeclarationStatement(), final, double, deltaTwo, initialTrustRegionRadius, ExpressionStatement(), lowerDifference, setEntry, j, FastMath, min, deltaOne, deltaTwo, ExpressionStatement(), upperDifference, setEntry, j, initialTrustRegionRadius, ReturnStatement(return), bobyqb, lowerBound, upperBound]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:bobyqb:double[]+double[]#[ExpressionStatement(), printMethod, VariableDeclarationStatement(), final, int, n, currentBest, getDimension, VariableDeclarationStatement(), final, int, npt, numberOfInterpolationPoints, VariableDeclarationStatement(), final, int, np, n, 1, VariableDeclarationStatement(), final, int, nptm, npt, np, VariableDeclarationStatement(), final, int, nh, n, np, 2, VariableDeclarationStatement(), final, ArrayRealVector, work1, new, ArrayRealVector, n, VariableDeclarationStatement(), final, ArrayRealVector, work2, new, ArrayRealVector, npt, VariableDeclarationStatement(), final, ArrayRealVector, work3, new, ArrayRealVector, npt, VariableDeclarationStatement(), double, cauchy, Double.NaN, VariableDeclarationStatement(), double, alpha, Double.NaN, VariableDeclarationStatement(), double, dsq, Double.NaN, VariableDeclarationStatement(), double, crvmin, Double.NaN, ExpressionStatement(), trustRegionCenterInterpolationPointIndex, 0, ExpressionStatement(), prelim, lowerBound, upperBound, VariableDeclarationStatement(), double, xoptsq, ZERO, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), trustRegionCenterOffset, setEntry, i, interpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, i, VariableDeclarationStatement(), final, double, deltaOne, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), xoptsq, deltaOne, deltaOne, VariableDeclarationStatement(), double, fsave, fAtInterpolationPoints, getEntry, 0, VariableDeclarationStatement(), final, int, kbase, 0, VariableDeclarationStatement(), int, ntrits, 0, VariableDeclarationStatement(), int, itest, 0, VariableDeclarationStatement(), int, knew, 0, VariableDeclarationStatement(), int, nfsav, getEvaluations, VariableDeclarationStatement(), double, rho, initialTrustRegionRadius, VariableDeclarationStatement(), double, delta, rho, VariableDeclarationStatement(), double, diffa, ZERO, VariableDeclarationStatement(), double, diffb, ZERO, VariableDeclarationStatement(), double, diffc, ZERO, VariableDeclarationStatement(), double, f, ZERO, VariableDeclarationStatement(), double, beta, ZERO, VariableDeclarationStatement(), double, adelt, ZERO, VariableDeclarationStatement(), double, denom, ZERO, VariableDeclarationStatement(), double, ratio, ZERO, VariableDeclarationStatement(), double, dnorm, ZERO, VariableDeclarationStatement(), double, scaden, ZERO, VariableDeclarationStatement(), double, biglsq, ZERO, VariableDeclarationStatement(), double, distsq, ZERO, VariableDeclarationStatement(), int, state, 20, ForStatement(for), SwitchStatement(switch), state, SwitchCase(case), 20, ExpressionStatement(), printState, 20, IfStatement(if), trustRegionCenterInterpolationPointIndex, kbase, VariableDeclarationStatement(), int, ih, 0, ForStatement(for), int, j, 0, j, n, j, ForStatement(for), int, i, 0, i, j, i, IfStatement(if), i, j, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, j, gradientAtTrustRegionCenter, getEntry, j, modelSecondDerivativesValues, getEntry, ih, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, i, gradientAtTrustRegionCenter, getEntry, i, modelSecondDerivativesValues, getEntry, ih, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), ih, IfStatement(if), getEvaluations, npt, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, temp, ZERO, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), temp, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), temp, modelSecondDerivativesParameters, getEntry, k, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, i, gradientAtTrustRegionCenter, getEntry, i, temp, interpolationPoints, getEntry, k, i, SwitchCase(case), 60, ExpressionStatement(), printState, 60, VariableDeclarationStatement(), final, ArrayRealVector, gnew, new, ArrayRealVector, n, VariableDeclarationStatement(), final, ArrayRealVector, xbdi, new, ArrayRealVector, n, VariableDeclarationStatement(), final, ArrayRealVector, s, new, ArrayRealVector, n, VariableDeclarationStatement(), final, ArrayRealVector, hs, new, ArrayRealVector, n, VariableDeclarationStatement(), final, ArrayRealVector, hred, new, ArrayRealVector, n, VariableDeclarationStatement(), final, double, dsqCrvmin, trsbox, delta, gnew, xbdi, s, hs, hred, ExpressionStatement(), dsq, dsqCrvmin, 0, ExpressionStatement(), crvmin, dsqCrvmin, 1, VariableDeclarationStatement(), double, deltaOne, delta, VariableDeclarationStatement(), double, deltaTwo, FastMath, sqrt, dsq, ExpressionStatement(), dnorm, FastMath, min, deltaOne, deltaTwo, IfStatement(if), dnorm, HALF, rho, ExpressionStatement(), ntrits, 1, ExpressionStatement(), deltaOne, TEN, rho, ExpressionStatement(), distsq, deltaOne, deltaOne, IfStatement(if), getEvaluations, nfsav, 2, ExpressionStatement(), state, 650, BreakStatement(break), ExpressionStatement(), deltaOne, FastMath, max, diffa, diffb, VariableDeclarationStatement(), final, double, errbig, FastMath, max, deltaOne, diffc, VariableDeclarationStatement(), final, double, frhosq, rho, ONE_OVER_EIGHT, rho, IfStatement(if), crvmin, ZERO, errbig, frhosq, crvmin, ExpressionStatement(), state, 650, BreakStatement(break), VariableDeclarationStatement(), final, double, bdtol, errbig, rho, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), double, bdtest, bdtol, IfStatement(if), newPoint, getEntry, j, lowerDifference, getEntry, j, ExpressionStatement(), bdtest, work1, getEntry, j, IfStatement(if), newPoint, getEntry, j, upperDifference, getEntry, j, ExpressionStatement(), bdtest, work1, getEntry, j, IfStatement(if), bdtest, bdtol, VariableDeclarationStatement(), double, curv, modelSecondDerivativesValues, getEntry, j, j, j, 2, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), final, double, d1, interpolationPoints, getEntry, k, j, ExpressionStatement(), curv, modelSecondDerivativesParameters, getEntry, k, d1, d1, ExpressionStatement(), bdtest, HALF, curv, rho, IfStatement(if), bdtest, bdtol, ExpressionStatement(), state, 650, BreakStatement(break), ExpressionStatement(), state, 680, BreakStatement(break), ExpressionStatement(), ntrits, SwitchCase(case), 90, ExpressionStatement(), printState, 90, IfStatement(if), dsq, xoptsq, ONE_OVER_A_THOUSAND, VariableDeclarationStatement(), final, double, fracsq, xoptsq, ONE_OVER_FOUR, VariableDeclarationStatement(), double, sumpq, ZERO, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), sumpq, modelSecondDerivativesParameters, getEntry, k, VariableDeclarationStatement(), double, sum, HALF, xoptsq, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), sum, interpolationPoints, getEntry, k, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), work2, setEntry, k, sum, VariableDeclarationStatement(), final, double, temp, fracsq, HALF, sum, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), work1, setEntry, i, bMatrix, getEntry, k, i, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, i, sum, interpolationPoints, getEntry, k, i, temp, trustRegionCenterOffset, getEntry, i, VariableDeclarationStatement(), final, int, ip, npt, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), bMatrix, setEntry, ip, j, bMatrix, getEntry, ip, j, work1, getEntry, i, lagrangeValuesAtNewPoint, getEntry, j, lagrangeValuesAtNewPoint, getEntry, i, work1, getEntry, j, ForStatement(for), int, m, 0, m, nptm, m, VariableDeclarationStatement(), double, sumz, ZERO, VariableDeclarationStatement(), double, sumw, ZERO, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), sumz, zMatrix, getEntry, k, m, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, k, work2, getEntry, k, zMatrix, getEntry, k, m, ExpressionStatement(), sumw, lagrangeValuesAtNewPoint, getEntry, k, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), double, sum, fracsq, sumz, HALF, sumw, trustRegionCenterOffset, getEntry, j, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), sum, lagrangeValuesAtNewPoint, getEntry, k, interpolationPoints, getEntry, k, j, ExpressionStatement(), work1, setEntry, j, sum, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), bMatrix, setEntry, k, j, bMatrix, getEntry, k, j, sum, zMatrix, getEntry, k, m, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, int, ip, i, npt, VariableDeclarationStatement(), final, double, temp, work1, getEntry, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), bMatrix, setEntry, ip, j, bMatrix, getEntry, ip, j, temp, work1, getEntry, j, VariableDeclarationStatement(), int, ih, 0, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), work1, setEntry, j, HALF, sumpq, trustRegionCenterOffset, getEntry, j, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), work1, setEntry, j, work1, getEntry, j, modelSecondDerivativesParameters, getEntry, k, interpolationPoints, getEntry, k, j, ExpressionStatement(), interpolationPoints, setEntry, k, j, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, ForStatement(for), int, i, 0, i, j, i, ExpressionStatement(), modelSecondDerivativesValues, setEntry, ih, modelSecondDerivativesValues, getEntry, ih, work1, getEntry, i, trustRegionCenterOffset, getEntry, j, trustRegionCenterOffset, getEntry, i, work1, getEntry, j, ExpressionStatement(), bMatrix, setEntry, npt, i, j, bMatrix, getEntry, npt, j, i, ExpressionStatement(), ih, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), originShift, setEntry, i, originShift, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), newPoint, setEntry, i, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), lowerDifference, setEntry, i, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), upperDifference, setEntry, i, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), trustRegionCenterOffset, setEntry, i, ZERO, ExpressionStatement(), xoptsq, ZERO, IfStatement(if), ntrits, 0, ExpressionStatement(), state, 210, BreakStatement(break), ExpressionStatement(), state, 230, BreakStatement(break), SwitchCase(case), 210, ExpressionStatement(), printState, 210, VariableDeclarationStatement(), final, double, alphaCauchy, altmov, knew, adelt, ExpressionStatement(), alpha, alphaCauchy, 0, ExpressionStatement(), cauchy, alphaCauchy, 1, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), trialStepPoint, setEntry, i, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, SwitchCase(case), 230, ExpressionStatement(), printState, 230, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, suma, ZERO, VariableDeclarationStatement(), double, sumb, ZERO, VariableDeclarationStatement(), double, sum, ZERO, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), suma, interpolationPoints, getEntry, k, j, trialStepPoint, getEntry, j, ExpressionStatement(), sumb, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), sum, bMatrix, getEntry, k, j, trialStepPoint, getEntry, j, ExpressionStatement(), work3, setEntry, k, suma, HALF, suma, sumb, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, k, sum, ExpressionStatement(), work2, setEntry, k, suma, ExpressionStatement(), beta, ZERO, ForStatement(for), int, m, 0, m, nptm, m, VariableDeclarationStatement(), double, sum, ZERO, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), sum, zMatrix, getEntry, k, m, work3, getEntry, k, ExpressionStatement(), beta, sum, sum, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, k, lagrangeValuesAtNewPoint, getEntry, k, sum, zMatrix, getEntry, k, m, ExpressionStatement(), dsq, ZERO, VariableDeclarationStatement(), double, bsum, ZERO, VariableDeclarationStatement(), double, dx, ZERO, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), final, double, d1, trialStepPoint, getEntry, j, ExpressionStatement(), dsq, d1, d1, VariableDeclarationStatement(), double, sum, ZERO, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), sum, work3, getEntry, k, bMatrix, getEntry, k, j, ExpressionStatement(), bsum, sum, trialStepPoint, getEntry, j, VariableDeclarationStatement(), final, int, jp, npt, j, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), sum, bMatrix, getEntry, jp, i, trialStepPoint, getEntry, i, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, jp, sum, ExpressionStatement(), bsum, sum, trialStepPoint, getEntry, j, ExpressionStatement(), dx, trialStepPoint, getEntry, j, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), beta, dx, dx, dsq, xoptsq, dx, dx, HALF, dsq, beta, bsum, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, trustRegionCenterInterpolationPointIndex, lagrangeValuesAtNewPoint, getEntry, trustRegionCenterInterpolationPointIndex, ONE, IfStatement(if), ntrits, 0, VariableDeclarationStatement(), final, double, d1, lagrangeValuesAtNewPoint, getEntry, knew, ExpressionStatement(), denom, d1, d1, alpha, beta, IfStatement(if), denom, cauchy, cauchy, ZERO, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), newPoint, setEntry, i, alternativeNewPoint, getEntry, i, ExpressionStatement(), trialStepPoint, setEntry, i, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), cauchy, ZERO, ExpressionStatement(), state, 230, BreakStatement(break), VariableDeclarationStatement(), final, double, delsq, delta, delta, ExpressionStatement(), scaden, ZERO, ExpressionStatement(), biglsq, ZERO, ExpressionStatement(), knew, 0, ForStatement(for), int, k, 0, k, npt, k, IfStatement(if), k, trustRegionCenterInterpolationPointIndex, ContinueStatement(continue), VariableDeclarationStatement(), double, hdiag, ZERO, ForStatement(for), int, m, 0, m, nptm, m, VariableDeclarationStatement(), final, double, d1, zMatrix, getEntry, k, m, ExpressionStatement(), hdiag, d1, d1, VariableDeclarationStatement(), final, double, d2, lagrangeValuesAtNewPoint, getEntry, k, VariableDeclarationStatement(), final, double, den, beta, hdiag, d2, d2, ExpressionStatement(), distsq, ZERO, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), final, double, d3, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), distsq, d3, d3, VariableDeclarationStatement(), final, double, d4, distsq, delsq, VariableDeclarationStatement(), final, double, temp, FastMath, max, ONE, d4, d4, IfStatement(if), temp, den, scaden, ExpressionStatement(), scaden, temp, den, ExpressionStatement(), knew, k, ExpressionStatement(), denom, den, VariableDeclarationStatement(), final, double, d5, lagrangeValuesAtNewPoint, getEntry, k, ExpressionStatement(), biglsq, FastMath, max, biglsq, temp, d5, d5, SwitchCase(case), 360, ExpressionStatement(), printState, 360, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, d3, lowerBound, i, VariableDeclarationStatement(), final, double, d4, originShift, getEntry, i, newPoint, getEntry, i, VariableDeclarationStatement(), final, double, d1, FastMath, max, d3, d4, VariableDeclarationStatement(), final, double, d2, upperBound, i, ExpressionStatement(), currentBest, setEntry, i, FastMath, min, d1, d2, IfStatement(if), newPoint, getEntry, i, lowerDifference, getEntry, i, ExpressionStatement(), currentBest, setEntry, i, lowerBound, i, IfStatement(if), newPoint, getEntry, i, upperDifference, getEntry, i, ExpressionStatement(), currentBest, setEntry, i, upperBound, i, ExpressionStatement(), f, computeObjectiveValue, currentBest, toArray, IfStatement(if), isMinimize, ExpressionStatement(), f, f, IfStatement(if), ntrits, 1, ExpressionStatement(), fsave, f, ExpressionStatement(), state, 720, BreakStatement(break), VariableDeclarationStatement(), final, double, fopt, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, VariableDeclarationStatement(), double, vquad, ZERO, VariableDeclarationStatement(), int, ih, 0, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), vquad, trialStepPoint, getEntry, j, gradientAtTrustRegionCenter, getEntry, j, ForStatement(for), int, i, 0, i, j, i, VariableDeclarationStatement(), double, temp, trialStepPoint, getEntry, i, trialStepPoint, getEntry, j, IfStatement(if), i, j, ExpressionStatement(), temp, HALF, ExpressionStatement(), vquad, modelSecondDerivativesValues, getEntry, ih, temp, ExpressionStatement(), ih, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), final, double, d1, work2, getEntry, k, VariableDeclarationStatement(), final, double, d2, d1, d1, ExpressionStatement(), vquad, HALF, modelSecondDerivativesParameters, getEntry, k, d2, VariableDeclarationStatement(), final, double, diff, f, fopt, vquad, ExpressionStatement(), diffc, diffb, ExpressionStatement(), diffb, diffa, ExpressionStatement(), diffa, FastMath, abs, diff, IfStatement(if), dnorm, rho, ExpressionStatement(), nfsav, getEvaluations, IfStatement(if), ntrits, 0, IfStatement(if), vquad, ZERO, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.TRUST_REGION_STEP_FAILED, vquad, ExpressionStatement(), ratio, f, fopt, vquad, VariableDeclarationStatement(), final, double, hDelta, HALF, delta, IfStatement(if), ratio, ONE_OVER_TEN, ExpressionStatement(), delta, FastMath, min, hDelta, dnorm, IfStatement(if), ratio, .7, ExpressionStatement(), delta, FastMath, max, hDelta, dnorm, ExpressionStatement(), delta, FastMath, max, hDelta, 2, dnorm, IfStatement(if), delta, rho, 1.5, ExpressionStatement(), delta, rho, IfStatement(if), f, fopt, VariableDeclarationStatement(), final, int, ksav, knew, VariableDeclarationStatement(), final, double, densav, denom, VariableDeclarationStatement(), final, double, delsq, delta, delta, ExpressionStatement(), scaden, ZERO, ExpressionStatement(), biglsq, ZERO, ExpressionStatement(), knew, 0, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, hdiag, ZERO, ForStatement(for), int, m, 0, m, nptm, m, VariableDeclarationStatement(), final, double, d1, zMatrix, getEntry, k, m, ExpressionStatement(), hdiag, d1, d1, VariableDeclarationStatement(), final, double, d1, lagrangeValuesAtNewPoint, getEntry, k, VariableDeclarationStatement(), final, double, den, beta, hdiag, d1, d1, ExpressionStatement(), distsq, ZERO, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), final, double, d2, interpolationPoints, getEntry, k, j, newPoint, getEntry, j, ExpressionStatement(), distsq, d2, d2, VariableDeclarationStatement(), final, double, d3, distsq, delsq, VariableDeclarationStatement(), final, double, temp, FastMath, max, ONE, d3, d3, IfStatement(if), temp, den, scaden, ExpressionStatement(), scaden, temp, den, ExpressionStatement(), knew, k, ExpressionStatement(), denom, den, VariableDeclarationStatement(), final, double, d4, lagrangeValuesAtNewPoint, getEntry, k, VariableDeclarationStatement(), final, double, d5, temp, d4, d4, ExpressionStatement(), biglsq, FastMath, max, biglsq, d5, IfStatement(if), scaden, HALF, biglsq, ExpressionStatement(), knew, ksav, ExpressionStatement(), denom, densav, ExpressionStatement(), update, beta, denom, knew, ExpressionStatement(), ih, 0, VariableDeclarationStatement(), final, double, pqold, modelSecondDerivativesParameters, getEntry, knew, ExpressionStatement(), modelSecondDerivativesParameters, setEntry, knew, ZERO, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, temp, pqold, interpolationPoints, getEntry, knew, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), modelSecondDerivativesValues, setEntry, ih, modelSecondDerivativesValues, getEntry, ih, temp, interpolationPoints, getEntry, knew, j, ExpressionStatement(), ih, ForStatement(for), int, m, 0, m, nptm, m, VariableDeclarationStatement(), final, double, temp, diff, zMatrix, getEntry, knew, m, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), modelSecondDerivativesParameters, setEntry, k, modelSecondDerivativesParameters, getEntry, k, temp, zMatrix, getEntry, k, m, ExpressionStatement(), fAtInterpolationPoints, setEntry, knew, f, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), interpolationPoints, setEntry, knew, i, newPoint, getEntry, i, ExpressionStatement(), work1, setEntry, i, bMatrix, getEntry, knew, i, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, suma, ZERO, ForStatement(for), int, m, 0, m, nptm, m, ExpressionStatement(), suma, zMatrix, getEntry, knew, m, zMatrix, getEntry, k, m, VariableDeclarationStatement(), double, sumb, ZERO, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), sumb, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, VariableDeclarationStatement(), final, double, temp, suma, sumb, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), work1, setEntry, i, work1, getEntry, i, temp, interpolationPoints, getEntry, k, i, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, i, gradientAtTrustRegionCenter, getEntry, i, diff, work1, getEntry, i, IfStatement(if), f, fopt, ExpressionStatement(), trustRegionCenterInterpolationPointIndex, knew, ExpressionStatement(), xoptsq, ZERO, ExpressionStatement(), ih, 0, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), trustRegionCenterOffset, setEntry, j, newPoint, getEntry, j, VariableDeclarationStatement(), final, double, d1, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), xoptsq, d1, d1, ForStatement(for), int, i, 0, i, j, i, IfStatement(if), i, j, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, j, gradientAtTrustRegionCenter, getEntry, j, modelSecondDerivativesValues, getEntry, ih, trialStepPoint, getEntry, i, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, i, gradientAtTrustRegionCenter, getEntry, i, modelSecondDerivativesValues, getEntry, ih, trialStepPoint, getEntry, j, ExpressionStatement(), ih, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, temp, ZERO, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), temp, interpolationPoints, getEntry, k, j, trialStepPoint, getEntry, j, ExpressionStatement(), temp, modelSecondDerivativesParameters, getEntry, k, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, i, gradientAtTrustRegionCenter, getEntry, i, temp, interpolationPoints, getEntry, k, i, IfStatement(if), ntrits, 0, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, k, fAtInterpolationPoints, getEntry, k, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, ExpressionStatement(), work3, setEntry, k, ZERO, ForStatement(for), int, j, 0, j, nptm, j, VariableDeclarationStatement(), double, sum, ZERO, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), sum, zMatrix, getEntry, k, j, lagrangeValuesAtNewPoint, getEntry, k, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), work3, setEntry, k, work3, getEntry, k, sum, zMatrix, getEntry, k, j, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, sum, ZERO, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), sum, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), work2, setEntry, k, work3, getEntry, k, ExpressionStatement(), work3, setEntry, k, sum, work3, getEntry, k, VariableDeclarationStatement(), double, gqsq, ZERO, VariableDeclarationStatement(), double, gisq, ZERO, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), double, sum, ZERO, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), sum, bMatrix, getEntry, k, i, lagrangeValuesAtNewPoint, getEntry, k, interpolationPoints, getEntry, k, i, work3, getEntry, k, IfStatement(if), trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, VariableDeclarationStatement(), final, double, d1, FastMath, min, ZERO, gradientAtTrustRegionCenter, getEntry, i, ExpressionStatement(), gqsq, d1, d1, VariableDeclarationStatement(), final, double, d2, FastMath, min, ZERO, sum, ExpressionStatement(), gisq, d2, d2, IfStatement(if), trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, VariableDeclarationStatement(), final, double, d1, FastMath, max, ZERO, gradientAtTrustRegionCenter, getEntry, i, ExpressionStatement(), gqsq, d1, d1, VariableDeclarationStatement(), final, double, d2, FastMath, max, ZERO, sum, ExpressionStatement(), gisq, d2, d2, VariableDeclarationStatement(), final, double, d1, gradientAtTrustRegionCenter, getEntry, i, ExpressionStatement(), gqsq, d1, d1, ExpressionStatement(), gisq, sum, sum, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, npt, i, sum, ExpressionStatement(), itest, IfStatement(if), gqsq, TEN, gisq, ExpressionStatement(), itest, 0, IfStatement(if), itest, 3, ForStatement(for), int, i, 0, max, FastMath, max, npt, nh, i, max, i, IfStatement(if), i, n, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, i, lagrangeValuesAtNewPoint, getEntry, npt, i, IfStatement(if), i, npt, ExpressionStatement(), modelSecondDerivativesParameters, setEntry, i, work2, getEntry, i, IfStatement(if), i, nh, ExpressionStatement(), modelSecondDerivativesValues, setEntry, i, ZERO, ExpressionStatement(), itest, 0, IfStatement(if), ntrits, 0, ExpressionStatement(), state, 60, BreakStatement(break), IfStatement(if), f, fopt, ONE_OVER_TEN, vquad, ExpressionStatement(), state, 60, BreakStatement(break), VariableDeclarationStatement(), final, double, d1, TWO, delta, VariableDeclarationStatement(), final, double, d2, TEN, rho, ExpressionStatement(), distsq, FastMath, max, d1, d1, d2, d2, SwitchCase(case), 650, ExpressionStatement(), printState, 650, ExpressionStatement(), knew, 1, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, sum, ZERO, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), final, double, d1, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), sum, d1, d1, IfStatement(if), sum, distsq, ExpressionStatement(), knew, k, ExpressionStatement(), distsq, sum, IfStatement(if), knew, 0, VariableDeclarationStatement(), final, double, dist, FastMath, sqrt, distsq, IfStatement(if), ntrits, 1, ExpressionStatement(), delta, FastMath, min, ONE_OVER_TEN, delta, HALF, dist, IfStatement(if), delta, rho, 1.5, ExpressionStatement(), delta, rho, ExpressionStatement(), ntrits, 0, VariableDeclarationStatement(), final, double, d1, FastMath, min, ONE_OVER_TEN, dist, delta, ExpressionStatement(), adelt, FastMath, max, d1, rho, ExpressionStatement(), dsq, adelt, adelt, ExpressionStatement(), state, 90, BreakStatement(break), IfStatement(if), ntrits, 1, ExpressionStatement(), state, 680, BreakStatement(break), IfStatement(if), ratio, ZERO, ExpressionStatement(), state, 60, BreakStatement(break), IfStatement(if), FastMath, max, delta, dnorm, rho, ExpressionStatement(), state, 60, BreakStatement(break), SwitchCase(case), 680, ExpressionStatement(), printState, 680, IfStatement(if), rho, stoppingTrustRegionRadius, ExpressionStatement(), delta, HALF, rho, ExpressionStatement(), ratio, rho, stoppingTrustRegionRadius, IfStatement(if), ratio, SIXTEEN, ExpressionStatement(), rho, stoppingTrustRegionRadius, IfStatement(if), ratio, TWO_HUNDRED_FIFTY, ExpressionStatement(), rho, FastMath, sqrt, ratio, stoppingTrustRegionRadius, ExpressionStatement(), rho, ONE_OVER_TEN, ExpressionStatement(), delta, FastMath, max, delta, rho, ExpressionStatement(), ntrits, 0, ExpressionStatement(), nfsav, getEvaluations, ExpressionStatement(), state, 60, BreakStatement(break), IfStatement(if), ntrits, 1, ExpressionStatement(), state, 360, BreakStatement(break), SwitchCase(case), 720, ExpressionStatement(), printState, 720, IfStatement(if), fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, fsave, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, d3, lowerBound, i, VariableDeclarationStatement(), final, double, d4, originShift, getEntry, i, trustRegionCenterOffset, getEntry, i, VariableDeclarationStatement(), final, double, d1, FastMath, max, d3, d4, VariableDeclarationStatement(), final, double, d2, upperBound, i, ExpressionStatement(), currentBest, setEntry, i, FastMath, min, d1, d2, IfStatement(if), trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, ExpressionStatement(), currentBest, setEntry, i, lowerBound, i, IfStatement(if), trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, ExpressionStatement(), currentBest, setEntry, i, upperBound, i, ExpressionStatement(), f, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, ReturnStatement(return), f, SwitchCase(default), ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.SIMPLE_MESSAGE, "bobyqb"]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:altmov:int+double#[ExpressionStatement(), printMethod, VariableDeclarationStatement(), final, int, n, currentBest, getDimension, VariableDeclarationStatement(), final, int, npt, numberOfInterpolationPoints, VariableDeclarationStatement(), final, ArrayRealVector, glag, new, ArrayRealVector, n, VariableDeclarationStatement(), final, ArrayRealVector, hcol, new, ArrayRealVector, npt, VariableDeclarationStatement(), final, ArrayRealVector, work1, new, ArrayRealVector, n, VariableDeclarationStatement(), final, ArrayRealVector, work2, new, ArrayRealVector, n, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), hcol, setEntry, k, ZERO, ForStatement(for), int, j, 0, max, npt, n, 1, j, max, j, VariableDeclarationStatement(), final, double, tmp, zMatrix, getEntry, knew, j, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), hcol, setEntry, k, hcol, getEntry, k, tmp, zMatrix, getEntry, k, j, VariableDeclarationStatement(), final, double, alpha, hcol, getEntry, knew, VariableDeclarationStatement(), final, double, ha, HALF, alpha, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), glag, setEntry, i, bMatrix, getEntry, knew, i, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, tmp, ZERO, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), tmp, interpolationPoints, getEntry, k, j, trustRegionCenterOffset, getEntry, j, ExpressionStatement(), tmp, hcol, getEntry, k, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), glag, setEntry, i, glag, getEntry, i, tmp, interpolationPoints, getEntry, k, i, VariableDeclarationStatement(), double, presav, ZERO, VariableDeclarationStatement(), double, step, Double.NaN, VariableDeclarationStatement(), int, ksav, 0, VariableDeclarationStatement(), int, ibdsav, 0, VariableDeclarationStatement(), double, stpsav, 0, ForStatement(for), int, k, 0, k, npt, k, IfStatement(if), k, trustRegionCenterInterpolationPointIndex, ContinueStatement(continue), VariableDeclarationStatement(), double, dderiv, ZERO, VariableDeclarationStatement(), double, distsq, ZERO, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, tmp, interpolationPoints, getEntry, k, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), dderiv, glag, getEntry, i, tmp, ExpressionStatement(), distsq, tmp, tmp, VariableDeclarationStatement(), double, subd, adelt, FastMath, sqrt, distsq, VariableDeclarationStatement(), double, slbd, subd, VariableDeclarationStatement(), int, ilbd, 0, VariableDeclarationStatement(), int, iubd, 0, VariableDeclarationStatement(), final, double, sumin, FastMath, min, ONE, subd, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, tmp, interpolationPoints, getEntry, k, i, trustRegionCenterOffset, getEntry, i, IfStatement(if), tmp, ZERO, IfStatement(if), slbd, tmp, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), slbd, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, ExpressionStatement(), ilbd, i, 1, IfStatement(if), subd, tmp, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), subd, FastMath, max, sumin, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, ExpressionStatement(), iubd, i, 1, IfStatement(if), tmp, ZERO, IfStatement(if), slbd, tmp, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), slbd, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, ExpressionStatement(), ilbd, i, 1, IfStatement(if), subd, tmp, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), subd, FastMath, max, sumin, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, tmp, ExpressionStatement(), iubd, i, 1, ExpressionStatement(), step, slbd, VariableDeclarationStatement(), int, isbd, ilbd, VariableDeclarationStatement(), double, vlag, Double.NaN, IfStatement(if), k, knew, VariableDeclarationStatement(), final, double, diff, dderiv, ONE, ExpressionStatement(), vlag, slbd, dderiv, slbd, diff, VariableDeclarationStatement(), final, double, d1, subd, dderiv, subd, diff, IfStatement(if), FastMath, abs, d1, FastMath, abs, vlag, ExpressionStatement(), step, subd, ExpressionStatement(), vlag, d1, ExpressionStatement(), isbd, iubd, VariableDeclarationStatement(), final, double, d2, HALF, dderiv, VariableDeclarationStatement(), final, double, d3, d2, diff, slbd, VariableDeclarationStatement(), final, double, d4, d2, diff, subd, IfStatement(if), d3, d4, ZERO, VariableDeclarationStatement(), final, double, d5, d2, d2, diff, IfStatement(if), FastMath, abs, d5, FastMath, abs, vlag, ExpressionStatement(), step, d2, diff, ExpressionStatement(), vlag, d5, ExpressionStatement(), isbd, 0, ExpressionStatement(), vlag, slbd, ONE, slbd, VariableDeclarationStatement(), final, double, tmp, subd, ONE, subd, IfStatement(if), FastMath, abs, tmp, FastMath, abs, vlag, ExpressionStatement(), step, subd, ExpressionStatement(), vlag, tmp, ExpressionStatement(), isbd, iubd, IfStatement(if), subd, HALF, FastMath, abs, vlag, ONE_OVER_FOUR, ExpressionStatement(), step, HALF, ExpressionStatement(), vlag, ONE_OVER_FOUR, ExpressionStatement(), isbd, 0, ExpressionStatement(), vlag, dderiv, VariableDeclarationStatement(), final, double, tmp, step, ONE, step, distsq, VariableDeclarationStatement(), final, double, predsq, vlag, vlag, vlag, vlag, ha, tmp, tmp, IfStatement(if), predsq, presav, ExpressionStatement(), presav, predsq, ExpressionStatement(), ksav, k, ExpressionStatement(), stpsav, step, ExpressionStatement(), ibdsav, isbd, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, tmp, trustRegionCenterOffset, getEntry, i, stpsav, interpolationPoints, getEntry, ksav, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), newPoint, setEntry, i, FastMath, max, lowerDifference, getEntry, i, FastMath, min, upperDifference, getEntry, i, tmp, IfStatement(if), ibdsav, 0, ExpressionStatement(), newPoint, setEntry, ibdsav, 1, lowerDifference, getEntry, ibdsav, 1, IfStatement(if), ibdsav, 0, ExpressionStatement(), newPoint, setEntry, ibdsav, 1, upperDifference, getEntry, ibdsav, 1, VariableDeclarationStatement(), final, double, bigstp, adelt, adelt, VariableDeclarationStatement(), int, iflag, 0, VariableDeclarationStatement(), double, cauchy, Double.NaN, VariableDeclarationStatement(), double, csave, ZERO, WhileStatement(while), true, VariableDeclarationStatement(), double, wfixsq, ZERO, VariableDeclarationStatement(), double, ggfree, ZERO, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, glagValue, glag, getEntry, i, ExpressionStatement(), work1, setEntry, i, ZERO, IfStatement(if), FastMath, min, trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, glagValue, ZERO, FastMath, max, trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, glagValue, ZERO, ExpressionStatement(), work1, setEntry, i, bigstp, ExpressionStatement(), ggfree, glagValue, glagValue, IfStatement(if), ggfree, ZERO, ReturnStatement(return), double, alpha, ZERO, VariableDeclarationStatement(), final, double, tmp1, adelt, adelt, wfixsq, IfStatement(if), tmp1, ZERO, ExpressionStatement(), step, FastMath, sqrt, tmp1, ggfree, ExpressionStatement(), ggfree, ZERO, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), work1, getEntry, i, bigstp, VariableDeclarationStatement(), final, double, tmp2, trustRegionCenterOffset, getEntry, i, step, glag, getEntry, i, IfStatement(if), tmp2, lowerDifference, getEntry, i, ExpressionStatement(), work1, setEntry, i, lowerDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, VariableDeclarationStatement(), final, double, d1, work1, getEntry, i, ExpressionStatement(), wfixsq, d1, d1, IfStatement(if), tmp2, upperDifference, getEntry, i, ExpressionStatement(), work1, setEntry, i, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, VariableDeclarationStatement(), final, double, d1, work1, getEntry, i, ExpressionStatement(), wfixsq, d1, d1, VariableDeclarationStatement(), final, double, d1, glag, getEntry, i, ExpressionStatement(), ggfree, d1, d1, VariableDeclarationStatement(), double, gw, ZERO, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, glagValue, glag, getEntry, i, IfStatement(if), work1, getEntry, i, bigstp, ExpressionStatement(), work1, setEntry, i, step, glagValue, VariableDeclarationStatement(), final, double, min, FastMath, min, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, work1, getEntry, i, ExpressionStatement(), alternativeNewPoint, setEntry, i, FastMath, max, lowerDifference, getEntry, i, min, IfStatement(if), work1, getEntry, i, ZERO, ExpressionStatement(), alternativeNewPoint, setEntry, i, trustRegionCenterOffset, getEntry, i, IfStatement(if), glagValue, ZERO, ExpressionStatement(), alternativeNewPoint, setEntry, i, lowerDifference, getEntry, i, ExpressionStatement(), alternativeNewPoint, setEntry, i, upperDifference, getEntry, i, ExpressionStatement(), gw, glagValue, work1, getEntry, i, VariableDeclarationStatement(), double, curv, ZERO, ForStatement(for), int, k, 0, k, npt, k, VariableDeclarationStatement(), double, tmp, ZERO, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), tmp, interpolationPoints, getEntry, k, j, work1, getEntry, j, ExpressionStatement(), curv, hcol, getEntry, k, tmp, tmp, IfStatement(if), iflag, 1, ExpressionStatement(), curv, curv, IfStatement(if), curv, gw, curv, gw, ONE, FastMath, sqrt, TWO, VariableDeclarationStatement(), final, double, scale, gw, curv, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, tmp, trustRegionCenterOffset, getEntry, i, scale, work1, getEntry, i, ExpressionStatement(), alternativeNewPoint, setEntry, i, FastMath, max, lowerDifference, getEntry, i, FastMath, min, upperDifference, getEntry, i, tmp, VariableDeclarationStatement(), final, double, d1, HALF, gw, scale, ExpressionStatement(), cauchy, d1, d1, VariableDeclarationStatement(), final, double, d1, gw, HALF, curv, ExpressionStatement(), cauchy, d1, d1, IfStatement(if), iflag, 0, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), glag, setEntry, i, glag, getEntry, i, ExpressionStatement(), work2, setEntry, i, alternativeNewPoint, getEntry, i, ExpressionStatement(), csave, cauchy, ExpressionStatement(), iflag, 1, BreakStatement(break), IfStatement(if), csave, cauchy, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), alternativeNewPoint, setEntry, i, work2, getEntry, i, ExpressionStatement(), cauchy, csave, ReturnStatement(return), double, alpha, cauchy]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:prelim:double[]+double[]#[ExpressionStatement(), printMethod, VariableDeclarationStatement(), final, int, n, currentBest, getDimension, VariableDeclarationStatement(), final, int, npt, numberOfInterpolationPoints, VariableDeclarationStatement(), final, int, ndim, bMatrix, getRowDimension, VariableDeclarationStatement(), final, double, rhosq, initialTrustRegionRadius, initialTrustRegionRadius, VariableDeclarationStatement(), final, double, recip, 1d, rhosq, VariableDeclarationStatement(), final, int, np, n, 1, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), originShift, setEntry, j, currentBest, getEntry, j, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), interpolationPoints, setEntry, k, j, ZERO, ForStatement(for), int, i, 0, i, ndim, i, ExpressionStatement(), bMatrix, setEntry, i, j, ZERO, ForStatement(for), int, i, 0, max, n, np, 2, i, max, i, ExpressionStatement(), modelSecondDerivativesValues, setEntry, i, ZERO, ForStatement(for), int, k, 0, k, npt, k, ExpressionStatement(), modelSecondDerivativesParameters, setEntry, k, ZERO, ForStatement(for), int, j, 0, max, npt, np, j, max, j, ExpressionStatement(), zMatrix, setEntry, k, j, ZERO, VariableDeclarationStatement(), int, ipt, 0, VariableDeclarationStatement(), int, jpt, 0, VariableDeclarationStatement(), double, fbeg, Double.NaN, DoStatement(do), VariableDeclarationStatement(), final, int, nfm, getEvaluations, VariableDeclarationStatement(), final, int, nfx, nfm, n, VariableDeclarationStatement(), final, int, nfmm, nfm, 1, VariableDeclarationStatement(), final, int, nfxm, nfx, 1, VariableDeclarationStatement(), double, stepa, 0, VariableDeclarationStatement(), double, stepb, 0, IfStatement(if), nfm, 2, n, IfStatement(if), nfm, 1, nfm, n, ExpressionStatement(), stepa, initialTrustRegionRadius, IfStatement(if), upperDifference, getEntry, nfmm, ZERO, ExpressionStatement(), stepa, stepa, ExpressionStatement(), interpolationPoints, setEntry, nfm, nfmm, stepa, IfStatement(if), nfm, n, ExpressionStatement(), stepa, interpolationPoints, getEntry, nfx, nfxm, ExpressionStatement(), stepb, initialTrustRegionRadius, IfStatement(if), lowerDifference, getEntry, nfxm, ZERO, ExpressionStatement(), stepb, FastMath, min, TWO, initialTrustRegionRadius, upperDifference, getEntry, nfxm, IfStatement(if), upperDifference, getEntry, nfxm, ZERO, ExpressionStatement(), stepb, FastMath, max, TWO, initialTrustRegionRadius, lowerDifference, getEntry, nfxm, ExpressionStatement(), interpolationPoints, setEntry, nfm, nfxm, stepb, VariableDeclarationStatement(), final, int, tmp1, nfm, np, n, ExpressionStatement(), jpt, nfm, tmp1, n, n, ExpressionStatement(), ipt, jpt, tmp1, IfStatement(if), ipt, n, VariableDeclarationStatement(), final, int, tmp2, jpt, ExpressionStatement(), jpt, ipt, n, ExpressionStatement(), ipt, tmp2, VariableDeclarationStatement(), final, int, iptMinus1, ipt, 1, VariableDeclarationStatement(), final, int, jptMinus1, jpt, 1, ExpressionStatement(), interpolationPoints, setEntry, nfm, iptMinus1, interpolationPoints, getEntry, ipt, iptMinus1, ExpressionStatement(), interpolationPoints, setEntry, nfm, jptMinus1, interpolationPoints, getEntry, jpt, jptMinus1, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), currentBest, setEntry, j, FastMath, min, FastMath, max, lowerBound, j, originShift, getEntry, j, interpolationPoints, getEntry, nfm, j, upperBound, j, IfStatement(if), interpolationPoints, getEntry, nfm, j, lowerDifference, getEntry, j, ExpressionStatement(), currentBest, setEntry, j, lowerBound, j, IfStatement(if), interpolationPoints, getEntry, nfm, j, upperDifference, getEntry, j, ExpressionStatement(), currentBest, setEntry, j, upperBound, j, VariableDeclarationStatement(), final, double, objectiveValue, computeObjectiveValue, currentBest, toArray, VariableDeclarationStatement(), final, double, f, isMinimize, objectiveValue, objectiveValue, VariableDeclarationStatement(), final, int, numEval, getEvaluations, ExpressionStatement(), fAtInterpolationPoints, setEntry, nfm, f, IfStatement(if), numEval, 1, ExpressionStatement(), fbeg, f, ExpressionStatement(), trustRegionCenterInterpolationPointIndex, 0, IfStatement(if), f, fAtInterpolationPoints, getEntry, trustRegionCenterInterpolationPointIndex, ExpressionStatement(), trustRegionCenterInterpolationPointIndex, nfm, IfStatement(if), numEval, 2, n, 1, IfStatement(if), numEval, 2, numEval, n, 1, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, nfmm, f, fbeg, stepa, IfStatement(if), npt, numEval, n, VariableDeclarationStatement(), final, double, oneOverStepA, ONE, stepa, ExpressionStatement(), bMatrix, setEntry, 0, nfmm, oneOverStepA, ExpressionStatement(), bMatrix, setEntry, nfm, nfmm, oneOverStepA, ExpressionStatement(), bMatrix, setEntry, npt, nfmm, nfmm, HALF, rhosq, IfStatement(if), numEval, n, 2, VariableDeclarationStatement(), final, int, ih, nfx, nfx, 1, 2, 1, VariableDeclarationStatement(), final, double, tmp, f, fbeg, stepb, VariableDeclarationStatement(), final, double, diff, stepb, stepa, ExpressionStatement(), modelSecondDerivativesValues, setEntry, ih, TWO, tmp, gradientAtTrustRegionCenter, getEntry, nfxm, diff, ExpressionStatement(), gradientAtTrustRegionCenter, setEntry, nfxm, gradientAtTrustRegionCenter, getEntry, nfxm, stepb, tmp, stepa, diff, IfStatement(if), stepa, stepb, ZERO, f, fAtInterpolationPoints, getEntry, nfm, n, ExpressionStatement(), fAtInterpolationPoints, setEntry, nfm, fAtInterpolationPoints, getEntry, nfm, n, ExpressionStatement(), fAtInterpolationPoints, setEntry, nfm, n, f, IfStatement(if), trustRegionCenterInterpolationPointIndex, nfm, ExpressionStatement(), trustRegionCenterInterpolationPointIndex, nfm, n, ExpressionStatement(), interpolationPoints, setEntry, nfm, n, nfxm, stepb, ExpressionStatement(), interpolationPoints, setEntry, nfm, nfxm, stepa, ExpressionStatement(), bMatrix, setEntry, 0, nfxm, stepa, stepb, stepa, stepb, ExpressionStatement(), bMatrix, setEntry, nfm, nfxm, HALF, interpolationPoints, getEntry, nfm, n, nfxm, ExpressionStatement(), bMatrix, setEntry, nfm, n, nfxm, bMatrix, getEntry, 0, nfxm, bMatrix, getEntry, nfm, nfxm, ExpressionStatement(), zMatrix, setEntry, 0, nfxm, FastMath, sqrt, TWO, stepa, stepb, ExpressionStatement(), zMatrix, setEntry, nfm, nfxm, FastMath, sqrt, HALF, rhosq, ExpressionStatement(), zMatrix, setEntry, nfm, n, nfxm, zMatrix, getEntry, 0, nfxm, zMatrix, getEntry, nfm, nfxm, ExpressionStatement(), zMatrix, setEntry, 0, nfxm, recip, ExpressionStatement(), zMatrix, setEntry, nfm, nfxm, recip, ExpressionStatement(), zMatrix, setEntry, ipt, nfxm, recip, ExpressionStatement(), zMatrix, setEntry, jpt, nfxm, recip, VariableDeclarationStatement(), final, int, ih, ipt, ipt, 1, 2, jpt, 1, VariableDeclarationStatement(), final, double, tmp, interpolationPoints, getEntry, nfm, ipt, 1, interpolationPoints, getEntry, nfm, jpt, 1, ExpressionStatement(), modelSecondDerivativesValues, setEntry, ih, fbeg, fAtInterpolationPoints, getEntry, ipt, fAtInterpolationPoints, getEntry, jpt, f, tmp, getEvaluations, npt]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:trsbox:double+ArrayRealVector+ArrayRealVector+ArrayRealVector+ArrayRealVector+ArrayRealVector#[ExpressionStatement(), printMethod, VariableDeclarationStatement(), final, int, n, currentBest, getDimension, VariableDeclarationStatement(), final, int, npt, numberOfInterpolationPoints, VariableDeclarationStatement(), double, dsq, Double.NaN, VariableDeclarationStatement(), double, crvmin, Double.NaN, VariableDeclarationStatement(), double, ds, VariableDeclarationStatement(), int, iu, VariableDeclarationStatement(), double, dhd, dhs, cth, shs, sth, ssq, beta, 0, sdec, blen, VariableDeclarationStatement(), int, iact, 1, VariableDeclarationStatement(), int, nact, 0, VariableDeclarationStatement(), double, angt, 0, qred, VariableDeclarationStatement(), int, isav, VariableDeclarationStatement(), double, temp, 0, xsav, 0, xsum, 0, angbd, 0, dredg, 0, sredg, 0, VariableDeclarationStatement(), int, iterc, VariableDeclarationStatement(), double, resid, 0, delsq, 0, ggsav, 0, tempa, 0, tempb, 0, redmax, 0, dredsq, 0, redsav, 0, gredsq, 0, rednew, 0, VariableDeclarationStatement(), int, itcsav, 0, VariableDeclarationStatement(), double, rdprev, 0, rdnext, 0, stplen, 0, stepsq, 0, VariableDeclarationStatement(), int, itermax, 0, ExpressionStatement(), iterc, 0, ExpressionStatement(), nact, 0, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), xbdi, setEntry, i, ZERO, IfStatement(if), trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, IfStatement(if), gradientAtTrustRegionCenter, getEntry, i, ZERO, ExpressionStatement(), xbdi, setEntry, i, MINUS_ONE, IfStatement(if), trustRegionCenterOffset, getEntry, i, upperDifference, getEntry, i, gradientAtTrustRegionCenter, getEntry, i, ZERO, ExpressionStatement(), xbdi, setEntry, i, ONE, IfStatement(if), xbdi, getEntry, i, ZERO, ExpressionStatement(), nact, ExpressionStatement(), trialStepPoint, setEntry, i, ZERO, ExpressionStatement(), gnew, setEntry, i, gradientAtTrustRegionCenter, getEntry, i, ExpressionStatement(), delsq, delta, delta, ExpressionStatement(), qred, ZERO, ExpressionStatement(), crvmin, MINUS_ONE, VariableDeclarationStatement(), int, state, 20, ForStatement(for), SwitchStatement(switch), state, SwitchCase(case), 20, ExpressionStatement(), printState, 20, ExpressionStatement(), beta, ZERO, SwitchCase(case), 30, ExpressionStatement(), printState, 30, ExpressionStatement(), stepsq, ZERO, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), xbdi, getEntry, i, ZERO, ExpressionStatement(), s, setEntry, i, ZERO, IfStatement(if), beta, ZERO, ExpressionStatement(), s, setEntry, i, gnew, getEntry, i, ExpressionStatement(), s, setEntry, i, beta, s, getEntry, i, gnew, getEntry, i, VariableDeclarationStatement(), final, double, d1, s, getEntry, i, ExpressionStatement(), stepsq, d1, d1, IfStatement(if), stepsq, ZERO, ExpressionStatement(), state, 190, BreakStatement(break), IfStatement(if), beta, ZERO, ExpressionStatement(), gredsq, stepsq, ExpressionStatement(), itermax, iterc, n, nact, IfStatement(if), gredsq, delsq, qred, 1e-4, qred, ExpressionStatement(), state, 190, BreakStatement(break), ExpressionStatement(), state, 210, BreakStatement(break), SwitchCase(case), 50, ExpressionStatement(), printState, 50, ExpressionStatement(), resid, delsq, ExpressionStatement(), ds, ZERO, ExpressionStatement(), shs, ZERO, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), xbdi, getEntry, i, ZERO, VariableDeclarationStatement(), final, double, d1, trialStepPoint, getEntry, i, ExpressionStatement(), resid, d1, d1, ExpressionStatement(), ds, s, getEntry, i, trialStepPoint, getEntry, i, ExpressionStatement(), shs, s, getEntry, i, hs, getEntry, i, IfStatement(if), resid, ZERO, ExpressionStatement(), state, 90, BreakStatement(break), ExpressionStatement(), temp, FastMath, sqrt, stepsq, resid, ds, ds, IfStatement(if), ds, ZERO, ExpressionStatement(), blen, temp, ds, stepsq, ExpressionStatement(), blen, resid, temp, ds, ExpressionStatement(), stplen, blen, IfStatement(if), shs, ZERO, ExpressionStatement(), stplen, FastMath, min, blen, gredsq, shs, ExpressionStatement(), iact, 1, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), s, getEntry, i, ZERO, ExpressionStatement(), xsum, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, IfStatement(if), s, getEntry, i, ZERO, ExpressionStatement(), temp, upperDifference, getEntry, i, xsum, s, getEntry, i, ExpressionStatement(), temp, lowerDifference, getEntry, i, xsum, s, getEntry, i, IfStatement(if), temp, stplen, ExpressionStatement(), stplen, temp, ExpressionStatement(), iact, i, ExpressionStatement(), sdec, ZERO, IfStatement(if), stplen, ZERO, ExpressionStatement(), iterc, ExpressionStatement(), temp, shs, stepsq, IfStatement(if), iact, 1, temp, ZERO, ExpressionStatement(), crvmin, FastMath, min, crvmin, temp, IfStatement(if), crvmin, MINUS_ONE, ExpressionStatement(), crvmin, temp, ExpressionStatement(), ggsav, gredsq, ExpressionStatement(), gredsq, ZERO, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), gnew, setEntry, i, gnew, getEntry, i, stplen, hs, getEntry, i, IfStatement(if), xbdi, getEntry, i, ZERO, VariableDeclarationStatement(), final, double, d1, gnew, getEntry, i, ExpressionStatement(), gredsq, d1, d1, ExpressionStatement(), trialStepPoint, setEntry, i, trialStepPoint, getEntry, i, stplen, s, getEntry, i, VariableDeclarationStatement(), final, double, d1, stplen, ggsav, HALF, stplen, shs, ExpressionStatement(), sdec, FastMath, max, d1, ZERO, ExpressionStatement(), qred, sdec, IfStatement(if), iact, 0, ExpressionStatement(), nact, ExpressionStatement(), xbdi, setEntry, iact, ONE, IfStatement(if), s, getEntry, iact, ZERO, ExpressionStatement(), xbdi, setEntry, iact, MINUS_ONE, VariableDeclarationStatement(), final, double, d1, trialStepPoint, getEntry, iact, ExpressionStatement(), delsq, d1, d1, IfStatement(if), delsq, ZERO, ExpressionStatement(), state, 190, BreakStatement(break), ExpressionStatement(), state, 20, BreakStatement(break), IfStatement(if), stplen, blen, IfStatement(if), iterc, itermax, ExpressionStatement(), state, 190, BreakStatement(break), IfStatement(if), sdec, qred, .01, ExpressionStatement(), state, 190, BreakStatement(break), ExpressionStatement(), beta, gredsq, ggsav, ExpressionStatement(), state, 30, BreakStatement(break), SwitchCase(case), 90, ExpressionStatement(), printState, 90, ExpressionStatement(), crvmin, ZERO, SwitchCase(case), 100, ExpressionStatement(), printState, 100, IfStatement(if), nact, n, 1, ExpressionStatement(), state, 190, BreakStatement(break), ExpressionStatement(), dredsq, ZERO, ExpressionStatement(), dredg, ZERO, ExpressionStatement(), gredsq, ZERO, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), xbdi, getEntry, i, ZERO, VariableDeclarationStatement(), double, d1, trialStepPoint, getEntry, i, ExpressionStatement(), dredsq, d1, d1, ExpressionStatement(), dredg, trialStepPoint, getEntry, i, gnew, getEntry, i, ExpressionStatement(), d1, gnew, getEntry, i, ExpressionStatement(), gredsq, d1, d1, ExpressionStatement(), s, setEntry, i, trialStepPoint, getEntry, i, ExpressionStatement(), s, setEntry, i, ZERO, ExpressionStatement(), itcsav, iterc, ExpressionStatement(), state, 210, BreakStatement(break), SwitchCase(case), 120, ExpressionStatement(), printState, 120, ExpressionStatement(), iterc, ExpressionStatement(), temp, gredsq, dredsq, dredg, dredg, IfStatement(if), temp, qred, 1e-4, qred, ExpressionStatement(), state, 190, BreakStatement(break), ExpressionStatement(), temp, FastMath, sqrt, temp, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), xbdi, getEntry, i, ZERO, ExpressionStatement(), s, setEntry, i, dredg, trialStepPoint, getEntry, i, dredsq, gnew, getEntry, i, temp, ExpressionStatement(), s, setEntry, i, ZERO, ExpressionStatement(), sredg, temp, ExpressionStatement(), angbd, ONE, ExpressionStatement(), iact, 1, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), xbdi, getEntry, i, ZERO, ExpressionStatement(), tempa, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, lowerDifference, getEntry, i, ExpressionStatement(), tempb, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, IfStatement(if), tempa, ZERO, ExpressionStatement(), nact, ExpressionStatement(), xbdi, setEntry, i, MINUS_ONE, ExpressionStatement(), state, 100, BreakStatement(break), IfStatement(if), tempb, ZERO, ExpressionStatement(), nact, ExpressionStatement(), xbdi, setEntry, i, ONE, ExpressionStatement(), state, 100, BreakStatement(break), VariableDeclarationStatement(), double, d1, trialStepPoint, getEntry, i, VariableDeclarationStatement(), double, d2, s, getEntry, i, ExpressionStatement(), ssq, d1, d1, d2, d2, ExpressionStatement(), d1, trustRegionCenterOffset, getEntry, i, lowerDifference, getEntry, i, ExpressionStatement(), temp, ssq, d1, d1, IfStatement(if), temp, ZERO, ExpressionStatement(), temp, FastMath, sqrt, temp, s, getEntry, i, IfStatement(if), angbd, temp, tempa, ExpressionStatement(), angbd, tempa, temp, ExpressionStatement(), iact, i, ExpressionStatement(), xsav, MINUS_ONE, ExpressionStatement(), d1, upperDifference, getEntry, i, trustRegionCenterOffset, getEntry, i, ExpressionStatement(), temp, ssq, d1, d1, IfStatement(if), temp, ZERO, ExpressionStatement(), temp, FastMath, sqrt, temp, s, getEntry, i, IfStatement(if), angbd, temp, tempb, ExpressionStatement(), angbd, tempb, temp, ExpressionStatement(), iact, i, ExpressionStatement(), xsav, ONE, ExpressionStatement(), state, 210, BreakStatement(break), SwitchCase(case), 150, ExpressionStatement(), printState, 150, ExpressionStatement(), shs, ZERO, ExpressionStatement(), dhs, ZERO, ExpressionStatement(), dhd, ZERO, ForStatement(for), int, i, 0, i, n, i, IfStatement(if), xbdi, getEntry, i, ZERO, ExpressionStatement(), shs, s, getEntry, i, hs, getEntry, i, ExpressionStatement(), dhs, trialStepPoint, getEntry, i, hs, getEntry, i, ExpressionStatement(), dhd, trialStepPoint, getEntry, i, hred, getEntry, i, ExpressionStatement(), redmax, ZERO, ExpressionStatement(), isav, 1, ExpressionStatement(), redsav, ZERO, ExpressionStatement(), iu, int, angbd, 17., 3.1, ForStatement(for), int, i, 0, i, iu, i, ExpressionStatement(), angt, angbd, i, iu, ExpressionStatement(), sth, angt, angt, ONE, angt, angt, ExpressionStatement(), temp, shs, angt, angt, dhd, dhs, dhs, ExpressionStatement(), rednew, sth, angt, dredg, sredg, HALF, sth, temp, IfStatement(if), rednew, redmax, ExpressionStatement(), redmax, rednew, ExpressionStatement(), isav, i, ExpressionStatement(), rdprev, redsav, IfStatement(if), i, isav, 1, ExpressionStatement(), rdnext, rednew, ExpressionStatement(), redsav, rednew, IfStatement(if), isav, 0, ExpressionStatement(), state, 190, BreakStatement(break), IfStatement(if), isav, iu, ExpressionStatement(), temp, rdnext, rdprev, redmax, redmax, rdprev, rdnext, ExpressionStatement(), angt, angbd, isav, HALF, temp, iu, ExpressionStatement(), cth, ONE, angt, angt, ONE, angt, angt, ExpressionStatement(), sth, angt, angt, ONE, angt, angt, ExpressionStatement(), temp, shs, angt, angt, dhd, dhs, dhs, ExpressionStatement(), sdec, sth, angt, dredg, sredg, HALF, sth, temp, IfStatement(if), sdec, ZERO, ExpressionStatement(), state, 190, BreakStatement(break), ExpressionStatement(), dredg, ZERO, ExpressionStatement(), gredsq, ZERO, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), gnew, setEntry, i, gnew, getEntry, i, cth, ONE, hred, getEntry, i, sth, hs, getEntry, i, IfStatement(if), xbdi, getEntry, i, ZERO, ExpressionStatement(), trialStepPoint, setEntry, i, cth, trialStepPoint, getEntry, i, sth, s, getEntry, i, ExpressionStatement(), dredg, trialStepPoint, getEntry, i, gnew, getEntry, i, VariableDeclarationStatement(), final, double, d1, gnew, getEntry, i, ExpressionStatement(), gredsq, d1, d1, ExpressionStatement(), hred, setEntry, i, cth, hred, getEntry, i, sth, hs, getEntry, i, ExpressionStatement(), qred, sdec, IfStatement(if), iact, 0, isav, iu, ExpressionStatement(), nact, ExpressionStatement(), xbdi, setEntry, iact, xsav, ExpressionStatement(), state, 100, BreakStatement(break), IfStatement(if), sdec, qred, .01, ExpressionStatement(), state, 120, BreakStatement(break), SwitchCase(case), 190, ExpressionStatement(), printState, 190, ExpressionStatement(), dsq, ZERO, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, min, FastMath, min, trustRegionCenterOffset, getEntry, i, trialStepPoint, getEntry, i, upperDifference, getEntry, i, ExpressionStatement(), newPoint, setEntry, i, FastMath, max, min, lowerDifference, getEntry, i, IfStatement(if), xbdi, getEntry, i, MINUS_ONE, ExpressionStatement(), newPoint, setEntry, i, lowerDifference, getEntry, i, IfStatement(if), xbdi, getEntry, i, ONE, ExpressionStatement(), newPoint, setEntry, i, upperDifference, getEntry, i, ExpressionStatement(), trialStepPoint, setEntry, i, newPoint, getEntry, i, trustRegionCenterOffset, getEntry, i, VariableDeclarationStatement(), final, double, d1, trialStepPoint, getEntry, i, ExpressionStatement(), dsq, d1, d1, ReturnStatement(return), double, dsq, crvmin, SwitchCase(case), 210, ExpressionStatement(), printState, 210, VariableDeclarationStatement(), int, ih, 0, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), hs, setEntry, j, ZERO, ForStatement(for), int, i, 0, i, j, i, IfStatement(if), i, j, ExpressionStatement(), hs, setEntry, j, hs, getEntry, j, modelSecondDerivativesValues, getEntry, ih, s, getEntry, i, ExpressionStatement(), hs, setEntry, i, hs, getEntry, i, modelSecondDerivativesValues, getEntry, ih, s, getEntry, j, ExpressionStatement(), ih, VariableDeclarationStatement(), final, RealVector, tmp, interpolationPoints, operate, s, ebeMultiply, modelSecondDerivativesParameters, ForStatement(for), int, k, 0, k, npt, k, IfStatement(if), modelSecondDerivativesParameters, getEntry, k, ZERO, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), hs, setEntry, i, hs, getEntry, i, tmp, getEntry, k, interpolationPoints, getEntry, k, i, IfStatement(if), crvmin, ZERO, ExpressionStatement(), state, 50, BreakStatement(break), IfStatement(if), iterc, itcsav, ExpressionStatement(), state, 150, BreakStatement(break), ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), hred, setEntry, i, hs, getEntry, i, ExpressionStatement(), state, 120, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.SIMPLE_MESSAGE, "trsbox"]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:update:double+double+int#[ExpressionStatement(), printMethod, VariableDeclarationStatement(), final, int, n, currentBest, getDimension, VariableDeclarationStatement(), final, int, npt, numberOfInterpolationPoints, VariableDeclarationStatement(), final, int, nptm, npt, n, 1, VariableDeclarationStatement(), final, ArrayRealVector, work, new, ArrayRealVector, npt, n, VariableDeclarationStatement(), double, ztest, ZERO, ForStatement(for), int, k, 0, k, npt, k, ForStatement(for), int, j, 0, j, nptm, j, ExpressionStatement(), ztest, FastMath, max, ztest, FastMath, abs, zMatrix, getEntry, k, j, ExpressionStatement(), ztest, 1e-20, ForStatement(for), int, j, 1, j, nptm, j, VariableDeclarationStatement(), final, double, d1, zMatrix, getEntry, knew, j, IfStatement(if), FastMath, abs, d1, ztest, VariableDeclarationStatement(), final, double, d2, zMatrix, getEntry, knew, 0, VariableDeclarationStatement(), final, double, d3, zMatrix, getEntry, knew, j, VariableDeclarationStatement(), final, double, d4, FastMath, sqrt, d2, d2, d3, d3, VariableDeclarationStatement(), final, double, d5, zMatrix, getEntry, knew, 0, d4, VariableDeclarationStatement(), final, double, d6, zMatrix, getEntry, knew, j, d4, ForStatement(for), int, i, 0, i, npt, i, VariableDeclarationStatement(), final, double, d7, d5, zMatrix, getEntry, i, 0, d6, zMatrix, getEntry, i, j, ExpressionStatement(), zMatrix, setEntry, i, j, d5, zMatrix, getEntry, i, j, d6, zMatrix, getEntry, i, 0, ExpressionStatement(), zMatrix, setEntry, i, 0, d7, ExpressionStatement(), zMatrix, setEntry, knew, j, ZERO, ForStatement(for), int, i, 0, i, npt, i, ExpressionStatement(), work, setEntry, i, zMatrix, getEntry, knew, 0, zMatrix, getEntry, i, 0, VariableDeclarationStatement(), final, double, alpha, work, getEntry, knew, VariableDeclarationStatement(), final, double, tau, lagrangeValuesAtNewPoint, getEntry, knew, ExpressionStatement(), lagrangeValuesAtNewPoint, setEntry, knew, lagrangeValuesAtNewPoint, getEntry, knew, ONE, VariableDeclarationStatement(), final, double, sqrtDenom, FastMath, sqrt, denom, VariableDeclarationStatement(), final, double, d1, tau, sqrtDenom, VariableDeclarationStatement(), final, double, d2, zMatrix, getEntry, knew, 0, sqrtDenom, ForStatement(for), int, i, 0, i, npt, i, ExpressionStatement(), zMatrix, setEntry, i, 0, d1, zMatrix, getEntry, i, 0, d2, lagrangeValuesAtNewPoint, getEntry, i, ForStatement(for), int, j, 0, j, n, j, VariableDeclarationStatement(), final, int, jp, npt, j, ExpressionStatement(), work, setEntry, jp, bMatrix, getEntry, knew, j, VariableDeclarationStatement(), final, double, d3, alpha, lagrangeValuesAtNewPoint, getEntry, jp, tau, work, getEntry, jp, denom, VariableDeclarationStatement(), final, double, d4, beta, work, getEntry, jp, tau, lagrangeValuesAtNewPoint, getEntry, jp, denom, ForStatement(for), int, i, 0, i, jp, i, ExpressionStatement(), bMatrix, setEntry, i, j, bMatrix, getEntry, i, j, d3, lagrangeValuesAtNewPoint, getEntry, i, d4, work, getEntry, i, IfStatement(if), i, npt, ExpressionStatement(), bMatrix, setEntry, jp, i, npt, bMatrix, getEntry, i, j]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:setup:double[]+double[]#[ExpressionStatement(), printMethod, VariableDeclarationStatement(), double, init, getStartPoint, VariableDeclarationStatement(), final, int, dimension, init.length, IfStatement(if), dimension, MINIMUM_PROBLEM_DIMENSION, ThrowStatement(throw), new, NumberIsTooSmallException, dimension, MINIMUM_PROBLEM_DIMENSION, true, VariableDeclarationStatement(), final, int, nPointsInterval, dimension, 2, dimension, 2, dimension, 1, 2, IfStatement(if), numberOfInterpolationPoints, nPointsInterval, 0, numberOfInterpolationPoints, nPointsInterval, 1, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.NUMBER_OF_INTERPOLATION_POINTS, numberOfInterpolationPoints, nPointsInterval, 0, nPointsInterval, 1, ExpressionStatement(), boundDifference, double, dimension, VariableDeclarationStatement(), double, requiredMinDiff, 2, initialTrustRegionRadius, VariableDeclarationStatement(), double, minDiff, Double.POSITIVE_INFINITY, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), boundDifference, i, upperBound, i, lowerBound, i, ExpressionStatement(), minDiff, FastMath, min, minDiff, boundDifference, i, IfStatement(if), minDiff, requiredMinDiff, ExpressionStatement(), initialTrustRegionRadius, minDiff, 3.0, ExpressionStatement(), bMatrix, new, Array2DRowRealMatrix, dimension, numberOfInterpolationPoints, dimension, ExpressionStatement(), zMatrix, new, Array2DRowRealMatrix, numberOfInterpolationPoints, numberOfInterpolationPoints, dimension, 1, ExpressionStatement(), interpolationPoints, new, Array2DRowRealMatrix, numberOfInterpolationPoints, dimension, ExpressionStatement(), originShift, new, ArrayRealVector, dimension, ExpressionStatement(), fAtInterpolationPoints, new, ArrayRealVector, numberOfInterpolationPoints, ExpressionStatement(), trustRegionCenterOffset, new, ArrayRealVector, dimension, ExpressionStatement(), gradientAtTrustRegionCenter, new, ArrayRealVector, dimension, ExpressionStatement(), lowerDifference, new, ArrayRealVector, dimension, ExpressionStatement(), upperDifference, new, ArrayRealVector, dimension, ExpressionStatement(), modelSecondDerivativesParameters, new, ArrayRealVector, numberOfInterpolationPoints, ExpressionStatement(), newPoint, new, ArrayRealVector, dimension, ExpressionStatement(), alternativeNewPoint, new, ArrayRealVector, dimension, ExpressionStatement(), trialStepPoint, new, ArrayRealVector, dimension, ExpressionStatement(), lagrangeValuesAtNewPoint, new, ArrayRealVector, dimension, numberOfInterpolationPoints, ExpressionStatement(), modelSecondDerivativesValues, new, ArrayRealVector, dimension, dimension, 1, 2]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:BOBYQAOptimizer:caller:int#[VariableDeclarationStatement(), final, Throwable, t, new, Throwable, VariableDeclarationStatement(), final, StackTraceElement, elements, t, getStackTrace, VariableDeclarationStatement(), final, StackTraceElement, e, elements, n, ReturnStatement(return), e, getMethodName, " (at line ", e, getLineNumber, ")"]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsSigmaHistory:null#[ReturnStatement(return), statisticsSigmaHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsMeanHistory:null#[ReturnStatement(return), statisticsMeanHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsFitnessHistory:null#[ReturnStatement(return), statisticsFitnessHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:getStatisticsDHistory:null#[ReturnStatement(return), statisticsDHistory]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:doOptimize:null#[ExpressionStatement(), isMinimize, getGoalType, equals, GoalType.MINIMIZE, VariableDeclarationStatement(), final, FitnessFunction, fitfun, new, FitnessFunction, VariableDeclarationStatement(), final, double, guess, getStartPoint, ExpressionStatement(), dimension, guess.length, ExpressionStatement(), initializeCMA, guess, ExpressionStatement(), iterations, 0, VariableDeclarationStatement(), ValuePenaltyPair, valuePenalty, fitfun, value, guess, VariableDeclarationStatement(), double, bestValue, valuePenalty.value, valuePenalty.penalty, ExpressionStatement(), push, fitnessHistory, bestValue, VariableDeclarationStatement(), PointValuePair, optimum, new, PointValuePair, getStartPoint, isMinimize, bestValue, bestValue, VariableDeclarationStatement(), PointValuePair, lastResult, null, LabeledStatement(), generationLoop, ForStatement(for), iterations, 1, iterations, maxIterations, iterations, ExpressionStatement(), incrementIterationCount, VariableDeclarationStatement(), final, RealMatrix, arz, randn1, dimension, lambda, VariableDeclarationStatement(), final, RealMatrix, arx, zeros, dimension, lambda, VariableDeclarationStatement(), final, double, fitness, double, lambda, VariableDeclarationStatement(), final, ValuePenaltyPair, valuePenaltyPairs, ValuePenaltyPair, lambda, ForStatement(for), int, k, 0, k, lambda, k, VariableDeclarationStatement(), RealMatrix, arxk, null, ForStatement(for), int, i, 0, i, checkFeasableCount, 1, i, IfStatement(if), diagonalOnly, 0, ExpressionStatement(), arxk, xmean, add, BD, multiply, arz, getColumnMatrix, k, scalarMultiply, sigma, ExpressionStatement(), arxk, xmean, add, times, diagD, arz, getColumnMatrix, k, scalarMultiply, sigma, IfStatement(if), i, checkFeasableCount, fitfun, isFeasible, arxk, getColumn, 0, BreakStatement(break), ExpressionStatement(), arz, setColumn, k, randn, dimension, ExpressionStatement(), copyColumn, arxk, 0, arx, k, TryStatement(try), ExpressionStatement(), valuePenaltyPairs, k, fitfun, value, arx, getColumn, k, catch, TooManyEvaluationsException, e, BreakStatement(break), generationLoop, VariableDeclarationStatement(), double, valueRange, valueRange, valuePenaltyPairs, ForStatement(for), int, iValue, 0, iValue, valuePenaltyPairs.length, iValue, ExpressionStatement(), fitness, iValue, valuePenaltyPairs, iValue, value, valuePenaltyPairs, iValue, penalty, valueRange, VariableDeclarationStatement(), final, int, arindex, sortedIndices, fitness, VariableDeclarationStatement(), final, RealMatrix, xold, xmean, VariableDeclarationStatement(), final, RealMatrix, bestArx, selectColumns, arx, MathArrays, copyOf, arindex, mu, ExpressionStatement(), xmean, bestArx, multiply, weights, VariableDeclarationStatement(), final, RealMatrix, bestArz, selectColumns, arz, MathArrays, copyOf, arindex, mu, VariableDeclarationStatement(), final, RealMatrix, zmean, bestArz, multiply, weights, VariableDeclarationStatement(), final, boolean, hsig, updateEvolutionPaths, zmean, xold, IfStatement(if), diagonalOnly, 0, ExpressionStatement(), updateCovariance, hsig, bestArx, arz, arindex, xold, ExpressionStatement(), updateCovarianceDiagonalOnly, hsig, bestArz, ExpressionStatement(), sigma, FastMath, exp, FastMath, min, 1, normps, chiN, 1, cs, damps, VariableDeclarationStatement(), final, double, bestFitness, fitness, arindex, 0, VariableDeclarationStatement(), final, double, worstFitness, fitness, arindex, arindex.length, 1, IfStatement(if), bestValue, bestFitness, ExpressionStatement(), bestValue, bestFitness, ExpressionStatement(), lastResult, optimum, ExpressionStatement(), optimum, new, PointValuePair, fitfun, repair, bestArx, getColumn, 0, isMinimize, bestFitness, bestFitness, IfStatement(if), getConvergenceChecker, null, lastResult, null, getConvergenceChecker, converged, iterations, optimum, lastResult, BreakStatement(break), generationLoop, IfStatement(if), stopFitness, 0, bestFitness, isMinimize, stopFitness, stopFitness, BreakStatement(break), generationLoop, VariableDeclarationStatement(), final, double, sqrtDiagC, sqrt, diagC, getColumn, 0, VariableDeclarationStatement(), final, double, pcCol, pc, getColumn, 0, ForStatement(for), int, i, 0, i, dimension, i, IfStatement(if), sigma, FastMath, max, FastMath, abs, pcCol, i, sqrtDiagC, i, stopTolX, BreakStatement(break), IfStatement(if), i, dimension, 1, BreakStatement(break), generationLoop, ForStatement(for), int, i, 0, i, dimension, i, IfStatement(if), sigma, sqrtDiagC, i, stopTolUpX, BreakStatement(break), generationLoop, VariableDeclarationStatement(), final, double, historyBest, min, fitnessHistory, VariableDeclarationStatement(), final, double, historyWorst, max, fitnessHistory, IfStatement(if), iterations, 2, FastMath, max, historyWorst, worstFitness, FastMath, min, historyBest, bestFitness, stopTolFun, BreakStatement(break), generationLoop, IfStatement(if), iterations, fitnessHistory.length, historyWorst, historyBest, stopTolHistFun, BreakStatement(break), generationLoop, IfStatement(if), max, diagD, min, diagD, 1e7, BreakStatement(break), generationLoop, IfStatement(if), getConvergenceChecker, null, VariableDeclarationStatement(), final, PointValuePair, current, new, PointValuePair, bestArx, getColumn, 0, isMinimize, bestFitness, bestFitness, IfStatement(if), lastResult, null, getConvergenceChecker, converged, iterations, current, lastResult, BreakStatement(break), generationLoop, ExpressionStatement(), lastResult, current, IfStatement(if), bestValue, fitness, arindex, int, 0.1, lambda, 4., ExpressionStatement(), sigma, FastMath, exp, 0.2, cs, damps, IfStatement(if), iterations, 2, FastMath, max, historyWorst, bestFitness, FastMath, min, historyBest, bestFitness, 0, ExpressionStatement(), sigma, FastMath, exp, 0.2, cs, damps, ExpressionStatement(), push, fitnessHistory, bestFitness, IfStatement(if), generateStatistics, ExpressionStatement(), statisticsSigmaHistory, add, sigma, ExpressionStatement(), statisticsFitnessHistory, add, bestFitness, ExpressionStatement(), statisticsMeanHistory, add, xmean, transpose, ExpressionStatement(), statisticsDHistory, add, diagD, transpose, scalarMultiply, 1E5, ReturnStatement(return), optimum]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, Sigma, ExpressionStatement(), inputSigma, Sigma, data, getSigma, ContinueStatement(continue), IfStatement(if), instanceof, data, PopulationSize, ExpressionStatement(), lambda, PopulationSize, data, getPopulationSize, ContinueStatement(continue), ExpressionStatement(), checkParameters]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:checkParameters:null#[IfStatement(if), inputSigma, null, VariableDeclarationStatement(), final, double, init, getStartPoint, IfStatement(if), inputSigma.length, init.length, ThrowStatement(throw), new, DimensionMismatchException, inputSigma.length, init.length, VariableDeclarationStatement(), final, double, lB, getLowerBound, VariableDeclarationStatement(), final, double, uB, getUpperBound, ForStatement(for), int, i, 0, i, init.length, i, IfStatement(if), inputSigma, i, uB, i, lB, i, ThrowStatement(throw), new, OutOfRangeException, inputSigma, i, 0, uB, i, lB, i]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:initializeCMA:double[]#[IfStatement(if), lambda, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, lambda, VariableDeclarationStatement(), final, double, sigmaArray, double, guess.length, 1, ForStatement(for), int, i, 0, i, guess.length, i, ExpressionStatement(), sigmaArray, i, 0, inputSigma, i, VariableDeclarationStatement(), final, RealMatrix, insigma, new, Array2DRowRealMatrix, sigmaArray, false, ExpressionStatement(), sigma, max, insigma, ExpressionStatement(), stopTolUpX, 1e3, max, insigma, ExpressionStatement(), stopTolX, 1e-11, max, insigma, ExpressionStatement(), stopTolFun, 1e-12, ExpressionStatement(), stopTolHistFun, 1e-13, ExpressionStatement(), mu, lambda, 2, ExpressionStatement(), logMu2, FastMath, log, mu, 0.5, ExpressionStatement(), weights, log, sequence, 1, mu, 1, scalarMultiply, 1, scalarAdd, logMu2, VariableDeclarationStatement(), double, sumw, 0, VariableDeclarationStatement(), double, sumwq, 0, ForStatement(for), int, i, 0, i, mu, i, VariableDeclarationStatement(), double, w, weights, getEntry, i, 0, ExpressionStatement(), sumw, w, ExpressionStatement(), sumwq, w, w, ExpressionStatement(), weights, weights, scalarMultiply, 1, sumw, ExpressionStatement(), mueff, sumw, sumw, sumwq, ExpressionStatement(), cc, 4, mueff, dimension, dimension, 4, 2, mueff, dimension, ExpressionStatement(), cs, mueff, 2, dimension, mueff, 3., ExpressionStatement(), damps, 1, 2, FastMath, max, 0, FastMath, sqrt, mueff, 1, dimension, 1, 1, FastMath, max, 0.3, 1, dimension, 1e-6, maxIterations, cs, ExpressionStatement(), ccov1, 2, dimension, 1.3, dimension, 1.3, mueff, ExpressionStatement(), ccovmu, FastMath, min, 1, ccov1, 2, mueff, 2, 1, mueff, dimension, 2, dimension, 2, mueff, ExpressionStatement(), ccov1Sep, FastMath, min, 1, ccov1, dimension, 1.5, 3, ExpressionStatement(), ccovmuSep, FastMath, min, 1, ccov1, ccovmu, dimension, 1.5, 3, ExpressionStatement(), chiN, FastMath, sqrt, dimension, 1, 1, double, 4, dimension, 1, double, 21, dimension, dimension, ExpressionStatement(), xmean, MatrixUtils, createColumnRealMatrix, guess, ExpressionStatement(), diagD, insigma, scalarMultiply, 1, sigma, ExpressionStatement(), diagC, square, diagD, ExpressionStatement(), pc, zeros, dimension, 1, ExpressionStatement(), ps, zeros, dimension, 1, ExpressionStatement(), normps, ps, getFrobeniusNorm, ExpressionStatement(), B, eye, dimension, dimension, ExpressionStatement(), D, ones, dimension, 1, ExpressionStatement(), BD, times, B, repmat, diagD, transpose, dimension, 1, ExpressionStatement(), C, B, multiply, diag, square, D, multiply, B, transpose, ExpressionStatement(), historySize, 10, int, 3, 10, dimension, double, lambda, ExpressionStatement(), fitnessHistory, double, historySize, ForStatement(for), int, i, 0, i, historySize, i, ExpressionStatement(), fitnessHistory, i, Double.MAX_VALUE]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateEvolutionPaths:RealMatrix+RealMatrix#[ExpressionStatement(), ps, ps, scalarMultiply, 1, cs, add, B, multiply, zmean, scalarMultiply, FastMath, sqrt, cs, 2, cs, mueff, ExpressionStatement(), normps, ps, getFrobeniusNorm, VariableDeclarationStatement(), final, boolean, hsig, normps, FastMath, sqrt, 1, FastMath, pow, 1, cs, 2, iterations, chiN, 1.4, 2, double, dimension, 1, ExpressionStatement(), pc, pc, scalarMultiply, 1, cc, IfStatement(if), hsig, ExpressionStatement(), pc, pc, add, xmean, subtract, xold, scalarMultiply, FastMath, sqrt, cc, 2, cc, mueff, sigma, ReturnStatement(return), hsig]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateCovarianceDiagonalOnly:boolean+RealMatrix#[VariableDeclarationStatement(), double, oldFac, hsig, 0, ccov1Sep, cc, 2, cc, ExpressionStatement(), oldFac, 1, ccov1Sep, ccovmuSep, ExpressionStatement(), diagC, diagC, scalarMultiply, oldFac, add, square, pc, scalarMultiply, ccov1Sep, add, times, diagC, square, bestArz, multiply, weights, scalarMultiply, ccovmuSep, ExpressionStatement(), diagD, sqrt, diagC, IfStatement(if), diagonalOnly, 1, iterations, diagonalOnly, ExpressionStatement(), diagonalOnly, 0, ExpressionStatement(), B, eye, dimension, dimension, ExpressionStatement(), BD, diag, diagD, ExpressionStatement(), C, diag, diagC]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateCovariance:boolean+RealMatrix+RealMatrix+int[]+RealMatrix#[VariableDeclarationStatement(), double, negccov, 0, IfStatement(if), ccov1, ccovmu, 0, VariableDeclarationStatement(), final, RealMatrix, arpos, bestArx, subtract, repmat, xold, 1, mu, scalarMultiply, 1, sigma, VariableDeclarationStatement(), final, RealMatrix, roneu, pc, multiply, pc, transpose, scalarMultiply, ccov1, VariableDeclarationStatement(), double, oldFac, hsig, 0, ccov1, cc, 2, cc, ExpressionStatement(), oldFac, 1, ccov1, ccovmu, IfStatement(if), isActiveCMA, ExpressionStatement(), negccov, 1, ccovmu, 0.25, mueff, FastMath, pow, dimension, 2, 1.5, 2, mueff, VariableDeclarationStatement(), final, double, negminresidualvariance, 0.66, VariableDeclarationStatement(), final, double, negalphaold, 0.5, VariableDeclarationStatement(), final, int, arReverseIndex, reverse, arindex, VariableDeclarationStatement(), RealMatrix, arzneg, selectColumns, arz, MathArrays, copyOf, arReverseIndex, mu, VariableDeclarationStatement(), RealMatrix, arnorms, sqrt, sumRows, square, arzneg, VariableDeclarationStatement(), final, int, idxnorms, sortedIndices, arnorms, getRow, 0, VariableDeclarationStatement(), final, RealMatrix, arnormsSorted, selectColumns, arnorms, idxnorms, VariableDeclarationStatement(), final, int, idxReverse, reverse, idxnorms, VariableDeclarationStatement(), final, RealMatrix, arnormsReverse, selectColumns, arnorms, idxReverse, ExpressionStatement(), arnorms, divide, arnormsReverse, arnormsSorted, VariableDeclarationStatement(), final, int, idxInv, inverse, idxnorms, VariableDeclarationStatement(), final, RealMatrix, arnormsInv, selectColumns, arnorms, idxInv, VariableDeclarationStatement(), final, double, negcovMax, 1, negminresidualvariance, square, arnormsInv, multiply, weights, getEntry, 0, 0, IfStatement(if), negccov, negcovMax, ExpressionStatement(), negccov, negcovMax, ExpressionStatement(), arzneg, times, arzneg, repmat, arnormsInv, dimension, 1, VariableDeclarationStatement(), final, RealMatrix, artmp, BD, multiply, arzneg, VariableDeclarationStatement(), final, RealMatrix, Cneg, artmp, multiply, diag, weights, multiply, artmp, transpose, ExpressionStatement(), oldFac, negalphaold, negccov, ExpressionStatement(), C, C, scalarMultiply, oldFac, add, roneu, add, arpos, scalarMultiply, ccovmu, 1, negalphaold, negccov, multiply, times, repmat, weights, 1, dimension, arpos, transpose, subtract, Cneg, scalarMultiply, negccov, ExpressionStatement(), C, C, scalarMultiply, oldFac, add, roneu, add, arpos, scalarMultiply, ccovmu, multiply, times, repmat, weights, 1, dimension, arpos, transpose, ExpressionStatement(), updateBD, negccov]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:updateBD:double#[IfStatement(if), ccov1, ccovmu, negccov, 0, iterations, 1., ccov1, ccovmu, negccov, dimension, 10., 1, ExpressionStatement(), C, triu, C, 0, add, triu, C, 1, transpose, VariableDeclarationStatement(), final, EigenDecomposition, eig, new, EigenDecomposition, C, ExpressionStatement(), B, eig, getV, ExpressionStatement(), D, eig, getD, ExpressionStatement(), diagD, diag, D, IfStatement(if), min, diagD, 0, ForStatement(for), int, i, 0, i, dimension, i, IfStatement(if), diagD, getEntry, i, 0, 0, ExpressionStatement(), diagD, setEntry, i, 0, 0, VariableDeclarationStatement(), final, double, tfac, max, diagD, 1e14, ExpressionStatement(), C, C, add, eye, dimension, dimension, scalarMultiply, tfac, ExpressionStatement(), diagD, diagD, add, ones, dimension, 1, scalarMultiply, tfac, IfStatement(if), max, diagD, 1e14, min, diagD, VariableDeclarationStatement(), final, double, tfac, max, diagD, 1e14, min, diagD, ExpressionStatement(), C, C, add, eye, dimension, dimension, scalarMultiply, tfac, ExpressionStatement(), diagD, diagD, add, ones, dimension, 1, scalarMultiply, tfac, ExpressionStatement(), diagC, diag, C, ExpressionStatement(), diagD, sqrt, diagD, ExpressionStatement(), BD, times, B, repmat, diagD, transpose, dimension, 1]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:push:double[]+double#[ForStatement(for), int, i, vals.length, 1, i, 0, i, ExpressionStatement(), vals, i, vals, i, 1, ExpressionStatement(), vals, 0, val]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sortedIndices:double[]#[VariableDeclarationStatement(), final, DoubleIndex, dis, DoubleIndex, doubles.length, ForStatement(for), int, i, 0, i, doubles.length, i, ExpressionStatement(), dis, i, new, DoubleIndex, doubles, i, i, ExpressionStatement(), Arrays, sort, dis, VariableDeclarationStatement(), final, int, indices, int, doubles.length, ForStatement(for), int, i, 0, i, doubles.length, i, ExpressionStatement(), indices, i, dis, i, index, ReturnStatement(return), indices]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:valueRange:ValuePenaltyPair[]#[VariableDeclarationStatement(), double, max, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), double, min, Double.MAX_VALUE, EnhancedForStatement(for), ValuePenaltyPair, vpPair, vpPairs, IfStatement(if), vpPair.value, max, ExpressionStatement(), max, vpPair.value, IfStatement(if), vpPair.value, min, ExpressionStatement(), min, vpPair.value, ReturnStatement(return), max, min]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:log:RealMatrix#[VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, m, getColumnDimension, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, ExpressionStatement(), d, r, c, FastMath, log, m, getEntry, r, c, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sqrt:RealMatrix#[VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, m, getColumnDimension, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, ExpressionStatement(), d, r, c, FastMath, sqrt, m, getEntry, r, c, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:square:RealMatrix#[VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, m, getColumnDimension, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, VariableDeclarationStatement(), double, e, m, getEntry, r, c, ExpressionStatement(), d, r, c, e, e, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:times:RealMatrix+RealMatrix#[VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, m, getColumnDimension, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, ExpressionStatement(), d, r, c, m, getEntry, r, c, n, getEntry, r, c, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:divide:RealMatrix+RealMatrix#[VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, m, getColumnDimension, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, ExpressionStatement(), d, r, c, m, getEntry, r, c, n, getEntry, r, c, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:selectColumns:RealMatrix+int[]#[VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, cols.length, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, cols.length, c, ExpressionStatement(), d, r, c, m, getEntry, r, cols, c, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:triu:RealMatrix+int#[VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, m, getColumnDimension, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, ExpressionStatement(), d, r, c, r, c, k, m, getEntry, r, c, 0, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sumRows:RealMatrix#[VariableDeclarationStatement(), final, double, d, double, 1, m, getColumnDimension, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ExpressionStatement(), sum, m, getEntry, r, c, ExpressionStatement(), d, 0, c, sum, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:diag:RealMatrix#[IfStatement(if), m, getColumnDimension, 1, VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, m, getRowDimension, ForStatement(for), int, i, 0, i, m, getRowDimension, i, ExpressionStatement(), d, i, i, m, getEntry, i, 0, ReturnStatement(return), new, Array2DRowRealMatrix, d, false, VariableDeclarationStatement(), final, double, d, double, m, getRowDimension, 1, ForStatement(for), int, i, 0, i, m, getColumnDimension, i, ExpressionStatement(), d, i, 0, m, getEntry, i, i, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:copyColumn:RealMatrix+int+RealMatrix+int#[ForStatement(for), int, i, 0, i, m1, getRowDimension, i, ExpressionStatement(), m2, setEntry, i, col2, m1, getEntry, i, col1]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:ones:int+int#[VariableDeclarationStatement(), final, double, d, double, n, m, ForStatement(for), int, r, 0, r, n, r, ExpressionStatement(), Arrays, fill, d, r, 1, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:eye:int+int#[VariableDeclarationStatement(), final, double, d, double, n, m, ForStatement(for), int, r, 0, r, n, r, IfStatement(if), r, m, ExpressionStatement(), d, r, r, 1, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:zeros:int+int#[ReturnStatement(return), new, Array2DRowRealMatrix, n, m]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:repmat:RealMatrix+int+int#[VariableDeclarationStatement(), final, int, rd, mat, getRowDimension, VariableDeclarationStatement(), final, int, cd, mat, getColumnDimension, VariableDeclarationStatement(), final, double, d, double, n, rd, m, cd, ForStatement(for), int, r, 0, r, n, rd, r, ForStatement(for), int, c, 0, c, m, cd, c, ExpressionStatement(), d, r, c, mat, getEntry, r, rd, c, cd, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:sequence:double+double+double#[VariableDeclarationStatement(), final, int, size, int, end, start, step, 1, VariableDeclarationStatement(), final, double, d, double, size, 1, VariableDeclarationStatement(), double, value, start, ForStatement(for), int, r, 0, r, size, r, ExpressionStatement(), d, r, 0, value, ExpressionStatement(), value, step, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:max:RealMatrix#[VariableDeclarationStatement(), double, max, Double.MAX_VALUE, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, VariableDeclarationStatement(), double, e, m, getEntry, r, c, IfStatement(if), max, e, ExpressionStatement(), max, e, ReturnStatement(return), max]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:min:RealMatrix#[VariableDeclarationStatement(), double, min, Double.MAX_VALUE, ForStatement(for), int, r, 0, r, m, getRowDimension, r, ForStatement(for), int, c, 0, c, m, getColumnDimension, c, VariableDeclarationStatement(), double, e, m, getEntry, r, c, IfStatement(if), min, e, ExpressionStatement(), min, e, ReturnStatement(return), min]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:max:double[]#[VariableDeclarationStatement(), double, max, Double.MAX_VALUE, ForStatement(for), int, r, 0, r, m.length, r, IfStatement(if), max, m, r, ExpressionStatement(), max, m, r, ReturnStatement(return), max]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:min:double[]#[VariableDeclarationStatement(), double, min, Double.MAX_VALUE, ForStatement(for), int, r, 0, r, m.length, r, IfStatement(if), min, m, r, ExpressionStatement(), min, m, r, ReturnStatement(return), min]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:inverse:int[]#[VariableDeclarationStatement(), final, int, inverse, int, indices.length, ForStatement(for), int, i, 0, i, indices.length, i, ExpressionStatement(), inverse, indices, i, i, ReturnStatement(return), inverse]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:reverse:int[]#[VariableDeclarationStatement(), final, int, reverse, int, indices.length, ForStatement(for), int, i, 0, i, indices.length, i, ExpressionStatement(), reverse, i, indices, indices.length, i, 1, ReturnStatement(return), reverse]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:randn:int#[VariableDeclarationStatement(), final, double, randn, double, size, ForStatement(for), int, i, 0, i, size, i, ExpressionStatement(), randn, i, random, nextGaussian, ReturnStatement(return), randn]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:CMAESOptimizer:randn1:int+int#[VariableDeclarationStatement(), final, double, d, double, size, popSize, ForStatement(for), int, r, 0, r, size, r, ForStatement(for), int, c, 0, c, popSize, c, ExpressionStatement(), d, r, c, random, nextGaussian, ReturnStatement(return), new, Array2DRowRealMatrix, d, false]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:MultiDirectionalSimplex:iterate:MultivariateFunction+Comparator<PointValuePair>#[VariableDeclarationStatement(), final, PointValuePair, original, getPoints, VariableDeclarationStatement(), final, PointValuePair, best, original, 0, VariableDeclarationStatement(), final, PointValuePair, reflected, evaluateNewSimplex, evaluationFunction, original, 1, comparator, IfStatement(if), comparator, compare, reflected, best, 0, VariableDeclarationStatement(), final, PointValuePair, reflectedSimplex, getPoints, VariableDeclarationStatement(), final, PointValuePair, expanded, evaluateNewSimplex, evaluationFunction, original, khi, comparator, IfStatement(if), comparator, compare, reflected, expanded, 0, ExpressionStatement(), setPoints, reflectedSimplex, ReturnStatement(return), ExpressionStatement(), evaluateNewSimplex, evaluationFunction, original, gamma, comparator]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:MultiDirectionalSimplex:evaluateNewSimplex:MultivariateFunction+PointValuePair[]+double+Comparator<PointValuePair>#[VariableDeclarationStatement(), final, double, xSmallest, original, 0, getPointRef, ExpressionStatement(), setPoint, 0, original, 0, VariableDeclarationStatement(), final, int, dim, getDimension, ForStatement(for), int, i, 1, i, getSize, i, VariableDeclarationStatement(), final, double, xOriginal, original, i, getPointRef, VariableDeclarationStatement(), final, double, xTransformed, double, dim, ForStatement(for), int, j, 0, j, dim, j, ExpressionStatement(), xTransformed, j, xSmallest, j, coeff, xSmallest, j, xOriginal, j, ExpressionStatement(), setPoint, i, new, PointValuePair, xTransformed, Double.NaN, false, ExpressionStatement(), evaluate, evaluationFunction, comparator, ReturnStatement(return), getPoint, 0]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:NelderMeadSimplex:iterate:MultivariateFunction+Comparator<PointValuePair>#[VariableDeclarationStatement(), final, int, n, getDimension, VariableDeclarationStatement(), final, PointValuePair, best, getPoint, 0, VariableDeclarationStatement(), final, PointValuePair, secondBest, getPoint, n, 1, VariableDeclarationStatement(), final, PointValuePair, worst, getPoint, n, VariableDeclarationStatement(), final, double, xWorst, worst, getPointRef, VariableDeclarationStatement(), final, double, centroid, double, n, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, x, getPoint, i, getPointRef, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), centroid, j, x, j, VariableDeclarationStatement(), final, double, scaling, 1.0, n, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), centroid, j, scaling, VariableDeclarationStatement(), final, double, xR, double, n, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), xR, j, centroid, j, rho, centroid, j, xWorst, j, VariableDeclarationStatement(), final, PointValuePair, reflected, new, PointValuePair, xR, evaluationFunction, value, xR, false, IfStatement(if), comparator, compare, best, reflected, 0, comparator, compare, reflected, secondBest, 0, ExpressionStatement(), replaceWorstPoint, reflected, comparator, IfStatement(if), comparator, compare, reflected, best, 0, VariableDeclarationStatement(), final, double, xE, double, n, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), xE, j, centroid, j, khi, xR, j, centroid, j, VariableDeclarationStatement(), final, PointValuePair, expanded, new, PointValuePair, xE, evaluationFunction, value, xE, false, IfStatement(if), comparator, compare, expanded, reflected, 0, ExpressionStatement(), replaceWorstPoint, expanded, comparator, ExpressionStatement(), replaceWorstPoint, reflected, comparator, IfStatement(if), comparator, compare, reflected, worst, 0, VariableDeclarationStatement(), final, double, xC, double, n, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), xC, j, centroid, j, gamma, xR, j, centroid, j, VariableDeclarationStatement(), final, PointValuePair, outContracted, new, PointValuePair, xC, evaluationFunction, value, xC, false, IfStatement(if), comparator, compare, outContracted, reflected, 0, ExpressionStatement(), replaceWorstPoint, outContracted, comparator, ReturnStatement(return), VariableDeclarationStatement(), final, double, xC, double, n, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), xC, j, centroid, j, gamma, centroid, j, xWorst, j, VariableDeclarationStatement(), final, PointValuePair, inContracted, new, PointValuePair, xC, evaluationFunction, value, xC, false, IfStatement(if), comparator, compare, inContracted, worst, 0, ExpressionStatement(), replaceWorstPoint, inContracted, comparator, ReturnStatement(return), VariableDeclarationStatement(), final, double, xSmallest, getPoint, 0, getPointRef, ForStatement(for), int, i, 1, i, n, i, VariableDeclarationStatement(), final, double, x, getPoint, i, getPoint, ForStatement(for), int, j, 0, j, n, j, ExpressionStatement(), x, j, xSmallest, j, sigma, x, j, xSmallest, j, ExpressionStatement(), setPoint, i, new, PointValuePair, x, Double.NaN, false, ExpressionStatement(), evaluate, evaluationFunction, comparator]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:PowellOptimizer:doOptimize:null#[ExpressionStatement(), checkParameters, VariableDeclarationStatement(), final, GoalType, goal, getGoalType, VariableDeclarationStatement(), final, double, guess, getStartPoint, VariableDeclarationStatement(), final, int, n, guess.length, VariableDeclarationStatement(), final, double, direc, double, n, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), direc, i, i, 1, VariableDeclarationStatement(), final, ConvergenceChecker, PointValuePair, checker, getConvergenceChecker, VariableDeclarationStatement(), double, x, guess, VariableDeclarationStatement(), double, fVal, computeObjectiveValue, x, VariableDeclarationStatement(), double, x1, x, clone, WhileStatement(while), true, ExpressionStatement(), incrementIterationCount, VariableDeclarationStatement(), double, fX, fVal, VariableDeclarationStatement(), double, fX2, 0, VariableDeclarationStatement(), double, delta, 0, VariableDeclarationStatement(), int, bigInd, 0, VariableDeclarationStatement(), double, alphaMin, 0, ForStatement(for), int, i, 0, i, n, i, VariableDeclarationStatement(), final, double, d, MathArrays, copyOf, direc, i, ExpressionStatement(), fX2, fVal, VariableDeclarationStatement(), final, UnivariatePointValuePair, optimum, line, search, x, d, ExpressionStatement(), fVal, optimum, getValue, ExpressionStatement(), alphaMin, optimum, getPoint, VariableDeclarationStatement(), final, double, result, newPointAndDirection, x, d, alphaMin, ExpressionStatement(), x, result, 0, IfStatement(if), fX2, fVal, delta, ExpressionStatement(), delta, fX2, fVal, ExpressionStatement(), bigInd, i, VariableDeclarationStatement(), boolean, stop, 2, fX, fVal, relativeThreshold, FastMath, abs, fX, FastMath, abs, fVal, absoluteThreshold, VariableDeclarationStatement(), final, PointValuePair, previous, new, PointValuePair, x1, fX, VariableDeclarationStatement(), final, PointValuePair, current, new, PointValuePair, x, fVal, IfStatement(if), stop, checker, null, ExpressionStatement(), stop, checker, converged, getIterations, previous, current, IfStatement(if), stop, IfStatement(if), goal, GoalType.MINIMIZE, ReturnStatement(return), fVal, fX, current, previous, ReturnStatement(return), fVal, fX, current, previous, VariableDeclarationStatement(), final, double, d, double, n, VariableDeclarationStatement(), final, double, x2, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), d, i, x, i, x1, i, ExpressionStatement(), x2, i, 2, x, i, x1, i, ExpressionStatement(), x1, x, clone, ExpressionStatement(), fX2, computeObjectiveValue, x2, IfStatement(if), fX, fX2, VariableDeclarationStatement(), double, t, 2, fX, fX2, 2, fVal, VariableDeclarationStatement(), double, temp, fX, fVal, delta, ExpressionStatement(), t, temp, temp, ExpressionStatement(), temp, fX, fX2, ExpressionStatement(), t, delta, temp, temp, IfStatement(if), t, 0.0, VariableDeclarationStatement(), final, UnivariatePointValuePair, optimum, line, search, x, d, ExpressionStatement(), fVal, optimum, getValue, ExpressionStatement(), alphaMin, optimum, getPoint, VariableDeclarationStatement(), final, double, result, newPointAndDirection, x, d, alphaMin, ExpressionStatement(), x, result, 0, VariableDeclarationStatement(), final, int, lastInd, n, 1, ExpressionStatement(), direc, bigInd, direc, lastInd, ExpressionStatement(), direc, lastInd, result, 1]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:PowellOptimizer:newPointAndDirection:double[]+double[]+double#[VariableDeclarationStatement(), final, int, n, p.length, VariableDeclarationStatement(), final, double, nP, double, n, VariableDeclarationStatement(), final, double, nD, double, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), nD, i, d, i, optimum, ExpressionStatement(), nP, i, p, i, nD, i, VariableDeclarationStatement(), final, double, result, double, 2, ExpressionStatement(), result, 0, nP, ExpressionStatement(), result, 1, nD, ReturnStatement(return), result]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:PowellOptimizer:checkParameters:null#[IfStatement(if), getLowerBound, null, getUpperBound, null, ThrowStatement(throw), new, MathUnsupportedOperationException, LocalizedFormats.CONSTRAINT]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:doOptimize:null#[ExpressionStatement(), checkParameters, VariableDeclarationStatement(), final, MultivariateFunction, evalFunc, new, MultivariateFunction, Override, public, double, value, double, point, ReturnStatement(return), computeObjectiveValue, point, VariableDeclarationStatement(), final, boolean, isMinim, getGoalType, GoalType.MINIMIZE, VariableDeclarationStatement(), final, Comparator, PointValuePair, comparator, new, Comparator, PointValuePair, Override, public, int, compare, final, PointValuePair, o1, final, PointValuePair, o2, VariableDeclarationStatement(), final, double, v1, o1, getValue, VariableDeclarationStatement(), final, double, v2, o2, getValue, ReturnStatement(return), isMinim, Double, compare, v1, v2, Double, compare, v2, v1, ExpressionStatement(), simplex, build, getStartPoint, ExpressionStatement(), simplex, evaluate, evalFunc, comparator, VariableDeclarationStatement(), PointValuePair, previous, null, VariableDeclarationStatement(), int, iteration, 0, VariableDeclarationStatement(), final, ConvergenceChecker, PointValuePair, checker, getConvergenceChecker, WhileStatement(while), true, IfStatement(if), getIterations, 0, VariableDeclarationStatement(), boolean, converged, true, ForStatement(for), int, i, 0, i, simplex, getSize, i, VariableDeclarationStatement(), PointValuePair, prev, previous, i, ExpressionStatement(), converged, converged, checker, converged, iteration, prev, simplex, getPoint, i, IfStatement(if), converged, ReturnStatement(return), simplex, getPoint, 0, ExpressionStatement(), previous, simplex, getPoints, ExpressionStatement(), simplex, iterate, evalFunc, comparator, ExpressionStatement(), incrementIterationCount]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, AbstractSimplex, ExpressionStatement(), simplex, AbstractSimplex, data, BreakStatement(break)]
org.apache.commons.math4.optim.nonlinear.scalar.noderiv:SimplexOptimizer:checkParameters:null#[IfStatement(if), simplex, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), getLowerBound, null, getUpperBound, null, ThrowStatement(throw), new, MathUnsupportedOperationException, LocalizedFormats.CONSTRAINT]
org.apache.commons.math4.optim.nonlinear.scalar:ObjectiveFunction:getObjectiveFunction:null#[ReturnStatement(return), function]
org.apache.commons.math4.optim.nonlinear.scalar:ObjectiveFunctionGradient:getObjectiveFunctionGradient:null#[ReturnStatement(return), gradient]
org.apache.commons.math4.optim:PointValuePair:getPoint:null#[VariableDeclarationStatement(), final, double, p, getKey, ReturnStatement(return), p, null, null, p, clone]
org.apache.commons.math4.optim:PointValuePair:getPointRef:null#[ReturnStatement(return), getKey]
org.apache.commons.math4.optim:PointValuePair:writeReplace:null#[ReturnStatement(return), new, DataTransferObject, getKey, getValue]
org.apache.commons.math4.optim:PointVectorValuePair:getPoint:null#[VariableDeclarationStatement(), final, double, p, getKey, ReturnStatement(return), p, null, null, p, clone]
org.apache.commons.math4.optim:PointVectorValuePair:getPointRef:null#[ReturnStatement(return), getKey]
org.apache.commons.math4.optim:PointVectorValuePair:getValue:null#[VariableDeclarationStatement(), final, double, v, super, getValue, ReturnStatement(return), v, null, null, v, clone]
org.apache.commons.math4.optim:PointVectorValuePair:getValueRef:null#[ReturnStatement(return), super, getValue]
org.apache.commons.math4.optim:PointVectorValuePair:writeReplace:null#[ReturnStatement(return), new, DataTransferObject, getKey, getValue]
org.apache.commons.math4.optim:SimpleBounds:getLower:null#[ReturnStatement(return), lower, clone]
org.apache.commons.math4.optim:SimpleBounds:getUpper:null#[ReturnStatement(return), upper, clone]
org.apache.commons.math4.optim:SimpleBounds:unbounded:int#[VariableDeclarationStatement(), final, double, lB, double, dim, ExpressionStatement(), Arrays, fill, lB, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, double, uB, double, dim, ExpressionStatement(), Arrays, fill, uB, Double.POSITIVE_INFINITY, ReturnStatement(return), new, SimpleBounds, lB, uB]
org.apache.commons.math4.optim:SimplePointChecker:converged:int+PAIR+PAIR#[IfStatement(if), maxIterationCount, ITERATION_CHECK_DISABLED, iteration, maxIterationCount, ReturnStatement(return), true, VariableDeclarationStatement(), final, double, p, previous, getKey, VariableDeclarationStatement(), final, double, c, current, getKey, ForStatement(for), int, i, 0, i, p.length, i, VariableDeclarationStatement(), final, double, pi, p, i, VariableDeclarationStatement(), final, double, ci, c, i, VariableDeclarationStatement(), final, double, difference, FastMath, abs, pi, ci, VariableDeclarationStatement(), final, double, size, FastMath, max, FastMath, abs, pi, FastMath, abs, ci, IfStatement(if), difference, size, getRelativeThreshold, difference, getAbsoluteThreshold, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.optim:SimpleValueChecker:converged:int+PointValuePair+PointValuePair#[IfStatement(if), maxIterationCount, ITERATION_CHECK_DISABLED, iteration, maxIterationCount, ReturnStatement(return), true, VariableDeclarationStatement(), final, double, p, previous, getValue, VariableDeclarationStatement(), final, double, c, current, getValue, VariableDeclarationStatement(), final, double, difference, FastMath, abs, p, c, VariableDeclarationStatement(), final, double, size, FastMath, max, FastMath, abs, p, FastMath, abs, c, ReturnStatement(return), difference, size, getRelativeThreshold, difference, getAbsoluteThreshold]
org.apache.commons.math4.optim:SimpleVectorValueChecker:converged:int+PointVectorValuePair+PointVectorValuePair#[IfStatement(if), maxIterationCount, ITERATION_CHECK_DISABLED, iteration, maxIterationCount, ReturnStatement(return), true, VariableDeclarationStatement(), final, double, p, previous, getValueRef, VariableDeclarationStatement(), final, double, c, current, getValueRef, ForStatement(for), int, i, 0, i, p.length, i, VariableDeclarationStatement(), final, double, pi, p, i, VariableDeclarationStatement(), final, double, ci, c, i, VariableDeclarationStatement(), final, double, difference, FastMath, abs, pi, ci, VariableDeclarationStatement(), final, double, size, FastMath, max, FastMath, abs, pi, FastMath, abs, ci, IfStatement(if), difference, size, getRelativeThreshold, difference, getAbsoluteThreshold, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.optim.univariate:BracketFinder:search:UnivariateFunction+GoalType+double+double#[VariableDeclarationStatement(), final, FunctionEvaluator, eval, new, FunctionEvaluator, func, VariableDeclarationStatement(), final, boolean, isMinim, goal, GoalType.MINIMIZE, VariableDeclarationStatement(), double, fA, eval, value, xA, VariableDeclarationStatement(), double, fB, eval, value, xB, IfStatement(if), isMinim, fA, fB, fA, fB, VariableDeclarationStatement(), double, tmp, xA, ExpressionStatement(), xA, xB, ExpressionStatement(), xB, tmp, ExpressionStatement(), tmp, fA, ExpressionStatement(), fA, fB, ExpressionStatement(), fB, tmp, VariableDeclarationStatement(), double, xC, xB, GOLD, xB, xA, VariableDeclarationStatement(), double, fC, eval, value, xC, WhileStatement(while), isMinim, fC, fB, fC, fB, VariableDeclarationStatement(), double, tmp1, xB, xA, fB, fC, VariableDeclarationStatement(), double, tmp2, xB, xC, fB, fA, VariableDeclarationStatement(), double, val, tmp2, tmp1, VariableDeclarationStatement(), double, denom, FastMath, abs, val, EPS_MIN, 2, EPS_MIN, 2, val, VariableDeclarationStatement(), double, w, xB, xB, xC, tmp2, xB, xA, tmp1, denom, VariableDeclarationStatement(), double, wLim, xB, growLimit, xC, xB, VariableDeclarationStatement(), double, fW, IfStatement(if), w, xC, xB, w, 0, ExpressionStatement(), fW, eval, value, w, IfStatement(if), isMinim, fW, fC, fW, fC, ExpressionStatement(), xA, xB, ExpressionStatement(), xB, w, ExpressionStatement(), fA, fB, ExpressionStatement(), fB, fW, BreakStatement(break), IfStatement(if), isMinim, fW, fB, fW, fB, ExpressionStatement(), xC, w, ExpressionStatement(), fC, fW, BreakStatement(break), ExpressionStatement(), w, xC, GOLD, xC, xB, ExpressionStatement(), fW, eval, value, w, IfStatement(if), w, wLim, wLim, xC, 0, ExpressionStatement(), w, wLim, ExpressionStatement(), fW, eval, value, w, IfStatement(if), w, wLim, xC, w, 0, ExpressionStatement(), fW, eval, value, w, IfStatement(if), isMinim, fW, fC, fW, fC, ExpressionStatement(), xB, xC, ExpressionStatement(), xC, w, ExpressionStatement(), w, xC, GOLD, xC, xB, ExpressionStatement(), fB, fC, ExpressionStatement(), fC, fW, ExpressionStatement(), fW, eval, value, w, ExpressionStatement(), w, xC, GOLD, xC, xB, ExpressionStatement(), fW, eval, value, w, ExpressionStatement(), xA, xB, ExpressionStatement(), fA, fB, ExpressionStatement(), xB, xC, ExpressionStatement(), fB, fC, ExpressionStatement(), xC, w, ExpressionStatement(), fC, fW, ExpressionStatement(), lo, xA, ExpressionStatement(), fLo, fA, ExpressionStatement(), mid, xB, ExpressionStatement(), fMid, fB, ExpressionStatement(), hi, xC, ExpressionStatement(), fHi, fC, IfStatement(if), lo, hi, VariableDeclarationStatement(), double, tmp, lo, ExpressionStatement(), lo, hi, ExpressionStatement(), hi, tmp, ExpressionStatement(), tmp, fLo, ExpressionStatement(), fLo, fHi, ExpressionStatement(), fHi, tmp]
org.apache.commons.math4.optim.univariate:BracketFinder:getMaxEvaluations:null#[ReturnStatement(return), maxEvaluations]
org.apache.commons.math4.optim.univariate:BracketFinder:getEvaluations:null#[ReturnStatement(return), evaluations]
org.apache.commons.math4.optim.univariate:BracketFinder:getLo:null#[ReturnStatement(return), lo]
org.apache.commons.math4.optim.univariate:BracketFinder:getFLo:null#[ReturnStatement(return), fLo]
org.apache.commons.math4.optim.univariate:BracketFinder:getHi:null#[ReturnStatement(return), hi]
org.apache.commons.math4.optim.univariate:BracketFinder:getFHi:null#[ReturnStatement(return), fHi]
org.apache.commons.math4.optim.univariate:BracketFinder:getMid:null#[ReturnStatement(return), mid]
org.apache.commons.math4.optim.univariate:BracketFinder:getFMid:null#[ReturnStatement(return), fMid]
org.apache.commons.math4.optim.univariate:BrentOptimizer:doOptimize:null#[VariableDeclarationStatement(), final, boolean, isMinim, getGoalType, GoalType.MINIMIZE, VariableDeclarationStatement(), final, double, lo, getMin, VariableDeclarationStatement(), final, double, mid, getStartValue, VariableDeclarationStatement(), final, double, hi, getMax, VariableDeclarationStatement(), final, ConvergenceChecker, UnivariatePointValuePair, checker, getConvergenceChecker, VariableDeclarationStatement(), double, a, VariableDeclarationStatement(), double, b, IfStatement(if), lo, hi, ExpressionStatement(), a, lo, ExpressionStatement(), b, hi, ExpressionStatement(), a, hi, ExpressionStatement(), b, lo, VariableDeclarationStatement(), double, x, mid, VariableDeclarationStatement(), double, v, x, VariableDeclarationStatement(), double, w, x, VariableDeclarationStatement(), double, d, 0, VariableDeclarationStatement(), double, e, 0, VariableDeclarationStatement(), double, fx, computeObjectiveValue, x, IfStatement(if), isMinim, ExpressionStatement(), fx, fx, VariableDeclarationStatement(), double, fv, fx, VariableDeclarationStatement(), double, fw, fx, VariableDeclarationStatement(), UnivariatePointValuePair, previous, null, VariableDeclarationStatement(), UnivariatePointValuePair, current, new, UnivariatePointValuePair, x, isMinim, fx, fx, VariableDeclarationStatement(), UnivariatePointValuePair, best, current, WhileStatement(while), true, VariableDeclarationStatement(), final, double, m, 0.5, a, b, VariableDeclarationStatement(), final, double, tol1, relativeThreshold, FastMath, abs, x, absoluteThreshold, VariableDeclarationStatement(), final, double, tol2, 2, tol1, VariableDeclarationStatement(), final, boolean, stop, FastMath, abs, x, m, tol2, 0.5, b, a, IfStatement(if), stop, VariableDeclarationStatement(), double, p, 0, VariableDeclarationStatement(), double, q, 0, VariableDeclarationStatement(), double, r, 0, VariableDeclarationStatement(), double, u, 0, IfStatement(if), FastMath, abs, e, tol1, ExpressionStatement(), r, x, w, fx, fv, ExpressionStatement(), q, x, v, fx, fw, ExpressionStatement(), p, x, v, q, x, w, r, ExpressionStatement(), q, 2, q, r, IfStatement(if), q, 0, ExpressionStatement(), p, p, ExpressionStatement(), q, q, ExpressionStatement(), r, e, ExpressionStatement(), e, d, IfStatement(if), p, q, a, x, p, q, b, x, FastMath, abs, p, FastMath, abs, 0.5, q, r, ExpressionStatement(), d, p, q, ExpressionStatement(), u, x, d, IfStatement(if), u, a, tol2, b, u, tol2, IfStatement(if), x, m, ExpressionStatement(), d, tol1, ExpressionStatement(), d, tol1, IfStatement(if), x, m, ExpressionStatement(), e, b, x, ExpressionStatement(), e, a, x, ExpressionStatement(), d, GOLDEN_SECTION, e, IfStatement(if), x, m, ExpressionStatement(), e, b, x, ExpressionStatement(), e, a, x, ExpressionStatement(), d, GOLDEN_SECTION, e, IfStatement(if), FastMath, abs, d, tol1, IfStatement(if), d, 0, ExpressionStatement(), u, x, tol1, ExpressionStatement(), u, x, tol1, ExpressionStatement(), u, x, d, VariableDeclarationStatement(), double, fu, computeObjectiveValue, u, IfStatement(if), isMinim, ExpressionStatement(), fu, fu, ExpressionStatement(), previous, current, ExpressionStatement(), current, new, UnivariatePointValuePair, u, isMinim, fu, fu, ExpressionStatement(), best, best, best, best, previous, current, isMinim, isMinim, IfStatement(if), checker, null, checker, converged, getIterations, previous, current, ReturnStatement(return), best, IfStatement(if), fu, fx, IfStatement(if), u, x, ExpressionStatement(), b, x, ExpressionStatement(), a, x, ExpressionStatement(), v, w, ExpressionStatement(), fv, fw, ExpressionStatement(), w, x, ExpressionStatement(), fw, fx, ExpressionStatement(), x, u, ExpressionStatement(), fx, fu, IfStatement(if), u, x, ExpressionStatement(), a, u, ExpressionStatement(), b, u, IfStatement(if), fu, fw, Precision, equals, w, x, ExpressionStatement(), v, w, ExpressionStatement(), fv, fw, ExpressionStatement(), w, u, ExpressionStatement(), fw, fu, IfStatement(if), fu, fv, Precision, equals, v, x, Precision, equals, v, w, ExpressionStatement(), v, u, ExpressionStatement(), fv, fu, ReturnStatement(return), best, best, best, previous, current, isMinim, isMinim, ExpressionStatement(), incrementIterationCount]
org.apache.commons.math4.optim.univariate:BrentOptimizer:best:UnivariatePointValuePair+UnivariatePointValuePair+boolean#[IfStatement(if), a, null, ReturnStatement(return), b, IfStatement(if), b, null, ReturnStatement(return), a, IfStatement(if), isMinim, ReturnStatement(return), a, getValue, b, getValue, a, b, ReturnStatement(return), a, getValue, b, getValue, a, b]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:getEvaluations:null#[ReturnStatement(return), totalEvaluations]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:getOptima:null#[IfStatement(if), optima, null, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.NO_OPTIMUM_COMPUTED_YET, ReturnStatement(return), optima, clone]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:optimize:OptimizationData...#[ExpressionStatement(), optimData, optData, ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:doOptimize:null#[ForStatement(for), int, i, 0, i, optimData.length, i, IfStatement(if), instanceof, optimData, i, MaxEval, ExpressionStatement(), optimData, i, null, ExpressionStatement(), maxEvalIndex, i, ContinueStatement(continue), IfStatement(if), instanceof, optimData, i, SearchInterval, ExpressionStatement(), optimData, i, null, ExpressionStatement(), searchIntervalIndex, i, ContinueStatement(continue), IfStatement(if), maxEvalIndex, 1, ThrowStatement(throw), new, MathIllegalStateException, IfStatement(if), searchIntervalIndex, 1, ThrowStatement(throw), new, MathIllegalStateException, VariableDeclarationStatement(), RuntimeException, lastException, null, ExpressionStatement(), optima, UnivariatePointValuePair, starts, ExpressionStatement(), totalEvaluations, 0, VariableDeclarationStatement(), final, int, maxEval, getMaxEvaluations, VariableDeclarationStatement(), final, double, min, getMin, VariableDeclarationStatement(), final, double, max, getMax, VariableDeclarationStatement(), final, double, startValue, getStartValue, ForStatement(for), int, i, 0, i, starts, i, TryStatement(try), ExpressionStatement(), optimData, maxEvalIndex, new, MaxEval, maxEval, totalEvaluations, VariableDeclarationStatement(), final, double, s, i, 0, startValue, min, generator, nextDouble, max, min, ExpressionStatement(), optimData, searchIntervalIndex, new, SearchInterval, min, max, s, ExpressionStatement(), optima, i, optimizer, optimize, optimData, catch, RuntimeException, mue, ExpressionStatement(), lastException, mue, ExpressionStatement(), optima, i, null, ExpressionStatement(), totalEvaluations, optimizer, getEvaluations, ExpressionStatement(), sortPairs, getGoalType, IfStatement(if), optima, 0, null, ThrowStatement(throw), lastException, ReturnStatement(return), optima, 0]
org.apache.commons.math4.optim.univariate:MultiStartUnivariateOptimizer:sortPairs:GoalType#[ExpressionStatement(), Arrays, sort, optima, new, Comparator, UnivariatePointValuePair, Override, public, int, compare, final, UnivariatePointValuePair, o1, final, UnivariatePointValuePair, o2, IfStatement(if), o1, null, ReturnStatement(return), o2, null, 0, 1, IfStatement(if), o2, null, ReturnStatement(return), 1, VariableDeclarationStatement(), final, double, v1, o1, getValue, VariableDeclarationStatement(), final, double, v2, o2, getValue, ReturnStatement(return), goal, GoalType.MINIMIZE, Double, compare, v1, v2, Double, compare, v2, v1]
org.apache.commons.math4.optim.univariate:SearchInterval:getMin:null#[ReturnStatement(return), lower]
org.apache.commons.math4.optim.univariate:SearchInterval:getMax:null#[ReturnStatement(return), upper]
org.apache.commons.math4.optim.univariate:SearchInterval:getStartValue:null#[ReturnStatement(return), start]
org.apache.commons.math4.optim.univariate:SimpleUnivariateValueChecker:converged:int+UnivariatePointValuePair+UnivariatePointValuePair#[IfStatement(if), maxIterationCount, ITERATION_CHECK_DISABLED, iteration, maxIterationCount, ReturnStatement(return), true, VariableDeclarationStatement(), final, double, p, previous, getValue, VariableDeclarationStatement(), final, double, c, current, getValue, VariableDeclarationStatement(), final, double, difference, FastMath, abs, p, c, VariableDeclarationStatement(), final, double, size, FastMath, max, FastMath, abs, p, FastMath, abs, c, ReturnStatement(return), difference, size, getRelativeThreshold, difference, getAbsoluteThreshold]
org.apache.commons.math4.optim.univariate:UnivariateObjectiveFunction:getObjectiveFunction:null#[ReturnStatement(return), function]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:optimize:OptimizationData...#[ReturnStatement(return), super, optimize, optData]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getGoalType:null#[ReturnStatement(return), goal]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:parseOptimizationData:OptimizationData...#[ExpressionStatement(), super, parseOptimizationData, optData, EnhancedForStatement(for), OptimizationData, data, optData, IfStatement(if), instanceof, data, SearchInterval, VariableDeclarationStatement(), final, SearchInterval, interval, SearchInterval, data, ExpressionStatement(), min, interval, getMin, ExpressionStatement(), max, interval, getMax, ExpressionStatement(), start, interval, getStartValue, ContinueStatement(continue), IfStatement(if), instanceof, data, UnivariateObjectiveFunction, ExpressionStatement(), function, UnivariateObjectiveFunction, data, getObjectiveFunction, ContinueStatement(continue), IfStatement(if), instanceof, data, GoalType, ExpressionStatement(), goal, GoalType, data, ContinueStatement(continue)]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getStartValue:null#[ReturnStatement(return), start]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getMin:null#[ReturnStatement(return), min]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:getMax:null#[ReturnStatement(return), max]
org.apache.commons.math4.optim.univariate:UnivariateOptimizer:computeObjectiveValue:double#[ExpressionStatement(), super, incrementEvaluationCount, ReturnStatement(return), function, value, x]
org.apache.commons.math4.optim.univariate:UnivariatePointValuePair:getPoint:null#[ReturnStatement(return), point]
org.apache.commons.math4.optim.univariate:UnivariatePointValuePair:getValue:null#[ReturnStatement(return), value]
org.apache.commons.math4.primes:Primes:isPrime:int#[IfStatement(if), n, 2, ReturnStatement(return), false, EnhancedForStatement(for), int, p, SmallPrimes.PRIMES, IfStatement(if), 0, n, p, ReturnStatement(return), n, p, ReturnStatement(return), SmallPrimes, millerRabinPrimeTest, n]
org.apache.commons.math4.primes:Primes:nextPrime:int#[IfStatement(if), n, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NUMBER_TOO_SMALL, n, 0, IfStatement(if), n, 2, ReturnStatement(return), 2, ExpressionStatement(), n, 1, IfStatement(if), n, 1, ReturnStatement(return), 2, IfStatement(if), isPrime, n, ReturnStatement(return), n, VariableDeclarationStatement(), final, int, rem, n, 3, IfStatement(if), 0, rem, ExpressionStatement(), n, 2, IfStatement(if), 1, rem, ExpressionStatement(), n, 4, WhileStatement(while), true, IfStatement(if), isPrime, n, ReturnStatement(return), n, ExpressionStatement(), n, 2, IfStatement(if), isPrime, n, ReturnStatement(return), n, ExpressionStatement(), n, 4]
org.apache.commons.math4.primes:Primes:primeFactors:int#[IfStatement(if), n, 2, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NUMBER_TOO_SMALL, n, 2, ReturnStatement(return), SmallPrimes, trialDivision, n]
org.apache.commons.math4.primes:SmallPrimes:smallTrialDivision:int+List<Integer>#[EnhancedForStatement(for), int, p, PRIMES, WhileStatement(while), 0, n, p, ExpressionStatement(), n, p, ExpressionStatement(), factors, add, p, ReturnStatement(return), n]
org.apache.commons.math4.primes:SmallPrimes:boundedTrialDivision:int+int+List<Integer>#[VariableDeclarationStatement(), int, f, PRIMES_LAST, 2, WhileStatement(while), f, maxFactor, IfStatement(if), 0, n, f, ExpressionStatement(), n, f, ExpressionStatement(), factors, add, f, BreakStatement(break), ExpressionStatement(), f, 4, IfStatement(if), 0, n, f, ExpressionStatement(), n, f, ExpressionStatement(), factors, add, f, BreakStatement(break), ExpressionStatement(), f, 2, IfStatement(if), n, 1, ExpressionStatement(), factors, add, n, ReturnStatement(return), n]
org.apache.commons.math4.primes:SmallPrimes:trialDivision:int#[VariableDeclarationStatement(), final, List, Integer, factors, new, ArrayList, Integer, 32, ExpressionStatement(), n, smallTrialDivision, n, factors, IfStatement(if), 1, n, ReturnStatement(return), factors, VariableDeclarationStatement(), final, int, bound, int, FastMath, sqrt, n, ExpressionStatement(), boundedTrialDivision, n, bound, factors, ReturnStatement(return), factors]
org.apache.commons.math4.primes:SmallPrimes:millerRabinPrimeTest:int#[VariableDeclarationStatement(), final, int, nMinus1, n, 1, VariableDeclarationStatement(), final, int, s, Integer, numberOfTrailingZeros, nMinus1, VariableDeclarationStatement(), final, int, r, nMinus1, s, VariableDeclarationStatement(), int, t, 1, IfStatement(if), n, 2047, ExpressionStatement(), t, 2, IfStatement(if), n, 1373653, ExpressionStatement(), t, 3, IfStatement(if), n, 25326001, ExpressionStatement(), t, 4, VariableDeclarationStatement(), BigInteger, br, BigInteger, valueOf, r, VariableDeclarationStatement(), BigInteger, bn, BigInteger, valueOf, n, ForStatement(for), int, i, 0, i, t, i, VariableDeclarationStatement(), BigInteger, a, BigInteger, valueOf, SmallPrimes.PRIMES, i, VariableDeclarationStatement(), BigInteger, bPow, a, modPow, br, bn, VariableDeclarationStatement(), int, y, bPow, intValue, IfStatement(if), 1, y, y, nMinus1, VariableDeclarationStatement(), int, j, 1, WhileStatement(while), j, s, 1, nMinus1, y, VariableDeclarationStatement(), long, square, long, y, y, ExpressionStatement(), y, int, square, n, IfStatement(if), 1, y, ReturnStatement(return), false, ExpressionStatement(), j, IfStatement(if), nMinus1, y, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.random:AbstractRandomGenerator:clear:null#[ExpressionStatement(), cachedNormalDeviate, Double.NaN]
org.apache.commons.math4.random:AbstractRandomGenerator:setSeed:int#[ExpressionStatement(), setSeed, long, seed]
org.apache.commons.math4.random:AbstractRandomGenerator:setSeed:int[]#[VariableDeclarationStatement(), final, long, prime, 4294967291l, VariableDeclarationStatement(), long, combined, 0l, EnhancedForStatement(for), int, s, seed, ExpressionStatement(), combined, combined, prime, s, ExpressionStatement(), setSeed, combined]
org.apache.commons.math4.random:AbstractRandomGenerator:nextBytes:byte[]#[VariableDeclarationStatement(), final, int, max, bytes.length, 0x7ffffffc, VariableDeclarationStatement(), int, index, 0, WhileStatement(while), index, max, VariableDeclarationStatement(), final, int, random, nextInt, ExpressionStatement(), bytes, index, byte, random, ExpressionStatement(), bytes, index, byte, random, 8, ExpressionStatement(), bytes, index, byte, random, 16, ExpressionStatement(), bytes, index, byte, random, 24, IfStatement(if), index, bytes.length, VariableDeclarationStatement(), int, random, nextInt, WhileStatement(while), true, ExpressionStatement(), bytes, index, byte, random, IfStatement(if), index, bytes.length, ExpressionStatement(), random, 8, BreakStatement(break)]
org.apache.commons.math4.random:AbstractRandomGenerator:nextInt:null#[ReturnStatement(return), int, 2d, nextDouble, 1d, Integer.MAX_VALUE]
org.apache.commons.math4.random:AbstractRandomGenerator:nextInt:int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, n, VariableDeclarationStatement(), int, result, int, nextDouble, n, ReturnStatement(return), result, n, result, n, 1]
org.apache.commons.math4.random:AbstractRandomGenerator:nextLong:null#[ReturnStatement(return), long, 2d, nextDouble, 1d, Long.MAX_VALUE]
org.apache.commons.math4.random:AbstractRandomGenerator:nextBoolean:null#[ReturnStatement(return), nextDouble, 0.5]
org.apache.commons.math4.random:AbstractRandomGenerator:nextFloat:null#[ReturnStatement(return), float, nextDouble]
org.apache.commons.math4.random:AbstractRandomGenerator:nextGaussian:null#[IfStatement(if), Double, isNaN, cachedNormalDeviate, VariableDeclarationStatement(), double, dev, cachedNormalDeviate, ExpressionStatement(), cachedNormalDeviate, Double.NaN, ReturnStatement(return), dev, VariableDeclarationStatement(), double, v1, 0, VariableDeclarationStatement(), double, v2, 0, VariableDeclarationStatement(), double, s, 1, WhileStatement(while), s, 1, ExpressionStatement(), v1, 2, nextDouble, 1, ExpressionStatement(), v2, 2, nextDouble, 1, ExpressionStatement(), s, v1, v1, v2, v2, IfStatement(if), s, 0, ExpressionStatement(), s, FastMath, sqrt, 2, FastMath, log, s, s, ExpressionStatement(), cachedNormalDeviate, v2, s, ReturnStatement(return), v1, s]
org.apache.commons.math4.random:AbstractWell:setSeed:int#[ExpressionStatement(), setSeed, int, seed]
org.apache.commons.math4.random:AbstractWell:setSeed:int[]#[IfStatement(if), seed, null, ExpressionStatement(), setSeed, System, currentTimeMillis, System, identityHashCode, this, ReturnStatement(return), ExpressionStatement(), System, arraycopy, seed, 0, v, 0, FastMath, min, seed.length, v.length, IfStatement(if), seed.length, v.length, ForStatement(for), int, i, seed.length, i, v.length, i, VariableDeclarationStatement(), final, long, l, v, i, seed.length, ExpressionStatement(), v, i, int, 1812433253l, l, l, 30, i, 0xffffffffL, ExpressionStatement(), index, 0, ExpressionStatement(), clear]
org.apache.commons.math4.random:AbstractWell:setSeed:long#[ExpressionStatement(), setSeed, int, int, seed, 32, int, seed, 0xffffffffl]
org.apache.commons.math4.random:AbstractWell:calculateBlockCount:int#[VariableDeclarationStatement(), final, int, w, 32, VariableDeclarationStatement(), final, int, r, k, w, 1, w, ReturnStatement(return), r]
org.apache.commons.math4.random:BitsStreamGenerator:nextBoolean:null#[ReturnStatement(return), next, 1, 0]
org.apache.commons.math4.random:BitsStreamGenerator:nextBytes:byte[]#[VariableDeclarationStatement(), final, int, max, bytes.length, 0x7ffffffc, VariableDeclarationStatement(), int, index, 0, WhileStatement(while), index, max, VariableDeclarationStatement(), final, int, random, next, 32, ExpressionStatement(), bytes, index, byte, random, ExpressionStatement(), bytes, index, byte, random, 8, ExpressionStatement(), bytes, index, byte, random, 16, ExpressionStatement(), bytes, index, byte, random, 24, IfStatement(if), index, bytes.length, VariableDeclarationStatement(), int, random, next, 32, WhileStatement(while), true, ExpressionStatement(), bytes, index, byte, random, IfStatement(if), index, bytes.length, ExpressionStatement(), random, 8, BreakStatement(break)]
org.apache.commons.math4.random:BitsStreamGenerator:nextGaussian:null#[VariableDeclarationStatement(), final, double, random, IfStatement(if), Double, isNaN, nextGaussian, VariableDeclarationStatement(), final, double, x, nextDouble, VariableDeclarationStatement(), final, double, y, nextDouble, VariableDeclarationStatement(), final, double, alpha, 2, FastMath.PI, x, VariableDeclarationStatement(), final, double, r, FastMath, sqrt, 2, FastMath, log, y, ExpressionStatement(), random, r, FastMath, cos, alpha, ExpressionStatement(), nextGaussian, r, FastMath, sin, alpha, ExpressionStatement(), random, nextGaussian, ExpressionStatement(), nextGaussian, Double.NaN, ReturnStatement(return), random]
org.apache.commons.math4.random:BitsStreamGenerator:nextInt:null#[ReturnStatement(return), next, 32]
org.apache.commons.math4.random:BitsStreamGenerator:nextInt:int#[IfStatement(if), n, 0, IfStatement(if), n, n, n, ReturnStatement(return), int, n, long, next, 31, 31, VariableDeclarationStatement(), int, bits, VariableDeclarationStatement(), int, val, DoStatement(do), ExpressionStatement(), bits, next, 31, ExpressionStatement(), val, bits, n, bits, val, n, 1, 0, ReturnStatement(return), val, ThrowStatement(throw), new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:BitsStreamGenerator:nextLong:null#[VariableDeclarationStatement(), final, long, high, long, next, 32, 32, VariableDeclarationStatement(), final, long, low, next, 32, 0xffffffffL, ReturnStatement(return), high, low]
org.apache.commons.math4.random:BitsStreamGenerator:nextLong:long#[IfStatement(if), n, 0, VariableDeclarationStatement(), long, bits, VariableDeclarationStatement(), long, val, DoStatement(do), ExpressionStatement(), bits, long, next, 31, 32, ExpressionStatement(), bits, long, next, 32, 0xffffffffL, ExpressionStatement(), val, bits, n, bits, val, n, 1, 0, ReturnStatement(return), val, ThrowStatement(throw), new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:BitsStreamGenerator:clear:null#[ExpressionStatement(), nextGaussian, Double.NaN]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:getGenerator:null#[ReturnStatement(return), generator]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:getRank:null#[ReturnStatement(return), normalized.length]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:getRootMatrix:null#[ReturnStatement(return), root]
org.apache.commons.math4.random:CorrelatedRandomVectorGenerator:nextVector:null#[ForStatement(for), int, i, 0, i, normalized.length, i, ExpressionStatement(), normalized, i, generator, nextNormalizedDouble, VariableDeclarationStatement(), double, correlated, double, mean.length, ForStatement(for), int, i, 0, i, correlated.length, i, ExpressionStatement(), correlated, i, mean, i, ForStatement(for), int, j, 0, j, root, getColumnDimension, j, ExpressionStatement(), correlated, i, root, getEntry, i, j, normalized, j, ReturnStatement(return), correlated]
org.apache.commons.math4.random:EmpiricalDistribution:load:double[]#[VariableDeclarationStatement(), DataAdapter, da, new, ArrayDataAdapter, in, TryStatement(try), ExpressionStatement(), da, computeStats, ExpressionStatement(), fillBinStats, new, ArrayDataAdapter, in, catch, IOException, ex, ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), loaded, true]
org.apache.commons.math4.random:EmpiricalDistribution:load:URL#[ExpressionStatement(), MathUtils, checkNotNull, url, VariableDeclarationStatement(), Charset, charset, Charset, forName, FILE_CHARSET, VariableDeclarationStatement(), BufferedReader, in, new, BufferedReader, new, InputStreamReader, url, openStream, charset, TryStatement(try), VariableDeclarationStatement(), DataAdapter, da, new, StreamDataAdapter, in, ExpressionStatement(), da, computeStats, IfStatement(if), sampleStats, getN, 0, ThrowStatement(throw), new, ZeroException, LocalizedFormats.URL_CONTAINS_NO_DATA, url, ExpressionStatement(), in, new, BufferedReader, new, InputStreamReader, url, openStream, charset, ExpressionStatement(), fillBinStats, new, StreamDataAdapter, in, ExpressionStatement(), loaded, true, TryStatement(try), ExpressionStatement(), in, close, catch, IOException, ex]
org.apache.commons.math4.random:EmpiricalDistribution:load:File#[ExpressionStatement(), MathUtils, checkNotNull, file, VariableDeclarationStatement(), Charset, charset, Charset, forName, FILE_CHARSET, VariableDeclarationStatement(), InputStream, is, new, FileInputStream, file, VariableDeclarationStatement(), BufferedReader, in, new, BufferedReader, new, InputStreamReader, is, charset, TryStatement(try), VariableDeclarationStatement(), DataAdapter, da, new, StreamDataAdapter, in, ExpressionStatement(), da, computeStats, ExpressionStatement(), is, new, FileInputStream, file, ExpressionStatement(), in, new, BufferedReader, new, InputStreamReader, is, charset, ExpressionStatement(), fillBinStats, new, StreamDataAdapter, in, ExpressionStatement(), loaded, true, TryStatement(try), ExpressionStatement(), in, close, catch, IOException, ex]
org.apache.commons.math4.random:EmpiricalDistribution:fillBinStats:DataAdapter#[ExpressionStatement(), min, sampleStats, getMin, ExpressionStatement(), max, sampleStats, getMax, ExpressionStatement(), delta, max, min, binCount, IfStatement(if), binStats, isEmpty, ExpressionStatement(), binStats, clear, ForStatement(for), int, i, 0, i, binCount, i, VariableDeclarationStatement(), SummaryStatistics, stats, new, SummaryStatistics, ExpressionStatement(), binStats, add, i, stats, ExpressionStatement(), da, computeBinStats, ExpressionStatement(), upperBounds, double, binCount, ExpressionStatement(), upperBounds, 0, double, binStats, get, 0, getN, double, sampleStats, getN, ForStatement(for), int, i, 1, i, binCount, 1, i, ExpressionStatement(), upperBounds, i, upperBounds, i, 1, double, binStats, get, i, getN, double, sampleStats, getN, ExpressionStatement(), upperBounds, binCount, 1, 1.0d]
org.apache.commons.math4.random:EmpiricalDistribution:findBin:double#[ReturnStatement(return), FastMath, min, FastMath, max, int, FastMath, ceil, value, min, delta, 1, 0, binCount, 1]
org.apache.commons.math4.random:EmpiricalDistribution:getNextValue:null#[IfStatement(if), loaded, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.DISTRIBUTION_NOT_LOADED, ReturnStatement(return), sample]
org.apache.commons.math4.random:EmpiricalDistribution:getSampleStats:null#[ReturnStatement(return), sampleStats]
org.apache.commons.math4.random:EmpiricalDistribution:getBinCount:null#[ReturnStatement(return), binCount]
org.apache.commons.math4.random:EmpiricalDistribution:getBinStats:null#[ReturnStatement(return), binStats]
org.apache.commons.math4.random:EmpiricalDistribution:getUpperBounds:null#[VariableDeclarationStatement(), double, binUpperBounds, double, binCount, ForStatement(for), int, i, 0, i, binCount, 1, i, ExpressionStatement(), binUpperBounds, i, min, delta, i, 1, ExpressionStatement(), binUpperBounds, binCount, 1, max, ReturnStatement(return), binUpperBounds]
org.apache.commons.math4.random:EmpiricalDistribution:getGeneratorUpperBounds:null#[VariableDeclarationStatement(), int, len, upperBounds.length, VariableDeclarationStatement(), double, out, double, len, ExpressionStatement(), System, arraycopy, upperBounds, 0, out, 0, len, ReturnStatement(return), out]
org.apache.commons.math4.random:EmpiricalDistribution:isLoaded:null#[ReturnStatement(return), loaded]
org.apache.commons.math4.random:EmpiricalDistribution:reSeed:long#[ExpressionStatement(), randomData, reSeed, seed]
org.apache.commons.math4.random:EmpiricalDistribution:probability:double#[ReturnStatement(return), 0]
org.apache.commons.math4.random:EmpiricalDistribution:density:double#[IfStatement(if), x, min, x, max, ReturnStatement(return), 0d, VariableDeclarationStatement(), final, int, binIndex, findBin, x, VariableDeclarationStatement(), final, RealDistribution, kernel, getKernel, binStats, get, binIndex, ReturnStatement(return), kernel, density, x, pB, binIndex, kB, binIndex]
org.apache.commons.math4.random:EmpiricalDistribution:cumulativeProbability:double#[IfStatement(if), x, min, ReturnStatement(return), 0d, IfStatement(if), x, max, ReturnStatement(return), 1d, VariableDeclarationStatement(), final, int, binIndex, findBin, x, VariableDeclarationStatement(), final, double, pBminus, pBminus, binIndex, VariableDeclarationStatement(), final, double, pB, pB, binIndex, VariableDeclarationStatement(), final, RealDistribution, kernel, k, x, IfStatement(if), instanceof, kernel, ConstantRealDistribution, IfStatement(if), x, kernel, getNumericalMean, ReturnStatement(return), pBminus, ReturnStatement(return), pBminus, pB, VariableDeclarationStatement(), final, double, binBounds, getUpperBounds, VariableDeclarationStatement(), final, double, kB, kB, binIndex, VariableDeclarationStatement(), final, double, lower, binIndex, 0, min, binBounds, binIndex, 1, VariableDeclarationStatement(), final, double, withinBinCum, kernel, cumulativeProbability, x, kernel, cumulativeProbability, lower, kB, ReturnStatement(return), pBminus, pB, withinBinCum]
org.apache.commons.math4.random:EmpiricalDistribution:inverseCumulativeProbability:double#[IfStatement(if), p, 0.0, p, 1.0, ThrowStatement(throw), new, OutOfRangeException, p, 0, 1, IfStatement(if), p, 0.0, ReturnStatement(return), getSupportLowerBound, IfStatement(if), p, 1.0, ReturnStatement(return), getSupportUpperBound, VariableDeclarationStatement(), int, i, 0, WhileStatement(while), cumBinP, i, p, ExpressionStatement(), i, VariableDeclarationStatement(), final, RealDistribution, kernel, getKernel, binStats, get, i, VariableDeclarationStatement(), final, double, kB, kB, i, VariableDeclarationStatement(), final, double, binBounds, getUpperBounds, VariableDeclarationStatement(), final, double, lower, i, 0, min, binBounds, i, 1, VariableDeclarationStatement(), final, double, kBminus, kernel, cumulativeProbability, lower, VariableDeclarationStatement(), final, double, pB, pB, i, VariableDeclarationStatement(), final, double, pBminus, pBminus, i, VariableDeclarationStatement(), final, double, pCrit, p, pBminus, IfStatement(if), pCrit, 0, ReturnStatement(return), lower, ReturnStatement(return), kernel, inverseCumulativeProbability, kBminus, pCrit, kB, pB]
org.apache.commons.math4.random:EmpiricalDistribution:getNumericalMean:null#[ReturnStatement(return), sampleStats, getMean]
org.apache.commons.math4.random:EmpiricalDistribution:getNumericalVariance:null#[ReturnStatement(return), sampleStats, getVariance]
org.apache.commons.math4.random:EmpiricalDistribution:getSupportLowerBound:null#[ReturnStatement(return), min]
org.apache.commons.math4.random:EmpiricalDistribution:getSupportUpperBound:null#[ReturnStatement(return), max]
org.apache.commons.math4.random:EmpiricalDistribution:isSupportConnected:null#[ReturnStatement(return), true]
org.apache.commons.math4.random:EmpiricalDistribution:reseedRandomGenerator:long#[ExpressionStatement(), randomData, reSeed, seed]
org.apache.commons.math4.random:EmpiricalDistribution:pB:int#[ReturnStatement(return), i, 0, upperBounds, 0, upperBounds, i, upperBounds, i, 1]
org.apache.commons.math4.random:EmpiricalDistribution:pBminus:int#[ReturnStatement(return), i, 0, 0, upperBounds, i, 1]
org.apache.commons.math4.random:EmpiricalDistribution:kB:int#[VariableDeclarationStatement(), final, double, binBounds, getUpperBounds, VariableDeclarationStatement(), final, RealDistribution, kernel, getKernel, binStats, get, i, ReturnStatement(return), i, 0, kernel, probability, min, binBounds, 0, kernel, probability, binBounds, i, 1, binBounds, i]
org.apache.commons.math4.random:EmpiricalDistribution:k:double#[VariableDeclarationStatement(), final, int, binIndex, findBin, x, ReturnStatement(return), getKernel, binStats, get, binIndex]
org.apache.commons.math4.random:EmpiricalDistribution:cumBinP:int#[ReturnStatement(return), upperBounds, binIndex]
org.apache.commons.math4.random:EmpiricalDistribution:getKernel:SummaryStatistics#[IfStatement(if), bStats, getN, 1, bStats, getVariance, 0, ReturnStatement(return), new, ConstantRealDistribution, bStats, getMean, ReturnStatement(return), new, NormalDistribution, randomData, getRandomGenerator, bStats, getMean, bStats, getStandardDeviation, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY]
org.apache.commons.math4.random:GaussianRandomGenerator:nextNormalizedDouble:null#[ReturnStatement(return), generator, nextGaussian]
org.apache.commons.math4.random:HaltonSequenceGenerator:nextVector:null#[VariableDeclarationStatement(), final, double, v, double, dimension, ForStatement(for), int, i, 0, i, dimension, i, VariableDeclarationStatement(), int, index, count, VariableDeclarationStatement(), double, f, 1.0, base, i, VariableDeclarationStatement(), int, j, 0, WhileStatement(while), index, 0, VariableDeclarationStatement(), final, int, digit, scramble, i, j, base, i, index, base, i, ExpressionStatement(), v, i, f, digit, ExpressionStatement(), index, base, i, ExpressionStatement(), f, base, i, ExpressionStatement(), count, ReturnStatement(return), v]
org.apache.commons.math4.random:HaltonSequenceGenerator:scramble:int+int+int+int#[ReturnStatement(return), weight, null, weight, i, digit, b, digit]
org.apache.commons.math4.random:HaltonSequenceGenerator:skipTo:int#[ExpressionStatement(), count, index, ReturnStatement(return), nextVector]
org.apache.commons.math4.random:HaltonSequenceGenerator:getNextIndex:null#[ReturnStatement(return), count]
org.apache.commons.math4.random:ISAACRandom:setSeed:int#[ExpressionStatement(), setSeed, int, seed]
org.apache.commons.math4.random:ISAACRandom:setSeed:long#[ExpressionStatement(), setSeed, int, int, seed, 32, int, seed, 0xffffffffL]
org.apache.commons.math4.random:ISAACRandom:setSeed:int[]#[IfStatement(if), seed, null, ExpressionStatement(), setSeed, System, currentTimeMillis, System, identityHashCode, this, ReturnStatement(return), VariableDeclarationStatement(), final, int, seedLen, seed.length, VariableDeclarationStatement(), final, int, rslLen, rsl.length, ExpressionStatement(), System, arraycopy, seed, 0, rsl, 0, FastMath, min, seedLen, rslLen, IfStatement(if), seedLen, rslLen, ForStatement(for), int, j, seedLen, j, rslLen, j, VariableDeclarationStatement(), long, k, rsl, j, seedLen, ExpressionStatement(), rsl, j, int, 0x6c078965L, k, k, 30, j, 0xffffffffL, ExpressionStatement(), initState]
org.apache.commons.math4.random:ISAACRandom:next:int#[IfStatement(if), count, 0, ExpressionStatement(), isaac, ExpressionStatement(), count, SIZE, 1, ReturnStatement(return), rsl, count, 32, bits]
org.apache.commons.math4.random:ISAACRandom:isaac:null#[ExpressionStatement(), isaacI, 0, ExpressionStatement(), isaacJ, H_SIZE, ExpressionStatement(), isaacB, isaacC, WhileStatement(while), isaacI, H_SIZE, ExpressionStatement(), isaac2, ExpressionStatement(), isaacJ, 0, WhileStatement(while), isaacJ, H_SIZE, ExpressionStatement(), isaac2]
org.apache.commons.math4.random:ISAACRandom:isaac2:null#[ExpressionStatement(), isaacX, mem, isaacI, ExpressionStatement(), isaacA, isaacA, 13, ExpressionStatement(), isaacA, mem, isaacJ, ExpressionStatement(), isaac3, ExpressionStatement(), isaacX, mem, isaacI, ExpressionStatement(), isaacA, isaacA, 6, ExpressionStatement(), isaacA, mem, isaacJ, ExpressionStatement(), isaac3, ExpressionStatement(), isaacX, mem, isaacI, ExpressionStatement(), isaacA, isaacA, 2, ExpressionStatement(), isaacA, mem, isaacJ, ExpressionStatement(), isaac3, ExpressionStatement(), isaacX, mem, isaacI, ExpressionStatement(), isaacA, isaacA, 16, ExpressionStatement(), isaacA, mem, isaacJ, ExpressionStatement(), isaac3]
org.apache.commons.math4.random:ISAACRandom:isaac3:null#[ExpressionStatement(), mem, isaacI, mem, isaacX, MASK, 2, isaacA, isaacB, ExpressionStatement(), isaacB, mem, mem, isaacI, SIZE_L, MASK, 2, isaacX, ExpressionStatement(), rsl, isaacI, isaacB]
org.apache.commons.math4.random:ISAACRandom:initState:null#[ExpressionStatement(), isaacA, 0, ExpressionStatement(), isaacB, 0, ExpressionStatement(), isaacC, 0, ForStatement(for), int, j, 0, j, arr.length, j, ExpressionStatement(), arr, j, GLD_RATIO, ForStatement(for), int, j, 0, j, 4, j, ExpressionStatement(), shuffle, ForStatement(for), int, j, 0, j, SIZE, j, 8, ExpressionStatement(), arr, 0, rsl, j, ExpressionStatement(), arr, 1, rsl, j, 1, ExpressionStatement(), arr, 2, rsl, j, 2, ExpressionStatement(), arr, 3, rsl, j, 3, ExpressionStatement(), arr, 4, rsl, j, 4, ExpressionStatement(), arr, 5, rsl, j, 5, ExpressionStatement(), arr, 6, rsl, j, 6, ExpressionStatement(), arr, 7, rsl, j, 7, ExpressionStatement(), shuffle, ExpressionStatement(), setState, j, ForStatement(for), int, j, 0, j, SIZE, j, 8, ExpressionStatement(), arr, 0, mem, j, ExpressionStatement(), arr, 1, mem, j, 1, ExpressionStatement(), arr, 2, mem, j, 2, ExpressionStatement(), arr, 3, mem, j, 3, ExpressionStatement(), arr, 4, mem, j, 4, ExpressionStatement(), arr, 5, mem, j, 5, ExpressionStatement(), arr, 6, mem, j, 6, ExpressionStatement(), arr, 7, mem, j, 7, ExpressionStatement(), shuffle, ExpressionStatement(), setState, j, ExpressionStatement(), isaac, ExpressionStatement(), count, SIZE, 1, ExpressionStatement(), clear]
org.apache.commons.math4.random:ISAACRandom:shuffle:null#[ExpressionStatement(), arr, 0, arr, 1, 11, ExpressionStatement(), arr, 3, arr, 0, ExpressionStatement(), arr, 1, arr, 2, ExpressionStatement(), arr, 1, arr, 2, 2, ExpressionStatement(), arr, 4, arr, 1, ExpressionStatement(), arr, 2, arr, 3, ExpressionStatement(), arr, 2, arr, 3, 8, ExpressionStatement(), arr, 5, arr, 2, ExpressionStatement(), arr, 3, arr, 4, ExpressionStatement(), arr, 3, arr, 4, 16, ExpressionStatement(), arr, 6, arr, 3, ExpressionStatement(), arr, 4, arr, 5, ExpressionStatement(), arr, 4, arr, 5, 10, ExpressionStatement(), arr, 7, arr, 4, ExpressionStatement(), arr, 5, arr, 6, ExpressionStatement(), arr, 5, arr, 6, 4, ExpressionStatement(), arr, 0, arr, 5, ExpressionStatement(), arr, 6, arr, 7, ExpressionStatement(), arr, 6, arr, 7, 8, ExpressionStatement(), arr, 1, arr, 6, ExpressionStatement(), arr, 7, arr, 0, ExpressionStatement(), arr, 7, arr, 0, 9, ExpressionStatement(), arr, 2, arr, 7, ExpressionStatement(), arr, 0, arr, 1]
org.apache.commons.math4.random:ISAACRandom:setState:int#[ExpressionStatement(), mem, start, arr, 0, ExpressionStatement(), mem, start, 1, arr, 1, ExpressionStatement(), mem, start, 2, arr, 2, ExpressionStatement(), mem, start, 3, arr, 3, ExpressionStatement(), mem, start, 4, arr, 4, ExpressionStatement(), mem, start, 5, arr, 5, ExpressionStatement(), mem, start, 6, arr, 6, ExpressionStatement(), mem, start, 7, arr, 7]
org.apache.commons.math4.random:JDKRandomGenerator:setSeed:int#[ExpressionStatement(), delegate, setSeed, long, seed]
org.apache.commons.math4.random:JDKRandomGenerator:setSeed:long#[ExpressionStatement(), delegate, setSeed, seed]
org.apache.commons.math4.random:JDKRandomGenerator:setSeed:int[]#[ExpressionStatement(), delegate, setSeed, RandomGeneratorFactory, convertToLong, seed]
org.apache.commons.math4.random:JDKRandomGenerator:nextBytes:byte[]#[ExpressionStatement(), delegate, nextBytes, bytes]
org.apache.commons.math4.random:JDKRandomGenerator:nextInt:null#[ReturnStatement(return), delegate, nextInt]
org.apache.commons.math4.random:JDKRandomGenerator:nextLong:null#[ReturnStatement(return), delegate, nextLong]
org.apache.commons.math4.random:JDKRandomGenerator:nextBoolean:null#[ReturnStatement(return), delegate, nextBoolean]
org.apache.commons.math4.random:JDKRandomGenerator:nextFloat:null#[ReturnStatement(return), delegate, nextFloat]
org.apache.commons.math4.random:JDKRandomGenerator:nextDouble:null#[ReturnStatement(return), delegate, nextDouble]
org.apache.commons.math4.random:JDKRandomGenerator:nextGaussian:null#[ReturnStatement(return), delegate, nextGaussian]
org.apache.commons.math4.random:JDKRandomGenerator:nextInt:int#[TryStatement(try), ReturnStatement(return), delegate, nextInt, n, catch, IllegalArgumentException, e, ThrowStatement(throw), new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:MersenneTwister:setSeed:int#[VariableDeclarationStatement(), long, longMT, seed, ExpressionStatement(), mt, 0, int, longMT, ForStatement(for), mti, 1, mti, N, mti, ExpressionStatement(), longMT, 1812433253l, longMT, longMT, 30, mti, 0xffffffffL, ExpressionStatement(), mt, mti, int, longMT, ExpressionStatement(), clear]
org.apache.commons.math4.random:MersenneTwister:setSeed:int[]#[IfStatement(if), seed, null, ExpressionStatement(), setSeed, System, currentTimeMillis, System, identityHashCode, this, ReturnStatement(return), ExpressionStatement(), setSeed, 19650218, VariableDeclarationStatement(), int, i, 1, VariableDeclarationStatement(), int, j, 0, ForStatement(for), int, k, FastMath, max, N, seed.length, k, 0, k, VariableDeclarationStatement(), long, l0, mt, i, 0x7fffffffl, mt, i, 0, 0x80000000l, 0x0l, VariableDeclarationStatement(), long, l1, mt, i, 1, 0x7fffffffl, mt, i, 1, 0, 0x80000000l, 0x0l, VariableDeclarationStatement(), long, l, l0, l1, l1, 30, 1664525l, seed, j, j, ExpressionStatement(), mt, i, int, l, 0xffffffffl, ExpressionStatement(), i, ExpressionStatement(), j, IfStatement(if), i, N, ExpressionStatement(), mt, 0, mt, N, 1, ExpressionStatement(), i, 1, IfStatement(if), j, seed.length, ExpressionStatement(), j, 0, ForStatement(for), int, k, N, 1, k, 0, k, VariableDeclarationStatement(), long, l0, mt, i, 0x7fffffffl, mt, i, 0, 0x80000000l, 0x0l, VariableDeclarationStatement(), long, l1, mt, i, 1, 0x7fffffffl, mt, i, 1, 0, 0x80000000l, 0x0l, VariableDeclarationStatement(), long, l, l0, l1, l1, 30, 1566083941l, i, ExpressionStatement(), mt, i, int, l, 0xffffffffL, ExpressionStatement(), i, IfStatement(if), i, N, ExpressionStatement(), mt, 0, mt, N, 1, ExpressionStatement(), i, 1, ExpressionStatement(), mt, 0, 0x80000000, ExpressionStatement(), clear]
org.apache.commons.math4.random:MersenneTwister:setSeed:long#[ExpressionStatement(), setSeed, int, int, seed, 32, int, seed, 0xffffffffl]
org.apache.commons.math4.random:MersenneTwister:next:int#[VariableDeclarationStatement(), int, y, IfStatement(if), mti, N, VariableDeclarationStatement(), int, mtNext, mt, 0, ForStatement(for), int, k, 0, k, N, M, k, VariableDeclarationStatement(), int, mtCurr, mtNext, ExpressionStatement(), mtNext, mt, k, 1, ExpressionStatement(), y, mtCurr, 0x80000000, mtNext, 0x7fffffff, ExpressionStatement(), mt, k, mt, k, M, y, 1, MAG01, y, 0x1, ForStatement(for), int, k, N, M, k, N, 1, k, VariableDeclarationStatement(), int, mtCurr, mtNext, ExpressionStatement(), mtNext, mt, k, 1, ExpressionStatement(), y, mtCurr, 0x80000000, mtNext, 0x7fffffff, ExpressionStatement(), mt, k, mt, k, M, N, y, 1, MAG01, y, 0x1, ExpressionStatement(), y, mtNext, 0x80000000, mt, 0, 0x7fffffff, ExpressionStatement(), mt, N, 1, mt, M, 1, y, 1, MAG01, y, 0x1, ExpressionStatement(), mti, 0, ExpressionStatement(), y, mt, mti, ExpressionStatement(), y, y, 11, ExpressionStatement(), y, y, 7, 0x9d2c5680, ExpressionStatement(), y, y, 15, 0xefc60000, ExpressionStatement(), y, y, 18, ReturnStatement(return), y, 32, bits]
org.apache.commons.math4.random:RandomAdaptor:createAdaptor:RandomGenerator#[ReturnStatement(return), new, RandomAdaptor, randomGenerator]
org.apache.commons.math4.random:RandomAdaptor:nextBoolean:null#[ReturnStatement(return), randomGenerator, nextBoolean]
org.apache.commons.math4.random:RandomAdaptor:nextBytes:byte[]#[ExpressionStatement(), randomGenerator, nextBytes, bytes]
org.apache.commons.math4.random:RandomAdaptor:nextDouble:null#[ReturnStatement(return), randomGenerator, nextDouble]
org.apache.commons.math4.random:RandomAdaptor:nextFloat:null#[ReturnStatement(return), randomGenerator, nextFloat]
org.apache.commons.math4.random:RandomAdaptor:nextGaussian:null#[ReturnStatement(return), randomGenerator, nextGaussian]
org.apache.commons.math4.random:RandomAdaptor:nextInt:null#[ReturnStatement(return), randomGenerator, nextInt]
org.apache.commons.math4.random:RandomAdaptor:nextInt:int#[ReturnStatement(return), randomGenerator, nextInt, n]
org.apache.commons.math4.random:RandomAdaptor:nextLong:null#[ReturnStatement(return), randomGenerator, nextLong]
org.apache.commons.math4.random:RandomAdaptor:setSeed:int#[IfStatement(if), randomGenerator, null, ExpressionStatement(), randomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomAdaptor:setSeed:int[]#[IfStatement(if), randomGenerator, null, ExpressionStatement(), randomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomAdaptor:setSeed:long#[IfStatement(if), randomGenerator, null, ExpressionStatement(), randomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomDataGenerator:nextHexString:int#[IfStatement(if), len, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.LENGTH, len, VariableDeclarationStatement(), RandomGenerator, ran, getRandomGenerator, VariableDeclarationStatement(), StringBuilder, outBuffer, new, StringBuilder, VariableDeclarationStatement(), byte, randomBytes, byte, len, 2, 1, ExpressionStatement(), ran, nextBytes, randomBytes, ForStatement(for), int, i, 0, i, randomBytes.length, i, VariableDeclarationStatement(), Integer, c, Integer, valueOf, randomBytes, i, VariableDeclarationStatement(), String, hex, Integer, toHexString, c, intValue, 128, IfStatement(if), hex, length, 1, ExpressionStatement(), hex, "0", hex, ExpressionStatement(), outBuffer, append, hex, ReturnStatement(return), outBuffer, toString, substring, 0, len]
org.apache.commons.math4.random:RandomDataGenerator:nextInt:int+int#[ReturnStatement(return), new, UniformIntegerDistribution, getRandomGenerator, lower, upper, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextLong:long+long#[IfStatement(if), lower, upper, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false, VariableDeclarationStatement(), final, long, max, upper, lower, 1, IfStatement(if), max, 0, VariableDeclarationStatement(), final, RandomGenerator, rng, getRandomGenerator, WhileStatement(while), true, VariableDeclarationStatement(), final, long, r, rng, nextLong, IfStatement(if), r, lower, r, upper, ReturnStatement(return), r, IfStatement(if), max, Integer.MAX_VALUE, ReturnStatement(return), lower, getRandomGenerator, nextInt, int, max, ReturnStatement(return), lower, nextLong, getRandomGenerator, max]
org.apache.commons.math4.random:RandomDataGenerator:nextLong:RandomGenerator+long#[IfStatement(if), n, 0, VariableDeclarationStatement(), final, byte, byteArray, byte, 8, VariableDeclarationStatement(), long, bits, VariableDeclarationStatement(), long, val, DoStatement(do), ExpressionStatement(), rng, nextBytes, byteArray, ExpressionStatement(), bits, 0, EnhancedForStatement(for), final, byte, b, byteArray, ExpressionStatement(), bits, bits, 8, long, b, 0xffL, ExpressionStatement(), bits, 0x7fffffffffffffffL, ExpressionStatement(), val, bits, n, bits, val, n, 1, 0, ReturnStatement(return), val, ThrowStatement(throw), new, NotStrictlyPositiveException, n]
org.apache.commons.math4.random:RandomDataGenerator:nextSecureHexString:int#[IfStatement(if), len, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.LENGTH, len, VariableDeclarationStatement(), final, RandomGenerator, secRan, getSecRan, VariableDeclarationStatement(), MessageDigest, alg, null, TryStatement(try), ExpressionStatement(), alg, MessageDigest, getInstance, "SHA-1", catch, NoSuchAlgorithmException, ex, ThrowStatement(throw), new, MathInternalError, ex, ExpressionStatement(), alg, reset, VariableDeclarationStatement(), int, numIter, len, 40, 1, VariableDeclarationStatement(), StringBuilder, outBuffer, new, StringBuilder, ForStatement(for), int, iter, 1, iter, numIter, 1, iter, VariableDeclarationStatement(), byte, randomBytes, byte, 40, ExpressionStatement(), secRan, nextBytes, randomBytes, ExpressionStatement(), alg, update, randomBytes, VariableDeclarationStatement(), byte, hash, alg, digest, ForStatement(for), int, i, 0, i, hash.length, i, VariableDeclarationStatement(), Integer, c, Integer, valueOf, hash, i, VariableDeclarationStatement(), String, hex, Integer, toHexString, c, intValue, 128, IfStatement(if), hex, length, 1, ExpressionStatement(), hex, "0", hex, ExpressionStatement(), outBuffer, append, hex, ReturnStatement(return), outBuffer, toString, substring, 0, len]
org.apache.commons.math4.random:RandomDataGenerator:nextSecureInt:int+int#[ReturnStatement(return), new, UniformIntegerDistribution, getSecRan, lower, upper, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextSecureLong:long+long#[IfStatement(if), lower, upper, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false, VariableDeclarationStatement(), final, RandomGenerator, rng, getSecRan, VariableDeclarationStatement(), final, long, max, upper, lower, 1, IfStatement(if), max, 0, WhileStatement(while), true, VariableDeclarationStatement(), final, long, r, rng, nextLong, IfStatement(if), r, lower, r, upper, ReturnStatement(return), r, IfStatement(if), max, Integer.MAX_VALUE, ReturnStatement(return), lower, rng, nextInt, int, max, ReturnStatement(return), lower, nextLong, rng, max]
org.apache.commons.math4.random:RandomDataGenerator:nextPoisson:double#[ReturnStatement(return), new, PoissonDistribution, getRandomGenerator, mean, PoissonDistribution.DEFAULT_EPSILON, PoissonDistribution.DEFAULT_MAX_ITERATIONS, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextGaussian:double+double#[IfStatement(if), sigma, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.STANDARD_DEVIATION, sigma, ReturnStatement(return), sigma, getRandomGenerator, nextGaussian, mu]
org.apache.commons.math4.random:RandomDataGenerator:nextExponential:double#[ReturnStatement(return), new, ExponentialDistribution, getRandomGenerator, mean, ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextGamma:double+double#[ReturnStatement(return), new, GammaDistribution, getRandomGenerator, shape, scale, GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextHypergeometric:int+int+int#[ReturnStatement(return), new, HypergeometricDistribution, getRandomGenerator, populationSize, numberOfSuccesses, sampleSize, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextPascal:int+double#[ReturnStatement(return), new, PascalDistribution, getRandomGenerator, r, p, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextT:double#[ReturnStatement(return), new, TDistribution, getRandomGenerator, df, TDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextWeibull:double+double#[ReturnStatement(return), new, WeibullDistribution, getRandomGenerator, shape, scale, WeibullDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextZipf:int+double#[ReturnStatement(return), new, ZipfDistribution, getRandomGenerator, numberOfElements, exponent, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextBeta:double+double#[ReturnStatement(return), new, BetaDistribution, getRandomGenerator, alpha, beta, BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextBinomial:int+double#[ReturnStatement(return), new, BinomialDistribution, getRandomGenerator, numberOfTrials, probabilityOfSuccess, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextCauchy:double+double#[ReturnStatement(return), new, CauchyDistribution, getRandomGenerator, median, scale, CauchyDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextChiSquare:double#[ReturnStatement(return), new, ChiSquaredDistribution, getRandomGenerator, df, ChiSquaredDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextF:double+double#[ReturnStatement(return), new, FDistribution, getRandomGenerator, numeratorDf, denominatorDf, FDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, sample]
org.apache.commons.math4.random:RandomDataGenerator:nextUniform:double+double#[ReturnStatement(return), nextUniform, lower, upper, false]
org.apache.commons.math4.random:RandomDataGenerator:nextUniform:double+double+boolean#[IfStatement(if), lower, upper, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false, IfStatement(if), Double, isInfinite, lower, ThrowStatement(throw), new, NotFiniteNumberException, LocalizedFormats.INFINITE_BOUND, lower, IfStatement(if), Double, isInfinite, upper, ThrowStatement(throw), new, NotFiniteNumberException, LocalizedFormats.INFINITE_BOUND, upper, IfStatement(if), Double, isNaN, lower, Double, isNaN, upper, ThrowStatement(throw), new, NotANumberException, VariableDeclarationStatement(), final, RandomGenerator, generator, getRandomGenerator, VariableDeclarationStatement(), double, u, generator, nextDouble, WhileStatement(while), lowerInclusive, u, 0.0, ExpressionStatement(), u, generator, nextDouble, ReturnStatement(return), u, upper, 1.0, u, lower]
org.apache.commons.math4.random:RandomDataGenerator:nextPermutation:int+int#[IfStatement(if), k, n, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.PERMUTATION_EXCEEDS_N, k, n, true, IfStatement(if), k, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.PERMUTATION_SIZE, k, VariableDeclarationStatement(), int, index, MathArrays, natural, n, ExpressionStatement(), MathArrays, shuffle, index, getRandomGenerator, ReturnStatement(return), MathArrays, copyOf, index, k]
org.apache.commons.math4.random:RandomDataGenerator:nextSample:Collection<?>+int#[VariableDeclarationStatement(), int, len, c, size, IfStatement(if), k, len, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, k, len, true, IfStatement(if), k, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_SAMPLES, k, VariableDeclarationStatement(), Object, objects, c, toArray, VariableDeclarationStatement(), int, index, nextPermutation, len, k, VariableDeclarationStatement(), Object, result, Object, k, ForStatement(for), int, i, 0, i, k, i, ExpressionStatement(), result, i, objects, index, i, ReturnStatement(return), result]
org.apache.commons.math4.random:RandomDataGenerator:reSeed:long#[ExpressionStatement(), getRandomGenerator, setSeed, seed]
org.apache.commons.math4.random:RandomDataGenerator:reSeedSecure:null#[ExpressionStatement(), getSecRan, setSeed, System, currentTimeMillis]
org.apache.commons.math4.random:RandomDataGenerator:reSeedSecure:long#[ExpressionStatement(), getSecRan, setSeed, seed]
org.apache.commons.math4.random:RandomDataGenerator:reSeed:null#[ExpressionStatement(), getRandomGenerator, setSeed, System, currentTimeMillis, System, identityHashCode, this]
org.apache.commons.math4.random:RandomDataGenerator:setSecureAlgorithm:String+String#[ExpressionStatement(), secRand, RandomGeneratorFactory, createRandomGenerator, SecureRandom, getInstance, algorithm, provider]
org.apache.commons.math4.random:RandomDataGenerator:getRandomGenerator:null#[IfStatement(if), rand, null, ExpressionStatement(), initRan, ReturnStatement(return), rand]
org.apache.commons.math4.random:RandomDataGenerator:initRan:null#[ExpressionStatement(), rand, new, Well19937c, System, currentTimeMillis, System, identityHashCode, this]
org.apache.commons.math4.random:RandomDataGenerator:getSecRan:null#[IfStatement(if), secRand, null, ExpressionStatement(), secRand, RandomGeneratorFactory, createRandomGenerator, new, SecureRandom, ExpressionStatement(), secRand, setSeed, System, currentTimeMillis, System, identityHashCode, this, ReturnStatement(return), secRand]
org.apache.commons.math4.random:RandomGeneratorFactory:createRandomGenerator:Random#[ReturnStatement(return), new, RandomGenerator, Override, public, void, setSeed, int, seed, ExpressionStatement(), rng, setSeed, long, seed, Override, public, void, setSeed, int, seed, ExpressionStatement(), rng, setSeed, convertToLong, seed, Override, public, void, setSeed, long, seed, ExpressionStatement(), rng, setSeed, seed, Override, public, void, nextBytes, byte, bytes, ExpressionStatement(), rng, nextBytes, bytes, Override, public, int, nextInt, ReturnStatement(return), rng, nextInt, Override, public, int, nextInt, int, n, IfStatement(if), n, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, n, ReturnStatement(return), rng, nextInt, n, Override, public, long, nextLong, ReturnStatement(return), rng, nextLong, Override, public, boolean, nextBoolean, ReturnStatement(return), rng, nextBoolean, Override, public, float, nextFloat, ReturnStatement(return), rng, nextFloat, Override, public, double, nextDouble, ReturnStatement(return), rng, nextDouble, Override, public, double, nextGaussian, ReturnStatement(return), rng, nextGaussian]
org.apache.commons.math4.random:RandomGeneratorFactory:convertToLong:int[]#[VariableDeclarationStatement(), final, long, prime, 4294967291l, VariableDeclarationStatement(), long, combined, 0l, EnhancedForStatement(for), int, s, seed, ExpressionStatement(), combined, combined, prime, s, ReturnStatement(return), combined]
org.apache.commons.math4.random:SobolSequenceGenerator:initFromStream:InputStream#[ForStatement(for), int, i, 1, i, BITS, i, ExpressionStatement(), direction, 0, i, 1l, BITS, i, VariableDeclarationStatement(), final, Charset, charset, Charset, forName, FILE_CHARSET, VariableDeclarationStatement(), final, BufferedReader, reader, new, BufferedReader, new, InputStreamReader, is, charset, VariableDeclarationStatement(), int, dim, 1, TryStatement(try), ExpressionStatement(), reader, readLine, VariableDeclarationStatement(), int, lineNumber, 2, VariableDeclarationStatement(), int, index, 1, VariableDeclarationStatement(), String, line, null, WhileStatement(while), line, reader, readLine, null, VariableDeclarationStatement(), StringTokenizer, st, new, StringTokenizer, line, " ", TryStatement(try), ExpressionStatement(), dim, Integer, parseInt, st, nextToken, IfStatement(if), dim, 2, dim, dimension, VariableDeclarationStatement(), final, int, s, Integer, parseInt, st, nextToken, VariableDeclarationStatement(), final, int, a, Integer, parseInt, st, nextToken, VariableDeclarationStatement(), final, int, m, int, s, 1, ForStatement(for), int, i, 1, i, s, i, ExpressionStatement(), m, i, Integer, parseInt, st, nextToken, ExpressionStatement(), initDirectionVector, index, a, m, IfStatement(if), dim, dimension, ReturnStatement(return), dim, catch, NoSuchElementException, e, ThrowStatement(throw), new, MathParseException, line, lineNumber, catch, NumberFormatException, e, ThrowStatement(throw), new, MathParseException, line, lineNumber, ExpressionStatement(), lineNumber, ExpressionStatement(), reader, close, ReturnStatement(return), dim]
org.apache.commons.math4.random:SobolSequenceGenerator:initDirectionVector:int+int+int[]#[VariableDeclarationStatement(), final, int, s, m.length, 1, ForStatement(for), int, i, 1, i, s, i, ExpressionStatement(), direction, d, i, long, m, i, BITS, i, ForStatement(for), int, i, s, 1, i, BITS, i, ExpressionStatement(), direction, d, i, direction, d, i, s, direction, d, i, s, s, ForStatement(for), int, k, 1, k, s, 1, k, ExpressionStatement(), direction, d, i, a, s, 1, k, 1, direction, d, i, k]
org.apache.commons.math4.random:SobolSequenceGenerator:nextVector:null#[VariableDeclarationStatement(), final, double, v, double, dimension, IfStatement(if), count, 0, ExpressionStatement(), count, ReturnStatement(return), v, VariableDeclarationStatement(), int, c, 1, VariableDeclarationStatement(), int, value, count, 1, WhileStatement(while), value, 1, 1, ExpressionStatement(), value, 1, ExpressionStatement(), c, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), x, i, direction, i, c, ExpressionStatement(), v, i, double, x, i, SCALE, ExpressionStatement(), count, ReturnStatement(return), v]
org.apache.commons.math4.random:SobolSequenceGenerator:skipTo:int#[IfStatement(if), index, 0, ExpressionStatement(), Arrays, fill, x, 0, VariableDeclarationStatement(), final, int, i, index, 1, VariableDeclarationStatement(), final, long, grayCode, i, i, 1, ForStatement(for), int, j, 0, j, dimension, j, VariableDeclarationStatement(), long, result, 0, ForStatement(for), int, k, 1, k, BITS, k, VariableDeclarationStatement(), final, long, shift, grayCode, k, 1, IfStatement(if), shift, 0, BreakStatement(break), VariableDeclarationStatement(), final, long, ik, shift, 1, ExpressionStatement(), result, ik, direction, j, k, ExpressionStatement(), x, j, result, ExpressionStatement(), count, index, ReturnStatement(return), nextVector]
org.apache.commons.math4.random:SobolSequenceGenerator:getNextIndex:null#[ReturnStatement(return), count]
org.apache.commons.math4.random:StableRandomGenerator:nextNormalizedDouble:null#[VariableDeclarationStatement(), double, omega, FastMath, log, generator, nextDouble, VariableDeclarationStatement(), double, phi, FastMath.PI, generator, nextDouble, 0.5, IfStatement(if), alpha, 2d, ReturnStatement(return), FastMath, sqrt, 2d, omega, FastMath, sin, phi, VariableDeclarationStatement(), double, x, IfStatement(if), beta, 0d, IfStatement(if), alpha, 1d, ExpressionStatement(), x, FastMath, tan, phi, ExpressionStatement(), x, FastMath, pow, omega, FastMath, cos, 1, alpha, phi, 1d, alpha, 1d, FastMath, sin, alpha, phi, FastMath, pow, FastMath, cos, phi, 1d, alpha, VariableDeclarationStatement(), double, cosPhi, FastMath, cos, phi, IfStatement(if), FastMath, abs, alpha, 1d, 1e-8, VariableDeclarationStatement(), double, alphaPhi, alpha, phi, VariableDeclarationStatement(), double, invAlphaPhi, phi, alphaPhi, ExpressionStatement(), x, FastMath, sin, alphaPhi, zeta, FastMath, cos, alphaPhi, cosPhi, FastMath, cos, invAlphaPhi, zeta, FastMath, sin, invAlphaPhi, FastMath, pow, omega, cosPhi, 1, alpha, alpha, VariableDeclarationStatement(), double, betaPhi, FastMath.PI, 2, beta, phi, ExpressionStatement(), x, 2d, FastMath.PI, betaPhi, FastMath, tan, phi, beta, FastMath, log, FastMath.PI, 2d, omega, cosPhi, betaPhi, IfStatement(if), alpha, 1d, ExpressionStatement(), x, beta, FastMath, tan, FastMath.PI, alpha, 2, ReturnStatement(return), x]
org.apache.commons.math4.random:SynchronizedRandomGenerator:setSeed:int#[ExpressionStatement(), wrapped, setSeed, seed]
org.apache.commons.math4.random:SynchronizedRandomGenerator:setSeed:int[]#[ExpressionStatement(), wrapped, setSeed, seed]
org.apache.commons.math4.random:SynchronizedRandomGenerator:setSeed:long#[ExpressionStatement(), wrapped, setSeed, seed]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextBytes:byte[]#[ExpressionStatement(), wrapped, nextBytes, bytes]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextInt:null#[ReturnStatement(return), wrapped, nextInt]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextInt:int#[ReturnStatement(return), wrapped, nextInt, n]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextLong:null#[ReturnStatement(return), wrapped, nextLong]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextBoolean:null#[ReturnStatement(return), wrapped, nextBoolean]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextFloat:null#[ReturnStatement(return), wrapped, nextFloat]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextDouble:null#[ReturnStatement(return), wrapped, nextDouble]
org.apache.commons.math4.random:SynchronizedRandomGenerator:nextGaussian:null#[ReturnStatement(return), wrapped, nextGaussian]
org.apache.commons.math4.random:UncorrelatedRandomVectorGenerator:nextVector:null#[VariableDeclarationStatement(), double, random, double, mean.length, ForStatement(for), int, i, 0, i, random.length, i, ExpressionStatement(), random, i, mean, i, standardDeviation, i, generator, nextNormalizedDouble, ReturnStatement(return), random]
org.apache.commons.math4.random:UniformRandomGenerator:nextNormalizedDouble:null#[ReturnStatement(return), SQRT3, 2, generator, nextDouble, 1.0]
org.apache.commons.math4.random:UnitSphereRandomVectorGenerator:nextVector:null#[VariableDeclarationStatement(), final, double, v, double, dimension, VariableDeclarationStatement(), double, normSq, 0, ForStatement(for), int, i, 0, i, dimension, i, VariableDeclarationStatement(), final, double, comp, rand, nextGaussian, ExpressionStatement(), v, i, comp, ExpressionStatement(), normSq, comp, comp, VariableDeclarationStatement(), final, double, f, 1, FastMath, sqrt, normSq, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), v, i, f, ReturnStatement(return), v]
org.apache.commons.math4.random:ValueServer:getNext:null#[SwitchStatement(switch), mode, SwitchCase(case), DIGEST_MODE, ReturnStatement(return), getNextDigest, SwitchCase(case), REPLAY_MODE, ReturnStatement(return), getNextReplay, SwitchCase(case), UNIFORM_MODE, ReturnStatement(return), getNextUniform, SwitchCase(case), EXPONENTIAL_MODE, ReturnStatement(return), getNextExponential, SwitchCase(case), GAUSSIAN_MODE, ReturnStatement(return), getNextGaussian, SwitchCase(case), CONSTANT_MODE, ReturnStatement(return), mu, SwitchCase(default), ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.UNKNOWN_MODE, mode, "DIGEST_MODE", DIGEST_MODE, "REPLAY_MODE", REPLAY_MODE, "UNIFORM_MODE", UNIFORM_MODE, "EXPONENTIAL_MODE", EXPONENTIAL_MODE, "GAUSSIAN_MODE", GAUSSIAN_MODE, "CONSTANT_MODE", CONSTANT_MODE]
org.apache.commons.math4.random:ValueServer:fill:double[]#[ForStatement(for), int, i, 0, i, values.length, i, ExpressionStatement(), values, i, getNext]
org.apache.commons.math4.random:ValueServer:fill:int#[VariableDeclarationStatement(), double, out, double, length, ForStatement(for), int, i, 0, i, length, i, ExpressionStatement(), out, i, getNext, ReturnStatement(return), out]
org.apache.commons.math4.random:ValueServer:computeDistribution:null#[ExpressionStatement(), computeDistribution, EmpiricalDistribution.DEFAULT_BIN_COUNT]
org.apache.commons.math4.random:ValueServer:computeDistribution:int#[ExpressionStatement(), empiricalDistribution, new, EmpiricalDistribution, binCount, randomData, getRandomGenerator, ExpressionStatement(), empiricalDistribution, load, valuesFileURL, ExpressionStatement(), mu, empiricalDistribution, getSampleStats, getMean, ExpressionStatement(), sigma, empiricalDistribution, getSampleStats, getStandardDeviation]
org.apache.commons.math4.random:ValueServer:getMode:null#[ReturnStatement(return), mode]
org.apache.commons.math4.random:ValueServer:setMode:int#[ExpressionStatement(), this, mode, mode]
org.apache.commons.math4.random:ValueServer:getValuesFileURL:null#[ReturnStatement(return), valuesFileURL]
org.apache.commons.math4.random:ValueServer:setValuesFileURL:String#[ExpressionStatement(), this, valuesFileURL, new, URL, url]
org.apache.commons.math4.random:ValueServer:setValuesFileURL:URL#[ExpressionStatement(), this, valuesFileURL, url]
org.apache.commons.math4.random:ValueServer:getEmpiricalDistribution:null#[ReturnStatement(return), empiricalDistribution]
org.apache.commons.math4.random:ValueServer:resetReplayFile:null#[IfStatement(if), filePointer, null, TryStatement(try), ExpressionStatement(), filePointer, close, ExpressionStatement(), filePointer, null, catch, IOException, ex, ExpressionStatement(), filePointer, new, BufferedReader, new, InputStreamReader, valuesFileURL, openStream, "UTF-8"]
org.apache.commons.math4.random:ValueServer:closeReplayFile:null#[IfStatement(if), filePointer, null, ExpressionStatement(), filePointer, close, ExpressionStatement(), filePointer, null]
org.apache.commons.math4.random:ValueServer:getMu:null#[ReturnStatement(return), mu]
org.apache.commons.math4.random:ValueServer:setMu:double#[ExpressionStatement(), this, mu, mu]
org.apache.commons.math4.random:ValueServer:getSigma:null#[ReturnStatement(return), sigma]
org.apache.commons.math4.random:ValueServer:setSigma:double#[ExpressionStatement(), this, sigma, sigma]
org.apache.commons.math4.random:ValueServer:reSeed:long#[ExpressionStatement(), randomData, reSeed, seed]
org.apache.commons.math4.random:ValueServer:getNextDigest:null#[IfStatement(if), empiricalDistribution, null, empiricalDistribution, getBinStats, size, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.DIGEST_NOT_INITIALIZED, ReturnStatement(return), empiricalDistribution, getNextValue]
org.apache.commons.math4.random:ValueServer:getNextReplay:null#[VariableDeclarationStatement(), String, str, null, IfStatement(if), filePointer, null, ExpressionStatement(), resetReplayFile, IfStatement(if), str, filePointer, readLine, null, ExpressionStatement(), closeReplayFile, ExpressionStatement(), resetReplayFile, IfStatement(if), str, filePointer, readLine, null, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.URL_CONTAINS_NO_DATA, valuesFileURL, ReturnStatement(return), Double, parseDouble, str]
org.apache.commons.math4.random:ValueServer:getNextUniform:null#[ReturnStatement(return), randomData, nextUniform, 0, 2, mu]
org.apache.commons.math4.random:ValueServer:getNextExponential:null#[ReturnStatement(return), randomData, nextExponential, mu]
org.apache.commons.math4.random:ValueServer:getNextGaussian:null#[ReturnStatement(return), randomData, nextGaussian, mu, sigma]
org.apache.commons.math4.random:Well1024a:next:int#[VariableDeclarationStatement(), final, int, indexRm1, TABLE, getIndexPred, index, VariableDeclarationStatement(), final, int, v0, v, index, VariableDeclarationStatement(), final, int, vM1, v, TABLE, getIndexM1, index, VariableDeclarationStatement(), final, int, vM2, v, TABLE, getIndexM2, index, VariableDeclarationStatement(), final, int, vM3, v, TABLE, getIndexM3, index, VariableDeclarationStatement(), final, int, z0, v, indexRm1, VariableDeclarationStatement(), final, int, z1, v0, vM1, vM1, 8, VariableDeclarationStatement(), final, int, z2, vM2, vM2, 19, vM3, vM3, 14, VariableDeclarationStatement(), final, int, z3, z1, z2, VariableDeclarationStatement(), final, int, z4, z0, z0, 11, z1, z1, 7, z2, z2, 13, ExpressionStatement(), v, index, z3, ExpressionStatement(), v, indexRm1, z4, ExpressionStatement(), index, indexRm1, ReturnStatement(return), z4, 32, bits]
org.apache.commons.math4.random:Well19937a:next:int#[VariableDeclarationStatement(), final, int, indexRm1, TABLE, getIndexPred, index, VariableDeclarationStatement(), final, int, indexRm2, TABLE, getIndexPred2, index, VariableDeclarationStatement(), final, int, v0, v, index, VariableDeclarationStatement(), final, int, vM1, v, TABLE, getIndexM1, index, VariableDeclarationStatement(), final, int, vM2, v, TABLE, getIndexM2, index, VariableDeclarationStatement(), final, int, vM3, v, TABLE, getIndexM3, index, VariableDeclarationStatement(), final, int, z0, 0x80000000, v, indexRm1, 0x7FFFFFFF, v, indexRm2, VariableDeclarationStatement(), final, int, z1, v0, v0, 25, vM1, vM1, 27, VariableDeclarationStatement(), final, int, z2, vM2, 9, vM3, vM3, 1, VariableDeclarationStatement(), final, int, z3, z1, z2, VariableDeclarationStatement(), final, int, z4, z0, z1, z1, 9, z2, z2, 21, z3, z3, 21, ExpressionStatement(), v, index, z3, ExpressionStatement(), v, indexRm1, z4, ExpressionStatement(), v, indexRm2, 0x80000000, ExpressionStatement(), index, indexRm1, ReturnStatement(return), z4, 32, bits]
org.apache.commons.math4.random:Well19937c:next:int#[VariableDeclarationStatement(), final, int, indexRm1, TABLE, getIndexPred, index, VariableDeclarationStatement(), final, int, indexRm2, TABLE, getIndexPred2, index, VariableDeclarationStatement(), final, int, v0, v, index, VariableDeclarationStatement(), final, int, vM1, v, TABLE, getIndexM1, index, VariableDeclarationStatement(), final, int, vM2, v, TABLE, getIndexM2, index, VariableDeclarationStatement(), final, int, vM3, v, TABLE, getIndexM3, index, VariableDeclarationStatement(), final, int, z0, 0x80000000, v, indexRm1, 0x7FFFFFFF, v, indexRm2, VariableDeclarationStatement(), final, int, z1, v0, v0, 25, vM1, vM1, 27, VariableDeclarationStatement(), final, int, z2, vM2, 9, vM3, vM3, 1, VariableDeclarationStatement(), final, int, z3, z1, z2, VariableDeclarationStatement(), int, z4, z0, z1, z1, 9, z2, z2, 21, z3, z3, 21, ExpressionStatement(), v, index, z3, ExpressionStatement(), v, indexRm1, z4, ExpressionStatement(), v, indexRm2, 0x80000000, ExpressionStatement(), index, indexRm1, ExpressionStatement(), z4, z4, 7, 0xe46e1700, ExpressionStatement(), z4, z4, 15, 0x9b868000, ReturnStatement(return), z4, 32, bits]
org.apache.commons.math4.random:Well44497a:next:int#[VariableDeclarationStatement(), final, int, indexRm1, TABLE, getIndexPred, index, VariableDeclarationStatement(), final, int, indexRm2, TABLE, getIndexPred2, index, VariableDeclarationStatement(), final, int, v0, v, index, VariableDeclarationStatement(), final, int, vM1, v, TABLE, getIndexM1, index, VariableDeclarationStatement(), final, int, vM2, v, TABLE, getIndexM2, index, VariableDeclarationStatement(), final, int, vM3, v, TABLE, getIndexM3, index, VariableDeclarationStatement(), final, int, z0, 0xFFFF8000, v, indexRm1, 0x00007FFF, v, indexRm2, VariableDeclarationStatement(), final, int, z1, v0, v0, 24, vM1, vM1, 30, VariableDeclarationStatement(), final, int, z2, vM2, vM2, 10, vM3, 26, VariableDeclarationStatement(), final, int, z3, z1, z2, VariableDeclarationStatement(), final, int, z2Prime, z2, 9, z2, 23, 0xfbffffff, VariableDeclarationStatement(), final, int, z2Second, z2, 0x00020000, 0, z2Prime, 0xb729fcec, z2Prime, VariableDeclarationStatement(), final, int, z4, z0, z1, z1, 20, z2Second, z3, ExpressionStatement(), v, index, z3, ExpressionStatement(), v, indexRm1, z4, ExpressionStatement(), v, indexRm2, 0xFFFF8000, ExpressionStatement(), index, indexRm1, ReturnStatement(return), z4, 32, bits]
org.apache.commons.math4.random:Well44497b:next:int#[VariableDeclarationStatement(), final, int, indexRm1, TABLE, getIndexPred, index, VariableDeclarationStatement(), final, int, indexRm2, TABLE, getIndexPred2, index, VariableDeclarationStatement(), final, int, v0, v, index, VariableDeclarationStatement(), final, int, vM1, v, TABLE, getIndexM1, index, VariableDeclarationStatement(), final, int, vM2, v, TABLE, getIndexM2, index, VariableDeclarationStatement(), final, int, vM3, v, TABLE, getIndexM3, index, VariableDeclarationStatement(), final, int, z0, 0xFFFF8000, v, indexRm1, 0x00007FFF, v, indexRm2, VariableDeclarationStatement(), final, int, z1, v0, v0, 24, vM1, vM1, 30, VariableDeclarationStatement(), final, int, z2, vM2, vM2, 10, vM3, 26, VariableDeclarationStatement(), final, int, z3, z1, z2, VariableDeclarationStatement(), final, int, z2Prime, z2, 9, z2, 23, 0xfbffffff, VariableDeclarationStatement(), final, int, z2Second, z2, 0x00020000, 0, z2Prime, 0xb729fcec, z2Prime, VariableDeclarationStatement(), int, z4, z0, z1, z1, 20, z2Second, z3, ExpressionStatement(), v, index, z3, ExpressionStatement(), v, indexRm1, z4, ExpressionStatement(), v, indexRm2, 0xFFFF8000, ExpressionStatement(), index, indexRm1, ExpressionStatement(), z4, z4, 7, 0x93dd1400, ExpressionStatement(), z4, z4, 15, 0xfa118000, ReturnStatement(return), z4, 32, bits]
org.apache.commons.math4.random:Well512a:next:int#[VariableDeclarationStatement(), final, int, indexRm1, TABLE, getIndexPred, index, VariableDeclarationStatement(), final, int, vi, v, index, VariableDeclarationStatement(), final, int, vi1, v, TABLE, getIndexM1, index, VariableDeclarationStatement(), final, int, vi2, v, TABLE, getIndexM2, index, VariableDeclarationStatement(), final, int, z0, v, indexRm1, VariableDeclarationStatement(), final, int, z1, vi, vi, 16, vi1, vi1, 15, VariableDeclarationStatement(), final, int, z2, vi2, vi2, 11, VariableDeclarationStatement(), final, int, z3, z1, z2, VariableDeclarationStatement(), final, int, z4, z0, z0, 2, z1, z1, 18, z2, 28, z3, z3, 5, 0xda442d24, ExpressionStatement(), v, index, z3, ExpressionStatement(), v, indexRm1, z4, ExpressionStatement(), index, indexRm1, ReturnStatement(return), z4, 32, bits]
org.apache.commons.math4.special:BesselJ:value:double#[ReturnStatement(return), BesselJ, value, order, x]
org.apache.commons.math4.special:BesselJ:value:double+double#[VariableDeclarationStatement(), final, int, n, int, order, VariableDeclarationStatement(), final, double, alpha, order, n, VariableDeclarationStatement(), final, int, nb, n, 1, VariableDeclarationStatement(), final, BesselJResult, res, rjBesl, x, alpha, nb, IfStatement(if), res.nVals, nb, ReturnStatement(return), res.vals, n, IfStatement(if), res.nVals, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.BESSEL_FUNCTION_BAD_ARGUMENT, order, x, IfStatement(if), FastMath, abs, res.vals, res.nVals, 1, 1e-100, ReturnStatement(return), res.vals, n, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.BESSEL_FUNCTION_FAILED_CONVERGENCE, order, x]
org.apache.commons.math4.special:BesselJ:rjBesl:double+double+int#[VariableDeclarationStatement(), final, double, b, double, nb, VariableDeclarationStatement(), int, ncalc, 0, VariableDeclarationStatement(), double, alpem, 0, VariableDeclarationStatement(), double, alp2em, 0, VariableDeclarationStatement(), final, int, magx, int, x, IfStatement(if), nb, 0, x, X_MIN, x, X_MAX, alpha, 0, alpha, 1, ExpressionStatement(), ncalc, nb, ForStatement(for), int, i, 0, i, nb, i, ExpressionStatement(), b, i, 0, VariableDeclarationStatement(), double, tempa, VariableDeclarationStatement(), double, tempb, VariableDeclarationStatement(), double, tempc, VariableDeclarationStatement(), double, tover, IfStatement(if), x, RTNSIG, ExpressionStatement(), tempa, 1, ExpressionStatement(), alpem, 1, alpha, VariableDeclarationStatement(), double, halfx, 0, IfStatement(if), x, ENMTEN, ExpressionStatement(), halfx, 0.5, x, IfStatement(if), alpha, 0, ExpressionStatement(), tempa, FastMath, pow, halfx, alpha, alpha, Gamma, gamma, alpha, ExpressionStatement(), tempb, 0, IfStatement(if), x, 1, 1, ExpressionStatement(), tempb, halfx, halfx, ExpressionStatement(), b, 0, tempa, tempa, tempb, alpem, IfStatement(if), x, 0, b, 0, 0, ExpressionStatement(), ncalc, 0, IfStatement(if), nb, 1, IfStatement(if), x, 0, ForStatement(for), int, n, 1, n, nb, n, ExpressionStatement(), b, n, 0, ExpressionStatement(), tempc, halfx, ExpressionStatement(), tover, tempb, 0, ENMTEN, tempb, 2, ENMTEN, x, ForStatement(for), int, n, 1, n, nb, n, ExpressionStatement(), tempa, alpem, ExpressionStatement(), alpem, 1, ExpressionStatement(), tempa, tempc, IfStatement(if), tempa, tover, alpem, ExpressionStatement(), tempa, 0, ExpressionStatement(), b, n, tempa, tempa, tempb, alpem, IfStatement(if), b, n, 0, ncalc, n, ExpressionStatement(), ncalc, n, IfStatement(if), x, 25.0, nb, magx, 1, VariableDeclarationStatement(), final, double, xc, FastMath, sqrt, PI2, x, VariableDeclarationStatement(), final, double, mul, 0.125, x, VariableDeclarationStatement(), final, double, xin, mul, mul, VariableDeclarationStatement(), int, m, 0, IfStatement(if), x, 130.0, ExpressionStatement(), m, 4, IfStatement(if), x, 35.0, ExpressionStatement(), m, 8, ExpressionStatement(), m, 11, VariableDeclarationStatement(), final, double, xm, 4.0, m, VariableDeclarationStatement(), double, t, double, int, x, TWOPI, 0.5, VariableDeclarationStatement(), final, double, z, x, t, TOWPI1, t, TWOPI2, alpha, 0.5, PI2, VariableDeclarationStatement(), double, vsin, FastMath, sin, z, VariableDeclarationStatement(), double, vcos, FastMath, cos, z, VariableDeclarationStatement(), double, gnu, 2, alpha, VariableDeclarationStatement(), double, capq, VariableDeclarationStatement(), double, capp, VariableDeclarationStatement(), double, s, VariableDeclarationStatement(), double, t1, VariableDeclarationStatement(), double, xk, ForStatement(for), int, i, 1, i, 2, i, ExpressionStatement(), s, xm, 1, gnu, xm, 1, gnu, xin, 0.5, ExpressionStatement(), t, gnu, xm, 3.0, gnu, xm, 3.0, ExpressionStatement(), capp, s, t, FACT, 2, m, ExpressionStatement(), t1, gnu, xm, 1, gnu, xm, 1, ExpressionStatement(), capq, s, t1, FACT, 2, m, 1, ExpressionStatement(), xk, xm, VariableDeclarationStatement(), int, k, 2, m, ExpressionStatement(), t1, t, ForStatement(for), int, j, 2, j, m, j, ExpressionStatement(), xk, 4.0, ExpressionStatement(), s, xk, 1, gnu, xk, 1, gnu, ExpressionStatement(), t, gnu, xk, 3.0, gnu, xk, 3.0, ExpressionStatement(), capp, capp, 1, FACT, k, 2, s, t, xin, ExpressionStatement(), capq, capq, 1, FACT, k, 1, s, t1, xin, ExpressionStatement(), k, 2, ExpressionStatement(), t1, t, ExpressionStatement(), capp, 1, ExpressionStatement(), capq, capq, 1, gnu, gnu, 1, 0.125, x, ExpressionStatement(), b, i, 1, xc, capp, vcos, capq, vsin, IfStatement(if), nb, 1, ReturnStatement(return), new, BesselJResult, MathArrays, copyOf, b, b.length, ncalc, ExpressionStatement(), t, vsin, ExpressionStatement(), vsin, vcos, ExpressionStatement(), vcos, t, ExpressionStatement(), gnu, 2.0, IfStatement(if), nb, 2, ExpressionStatement(), gnu, 2, alpha, 2.0, ForStatement(for), int, j, 2, j, nb, j, ExpressionStatement(), b, j, gnu, b, j, 1, x, b, j, 2, ExpressionStatement(), gnu, 2.0, VariableDeclarationStatement(), final, int, nbmx, nb, magx, VariableDeclarationStatement(), int, n, magx, 1, VariableDeclarationStatement(), int, nstart, 0, VariableDeclarationStatement(), int, nend, 0, VariableDeclarationStatement(), double, en, 2, n, alpha, VariableDeclarationStatement(), double, plast, 1, VariableDeclarationStatement(), double, p, en, x, VariableDeclarationStatement(), double, pold, VariableDeclarationStatement(), double, test, 2, ENSIG, VariableDeclarationStatement(), boolean, readyToInitialize, false, IfStatement(if), nbmx, 3, ExpressionStatement(), tover, ENTEN, ENSIG, ExpressionStatement(), nstart, magx, 2, ExpressionStatement(), nend, nb, 1, ExpressionStatement(), en, 2, nstart, 1, alpha, VariableDeclarationStatement(), double, psave, VariableDeclarationStatement(), double, psavel, ForStatement(for), int, k, nstart, k, nend, k, ExpressionStatement(), n, k, ExpressionStatement(), en, 2.0, ExpressionStatement(), pold, plast, ExpressionStatement(), plast, p, ExpressionStatement(), p, en, plast, x, pold, IfStatement(if), p, tover, ExpressionStatement(), tover, ENTEN, ExpressionStatement(), p, tover, ExpressionStatement(), plast, tover, ExpressionStatement(), psave, p, ExpressionStatement(), psavel, plast, ExpressionStatement(), nstart, n, 1, DoStatement(do), ExpressionStatement(), n, 1, ExpressionStatement(), en, 2.0, ExpressionStatement(), pold, plast, ExpressionStatement(), plast, p, ExpressionStatement(), p, en, plast, x, pold, p, 1, ExpressionStatement(), tempb, en, x, ExpressionStatement(), test, pold, plast, 0.5, 0.5, tempb, tempb, ExpressionStatement(), test, ENSIG, ExpressionStatement(), p, plast, tover, ExpressionStatement(), n, 1, ExpressionStatement(), en, 2.0, ExpressionStatement(), nend, FastMath, min, nb, n, ForStatement(for), int, l, nstart, l, nend, l, ExpressionStatement(), pold, psavel, ExpressionStatement(), psavel, psave, ExpressionStatement(), psave, en, psavel, x, pold, IfStatement(if), psave, psavel, test, ExpressionStatement(), ncalc, l, 1, ExpressionStatement(), readyToInitialize, true, BreakStatement(break), ExpressionStatement(), ncalc, nend, ExpressionStatement(), readyToInitialize, true, BreakStatement(break), IfStatement(if), readyToInitialize, ExpressionStatement(), n, nend, ExpressionStatement(), en, 2, n, alpha, ExpressionStatement(), test, FastMath, max, test, FastMath, sqrt, plast, ENSIG, FastMath, sqrt, 2, p, IfStatement(if), readyToInitialize, DoStatement(do), ExpressionStatement(), n, 1, ExpressionStatement(), en, 2.0, ExpressionStatement(), pold, plast, ExpressionStatement(), plast, p, ExpressionStatement(), p, en, plast, x, pold, p, test, ExpressionStatement(), n, 1, ExpressionStatement(), en, 2.0, ExpressionStatement(), tempb, 0, ExpressionStatement(), tempa, 1, p, VariableDeclarationStatement(), int, m, 2, n, 4, n, 2, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), double, em, double, n, 2, ExpressionStatement(), alpem, em, 1, alpha, ExpressionStatement(), alp2em, 2, em, alpha, IfStatement(if), m, 0, ExpressionStatement(), sum, tempa, alpem, alp2em, em, ExpressionStatement(), nend, n, nb, VariableDeclarationStatement(), boolean, readyToNormalize, false, VariableDeclarationStatement(), boolean, calculatedB0, false, ForStatement(for), int, l, 1, l, nend, l, ExpressionStatement(), n, 1, ExpressionStatement(), en, 2.0, ExpressionStatement(), tempc, tempb, ExpressionStatement(), tempb, tempa, ExpressionStatement(), tempa, en, tempb, x, tempc, ExpressionStatement(), m, 2, m, IfStatement(if), m, 0, ExpressionStatement(), em, 1, ExpressionStatement(), alp2em, 2, em, alpha, IfStatement(if), n, 1, BreakStatement(break), ExpressionStatement(), alpem, em, 1, alpha, IfStatement(if), alpem, 0, ExpressionStatement(), alpem, 1, ExpressionStatement(), sum, sum, tempa, alp2em, alpem, em, ExpressionStatement(), b, n, 1, tempa, IfStatement(if), nend, 0, IfStatement(if), nb, 1, ExpressionStatement(), alp2em, alpha, IfStatement(if), alpha, 1, 1, ExpressionStatement(), alp2em, 1, ExpressionStatement(), sum, b, 0, alp2em, ExpressionStatement(), readyToNormalize, true, ExpressionStatement(), n, 1, ExpressionStatement(), en, 2.0, ExpressionStatement(), b, n, 1, en, tempa, x, tempb, IfStatement(if), n, 1, ExpressionStatement(), calculatedB0, true, ExpressionStatement(), m, 2, m, IfStatement(if), m, 0, ExpressionStatement(), em, 1, ExpressionStatement(), alp2em, 2, em, alpha, ExpressionStatement(), alpem, em, 1, alpha, IfStatement(if), alpem, 0, ExpressionStatement(), alpem, 1, ExpressionStatement(), sum, sum, b, n, 1, alp2em, alpem, em, IfStatement(if), readyToNormalize, calculatedB0, ExpressionStatement(), nend, n, 2, IfStatement(if), nend, 0, ForStatement(for), int, l, 1, l, nend, l, ExpressionStatement(), n, 1, ExpressionStatement(), en, 2.0, ExpressionStatement(), b, n, 1, en, b, n, x, b, n, 1, ExpressionStatement(), m, 2, m, IfStatement(if), m, 0, ExpressionStatement(), em, 1, ExpressionStatement(), alp2em, 2, em, alpha, ExpressionStatement(), alpem, em, 1, alpha, IfStatement(if), alpem, 0, ExpressionStatement(), alpem, 1, ExpressionStatement(), sum, sum, b, n, 1, alp2em, alpem, em, IfStatement(if), readyToNormalize, IfStatement(if), calculatedB0, ExpressionStatement(), b, 0, 2.0, alpha, 1, b, 1, x, b, 2, ExpressionStatement(), em, 1, ExpressionStatement(), alp2em, 2, em, alpha, IfStatement(if), alp2em, 0, ExpressionStatement(), alp2em, 1, ExpressionStatement(), sum, b, 0, alp2em, IfStatement(if), FastMath, abs, alpha, 1e-16, ExpressionStatement(), sum, Gamma, gamma, alpha, FastMath, pow, x, 0.5, alpha, ExpressionStatement(), tempa, ENMTEN, IfStatement(if), sum, 1, ExpressionStatement(), tempa, sum, ForStatement(for), n, 0, n, nb, n, IfStatement(if), FastMath, abs, b, n, tempa, ExpressionStatement(), b, n, 0, ExpressionStatement(), b, n, sum, IfStatement(if), b.length, 0, ExpressionStatement(), b, 0, 0, ExpressionStatement(), ncalc, FastMath, min, nb, 0, 1, ReturnStatement(return), new, BesselJResult, MathArrays, copyOf, b, b.length, ncalc]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double#[ReturnStatement(return), regularizedBeta, x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double+double#[ReturnStatement(return), regularizedBeta, x, a, b, epsilon, Integer.MAX_VALUE]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double+int#[ReturnStatement(return), regularizedBeta, x, a, b, DEFAULT_EPSILON, maxIterations]
org.apache.commons.math4.special:Beta:regularizedBeta:double+double+double+double+int#[VariableDeclarationStatement(), double, ret, IfStatement(if), Double, isNaN, x, Double, isNaN, a, Double, isNaN, b, x, 0, x, 1, a, 0, b, 0, ExpressionStatement(), ret, Double.NaN, IfStatement(if), x, a, 1, 2, b, a, 1, x, b, 1, 2, b, a, ExpressionStatement(), ret, 1, regularizedBeta, 1, x, b, a, epsilon, maxIterations, VariableDeclarationStatement(), ContinuedFraction, fraction, new, ContinuedFraction, Override, protected, double, getB, int, n, double, x, VariableDeclarationStatement(), double, ret, VariableDeclarationStatement(), double, m, IfStatement(if), n, 2, 0, ExpressionStatement(), m, n, 2.0, ExpressionStatement(), ret, m, b, m, x, a, 2, m, 1, a, 2, m, ExpressionStatement(), m, n, 1.0, 2.0, ExpressionStatement(), ret, a, m, a, b, m, x, a, 2, m, a, 2, m, 1.0, ReturnStatement(return), ret, Override, protected, double, getA, int, n, double, x, ReturnStatement(return), 1.0, ExpressionStatement(), ret, FastMath, exp, a, FastMath, log, x, b, FastMath, log1p, x, FastMath, log, a, logBeta, a, b, 1.0, fraction, evaluate, x, epsilon, maxIterations, ReturnStatement(return), ret]
org.apache.commons.math4.special:Beta:logGammaSum:double+double#[IfStatement(if), a, 1.0, a, 2.0, ThrowStatement(throw), new, OutOfRangeException, a, 1.0, 2.0, IfStatement(if), b, 1.0, b, 2.0, ThrowStatement(throw), new, OutOfRangeException, b, 1.0, 2.0, VariableDeclarationStatement(), final, double, x, a, 1.0, b, 1.0, IfStatement(if), x, 0.5, ReturnStatement(return), Gamma, logGamma1p, 1.0, x, IfStatement(if), x, 1.5, ReturnStatement(return), Gamma, logGamma1p, x, FastMath, log1p, x, ReturnStatement(return), Gamma, logGamma1p, x, 1.0, FastMath, log, x, 1.0, x]
org.apache.commons.math4.special:Beta:logGammaMinusLogGammaSum:double+double#[IfStatement(if), a, 0.0, ThrowStatement(throw), new, NumberIsTooSmallException, a, 0.0, true, IfStatement(if), b, 10.0, ThrowStatement(throw), new, NumberIsTooSmallException, b, 10.0, true, VariableDeclarationStatement(), final, double, d, VariableDeclarationStatement(), final, double, w, IfStatement(if), a, b, ExpressionStatement(), d, b, a, 0.5, ExpressionStatement(), w, deltaMinusDeltaSum, a, b, ExpressionStatement(), d, a, b, 0.5, ExpressionStatement(), w, deltaMinusDeltaSum, b, a, VariableDeclarationStatement(), final, double, u, d, FastMath, log1p, a, b, VariableDeclarationStatement(), final, double, v, a, FastMath, log, b, 1.0, ReturnStatement(return), u, v, w, u, v, w, v, u]
org.apache.commons.math4.special:Beta:deltaMinusDeltaSum:double+double#[IfStatement(if), a, 0, a, b, ThrowStatement(throw), new, OutOfRangeException, a, 0, b, IfStatement(if), b, 10, ThrowStatement(throw), new, NumberIsTooSmallException, b, 10, true, VariableDeclarationStatement(), final, double, h, a, b, VariableDeclarationStatement(), final, double, p, h, 1.0, h, VariableDeclarationStatement(), final, double, q, 1.0, 1.0, h, VariableDeclarationStatement(), final, double, q2, q, q, VariableDeclarationStatement(), final, double, s, double, DELTA.length, ExpressionStatement(), s, 0, 1.0, ForStatement(for), int, i, 1, i, s.length, i, ExpressionStatement(), s, i, 1.0, q, q2, s, i, 1, VariableDeclarationStatement(), final, double, sqrtT, 10.0, b, VariableDeclarationStatement(), final, double, t, sqrtT, sqrtT, VariableDeclarationStatement(), double, w, DELTA, DELTA.length, 1, s, s.length, 1, ForStatement(for), int, i, DELTA.length, 2, i, 0, i, ExpressionStatement(), w, t, w, DELTA, i, s, i, ReturnStatement(return), w, p, b]
org.apache.commons.math4.special:Beta:sumDeltaMinusDeltaSum:double+double#[IfStatement(if), p, 10.0, ThrowStatement(throw), new, NumberIsTooSmallException, p, 10.0, true, IfStatement(if), q, 10.0, ThrowStatement(throw), new, NumberIsTooSmallException, q, 10.0, true, VariableDeclarationStatement(), final, double, a, FastMath, min, p, q, VariableDeclarationStatement(), final, double, b, FastMath, max, p, q, VariableDeclarationStatement(), final, double, sqrtT, 10.0, a, VariableDeclarationStatement(), final, double, t, sqrtT, sqrtT, VariableDeclarationStatement(), double, z, DELTA, DELTA.length, 1, ForStatement(for), int, i, DELTA.length, 2, i, 0, i, ExpressionStatement(), z, t, z, DELTA, i, ReturnStatement(return), z, a, deltaMinusDeltaSum, a, b]
org.apache.commons.math4.special:Beta:logBeta:double+double#[IfStatement(if), Double, isNaN, p, Double, isNaN, q, p, 0.0, q, 0.0, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), final, double, a, FastMath, min, p, q, VariableDeclarationStatement(), final, double, b, FastMath, max, p, q, IfStatement(if), a, 10.0, VariableDeclarationStatement(), final, double, w, sumDeltaMinusDeltaSum, a, b, VariableDeclarationStatement(), final, double, h, a, b, VariableDeclarationStatement(), final, double, c, h, 1.0, h, VariableDeclarationStatement(), final, double, u, a, 0.5, FastMath, log, c, VariableDeclarationStatement(), final, double, v, b, FastMath, log1p, h, IfStatement(if), u, v, ReturnStatement(return), 0.5, FastMath, log, b, HALF_LOG_TWO_PI, w, u, v, ReturnStatement(return), 0.5, FastMath, log, b, HALF_LOG_TWO_PI, w, v, u, IfStatement(if), a, 2.0, IfStatement(if), b, 1000.0, VariableDeclarationStatement(), final, int, n, int, FastMath, floor, a, 1.0, VariableDeclarationStatement(), double, prod, 1.0, VariableDeclarationStatement(), double, ared, a, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), ared, 1.0, ExpressionStatement(), prod, ared, 1.0, ared, b, ReturnStatement(return), FastMath, log, prod, n, FastMath, log, b, Gamma, logGamma, ared, logGammaMinusLogGammaSum, ared, b, VariableDeclarationStatement(), double, prod1, 1.0, VariableDeclarationStatement(), double, ared, a, WhileStatement(while), ared, 2.0, ExpressionStatement(), ared, 1.0, VariableDeclarationStatement(), final, double, h, ared, b, ExpressionStatement(), prod1, h, 1.0, h, IfStatement(if), b, 10.0, VariableDeclarationStatement(), double, prod2, 1.0, VariableDeclarationStatement(), double, bred, b, WhileStatement(while), bred, 2.0, ExpressionStatement(), bred, 1.0, ExpressionStatement(), prod2, bred, ared, bred, ReturnStatement(return), FastMath, log, prod1, FastMath, log, prod2, Gamma, logGamma, ared, Gamma, logGamma, bred, logGammaSum, ared, bred, ReturnStatement(return), FastMath, log, prod1, Gamma, logGamma, ared, logGammaMinusLogGammaSum, ared, b, IfStatement(if), a, 1.0, IfStatement(if), b, 2.0, IfStatement(if), b, 10.0, VariableDeclarationStatement(), double, prod, 1.0, VariableDeclarationStatement(), double, bred, b, WhileStatement(while), bred, 2.0, ExpressionStatement(), bred, 1.0, ExpressionStatement(), prod, bred, a, bred, ReturnStatement(return), FastMath, log, prod, Gamma, logGamma, a, Gamma, logGamma, bred, logGammaSum, a, bred, ReturnStatement(return), Gamma, logGamma, a, logGammaMinusLogGammaSum, a, b, ReturnStatement(return), Gamma, logGamma, a, Gamma, logGamma, b, logGammaSum, a, b, IfStatement(if), b, 10.0, ReturnStatement(return), Gamma, logGamma, a, logGammaMinusLogGammaSum, a, b, ReturnStatement(return), FastMath, log, Gamma, gamma, a, Gamma, gamma, b, Gamma, gamma, a, b]
org.apache.commons.math4.special:Erf:erf:double#[IfStatement(if), FastMath, abs, x, 40, ReturnStatement(return), x, 0, 1, 1, VariableDeclarationStatement(), final, double, ret, Gamma, regularizedGammaP, 0.5, x, x, 1.0e-15, 10000, ReturnStatement(return), x, 0, ret, ret]
org.apache.commons.math4.special:Erf:erfc:double#[IfStatement(if), FastMath, abs, x, 40, ReturnStatement(return), x, 0, 0, 2, VariableDeclarationStatement(), final, double, ret, Gamma, regularizedGammaQ, 0.5, x, x, 1.0e-15, 10000, ReturnStatement(return), x, 0, 2, ret, ret]
org.apache.commons.math4.special:Erf:erf:double+double#[IfStatement(if), x1, x2, ReturnStatement(return), erf, x2, x1, ReturnStatement(return), x1, X_CRIT, x2, 0.0, erfc, x2, erfc, x1, erf, x2, erf, x1, x2, X_CRIT, x1, 0.0, erfc, x1, erfc, x2, erf, x2, erf, x1]
org.apache.commons.math4.special:Erf:erfInv:double#[VariableDeclarationStatement(), double, w, FastMath, log, 1.0, x, 1.0, x, VariableDeclarationStatement(), double, p, IfStatement(if), w, 6.25, ExpressionStatement(), w, 3.125, ExpressionStatement(), p, 3.6444120640178196996e-21, ExpressionStatement(), p, 1.685059138182016589e-19, p, w, ExpressionStatement(), p, 1.2858480715256400167e-18, p, w, ExpressionStatement(), p, 1.115787767802518096e-17, p, w, ExpressionStatement(), p, 1.333171662854620906e-16, p, w, ExpressionStatement(), p, 2.0972767875968561637e-17, p, w, ExpressionStatement(), p, 6.6376381343583238325e-15, p, w, ExpressionStatement(), p, 4.0545662729752068639e-14, p, w, ExpressionStatement(), p, 8.1519341976054721522e-14, p, w, ExpressionStatement(), p, 2.6335093153082322977e-12, p, w, ExpressionStatement(), p, 1.2975133253453532498e-11, p, w, ExpressionStatement(), p, 5.4154120542946279317e-11, p, w, ExpressionStatement(), p, 1.051212273321532285e-09, p, w, ExpressionStatement(), p, 4.1126339803469836976e-09, p, w, ExpressionStatement(), p, 2.9070369957882005086e-08, p, w, ExpressionStatement(), p, 4.2347877827932403518e-07, p, w, ExpressionStatement(), p, 1.3654692000834678645e-06, p, w, ExpressionStatement(), p, 1.3882523362786468719e-05, p, w, ExpressionStatement(), p, 0.0001867342080340571352, p, w, ExpressionStatement(), p, 0.00074070253416626697512, p, w, ExpressionStatement(), p, 0.0060336708714301490533, p, w, ExpressionStatement(), p, 0.24015818242558961693, p, w, ExpressionStatement(), p, 1.6536545626831027356, p, w, IfStatement(if), w, 16.0, ExpressionStatement(), w, FastMath, sqrt, w, 3.25, ExpressionStatement(), p, 2.2137376921775787049e-09, ExpressionStatement(), p, 9.0756561938885390979e-08, p, w, ExpressionStatement(), p, 2.7517406297064545428e-07, p, w, ExpressionStatement(), p, 1.8239629214389227755e-08, p, w, ExpressionStatement(), p, 1.5027403968909827627e-06, p, w, ExpressionStatement(), p, 4.013867526981545969e-06, p, w, ExpressionStatement(), p, 2.9234449089955446044e-06, p, w, ExpressionStatement(), p, 1.2475304481671778723e-05, p, w, ExpressionStatement(), p, 4.7318229009055733981e-05, p, w, ExpressionStatement(), p, 6.8284851459573175448e-05, p, w, ExpressionStatement(), p, 2.4031110387097893999e-05, p, w, ExpressionStatement(), p, 0.0003550375203628474796, p, w, ExpressionStatement(), p, 0.00095328937973738049703, p, w, ExpressionStatement(), p, 0.0016882755560235047313, p, w, ExpressionStatement(), p, 0.0024914420961078508066, p, w, ExpressionStatement(), p, 0.0037512085075692412107, p, w, ExpressionStatement(), p, 0.005370914553590063617, p, w, ExpressionStatement(), p, 1.0052589676941592334, p, w, ExpressionStatement(), p, 3.0838856104922207635, p, w, IfStatement(if), Double, isInfinite, w, ExpressionStatement(), w, FastMath, sqrt, w, 5.0, ExpressionStatement(), p, 2.7109920616438573243e-11, ExpressionStatement(), p, 2.5556418169965252055e-10, p, w, ExpressionStatement(), p, 1.5076572693500548083e-09, p, w, ExpressionStatement(), p, 3.7894654401267369937e-09, p, w, ExpressionStatement(), p, 7.6157012080783393804e-09, p, w, ExpressionStatement(), p, 1.4960026627149240478e-08, p, w, ExpressionStatement(), p, 2.9147953450901080826e-08, p, w, ExpressionStatement(), p, 6.7711997758452339498e-08, p, w, ExpressionStatement(), p, 2.2900482228026654717e-07, p, w, ExpressionStatement(), p, 9.9298272942317002539e-07, p, w, ExpressionStatement(), p, 4.5260625972231537039e-06, p, w, ExpressionStatement(), p, 1.9681778105531670567e-05, p, w, ExpressionStatement(), p, 7.5995277030017761139e-05, p, w, ExpressionStatement(), p, 0.00021503011930044477347, p, w, ExpressionStatement(), p, 0.00013871931833623122026, p, w, ExpressionStatement(), p, 1.0103004648645343977, p, w, ExpressionStatement(), p, 4.8499064014085844221, p, w, ExpressionStatement(), p, Double.POSITIVE_INFINITY, ReturnStatement(return), p, x]
org.apache.commons.math4.special:Erf:erfcInv:double#[ReturnStatement(return), erfInv, 1, x]
org.apache.commons.math4.special:Gamma:logGamma:double#[VariableDeclarationStatement(), double, ret, IfStatement(if), Double, isNaN, x, x, 0.0, ExpressionStatement(), ret, Double.NaN, IfStatement(if), x, 0.5, ReturnStatement(return), logGamma1p, x, FastMath, log, x, IfStatement(if), x, 2.5, ReturnStatement(return), logGamma1p, x, 0.5, 0.5, IfStatement(if), x, 8.0, VariableDeclarationStatement(), final, int, n, int, FastMath, floor, x, 1.5, VariableDeclarationStatement(), double, prod, 1.0, ForStatement(for), int, i, 1, i, n, i, ExpressionStatement(), prod, x, i, ReturnStatement(return), logGamma1p, x, n, 1, FastMath, log, prod, VariableDeclarationStatement(), double, sum, lanczos, x, VariableDeclarationStatement(), double, tmp, x, LANCZOS_G, .5, ExpressionStatement(), ret, x, .5, FastMath, log, tmp, tmp, HALF_LOG_2_PI, FastMath, log, sum, x, ReturnStatement(return), ret]
org.apache.commons.math4.special:Gamma:regularizedGammaP:double+double#[ReturnStatement(return), regularizedGammaP, a, x, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.special:Gamma:regularizedGammaP:double+double+double+int#[VariableDeclarationStatement(), double, ret, IfStatement(if), Double, isNaN, a, Double, isNaN, x, a, 0.0, x, 0.0, ExpressionStatement(), ret, Double.NaN, IfStatement(if), x, 0.0, ExpressionStatement(), ret, 0.0, IfStatement(if), x, a, 1, ExpressionStatement(), ret, 1.0, regularizedGammaQ, a, x, epsilon, maxIterations, VariableDeclarationStatement(), double, n, 0.0, VariableDeclarationStatement(), double, an, 1.0, a, VariableDeclarationStatement(), double, sum, an, WhileStatement(while), FastMath, abs, an, sum, epsilon, n, maxIterations, sum, Double.POSITIVE_INFINITY, ExpressionStatement(), n, 1.0, ExpressionStatement(), an, x, a, n, ExpressionStatement(), sum, an, IfStatement(if), n, maxIterations, ThrowStatement(throw), new, MaxCountExceededException, maxIterations, IfStatement(if), Double, isInfinite, sum, ExpressionStatement(), ret, 1.0, ExpressionStatement(), ret, FastMath, exp, x, a, FastMath, log, x, logGamma, a, sum, ReturnStatement(return), ret]
org.apache.commons.math4.special:Gamma:regularizedGammaQ:double+double#[ReturnStatement(return), regularizedGammaQ, a, x, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.special:Gamma:regularizedGammaQ:double+double+double+int#[VariableDeclarationStatement(), double, ret, IfStatement(if), Double, isNaN, a, Double, isNaN, x, a, 0.0, x, 0.0, ExpressionStatement(), ret, Double.NaN, IfStatement(if), x, 0.0, ExpressionStatement(), ret, 1.0, IfStatement(if), x, a, 1.0, ExpressionStatement(), ret, 1.0, regularizedGammaP, a, x, epsilon, maxIterations, VariableDeclarationStatement(), ContinuedFraction, cf, new, ContinuedFraction, Override, protected, double, getA, int, n, double, x, ReturnStatement(return), 2.0, n, 1.0, a, x, Override, protected, double, getB, int, n, double, x, ReturnStatement(return), n, a, n, ExpressionStatement(), ret, 1.0, cf, evaluate, x, epsilon, maxIterations, ExpressionStatement(), ret, FastMath, exp, x, a, FastMath, log, x, logGamma, a, ret, ReturnStatement(return), ret]
org.apache.commons.math4.special:Gamma:digamma:double#[IfStatement(if), Double, isNaN, x, Double, isInfinite, x, ReturnStatement(return), x, IfStatement(if), x, 0, x, S_LIMIT, ReturnStatement(return), GAMMA, 1, x, IfStatement(if), x, C_LIMIT, VariableDeclarationStatement(), double, inv, 1, x, x, ReturnStatement(return), FastMath, log, x, 0.5, x, inv, 1.0, 12, inv, 1.0, 120, inv, 252, ReturnStatement(return), digamma, x, 1, 1, x]
org.apache.commons.math4.special:Gamma:trigamma:double#[IfStatement(if), Double, isNaN, x, Double, isInfinite, x, ReturnStatement(return), x, IfStatement(if), x, 0, x, S_LIMIT, ReturnStatement(return), 1, x, x, IfStatement(if), x, C_LIMIT, VariableDeclarationStatement(), double, inv, 1, x, x, ReturnStatement(return), 1, x, inv, 2, inv, x, 1.0, 6, inv, 1.0, 30, inv, 42, ReturnStatement(return), trigamma, x, 1, 1, x, x]
org.apache.commons.math4.special:Gamma:lanczos:double#[VariableDeclarationStatement(), double, sum, 0.0, ForStatement(for), int, i, LANCZOS.length, 1, i, 0, i, ExpressionStatement(), sum, LANCZOS, i, x, i, ReturnStatement(return), sum, LANCZOS, 0]
org.apache.commons.math4.special:Gamma:invGamma1pm1:double#[IfStatement(if), x, 0.5, ThrowStatement(throw), new, NumberIsTooSmallException, x, 0.5, true, IfStatement(if), x, 1.5, ThrowStatement(throw), new, NumberIsTooLargeException, x, 1.5, true, VariableDeclarationStatement(), final, double, ret, VariableDeclarationStatement(), final, double, t, x, 0.5, x, x, 0.5, 0.5, IfStatement(if), t, 0.0, VariableDeclarationStatement(), final, double, a, INV_GAMMA1P_M1_A0, t, INV_GAMMA1P_M1_A1, VariableDeclarationStatement(), double, b, INV_GAMMA1P_M1_B8, ExpressionStatement(), b, INV_GAMMA1P_M1_B7, t, b, ExpressionStatement(), b, INV_GAMMA1P_M1_B6, t, b, ExpressionStatement(), b, INV_GAMMA1P_M1_B5, t, b, ExpressionStatement(), b, INV_GAMMA1P_M1_B4, t, b, ExpressionStatement(), b, INV_GAMMA1P_M1_B3, t, b, ExpressionStatement(), b, INV_GAMMA1P_M1_B2, t, b, ExpressionStatement(), b, INV_GAMMA1P_M1_B1, t, b, ExpressionStatement(), b, 1.0, t, b, VariableDeclarationStatement(), double, c, INV_GAMMA1P_M1_C13, t, a, b, ExpressionStatement(), c, INV_GAMMA1P_M1_C12, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C11, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C10, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C9, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C8, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C7, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C6, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C5, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C4, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C3, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C2, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C1, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C, t, c, IfStatement(if), x, 0.5, ExpressionStatement(), ret, t, c, x, ExpressionStatement(), ret, x, c, 0.5, 0.5, VariableDeclarationStatement(), double, p, INV_GAMMA1P_M1_P6, ExpressionStatement(), p, INV_GAMMA1P_M1_P5, t, p, ExpressionStatement(), p, INV_GAMMA1P_M1_P4, t, p, ExpressionStatement(), p, INV_GAMMA1P_M1_P3, t, p, ExpressionStatement(), p, INV_GAMMA1P_M1_P2, t, p, ExpressionStatement(), p, INV_GAMMA1P_M1_P1, t, p, ExpressionStatement(), p, INV_GAMMA1P_M1_P0, t, p, VariableDeclarationStatement(), double, q, INV_GAMMA1P_M1_Q4, ExpressionStatement(), q, INV_GAMMA1P_M1_Q3, t, q, ExpressionStatement(), q, INV_GAMMA1P_M1_Q2, t, q, ExpressionStatement(), q, INV_GAMMA1P_M1_Q1, t, q, ExpressionStatement(), q, 1.0, t, q, VariableDeclarationStatement(), double, c, INV_GAMMA1P_M1_C13, p, q, t, ExpressionStatement(), c, INV_GAMMA1P_M1_C12, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C11, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C10, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C9, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C8, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C7, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C6, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C5, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C4, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C3, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C2, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C1, t, c, ExpressionStatement(), c, INV_GAMMA1P_M1_C0, t, c, IfStatement(if), x, 0.5, ExpressionStatement(), ret, t, x, c, 0.5, 0.5, ExpressionStatement(), ret, x, c, ReturnStatement(return), ret]
org.apache.commons.math4.special:Gamma:logGamma1p:double#[IfStatement(if), x, 0.5, ThrowStatement(throw), new, NumberIsTooSmallException, x, 0.5, true, IfStatement(if), x, 1.5, ThrowStatement(throw), new, NumberIsTooLargeException, x, 1.5, true, ReturnStatement(return), FastMath, log1p, invGamma1pm1, x]
org.apache.commons.math4.special:Gamma:gamma:double#[IfStatement(if), x, FastMath, rint, x, x, 0.0, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), final, double, ret, VariableDeclarationStatement(), final, double, absX, FastMath, abs, x, IfStatement(if), absX, 20.0, IfStatement(if), x, 1.0, VariableDeclarationStatement(), double, prod, 1.0, VariableDeclarationStatement(), double, t, x, WhileStatement(while), t, 2.5, ExpressionStatement(), t, 1.0, ExpressionStatement(), prod, t, ExpressionStatement(), ret, prod, 1.0, invGamma1pm1, t, 1.0, VariableDeclarationStatement(), double, prod, x, VariableDeclarationStatement(), double, t, x, WhileStatement(while), t, 0.5, ExpressionStatement(), t, 1.0, ExpressionStatement(), prod, t, ExpressionStatement(), ret, 1.0, prod, 1.0, invGamma1pm1, t, VariableDeclarationStatement(), final, double, y, absX, LANCZOS_G, 0.5, VariableDeclarationStatement(), final, double, gammaAbs, SQRT_TWO_PI, absX, FastMath, pow, y, absX, 0.5, FastMath, exp, y, lanczos, absX, IfStatement(if), x, 0.0, ExpressionStatement(), ret, gammaAbs, ExpressionStatement(), ret, FastMath.PI, x, FastMath, sin, FastMath.PI, x, gammaAbs, ReturnStatement(return), ret]
org.apache.commons.math4.stat.correlation:Covariance:getCovarianceMatrix:null#[ReturnStatement(return), covarianceMatrix]
org.apache.commons.math4.stat.correlation:Covariance:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:RealMatrix+boolean#[VariableDeclarationStatement(), int, dimension, matrix, getColumnDimension, VariableDeclarationStatement(), Variance, variance, new, Variance, biasCorrected, VariableDeclarationStatement(), RealMatrix, outMatrix, new, BlockRealMatrix, dimension, dimension, ForStatement(for), int, i, 0, i, dimension, i, ForStatement(for), int, j, 0, j, i, j, VariableDeclarationStatement(), double, cov, covariance, matrix, getColumn, i, matrix, getColumn, j, biasCorrected, ExpressionStatement(), outMatrix, setEntry, i, j, cov, ExpressionStatement(), outMatrix, setEntry, j, i, cov, ExpressionStatement(), outMatrix, setEntry, i, i, variance, evaluate, matrix, getColumn, i, ReturnStatement(return), outMatrix]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:RealMatrix#[ReturnStatement(return), computeCovarianceMatrix, matrix, true]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:double[][]+boolean#[ReturnStatement(return), computeCovarianceMatrix, new, BlockRealMatrix, data, biasCorrected]
org.apache.commons.math4.stat.correlation:Covariance:computeCovarianceMatrix:double[][]#[ReturnStatement(return), computeCovarianceMatrix, data, true]
org.apache.commons.math4.stat.correlation:Covariance:covariance:double[]+double[]+boolean#[VariableDeclarationStatement(), Mean, mean, new, Mean, VariableDeclarationStatement(), double, result, 0d, VariableDeclarationStatement(), int, length, xArray.length, IfStatement(if), length, yArray.length, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, length, yArray.length, IfStatement(if), length, 2, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, length, 2, VariableDeclarationStatement(), double, xMean, mean, evaluate, xArray, VariableDeclarationStatement(), double, yMean, mean, evaluate, yArray, ForStatement(for), int, i, 0, i, length, i, VariableDeclarationStatement(), double, xDev, xArray, i, xMean, VariableDeclarationStatement(), double, yDev, yArray, i, yMean, ExpressionStatement(), result, xDev, yDev, result, i, 1, ReturnStatement(return), biasCorrected, result, double, length, double, length, 1, result]
org.apache.commons.math4.stat.correlation:Covariance:covariance:double[]+double[]#[ReturnStatement(return), covariance, xArray, yArray, true]
org.apache.commons.math4.stat.correlation:Covariance:checkSufficientData:RealMatrix#[VariableDeclarationStatement(), int, nRows, matrix, getRowDimension, VariableDeclarationStatement(), int, nCols, matrix, getColumnDimension, IfStatement(if), nRows, 2, nCols, 1, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:getCorrelationMatrix:null#[ReturnStatement(return), correlationMatrix]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:computeCorrelationMatrix:RealMatrix#[VariableDeclarationStatement(), int, nVars, matrix, getColumnDimension, VariableDeclarationStatement(), RealMatrix, outMatrix, new, BlockRealMatrix, nVars, nVars, ForStatement(for), int, i, 0, i, nVars, i, ForStatement(for), int, j, 0, j, i, j, VariableDeclarationStatement(), double, corr, correlation, matrix, getColumn, i, matrix, getColumn, j, ExpressionStatement(), outMatrix, setEntry, i, j, corr, ExpressionStatement(), outMatrix, setEntry, j, i, corr, ExpressionStatement(), outMatrix, setEntry, i, i, 1d, ReturnStatement(return), outMatrix]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:computeCorrelationMatrix:double[][]#[ReturnStatement(return), computeCorrelationMatrix, new, BlockRealMatrix, matrix]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:correlation:double[]+double[]#[IfStatement(if), xArray.length, yArray.length, ThrowStatement(throw), new, DimensionMismatchException, xArray.length, yArray.length, VariableDeclarationStatement(), final, int, n, xArray.length, VariableDeclarationStatement(), final, long, numPairs, sum, n, 1, VariableDeclarationStatement(), SuppressWarnings, "unchecked", Pair, Double, Double, pairs, Pair, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), pairs, i, new, Pair, Double, Double, xArray, i, yArray, i, ExpressionStatement(), Arrays, sort, pairs, new, Comparator, Pair, Double, Double, Override, public, int, compare, Pair, Double, Double, pair1, Pair, Double, Double, pair2, VariableDeclarationStatement(), int, compareFirst, pair1, getFirst, compareTo, pair2, getFirst, ReturnStatement(return), compareFirst, 0, compareFirst, pair1, getSecond, compareTo, pair2, getSecond, VariableDeclarationStatement(), long, tiedXPairs, 0, VariableDeclarationStatement(), long, tiedXYPairs, 0, VariableDeclarationStatement(), long, consecutiveXTies, 1, VariableDeclarationStatement(), long, consecutiveXYTies, 1, VariableDeclarationStatement(), Pair, Double, Double, prev, pairs, 0, ForStatement(for), int, i, 1, i, n, i, VariableDeclarationStatement(), final, Pair, Double, Double, curr, pairs, i, IfStatement(if), curr, getFirst, equals, prev, getFirst, ExpressionStatement(), consecutiveXTies, IfStatement(if), curr, getSecond, equals, prev, getSecond, ExpressionStatement(), consecutiveXYTies, ExpressionStatement(), tiedXYPairs, sum, consecutiveXYTies, 1, ExpressionStatement(), consecutiveXYTies, 1, ExpressionStatement(), tiedXPairs, sum, consecutiveXTies, 1, ExpressionStatement(), consecutiveXTies, 1, ExpressionStatement(), tiedXYPairs, sum, consecutiveXYTies, 1, ExpressionStatement(), consecutiveXYTies, 1, ExpressionStatement(), prev, curr, ExpressionStatement(), tiedXPairs, sum, consecutiveXTies, 1, ExpressionStatement(), tiedXYPairs, sum, consecutiveXYTies, 1, VariableDeclarationStatement(), long, swaps, 0, VariableDeclarationStatement(), SuppressWarnings, "unchecked", Pair, Double, Double, pairsDestination, Pair, n, ForStatement(for), int, segmentSize, 1, segmentSize, n, segmentSize, 1, ForStatement(for), int, offset, 0, offset, n, offset, 2, segmentSize, VariableDeclarationStatement(), int, i, offset, VariableDeclarationStatement(), final, int, iEnd, FastMath, min, i, segmentSize, n, VariableDeclarationStatement(), int, j, iEnd, VariableDeclarationStatement(), final, int, jEnd, FastMath, min, j, segmentSize, n, VariableDeclarationStatement(), int, copyLocation, offset, WhileStatement(while), i, iEnd, j, jEnd, IfStatement(if), i, iEnd, IfStatement(if), j, jEnd, IfStatement(if), pairs, i, getSecond, compareTo, pairs, j, getSecond, 0, ExpressionStatement(), pairsDestination, copyLocation, pairs, i, ExpressionStatement(), i, ExpressionStatement(), pairsDestination, copyLocation, pairs, j, ExpressionStatement(), j, ExpressionStatement(), swaps, iEnd, i, ExpressionStatement(), pairsDestination, copyLocation, pairs, i, ExpressionStatement(), i, ExpressionStatement(), pairsDestination, copyLocation, pairs, j, ExpressionStatement(), j, ExpressionStatement(), copyLocation, VariableDeclarationStatement(), final, Pair, Double, Double, pairsTemp, pairs, ExpressionStatement(), pairs, pairsDestination, ExpressionStatement(), pairsDestination, pairsTemp, VariableDeclarationStatement(), long, tiedYPairs, 0, VariableDeclarationStatement(), long, consecutiveYTies, 1, ExpressionStatement(), prev, pairs, 0, ForStatement(for), int, i, 1, i, n, i, VariableDeclarationStatement(), final, Pair, Double, Double, curr, pairs, i, IfStatement(if), curr, getSecond, equals, prev, getSecond, ExpressionStatement(), consecutiveYTies, ExpressionStatement(), tiedYPairs, sum, consecutiveYTies, 1, ExpressionStatement(), consecutiveYTies, 1, ExpressionStatement(), prev, curr, ExpressionStatement(), tiedYPairs, sum, consecutiveYTies, 1, VariableDeclarationStatement(), final, long, concordantMinusDiscordant, numPairs, tiedXPairs, tiedYPairs, tiedXYPairs, 2, swaps, VariableDeclarationStatement(), final, double, nonTiedPairsMultiplied, numPairs, tiedXPairs, double, numPairs, tiedYPairs, ReturnStatement(return), concordantMinusDiscordant, FastMath, sqrt, nonTiedPairsMultiplied]
org.apache.commons.math4.stat.correlation:KendallsCorrelation:sum:long#[ReturnStatement(return), n, n, 1, 2l]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:getCorrelationMatrix:null#[ReturnStatement(return), correlationMatrix]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:getCorrelationStandardErrors:null#[VariableDeclarationStatement(), int, nVars, correlationMatrix, getColumnDimension, VariableDeclarationStatement(), double, out, double, nVars, nVars, ForStatement(for), int, i, 0, i, nVars, i, ForStatement(for), int, j, 0, j, nVars, j, VariableDeclarationStatement(), double, r, correlationMatrix, getEntry, i, j, ExpressionStatement(), out, i, j, FastMath, sqrt, 1, r, r, nObs, 2, ReturnStatement(return), new, BlockRealMatrix, out]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:getCorrelationPValues:null#[VariableDeclarationStatement(), TDistribution, tDistribution, new, TDistribution, nObs, 2, VariableDeclarationStatement(), int, nVars, correlationMatrix, getColumnDimension, VariableDeclarationStatement(), double, out, double, nVars, nVars, ForStatement(for), int, i, 0, i, nVars, i, ForStatement(for), int, j, 0, j, nVars, j, IfStatement(if), i, j, ExpressionStatement(), out, i, j, 0d, VariableDeclarationStatement(), double, r, correlationMatrix, getEntry, i, j, VariableDeclarationStatement(), double, t, FastMath, abs, r, FastMath, sqrt, nObs, 2, 1, r, r, ExpressionStatement(), out, i, j, 2, tDistribution, cumulativeProbability, t, ReturnStatement(return), new, BlockRealMatrix, out]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:computeCorrelationMatrix:RealMatrix#[ExpressionStatement(), checkSufficientData, matrix, VariableDeclarationStatement(), int, nVars, matrix, getColumnDimension, VariableDeclarationStatement(), RealMatrix, outMatrix, new, BlockRealMatrix, nVars, nVars, ForStatement(for), int, i, 0, i, nVars, i, ForStatement(for), int, j, 0, j, i, j, VariableDeclarationStatement(), double, corr, correlation, matrix, getColumn, i, matrix, getColumn, j, ExpressionStatement(), outMatrix, setEntry, i, j, corr, ExpressionStatement(), outMatrix, setEntry, j, i, corr, ExpressionStatement(), outMatrix, setEntry, i, i, 1d, ReturnStatement(return), outMatrix]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:computeCorrelationMatrix:double[][]#[ReturnStatement(return), computeCorrelationMatrix, new, BlockRealMatrix, data]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:correlation:double[]+double[]#[VariableDeclarationStatement(), SimpleRegression, regression, new, SimpleRegression, IfStatement(if), xArray.length, yArray.length, ThrowStatement(throw), new, DimensionMismatchException, xArray.length, yArray.length, IfStatement(if), xArray.length, 2, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2, ForStatement(for), int, i, 0, i, xArray.length, i, ExpressionStatement(), regression, addData, xArray, i, yArray, i, ReturnStatement(return), regression, getR]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:covarianceToCorrelation:RealMatrix#[VariableDeclarationStatement(), int, nVars, covarianceMatrix, getColumnDimension, VariableDeclarationStatement(), RealMatrix, outMatrix, new, BlockRealMatrix, nVars, nVars, ForStatement(for), int, i, 0, i, nVars, i, VariableDeclarationStatement(), double, sigma, FastMath, sqrt, covarianceMatrix, getEntry, i, i, ExpressionStatement(), outMatrix, setEntry, i, i, 1d, ForStatement(for), int, j, 0, j, i, j, VariableDeclarationStatement(), double, entry, covarianceMatrix, getEntry, i, j, sigma, FastMath, sqrt, covarianceMatrix, getEntry, j, j, ExpressionStatement(), outMatrix, setEntry, i, j, entry, ExpressionStatement(), outMatrix, setEntry, j, i, entry, ReturnStatement(return), outMatrix]
org.apache.commons.math4.stat.correlation:PearsonsCorrelation:checkSufficientData:RealMatrix#[VariableDeclarationStatement(), int, nRows, matrix, getRowDimension, VariableDeclarationStatement(), int, nCols, matrix, getColumnDimension, IfStatement(if), nRows, 2, nCols, 2, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:getCorrelationMatrix:null#[ReturnStatement(return), rankCorrelation, getCorrelationMatrix]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:getRankCorrelation:null#[ReturnStatement(return), rankCorrelation]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:computeCorrelationMatrix:RealMatrix#[VariableDeclarationStatement(), final, RealMatrix, matrixCopy, rankTransform, matrix, ReturnStatement(return), new, PearsonsCorrelation, computeCorrelationMatrix, matrixCopy]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:computeCorrelationMatrix:double[][]#[ReturnStatement(return), computeCorrelationMatrix, new, BlockRealMatrix, matrix]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:correlation:double[]+double[]#[IfStatement(if), xArray.length, yArray.length, ThrowStatement(throw), new, DimensionMismatchException, xArray.length, yArray.length, IfStatement(if), xArray.length, 2, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2, ReturnStatement(return), new, PearsonsCorrelation, correlation, rankingAlgorithm, rank, xArray, rankingAlgorithm, rank, yArray]
org.apache.commons.math4.stat.correlation:SpearmansCorrelation:rankTransform:RealMatrix#[VariableDeclarationStatement(), RealMatrix, transformed, matrix, copy, ForStatement(for), int, i, 0, i, transformed, getColumnDimension, i, ExpressionStatement(), transformed, setColumn, i, rankingAlgorithm, rank, transformed, getColumn, i, ReturnStatement(return), transformed]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:increment:double+double#[ExpressionStatement(), n, VariableDeclarationStatement(), final, double, deltaX, x, meanX, VariableDeclarationStatement(), final, double, deltaY, y, meanY, ExpressionStatement(), meanX, deltaX, n, ExpressionStatement(), meanY, deltaY, n, ExpressionStatement(), covarianceNumerator, n, 1.0, n, deltaX, deltaY]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:append:StorelessBivariateCovariance#[VariableDeclarationStatement(), double, oldN, n, ExpressionStatement(), n, cov.n, VariableDeclarationStatement(), final, double, deltaX, cov.meanX, meanX, VariableDeclarationStatement(), final, double, deltaY, cov.meanY, meanY, ExpressionStatement(), meanX, deltaX, cov.n, n, ExpressionStatement(), meanY, deltaY, cov.n, n, ExpressionStatement(), covarianceNumerator, cov.covarianceNumerator, oldN, cov.n, n, deltaX, deltaY]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.correlation:StorelessBivariateCovariance:getResult:null#[IfStatement(if), n, 2, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INSUFFICIENT_DIMENSION, n, 2, true, IfStatement(if), biasCorrected, ReturnStatement(return), covarianceNumerator, n, 1d, ReturnStatement(return), covarianceNumerator, n]
org.apache.commons.math4.stat.correlation:StorelessCovariance:initializeMatrix:boolean#[ForStatement(for), int, i, 0, i, dimension, i, ForStatement(for), int, j, 0, j, dimension, j, ExpressionStatement(), setElement, i, j, new, StorelessBivariateCovariance, biasCorrected]
org.apache.commons.math4.stat.correlation:StorelessCovariance:indexOf:int+int#[ReturnStatement(return), j, i, i, i, 1, 2, j, j, j, 1, 2, i]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getElement:int+int#[ReturnStatement(return), covMatrix, indexOf, i, j]
org.apache.commons.math4.stat.correlation:StorelessCovariance:setElement:int+int+StorelessBivariateCovariance#[ExpressionStatement(), covMatrix, indexOf, i, j, cov]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getCovariance:int+int#[ReturnStatement(return), getElement, xIndex, yIndex, getResult]
org.apache.commons.math4.stat.correlation:StorelessCovariance:increment:double[]#[VariableDeclarationStatement(), int, length, data.length, IfStatement(if), length, dimension, ThrowStatement(throw), new, DimensionMismatchException, length, dimension, ForStatement(for), int, i, 0, i, length, i, ForStatement(for), int, j, i, j, length, j, ExpressionStatement(), getElement, i, j, increment, data, i, data, j]
org.apache.commons.math4.stat.correlation:StorelessCovariance:append:StorelessCovariance#[IfStatement(if), sc.dimension, dimension, ThrowStatement(throw), new, DimensionMismatchException, sc.dimension, dimension, ForStatement(for), int, i, 0, i, dimension, i, ForStatement(for), int, j, i, j, dimension, j, ExpressionStatement(), getElement, i, j, append, sc, getElement, i, j]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getCovarianceMatrix:null#[ReturnStatement(return), MatrixUtils, createRealMatrix, getData]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getData:null#[VariableDeclarationStatement(), final, double, data, double, dimension, dimension, ForStatement(for), int, i, 0, i, dimension, i, ForStatement(for), int, j, 0, j, dimension, j, ExpressionStatement(), data, i, j, getElement, i, j, getResult, ReturnStatement(return), data]
org.apache.commons.math4.stat.correlation:StorelessCovariance:getN:null#[ThrowStatement(throw), new, MathUnsupportedOperationException]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:evaluate:double[]#[IfStatement(if), values, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, ReturnStatement(return), evaluate, values, 0, values.length]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:evaluate:double[]+int+int#[IfStatement(if), MathArrays, verifyValues, values, begin, length, VariableDeclarationStatement(), final, StorelessUnivariateStatistic, stat, copy, ExpressionStatement(), stat, clear, ExpressionStatement(), stat, incrementAll, values, begin, length, ReturnStatement(return), stat, getResult, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:incrementAll:double[]#[IfStatement(if), values, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, ExpressionStatement(), incrementAll, values, 0, values.length]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:incrementAll:double[]+int+int#[IfStatement(if), MathArrays, verifyValues, values, begin, length, VariableDeclarationStatement(), int, k, begin, length, ForStatement(for), int, i, begin, i, k, i, ExpressionStatement(), increment, values, i]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:equals:Object#[IfStatement(if), object, this, ReturnStatement(return), true, IfStatement(if), object, null, object, getClass, this, getClass, ReturnStatement(return), false, VariableDeclarationStatement(), StorelessUnivariateStatistic, stat, StorelessUnivariateStatistic, object, ReturnStatement(return), Precision, equalsIncludingNaN, stat, getResult, this, getResult, Precision, equalsIncludingNaN, stat, getN, this, getN]
org.apache.commons.math4.stat.descriptive:AbstractStorelessUnivariateStatistic:hashCode:null#[ReturnStatement(return), 31, 31, MathUtils, hash, getResult, MathUtils, hash, getN]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:evaluate:double[]#[ExpressionStatement(), MathArrays, verifyValues, values, 0, 0, ReturnStatement(return), evaluate, values, 0, values.length]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:setData:double[]#[ExpressionStatement(), storedData, values, null, null, values, clone]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:getData:null#[ReturnStatement(return), storedData, null, null, storedData, clone]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:getDataRef:null#[ReturnStatement(return), storedData]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:setData:double[]+int+int#[IfStatement(if), values, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, IfStatement(if), begin, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.START_POSITION, begin, IfStatement(if), length, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.LENGTH, length, IfStatement(if), begin, length, values.length, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END, begin, length, values.length, true, ExpressionStatement(), storedData, double, length, ExpressionStatement(), System, arraycopy, values, begin, storedData, 0, length]
org.apache.commons.math4.stat.descriptive:AbstractUnivariateStatistic:evaluate:null#[ReturnStatement(return), evaluate, storedData]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getMax:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getMax]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getMean:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getMean]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getMin:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getMin]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getN:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getN]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getStandardDeviation:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSum:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getSum]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getVariance:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getVariance]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSumOfLogs:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getSumOfLogs]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getGeometricMean:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getGeometricMean]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSumsq:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getSumsq]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSecondMoment:null#[SynchronizedStatement(), statistics, ReturnStatement(return), statistics, getSecondMoment]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:getSummary:null#[SynchronizedStatement(), statistics, ReturnStatement(return), new, StatisticalSummaryValues, getMean, getVariance, getN, getMax, getMin, getSum]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:createContributingStatistics:null#[VariableDeclarationStatement(), SummaryStatistics, contributingStatistics, new, AggregatingSummaryStatistics, statistics, ExpressionStatement(), SummaryStatistics, copy, statisticsPrototype, contributingStatistics, ReturnStatement(return), contributingStatistics]
org.apache.commons.math4.stat.descriptive:AggregateSummaryStatistics:aggregate:StatisticalSummary>#[IfStatement(if), statistics, null, ReturnStatement(return), null, VariableDeclarationStatement(), Iterator, StatisticalSummary, iterator, statistics, iterator, IfStatement(if), iterator, hasNext, ReturnStatement(return), null, VariableDeclarationStatement(), StatisticalSummary, current, iterator, next, VariableDeclarationStatement(), long, n, current, getN, VariableDeclarationStatement(), double, min, current, getMin, VariableDeclarationStatement(), double, sum, current, getSum, VariableDeclarationStatement(), double, max, current, getMax, VariableDeclarationStatement(), double, var, current, getVariance, VariableDeclarationStatement(), double, m2, var, n, 1d, VariableDeclarationStatement(), double, mean, current, getMean, WhileStatement(while), iterator, hasNext, ExpressionStatement(), current, iterator, next, IfStatement(if), current, getMin, min, Double, isNaN, min, ExpressionStatement(), min, current, getMin, IfStatement(if), current, getMax, max, Double, isNaN, max, ExpressionStatement(), max, current, getMax, ExpressionStatement(), sum, current, getSum, VariableDeclarationStatement(), final, double, oldN, n, VariableDeclarationStatement(), final, double, curN, current, getN, ExpressionStatement(), n, curN, VariableDeclarationStatement(), final, double, meanDiff, current, getMean, mean, ExpressionStatement(), mean, sum, n, VariableDeclarationStatement(), final, double, curM2, current, getVariance, curN, 1d, ExpressionStatement(), m2, m2, curM2, meanDiff, meanDiff, oldN, curN, n, VariableDeclarationStatement(), final, double, variance, IfStatement(if), n, 0, ExpressionStatement(), variance, Double.NaN, IfStatement(if), n, 1, ExpressionStatement(), variance, 0d, ExpressionStatement(), variance, m2, n, 1, ReturnStatement(return), new, StatisticalSummaryValues, mean, variance, n, max, min, sum]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:addValue:double#[IfStatement(if), windowSize, INFINITE_WINDOW, IfStatement(if), getN, windowSize, ExpressionStatement(), eDA, addElementRolling, v, IfStatement(if), getN, windowSize, ExpressionStatement(), eDA, addElement, v, ExpressionStatement(), eDA, addElement, v]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:removeMostRecentValue:null#[TryStatement(try), ExpressionStatement(), eDA, discardMostRecentElements, 1, catch, MathIllegalArgumentException, ex, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.NO_DATA]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:replaceMostRecentValue:double#[ReturnStatement(return), eDA, substituteMostRecentElement, v]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMean:null#[ReturnStatement(return), apply, meanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getGeometricMean:null#[ReturnStatement(return), apply, geometricMeanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getVariance:null#[ReturnStatement(return), apply, varianceImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getPopulationVariance:null#[ReturnStatement(return), apply, new, Variance, false]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getStandardDeviation:null#[VariableDeclarationStatement(), double, stdDev, Double.NaN, IfStatement(if), getN, 0, IfStatement(if), getN, 1, ExpressionStatement(), stdDev, FastMath, sqrt, getVariance, ExpressionStatement(), stdDev, 0.0, ReturnStatement(return), stdDev]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getQuadraticMean:null#[VariableDeclarationStatement(), final, long, n, getN, ReturnStatement(return), n, 0, FastMath, sqrt, getSumsq, n, Double.NaN]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSkewness:null#[ReturnStatement(return), apply, skewnessImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getKurtosis:null#[ReturnStatement(return), apply, kurtosisImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMax:null#[ReturnStatement(return), apply, maxImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMin:null#[ReturnStatement(return), apply, minImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getN:null#[ReturnStatement(return), eDA, getNumElements]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSum:null#[ReturnStatement(return), apply, sumImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSumsq:null#[ReturnStatement(return), apply, sumsqImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:clear:null#[ExpressionStatement(), eDA, clear]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getWindowSize:null#[ReturnStatement(return), windowSize]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setWindowSize:int#[IfStatement(if), windowSize, 1, windowSize, INFINITE_WINDOW, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_POSITIVE_WINDOW_SIZE, windowSize, ExpressionStatement(), this, windowSize, windowSize, IfStatement(if), windowSize, INFINITE_WINDOW, windowSize, eDA, getNumElements, ExpressionStatement(), eDA, discardFrontElements, eDA, getNumElements, windowSize]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getValues:null#[ReturnStatement(return), eDA, getElements]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSortedValues:null#[VariableDeclarationStatement(), double, sort, getValues, ExpressionStatement(), Arrays, sort, sort, ReturnStatement(return), sort]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getElement:int#[ReturnStatement(return), eDA, getElement, index]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getPercentile:double#[IfStatement(if), instanceof, percentileImpl, Percentile, ExpressionStatement(), Percentile, percentileImpl, setQuantile, p, TryStatement(try), ExpressionStatement(), percentileImpl, getClass, getMethod, SET_QUANTILE_METHOD_NAME, Class, Double.TYPE, invoke, percentileImpl, Object, Double, valueOf, p, catch, NoSuchMethodException, e1, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD, percentileImpl, getClass, getName, SET_QUANTILE_METHOD_NAME, catch, IllegalAccessException, e2, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD, SET_QUANTILE_METHOD_NAME, percentileImpl, getClass, getName, catch, InvocationTargetException, e3, ThrowStatement(throw), new, IllegalStateException, e3, getCause, ReturnStatement(return), apply, percentileImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:toString:null#[VariableDeclarationStatement(), StringBuilder, outBuffer, new, StringBuilder, VariableDeclarationStatement(), String, endl, "\n", ExpressionStatement(), outBuffer, append, "DescriptiveStatistics:", append, endl, ExpressionStatement(), outBuffer, append, "n: ", append, getN, append, endl, ExpressionStatement(), outBuffer, append, "min: ", append, getMin, append, endl, ExpressionStatement(), outBuffer, append, "max: ", append, getMax, append, endl, ExpressionStatement(), outBuffer, append, "mean: ", append, getMean, append, endl, ExpressionStatement(), outBuffer, append, "std dev: ", append, getStandardDeviation, append, endl, TryStatement(try), ExpressionStatement(), outBuffer, append, "median: ", append, getPercentile, 50, append, endl, catch, MathIllegalStateException, ex, ExpressionStatement(), outBuffer, append, "median: unavailable", append, endl, ExpressionStatement(), outBuffer, append, "skewness: ", append, getSkewness, append, endl, ExpressionStatement(), outBuffer, append, "kurtosis: ", append, getKurtosis, append, endl, ReturnStatement(return), outBuffer, toString]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:apply:UnivariateStatistic#[ReturnStatement(return), eDA, compute, stat]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMeanImpl:null#[ReturnStatement(return), meanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setMeanImpl:UnivariateStatistic#[ExpressionStatement(), this, meanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getGeometricMeanImpl:null#[ReturnStatement(return), geometricMeanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setGeometricMeanImpl:UnivariateStatistic#[ExpressionStatement(), this, geometricMeanImpl, geometricMeanImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getKurtosisImpl:null#[ReturnStatement(return), kurtosisImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setKurtosisImpl:UnivariateStatistic#[ExpressionStatement(), this, kurtosisImpl, kurtosisImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMaxImpl:null#[ReturnStatement(return), maxImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setMaxImpl:UnivariateStatistic#[ExpressionStatement(), this, maxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getMinImpl:null#[ReturnStatement(return), minImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setMinImpl:UnivariateStatistic#[ExpressionStatement(), this, minImpl, minImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getPercentileImpl:null#[ReturnStatement(return), percentileImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setPercentileImpl:UnivariateStatistic#[TryStatement(try), ExpressionStatement(), percentileImpl, getClass, getMethod, SET_QUANTILE_METHOD_NAME, Class, Double.TYPE, invoke, percentileImpl, Object, Double, valueOf, 50.0d, catch, NoSuchMethodException, e1, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD, percentileImpl, getClass, getName, SET_QUANTILE_METHOD_NAME, catch, IllegalAccessException, e2, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD, SET_QUANTILE_METHOD_NAME, percentileImpl, getClass, getName, catch, InvocationTargetException, e3, ThrowStatement(throw), new, IllegalArgumentException, e3, getCause, ExpressionStatement(), this, percentileImpl, percentileImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSkewnessImpl:null#[ReturnStatement(return), skewnessImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setSkewnessImpl:UnivariateStatistic#[ExpressionStatement(), this, skewnessImpl, skewnessImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getVarianceImpl:null#[ReturnStatement(return), varianceImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setVarianceImpl:UnivariateStatistic#[ExpressionStatement(), this, varianceImpl, varianceImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSumsqImpl:null#[ReturnStatement(return), sumsqImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setSumsqImpl:UnivariateStatistic#[ExpressionStatement(), this, sumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:getSumImpl:null#[ReturnStatement(return), sumImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:setSumImpl:UnivariateStatistic#[ExpressionStatement(), this, sumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:copy:null#[VariableDeclarationStatement(), DescriptiveStatistics, result, new, DescriptiveStatistics, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive:DescriptiveStatistics:copy:DescriptiveStatistics+DescriptiveStatistics#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.eDA, source.eDA, copy, ExpressionStatement(), dest.windowSize, source.windowSize, ExpressionStatement(), dest.maxImpl, source.maxImpl, copy, ExpressionStatement(), dest.meanImpl, source.meanImpl, copy, ExpressionStatement(), dest.minImpl, source.minImpl, copy, ExpressionStatement(), dest.sumImpl, source.sumImpl, copy, ExpressionStatement(), dest.varianceImpl, source.varianceImpl, copy, ExpressionStatement(), dest.sumsqImpl, source.sumsqImpl, copy, ExpressionStatement(), dest.geometricMeanImpl, source.geometricMeanImpl, copy, ExpressionStatement(), dest.kurtosisImpl, source.kurtosisImpl, ExpressionStatement(), dest.skewnessImpl, source.skewnessImpl, ExpressionStatement(), dest.percentileImpl, source.percentileImpl]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:increment:double#[IfStatement(if), n, 0, ExpressionStatement(), m1, 0.0, ExpressionStatement(), n, VariableDeclarationStatement(), double, n0, n, ExpressionStatement(), dev, d, m1, ExpressionStatement(), nDev, dev, n0, ExpressionStatement(), m1, nDev]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:clear:null#[ExpressionStatement(), m1, Double.NaN, ExpressionStatement(), n, 0, ExpressionStatement(), dev, Double.NaN, ExpressionStatement(), nDev, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:getResult:null#[ReturnStatement(return), m1]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:copy:null#[VariableDeclarationStatement(), FirstMoment, result, new, FirstMoment, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:FirstMoment:copy:FirstMoment+FirstMoment#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.n, source.n, ExpressionStatement(), dest.m1, source.m1, ExpressionStatement(), dest.dev, source.dev, ExpressionStatement(), dest.nDev, source.nDev]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:increment:double#[IfStatement(if), n, 1, ExpressionStatement(), m4, 0.0, ExpressionStatement(), m3, 0.0, ExpressionStatement(), m2, 0.0, ExpressionStatement(), m1, 0.0, VariableDeclarationStatement(), double, prevM3, m3, VariableDeclarationStatement(), double, prevM2, m2, ExpressionStatement(), super, increment, d, VariableDeclarationStatement(), double, n0, n, ExpressionStatement(), m4, m4, 4.0, nDev, prevM3, 6.0, nDevSq, prevM2, n0, n0, 3, n0, 1, nDevSq, nDevSq, n0, 1, n0]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:getResult:null#[ReturnStatement(return), m4]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:clear:null#[ExpressionStatement(), super, clear, ExpressionStatement(), m4, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:copy:null#[VariableDeclarationStatement(), FourthMoment, result, new, FourthMoment, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:FourthMoment:copy:FourthMoment+FourthMoment#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), ThirdMoment, copy, source, dest, ExpressionStatement(), dest.m4, source.m4]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:copy:null#[VariableDeclarationStatement(), GeometricMean, result, new, GeometricMean, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:increment:double#[ExpressionStatement(), sumOfLogs, increment, d]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:getResult:null#[IfStatement(if), sumOfLogs, getN, 0, ReturnStatement(return), FastMath, exp, sumOfLogs, getResult, sumOfLogs, getN, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:clear:null#[ExpressionStatement(), sumOfLogs, clear]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:evaluate:double[]+int+int#[ReturnStatement(return), FastMath, exp, sumOfLogs, evaluate, values, begin, length, length]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:getN:null#[ReturnStatement(return), sumOfLogs, getN]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:setSumLogImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, sumOfLogs, sumLogImpl]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:getSumLogImpl:null#[ReturnStatement(return), sumOfLogs]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:copy:GeometricMean+GeometricMean#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.sumOfLogs, source.sumOfLogs, copy]
org.apache.commons.math4.stat.descriptive.moment:GeometricMean:checkEmpty:null#[IfStatement(if), getN, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, getN]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:increment:double#[IfStatement(if), incMoment, ExpressionStatement(), moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:getResult:null#[VariableDeclarationStatement(), double, kurtosis, Double.NaN, IfStatement(if), moment, getN, 3, VariableDeclarationStatement(), double, variance, moment.m2, moment.n, 1, IfStatement(if), moment.n, 3, variance, 10E-20, ExpressionStatement(), kurtosis, 0.0, VariableDeclarationStatement(), double, n, moment.n, ExpressionStatement(), kurtosis, n, n, 1, moment, getResult, 3, moment.m2, moment.m2, n, 1, n, 1, n, 2, n, 3, variance, variance, ReturnStatement(return), kurtosis]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:clear:null#[IfStatement(if), incMoment, ExpressionStatement(), moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:getN:null#[ReturnStatement(return), moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, kurt, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, length, 3, VariableDeclarationStatement(), Variance, variance, new, Variance, ExpressionStatement(), variance, incrementAll, values, begin, length, VariableDeclarationStatement(), double, mean, variance.moment.m1, VariableDeclarationStatement(), double, stdDev, FastMath, sqrt, variance, getResult, VariableDeclarationStatement(), double, accum3, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), accum3, FastMath, pow, values, i, mean, 4.0, ExpressionStatement(), accum3, FastMath, pow, stdDev, 4.0d, VariableDeclarationStatement(), double, n0, length, VariableDeclarationStatement(), double, coefficientOne, n0, n0, 1, n0, 1, n0, 2, n0, 3, VariableDeclarationStatement(), double, termTwo, 3, FastMath, pow, n0, 1, 2.0, n0, 2, n0, 3, ExpressionStatement(), kurt, coefficientOne, accum3, termTwo, ReturnStatement(return), kurt]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:copy:null#[VariableDeclarationStatement(), Kurtosis, result, new, Kurtosis, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:Kurtosis:copy:Kurtosis+Kurtosis#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.moment, source.moment, copy, ExpressionStatement(), dest.incMoment, source.incMoment]
org.apache.commons.math4.stat.descriptive.moment:Mean:increment:double#[IfStatement(if), incMoment, ExpressionStatement(), moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Mean:clear:null#[IfStatement(if), incMoment, ExpressionStatement(), moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Mean:getResult:null#[ReturnStatement(return), moment.m1]
org.apache.commons.math4.stat.descriptive.moment:Mean:getN:null#[ReturnStatement(return), moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Mean:evaluate:double[]+int+int#[IfStatement(if), MathArrays, verifyValues, values, begin, length, VariableDeclarationStatement(), Sum, sum, new, Sum, VariableDeclarationStatement(), double, sampleSize, length, VariableDeclarationStatement(), double, xbar, sum, evaluate, values, begin, length, sampleSize, VariableDeclarationStatement(), double, correction, 0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), correction, values, i, xbar, ReturnStatement(return), xbar, correction, sampleSize, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:Mean:evaluate:double[]+double[]+int+int#[IfStatement(if), MathArrays, verifyValues, values, weights, begin, length, VariableDeclarationStatement(), Sum, sum, new, Sum, VariableDeclarationStatement(), double, sumw, sum, evaluate, weights, begin, length, VariableDeclarationStatement(), double, xbarw, sum, evaluate, values, weights, begin, length, sumw, VariableDeclarationStatement(), double, correction, 0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), correction, weights, i, values, i, xbarw, ReturnStatement(return), xbarw, correction, sumw, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:Mean:evaluate:double[]+double[]#[ReturnStatement(return), evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Mean:copy:null#[VariableDeclarationStatement(), Mean, result, new, Mean, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:Mean:copy:Mean+Mean#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.incMoment, source.incMoment, ExpressionStatement(), dest.moment, source.moment, copy]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:increment:double#[IfStatement(if), n, 1, ExpressionStatement(), m1, m2, 0.0, ExpressionStatement(), super, increment, d, ExpressionStatement(), m2, double, n, 1, dev, nDev]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:clear:null#[ExpressionStatement(), super, clear, ExpressionStatement(), m2, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:getResult:null#[ReturnStatement(return), m2]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:copy:null#[VariableDeclarationStatement(), SecondMoment, result, new, SecondMoment, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:SecondMoment:copy:SecondMoment+SecondMoment#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), FirstMoment, copy, source, dest, ExpressionStatement(), dest.m2, source.m2]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:copy:null#[VariableDeclarationStatement(), SemiVariance, result, new, SemiVariance, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:copy:SemiVariance+SemiVariance#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.biasCorrected, source.biasCorrected, ExpressionStatement(), dest.varianceDirection, source.varianceDirection]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, m, new, Mean, evaluate, values, start, length, ReturnStatement(return), evaluate, values, m, varianceDirection, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+Direction#[VariableDeclarationStatement(), double, m, new, Mean, evaluate, values, ReturnStatement(return), evaluate, values, m, direction, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+double#[ReturnStatement(return), evaluate, values, cutoff, varianceDirection, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+double+Direction#[ReturnStatement(return), evaluate, values, cutoff, direction, biasCorrected, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:evaluate:double[]+double+Direction+boolean+int+int#[ExpressionStatement(), MathArrays, verifyValues, values, start, length, IfStatement(if), values.length, 0, ReturnStatement(return), Double.NaN, IfStatement(if), values.length, 1, ReturnStatement(return), 0.0, VariableDeclarationStatement(), final, boolean, booleanDirection, direction, getDirection, VariableDeclarationStatement(), double, dev, 0.0, VariableDeclarationStatement(), double, sumsq, 0.0, ForStatement(for), int, i, start, i, length, i, IfStatement(if), values, i, cutoff, booleanDirection, ExpressionStatement(), dev, values, i, cutoff, ExpressionStatement(), sumsq, dev, dev, IfStatement(if), corrected, ReturnStatement(return), sumsq, length, 1.0, ReturnStatement(return), sumsq, length]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:isBiasCorrected:null#[ReturnStatement(return), biasCorrected]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:setBiasCorrected:boolean#[ExpressionStatement(), this, biasCorrected, biasCorrected]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:getVarianceDirection:null#[ReturnStatement(return), varianceDirection]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:setVarianceDirection:Direction#[ExpressionStatement(), this, varianceDirection, varianceDirection]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:Direction:boolean#[ExpressionStatement(), direction, b]
org.apache.commons.math4.stat.descriptive.moment:SemiVariance:getDirection:null#[ReturnStatement(return), direction]
org.apache.commons.math4.stat.descriptive.moment:Skewness:increment:double#[IfStatement(if), incMoment, ExpressionStatement(), moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Skewness:getResult:null#[IfStatement(if), moment.n, 3, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), double, variance, moment.m2, moment.n, 1, IfStatement(if), variance, 10E-20, ReturnStatement(return), 0.0d, VariableDeclarationStatement(), double, n0, moment, getN, ReturnStatement(return), n0, moment.m3, n0, 1, n0, 2, FastMath, sqrt, variance, variance]
org.apache.commons.math4.stat.descriptive.moment:Skewness:getN:null#[ReturnStatement(return), moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Skewness:clear:null#[IfStatement(if), incMoment, ExpressionStatement(), moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Skewness:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, skew, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, length, 2, VariableDeclarationStatement(), Mean, mean, new, Mean, VariableDeclarationStatement(), double, m, mean, evaluate, values, begin, length, VariableDeclarationStatement(), double, accum, 0.0, VariableDeclarationStatement(), double, accum2, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, VariableDeclarationStatement(), final, double, d, values, i, m, ExpressionStatement(), accum, d, d, ExpressionStatement(), accum2, d, VariableDeclarationStatement(), final, double, variance, accum, accum2, accum2, length, length, 1, VariableDeclarationStatement(), double, accum3, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, VariableDeclarationStatement(), final, double, d, values, i, m, ExpressionStatement(), accum3, d, d, d, ExpressionStatement(), accum3, variance, FastMath, sqrt, variance, VariableDeclarationStatement(), double, n0, length, ExpressionStatement(), skew, n0, n0, 1, n0, 2, accum3, ReturnStatement(return), skew]
org.apache.commons.math4.stat.descriptive.moment:Skewness:copy:null#[VariableDeclarationStatement(), Skewness, result, new, Skewness, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:Skewness:copy:Skewness+Skewness#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.moment, new, ThirdMoment, source.moment, copy, ExpressionStatement(), dest.incMoment, source.incMoment]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:increment:double#[ExpressionStatement(), variance, increment, d]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:getN:null#[ReturnStatement(return), variance, getN]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:getResult:null#[ReturnStatement(return), FastMath, sqrt, variance, getResult]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:clear:null#[ExpressionStatement(), variance, clear]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]#[ReturnStatement(return), FastMath, sqrt, variance, evaluate, values]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]+int+int#[ReturnStatement(return), FastMath, sqrt, variance, evaluate, values, begin, length]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]+double+int+int#[ReturnStatement(return), FastMath, sqrt, variance, evaluate, values, mean, begin, length]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:evaluate:double[]+double#[ReturnStatement(return), FastMath, sqrt, variance, evaluate, values, mean]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:isBiasCorrected:null#[ReturnStatement(return), variance, isBiasCorrected]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:setBiasCorrected:boolean#[ExpressionStatement(), variance, setBiasCorrected, isBiasCorrected]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:copy:null#[VariableDeclarationStatement(), StandardDeviation, result, new, StandardDeviation, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:StandardDeviation:copy:StandardDeviation+StandardDeviation#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.variance, source.variance, copy]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:increment:double#[IfStatement(if), n, 1, ExpressionStatement(), m3, m2, m1, 0.0, VariableDeclarationStatement(), double, prevM2, m2, ExpressionStatement(), super, increment, d, ExpressionStatement(), nDevSq, nDev, nDev, VariableDeclarationStatement(), double, n0, n, ExpressionStatement(), m3, m3, 3.0, nDev, prevM2, n0, 1, n0, 2, nDevSq, dev]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:getResult:null#[ReturnStatement(return), m3]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:clear:null#[ExpressionStatement(), super, clear, ExpressionStatement(), m3, Double.NaN, ExpressionStatement(), nDevSq, Double.NaN]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:copy:null#[VariableDeclarationStatement(), ThirdMoment, result, new, ThirdMoment, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:ThirdMoment:copy:ThirdMoment+ThirdMoment#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), SecondMoment, copy, source, dest, ExpressionStatement(), dest.m3, source.m3, ExpressionStatement(), dest.nDevSq, source.nDevSq]
org.apache.commons.math4.stat.descriptive.moment:Variance:increment:double#[IfStatement(if), incMoment, ExpressionStatement(), moment, increment, d]
org.apache.commons.math4.stat.descriptive.moment:Variance:getResult:null#[IfStatement(if), moment.n, 0, ReturnStatement(return), Double.NaN, IfStatement(if), moment.n, 1, ReturnStatement(return), 0d, IfStatement(if), isBiasCorrected, ReturnStatement(return), moment.m2, moment.n, 1d, ReturnStatement(return), moment.m2, moment.n]
org.apache.commons.math4.stat.descriptive.moment:Variance:getN:null#[ReturnStatement(return), moment, getN]
org.apache.commons.math4.stat.descriptive.moment:Variance:clear:null#[IfStatement(if), incMoment, ExpressionStatement(), moment, clear]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]#[IfStatement(if), values, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, ReturnStatement(return), evaluate, values, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, var, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, IfStatement(if), length, 1, ExpressionStatement(), var, 0.0, IfStatement(if), length, 1, VariableDeclarationStatement(), Mean, mean, new, Mean, VariableDeclarationStatement(), double, m, mean, evaluate, values, begin, length, ExpressionStatement(), var, evaluate, values, m, begin, length, ReturnStatement(return), var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]+int+int#[VariableDeclarationStatement(), double, var, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, weights, begin, length, IfStatement(if), length, 1, ExpressionStatement(), var, 0.0, IfStatement(if), length, 1, VariableDeclarationStatement(), Mean, mean, new, Mean, VariableDeclarationStatement(), double, m, mean, evaluate, values, weights, begin, length, ExpressionStatement(), var, evaluate, values, weights, m, begin, length, ReturnStatement(return), var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]#[ReturnStatement(return), evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double+int+int#[VariableDeclarationStatement(), double, var, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, IfStatement(if), length, 1, ExpressionStatement(), var, 0.0, IfStatement(if), length, 1, VariableDeclarationStatement(), double, accum, 0.0, VariableDeclarationStatement(), double, dev, 0.0, VariableDeclarationStatement(), double, accum2, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), dev, values, i, mean, ExpressionStatement(), accum, dev, dev, ExpressionStatement(), accum2, dev, VariableDeclarationStatement(), double, len, length, IfStatement(if), isBiasCorrected, ExpressionStatement(), var, accum, accum2, accum2, len, len, 1.0, ExpressionStatement(), var, accum, accum2, accum2, len, len, ReturnStatement(return), var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double#[ReturnStatement(return), evaluate, values, mean, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]+double+int+int#[VariableDeclarationStatement(), double, var, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, weights, begin, length, IfStatement(if), length, 1, ExpressionStatement(), var, 0.0, IfStatement(if), length, 1, VariableDeclarationStatement(), double, accum, 0.0, VariableDeclarationStatement(), double, dev, 0.0, VariableDeclarationStatement(), double, accum2, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), dev, values, i, mean, ExpressionStatement(), accum, weights, i, dev, dev, ExpressionStatement(), accum2, weights, i, dev, VariableDeclarationStatement(), double, sumWts, 0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), sumWts, weights, i, IfStatement(if), isBiasCorrected, ExpressionStatement(), var, accum, accum2, accum2, sumWts, sumWts, 1.0, ExpressionStatement(), var, accum, accum2, accum2, sumWts, sumWts, ReturnStatement(return), var]
org.apache.commons.math4.stat.descriptive.moment:Variance:evaluate:double[]+double[]+double#[ReturnStatement(return), evaluate, values, weights, mean, 0, values.length]
org.apache.commons.math4.stat.descriptive.moment:Variance:isBiasCorrected:null#[ReturnStatement(return), isBiasCorrected]
org.apache.commons.math4.stat.descriptive.moment:Variance:setBiasCorrected:boolean#[ExpressionStatement(), this, isBiasCorrected, biasCorrected]
org.apache.commons.math4.stat.descriptive.moment:Variance:copy:null#[VariableDeclarationStatement(), Variance, result, new, Variance, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:Variance:copy:Variance+Variance#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.moment, source.moment, copy, ExpressionStatement(), dest.isBiasCorrected, source.isBiasCorrected, ExpressionStatement(), dest.incMoment, source.incMoment]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:increment:double[]#[IfStatement(if), v.length, sums.length, ThrowStatement(throw), new, DimensionMismatchException, v.length, sums.length, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, i, 0, i, v.length, i, ExpressionStatement(), sums, i, v, i, ForStatement(for), int, j, 0, j, i, j, ExpressionStatement(), productsSums, k, v, i, v, j, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:getResult:null#[VariableDeclarationStatement(), int, dimension, sums.length, VariableDeclarationStatement(), RealMatrix, result, MatrixUtils, createRealMatrix, dimension, dimension, IfStatement(if), n, 1, VariableDeclarationStatement(), double, c, 1.0, n, isBiasCorrected, n, 1, n, VariableDeclarationStatement(), int, k, 0, ForStatement(for), int, i, 0, i, dimension, i, ForStatement(for), int, j, 0, j, i, j, VariableDeclarationStatement(), double, e, c, n, productsSums, k, sums, i, sums, j, ExpressionStatement(), result, setEntry, i, j, e, ExpressionStatement(), result, setEntry, j, i, e, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:clear:null#[ExpressionStatement(), n, 0, ExpressionStatement(), Arrays, fill, sums, 0.0, ExpressionStatement(), Arrays, fill, productsSums, 0.0]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:hashCode:null#[VariableDeclarationStatement(), final, int, prime, 31, VariableDeclarationStatement(), int, result, 1, ExpressionStatement(), result, prime, result, isBiasCorrected, 1231, 1237, ExpressionStatement(), result, prime, result, int, n, n, 32, ExpressionStatement(), result, prime, result, Arrays, hashCode, productsSums, ExpressionStatement(), result, prime, result, Arrays, hashCode, sums, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:VectorialCovariance:equals:Object#[IfStatement(if), this, obj, ReturnStatement(return), true, IfStatement(if), instanceof, obj, VectorialCovariance, ReturnStatement(return), false, VariableDeclarationStatement(), VectorialCovariance, other, VectorialCovariance, obj, IfStatement(if), isBiasCorrected, other.isBiasCorrected, ReturnStatement(return), false, IfStatement(if), n, other.n, ReturnStatement(return), false, IfStatement(if), Arrays, equals, productsSums, other.productsSums, ReturnStatement(return), false, IfStatement(if), Arrays, equals, sums, other.sums, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:increment:double[]#[IfStatement(if), v.length, means.length, ThrowStatement(throw), new, DimensionMismatchException, v.length, means.length, ForStatement(for), int, i, 0, i, v.length, i, ExpressionStatement(), means, i, increment, v, i]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:getResult:null#[VariableDeclarationStatement(), double, result, double, means.length, ForStatement(for), int, i, 0, i, result.length, i, ExpressionStatement(), result, i, means, i, getResult, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:getN:null#[ReturnStatement(return), means.length, 0, 0, means, 0, getN]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:hashCode:null#[VariableDeclarationStatement(), final, int, prime, 31, VariableDeclarationStatement(), int, result, 1, ExpressionStatement(), result, prime, result, Arrays, hashCode, means, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.moment:VectorialMean:equals:Object#[IfStatement(if), this, obj, ReturnStatement(return), true, IfStatement(if), instanceof, obj, VectorialMean, ReturnStatement(return), false, VariableDeclarationStatement(), VectorialMean, other, VectorialMean, obj, IfStatement(if), Arrays, equals, means, other.means, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:addValue:double[]#[ExpressionStatement(), checkDimension, value.length, ForStatement(for), int, i, 0, i, k, i, VariableDeclarationStatement(), double, v, value, i, ExpressionStatement(), sumImpl, i, increment, v, ExpressionStatement(), sumSqImpl, i, increment, v, ExpressionStatement(), minImpl, i, increment, v, ExpressionStatement(), maxImpl, i, increment, v, ExpressionStatement(), sumLogImpl, i, increment, v, ExpressionStatement(), geoMeanImpl, i, increment, v, ExpressionStatement(), meanImpl, i, increment, v, ExpressionStatement(), covarianceImpl, increment, value, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getDimension:null#[ReturnStatement(return), k]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getResults:StorelessUnivariateStatistic[]#[VariableDeclarationStatement(), double, results, double, stats.length, ForStatement(for), int, i, 0, i, results.length, i, ExpressionStatement(), results, i, stats, i, getResult, ReturnStatement(return), results]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSum:null#[ReturnStatement(return), getResults, sumImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumSq:null#[ReturnStatement(return), getResults, sumSqImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumLog:null#[ReturnStatement(return), getResults, sumLogImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMean:null#[ReturnStatement(return), getResults, meanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getStandardDeviation:null#[VariableDeclarationStatement(), double, stdDev, double, k, IfStatement(if), getN, 1, ExpressionStatement(), Arrays, fill, stdDev, Double.NaN, IfStatement(if), getN, 2, ExpressionStatement(), Arrays, fill, stdDev, 0.0, VariableDeclarationStatement(), RealMatrix, matrix, covarianceImpl, getResult, ForStatement(for), int, i, 0, i, k, i, ExpressionStatement(), stdDev, i, FastMath, sqrt, matrix, getEntry, i, i, ReturnStatement(return), stdDev]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getCovariance:null#[ReturnStatement(return), covarianceImpl, getResult]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMax:null#[ReturnStatement(return), getResults, maxImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMin:null#[ReturnStatement(return), getResults, minImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getGeometricMean:null#[ReturnStatement(return), getResults, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:toString:null#[VariableDeclarationStatement(), final, String, separator, ", ", VariableDeclarationStatement(), final, String, suffix, System, getProperty, "line.separator", VariableDeclarationStatement(), StringBuilder, outBuffer, new, StringBuilder, ExpressionStatement(), outBuffer, append, "MultivariateSummaryStatistics:", suffix, ExpressionStatement(), outBuffer, append, "n: ", getN, suffix, ExpressionStatement(), append, outBuffer, getMin, "min: ", separator, suffix, ExpressionStatement(), append, outBuffer, getMax, "max: ", separator, suffix, ExpressionStatement(), append, outBuffer, getMean, "mean: ", separator, suffix, ExpressionStatement(), append, outBuffer, getGeometricMean, "geometric mean: ", separator, suffix, ExpressionStatement(), append, outBuffer, getSumSq, "sum of squares: ", separator, suffix, ExpressionStatement(), append, outBuffer, getSumLog, "sum of logarithms: ", separator, suffix, ExpressionStatement(), append, outBuffer, getStandardDeviation, "standard deviation: ", separator, suffix, ExpressionStatement(), outBuffer, append, "covariance: ", getCovariance, toString, suffix, ReturnStatement(return), outBuffer, toString]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:append:StringBuilder+double[]+String+String+String#[ExpressionStatement(), buffer, append, prefix, ForStatement(for), int, i, 0, i, data.length, i, IfStatement(if), i, 0, ExpressionStatement(), buffer, append, separator, ExpressionStatement(), buffer, append, data, i, ExpressionStatement(), buffer, append, suffix]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:clear:null#[ExpressionStatement(), this, n, 0, ForStatement(for), int, i, 0, i, k, i, ExpressionStatement(), minImpl, i, clear, ExpressionStatement(), maxImpl, i, clear, ExpressionStatement(), sumImpl, i, clear, ExpressionStatement(), sumLogImpl, i, clear, ExpressionStatement(), sumSqImpl, i, clear, ExpressionStatement(), geoMeanImpl, i, clear, ExpressionStatement(), meanImpl, i, clear, ExpressionStatement(), covarianceImpl, clear]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:equals:Object#[IfStatement(if), object, this, ReturnStatement(return), true, IfStatement(if), instanceof, object, MultivariateSummaryStatistics, false, ReturnStatement(return), false, VariableDeclarationStatement(), MultivariateSummaryStatistics, stat, MultivariateSummaryStatistics, object, ReturnStatement(return), MathArrays, equalsIncludingNaN, stat, getGeometricMean, getGeometricMean, MathArrays, equalsIncludingNaN, stat, getMax, getMax, MathArrays, equalsIncludingNaN, stat, getMean, getMean, MathArrays, equalsIncludingNaN, stat, getMin, getMin, Precision, equalsIncludingNaN, stat, getN, getN, MathArrays, equalsIncludingNaN, stat, getSum, getSum, MathArrays, equalsIncludingNaN, stat, getSumSq, getSumSq, MathArrays, equalsIncludingNaN, stat, getSumLog, getSumLog, stat, getCovariance, equals, getCovariance]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:hashCode:null#[VariableDeclarationStatement(), int, result, 31, MathUtils, hash, getGeometricMean, ExpressionStatement(), result, result, 31, MathUtils, hash, getGeometricMean, ExpressionStatement(), result, result, 31, MathUtils, hash, getMax, ExpressionStatement(), result, result, 31, MathUtils, hash, getMean, ExpressionStatement(), result, result, 31, MathUtils, hash, getMin, ExpressionStatement(), result, result, 31, MathUtils, hash, getN, ExpressionStatement(), result, result, 31, MathUtils, hash, getSum, ExpressionStatement(), result, result, 31, MathUtils, hash, getSumSq, ExpressionStatement(), result, result, 31, MathUtils, hash, getSumLog, ExpressionStatement(), result, result, 31, getCovariance, hashCode, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setImpl:StorelessUnivariateStatistic[]+StorelessUnivariateStatistic[]#[ExpressionStatement(), checkEmpty, ExpressionStatement(), checkDimension, newImpl.length, ExpressionStatement(), System, arraycopy, newImpl, 0, oldImpl, 0, newImpl.length]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumImpl:null#[ReturnStatement(return), sumImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setSumImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), setImpl, sumImpl, this, sumImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumsqImpl:null#[ReturnStatement(return), sumSqImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), setImpl, sumsqImpl, this, sumSqImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMinImpl:null#[ReturnStatement(return), minImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setMinImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), setImpl, minImpl, this, minImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMaxImpl:null#[ReturnStatement(return), maxImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setMaxImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), setImpl, maxImpl, this, maxImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getSumLogImpl:null#[ReturnStatement(return), sumLogImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), setImpl, sumLogImpl, this, sumLogImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getGeoMeanImpl:null#[ReturnStatement(return), geoMeanImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), setImpl, geoMeanImpl, this, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:getMeanImpl:null#[ReturnStatement(return), meanImpl, clone]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:setMeanImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), setImpl, meanImpl, this, meanImpl]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:checkEmpty:null#[IfStatement(if), n, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, n]
org.apache.commons.math4.stat.descriptive:MultivariateSummaryStatistics:checkDimension:int#[IfStatement(if), dimension, k, ThrowStatement(throw), new, DimensionMismatchException, dimension, k]
org.apache.commons.math4.stat.descriptive.rank:Max:increment:double#[IfStatement(if), d, value, Double, isNaN, value, ExpressionStatement(), value, d, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive.rank:Max:clear:null#[ExpressionStatement(), value, Double.NaN, ExpressionStatement(), n, 0]
org.apache.commons.math4.stat.descriptive.rank:Max:getResult:null#[ReturnStatement(return), value]
org.apache.commons.math4.stat.descriptive.rank:Max:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.rank:Max:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, max, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, ExpressionStatement(), max, values, begin, ForStatement(for), int, i, begin, i, begin, length, i, IfStatement(if), Double, isNaN, values, i, ExpressionStatement(), max, max, values, i, max, values, i, ReturnStatement(return), max]
org.apache.commons.math4.stat.descriptive.rank:Max:copy:null#[VariableDeclarationStatement(), Max, result, new, Max, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.rank:Max:copy:Max+Max#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.n, source.n, ExpressionStatement(), dest.value, source.value]
org.apache.commons.math4.stat.descriptive.rank:Median:withEstimationType:EstimationType#[ReturnStatement(return), new, Median, newEstimationType, getNaNStrategy, getKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Median:withNaNStrategy:NaNStrategy#[ReturnStatement(return), new, Median, getEstimationType, newNaNStrategy, getKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Median:withKthSelector:KthSelector#[ReturnStatement(return), new, Median, getEstimationType, getNaNStrategy, newKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Min:increment:double#[IfStatement(if), d, value, Double, isNaN, value, ExpressionStatement(), value, d, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive.rank:Min:clear:null#[ExpressionStatement(), value, Double.NaN, ExpressionStatement(), n, 0]
org.apache.commons.math4.stat.descriptive.rank:Min:getResult:null#[ReturnStatement(return), value]
org.apache.commons.math4.stat.descriptive.rank:Min:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.rank:Min:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, min, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, ExpressionStatement(), min, values, begin, ForStatement(for), int, i, begin, i, begin, length, i, IfStatement(if), Double, isNaN, values, i, ExpressionStatement(), min, min, values, i, min, values, i, ReturnStatement(return), min]
org.apache.commons.math4.stat.descriptive.rank:Min:copy:null#[VariableDeclarationStatement(), Min, result, new, Min, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.rank:Min:copy:Min+Min#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.n, source.n, ExpressionStatement(), dest.value, source.value]
org.apache.commons.math4.stat.descriptive.rank:Percentile:setData:double[]#[IfStatement(if), values, null, ExpressionStatement(), cachedPivots, null, ExpressionStatement(), cachedPivots, int, PIVOTS_HEAP_LENGTH, ExpressionStatement(), Arrays, fill, cachedPivots, 1, ExpressionStatement(), super, setData, values]
org.apache.commons.math4.stat.descriptive.rank:Percentile:setData:double[]+int+int#[IfStatement(if), values, null, ExpressionStatement(), cachedPivots, null, ExpressionStatement(), cachedPivots, int, PIVOTS_HEAP_LENGTH, ExpressionStatement(), Arrays, fill, cachedPivots, 1, ExpressionStatement(), super, setData, values, begin, length]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double#[ReturnStatement(return), evaluate, getDataRef, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+double#[ExpressionStatement(), MathArrays, verifyValues, values, 0, 0, ReturnStatement(return), evaluate, values, 0, values.length, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+int+int#[ReturnStatement(return), evaluate, values, start, length, quantile]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+int+int+double#[ExpressionStatement(), MathArrays, verifyValues, values, begin, length, IfStatement(if), p, 100, p, 0, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100, IfStatement(if), length, 0, ReturnStatement(return), Double.NaN, IfStatement(if), length, 1, ReturnStatement(return), values, begin, VariableDeclarationStatement(), final, double, work, getWorkArray, values, begin, length, VariableDeclarationStatement(), final, int, pivotsHeap, getPivots, values, ReturnStatement(return), work.length, 0, Double.NaN, estimationType, evaluate, work, pivotsHeap, p, kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getQuantile:null#[ReturnStatement(return), quantile]
org.apache.commons.math4.stat.descriptive.rank:Percentile:setQuantile:double#[IfStatement(if), p, 0, p, 100, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100, ExpressionStatement(), quantile, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:copy:null#[ReturnStatement(return), new, Percentile, this]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getWorkArray:double[]+int+int#[VariableDeclarationStatement(), final, double, work, IfStatement(if), values, getDataRef, ExpressionStatement(), work, getDataRef, SwitchStatement(switch), nanStrategy, SwitchCase(case), MAXIMAL, ExpressionStatement(), work, replaceAndSlice, values, begin, length, Double.NaN, Double.POSITIVE_INFINITY, BreakStatement(break), SwitchCase(case), MINIMAL, ExpressionStatement(), work, replaceAndSlice, values, begin, length, Double.NaN, Double.NEGATIVE_INFINITY, BreakStatement(break), SwitchCase(case), REMOVED, ExpressionStatement(), work, removeAndSlice, values, begin, length, Double.NaN, BreakStatement(break), SwitchCase(case), FAILED, ExpressionStatement(), work, copyOf, values, begin, length, ExpressionStatement(), MathArrays, checkNotNaN, work, BreakStatement(break), SwitchCase(default), ExpressionStatement(), work, copyOf, values, begin, length, BreakStatement(break), ReturnStatement(return), work]
org.apache.commons.math4.stat.descriptive.rank:Percentile:copyOf:double[]+int+int#[ExpressionStatement(), MathArrays, verifyValues, values, begin, length, ReturnStatement(return), MathArrays, copyOfRange, values, begin, begin, length]
org.apache.commons.math4.stat.descriptive.rank:Percentile:replaceAndSlice:double[]+int+int+double+double#[VariableDeclarationStatement(), final, double, temp, copyOf, values, begin, length, ForStatement(for), int, i, 0, i, length, i, ExpressionStatement(), temp, i, Precision, equalsIncludingNaN, original, temp, i, replacement, temp, i, ReturnStatement(return), temp]
org.apache.commons.math4.stat.descriptive.rank:Percentile:removeAndSlice:double[]+int+int+double#[ExpressionStatement(), MathArrays, verifyValues, values, begin, length, VariableDeclarationStatement(), final, double, temp, VariableDeclarationStatement(), final, BitSet, bits, new, BitSet, length, ForStatement(for), int, i, begin, i, begin, length, i, IfStatement(if), Precision, equalsIncludingNaN, removedValue, values, i, ExpressionStatement(), bits, set, i, begin, IfStatement(if), bits, isEmpty, ExpressionStatement(), temp, copyOf, values, begin, length, IfStatement(if), bits, cardinality, length, ExpressionStatement(), temp, double, 0, ExpressionStatement(), temp, double, length, bits, cardinality, VariableDeclarationStatement(), int, start, begin, VariableDeclarationStatement(), int, dest, 0, VariableDeclarationStatement(), int, nextOne, 1, VariableDeclarationStatement(), int, bitSetPtr, 0, WhileStatement(while), nextOne, bits, nextSetBit, bitSetPtr, 1, VariableDeclarationStatement(), final, int, lengthToCopy, nextOne, bitSetPtr, ExpressionStatement(), System, arraycopy, values, start, temp, dest, lengthToCopy, ExpressionStatement(), dest, lengthToCopy, ExpressionStatement(), start, begin, bitSetPtr, bits, nextClearBit, nextOne, IfStatement(if), start, begin, length, ExpressionStatement(), System, arraycopy, values, start, temp, dest, begin, length, start, ReturnStatement(return), temp]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getPivots:double[]#[VariableDeclarationStatement(), final, int, pivotsHeap, IfStatement(if), values, getDataRef, ExpressionStatement(), pivotsHeap, cachedPivots, ExpressionStatement(), pivotsHeap, int, PIVOTS_HEAP_LENGTH, ExpressionStatement(), Arrays, fill, pivotsHeap, 1, ReturnStatement(return), pivotsHeap]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getEstimationType:null#[ReturnStatement(return), estimationType]
org.apache.commons.math4.stat.descriptive.rank:Percentile:withEstimationType:EstimationType#[ReturnStatement(return), new, Percentile, quantile, newEstimationType, nanStrategy, kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getNaNStrategy:null#[ReturnStatement(return), nanStrategy]
org.apache.commons.math4.stat.descriptive.rank:Percentile:withNaNStrategy:NaNStrategy#[ReturnStatement(return), new, Percentile, quantile, estimationType, newNaNStrategy, kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getKthSelector:null#[ReturnStatement(return), kthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getPivotingStrategy:null#[ReturnStatement(return), kthSelector, getPivotingStrategy]
org.apache.commons.math4.stat.descriptive.rank:Percentile:withKthSelector:KthSelector#[ReturnStatement(return), new, Percentile, quantile, estimationType, nanStrategy, newKthSelector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 0d, VariableDeclarationStatement(), final, double, maxLimit, 1d, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, Double, compare, p, maxLimit, 0, length, p, length, 1]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 0d, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, length, p, 0.5]
org.apache.commons.math4.stat.descriptive.rank:Percentile:estimate:double[]+int[]+double+int+KthSelector#[ReturnStatement(return), super, estimate, values, pivotsHeap, FastMath, ceil, pos, 0.5, length, selector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 0d, VariableDeclarationStatement(), final, double, maxLimit, 1d, ReturnStatement(return), Double, compare, p, maxLimit, 0, length, Double, compare, p, minLimit, 0, 0, length, p, 0.5]
org.apache.commons.math4.stat.descriptive.rank:Percentile:estimate:double[]+int[]+double+int+KthSelector#[VariableDeclarationStatement(), final, double, low, super, estimate, values, pivotsHeap, FastMath, ceil, pos, 0.5, length, selector, VariableDeclarationStatement(), final, double, high, super, estimate, values, pivotsHeap, FastMath, floor, pos, 0.5, length, selector, ReturnStatement(return), low, high, 2]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 1d, 2, length, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, FastMath, rint, length, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 1d, length, VariableDeclarationStatement(), final, double, maxLimit, 1d, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, Double, compare, p, maxLimit, 0, length, length, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 1d, 2, length, VariableDeclarationStatement(), final, double, maxLimit, length, 0.5, length, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, Double, compare, p, maxLimit, 0, length, length, p, 0.5]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 1d, length, 1, VariableDeclarationStatement(), final, double, maxLimit, 1d, length, length, 1, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, Double, compare, p, maxLimit, 0, length, length, 1, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 0d, VariableDeclarationStatement(), final, double, maxLimit, 1d, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, Double, compare, p, maxLimit, 0, length, 1, length, 1, p]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 2, 1d, 3, length, 1d, 3, VariableDeclarationStatement(), final, double, maxLimit, length, 1d, 3, length, 1d, 3, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, Double, compare, p, maxLimit, 0, length, length, 1d, 3, p, 1d, 3]
org.apache.commons.math4.stat.descriptive.rank:Percentile:index:double+int#[VariableDeclarationStatement(), final, double, minLimit, 5d, 8, length, 0.25, VariableDeclarationStatement(), final, double, maxLimit, length, 3d, 8, length, 0.25, ReturnStatement(return), Double, compare, p, minLimit, 0, 0, Double, compare, p, maxLimit, 0, length, length, 0.25, p, 3d, 8]
org.apache.commons.math4.stat.descriptive.rank:Percentile:EstimationType:String#[ExpressionStatement(), this, name, type]
org.apache.commons.math4.stat.descriptive.rank:Percentile:estimate:double[]+int[]+double+int+KthSelector#[VariableDeclarationStatement(), final, double, fpos, FastMath, floor, pos, VariableDeclarationStatement(), final, int, intPos, int, fpos, VariableDeclarationStatement(), final, double, dif, pos, fpos, IfStatement(if), pos, 1, ReturnStatement(return), selector, select, work, pivotsHeap, 0, IfStatement(if), pos, length, ReturnStatement(return), selector, select, work, pivotsHeap, length, 1, VariableDeclarationStatement(), final, double, lower, selector, select, work, pivotsHeap, intPos, 1, VariableDeclarationStatement(), final, double, upper, selector, select, work, pivotsHeap, intPos, ReturnStatement(return), lower, dif, upper, lower]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+int[]+double+KthSelector#[ExpressionStatement(), MathUtils, checkNotNull, work, IfStatement(if), p, 100, p, 0, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100, ReturnStatement(return), estimate, work, pivotsHeap, index, p, 100d, work.length, work.length, selector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:evaluate:double[]+double+KthSelector#[ReturnStatement(return), this, evaluate, work, null, p, selector]
org.apache.commons.math4.stat.descriptive.rank:Percentile:getName:null#[ReturnStatement(return), name]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:hashCode:null#[VariableDeclarationStatement(), double, result, getResult, ExpressionStatement(), result, Double, isNaN, result, 37, result, VariableDeclarationStatement(), final, double, markersHash, markers, null, 0, markers, hashCode, VariableDeclarationStatement(), final, double, toHash, result, quantile, markersHash, countOfObservations, ReturnStatement(return), Arrays, hashCode, toHash]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:equals:Object#[VariableDeclarationStatement(), boolean, result, false, IfStatement(if), this, o, ExpressionStatement(), result, true, IfStatement(if), instanceof, o, PSquarePercentile, VariableDeclarationStatement(), PSquarePercentile, that, PSquarePercentile, o, VariableDeclarationStatement(), boolean, isNotNull, markers, null, that.markers, null, VariableDeclarationStatement(), boolean, isNull, markers, null, that.markers, null, ExpressionStatement(), result, isNotNull, markers, equals, that.markers, isNull, ExpressionStatement(), result, result, getN, that, getN, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:increment:double#[ExpressionStatement(), countOfObservations, ExpressionStatement(), this, lastObservation, observation, IfStatement(if), markers, null, IfStatement(if), initialFive, add, observation, ExpressionStatement(), Collections, sort, initialFive, ExpressionStatement(), pValue, initialFive, get, int, quantile, initialFive, size, 1, ReturnStatement(return), ExpressionStatement(), markers, newMarkers, initialFive, quantile, ExpressionStatement(), pValue, markers, processDataPoint, observation]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:toString:null#[IfStatement(if), markers, null, ReturnStatement(return), String, format, "obs=%s pValue=%s", DECIMAL_FORMAT, format, lastObservation, DECIMAL_FORMAT, format, pValue, ReturnStatement(return), String, format, "obs=%s markers=%s", DECIMAL_FORMAT, format, lastObservation, markers, toString]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:getN:null#[ReturnStatement(return), countOfObservations]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:copy:null#[VariableDeclarationStatement(), PSquarePercentile, copy, new, PSquarePercentile, 100d, quantile, IfStatement(if), markers, null, ExpressionStatement(), copy.markers, PSquareMarkers, markers, clone, ExpressionStatement(), copy.countOfObservations, countOfObservations, ExpressionStatement(), copy.pValue, pValue, ExpressionStatement(), copy.initialFive, clear, ExpressionStatement(), copy.initialFive, addAll, initialFive, ReturnStatement(return), copy]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:quantile:null#[ReturnStatement(return), quantile]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:clear:null#[ExpressionStatement(), markers, null, ExpressionStatement(), initialFive, clear, ExpressionStatement(), countOfObservations, 0L, ExpressionStatement(), pValue, Double.NaN]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:getResult:null#[IfStatement(if), Double, compare, quantile, 1d, 0, ExpressionStatement(), pValue, maximum, IfStatement(if), Double, compare, quantile, 0d, 0, ExpressionStatement(), pValue, minimum, ReturnStatement(return), pValue]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:maximum:null#[VariableDeclarationStatement(), double, val, Double.NaN, IfStatement(if), markers, null, ExpressionStatement(), val, markers, height, PSQUARE_CONSTANT, IfStatement(if), initialFive, isEmpty, ExpressionStatement(), val, initialFive, get, initialFive, size, 1, ReturnStatement(return), val]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:minimum:null#[VariableDeclarationStatement(), double, val, Double.NaN, IfStatement(if), markers, null, ExpressionStatement(), val, markers, height, 1, IfStatement(if), initialFive, isEmpty, ExpressionStatement(), val, initialFive, get, 0, ReturnStatement(return), val]
org.apache.commons.math4.stat.descriptive.rank:PSquarePercentile:newMarkers:List<Double>+double#[ReturnStatement(return), new, Markers, initialFive, p]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getMax:null#[ReturnStatement(return), max]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getMean:null#[ReturnStatement(return), mean]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getMin:null#[ReturnStatement(return), min]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getSum:null#[ReturnStatement(return), sum]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getStandardDeviation:null#[ReturnStatement(return), FastMath, sqrt, variance]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:getVariance:null#[ReturnStatement(return), variance]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:equals:Object#[IfStatement(if), object, this, ReturnStatement(return), true, IfStatement(if), instanceof, object, StatisticalSummaryValues, false, ReturnStatement(return), false, VariableDeclarationStatement(), StatisticalSummaryValues, stat, StatisticalSummaryValues, object, ReturnStatement(return), Precision, equalsIncludingNaN, stat, getMax, getMax, Precision, equalsIncludingNaN, stat, getMean, getMean, Precision, equalsIncludingNaN, stat, getMin, getMin, Precision, equalsIncludingNaN, stat, getN, getN, Precision, equalsIncludingNaN, stat, getSum, getSum, Precision, equalsIncludingNaN, stat, getVariance, getVariance]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:hashCode:null#[VariableDeclarationStatement(), int, result, 31, MathUtils, hash, getMax, ExpressionStatement(), result, result, 31, MathUtils, hash, getMean, ExpressionStatement(), result, result, 31, MathUtils, hash, getMin, ExpressionStatement(), result, result, 31, MathUtils, hash, getN, ExpressionStatement(), result, result, 31, MathUtils, hash, getSum, ExpressionStatement(), result, result, 31, MathUtils, hash, getVariance, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive:StatisticalSummaryValues:toString:null#[VariableDeclarationStatement(), StringBuffer, outBuffer, new, StringBuffer, VariableDeclarationStatement(), String, endl, "\n", ExpressionStatement(), outBuffer, append, "StatisticalSummaryValues:", append, endl, ExpressionStatement(), outBuffer, append, "n: ", append, getN, append, endl, ExpressionStatement(), outBuffer, append, "min: ", append, getMin, append, endl, ExpressionStatement(), outBuffer, append, "max: ", append, getMax, append, endl, ExpressionStatement(), outBuffer, append, "mean: ", append, getMean, append, endl, ExpressionStatement(), outBuffer, append, "std dev: ", append, getStandardDeviation, append, endl, ExpressionStatement(), outBuffer, append, "variance: ", append, getVariance, append, endl, ExpressionStatement(), outBuffer, append, "sum: ", append, getSum, append, endl, ReturnStatement(return), outBuffer, toString]
org.apache.commons.math4.stat.descriptive.summary:Product:increment:double#[ExpressionStatement(), value, d, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive.summary:Product:getResult:null#[ReturnStatement(return), value]
org.apache.commons.math4.stat.descriptive.summary:Product:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.summary:Product:clear:null#[ExpressionStatement(), value, 1, ExpressionStatement(), n, 0]
org.apache.commons.math4.stat.descriptive.summary:Product:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, product, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, true, ExpressionStatement(), product, 1.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), product, values, i, ReturnStatement(return), product]
org.apache.commons.math4.stat.descriptive.summary:Product:evaluate:double[]+double[]+int+int#[VariableDeclarationStatement(), double, product, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, weights, begin, length, true, ExpressionStatement(), product, 1.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), product, FastMath, pow, values, i, weights, i, ReturnStatement(return), product]
org.apache.commons.math4.stat.descriptive.summary:Product:evaluate:double[]+double[]#[ReturnStatement(return), evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.summary:Product:copy:null#[VariableDeclarationStatement(), Product, result, new, Product, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.summary:Product:copy:Product+Product#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.n, source.n, ExpressionStatement(), dest.value, source.value]
org.apache.commons.math4.stat.descriptive.summary:Sum:increment:double#[ExpressionStatement(), value, d, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive.summary:Sum:getResult:null#[ReturnStatement(return), value]
org.apache.commons.math4.stat.descriptive.summary:Sum:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.summary:Sum:clear:null#[ExpressionStatement(), value, 0, ExpressionStatement(), n, 0]
org.apache.commons.math4.stat.descriptive.summary:Sum:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, sum, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, true, ExpressionStatement(), sum, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), sum, values, i, ReturnStatement(return), sum]
org.apache.commons.math4.stat.descriptive.summary:Sum:evaluate:double[]+double[]+int+int#[VariableDeclarationStatement(), double, sum, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, weights, begin, length, true, ExpressionStatement(), sum, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), sum, values, i, weights, i, ReturnStatement(return), sum]
org.apache.commons.math4.stat.descriptive.summary:Sum:evaluate:double[]+double[]#[ReturnStatement(return), evaluate, values, weights, 0, values.length]
org.apache.commons.math4.stat.descriptive.summary:Sum:copy:null#[VariableDeclarationStatement(), Sum, result, new, Sum, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.summary:Sum:copy:Sum+Sum#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.n, source.n, ExpressionStatement(), dest.value, source.value]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:increment:double#[ExpressionStatement(), value, FastMath, log, d, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:getResult:null#[ReturnStatement(return), value]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:clear:null#[ExpressionStatement(), value, 0d, ExpressionStatement(), n, 0]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, sumLog, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, true, ExpressionStatement(), sumLog, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), sumLog, FastMath, log, values, i, ReturnStatement(return), sumLog]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:copy:null#[VariableDeclarationStatement(), SumOfLogs, result, new, SumOfLogs, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.summary:SumOfLogs:copy:SumOfLogs+SumOfLogs#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.n, source.n, ExpressionStatement(), dest.value, source.value]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:increment:double#[ExpressionStatement(), value, d, d, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:getResult:null#[ReturnStatement(return), value]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:clear:null#[ExpressionStatement(), value, 0, ExpressionStatement(), n, 0]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:evaluate:double[]+int+int#[VariableDeclarationStatement(), double, sumSq, Double.NaN, IfStatement(if), MathArrays, verifyValues, values, begin, length, true, ExpressionStatement(), sumSq, 0.0, ForStatement(for), int, i, begin, i, begin, length, i, ExpressionStatement(), sumSq, values, i, values, i, ReturnStatement(return), sumSq]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:copy:null#[VariableDeclarationStatement(), SumOfSquares, result, new, SumOfSquares, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive.summary:SumOfSquares:copy:SumOfSquares+SumOfSquares#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.n, source.n, ExpressionStatement(), dest.value, source.value]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSummary:null#[ReturnStatement(return), new, StatisticalSummaryValues, getMean, getVariance, getN, getMax, getMin, getSum]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:addValue:double#[ExpressionStatement(), sumImpl, increment, value, ExpressionStatement(), sumsqImpl, increment, value, ExpressionStatement(), minImpl, increment, value, ExpressionStatement(), maxImpl, increment, value, ExpressionStatement(), sumLogImpl, increment, value, ExpressionStatement(), secondMoment, increment, value, IfStatement(if), meanImpl, mean, ExpressionStatement(), meanImpl, increment, value, IfStatement(if), varianceImpl, variance, ExpressionStatement(), varianceImpl, increment, value, IfStatement(if), geoMeanImpl, geoMean, ExpressionStatement(), geoMeanImpl, increment, value, ExpressionStatement(), n]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSum:null#[ReturnStatement(return), sumImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumsq:null#[ReturnStatement(return), sumsqImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMean:null#[ReturnStatement(return), meanImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getStandardDeviation:null#[VariableDeclarationStatement(), double, stdDev, Double.NaN, IfStatement(if), getN, 0, IfStatement(if), getN, 1, ExpressionStatement(), stdDev, FastMath, sqrt, getVariance, ExpressionStatement(), stdDev, 0.0, ReturnStatement(return), stdDev]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getQuadraticMean:null#[VariableDeclarationStatement(), final, long, size, getN, ReturnStatement(return), size, 0, FastMath, sqrt, getSumsq, size, Double.NaN]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getVariance:null#[ReturnStatement(return), varianceImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getPopulationVariance:null#[VariableDeclarationStatement(), Variance, populationVariance, new, Variance, secondMoment, ExpressionStatement(), populationVariance, setBiasCorrected, false, ReturnStatement(return), populationVariance, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMax:null#[ReturnStatement(return), maxImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMin:null#[ReturnStatement(return), minImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getGeometricMean:null#[ReturnStatement(return), geoMeanImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumOfLogs:null#[ReturnStatement(return), sumLogImpl, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSecondMoment:null#[ReturnStatement(return), secondMoment, getResult]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:toString:null#[VariableDeclarationStatement(), StringBuilder, outBuffer, new, StringBuilder, VariableDeclarationStatement(), String, endl, "\n", ExpressionStatement(), outBuffer, append, "SummaryStatistics:", append, endl, ExpressionStatement(), outBuffer, append, "n: ", append, getN, append, endl, ExpressionStatement(), outBuffer, append, "min: ", append, getMin, append, endl, ExpressionStatement(), outBuffer, append, "max: ", append, getMax, append, endl, ExpressionStatement(), outBuffer, append, "sum: ", append, getSum, append, endl, ExpressionStatement(), outBuffer, append, "mean: ", append, getMean, append, endl, ExpressionStatement(), outBuffer, append, "geometric mean: ", append, getGeometricMean, append, endl, ExpressionStatement(), outBuffer, append, "variance: ", append, getVariance, append, endl, ExpressionStatement(), outBuffer, append, "population variance: ", append, getPopulationVariance, append, endl, ExpressionStatement(), outBuffer, append, "second moment: ", append, getSecondMoment, append, endl, ExpressionStatement(), outBuffer, append, "sum of squares: ", append, getSumsq, append, endl, ExpressionStatement(), outBuffer, append, "standard deviation: ", append, getStandardDeviation, append, endl, ExpressionStatement(), outBuffer, append, "sum of logs: ", append, getSumOfLogs, append, endl, ReturnStatement(return), outBuffer, toString]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:clear:null#[ExpressionStatement(), this, n, 0, ExpressionStatement(), minImpl, clear, ExpressionStatement(), maxImpl, clear, ExpressionStatement(), sumImpl, clear, ExpressionStatement(), sumLogImpl, clear, ExpressionStatement(), sumsqImpl, clear, ExpressionStatement(), geoMeanImpl, clear, ExpressionStatement(), secondMoment, clear, IfStatement(if), meanImpl, mean, ExpressionStatement(), meanImpl, clear, IfStatement(if), varianceImpl, variance, ExpressionStatement(), varianceImpl, clear]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:equals:Object#[IfStatement(if), object, this, ReturnStatement(return), true, IfStatement(if), instanceof, object, SummaryStatistics, false, ReturnStatement(return), false, VariableDeclarationStatement(), SummaryStatistics, stat, SummaryStatistics, object, ReturnStatement(return), Precision, equalsIncludingNaN, stat, getGeometricMean, getGeometricMean, Precision, equalsIncludingNaN, stat, getMax, getMax, Precision, equalsIncludingNaN, stat, getMean, getMean, Precision, equalsIncludingNaN, stat, getMin, getMin, Precision, equalsIncludingNaN, stat, getN, getN, Precision, equalsIncludingNaN, stat, getSum, getSum, Precision, equalsIncludingNaN, stat, getSumsq, getSumsq, Precision, equalsIncludingNaN, stat, getVariance, getVariance]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:hashCode:null#[VariableDeclarationStatement(), int, result, 31, MathUtils, hash, getGeometricMean, ExpressionStatement(), result, result, 31, MathUtils, hash, getGeometricMean, ExpressionStatement(), result, result, 31, MathUtils, hash, getMax, ExpressionStatement(), result, result, 31, MathUtils, hash, getMean, ExpressionStatement(), result, result, 31, MathUtils, hash, getMin, ExpressionStatement(), result, result, 31, MathUtils, hash, getN, ExpressionStatement(), result, result, 31, MathUtils, hash, getSum, ExpressionStatement(), result, result, 31, MathUtils, hash, getSumsq, ExpressionStatement(), result, result, 31, MathUtils, hash, getVariance, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumImpl:null#[ReturnStatement(return), sumImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setSumImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, sumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumsqImpl:null#[ReturnStatement(return), sumsqImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, sumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMinImpl:null#[ReturnStatement(return), minImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setMinImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, minImpl, minImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMaxImpl:null#[ReturnStatement(return), maxImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setMaxImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, maxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getSumLogImpl:null#[ReturnStatement(return), sumLogImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, sumLogImpl, sumLogImpl, ExpressionStatement(), geoMean, setSumLogImpl, sumLogImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getGeoMeanImpl:null#[ReturnStatement(return), geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, geoMeanImpl, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getMeanImpl:null#[ReturnStatement(return), meanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setMeanImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, meanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:getVarianceImpl:null#[ReturnStatement(return), varianceImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:setVarianceImpl:StorelessUnivariateStatistic#[ExpressionStatement(), checkEmpty, ExpressionStatement(), this, varianceImpl, varianceImpl]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:checkEmpty:null#[IfStatement(if), n, 0, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, n]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:copy:null#[VariableDeclarationStatement(), SummaryStatistics, result, new, SummaryStatistics, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive:SummaryStatistics:copy:SummaryStatistics+SummaryStatistics#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, ExpressionStatement(), dest.maxImpl, source.maxImpl, copy, ExpressionStatement(), dest.minImpl, source.minImpl, copy, ExpressionStatement(), dest.sumImpl, source.sumImpl, copy, ExpressionStatement(), dest.sumLogImpl, source.sumLogImpl, copy, ExpressionStatement(), dest.sumsqImpl, source.sumsqImpl, copy, ExpressionStatement(), dest.secondMoment, source.secondMoment, copy, ExpressionStatement(), dest.n, source.n, IfStatement(if), instanceof, source, getVarianceImpl, Variance, ExpressionStatement(), dest.varianceImpl, new, Variance, dest.secondMoment, ExpressionStatement(), dest.varianceImpl, source.varianceImpl, copy, IfStatement(if), instanceof, source.meanImpl, Mean, ExpressionStatement(), dest.meanImpl, new, Mean, dest.secondMoment, ExpressionStatement(), dest.meanImpl, source.meanImpl, copy, IfStatement(if), instanceof, source, getGeoMeanImpl, GeometricMean, ExpressionStatement(), dest.geoMeanImpl, new, GeometricMean, SumOfLogs, dest.sumLogImpl, ExpressionStatement(), dest.geoMeanImpl, source.geoMeanImpl, copy, IfStatement(if), source.geoMean, source.geoMeanImpl, ExpressionStatement(), dest.geoMean, GeometricMean, dest.geoMeanImpl, ExpressionStatement(), GeometricMean, copy, source.geoMean, dest.geoMean, IfStatement(if), source.max, source.maxImpl, ExpressionStatement(), dest.max, Max, dest.maxImpl, ExpressionStatement(), Max, copy, source.max, dest.max, IfStatement(if), source.mean, source.meanImpl, ExpressionStatement(), dest.mean, Mean, dest.meanImpl, ExpressionStatement(), Mean, copy, source.mean, dest.mean, IfStatement(if), source.min, source.minImpl, ExpressionStatement(), dest.min, Min, dest.minImpl, ExpressionStatement(), Min, copy, source.min, dest.min, IfStatement(if), source.sum, source.sumImpl, ExpressionStatement(), dest.sum, Sum, dest.sumImpl, ExpressionStatement(), Sum, copy, source.sum, dest.sum, IfStatement(if), source.variance, source.varianceImpl, ExpressionStatement(), dest.variance, Variance, dest.varianceImpl, ExpressionStatement(), Variance, copy, source.variance, dest.variance, IfStatement(if), source.sumLog, source.sumLogImpl, ExpressionStatement(), dest.sumLog, SumOfLogs, dest.sumLogImpl, ExpressionStatement(), SumOfLogs, copy, source.sumLog, dest.sumLog, IfStatement(if), source.sumsq, source.sumsqImpl, ExpressionStatement(), dest.sumsq, SumOfSquares, dest.sumsqImpl, ExpressionStatement(), SumOfSquares, copy, source.sumsq, dest.sumsq]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:addValue:double#[ExpressionStatement(), super, addValue, v]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:apply:UnivariateStatistic#[ReturnStatement(return), super, apply, stat]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:clear:null#[ExpressionStatement(), super, clear]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getElement:int#[ReturnStatement(return), super, getElement, index]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getN:null#[ReturnStatement(return), super, getN]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getStandardDeviation:null#[ReturnStatement(return), super, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getQuadraticMean:null#[ReturnStatement(return), super, getQuadraticMean]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getValues:null#[ReturnStatement(return), super, getValues]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:getWindowSize:null#[ReturnStatement(return), super, getWindowSize]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:setWindowSize:int#[ExpressionStatement(), super, setWindowSize, windowSize]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:toString:null#[ReturnStatement(return), super, toString]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:copy:null#[VariableDeclarationStatement(), SynchronizedDescriptiveStatistics, result, new, SynchronizedDescriptiveStatistics, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive:SynchronizedDescriptiveStatistics:copy:SynchronizedDescriptiveStatistics+SynchronizedDescriptiveStatistics#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, SynchronizedStatement(), source, SynchronizedStatement(), dest, ExpressionStatement(), DescriptiveStatistics, copy, source, dest]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:addValue:double[]#[ExpressionStatement(), super, addValue, value]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getDimension:null#[ReturnStatement(return), super, getDimension]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getN:null#[ReturnStatement(return), super, getN]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSum:null#[ReturnStatement(return), super, getSum]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumSq:null#[ReturnStatement(return), super, getSumSq]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumLog:null#[ReturnStatement(return), super, getSumLog]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMean:null#[ReturnStatement(return), super, getMean]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getStandardDeviation:null#[ReturnStatement(return), super, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getCovariance:null#[ReturnStatement(return), super, getCovariance]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMax:null#[ReturnStatement(return), super, getMax]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMin:null#[ReturnStatement(return), super, getMin]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getGeometricMean:null#[ReturnStatement(return), super, getGeometricMean]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:toString:null#[ReturnStatement(return), super, toString]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:clear:null#[ExpressionStatement(), super, clear]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:equals:Object#[ReturnStatement(return), super, equals, object]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:hashCode:null#[ReturnStatement(return), super, hashCode]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumImpl:null#[ReturnStatement(return), super, getSumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setSumImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), super, setSumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumsqImpl:null#[ReturnStatement(return), super, getSumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), super, setSumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMinImpl:null#[ReturnStatement(return), super, getMinImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setMinImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), super, setMinImpl, minImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMaxImpl:null#[ReturnStatement(return), super, getMaxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setMaxImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), super, setMaxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getSumLogImpl:null#[ReturnStatement(return), super, getSumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), super, setSumLogImpl, sumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getGeoMeanImpl:null#[ReturnStatement(return), super, getGeoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), super, setGeoMeanImpl, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:getMeanImpl:null#[ReturnStatement(return), super, getMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedMultivariateSummaryStatistics:setMeanImpl:StorelessUnivariateStatistic[]#[ExpressionStatement(), super, setMeanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSummary:null#[ReturnStatement(return), super, getSummary]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:addValue:double#[ExpressionStatement(), super, addValue, value]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getN:null#[ReturnStatement(return), super, getN]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSum:null#[ReturnStatement(return), super, getSum]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumsq:null#[ReturnStatement(return), super, getSumsq]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMean:null#[ReturnStatement(return), super, getMean]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getStandardDeviation:null#[ReturnStatement(return), super, getStandardDeviation]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getQuadraticMean:null#[ReturnStatement(return), super, getQuadraticMean]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getVariance:null#[ReturnStatement(return), super, getVariance]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getPopulationVariance:null#[ReturnStatement(return), super, getPopulationVariance]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMax:null#[ReturnStatement(return), super, getMax]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMin:null#[ReturnStatement(return), super, getMin]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getGeometricMean:null#[ReturnStatement(return), super, getGeometricMean]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:toString:null#[ReturnStatement(return), super, toString]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:clear:null#[ExpressionStatement(), super, clear]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:equals:Object#[ReturnStatement(return), super, equals, object]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:hashCode:null#[ReturnStatement(return), super, hashCode]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumImpl:null#[ReturnStatement(return), super, getSumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setSumImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setSumImpl, sumImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumsqImpl:null#[ReturnStatement(return), super, getSumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setSumsqImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setSumsqImpl, sumsqImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMinImpl:null#[ReturnStatement(return), super, getMinImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setMinImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setMinImpl, minImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMaxImpl:null#[ReturnStatement(return), super, getMaxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setMaxImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setMaxImpl, maxImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getSumLogImpl:null#[ReturnStatement(return), super, getSumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setSumLogImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setSumLogImpl, sumLogImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getGeoMeanImpl:null#[ReturnStatement(return), super, getGeoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setGeoMeanImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setGeoMeanImpl, geoMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getMeanImpl:null#[ReturnStatement(return), super, getMeanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setMeanImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setMeanImpl, meanImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:getVarianceImpl:null#[ReturnStatement(return), super, getVarianceImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:setVarianceImpl:StorelessUnivariateStatistic#[ExpressionStatement(), super, setVarianceImpl, varianceImpl]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:copy:null#[VariableDeclarationStatement(), SynchronizedSummaryStatistics, result, new, SynchronizedSummaryStatistics, ExpressionStatement(), copy, this, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.descriptive:SynchronizedSummaryStatistics:copy:SynchronizedSummaryStatistics+SynchronizedSummaryStatistics#[ExpressionStatement(), MathUtils, checkNotNull, source, ExpressionStatement(), MathUtils, checkNotNull, dest, SynchronizedStatement(), source, SynchronizedStatement(), dest, ExpressionStatement(), SummaryStatistics, copy, source, dest]
org.apache.commons.math4.stat:Frequency:toString:null#[VariableDeclarationStatement(), NumberFormat, nf, NumberFormat, getPercentInstance, VariableDeclarationStatement(), StringBuilder, outBuffer, new, StringBuilder, ExpressionStatement(), outBuffer, append, "Value \t Freq. \t Pct. \t Cum Pct. \n", VariableDeclarationStatement(), Iterator, Comparable, iter, freqTable, keySet, iterator, WhileStatement(while), iter, hasNext, VariableDeclarationStatement(), Comparable, value, iter, next, ExpressionStatement(), outBuffer, append, value, ExpressionStatement(), outBuffer, append, '\t', ExpressionStatement(), outBuffer, append, getCount, value, ExpressionStatement(), outBuffer, append, '\t', ExpressionStatement(), outBuffer, append, nf, format, getPct, value, ExpressionStatement(), outBuffer, append, '\t', ExpressionStatement(), outBuffer, append, nf, format, getCumPct, value, ExpressionStatement(), outBuffer, append, '\n', ReturnStatement(return), outBuffer, toString]
org.apache.commons.math4.stat:Frequency:addValue:Comparable<?>#[ExpressionStatement(), incrementValue, v, 1]
org.apache.commons.math4.stat:Frequency:addValue:int#[ExpressionStatement(), addValue, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:addValue:long#[ExpressionStatement(), addValue, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:addValue:char#[ExpressionStatement(), addValue, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:incrementValue:Comparable<?>+long#[VariableDeclarationStatement(), Comparable, obj, v, IfStatement(if), instanceof, v, Integer, ExpressionStatement(), obj, Long, valueOf, Integer, v, longValue, TryStatement(try), VariableDeclarationStatement(), Long, count, freqTable, get, obj, IfStatement(if), count, null, ExpressionStatement(), freqTable, put, obj, Long, valueOf, increment, ExpressionStatement(), freqTable, put, obj, Long, valueOf, count, longValue, increment, catch, ClassCastException, ex, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES, v, getClass, getName]
org.apache.commons.math4.stat:Frequency:incrementValue:int+long#[ExpressionStatement(), incrementValue, Long, valueOf, v, increment]
org.apache.commons.math4.stat:Frequency:incrementValue:long+long#[ExpressionStatement(), incrementValue, Long, valueOf, v, increment]
org.apache.commons.math4.stat:Frequency:incrementValue:char+long#[ExpressionStatement(), incrementValue, Character, valueOf, v, increment]
org.apache.commons.math4.stat:Frequency:clear:null#[ExpressionStatement(), freqTable, clear]
org.apache.commons.math4.stat:Frequency:valuesIterator:null#[ReturnStatement(return), freqTable, keySet, iterator]
org.apache.commons.math4.stat:Frequency:entrySetIterator:null#[ReturnStatement(return), freqTable, entrySet, iterator]
org.apache.commons.math4.stat:Frequency:getSumFreq:null#[VariableDeclarationStatement(), long, result, 0, VariableDeclarationStatement(), Iterator, Long, iterator, freqTable, values, iterator, WhileStatement(while), iterator, hasNext, ExpressionStatement(), result, iterator, next, longValue, ReturnStatement(return), result]
org.apache.commons.math4.stat:Frequency:getCount:Comparable<?>#[IfStatement(if), instanceof, v, Integer, ReturnStatement(return), getCount, Integer, v, longValue, VariableDeclarationStatement(), long, result, 0, TryStatement(try), VariableDeclarationStatement(), Long, count, freqTable, get, v, IfStatement(if), count, null, ExpressionStatement(), result, count, longValue, catch, ClassCastException, ex, ReturnStatement(return), result]
org.apache.commons.math4.stat:Frequency:getCount:int#[ReturnStatement(return), getCount, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCount:long#[ReturnStatement(return), getCount, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCount:char#[ReturnStatement(return), getCount, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getUniqueCount:null#[ReturnStatement(return), freqTable, keySet, size]
org.apache.commons.math4.stat:Frequency:getPct:Comparable<?>#[VariableDeclarationStatement(), final, long, sumFreq, getSumFreq, IfStatement(if), sumFreq, 0, ReturnStatement(return), Double.NaN, ReturnStatement(return), double, getCount, v, double, sumFreq]
org.apache.commons.math4.stat:Frequency:getPct:int#[ReturnStatement(return), getPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getPct:long#[ReturnStatement(return), getPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getPct:char#[ReturnStatement(return), getPct, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumFreq:Comparable<?>#[IfStatement(if), getSumFreq, 0, ReturnStatement(return), 0, IfStatement(if), instanceof, v, Integer, ReturnStatement(return), getCumFreq, Integer, v, longValue, VariableDeclarationStatement(), Comparator, Comparable, c, Comparator, Comparable, freqTable, comparator, IfStatement(if), c, null, ExpressionStatement(), c, new, NaturalComparator, VariableDeclarationStatement(), long, result, 0, TryStatement(try), VariableDeclarationStatement(), Long, value, freqTable, get, v, IfStatement(if), value, null, ExpressionStatement(), result, value, longValue, catch, ClassCastException, ex, ReturnStatement(return), result, IfStatement(if), c, compare, v, freqTable, firstKey, 0, ReturnStatement(return), 0, IfStatement(if), c, compare, v, freqTable, lastKey, 0, ReturnStatement(return), getSumFreq, VariableDeclarationStatement(), Iterator, Comparable, values, valuesIterator, WhileStatement(while), values, hasNext, VariableDeclarationStatement(), Comparable, nextValue, values, next, IfStatement(if), c, compare, v, nextValue, 0, ExpressionStatement(), result, getCount, nextValue, ReturnStatement(return), result, ReturnStatement(return), result]
org.apache.commons.math4.stat:Frequency:getCumFreq:int#[ReturnStatement(return), getCumFreq, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumFreq:long#[ReturnStatement(return), getCumFreq, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumFreq:char#[ReturnStatement(return), getCumFreq, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumPct:Comparable<?>#[VariableDeclarationStatement(), final, long, sumFreq, getSumFreq, IfStatement(if), sumFreq, 0, ReturnStatement(return), Double.NaN, ReturnStatement(return), double, getCumFreq, v, double, sumFreq]
org.apache.commons.math4.stat:Frequency:getCumPct:int#[ReturnStatement(return), getCumPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumPct:long#[ReturnStatement(return), getCumPct, Long, valueOf, v]
org.apache.commons.math4.stat:Frequency:getCumPct:char#[ReturnStatement(return), getCumPct, Character, valueOf, v]
org.apache.commons.math4.stat:Frequency:getMode:null#[VariableDeclarationStatement(), long, mostPopular, 0, EnhancedForStatement(for), Long, l, freqTable, values, VariableDeclarationStatement(), long, frequency, l, longValue, IfStatement(if), frequency, mostPopular, ExpressionStatement(), mostPopular, frequency, VariableDeclarationStatement(), List, Comparable, modeList, new, ArrayList, Comparable, EnhancedForStatement(for), Entry, Comparable, Long, ent, freqTable, entrySet, VariableDeclarationStatement(), long, frequency, ent, getValue, longValue, IfStatement(if), frequency, mostPopular, ExpressionStatement(), modeList, add, ent, getKey, ReturnStatement(return), modeList]
org.apache.commons.math4.stat:Frequency:merge:Frequency#[ExpressionStatement(), MathUtils, checkNotNull, other, LocalizedFormats.NULL_NOT_ALLOWED, VariableDeclarationStatement(), final, Iterator, Map.Entry, Comparable, Long, iter, other, entrySetIterator, WhileStatement(while), iter, hasNext, VariableDeclarationStatement(), final, Map.Entry, Comparable, Long, entry, iter, next, ExpressionStatement(), incrementValue, entry, getKey, entry, getValue, longValue]
org.apache.commons.math4.stat:Frequency:merge:Collection<Frequency>#[ExpressionStatement(), MathUtils, checkNotNull, others, LocalizedFormats.NULL_NOT_ALLOWED, EnhancedForStatement(for), final, Frequency, freq, others, ExpressionStatement(), merge, freq]
org.apache.commons.math4.stat:Frequency:hashCode:null#[VariableDeclarationStatement(), final, int, prime, 31, VariableDeclarationStatement(), int, result, 1, ExpressionStatement(), result, prime, result, freqTable, null, 0, freqTable, hashCode, ReturnStatement(return), result]
org.apache.commons.math4.stat:Frequency:equals:Object#[IfStatement(if), this, obj, ReturnStatement(return), true, IfStatement(if), instanceof, obj, Frequency, ReturnStatement(return), false, VariableDeclarationStatement(), Frequency, other, Frequency, obj, IfStatement(if), freqTable, null, IfStatement(if), other.freqTable, null, ReturnStatement(return), false, IfStatement(if), freqTable, equals, other.freqTable, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.stat.inference:BinomialTest:binomialTest:int+int+double+AlternativeHypothesis+double#[VariableDeclarationStatement(), double, pValue, binomialTest, numberOfTrials, numberOfSuccesses, probability, alternativeHypothesis, ReturnStatement(return), pValue, alpha]
org.apache.commons.math4.stat.inference:BinomialTest:binomialTest:int+int+double+AlternativeHypothesis#[IfStatement(if), numberOfTrials, 0, ThrowStatement(throw), new, NotPositiveException, numberOfTrials, IfStatement(if), numberOfSuccesses, 0, ThrowStatement(throw), new, NotPositiveException, numberOfSuccesses, IfStatement(if), probability, 0, probability, 1, ThrowStatement(throw), new, OutOfRangeException, probability, 0, 1, IfStatement(if), numberOfTrials, numberOfSuccesses, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, numberOfTrials, numberOfSuccesses, IfStatement(if), alternativeHypothesis, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, BinomialDistribution, distribution, new, BinomialDistribution, null, numberOfTrials, probability, SwitchStatement(switch), alternativeHypothesis, SwitchCase(case), GREATER_THAN, ReturnStatement(return), 1, distribution, cumulativeProbability, numberOfSuccesses, 1, SwitchCase(case), LESS_THAN, ReturnStatement(return), distribution, cumulativeProbability, numberOfSuccesses, SwitchCase(case), TWO_SIDED, VariableDeclarationStatement(), int, criticalValueLow, 0, VariableDeclarationStatement(), int, criticalValueHigh, numberOfTrials, VariableDeclarationStatement(), double, pTotal, 0, WhileStatement(while), true, VariableDeclarationStatement(), double, pLow, distribution, probability, criticalValueLow, VariableDeclarationStatement(), double, pHigh, distribution, probability, criticalValueHigh, IfStatement(if), pLow, pHigh, ExpressionStatement(), pTotal, 2, pLow, ExpressionStatement(), criticalValueLow, ExpressionStatement(), criticalValueHigh, IfStatement(if), pLow, pHigh, ExpressionStatement(), pTotal, pLow, ExpressionStatement(), criticalValueLow, ExpressionStatement(), pTotal, pHigh, ExpressionStatement(), criticalValueHigh, IfStatement(if), criticalValueLow, numberOfSuccesses, criticalValueHigh, numberOfSuccesses, BreakStatement(break), ReturnStatement(return), pTotal, SwitchCase(default), ThrowStatement(throw), new, MathInternalError, LocalizedFormats.OUT_OF_RANGE_SIMPLE, alternativeHypothesis, AlternativeHypothesis.TWO_SIDED, AlternativeHypothesis.LESS_THAN]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquare:double[]+long[]#[IfStatement(if), expected.length, 2, ThrowStatement(throw), new, DimensionMismatchException, expected.length, 2, IfStatement(if), expected.length, observed.length, ThrowStatement(throw), new, DimensionMismatchException, expected.length, observed.length, ExpressionStatement(), MathArrays, checkPositive, expected, ExpressionStatement(), MathArrays, checkNonNegative, observed, VariableDeclarationStatement(), double, sumExpected, 0d, VariableDeclarationStatement(), double, sumObserved, 0d, ForStatement(for), int, i, 0, i, observed.length, i, ExpressionStatement(), sumExpected, expected, i, ExpressionStatement(), sumObserved, observed, i, VariableDeclarationStatement(), double, ratio, 1.0d, VariableDeclarationStatement(), boolean, rescale, false, IfStatement(if), FastMath, abs, sumExpected, sumObserved, 10E-6, ExpressionStatement(), ratio, sumObserved, sumExpected, ExpressionStatement(), rescale, true, VariableDeclarationStatement(), double, sumSq, 0.0d, ForStatement(for), int, i, 0, i, observed.length, i, IfStatement(if), rescale, VariableDeclarationStatement(), final, double, dev, observed, i, ratio, expected, i, ExpressionStatement(), sumSq, dev, dev, ratio, expected, i, VariableDeclarationStatement(), final, double, dev, observed, i, expected, i, ExpressionStatement(), sumSq, dev, dev, expected, i, ReturnStatement(return), sumSq]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:double[]+long[]#[VariableDeclarationStatement(), final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, expected.length, 1.0, ReturnStatement(return), 1.0, distribution, cumulativeProbability, chiSquare, expected, observed]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:double[]+long[]+double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, ReturnStatement(return), chiSquareTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquare:long[][]#[ExpressionStatement(), checkArray, counts, VariableDeclarationStatement(), int, nRows, counts.length, VariableDeclarationStatement(), int, nCols, counts, 0, length, VariableDeclarationStatement(), double, rowSum, double, nRows, VariableDeclarationStatement(), double, colSum, double, nCols, VariableDeclarationStatement(), double, total, 0.0d, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, ExpressionStatement(), rowSum, row, counts, row, col, ExpressionStatement(), colSum, col, counts, row, col, ExpressionStatement(), total, counts, row, col, VariableDeclarationStatement(), double, sumSq, 0.0d, VariableDeclarationStatement(), double, expected, 0.0d, ForStatement(for), int, row, 0, row, nRows, row, ForStatement(for), int, col, 0, col, nCols, col, ExpressionStatement(), expected, rowSum, row, colSum, col, total, ExpressionStatement(), sumSq, counts, row, col, expected, counts, row, col, expected, expected, ReturnStatement(return), sumSq]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:long[][]#[ExpressionStatement(), checkArray, counts, VariableDeclarationStatement(), double, df, double, counts.length, 1, double, counts, 0, length, 1, VariableDeclarationStatement(), final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, df, ReturnStatement(return), 1, distribution, cumulativeProbability, chiSquare, counts]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTest:long[][]+double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, ReturnStatement(return), chiSquareTest, counts, alpha]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareDataSetsComparison:long[]+long[]#[IfStatement(if), observed1.length, 2, ThrowStatement(throw), new, DimensionMismatchException, observed1.length, 2, IfStatement(if), observed1.length, observed2.length, ThrowStatement(throw), new, DimensionMismatchException, observed1.length, observed2.length, ExpressionStatement(), MathArrays, checkNonNegative, observed1, ExpressionStatement(), MathArrays, checkNonNegative, observed2, VariableDeclarationStatement(), long, countSum1, 0, VariableDeclarationStatement(), long, countSum2, 0, VariableDeclarationStatement(), boolean, unequalCounts, false, VariableDeclarationStatement(), double, weight, 0.0, ForStatement(for), int, i, 0, i, observed1.length, i, ExpressionStatement(), countSum1, observed1, i, ExpressionStatement(), countSum2, observed2, i, IfStatement(if), countSum1, 0, countSum2, 0, ThrowStatement(throw), new, ZeroException, ExpressionStatement(), unequalCounts, countSum1, countSum2, IfStatement(if), unequalCounts, ExpressionStatement(), weight, FastMath, sqrt, double, countSum1, double, countSum2, VariableDeclarationStatement(), double, sumSq, 0.0d, VariableDeclarationStatement(), double, dev, 0.0d, VariableDeclarationStatement(), double, obs1, 0.0d, VariableDeclarationStatement(), double, obs2, 0.0d, ForStatement(for), int, i, 0, i, observed1.length, i, IfStatement(if), observed1, i, 0, observed2, i, 0, ThrowStatement(throw), new, ZeroException, LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i, ExpressionStatement(), obs1, observed1, i, ExpressionStatement(), obs2, observed2, i, IfStatement(if), unequalCounts, ExpressionStatement(), dev, obs1, weight, obs2, weight, ExpressionStatement(), dev, obs1, obs2, ExpressionStatement(), sumSq, dev, dev, obs1, obs2, ReturnStatement(return), sumSq]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTestDataSetsComparison:long[]+long[]#[VariableDeclarationStatement(), final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, double, observed1.length, 1, ReturnStatement(return), 1, distribution, cumulativeProbability, chiSquareDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:ChiSquareTest:chiSquareTestDataSetsComparison:long[]+long[]+double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, ReturnStatement(return), chiSquareTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:ChiSquareTest:checkArray:long[][]#[IfStatement(if), in.length, 2, ThrowStatement(throw), new, DimensionMismatchException, in.length, 2, IfStatement(if), in, 0, length, 2, ThrowStatement(throw), new, DimensionMismatchException, in, 0, length, 2, ExpressionStatement(), MathArrays, checkRectangular, in, ExpressionStatement(), MathArrays, checkNonNegative, in]
org.apache.commons.math4.stat.inference:GTest:g:double[]+long[]#[IfStatement(if), expected.length, 2, ThrowStatement(throw), new, DimensionMismatchException, expected.length, 2, IfStatement(if), expected.length, observed.length, ThrowStatement(throw), new, DimensionMismatchException, expected.length, observed.length, ExpressionStatement(), MathArrays, checkPositive, expected, ExpressionStatement(), MathArrays, checkNonNegative, observed, VariableDeclarationStatement(), double, sumExpected, 0d, VariableDeclarationStatement(), double, sumObserved, 0d, ForStatement(for), int, i, 0, i, observed.length, i, ExpressionStatement(), sumExpected, expected, i, ExpressionStatement(), sumObserved, observed, i, VariableDeclarationStatement(), double, ratio, 1d, VariableDeclarationStatement(), boolean, rescale, false, IfStatement(if), FastMath, abs, sumExpected, sumObserved, 10E-6, ExpressionStatement(), ratio, sumObserved, sumExpected, ExpressionStatement(), rescale, true, VariableDeclarationStatement(), double, sum, 0d, ForStatement(for), int, i, 0, i, observed.length, i, VariableDeclarationStatement(), final, double, dev, rescale, FastMath, log, double, observed, i, ratio, expected, i, FastMath, log, double, observed, i, expected, i, ExpressionStatement(), sum, double, observed, i, dev, ReturnStatement(return), 2d, sum]
org.apache.commons.math4.stat.inference:GTest:gTest:double[]+long[]#[VariableDeclarationStatement(), final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, expected.length, 1.0, ReturnStatement(return), 1.0, distribution, cumulativeProbability, g, expected, observed]
org.apache.commons.math4.stat.inference:GTest:gTestIntrinsic:double[]+long[]#[VariableDeclarationStatement(), final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, expected.length, 2.0, ReturnStatement(return), 1.0, distribution, cumulativeProbability, g, expected, observed]
org.apache.commons.math4.stat.inference:GTest:gTest:double[]+long[]+double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, ReturnStatement(return), gTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:GTest:entropy:long[][]#[VariableDeclarationStatement(), double, h, 0d, VariableDeclarationStatement(), double, sum_k, 0d, ForStatement(for), int, i, 0, i, k.length, i, ForStatement(for), int, j, 0, j, k, i, length, j, ExpressionStatement(), sum_k, double, k, i, j, ForStatement(for), int, i, 0, i, k.length, i, ForStatement(for), int, j, 0, j, k, i, length, j, IfStatement(if), k, i, j, 0, VariableDeclarationStatement(), final, double, p_ij, double, k, i, j, sum_k, ExpressionStatement(), h, p_ij, FastMath, log, p_ij, ReturnStatement(return), h]
org.apache.commons.math4.stat.inference:GTest:entropy:long[]#[VariableDeclarationStatement(), double, h, 0d, VariableDeclarationStatement(), double, sum_k, 0d, ForStatement(for), int, i, 0, i, k.length, i, ExpressionStatement(), sum_k, double, k, i, ForStatement(for), int, i, 0, i, k.length, i, IfStatement(if), k, i, 0, VariableDeclarationStatement(), final, double, p_i, double, k, i, sum_k, ExpressionStatement(), h, p_i, FastMath, log, p_i, ReturnStatement(return), h]
org.apache.commons.math4.stat.inference:GTest:gDataSetsComparison:long[]+long[]#[IfStatement(if), observed1.length, 2, ThrowStatement(throw), new, DimensionMismatchException, observed1.length, 2, IfStatement(if), observed1.length, observed2.length, ThrowStatement(throw), new, DimensionMismatchException, observed1.length, observed2.length, ExpressionStatement(), MathArrays, checkNonNegative, observed1, ExpressionStatement(), MathArrays, checkNonNegative, observed2, VariableDeclarationStatement(), long, countSum1, 0, VariableDeclarationStatement(), long, countSum2, 0, VariableDeclarationStatement(), final, long, collSums, long, observed1.length, VariableDeclarationStatement(), final, long, k, long, 2, observed1.length, ForStatement(for), int, i, 0, i, observed1.length, i, IfStatement(if), observed1, i, 0, observed2, i, 0, ThrowStatement(throw), new, ZeroException, LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i, ExpressionStatement(), countSum1, observed1, i, ExpressionStatement(), countSum2, observed2, i, ExpressionStatement(), collSums, i, observed1, i, observed2, i, ExpressionStatement(), k, 0, i, observed1, i, ExpressionStatement(), k, 1, i, observed2, i, IfStatement(if), countSum1, 0, countSum2, 0, ThrowStatement(throw), new, ZeroException, VariableDeclarationStatement(), final, long, rowSums, countSum1, countSum2, VariableDeclarationStatement(), final, double, sum, double, countSum1, double, countSum2, ReturnStatement(return), 2, sum, entropy, rowSums, entropy, collSums, entropy, k]
org.apache.commons.math4.stat.inference:GTest:rootLogLikelihoodRatio:long+long+long+long#[VariableDeclarationStatement(), final, double, llr, gDataSetsComparison, long, k11, k12, long, k21, k22, VariableDeclarationStatement(), double, sqrt, FastMath, sqrt, llr, IfStatement(if), double, k11, k11, k12, double, k21, k21, k22, ExpressionStatement(), sqrt, sqrt, ReturnStatement(return), sqrt]
org.apache.commons.math4.stat.inference:GTest:gTestDataSetsComparison:long[]+long[]#[VariableDeclarationStatement(), final, ChiSquaredDistribution, distribution, new, ChiSquaredDistribution, null, double, observed1.length, 1, ReturnStatement(return), 1, distribution, cumulativeProbability, gDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:GTest:gTestDataSetsComparison:long[]+long[]+double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, ReturnStatement(return), gTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:RealDistribution+double[]+boolean#[ReturnStatement(return), 1d, cdf, kolmogorovSmirnovStatistic, distribution, data, data.length, exact]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovStatistic:RealDistribution+double[]#[ExpressionStatement(), checkArray, data, VariableDeclarationStatement(), final, int, n, data.length, VariableDeclarationStatement(), final, double, nd, n, VariableDeclarationStatement(), final, double, dataCopy, double, n, ExpressionStatement(), System, arraycopy, data, 0, dataCopy, 0, n, ExpressionStatement(), Arrays, sort, dataCopy, VariableDeclarationStatement(), double, d, 0d, ForStatement(for), int, i, 1, i, n, i, VariableDeclarationStatement(), final, double, yi, distribution, cumulativeProbability, dataCopy, i, 1, VariableDeclarationStatement(), final, double, currD, FastMath, max, yi, i, 1, nd, i, nd, yi, IfStatement(if), currD, d, ExpressionStatement(), d, currD, ReturnStatement(return), d]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:double[]+double[]+boolean#[VariableDeclarationStatement(), final, long, lengthProduct, long, x.length, y.length, VariableDeclarationStatement(), double, xa, null, VariableDeclarationStatement(), double, ya, null, IfStatement(if), lengthProduct, LARGE_SAMPLE_PRODUCT, hasTies, x, y, ExpressionStatement(), xa, MathArrays, copyOf, x, ExpressionStatement(), ya, MathArrays, copyOf, y, ExpressionStatement(), fixTies, xa, ya, ExpressionStatement(), xa, x, ExpressionStatement(), ya, y, IfStatement(if), lengthProduct, LARGE_SAMPLE_PRODUCT, ReturnStatement(return), exactP, kolmogorovSmirnovStatistic, xa, ya, x.length, y.length, strict, ReturnStatement(return), approximateP, kolmogorovSmirnovStatistic, x, y, x.length, y.length]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:double[]+double[]#[ReturnStatement(return), kolmogorovSmirnovTest, x, y, true]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovStatistic:double[]+double[]#[ReturnStatement(return), integralKolmogorovSmirnovStatistic, x, y, double, x.length, long, y.length]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:integralKolmogorovSmirnovStatistic:double[]+double[]#[ExpressionStatement(), checkArray, x, ExpressionStatement(), checkArray, y, VariableDeclarationStatement(), final, double, sx, MathArrays, copyOf, x, VariableDeclarationStatement(), final, double, sy, MathArrays, copyOf, y, ExpressionStatement(), Arrays, sort, sx, ExpressionStatement(), Arrays, sort, sy, VariableDeclarationStatement(), final, int, n, sx.length, VariableDeclarationStatement(), final, int, m, sy.length, VariableDeclarationStatement(), int, rankX, 0, VariableDeclarationStatement(), int, rankY, 0, VariableDeclarationStatement(), long, curD, 0l, VariableDeclarationStatement(), long, supD, 0l, DoStatement(do), VariableDeclarationStatement(), double, z, Double, compare, sx, rankX, sy, rankY, 0, sx, rankX, sy, rankY, WhileStatement(while), rankX, n, Double, compare, sx, rankX, z, 0, ExpressionStatement(), rankX, 1, ExpressionStatement(), curD, m, WhileStatement(while), rankY, m, Double, compare, sy, rankY, z, 0, ExpressionStatement(), rankY, 1, ExpressionStatement(), curD, n, IfStatement(if), curD, supD, ExpressionStatement(), supD, curD, IfStatement(if), curD, supD, ExpressionStatement(), supD, curD, rankX, n, rankY, m, ReturnStatement(return), supD]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:RealDistribution+double[]#[ReturnStatement(return), kolmogorovSmirnovTest, distribution, data, false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:kolmogorovSmirnovTest:RealDistribution+double[]+double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, ReturnStatement(return), kolmogorovSmirnovTest, distribution, data, alpha]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:bootstrap:double[]+double[]+int+boolean#[VariableDeclarationStatement(), final, int, xLength, x.length, VariableDeclarationStatement(), final, int, yLength, y.length, VariableDeclarationStatement(), final, double, combined, double, xLength, yLength, ExpressionStatement(), System, arraycopy, x, 0, combined, 0, xLength, ExpressionStatement(), System, arraycopy, y, 0, combined, xLength, yLength, VariableDeclarationStatement(), final, EnumeratedRealDistribution, dist, new, EnumeratedRealDistribution, rng, combined, VariableDeclarationStatement(), final, long, d, integralKolmogorovSmirnovStatistic, x, y, VariableDeclarationStatement(), int, greaterCount, 0, VariableDeclarationStatement(), int, equalCount, 0, VariableDeclarationStatement(), double, curX, VariableDeclarationStatement(), double, curY, VariableDeclarationStatement(), long, curD, ForStatement(for), int, i, 0, i, iterations, i, ExpressionStatement(), curX, dist, sample, xLength, ExpressionStatement(), curY, dist, sample, yLength, ExpressionStatement(), curD, integralKolmogorovSmirnovStatistic, curX, curY, IfStatement(if), curD, d, ExpressionStatement(), greaterCount, IfStatement(if), curD, d, ExpressionStatement(), equalCount, ReturnStatement(return), strict, greaterCount, double, iterations, greaterCount, equalCount, double, iterations]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:bootstrap:double[]+double[]+int#[ReturnStatement(return), bootstrap, x, y, iterations, true]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:cdf:double+int#[ReturnStatement(return), cdf, d, n, false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:cdfExact:double+int#[ReturnStatement(return), cdf, d, n, true]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:cdf:double+int+boolean#[VariableDeclarationStatement(), final, double, ninv, 1, double, n, VariableDeclarationStatement(), final, double, ninvhalf, 0.5, ninv, IfStatement(if), d, ninvhalf, ReturnStatement(return), 0, IfStatement(if), ninvhalf, d, d, ninv, VariableDeclarationStatement(), double, res, 1, VariableDeclarationStatement(), final, double, f, 2, d, ninv, ForStatement(for), int, i, 1, i, n, i, ExpressionStatement(), res, i, f, ReturnStatement(return), res, IfStatement(if), 1, ninv, d, d, 1, ReturnStatement(return), 1, 2, Math, pow, 1, d, n, IfStatement(if), 1, d, ReturnStatement(return), 1, IfStatement(if), exact, ReturnStatement(return), exactK, d, n, IfStatement(if), n, 140, ReturnStatement(return), roundedK, d, n, ReturnStatement(return), pelzGood, d, n]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:exactK:double+int#[VariableDeclarationStatement(), final, int, k, int, Math, ceil, n, d, VariableDeclarationStatement(), final, FieldMatrix, BigFraction, H, this, createExactH, d, n, VariableDeclarationStatement(), final, FieldMatrix, BigFraction, Hpower, H, power, n, VariableDeclarationStatement(), BigFraction, pFrac, Hpower, getEntry, k, 1, k, 1, ForStatement(for), int, i, 1, i, n, i, ExpressionStatement(), pFrac, pFrac, multiply, i, divide, n, ReturnStatement(return), pFrac, bigDecimalValue, 20, BigDecimal.ROUND_HALF_UP, doubleValue]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:roundedK:double+int#[VariableDeclarationStatement(), final, int, k, int, Math, ceil, n, d, VariableDeclarationStatement(), final, RealMatrix, H, this, createRoundedH, d, n, VariableDeclarationStatement(), final, RealMatrix, Hpower, H, power, n, VariableDeclarationStatement(), double, pFrac, Hpower, getEntry, k, 1, k, 1, ForStatement(for), int, i, 1, i, n, i, ExpressionStatement(), pFrac, double, i, double, n, ReturnStatement(return), pFrac]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:pelzGood:double+int#[VariableDeclarationStatement(), final, double, sqrtN, FastMath, sqrt, n, VariableDeclarationStatement(), final, double, z, d, sqrtN, VariableDeclarationStatement(), final, double, z2, d, d, n, VariableDeclarationStatement(), final, double, z4, z2, z2, VariableDeclarationStatement(), final, double, z6, z4, z2, VariableDeclarationStatement(), final, double, z8, z4, z4, VariableDeclarationStatement(), double, ret, 0, VariableDeclarationStatement(), double, sum, 0, VariableDeclarationStatement(), double, increment, 0, VariableDeclarationStatement(), double, kTerm, 0, VariableDeclarationStatement(), double, z2Term, MathUtils.PI_SQUARED, 8, z2, VariableDeclarationStatement(), int, k, 1, ForStatement(for), k, MAXIMUM_PARTIAL_SUM_COUNT, k, ExpressionStatement(), kTerm, 2, k, 1, ExpressionStatement(), increment, FastMath, exp, z2Term, kTerm, kTerm, ExpressionStatement(), sum, increment, IfStatement(if), increment, PG_SUM_RELATIVE_ERROR, sum, BreakStatement(break), IfStatement(if), k, MAXIMUM_PARTIAL_SUM_COUNT, ThrowStatement(throw), new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, ExpressionStatement(), ret, sum, FastMath, sqrt, 2, FastMath.PI, z, VariableDeclarationStatement(), final, double, twoZ2, 2, z2, ExpressionStatement(), sum, 0, ExpressionStatement(), kTerm, 0, VariableDeclarationStatement(), double, kTerm2, 0, ForStatement(for), k, 0, k, MAXIMUM_PARTIAL_SUM_COUNT, k, ExpressionStatement(), kTerm, k, 0.5, ExpressionStatement(), kTerm2, kTerm, kTerm, ExpressionStatement(), increment, MathUtils.PI_SQUARED, kTerm2, z2, FastMath, exp, MathUtils.PI_SQUARED, kTerm2, twoZ2, ExpressionStatement(), sum, increment, IfStatement(if), FastMath, abs, increment, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum, BreakStatement(break), IfStatement(if), k, MAXIMUM_PARTIAL_SUM_COUNT, ThrowStatement(throw), new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, VariableDeclarationStatement(), final, double, sqrtHalfPi, FastMath, sqrt, FastMath.PI, 2, ExpressionStatement(), ret, sum, sqrtHalfPi, 3, z4, sqrtN, VariableDeclarationStatement(), final, double, z4Term, 2, z4, VariableDeclarationStatement(), final, double, z6Term, 6, z6, ExpressionStatement(), z2Term, 5, z2, VariableDeclarationStatement(), final, double, pi4, MathUtils.PI_SQUARED, MathUtils.PI_SQUARED, ExpressionStatement(), sum, 0, ExpressionStatement(), kTerm, 0, ExpressionStatement(), kTerm2, 0, ForStatement(for), k, 0, k, MAXIMUM_PARTIAL_SUM_COUNT, k, ExpressionStatement(), kTerm, k, 0.5, ExpressionStatement(), kTerm2, kTerm, kTerm, ExpressionStatement(), increment, z6Term, z4Term, MathUtils.PI_SQUARED, z4Term, z2Term, kTerm2, pi4, 1, twoZ2, kTerm2, kTerm2, FastMath, exp, MathUtils.PI_SQUARED, kTerm2, twoZ2, ExpressionStatement(), sum, increment, IfStatement(if), FastMath, abs, increment, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum, BreakStatement(break), IfStatement(if), k, MAXIMUM_PARTIAL_SUM_COUNT, ThrowStatement(throw), new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, VariableDeclarationStatement(), double, sum2, 0, ExpressionStatement(), kTerm2, 0, ForStatement(for), k, 1, k, MAXIMUM_PARTIAL_SUM_COUNT, k, ExpressionStatement(), kTerm2, k, k, ExpressionStatement(), increment, MathUtils.PI_SQUARED, kTerm2, FastMath, exp, MathUtils.PI_SQUARED, kTerm2, twoZ2, ExpressionStatement(), sum2, increment, IfStatement(if), FastMath, abs, increment, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum2, BreakStatement(break), IfStatement(if), k, MAXIMUM_PARTIAL_SUM_COUNT, ThrowStatement(throw), new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, ExpressionStatement(), ret, sqrtHalfPi, n, sum, 36, z2, z2, z2, z, sum2, 18, z2, z, VariableDeclarationStatement(), final, double, pi6, pi4, MathUtils.PI_SQUARED, ExpressionStatement(), sum, 0, VariableDeclarationStatement(), double, kTerm4, 0, VariableDeclarationStatement(), double, kTerm6, 0, ForStatement(for), k, 0, k, MAXIMUM_PARTIAL_SUM_COUNT, k, ExpressionStatement(), kTerm, k, 0.5, ExpressionStatement(), kTerm2, kTerm, kTerm, ExpressionStatement(), kTerm4, kTerm2, kTerm2, ExpressionStatement(), kTerm6, kTerm4, kTerm2, ExpressionStatement(), increment, pi6, kTerm6, 5, 30, z2, pi4, kTerm4, 60, z2, 212, z4, MathUtils.PI_SQUARED, kTerm2, 135, z4, 96, z6, 30, z6, 90, z8, FastMath, exp, MathUtils.PI_SQUARED, kTerm2, twoZ2, ExpressionStatement(), sum, increment, IfStatement(if), FastMath, abs, increment, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum, BreakStatement(break), IfStatement(if), k, MAXIMUM_PARTIAL_SUM_COUNT, ThrowStatement(throw), new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, ExpressionStatement(), sum2, 0, ForStatement(for), k, 1, k, MAXIMUM_PARTIAL_SUM_COUNT, k, ExpressionStatement(), kTerm2, k, k, ExpressionStatement(), kTerm4, kTerm2, kTerm2, ExpressionStatement(), increment, pi4, kTerm4, 3, MathUtils.PI_SQUARED, kTerm2, z2, FastMath, exp, MathUtils.PI_SQUARED, kTerm2, twoZ2, ExpressionStatement(), sum2, increment, IfStatement(if), FastMath, abs, increment, PG_SUM_RELATIVE_ERROR, FastMath, abs, sum2, BreakStatement(break), IfStatement(if), k, MAXIMUM_PARTIAL_SUM_COUNT, ThrowStatement(throw), new, TooManyIterationsException, MAXIMUM_PARTIAL_SUM_COUNT, ReturnStatement(return), ret, sqrtHalfPi, sqrtN, n, sum, 3240, z6, z4, sum2, 108, z6]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:createExactH:double+int#[VariableDeclarationStatement(), final, int, k, int, Math, ceil, n, d, VariableDeclarationStatement(), final, int, m, 2, k, 1, VariableDeclarationStatement(), final, double, hDouble, k, n, d, IfStatement(if), hDouble, 1, ThrowStatement(throw), new, NumberIsTooLargeException, hDouble, 1.0, false, VariableDeclarationStatement(), BigFraction, h, null, TryStatement(try), ExpressionStatement(), h, new, BigFraction, hDouble, 1.0e-20, 10000, catch, final, FractionConversionException, e1, TryStatement(try), ExpressionStatement(), h, new, BigFraction, hDouble, 1.0e-10, 10000, catch, final, FractionConversionException, e2, ExpressionStatement(), h, new, BigFraction, hDouble, 1.0e-5, 10000, VariableDeclarationStatement(), final, BigFraction, Hdata, BigFraction, m, m, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, m, j, IfStatement(if), i, j, 1, 0, ExpressionStatement(), Hdata, i, j, BigFraction.ZERO, ExpressionStatement(), Hdata, i, j, BigFraction.ONE, VariableDeclarationStatement(), final, BigFraction, hPowers, BigFraction, m, ExpressionStatement(), hPowers, 0, h, ForStatement(for), int, i, 1, i, m, i, ExpressionStatement(), hPowers, i, h, multiply, hPowers, i, 1, ForStatement(for), int, i, 0, i, m, i, ExpressionStatement(), Hdata, i, 0, Hdata, i, 0, subtract, hPowers, i, ExpressionStatement(), Hdata, m, 1, i, Hdata, m, 1, i, subtract, hPowers, m, i, 1, IfStatement(if), h, compareTo, BigFraction.ONE_HALF, 1, ExpressionStatement(), Hdata, m, 1, 0, Hdata, m, 1, 0, add, h, multiply, 2, subtract, 1, pow, m, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, i, 1, j, IfStatement(if), i, j, 1, 0, ForStatement(for), int, g, 2, g, i, j, 1, g, ExpressionStatement(), Hdata, i, j, Hdata, i, j, divide, g, ReturnStatement(return), new, Array2DRowFieldMatrix, BigFraction, BigFractionField, getInstance, Hdata]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:createRoundedH:double+int#[VariableDeclarationStatement(), final, int, k, int, Math, ceil, n, d, VariableDeclarationStatement(), final, int, m, 2, k, 1, VariableDeclarationStatement(), final, double, h, k, n, d, IfStatement(if), h, 1, ThrowStatement(throw), new, NumberIsTooLargeException, h, 1.0, false, VariableDeclarationStatement(), final, double, Hdata, double, m, m, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, m, j, IfStatement(if), i, j, 1, 0, ExpressionStatement(), Hdata, i, j, 0, ExpressionStatement(), Hdata, i, j, 1, VariableDeclarationStatement(), final, double, hPowers, double, m, ExpressionStatement(), hPowers, 0, h, ForStatement(for), int, i, 1, i, m, i, ExpressionStatement(), hPowers, i, h, hPowers, i, 1, ForStatement(for), int, i, 0, i, m, i, ExpressionStatement(), Hdata, i, 0, Hdata, i, 0, hPowers, i, ExpressionStatement(), Hdata, m, 1, i, hPowers, m, i, 1, IfStatement(if), Double, compare, h, 0.5, 0, ExpressionStatement(), Hdata, m, 1, 0, FastMath, pow, 2, h, 1, m, ForStatement(for), int, i, 0, i, m, i, ForStatement(for), int, j, 0, j, i, 1, j, IfStatement(if), i, j, 1, 0, ForStatement(for), int, g, 2, g, i, j, 1, g, ExpressionStatement(), Hdata, i, j, g, ReturnStatement(return), MatrixUtils, createRealMatrix, Hdata]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:checkArray:double[]#[IfStatement(if), array, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.NULL_NOT_ALLOWED, IfStatement(if), array.length, 2, ThrowStatement(throw), new, InsufficientDataException, LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, array.length, 2]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:ksSum:double+double+int#[IfStatement(if), t, 0.0, ReturnStatement(return), 0.0, VariableDeclarationStatement(), final, double, x, 2, t, t, VariableDeclarationStatement(), int, sign, 1, VariableDeclarationStatement(), long, i, 1, VariableDeclarationStatement(), double, partialSum, 0.5d, VariableDeclarationStatement(), double, delta, 1, WhileStatement(while), delta, tolerance, i, maxIterations, ExpressionStatement(), delta, FastMath, exp, x, i, i, ExpressionStatement(), partialSum, sign, delta, ExpressionStatement(), sign, 1, ExpressionStatement(), i, IfStatement(if), i, maxIterations, ThrowStatement(throw), new, TooManyIterationsException, maxIterations, ReturnStatement(return), partialSum, 2]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:calculateIntegralD:double+int+int+boolean#[VariableDeclarationStatement(), final, double, tol, 1e-12, VariableDeclarationStatement(), long, nm, n, long, m, VariableDeclarationStatement(), long, upperBound, long, FastMath, ceil, d, tol, nm, VariableDeclarationStatement(), long, lowerBound, long, FastMath, floor, d, tol, nm, IfStatement(if), strict, lowerBound, upperBound, ReturnStatement(return), upperBound, 1l, ReturnStatement(return), upperBound]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:exactP:double+int+int+boolean#[ReturnStatement(return), 1, n, m, n, m, n, calculateIntegralD, d, m, n, strict, strict, CombinatoricsUtils, binomialCoefficientDouble, n, m, m]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:approximateP:double+int+int#[VariableDeclarationStatement(), final, double, dm, m, VariableDeclarationStatement(), final, double, dn, n, ReturnStatement(return), 1, ksSum, d, FastMath, sqrt, dm, dn, dm, dn, KS_SUM_CAUCHY_CRITERION, MAXIMUM_PARTIAL_SUM_COUNT]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:fillBooleanArrayRandomlyWithFixedNumberTrueValues:boolean[]+int+RandomGenerator#[ExpressionStatement(), Arrays, fill, b, true, ForStatement(for), int, k, numberOfTrueValues, k, b.length, k, VariableDeclarationStatement(), final, int, r, rng, nextInt, k, 1, ExpressionStatement(), b, b, r, r, k, false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:monteCarloP:double+int+int+boolean+int#[ReturnStatement(return), integralMonteCarloP, calculateIntegralD, d, n, m, strict, n, m, iterations]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:integralMonteCarloP:long+int+int+int#[VariableDeclarationStatement(), final, int, nn, FastMath, max, n, m, VariableDeclarationStatement(), final, int, mm, FastMath, min, n, m, VariableDeclarationStatement(), final, int, sum, nn, mm, VariableDeclarationStatement(), int, tail, 0, VariableDeclarationStatement(), final, boolean, b, boolean, sum, ForStatement(for), int, i, 0, i, iterations, i, ExpressionStatement(), fillBooleanArrayRandomlyWithFixedNumberTrueValues, b, nn, rng, VariableDeclarationStatement(), long, curD, 0l, ForStatement(for), int, j, 0, j, b.length, j, IfStatement(if), b, j, ExpressionStatement(), curD, mm, IfStatement(if), curD, d, ExpressionStatement(), tail, BreakStatement(break), ExpressionStatement(), curD, nn, IfStatement(if), curD, d, ExpressionStatement(), tail, BreakStatement(break), ReturnStatement(return), double, tail, iterations]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:fixTies:double[]+double[]#[VariableDeclarationStatement(), final, double, values, MathArrays, unique, MathArrays, concatenate, x, y, IfStatement(if), values.length, x.length, y.length, ReturnStatement(return), VariableDeclarationStatement(), double, minDelta, 1, VariableDeclarationStatement(), double, prev, values, 0, VariableDeclarationStatement(), double, delta, 1, ForStatement(for), int, i, 1, i, values.length, i, ExpressionStatement(), delta, prev, values, i, IfStatement(if), delta, minDelta, ExpressionStatement(), minDelta, delta, ExpressionStatement(), prev, values, i, ExpressionStatement(), minDelta, 2, VariableDeclarationStatement(), final, RealDistribution, dist, new, UniformRealDistribution, new, JDKRandomGenerator, 100, minDelta, minDelta, VariableDeclarationStatement(), int, ct, 0, VariableDeclarationStatement(), boolean, ties, true, DoStatement(do), ExpressionStatement(), jitter, x, dist, ExpressionStatement(), jitter, y, dist, ExpressionStatement(), ties, hasTies, x, y, ExpressionStatement(), ct, ties, ct, 1000, IfStatement(if), ties, ThrowStatement(throw), new, MathInternalError]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:hasTies:double[]+double[]#[VariableDeclarationStatement(), final, HashSet, Double, values, new, HashSet, Double, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), values, add, x, i, ReturnStatement(return), true, ForStatement(for), int, i, 0, i, y.length, i, IfStatement(if), values, add, y, i, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:jitter:double[]+RealDistribution#[ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), data, i, dist, sample]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:c:int+int+int+int+long+boolean#[IfStatement(if), strict, ReturnStatement(return), FastMath, abs, i, long, n, j, long, m, cmn, 1, 0, ReturnStatement(return), FastMath, abs, i, long, n, j, long, m, cmn, 1, 0]
org.apache.commons.math4.stat.inference:KolmogorovSmirnovTest:n:int+int+int+int+long+boolean#[VariableDeclarationStatement(), final, double, lag, double, n, VariableDeclarationStatement(), double, last, 0, ForStatement(for), int, k, 0, k, n, k, ExpressionStatement(), lag, k, c, 0, k, 1, m, n, cnm, strict, ForStatement(for), int, k, 1, k, i, k, ExpressionStatement(), last, c, k, 0, m, n, cnm, strict, ForStatement(for), int, l, 1, l, j, l, ExpressionStatement(), lag, l, 1, c, k, l, m, n, cnm, strict, last, lag, l, 1, ExpressionStatement(), last, lag, l, 1, ReturnStatement(return), last]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:ensureDataConformance:double[]+double[]#[IfStatement(if), x, null, y, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), x.length, 0, y.length, 0, ThrowStatement(throw), new, NoDataException]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:concatenateSamples:double[]+double[]#[VariableDeclarationStatement(), final, double, z, double, x.length, y.length, ExpressionStatement(), System, arraycopy, x, 0, z, 0, x.length, ExpressionStatement(), System, arraycopy, y, 0, z, x.length, y.length, ReturnStatement(return), z]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:mannWhitneyU:double[]+double[]#[ExpressionStatement(), ensureDataConformance, x, y, VariableDeclarationStatement(), final, double, z, concatenateSamples, x, y, VariableDeclarationStatement(), final, double, ranks, naturalRanking, rank, z, VariableDeclarationStatement(), double, sumRankX, 0, ForStatement(for), int, i, 0, i, x.length, i, ExpressionStatement(), sumRankX, ranks, i, VariableDeclarationStatement(), final, double, U1, sumRankX, long, x.length, x.length, 1, 2, VariableDeclarationStatement(), final, double, U2, long, x.length, y.length, U1, ReturnStatement(return), FastMath, max, U1, U2]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:calculateAsymptoticPValue:double+int+int#[VariableDeclarationStatement(), final, long, n1n2prod, long, n1, n2, VariableDeclarationStatement(), final, double, EU, n1n2prod, 2.0, VariableDeclarationStatement(), final, double, VarU, n1n2prod, n1, n2, 1, 12.0, VariableDeclarationStatement(), final, double, z, Umin, EU, FastMath, sqrt, VarU, VariableDeclarationStatement(), final, NormalDistribution, standardNormal, new, NormalDistribution, null, 0, 1, ReturnStatement(return), 2, standardNormal, cumulativeProbability, z]
org.apache.commons.math4.stat.inference:MannWhitneyUTest:mannWhitneyUTest:double[]+double[]#[ExpressionStatement(), ensureDataConformance, x, y, VariableDeclarationStatement(), final, double, Umax, mannWhitneyU, x, y, VariableDeclarationStatement(), final, double, Umin, long, x.length, y.length, Umax, ReturnStatement(return), calculateAsymptoticPValue, Umin, x.length, y.length]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaFValue:Collection<double[]>#[VariableDeclarationStatement(), AnovaStats, a, anovaStats, categoryData, ReturnStatement(return), a.F]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaPValue:Collection<double[]>#[VariableDeclarationStatement(), final, AnovaStats, a, anovaStats, categoryData, VariableDeclarationStatement(), final, FDistribution, fdist, new, FDistribution, null, a.dfbg, a.dfwg, ReturnStatement(return), 1.0, fdist, cumulativeProbability, a.F]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaPValue:Collection<SummaryStatistics>+boolean#[VariableDeclarationStatement(), final, AnovaStats, a, anovaStats, categoryData, allowOneElementData, VariableDeclarationStatement(), final, FDistribution, fdist, new, FDistribution, null, a.dfbg, a.dfwg, ReturnStatement(return), 1.0, fdist, cumulativeProbability, a.F]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaStats:Collection<double[]>#[ExpressionStatement(), MathUtils, checkNotNull, categoryData, VariableDeclarationStatement(), final, Collection, SummaryStatistics, categoryDataSummaryStatistics, new, ArrayList, SummaryStatistics, categoryData, size, EnhancedForStatement(for), final, double, data, categoryData, VariableDeclarationStatement(), final, SummaryStatistics, dataSummaryStatistics, new, SummaryStatistics, ExpressionStatement(), categoryDataSummaryStatistics, add, dataSummaryStatistics, EnhancedForStatement(for), final, double, val, data, ExpressionStatement(), dataSummaryStatistics, addValue, val, ReturnStatement(return), anovaStats, categoryDataSummaryStatistics, false]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaTest:Collection<double[]>+double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5, ReturnStatement(return), anovaPValue, categoryData, alpha]
org.apache.commons.math4.stat.inference:OneWayAnova:anovaStats:Collection<SummaryStatistics>+boolean#[ExpressionStatement(), MathUtils, checkNotNull, categoryData, IfStatement(if), allowOneElementData, IfStatement(if), categoryData, size, 2, ThrowStatement(throw), new, DimensionMismatchException, LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED, categoryData, size, 2, EnhancedForStatement(for), final, SummaryStatistics, array, categoryData, IfStatement(if), array, getN, 1, ThrowStatement(throw), new, DimensionMismatchException, LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, int, array, getN, 2, VariableDeclarationStatement(), int, dfwg, 0, VariableDeclarationStatement(), double, sswg, 0, VariableDeclarationStatement(), double, totsum, 0, VariableDeclarationStatement(), double, totsumsq, 0, VariableDeclarationStatement(), int, totnum, 0, EnhancedForStatement(for), final, SummaryStatistics, data, categoryData, VariableDeclarationStatement(), final, double, sum, data, getSum, VariableDeclarationStatement(), final, double, sumsq, data, getSumsq, VariableDeclarationStatement(), final, int, num, int, data, getN, ExpressionStatement(), totnum, num, ExpressionStatement(), totsum, sum, ExpressionStatement(), totsumsq, sumsq, ExpressionStatement(), dfwg, num, 1, VariableDeclarationStatement(), final, double, ss, sumsq, sum, sum, num, ExpressionStatement(), sswg, ss, VariableDeclarationStatement(), final, double, sst, totsumsq, totsum, totsum, totnum, VariableDeclarationStatement(), final, double, ssbg, sst, sswg, VariableDeclarationStatement(), final, int, dfbg, categoryData, size, 1, VariableDeclarationStatement(), final, double, msbg, ssbg, dfbg, VariableDeclarationStatement(), final, double, mswg, sswg, dfwg, VariableDeclarationStatement(), final, double, F, msbg, mswg, ReturnStatement(return), new, AnovaStats, dfbg, dfwg, F]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticT:double[]+double[]#[ReturnStatement(return), T_TEST, homoscedasticT, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticT:StatisticalSummary+StatisticalSummary#[ReturnStatement(return), T_TEST, homoscedasticT, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticTTest:double[]+double[]+double#[ReturnStatement(return), T_TEST, homoscedasticTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticTTest:double[]+double[]#[ReturnStatement(return), T_TEST, homoscedasticTTest, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:homoscedasticTTest:StatisticalSummary+StatisticalSummary#[ReturnStatement(return), T_TEST, homoscedasticTTest, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:pairedT:double[]+double[]#[ReturnStatement(return), T_TEST, pairedT, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:pairedTTest:double[]+double[]+double#[ReturnStatement(return), T_TEST, pairedTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:pairedTTest:double[]+double[]#[ReturnStatement(return), T_TEST, pairedTTest, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:t:double+double[]#[ReturnStatement(return), T_TEST, t, mu, observed]
org.apache.commons.math4.stat.inference:TestUtils:t:double+StatisticalSummary#[ReturnStatement(return), T_TEST, t, mu, sampleStats]
org.apache.commons.math4.stat.inference:TestUtils:t:double[]+double[]#[ReturnStatement(return), T_TEST, t, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:t:StatisticalSummary+StatisticalSummary#[ReturnStatement(return), T_TEST, t, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+double[]+double#[ReturnStatement(return), T_TEST, tTest, mu, sample, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+double[]#[ReturnStatement(return), T_TEST, tTest, mu, sample]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+StatisticalSummary+double#[ReturnStatement(return), T_TEST, tTest, mu, sampleStats, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double+StatisticalSummary#[ReturnStatement(return), T_TEST, tTest, mu, sampleStats]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double[]+double[]+double#[ReturnStatement(return), T_TEST, tTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:double[]+double[]#[ReturnStatement(return), T_TEST, tTest, sample1, sample2]
org.apache.commons.math4.stat.inference:TestUtils:tTest:StatisticalSummary+StatisticalSummary+double#[ReturnStatement(return), T_TEST, tTest, sampleStats1, sampleStats2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:tTest:StatisticalSummary+StatisticalSummary#[ReturnStatement(return), T_TEST, tTest, sampleStats1, sampleStats2]
org.apache.commons.math4.stat.inference:TestUtils:chiSquare:double[]+long[]#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquare, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:chiSquare:long[][]#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquare, counts]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:double[]+long[]+double#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquareTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:double[]+long[]#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquareTest, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:long[][]+double#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquareTest, counts, alpha]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTest:long[][]#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquareTest, counts]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareDataSetsComparison:long[]+long[]#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquareDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTestDataSetsComparison:long[]+long[]#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquareTestDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:chiSquareTestDataSetsComparison:long[]+long[]+double#[ReturnStatement(return), CHI_SQUARE_TEST, chiSquareTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:oneWayAnovaFValue:Collection<double[]>#[ReturnStatement(return), ONE_WAY_ANANOVA, anovaFValue, categoryData]
org.apache.commons.math4.stat.inference:TestUtils:oneWayAnovaPValue:Collection<double[]>#[ReturnStatement(return), ONE_WAY_ANANOVA, anovaPValue, categoryData]
org.apache.commons.math4.stat.inference:TestUtils:oneWayAnovaTest:Collection<double[]>+double#[ReturnStatement(return), ONE_WAY_ANANOVA, anovaTest, categoryData, alpha]
org.apache.commons.math4.stat.inference:TestUtils:g:double[]+long[]#[ReturnStatement(return), G_TEST, g, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:gTest:double[]+long[]#[ReturnStatement(return), G_TEST, gTest, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:gTestIntrinsic:double[]+long[]#[ReturnStatement(return), G_TEST, gTestIntrinsic, expected, observed]
org.apache.commons.math4.stat.inference:TestUtils:gTest:double[]+long[]+double#[ReturnStatement(return), G_TEST, gTest, expected, observed, alpha]
org.apache.commons.math4.stat.inference:TestUtils:gDataSetsComparison:long[]+long[]#[ReturnStatement(return), G_TEST, gDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:rootLogLikelihoodRatio:long+long+long+long#[ReturnStatement(return), G_TEST, rootLogLikelihoodRatio, k11, k12, k21, k22]
org.apache.commons.math4.stat.inference:TestUtils:gTestDataSetsComparison:long[]+long[]#[ReturnStatement(return), G_TEST, gTestDataSetsComparison, observed1, observed2]
org.apache.commons.math4.stat.inference:TestUtils:gTestDataSetsComparison:long[]+long[]+double#[ReturnStatement(return), G_TEST, gTestDataSetsComparison, observed1, observed2, alpha]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovStatistic:RealDistribution+double[]#[ReturnStatement(return), KS_TEST, kolmogorovSmirnovStatistic, dist, data]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:RealDistribution+double[]#[ReturnStatement(return), KS_TEST, kolmogorovSmirnovTest, dist, data]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:RealDistribution+double[]+boolean#[ReturnStatement(return), KS_TEST, kolmogorovSmirnovTest, dist, data, strict]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:RealDistribution+double[]+double#[ReturnStatement(return), KS_TEST, kolmogorovSmirnovTest, dist, data, alpha]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovStatistic:double[]+double[]#[ReturnStatement(return), KS_TEST, kolmogorovSmirnovStatistic, x, y]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:double[]+double[]#[ReturnStatement(return), KS_TEST, kolmogorovSmirnovTest, x, y]
org.apache.commons.math4.stat.inference:TestUtils:kolmogorovSmirnovTest:double[]+double[]+boolean#[ReturnStatement(return), KS_TEST, kolmogorovSmirnovTest, x, y, strict]
org.apache.commons.math4.stat.inference:TestUtils:exactP:double+int+int+boolean#[ReturnStatement(return), KS_TEST, exactP, d, n, m, strict]
org.apache.commons.math4.stat.inference:TestUtils:approximateP:double+int+int#[ReturnStatement(return), KS_TEST, approximateP, d, n, m]
org.apache.commons.math4.stat.inference:TestUtils:monteCarloP:double+int+int+boolean+int#[ReturnStatement(return), KS_TEST, monteCarloP, d, n, m, strict, iterations]
org.apache.commons.math4.stat.inference:TTest:pairedT:double[]+double[]#[ExpressionStatement(), checkSampleData, sample1, ExpressionStatement(), checkSampleData, sample2, VariableDeclarationStatement(), double, meanDifference, StatUtils, meanDifference, sample1, sample2, ReturnStatement(return), t, meanDifference, 0, StatUtils, varianceDifference, sample1, sample2, meanDifference, sample1.length]
org.apache.commons.math4.stat.inference:TTest:pairedTTest:double[]+double[]#[VariableDeclarationStatement(), double, meanDifference, StatUtils, meanDifference, sample1, sample2, ReturnStatement(return), tTest, meanDifference, 0, StatUtils, varianceDifference, sample1, sample2, meanDifference, sample1.length]
org.apache.commons.math4.stat.inference:TTest:pairedTTest:double[]+double[]+double#[ExpressionStatement(), checkSignificanceLevel, alpha, ReturnStatement(return), pairedTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TTest:t:double+double[]#[ExpressionStatement(), checkSampleData, observed, ReturnStatement(return), t, StatUtils, mean, observed, mu, StatUtils, variance, observed, observed.length]
org.apache.commons.math4.stat.inference:TTest:t:double+StatisticalSummary#[ExpressionStatement(), checkSampleData, sampleStats, ReturnStatement(return), t, sampleStats, getMean, mu, sampleStats, getVariance, sampleStats, getN]
org.apache.commons.math4.stat.inference:TTest:homoscedasticT:double[]+double[]#[ExpressionStatement(), checkSampleData, sample1, ExpressionStatement(), checkSampleData, sample2, ReturnStatement(return), homoscedasticT, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:t:double[]+double[]#[ExpressionStatement(), checkSampleData, sample1, ExpressionStatement(), checkSampleData, sample2, ReturnStatement(return), t, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:t:StatisticalSummary+StatisticalSummary#[ExpressionStatement(), checkSampleData, sampleStats1, ExpressionStatement(), checkSampleData, sampleStats2, ReturnStatement(return), t, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:homoscedasticT:StatisticalSummary+StatisticalSummary#[ExpressionStatement(), checkSampleData, sampleStats1, ExpressionStatement(), checkSampleData, sampleStats2, ReturnStatement(return), homoscedasticT, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double[]#[ExpressionStatement(), checkSampleData, sample, ReturnStatement(return), tTest, StatUtils, mean, sample, mu, StatUtils, variance, sample, sample.length]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double[]+double#[ExpressionStatement(), checkSignificanceLevel, alpha, ReturnStatement(return), tTest, mu, sample, alpha]
org.apache.commons.math4.stat.inference:TTest:tTest:double+StatisticalSummary#[ExpressionStatement(), checkSampleData, sampleStats, ReturnStatement(return), tTest, sampleStats, getMean, mu, sampleStats, getVariance, sampleStats, getN]
org.apache.commons.math4.stat.inference:TTest:tTest:double+StatisticalSummary+double#[ExpressionStatement(), checkSignificanceLevel, alpha, ReturnStatement(return), tTest, mu, sampleStats, alpha]
org.apache.commons.math4.stat.inference:TTest:tTest:double[]+double[]#[ExpressionStatement(), checkSampleData, sample1, ExpressionStatement(), checkSampleData, sample2, ReturnStatement(return), tTest, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:double[]+double[]#[ExpressionStatement(), checkSampleData, sample1, ExpressionStatement(), checkSampleData, sample2, ReturnStatement(return), homoscedasticTTest, StatUtils, mean, sample1, StatUtils, mean, sample2, StatUtils, variance, sample1, StatUtils, variance, sample2, sample1.length, sample2.length]
org.apache.commons.math4.stat.inference:TTest:tTest:double[]+double[]+double#[ExpressionStatement(), checkSignificanceLevel, alpha, ReturnStatement(return), tTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:double[]+double[]+double#[ExpressionStatement(), checkSignificanceLevel, alpha, ReturnStatement(return), homoscedasticTTest, sample1, sample2, alpha]
org.apache.commons.math4.stat.inference:TTest:tTest:StatisticalSummary+StatisticalSummary#[ExpressionStatement(), checkSampleData, sampleStats1, ExpressionStatement(), checkSampleData, sampleStats2, ReturnStatement(return), tTest, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:StatisticalSummary+StatisticalSummary#[ExpressionStatement(), checkSampleData, sampleStats1, ExpressionStatement(), checkSampleData, sampleStats2, ReturnStatement(return), homoscedasticTTest, sampleStats1, getMean, sampleStats2, getMean, sampleStats1, getVariance, sampleStats2, getVariance, sampleStats1, getN, sampleStats2, getN]
org.apache.commons.math4.stat.inference:TTest:tTest:StatisticalSummary+StatisticalSummary+double#[ExpressionStatement(), checkSignificanceLevel, alpha, ReturnStatement(return), tTest, sampleStats1, sampleStats2, alpha]
org.apache.commons.math4.stat.inference:TTest:df:double+double+double+double#[ReturnStatement(return), v1, n1, v2, n2, v1, n1, v2, n2, v1, v1, n1, n1, n1, 1d, v2, v2, n2, n2, n2, 1d]
org.apache.commons.math4.stat.inference:TTest:t:double+double+double+double#[ReturnStatement(return), m, mu, FastMath, sqrt, v, n]
org.apache.commons.math4.stat.inference:TTest:t:double+double+double+double+double+double#[ReturnStatement(return), m1, m2, FastMath, sqrt, v1, n1, v2, n2]
org.apache.commons.math4.stat.inference:TTest:homoscedasticT:double+double+double+double+double+double#[VariableDeclarationStatement(), final, double, pooledVariance, n1, 1, v1, n2, 1, v2, n1, n2, 2, ReturnStatement(return), m1, m2, FastMath, sqrt, pooledVariance, 1d, n1, 1d, n2]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double+double+double#[VariableDeclarationStatement(), final, double, t, FastMath, abs, t, m, mu, v, n, VariableDeclarationStatement(), final, TDistribution, distribution, new, TDistribution, null, n, 1, ReturnStatement(return), 2.0, distribution, cumulativeProbability, t]
org.apache.commons.math4.stat.inference:TTest:tTest:double+double+double+double+double+double#[VariableDeclarationStatement(), final, double, t, FastMath, abs, t, m1, m2, v1, v2, n1, n2, VariableDeclarationStatement(), final, double, degreesOfFreedom, df, v1, v2, n1, n2, VariableDeclarationStatement(), final, TDistribution, distribution, new, TDistribution, null, degreesOfFreedom, ReturnStatement(return), 2.0, distribution, cumulativeProbability, t]
org.apache.commons.math4.stat.inference:TTest:homoscedasticTTest:double+double+double+double+double+double#[VariableDeclarationStatement(), final, double, t, FastMath, abs, homoscedasticT, m1, m2, v1, v2, n1, n2, VariableDeclarationStatement(), final, double, degreesOfFreedom, n1, n2, 2, VariableDeclarationStatement(), final, TDistribution, distribution, new, TDistribution, null, degreesOfFreedom, ReturnStatement(return), 2.0, distribution, cumulativeProbability, t]
org.apache.commons.math4.stat.inference:TTest:checkSignificanceLevel:double#[IfStatement(if), alpha, 0, alpha, 0.5, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.SIGNIFICANCE_LEVEL, alpha, 0.0, 0.5]
org.apache.commons.math4.stat.inference:TTest:checkSampleData:double[]#[IfStatement(if), data, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), data.length, 2, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC, data.length, 2, true]
org.apache.commons.math4.stat.inference:TTest:checkSampleData:StatisticalSummary#[IfStatement(if), stat, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), stat, getN, 2, ThrowStatement(throw), new, NumberIsTooSmallException, LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC, stat, getN, 2, true]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:ensureDataConformance:double[]+double[]#[IfStatement(if), x, null, y, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), x.length, 0, y.length, 0, ThrowStatement(throw), new, NoDataException, IfStatement(if), y.length, x.length, ThrowStatement(throw), new, DimensionMismatchException, y.length, x.length]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateDifferences:double[]+double[]#[VariableDeclarationStatement(), final, double, z, double, x.length, ForStatement(for), int, i, 0, i, x.length, i, ExpressionStatement(), z, i, y, i, x, i, ReturnStatement(return), z]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateAbsoluteDifferences:double[]#[IfStatement(if), z, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), z.length, 0, ThrowStatement(throw), new, NoDataException, VariableDeclarationStatement(), final, double, zAbs, double, z.length, ForStatement(for), int, i, 0, i, z.length, i, ExpressionStatement(), zAbs, i, FastMath, abs, z, i, ReturnStatement(return), zAbs]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:wilcoxonSignedRank:double[]+double[]#[ExpressionStatement(), ensureDataConformance, x, y, VariableDeclarationStatement(), final, double, z, calculateDifferences, x, y, VariableDeclarationStatement(), final, double, zAbs, calculateAbsoluteDifferences, z, VariableDeclarationStatement(), final, double, ranks, naturalRanking, rank, zAbs, VariableDeclarationStatement(), double, Wplus, 0, ForStatement(for), int, i, 0, i, z.length, i, IfStatement(if), z, i, 0, ExpressionStatement(), Wplus, ranks, i, VariableDeclarationStatement(), final, int, N, x.length, VariableDeclarationStatement(), final, double, Wminus, double, N, N, 1, 2.0, Wplus, ReturnStatement(return), FastMath, max, Wplus, Wminus]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateExactPValue:double+int#[VariableDeclarationStatement(), final, int, m, 1, N, VariableDeclarationStatement(), int, largerRankSums, 0, ForStatement(for), int, i, 0, i, m, i, VariableDeclarationStatement(), int, rankSum, 0, ForStatement(for), int, j, 0, j, N, j, IfStatement(if), i, j, 1, 1, ExpressionStatement(), rankSum, j, 1, IfStatement(if), rankSum, Wmax, ExpressionStatement(), largerRankSums, ReturnStatement(return), 2, double, largerRankSums, double, m]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:calculateAsymptoticPValue:double+int#[VariableDeclarationStatement(), final, double, ES, double, N, N, 1, 4.0, VariableDeclarationStatement(), final, double, VarS, ES, double, 2, N, 1, 6.0, VariableDeclarationStatement(), final, double, z, Wmin, ES, 0.5, FastMath, sqrt, VarS, VariableDeclarationStatement(), final, NormalDistribution, standardNormal, new, NormalDistribution, null, 0, 1, ReturnStatement(return), 2, standardNormal, cumulativeProbability, z]
org.apache.commons.math4.stat.inference:WilcoxonSignedRankTest:wilcoxonSignedRankTest:double[]+double[]+boolean#[ExpressionStatement(), ensureDataConformance, x, y, VariableDeclarationStatement(), final, int, N, x.length, VariableDeclarationStatement(), final, double, Wmax, wilcoxonSignedRank, x, y, IfStatement(if), exactPValue, N, 30, ThrowStatement(throw), new, NumberIsTooLargeException, N, 30, true, IfStatement(if), exactPValue, ReturnStatement(return), calculateExactPValue, Wmax, N, VariableDeclarationStatement(), final, double, Wmin, double, N, N, 1, 2.0, Wmax, ReturnStatement(return), calculateAsymptoticPValue, Wmin, N]
org.apache.commons.math4.stat.interval:AgrestiCoullInterval:createInterval:int+int+double#[ExpressionStatement(), IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, VariableDeclarationStatement(), final, double, alpha, 1.0, confidenceLevel, 2, VariableDeclarationStatement(), final, NormalDistribution, normalDistribution, new, NormalDistribution, VariableDeclarationStatement(), final, double, z, normalDistribution, inverseCumulativeProbability, 1, alpha, VariableDeclarationStatement(), final, double, zSquared, FastMath, pow, z, 2, VariableDeclarationStatement(), final, double, modifiedNumberOfTrials, numberOfTrials, zSquared, VariableDeclarationStatement(), final, double, modifiedSuccessesRatio, 1.0, modifiedNumberOfTrials, numberOfSuccesses, 0.5, zSquared, VariableDeclarationStatement(), final, double, difference, z, FastMath, sqrt, 1.0, modifiedNumberOfTrials, modifiedSuccessesRatio, 1, modifiedSuccessesRatio, ReturnStatement(return), new, ConfidenceInterval, modifiedSuccessesRatio, difference, modifiedSuccessesRatio, difference, confidenceLevel]
org.apache.commons.math4.stat.interval:ClopperPearsonInterval:createInterval:int+int+double#[ExpressionStatement(), IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, VariableDeclarationStatement(), double, lowerBound, 0, VariableDeclarationStatement(), double, upperBound, 0, VariableDeclarationStatement(), final, double, alpha, 1.0, confidenceLevel, 2.0, VariableDeclarationStatement(), final, FDistribution, distributionLowerBound, new, FDistribution, 2, numberOfTrials, numberOfSuccesses, 1, 2, numberOfSuccesses, IfStatement(if), numberOfSuccesses, 0, VariableDeclarationStatement(), final, double, fValueLowerBound, distributionLowerBound, inverseCumulativeProbability, 1, alpha, ExpressionStatement(), lowerBound, numberOfSuccesses, numberOfSuccesses, numberOfTrials, numberOfSuccesses, 1, fValueLowerBound, VariableDeclarationStatement(), final, FDistribution, distributionUpperBound, new, FDistribution, 2, numberOfSuccesses, 1, 2, numberOfTrials, numberOfSuccesses, IfStatement(if), numberOfSuccesses, 0, VariableDeclarationStatement(), final, double, fValueUpperBound, distributionUpperBound, inverseCumulativeProbability, 1, alpha, ExpressionStatement(), upperBound, numberOfSuccesses, 1, fValueUpperBound, numberOfTrials, numberOfSuccesses, numberOfSuccesses, 1, fValueUpperBound, ReturnStatement(return), new, ConfidenceInterval, lowerBound, upperBound, confidenceLevel]
org.apache.commons.math4.stat.interval:ConfidenceInterval:getLowerBound:null#[ReturnStatement(return), lowerBound]
org.apache.commons.math4.stat.interval:ConfidenceInterval:getUpperBound:null#[ReturnStatement(return), upperBound]
org.apache.commons.math4.stat.interval:ConfidenceInterval:getConfidenceLevel:null#[ReturnStatement(return), confidenceLevel]
org.apache.commons.math4.stat.interval:ConfidenceInterval:toString:null#[ReturnStatement(return), "[", lowerBound, ";", upperBound, "] (confidence level:", confidenceLevel, ")"]
org.apache.commons.math4.stat.interval:ConfidenceInterval:checkParameters:double+double+double#[IfStatement(if), lower, upper, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, IfStatement(if), confidence, 0, confidence, 1, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.OUT_OF_BOUNDS_CONFIDENCE_LEVEL, confidence, 0, 1]
org.apache.commons.math4.stat.interval:IntervalUtils:getAgrestiCoullInterval:int+int+double#[ReturnStatement(return), AGRESTI_COULL, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:getClopperPearsonInterval:int+int+double#[ReturnStatement(return), CLOPPER_PEARSON, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:getNormalApproximationInterval:int+int+double#[ReturnStatement(return), NORMAL_APPROXIMATION, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:getWilsonScoreInterval:int+int+double#[ReturnStatement(return), WILSON_SCORE, createInterval, numberOfTrials, numberOfSuccesses, confidenceLevel]
org.apache.commons.math4.stat.interval:IntervalUtils:checkParameters:int+int+double#[IfStatement(if), numberOfTrials, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, LocalizedFormats.NUMBER_OF_TRIALS, numberOfTrials, IfStatement(if), numberOfSuccesses, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES, numberOfSuccesses, IfStatement(if), numberOfSuccesses, numberOfTrials, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, numberOfTrials, true, IfStatement(if), confidenceLevel, 0, confidenceLevel, 1, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.OUT_OF_BOUNDS_CONFIDENCE_LEVEL, confidenceLevel, 0, 1]
org.apache.commons.math4.stat.interval:NormalApproximationInterval:createInterval:int+int+double#[ExpressionStatement(), IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, VariableDeclarationStatement(), final, double, mean, double, numberOfSuccesses, double, numberOfTrials, VariableDeclarationStatement(), final, double, alpha, 1.0, confidenceLevel, 2, VariableDeclarationStatement(), final, NormalDistribution, normalDistribution, new, NormalDistribution, VariableDeclarationStatement(), final, double, difference, normalDistribution, inverseCumulativeProbability, 1, alpha, FastMath, sqrt, 1.0, numberOfTrials, mean, 1, mean, ReturnStatement(return), new, ConfidenceInterval, mean, difference, mean, difference, confidenceLevel]
org.apache.commons.math4.stat.interval:WilsonScoreInterval:createInterval:int+int+double#[ExpressionStatement(), IntervalUtils, checkParameters, numberOfTrials, numberOfSuccesses, confidenceLevel, VariableDeclarationStatement(), final, double, alpha, 1.0, confidenceLevel, 2, VariableDeclarationStatement(), final, NormalDistribution, normalDistribution, new, NormalDistribution, VariableDeclarationStatement(), final, double, z, normalDistribution, inverseCumulativeProbability, 1, alpha, VariableDeclarationStatement(), final, double, zSquared, FastMath, pow, z, 2, VariableDeclarationStatement(), final, double, mean, double, numberOfSuccesses, double, numberOfTrials, VariableDeclarationStatement(), final, double, factor, 1.0, 1, 1.0, numberOfTrials, zSquared, VariableDeclarationStatement(), final, double, modifiedSuccessRatio, mean, 1.0, 2, numberOfTrials, zSquared, VariableDeclarationStatement(), final, double, difference, z, FastMath, sqrt, 1.0, numberOfTrials, mean, 1, mean, 1.0, 4, FastMath, pow, numberOfTrials, 2, zSquared, VariableDeclarationStatement(), final, double, lowerBound, factor, modifiedSuccessRatio, difference, VariableDeclarationStatement(), final, double, upperBound, factor, modifiedSuccessRatio, difference, ReturnStatement(return), new, ConfidenceInterval, lowerBound, upperBound, confidenceLevel]
org.apache.commons.math4.stat.ranking:NaturalRanking:getNanStrategy:null#[ReturnStatement(return), nanStrategy]
org.apache.commons.math4.stat.ranking:NaturalRanking:getTiesStrategy:null#[ReturnStatement(return), tiesStrategy]
org.apache.commons.math4.stat.ranking:NaturalRanking:rank:double[]#[VariableDeclarationStatement(), IntDoublePair, ranks, IntDoublePair, data.length, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), ranks, i, new, IntDoublePair, data, i, i, VariableDeclarationStatement(), List, Integer, nanPositions, null, SwitchStatement(switch), nanStrategy, SwitchCase(case), MAXIMAL, ExpressionStatement(), recodeNaNs, ranks, Double.POSITIVE_INFINITY, BreakStatement(break), SwitchCase(case), MINIMAL, ExpressionStatement(), recodeNaNs, ranks, Double.NEGATIVE_INFINITY, BreakStatement(break), SwitchCase(case), REMOVED, ExpressionStatement(), ranks, removeNaNs, ranks, BreakStatement(break), SwitchCase(case), FIXED, ExpressionStatement(), nanPositions, getNanPositions, ranks, BreakStatement(break), SwitchCase(case), FAILED, ExpressionStatement(), nanPositions, getNanPositions, ranks, IfStatement(if), nanPositions, size, 0, ThrowStatement(throw), new, NotANumberException, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), Arrays, sort, ranks, VariableDeclarationStatement(), double, out, double, ranks.length, VariableDeclarationStatement(), int, pos, 1, ExpressionStatement(), out, ranks, 0, getPosition, pos, VariableDeclarationStatement(), List, Integer, tiesTrace, new, ArrayList, Integer, ExpressionStatement(), tiesTrace, add, ranks, 0, getPosition, ForStatement(for), int, i, 1, i, ranks.length, i, IfStatement(if), Double, compare, ranks, i, getValue, ranks, i, 1, getValue, 0, ExpressionStatement(), pos, i, 1, IfStatement(if), tiesTrace, size, 1, ExpressionStatement(), resolveTie, out, tiesTrace, ExpressionStatement(), tiesTrace, new, ArrayList, Integer, ExpressionStatement(), tiesTrace, add, ranks, i, getPosition, ExpressionStatement(), tiesTrace, add, ranks, i, getPosition, ExpressionStatement(), out, ranks, i, getPosition, pos, IfStatement(if), tiesTrace, size, 1, ExpressionStatement(), resolveTie, out, tiesTrace, IfStatement(if), nanStrategy, NaNStrategy.FIXED, ExpressionStatement(), restoreNaNs, out, nanPositions, ReturnStatement(return), out]
org.apache.commons.math4.stat.ranking:NaturalRanking:removeNaNs:IntDoublePair[]#[IfStatement(if), containsNaNs, ranks, ReturnStatement(return), ranks, VariableDeclarationStatement(), IntDoublePair, outRanks, IntDoublePair, ranks.length, VariableDeclarationStatement(), int, j, 0, ForStatement(for), int, i, 0, i, ranks.length, i, IfStatement(if), Double, isNaN, ranks, i, getValue, ForStatement(for), int, k, i, 1, k, ranks.length, k, ExpressionStatement(), ranks, k, new, IntDoublePair, ranks, k, getValue, ranks, k, getPosition, 1, ExpressionStatement(), outRanks, j, new, IntDoublePair, ranks, i, getValue, ranks, i, getPosition, ExpressionStatement(), j, VariableDeclarationStatement(), IntDoublePair, returnRanks, IntDoublePair, j, ExpressionStatement(), System, arraycopy, outRanks, 0, returnRanks, 0, j, ReturnStatement(return), returnRanks]
org.apache.commons.math4.stat.ranking:NaturalRanking:recodeNaNs:IntDoublePair[]+double#[ForStatement(for), int, i, 0, i, ranks.length, i, IfStatement(if), Double, isNaN, ranks, i, getValue, ExpressionStatement(), ranks, i, new, IntDoublePair, value, ranks, i, getPosition]
org.apache.commons.math4.stat.ranking:NaturalRanking:containsNaNs:IntDoublePair[]#[ForStatement(for), int, i, 0, i, ranks.length, i, IfStatement(if), Double, isNaN, ranks, i, getValue, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.stat.ranking:NaturalRanking:resolveTie:double[]+List<Integer>#[VariableDeclarationStatement(), final, double, c, ranks, tiesTrace, get, 0, VariableDeclarationStatement(), final, int, length, tiesTrace, size, SwitchStatement(switch), tiesStrategy, SwitchCase(case), AVERAGE, ExpressionStatement(), fill, ranks, tiesTrace, 2, c, length, 1, 2d, BreakStatement(break), SwitchCase(case), MAXIMUM, ExpressionStatement(), fill, ranks, tiesTrace, c, length, 1, BreakStatement(break), SwitchCase(case), MINIMUM, ExpressionStatement(), fill, ranks, tiesTrace, c, BreakStatement(break), SwitchCase(case), RANDOM, VariableDeclarationStatement(), Iterator, Integer, iterator, tiesTrace, iterator, VariableDeclarationStatement(), long, f, FastMath, round, c, WhileStatement(while), iterator, hasNext, ExpressionStatement(), ranks, iterator, next, randomData, nextLong, f, f, length, 1, BreakStatement(break), SwitchCase(case), SEQUENTIAL, ExpressionStatement(), iterator, tiesTrace, iterator, ExpressionStatement(), f, FastMath, round, c, VariableDeclarationStatement(), int, i, 0, WhileStatement(while), iterator, hasNext, ExpressionStatement(), ranks, iterator, next, f, i, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError]
org.apache.commons.math4.stat.ranking:NaturalRanking:fill:double[]+List<Integer>+double#[VariableDeclarationStatement(), Iterator, Integer, iterator, tiesTrace, iterator, WhileStatement(while), iterator, hasNext, ExpressionStatement(), data, iterator, next, value]
org.apache.commons.math4.stat.ranking:NaturalRanking:restoreNaNs:double[]+List<Integer>#[IfStatement(if), nanPositions, size, 0, ReturnStatement(return), VariableDeclarationStatement(), Iterator, Integer, iterator, nanPositions, iterator, WhileStatement(while), iterator, hasNext, ExpressionStatement(), ranks, iterator, next, intValue, Double.NaN]
org.apache.commons.math4.stat.ranking:NaturalRanking:getNanPositions:IntDoublePair[]#[VariableDeclarationStatement(), ArrayList, Integer, out, new, ArrayList, Integer, ForStatement(for), int, i, 0, i, ranks.length, i, IfStatement(if), Double, isNaN, ranks, i, getValue, ExpressionStatement(), out, add, Integer, valueOf, i, ReturnStatement(return), out]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:getX:null#[ReturnStatement(return), xMatrix]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:getY:null#[ReturnStatement(return), yVector]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:isNoIntercept:null#[ReturnStatement(return), noIntercept]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:setNoIntercept:boolean#[ExpressionStatement(), this, noIntercept, noIntercept]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:newSampleData:double[]+int+int#[IfStatement(if), data, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), data.length, nobs, nvars, 1, ThrowStatement(throw), new, DimensionMismatchException, data.length, nobs, nvars, 1, IfStatement(if), nobs, nvars, ThrowStatement(throw), new, InsufficientDataException, LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, nobs, nvars, 1, VariableDeclarationStatement(), double, y, double, nobs, VariableDeclarationStatement(), final, int, cols, noIntercept, nvars, nvars, 1, VariableDeclarationStatement(), double, x, double, nobs, cols, VariableDeclarationStatement(), int, pointer, 0, ForStatement(for), int, i, 0, i, nobs, i, ExpressionStatement(), y, i, data, pointer, IfStatement(if), noIntercept, ExpressionStatement(), x, i, 0, 1.0d, ForStatement(for), int, j, noIntercept, 0, 1, j, cols, j, ExpressionStatement(), x, i, j, data, pointer, ExpressionStatement(), this, xMatrix, new, Array2DRowRealMatrix, x, ExpressionStatement(), this, yVector, new, ArrayRealVector, y]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:newYSampleData:double[]#[IfStatement(if), y, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), y.length, 0, ThrowStatement(throw), new, NoDataException, ExpressionStatement(), this, yVector, new, ArrayRealVector, y]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:newXSampleData:double[][]#[IfStatement(if), x, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), x.length, 0, ThrowStatement(throw), new, NoDataException, IfStatement(if), noIntercept, ExpressionStatement(), this, xMatrix, new, Array2DRowRealMatrix, x, true, VariableDeclarationStatement(), final, int, nVars, x, 0, length, VariableDeclarationStatement(), final, double, xAug, double, x.length, nVars, 1, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), x, i, length, nVars, ThrowStatement(throw), new, DimensionMismatchException, x, i, length, nVars, ExpressionStatement(), xAug, i, 0, 1.0d, ExpressionStatement(), System, arraycopy, x, i, 0, xAug, i, 1, nVars, ExpressionStatement(), this, xMatrix, new, Array2DRowRealMatrix, xAug, false]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:validateSampleData:double[][]+double[]#[IfStatement(if), x, null, y, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), x.length, y.length, ThrowStatement(throw), new, DimensionMismatchException, y.length, x.length, IfStatement(if), x.length, 0, ThrowStatement(throw), new, NoDataException, IfStatement(if), x, 0, length, 1, x.length, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, x.length, x, 0, length]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:validateCovarianceData:double[][]+double[][]#[IfStatement(if), x.length, covariance.length, ThrowStatement(throw), new, DimensionMismatchException, x.length, covariance.length, IfStatement(if), covariance.length, 0, covariance.length, covariance, 0, length, ThrowStatement(throw), new, NonSquareMatrixException, covariance.length, covariance, 0, length]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionParameters:null#[VariableDeclarationStatement(), RealVector, b, calculateBeta, ReturnStatement(return), b, toArray]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateResiduals:null#[VariableDeclarationStatement(), RealVector, b, calculateBeta, VariableDeclarationStatement(), RealVector, e, yVector, subtract, xMatrix, operate, b, ReturnStatement(return), e, toArray]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionParametersVariance:null#[ReturnStatement(return), calculateBetaVariance, getData]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionParametersStandardErrors:null#[VariableDeclarationStatement(), double, betaVariance, estimateRegressionParametersVariance, VariableDeclarationStatement(), double, sigma, calculateErrorVariance, VariableDeclarationStatement(), int, length, betaVariance, 0, length, VariableDeclarationStatement(), double, result, double, length, ForStatement(for), int, i, 0, i, length, i, ExpressionStatement(), result, i, FastMath, sqrt, sigma, betaVariance, i, i, ReturnStatement(return), result]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressandVariance:null#[ReturnStatement(return), calculateYVariance]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateErrorVariance:null#[ReturnStatement(return), calculateErrorVariance]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:estimateRegressionStandardError:null#[ReturnStatement(return), FastMath, sqrt, estimateErrorVariance]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:calculateYVariance:null#[ReturnStatement(return), new, Variance, evaluate, yVector, toArray]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:calculateErrorVariance:null#[VariableDeclarationStatement(), RealVector, residuals, calculateResiduals, ReturnStatement(return), residuals, dotProduct, residuals, xMatrix, getRowDimension, xMatrix, getColumnDimension]
org.apache.commons.math4.stat.regression:AbstractMultipleLinearRegression:calculateResiduals:null#[VariableDeclarationStatement(), RealVector, b, calculateBeta, ReturnStatement(return), yVector, subtract, xMatrix, operate, b]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:newSampleData:double[]+double[][]+double[][]#[ExpressionStatement(), validateSampleData, x, y, ExpressionStatement(), newYSampleData, y, ExpressionStatement(), newXSampleData, x, ExpressionStatement(), validateCovarianceData, x, covariance, ExpressionStatement(), newCovarianceData, covariance]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:newCovarianceData:double[][]#[ExpressionStatement(), this, Omega, new, Array2DRowRealMatrix, omega, ExpressionStatement(), this, OmegaInverse, null]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:getOmegaInverse:null#[IfStatement(if), OmegaInverse, null, ExpressionStatement(), OmegaInverse, new, LUDecomposition, Omega, getSolver, getInverse, ReturnStatement(return), OmegaInverse]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:calculateBeta:null#[VariableDeclarationStatement(), RealMatrix, OI, getOmegaInverse, VariableDeclarationStatement(), RealMatrix, XT, getX, transpose, VariableDeclarationStatement(), RealMatrix, XTOIX, XT, multiply, OI, multiply, getX, VariableDeclarationStatement(), RealMatrix, inverse, new, LUDecomposition, XTOIX, getSolver, getInverse, ReturnStatement(return), inverse, multiply, XT, multiply, OI, operate, getY]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:calculateBetaVariance:null#[VariableDeclarationStatement(), RealMatrix, OI, getOmegaInverse, VariableDeclarationStatement(), RealMatrix, XTOIX, getX, transpose, multiply, OI, multiply, getX, ReturnStatement(return), new, LUDecomposition, XTOIX, getSolver, getInverse]
org.apache.commons.math4.stat.regression:GLSMultipleLinearRegression:calculateErrorVariance:null#[VariableDeclarationStatement(), RealVector, residuals, calculateResiduals, VariableDeclarationStatement(), double, t, residuals, dotProduct, getOmegaInverse, operate, residuals, ReturnStatement(return), t, getX, getRowDimension, getX, getColumnDimension]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:hasIntercept:null#[ReturnStatement(return), this, hasIntercept]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getN:null#[ReturnStatement(return), this, nobs]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:addObservation:double[]+double#[IfStatement(if), this, hasIntercept, x.length, nvars, this, hasIntercept, x.length, 1, nvars, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.INVALID_REGRESSION_OBSERVATION, x.length, nvars, IfStatement(if), this, hasIntercept, ExpressionStatement(), include, MathArrays, copyOf, x, x.length, 1.0, y, VariableDeclarationStatement(), final, double, tmp, double, x.length, 1, ExpressionStatement(), System, arraycopy, x, 0, tmp, 1, x.length, ExpressionStatement(), tmp, 0, 1.0, ExpressionStatement(), include, tmp, 1.0, y, ExpressionStatement(), nobs]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:addObservations:double[][]+double[]#[IfStatement(if), x, null, y, null, x.length, y.length, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, x, null, 0, x.length, y, null, 0, y.length, IfStatement(if), x.length, 0, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.NO_DATA, IfStatement(if), x, 0, length, 1, x.length, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, x.length, x, 0, length, ForStatement(for), int, i, 0, i, x.length, i, ExpressionStatement(), addObservation, x, i, y, i]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:include:double[]+double+double#[VariableDeclarationStatement(), int, nextr, 0, VariableDeclarationStatement(), double, w, wi, VariableDeclarationStatement(), double, y, yi, VariableDeclarationStatement(), double, xi, VariableDeclarationStatement(), double, di, VariableDeclarationStatement(), double, wxi, VariableDeclarationStatement(), double, dpi, VariableDeclarationStatement(), double, xk, VariableDeclarationStatement(), double, _w, ExpressionStatement(), this, rss_set, false, ExpressionStatement(), sumy, smartAdd, yi, sumy, ExpressionStatement(), sumsqy, smartAdd, sumsqy, yi, yi, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), w, 0.0, ReturnStatement(return), ExpressionStatement(), xi, x, i, IfStatement(if), xi, 0.0, ExpressionStatement(), nextr, nvars, i, 1, ContinueStatement(continue), ExpressionStatement(), di, d, i, ExpressionStatement(), wxi, w, xi, ExpressionStatement(), _w, w, IfStatement(if), di, 0.0, ExpressionStatement(), dpi, smartAdd, di, wxi, xi, VariableDeclarationStatement(), final, double, tmp, wxi, xi, di, IfStatement(if), FastMath, abs, tmp, Precision.EPSILON, ExpressionStatement(), w, di, w, dpi, ExpressionStatement(), dpi, wxi, xi, ExpressionStatement(), w, 0.0, ExpressionStatement(), d, i, dpi, ForStatement(for), int, k, i, 1, k, nvars, k, ExpressionStatement(), xk, x, k, ExpressionStatement(), x, k, smartAdd, xk, xi, r, nextr, IfStatement(if), di, 0.0, ExpressionStatement(), r, nextr, smartAdd, di, r, nextr, _w, xi, xk, dpi, ExpressionStatement(), r, nextr, xk, xi, ExpressionStatement(), nextr, ExpressionStatement(), xk, y, ExpressionStatement(), y, smartAdd, xk, xi, rhs, i, IfStatement(if), di, 0.0, ExpressionStatement(), rhs, i, smartAdd, di, rhs, i, wxi, xk, dpi, ExpressionStatement(), rhs, i, xk, xi, ExpressionStatement(), sserr, smartAdd, sserr, w, y, y]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:smartAdd:double+double#[VariableDeclarationStatement(), final, double, _a, FastMath, abs, a, VariableDeclarationStatement(), final, double, _b, FastMath, abs, b, IfStatement(if), _a, _b, VariableDeclarationStatement(), final, double, eps, _a, Precision.EPSILON, IfStatement(if), _b, eps, ReturnStatement(return), a, b, ReturnStatement(return), a, VariableDeclarationStatement(), final, double, eps, _b, Precision.EPSILON, IfStatement(if), _a, eps, ReturnStatement(return), a, b, ReturnStatement(return), b]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:clear:null#[ExpressionStatement(), Arrays, fill, this, d, 0.0, ExpressionStatement(), Arrays, fill, this, rhs, 0.0, ExpressionStatement(), Arrays, fill, this, r, 0.0, ExpressionStatement(), Arrays, fill, this, tol, 0.0, ExpressionStatement(), Arrays, fill, this, rss, 0.0, ExpressionStatement(), Arrays, fill, this, work_tolset, 0.0, ExpressionStatement(), Arrays, fill, this, work_sing, 0.0, ExpressionStatement(), Arrays, fill, this, x_sing, 0.0, ExpressionStatement(), Arrays, fill, this, lindep, false, ForStatement(for), int, i, 0, i, nvars, i, ExpressionStatement(), this, vorder, i, i, ExpressionStatement(), this, nobs, 0, ExpressionStatement(), this, sserr, 0.0, ExpressionStatement(), this, sumy, 0.0, ExpressionStatement(), this, sumsqy, 0.0, ExpressionStatement(), this, rss_set, false, ExpressionStatement(), this, tol_set, false]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:tolset:null#[VariableDeclarationStatement(), int, pos, VariableDeclarationStatement(), double, total, VariableDeclarationStatement(), final, double, eps, this, epsilon, ForStatement(for), int, i, 0, i, nvars, i, ExpressionStatement(), this, work_tolset, i, FastMath, sqrt, d, i, ExpressionStatement(), tol, 0, eps, this, work_tolset, 0, ForStatement(for), int, col, 1, col, nvars, col, ExpressionStatement(), pos, col, 1, ExpressionStatement(), total, work_tolset, col, ForStatement(for), int, row, 0, row, col, row, ExpressionStatement(), total, FastMath, abs, r, pos, work_tolset, row, ExpressionStatement(), pos, nvars, row, 2, ExpressionStatement(), tol, col, eps, total, ExpressionStatement(), tol_set, true]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regcf:int#[VariableDeclarationStatement(), int, nextr, IfStatement(if), nreq, 1, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.NO_REGRESSORS, IfStatement(if), nreq, this, nvars, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.TOO_MANY_REGRESSORS, nreq, this, nvars, IfStatement(if), this, tol_set, ExpressionStatement(), tolset, VariableDeclarationStatement(), final, double, ret, double, nreq, VariableDeclarationStatement(), boolean, rankProblem, false, ForStatement(for), int, i, nreq, 1, i, 1, i, IfStatement(if), FastMath, sqrt, d, i, tol, i, ExpressionStatement(), ret, i, 0.0, ExpressionStatement(), d, i, 0.0, ExpressionStatement(), rankProblem, true, ExpressionStatement(), ret, i, rhs, i, ExpressionStatement(), nextr, i, nvars, nvars, i, 1, 2, ForStatement(for), int, j, i, 1, j, nreq, j, ExpressionStatement(), ret, i, smartAdd, ret, i, r, nextr, ret, j, ExpressionStatement(), nextr, IfStatement(if), rankProblem, ForStatement(for), int, i, 0, i, nreq, i, IfStatement(if), this, lindep, i, ExpressionStatement(), ret, i, Double.NaN, ReturnStatement(return), ret]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:singcheck:null#[VariableDeclarationStatement(), int, pos, ForStatement(for), int, i, 0, i, nvars, i, ExpressionStatement(), work_sing, i, FastMath, sqrt, d, i, ForStatement(for), int, col, 0, col, nvars, col, VariableDeclarationStatement(), final, double, temp, tol, col, ExpressionStatement(), pos, col, 1, ForStatement(for), int, row, 0, row, col, 1, row, IfStatement(if), FastMath, abs, r, pos, work_sing, row, temp, ExpressionStatement(), r, pos, 0.0, ExpressionStatement(), pos, nvars, row, 2, ExpressionStatement(), lindep, col, false, IfStatement(if), work_sing, col, temp, ExpressionStatement(), lindep, col, true, IfStatement(if), col, nvars, 1, ExpressionStatement(), Arrays, fill, x_sing, 0.0, VariableDeclarationStatement(), int, _pi, col, nvars, nvars, col, 1, 2, ForStatement(for), int, _xi, col, 1, _xi, nvars, _xi, _pi, ExpressionStatement(), x_sing, _xi, r, _pi, ExpressionStatement(), r, _pi, 0.0, VariableDeclarationStatement(), final, double, y, rhs, col, VariableDeclarationStatement(), final, double, weight, d, col, ExpressionStatement(), d, col, 0.0, ExpressionStatement(), rhs, col, 0.0, ExpressionStatement(), this, include, x_sing, weight, y, ExpressionStatement(), sserr, d, col, rhs, col, rhs, col]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:ss:null#[VariableDeclarationStatement(), double, total, sserr, ExpressionStatement(), rss, nvars, 1, sserr, ForStatement(for), int, i, nvars, 1, i, 0, i, ExpressionStatement(), total, d, i, rhs, i, rhs, i, ExpressionStatement(), rss, i, 1, total, ExpressionStatement(), rss_set, true]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:cov:int#[IfStatement(if), this, nobs, nreq, ReturnStatement(return), null, VariableDeclarationStatement(), double, rnk, 0.0, ForStatement(for), int, i, 0, i, nreq, i, IfStatement(if), this, lindep, i, ExpressionStatement(), rnk, 1.0, VariableDeclarationStatement(), final, double, var, rss, nreq, 1, nobs, rnk, VariableDeclarationStatement(), final, double, rinv, double, nreq, nreq, 1, 2, ExpressionStatement(), inverse, rinv, nreq, VariableDeclarationStatement(), final, double, covmat, double, nreq, nreq, 1, 2, ExpressionStatement(), Arrays, fill, covmat, Double.NaN, VariableDeclarationStatement(), int, pos2, VariableDeclarationStatement(), int, pos1, VariableDeclarationStatement(), int, start, 0, VariableDeclarationStatement(), double, total, 0, ForStatement(for), int, row, 0, row, nreq, row, ExpressionStatement(), pos2, start, IfStatement(if), this, lindep, row, ForStatement(for), int, col, row, col, nreq, col, IfStatement(if), this, lindep, col, ExpressionStatement(), pos1, start, col, row, IfStatement(if), row, col, ExpressionStatement(), total, 1.0, d, col, ExpressionStatement(), total, rinv, pos1, 1, d, col, ForStatement(for), int, k, col, 1, k, nreq, k, IfStatement(if), this, lindep, k, ExpressionStatement(), total, rinv, pos1, rinv, pos2, d, k, ExpressionStatement(), pos1, ExpressionStatement(), pos2, ExpressionStatement(), covmat, col, 1, col, 2, row, total, var, ExpressionStatement(), pos2, nreq, col, 1, ExpressionStatement(), start, nreq, row, 1, ReturnStatement(return), covmat]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:inverse:double[]+int#[VariableDeclarationStatement(), int, pos, nreq, nreq, 1, 2, 1, VariableDeclarationStatement(), int, pos1, 1, VariableDeclarationStatement(), int, pos2, 1, VariableDeclarationStatement(), double, total, 0.0, ExpressionStatement(), Arrays, fill, rinv, Double.NaN, ForStatement(for), int, row, nreq, 1, row, 0, row, IfStatement(if), this, lindep, row, VariableDeclarationStatement(), final, int, start, row, 1, nvars, nvars, row, 2, ForStatement(for), int, col, nreq, col, row, col, ExpressionStatement(), pos1, start, ExpressionStatement(), pos2, pos, ExpressionStatement(), total, 0.0, ForStatement(for), int, k, row, k, col, 1, k, ExpressionStatement(), pos2, nreq, k, 1, IfStatement(if), this, lindep, k, ExpressionStatement(), total, r, pos1, rinv, pos2, ExpressionStatement(), pos1, ExpressionStatement(), rinv, pos, total, r, pos1, ExpressionStatement(), pos, ExpressionStatement(), pos, nreq, row]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getPartialCorrelations:int#[VariableDeclarationStatement(), final, double, output, double, nvars, in, 1, nvars, in, 2, VariableDeclarationStatement(), int, pos, VariableDeclarationStatement(), int, pos1, VariableDeclarationStatement(), int, pos2, VariableDeclarationStatement(), final, int, rms_off, in, VariableDeclarationStatement(), final, int, wrk_off, in, 1, VariableDeclarationStatement(), final, double, rms, double, nvars, in, VariableDeclarationStatement(), final, double, work, double, nvars, in, 1, VariableDeclarationStatement(), double, sumxx, VariableDeclarationStatement(), double, sumxy, VariableDeclarationStatement(), double, sumyy, VariableDeclarationStatement(), final, int, offXX, nvars, in, nvars, in, 1, 2, IfStatement(if), in, 1, in, nvars, ReturnStatement(return), null, VariableDeclarationStatement(), final, int, nvm, nvars, 1, VariableDeclarationStatement(), final, int, base_pos, r.length, nvm, in, nvm, in, 1, 2, IfStatement(if), d, in, 0.0, ExpressionStatement(), rms, in, rms_off, 1.0, FastMath, sqrt, d, in, ForStatement(for), int, col, in, 1, col, nvars, col, ExpressionStatement(), pos, base_pos, col, 1, in, ExpressionStatement(), sumxx, d, col, ForStatement(for), int, row, in, row, col, row, ExpressionStatement(), sumxx, d, row, r, pos, r, pos, ExpressionStatement(), pos, nvars, row, 2, IfStatement(if), sumxx, 0.0, ExpressionStatement(), rms, col, rms_off, 1.0, FastMath, sqrt, sumxx, ExpressionStatement(), rms, col, rms_off, 0.0, ExpressionStatement(), sumyy, sserr, ForStatement(for), int, row, in, row, nvars, row, ExpressionStatement(), sumyy, d, row, rhs, row, rhs, row, IfStatement(if), sumyy, 0.0, ExpressionStatement(), sumyy, 1.0, FastMath, sqrt, sumyy, ExpressionStatement(), pos, 0, ForStatement(for), int, col1, in, col1, nvars, col1, ExpressionStatement(), sumxy, 0.0, ExpressionStatement(), Arrays, fill, work, 0.0, ExpressionStatement(), pos1, base_pos, col1, in, 1, ForStatement(for), int, row, in, row, col1, row, ExpressionStatement(), pos2, pos1, 1, ForStatement(for), int, col2, col1, 1, col2, nvars, col2, ExpressionStatement(), work, col2, wrk_off, d, row, r, pos1, r, pos2, ExpressionStatement(), pos2, ExpressionStatement(), sumxy, d, row, r, pos1, rhs, row, ExpressionStatement(), pos1, nvars, row, 2, ExpressionStatement(), pos2, pos1, 1, ForStatement(for), int, col2, col1, 1, col2, nvars, col2, ExpressionStatement(), work, col2, wrk_off, d, col1, r, pos2, ExpressionStatement(), pos2, ExpressionStatement(), output, col2, 1, in, col2, in, 2, col1, in, work, col2, wrk_off, rms, col1, rms_off, rms, col2, rms_off, ExpressionStatement(), pos, ExpressionStatement(), sumxy, d, col1, rhs, col1, ExpressionStatement(), output, col1, rms_off, offXX, sumxy, rms, col1, rms_off, sumyy, ReturnStatement(return), output]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:vmove:int+int#[VariableDeclarationStatement(), double, d1, VariableDeclarationStatement(), double, d2, VariableDeclarationStatement(), double, X, VariableDeclarationStatement(), double, d1new, VariableDeclarationStatement(), double, d2new, VariableDeclarationStatement(), double, cbar, VariableDeclarationStatement(), double, sbar, VariableDeclarationStatement(), double, Y, VariableDeclarationStatement(), int, first, VariableDeclarationStatement(), int, inc, VariableDeclarationStatement(), int, m1, VariableDeclarationStatement(), int, m2, VariableDeclarationStatement(), int, mp1, VariableDeclarationStatement(), int, pos, VariableDeclarationStatement(), boolean, bSkipTo40, false, IfStatement(if), from, to, ReturnStatement(return), IfStatement(if), this, rss_set, ExpressionStatement(), ss, VariableDeclarationStatement(), int, count, 0, IfStatement(if), from, to, ExpressionStatement(), first, from, ExpressionStatement(), inc, 1, ExpressionStatement(), count, to, from, ExpressionStatement(), first, from, 1, ExpressionStatement(), inc, 1, ExpressionStatement(), count, from, to, VariableDeclarationStatement(), int, m, first, VariableDeclarationStatement(), int, idx, 0, WhileStatement(while), idx, count, ExpressionStatement(), m1, m, nvars, nvars, m, 1, 2, ExpressionStatement(), m2, m1, nvars, m, 1, ExpressionStatement(), mp1, m, 1, ExpressionStatement(), d1, d, m, ExpressionStatement(), d2, d, mp1, IfStatement(if), d1, this, epsilon, d2, this, epsilon, ExpressionStatement(), X, r, m1, IfStatement(if), FastMath, abs, X, FastMath, sqrt, d1, tol, mp1, ExpressionStatement(), X, 0.0, IfStatement(if), d1, this, epsilon, FastMath, abs, X, this, epsilon, ExpressionStatement(), d, m, d2, ExpressionStatement(), d, mp1, d1, ExpressionStatement(), r, m1, 0.0, ForStatement(for), int, col, m, 2, col, nvars, col, ExpressionStatement(), m1, ExpressionStatement(), X, r, m1, ExpressionStatement(), r, m1, r, m2, ExpressionStatement(), r, m2, X, ExpressionStatement(), m2, ExpressionStatement(), X, rhs, m, ExpressionStatement(), rhs, m, rhs, mp1, ExpressionStatement(), rhs, mp1, X, ExpressionStatement(), bSkipTo40, true, IfStatement(if), d2, this, epsilon, ExpressionStatement(), d, m, d1, X, X, ExpressionStatement(), r, m1, 1.0, X, ForStatement(for), int, _i, m1, 1, _i, m1, nvars, m, 1, _i, ExpressionStatement(), r, _i, X, ExpressionStatement(), rhs, m, X, ExpressionStatement(), bSkipTo40, true, IfStatement(if), bSkipTo40, ExpressionStatement(), d1new, d2, d1, X, X, ExpressionStatement(), cbar, d2, d1new, ExpressionStatement(), sbar, X, d1, d1new, ExpressionStatement(), d2new, d1, cbar, ExpressionStatement(), d, m, d1new, ExpressionStatement(), d, mp1, d2new, ExpressionStatement(), r, m1, sbar, ForStatement(for), int, col, m, 2, col, nvars, col, ExpressionStatement(), m1, ExpressionStatement(), Y, r, m1, ExpressionStatement(), r, m1, cbar, r, m2, sbar, Y, ExpressionStatement(), r, m2, Y, X, r, m2, ExpressionStatement(), m2, ExpressionStatement(), Y, rhs, m, ExpressionStatement(), rhs, m, cbar, rhs, mp1, sbar, Y, ExpressionStatement(), rhs, mp1, Y, X, rhs, mp1, IfStatement(if), m, 0, ExpressionStatement(), pos, m, ForStatement(for), int, row, 0, row, m, row, ExpressionStatement(), X, r, pos, ExpressionStatement(), r, pos, r, pos, 1, ExpressionStatement(), r, pos, 1, X, ExpressionStatement(), pos, nvars, row, 2, ExpressionStatement(), m1, vorder, m, ExpressionStatement(), vorder, m, vorder, mp1, ExpressionStatement(), vorder, mp1, m1, ExpressionStatement(), X, tol, m, ExpressionStatement(), tol, m, tol, mp1, ExpressionStatement(), tol, mp1, X, ExpressionStatement(), rss, m, rss, mp1, d, mp1, rhs, mp1, rhs, mp1, ExpressionStatement(), m, inc, ExpressionStatement(), idx]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:reorderRegressors:int[]+int#[VariableDeclarationStatement(), int, next, VariableDeclarationStatement(), int, i, VariableDeclarationStatement(), int, l, IfStatement(if), list.length, 1, list.length, nvars, 1, pos1, ReturnStatement(return), 1, ExpressionStatement(), next, pos1, ExpressionStatement(), i, pos1, WhileStatement(while), i, nvars, ExpressionStatement(), l, vorder, i, ForStatement(for), int, j, 0, j, list.length, j, IfStatement(if), l, list, j, i, next, ExpressionStatement(), this, vmove, i, next, ExpressionStatement(), next, IfStatement(if), next, list.length, pos1, ReturnStatement(return), 0, BreakStatement(break), ExpressionStatement(), i, ReturnStatement(return), 0]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getDiagonalOfHatMatrix:double[]#[VariableDeclarationStatement(), double, wk, double, this, nvars, VariableDeclarationStatement(), int, pos, VariableDeclarationStatement(), double, total, IfStatement(if), row_data.length, nvars, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), double, xrow, IfStatement(if), this, hasIntercept, ExpressionStatement(), xrow, double, row_data.length, 1, ExpressionStatement(), xrow, 0, 1.0, ExpressionStatement(), System, arraycopy, row_data, 0, xrow, 1, row_data.length, ExpressionStatement(), xrow, row_data, VariableDeclarationStatement(), double, hii, 0.0, ForStatement(for), int, col, 0, col, xrow.length, col, IfStatement(if), FastMath, sqrt, d, col, tol, col, ExpressionStatement(), wk, col, 0.0, ExpressionStatement(), pos, col, 1, ExpressionStatement(), total, xrow, col, ForStatement(for), int, row, 0, row, col, row, ExpressionStatement(), total, smartAdd, total, wk, row, r, pos, ExpressionStatement(), pos, nvars, row, 2, ExpressionStatement(), wk, col, total, ExpressionStatement(), hii, smartAdd, hii, total, total, d, col, ReturnStatement(return), hii]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:getOrderOfRegressors:null#[ReturnStatement(return), MathArrays, copyOf, vorder]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regress:null#[ReturnStatement(return), regress, this, nvars]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regress:int#[IfStatement(if), this, nobs, numberOfRegressors, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, this, nobs, numberOfRegressors, IfStatement(if), numberOfRegressors, this, nvars, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.TOO_MANY_REGRESSORS, numberOfRegressors, this, nvars, ExpressionStatement(), tolset, ExpressionStatement(), singcheck, VariableDeclarationStatement(), double, beta, this, regcf, numberOfRegressors, ExpressionStatement(), ss, VariableDeclarationStatement(), double, cov, this, cov, numberOfRegressors, VariableDeclarationStatement(), int, rnk, 0, ForStatement(for), int, i, 0, i, this, lindep, length, i, IfStatement(if), this, lindep, i, ExpressionStatement(), rnk, VariableDeclarationStatement(), boolean, needsReorder, false, ForStatement(for), int, i, 0, i, numberOfRegressors, i, IfStatement(if), this, vorder, i, i, ExpressionStatement(), needsReorder, true, BreakStatement(break), IfStatement(if), needsReorder, ReturnStatement(return), new, RegressionResults, beta, double, cov, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false, VariableDeclarationStatement(), double, betaNew, double, beta.length, VariableDeclarationStatement(), double, covNew, double, cov.length, VariableDeclarationStatement(), int, newIndices, int, beta.length, ForStatement(for), int, i, 0, i, nvars, i, ForStatement(for), int, j, 0, j, numberOfRegressors, j, IfStatement(if), this, vorder, j, i, ExpressionStatement(), betaNew, i, beta, j, ExpressionStatement(), newIndices, i, j, VariableDeclarationStatement(), int, idx1, 0, VariableDeclarationStatement(), int, idx2, VariableDeclarationStatement(), int, _i, VariableDeclarationStatement(), int, _j, ForStatement(for), int, i, 0, i, beta.length, i, ExpressionStatement(), _i, newIndices, i, ForStatement(for), int, j, 0, j, i, j, idx1, ExpressionStatement(), _j, newIndices, j, IfStatement(if), _i, _j, ExpressionStatement(), idx2, _i, _i, 1, 2, _j, ExpressionStatement(), idx2, _j, _j, 1, 2, _i, ExpressionStatement(), covNew, idx1, cov, idx2, ReturnStatement(return), new, RegressionResults, betaNew, double, covNew, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false]
org.apache.commons.math4.stat.regression:MillerUpdatingRegression:regress:int[]#[IfStatement(if), variablesToInclude.length, this, nvars, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.TOO_MANY_REGRESSORS, variablesToInclude.length, this, nvars, IfStatement(if), this, nobs, this, nvars, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, this, nobs, this, nvars, ExpressionStatement(), Arrays, sort, variablesToInclude, VariableDeclarationStatement(), int, iExclude, 0, ForStatement(for), int, i, 0, i, variablesToInclude.length, i, IfStatement(if), i, this, nvars, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.INDEX_LARGER_THAN_MAX, i, this, nvars, IfStatement(if), i, 0, variablesToInclude, i, variablesToInclude, i, 1, ExpressionStatement(), variablesToInclude, i, 1, ExpressionStatement(), iExclude, VariableDeclarationStatement(), int, series, IfStatement(if), iExclude, 0, VariableDeclarationStatement(), int, j, 0, ExpressionStatement(), series, int, variablesToInclude.length, iExclude, ForStatement(for), int, i, 0, i, variablesToInclude.length, i, IfStatement(if), variablesToInclude, i, 1, ExpressionStatement(), series, j, variablesToInclude, i, ExpressionStatement(), j, ExpressionStatement(), series, variablesToInclude, ExpressionStatement(), reorderRegressors, series, 0, ExpressionStatement(), tolset, ExpressionStatement(), singcheck, VariableDeclarationStatement(), double, beta, this, regcf, series.length, ExpressionStatement(), ss, VariableDeclarationStatement(), double, cov, this, cov, series.length, VariableDeclarationStatement(), int, rnk, 0, ForStatement(for), int, i, 0, i, this, lindep, length, i, IfStatement(if), this, lindep, i, ExpressionStatement(), rnk, VariableDeclarationStatement(), boolean, needsReorder, false, ForStatement(for), int, i, 0, i, this, nvars, i, IfStatement(if), this, vorder, i, series, i, ExpressionStatement(), needsReorder, true, BreakStatement(break), IfStatement(if), needsReorder, ReturnStatement(return), new, RegressionResults, beta, double, cov, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false, VariableDeclarationStatement(), double, betaNew, double, beta.length, VariableDeclarationStatement(), int, newIndices, int, beta.length, ForStatement(for), int, i, 0, i, series.length, i, ForStatement(for), int, j, 0, j, this, vorder, length, j, IfStatement(if), this, vorder, j, series, i, ExpressionStatement(), betaNew, i, beta, j, ExpressionStatement(), newIndices, i, j, VariableDeclarationStatement(), double, covNew, double, cov.length, VariableDeclarationStatement(), int, idx1, 0, VariableDeclarationStatement(), int, idx2, VariableDeclarationStatement(), int, _i, VariableDeclarationStatement(), int, _j, ForStatement(for), int, i, 0, i, beta.length, i, ExpressionStatement(), _i, newIndices, i, ForStatement(for), int, j, 0, j, i, j, idx1, ExpressionStatement(), _j, newIndices, j, IfStatement(if), _i, _j, ExpressionStatement(), idx2, _i, _i, 1, 2, _j, ExpressionStatement(), idx2, _j, _j, 1, 2, _i, ExpressionStatement(), covNew, idx1, cov, idx2, ReturnStatement(return), new, RegressionResults, betaNew, double, covNew, true, this, nobs, rnk, this, sumy, this, sumsqy, this, sserr, this, hasIntercept, false]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:newSampleData:double[]+double[][]#[ExpressionStatement(), validateSampleData, x, y, ExpressionStatement(), newYSampleData, y, ExpressionStatement(), newXSampleData, x]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:newSampleData:double[]+int+int#[ExpressionStatement(), super, newSampleData, data, nobs, nvars, ExpressionStatement(), qr, new, QRDecomposition, getX, threshold]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateHat:null#[VariableDeclarationStatement(), RealMatrix, Q, qr, getQ, VariableDeclarationStatement(), final, int, p, qr, getR, getColumnDimension, VariableDeclarationStatement(), final, int, n, Q, getColumnDimension, VariableDeclarationStatement(), Array2DRowRealMatrix, augI, new, Array2DRowRealMatrix, n, n, VariableDeclarationStatement(), double, augIData, augI, getDataRef, ForStatement(for), int, i, 0, i, n, i, ForStatement(for), int, j, 0, j, n, j, IfStatement(if), i, j, i, p, ExpressionStatement(), augIData, i, j, 1d, ExpressionStatement(), augIData, i, j, 0d, ReturnStatement(return), Q, multiply, augI, multiply, Q, transpose]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateTotalSumOfSquares:null#[IfStatement(if), isNoIntercept, ReturnStatement(return), StatUtils, sumSq, getY, toArray, ReturnStatement(return), new, SecondMoment, evaluate, getY, toArray]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateResidualSumOfSquares:null#[VariableDeclarationStatement(), final, RealVector, residuals, calculateResiduals, ReturnStatement(return), residuals, dotProduct, residuals]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateRSquared:null#[ReturnStatement(return), 1, calculateResidualSumOfSquares, calculateTotalSumOfSquares]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateAdjustedRSquared:null#[VariableDeclarationStatement(), final, double, n, getX, getRowDimension, IfStatement(if), isNoIntercept, ReturnStatement(return), 1, 1, calculateRSquared, n, n, getX, getColumnDimension, ReturnStatement(return), 1, calculateResidualSumOfSquares, n, 1, calculateTotalSumOfSquares, n, getX, getColumnDimension]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:newXSampleData:double[][]#[ExpressionStatement(), super, newXSampleData, x, ExpressionStatement(), qr, new, QRDecomposition, getX, threshold]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateBeta:null#[ReturnStatement(return), qr, getSolver, solve, getY]
org.apache.commons.math4.stat.regression:OLSMultipleLinearRegression:calculateBetaVariance:null#[VariableDeclarationStatement(), int, p, getX, getColumnDimension, VariableDeclarationStatement(), RealMatrix, Raug, qr, getR, getSubMatrix, 0, p, 1, 0, p, 1, VariableDeclarationStatement(), RealMatrix, Rinv, new, LUDecomposition, Raug, getSolver, getInverse, ReturnStatement(return), Rinv, multiply, Rinv, transpose]
org.apache.commons.math4.stat.regression:RegressionResults:getParameterEstimate:int#[IfStatement(if), parameters, null, ReturnStatement(return), Double.NaN, IfStatement(if), index, 0, index, this, parameters, length, ThrowStatement(throw), new, OutOfRangeException, index, 0, this, parameters, length, 1, ReturnStatement(return), this, parameters, index]
org.apache.commons.math4.stat.regression:RegressionResults:getParameterEstimates:null#[IfStatement(if), this, parameters, null, ReturnStatement(return), null, ReturnStatement(return), MathArrays, copyOf, parameters]
org.apache.commons.math4.stat.regression:RegressionResults:getStdErrorOfEstimate:int#[IfStatement(if), parameters, null, ReturnStatement(return), Double.NaN, IfStatement(if), index, 0, index, this, parameters, length, ThrowStatement(throw), new, OutOfRangeException, index, 0, this, parameters, length, 1, VariableDeclarationStatement(), double, var, this, getVcvElement, index, index, IfStatement(if), Double, isNaN, var, var, Double.MIN_VALUE, ReturnStatement(return), FastMath, sqrt, var, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.stat.regression:RegressionResults:getStdErrorOfEstimates:null#[IfStatement(if), parameters, null, ReturnStatement(return), null, VariableDeclarationStatement(), double, se, double, this, parameters, length, ForStatement(for), int, i, 0, i, this, parameters, length, i, VariableDeclarationStatement(), double, var, this, getVcvElement, i, i, IfStatement(if), Double, isNaN, var, var, Double.MIN_VALUE, ExpressionStatement(), se, i, FastMath, sqrt, var, ContinueStatement(continue), ExpressionStatement(), se, i, Double.NaN, ReturnStatement(return), se]
org.apache.commons.math4.stat.regression:RegressionResults:getCovarianceOfParameters:int+int#[IfStatement(if), parameters, null, ReturnStatement(return), Double.NaN, IfStatement(if), i, 0, i, this, parameters, length, ThrowStatement(throw), new, OutOfRangeException, i, 0, this, parameters, length, 1, IfStatement(if), j, 0, j, this, parameters, length, ThrowStatement(throw), new, OutOfRangeException, j, 0, this, parameters, length, 1, ReturnStatement(return), this, getVcvElement, i, j]
org.apache.commons.math4.stat.regression:RegressionResults:getNumberOfParameters:null#[IfStatement(if), this, parameters, null, ReturnStatement(return), 1, ReturnStatement(return), this, parameters, length]
org.apache.commons.math4.stat.regression:RegressionResults:getN:null#[ReturnStatement(return), this, nobs]
org.apache.commons.math4.stat.regression:RegressionResults:getTotalSumSquares:null#[ReturnStatement(return), this, globalFitInfo, SST_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getRegressionSumSquares:null#[ReturnStatement(return), this, globalFitInfo, SST_IDX, this, globalFitInfo, SSE_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getErrorSumSquares:null#[ReturnStatement(return), this, globalFitInfo, SSE_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getMeanSquareError:null#[ReturnStatement(return), this, globalFitInfo, MSE_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getRSquared:null#[ReturnStatement(return), this, globalFitInfo, RSQ_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:getAdjustedRSquared:null#[ReturnStatement(return), this, globalFitInfo, ADJRSQ_IDX]
org.apache.commons.math4.stat.regression:RegressionResults:hasIntercept:null#[ReturnStatement(return), this, containsConstant]
org.apache.commons.math4.stat.regression:RegressionResults:getVcvElement:int+int#[IfStatement(if), this, isSymmetricVCD, IfStatement(if), this, varCovData, length, 1, IfStatement(if), i, j, ReturnStatement(return), varCovData, i, i, IfStatement(if), i, varCovData, j, length, ReturnStatement(return), varCovData, i, j, ReturnStatement(return), varCovData, j, i, IfStatement(if), i, j, ReturnStatement(return), varCovData, 0, i, 1, i, 2, j, ReturnStatement(return), varCovData, 0, j, 1, j, 2, i, ReturnStatement(return), this, varCovData, i, j]
org.apache.commons.math4.stat.regression:SimpleRegression:addData:double+double#[IfStatement(if), n, 0, ExpressionStatement(), xbar, x, ExpressionStatement(), ybar, y, IfStatement(if), hasIntercept, VariableDeclarationStatement(), final, double, fact1, 1.0, n, VariableDeclarationStatement(), final, double, fact2, n, 1.0, n, VariableDeclarationStatement(), final, double, dx, x, xbar, VariableDeclarationStatement(), final, double, dy, y, ybar, ExpressionStatement(), sumXX, dx, dx, fact2, ExpressionStatement(), sumYY, dy, dy, fact2, ExpressionStatement(), sumXY, dx, dy, fact2, ExpressionStatement(), xbar, dx, fact1, ExpressionStatement(), ybar, dy, fact1, IfStatement(if), hasIntercept, ExpressionStatement(), sumXX, x, x, ExpressionStatement(), sumYY, y, y, ExpressionStatement(), sumXY, x, y, ExpressionStatement(), sumX, x, ExpressionStatement(), sumY, y, ExpressionStatement(), n]
org.apache.commons.math4.stat.regression:SimpleRegression:append:SimpleRegression#[IfStatement(if), n, 0, ExpressionStatement(), xbar, reg.xbar, ExpressionStatement(), ybar, reg.ybar, ExpressionStatement(), sumXX, reg.sumXX, ExpressionStatement(), sumYY, reg.sumYY, ExpressionStatement(), sumXY, reg.sumXY, IfStatement(if), hasIntercept, VariableDeclarationStatement(), final, double, fact1, reg.n, double, reg.n, n, VariableDeclarationStatement(), final, double, fact2, n, reg.n, double, reg.n, n, VariableDeclarationStatement(), final, double, dx, reg.xbar, xbar, VariableDeclarationStatement(), final, double, dy, reg.ybar, ybar, ExpressionStatement(), sumXX, reg.sumXX, dx, dx, fact2, ExpressionStatement(), sumYY, reg.sumYY, dy, dy, fact2, ExpressionStatement(), sumXY, reg.sumXY, dx, dy, fact2, ExpressionStatement(), xbar, dx, fact1, ExpressionStatement(), ybar, dy, fact1, ExpressionStatement(), sumXX, reg.sumXX, ExpressionStatement(), sumYY, reg.sumYY, ExpressionStatement(), sumXY, reg.sumXY, ExpressionStatement(), sumX, reg.sumX, ExpressionStatement(), sumY, reg.sumY, ExpressionStatement(), n, reg.n]
org.apache.commons.math4.stat.regression:SimpleRegression:removeData:double+double#[IfStatement(if), n, 0, IfStatement(if), hasIntercept, VariableDeclarationStatement(), final, double, fact1, n, 1.0, VariableDeclarationStatement(), final, double, fact2, n, n, 1.0, VariableDeclarationStatement(), final, double, dx, x, xbar, VariableDeclarationStatement(), final, double, dy, y, ybar, ExpressionStatement(), sumXX, dx, dx, fact2, ExpressionStatement(), sumYY, dy, dy, fact2, ExpressionStatement(), sumXY, dx, dy, fact2, ExpressionStatement(), xbar, dx, fact1, ExpressionStatement(), ybar, dy, fact1, VariableDeclarationStatement(), final, double, fact1, n, 1.0, ExpressionStatement(), sumXX, x, x, ExpressionStatement(), sumYY, y, y, ExpressionStatement(), sumXY, x, y, ExpressionStatement(), xbar, x, fact1, ExpressionStatement(), ybar, y, fact1, ExpressionStatement(), sumX, x, ExpressionStatement(), sumY, y, ExpressionStatement(), n]
org.apache.commons.math4.stat.regression:SimpleRegression:addData:double[][]#[ForStatement(for), int, i, 0, i, data.length, i, IfStatement(if), data, i, length, 2, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.INVALID_REGRESSION_OBSERVATION, data, i, length, 2, ExpressionStatement(), addData, data, i, 0, data, i, 1]
org.apache.commons.math4.stat.regression:SimpleRegression:addObservation:double[]+double#[IfStatement(if), x, null, x.length, 0, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.INVALID_REGRESSION_OBSERVATION, x, null, x.length, 0, 1, ExpressionStatement(), addData, x, 0, y]
org.apache.commons.math4.stat.regression:SimpleRegression:addObservations:double[][]+double[]#[IfStatement(if), x, null, y, null, x.length, y.length, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, x, null, 0, x.length, y, null, 0, y.length, VariableDeclarationStatement(), boolean, obsOk, true, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), x, i, null, x, i, length, 0, ExpressionStatement(), obsOk, false, IfStatement(if), obsOk, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, 0, 1, ForStatement(for), int, i, 0, i, x.length, i, ExpressionStatement(), addData, x, i, 0, y, i]
org.apache.commons.math4.stat.regression:SimpleRegression:removeData:double[][]#[ForStatement(for), int, i, 0, i, data.length, n, 0, i, ExpressionStatement(), removeData, data, i, 0, data, i, 1]
org.apache.commons.math4.stat.regression:SimpleRegression:clear:null#[ExpressionStatement(), sumX, 0d, ExpressionStatement(), sumXX, 0d, ExpressionStatement(), sumY, 0d, ExpressionStatement(), sumYY, 0d, ExpressionStatement(), sumXY, 0d, ExpressionStatement(), n, 0]
org.apache.commons.math4.stat.regression:SimpleRegression:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.stat.regression:SimpleRegression:predict:double#[VariableDeclarationStatement(), final, double, b1, getSlope, IfStatement(if), hasIntercept, ReturnStatement(return), getIntercept, b1, b1, x, ReturnStatement(return), b1, x]
org.apache.commons.math4.stat.regression:SimpleRegression:getIntercept:null#[ReturnStatement(return), hasIntercept, getIntercept, getSlope, 0.0]
org.apache.commons.math4.stat.regression:SimpleRegression:hasIntercept:null#[ReturnStatement(return), hasIntercept]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlope:null#[IfStatement(if), n, 2, ReturnStatement(return), Double.NaN, IfStatement(if), FastMath, abs, sumXX, 10, Double.MIN_VALUE, ReturnStatement(return), Double.NaN, ReturnStatement(return), sumXY, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSumSquaredErrors:null#[ReturnStatement(return), FastMath, max, 0d, sumYY, sumXY, sumXY, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getTotalSumSquares:null#[IfStatement(if), n, 2, ReturnStatement(return), Double.NaN, ReturnStatement(return), sumYY]
org.apache.commons.math4.stat.regression:SimpleRegression:getXSumSquares:null#[IfStatement(if), n, 2, ReturnStatement(return), Double.NaN, ReturnStatement(return), sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSumOfCrossProducts:null#[ReturnStatement(return), sumXY]
org.apache.commons.math4.stat.regression:SimpleRegression:getRegressionSumSquares:null#[ReturnStatement(return), getRegressionSumSquares, getSlope]
org.apache.commons.math4.stat.regression:SimpleRegression:getMeanSquareError:null#[IfStatement(if), n, 3, ReturnStatement(return), Double.NaN, ReturnStatement(return), hasIntercept, getSumSquaredErrors, n, 2, getSumSquaredErrors, n, 1]
org.apache.commons.math4.stat.regression:SimpleRegression:getR:null#[VariableDeclarationStatement(), double, b1, getSlope, VariableDeclarationStatement(), double, result, FastMath, sqrt, getRSquare, IfStatement(if), b1, 0, ExpressionStatement(), result, result, ReturnStatement(return), result]
org.apache.commons.math4.stat.regression:SimpleRegression:getRSquare:null#[VariableDeclarationStatement(), double, ssto, getTotalSumSquares, ReturnStatement(return), ssto, getSumSquaredErrors, ssto]
org.apache.commons.math4.stat.regression:SimpleRegression:getInterceptStdErr:null#[IfStatement(if), hasIntercept, ReturnStatement(return), Double.NaN, ReturnStatement(return), FastMath, sqrt, getMeanSquareError, 1d, n, xbar, xbar, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlopeStdErr:null#[ReturnStatement(return), FastMath, sqrt, getMeanSquareError, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlopeConfidenceInterval:null#[ReturnStatement(return), getSlopeConfidenceInterval, 0.05d]
org.apache.commons.math4.stat.regression:SimpleRegression:getSlopeConfidenceInterval:double#[IfStatement(if), n, 3, ReturnStatement(return), Double.NaN, IfStatement(if), alpha, 1, alpha, 0, ThrowStatement(throw), new, OutOfRangeException, LocalizedFormats.SIGNIFICANCE_LEVEL, alpha, 0, 1, VariableDeclarationStatement(), TDistribution, distribution, new, TDistribution, n, 2, ReturnStatement(return), getSlopeStdErr, distribution, inverseCumulativeProbability, 1d, alpha, 2d]
org.apache.commons.math4.stat.regression:SimpleRegression:getSignificance:null#[IfStatement(if), n, 3, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), TDistribution, distribution, new, TDistribution, n, 2, ReturnStatement(return), 2d, 1.0, distribution, cumulativeProbability, FastMath, abs, getSlope, getSlopeStdErr]
org.apache.commons.math4.stat.regression:SimpleRegression:getIntercept:double#[IfStatement(if), hasIntercept, ReturnStatement(return), sumY, slope, sumX, n, ReturnStatement(return), 0.0]
org.apache.commons.math4.stat.regression:SimpleRegression:getRegressionSumSquares:double#[ReturnStatement(return), slope, slope, sumXX]
org.apache.commons.math4.stat.regression:SimpleRegression:regress:null#[IfStatement(if), hasIntercept, IfStatement(if), n, 3, ThrowStatement(throw), new, NoDataException, LocalizedFormats.NOT_ENOUGH_DATA_REGRESSION, IfStatement(if), FastMath, abs, sumXX, Precision.SAFE_MIN, VariableDeclarationStatement(), final, double, params, double, getIntercept, getSlope, VariableDeclarationStatement(), final, double, mse, getMeanSquareError, VariableDeclarationStatement(), final, double, _syy, sumYY, sumY, sumY, n, VariableDeclarationStatement(), final, double, vcv, double, mse, xbar, xbar, sumXX, 1.0, n, xbar, mse, sumXX, mse, sumXX, ReturnStatement(return), new, RegressionResults, params, double, vcv, true, n, 2, sumY, _syy, getSumSquaredErrors, true, false, VariableDeclarationStatement(), final, double, params, double, sumY, n, Double.NaN, VariableDeclarationStatement(), final, double, vcv, double, ybar, n, 1.0, Double.NaN, Double.NaN, ReturnStatement(return), new, RegressionResults, params, double, vcv, true, n, 1, sumY, sumYY, getSumSquaredErrors, true, false, IfStatement(if), n, 2, ThrowStatement(throw), new, NoDataException, LocalizedFormats.NOT_ENOUGH_DATA_REGRESSION, IfStatement(if), Double, isNaN, sumXX, VariableDeclarationStatement(), final, double, vcv, double, getMeanSquareError, sumXX, VariableDeclarationStatement(), final, double, params, double, sumXY, sumXX, ReturnStatement(return), new, RegressionResults, params, double, vcv, true, n, 1, sumY, sumYY, getSumSquaredErrors, false, false, VariableDeclarationStatement(), final, double, vcv, double, Double.NaN, VariableDeclarationStatement(), final, double, params, double, Double.NaN, ReturnStatement(return), new, RegressionResults, params, double, vcv, true, n, 1, Double.NaN, Double.NaN, Double.NaN, false, false]
org.apache.commons.math4.stat.regression:SimpleRegression:regress:int[]#[IfStatement(if), variablesToInclude, null, variablesToInclude.length, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, IfStatement(if), variablesToInclude.length, 2, variablesToInclude.length, 1, hasIntercept, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, variablesToInclude.length, 1, hasIntercept, 1, 2, IfStatement(if), hasIntercept, IfStatement(if), variablesToInclude.length, 2, IfStatement(if), variablesToInclude, 0, 1, ThrowStatement(throw), new, ModelSpecificationException, LocalizedFormats.NOT_INCREASING_SEQUENCE, IfStatement(if), variablesToInclude, 0, 0, ThrowStatement(throw), new, OutOfRangeException, variablesToInclude, 0, 0, 1, IfStatement(if), variablesToInclude, 1, 1, ThrowStatement(throw), new, OutOfRangeException, variablesToInclude, 0, 0, 1, ReturnStatement(return), regress, IfStatement(if), variablesToInclude, 0, 1, variablesToInclude, 0, 0, ThrowStatement(throw), new, OutOfRangeException, variablesToInclude, 0, 0, 1, VariableDeclarationStatement(), final, double, _mean, sumY, sumY, n, VariableDeclarationStatement(), final, double, _syy, sumYY, _mean, IfStatement(if), variablesToInclude, 0, 0, VariableDeclarationStatement(), final, double, vcv, double, sumYY, n, 1, n, VariableDeclarationStatement(), final, double, params, double, ybar, ReturnStatement(return), new, RegressionResults, params, double, vcv, true, n, 1, sumY, _syy, _mean, sumYY, true, false, IfStatement(if), variablesToInclude, 0, 1, VariableDeclarationStatement(), final, double, _sxx, sumXX, sumX, sumX, n, VariableDeclarationStatement(), final, double, _sxy, sumXY, sumX, sumY, n, VariableDeclarationStatement(), final, double, _sse, FastMath, max, 0d, _syy, _sxy, _sxy, _sxx, VariableDeclarationStatement(), final, double, _mse, _sse, n, 1, IfStatement(if), Double, isNaN, _sxx, VariableDeclarationStatement(), final, double, vcv, double, _mse, _sxx, VariableDeclarationStatement(), final, double, params, double, _sxy, _sxx, ReturnStatement(return), new, RegressionResults, params, double, vcv, true, n, 1, sumY, _syy, _sse, false, false, VariableDeclarationStatement(), final, double, vcv, double, Double.NaN, VariableDeclarationStatement(), final, double, params, double, Double.NaN, ReturnStatement(return), new, RegressionResults, params, double, vcv, true, n, 1, Double.NaN, Double.NaN, Double.NaN, false, false, IfStatement(if), variablesToInclude, 0, 0, ThrowStatement(throw), new, OutOfRangeException, variablesToInclude, 0, 0, 0, ReturnStatement(return), regress, ReturnStatement(return), null]
org.apache.commons.math4.stat:StatUtils:sum:double[]#[ReturnStatement(return), SUM, evaluate, values]
org.apache.commons.math4.stat:StatUtils:sum:double[]+int+int#[ReturnStatement(return), SUM, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:sumSq:double[]#[ReturnStatement(return), SUM_OF_SQUARES, evaluate, values]
org.apache.commons.math4.stat:StatUtils:sumSq:double[]+int+int#[ReturnStatement(return), SUM_OF_SQUARES, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:product:double[]#[ReturnStatement(return), PRODUCT, evaluate, values]
org.apache.commons.math4.stat:StatUtils:product:double[]+int+int#[ReturnStatement(return), PRODUCT, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:sumLog:double[]#[ReturnStatement(return), SUM_OF_LOGS, evaluate, values]
org.apache.commons.math4.stat:StatUtils:sumLog:double[]+int+int#[ReturnStatement(return), SUM_OF_LOGS, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:mean:double[]#[ReturnStatement(return), MEAN, evaluate, values]
org.apache.commons.math4.stat:StatUtils:mean:double[]+int+int#[ReturnStatement(return), MEAN, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:geometricMean:double[]#[ReturnStatement(return), GEOMETRIC_MEAN, evaluate, values]
org.apache.commons.math4.stat:StatUtils:geometricMean:double[]+int+int#[ReturnStatement(return), GEOMETRIC_MEAN, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:variance:double[]#[ReturnStatement(return), VARIANCE, evaluate, values]
org.apache.commons.math4.stat:StatUtils:variance:double[]+int+int#[ReturnStatement(return), VARIANCE, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:variance:double[]+double+int+int#[ReturnStatement(return), VARIANCE, evaluate, values, mean, begin, length]
org.apache.commons.math4.stat:StatUtils:variance:double[]+double#[ReturnStatement(return), VARIANCE, evaluate, values, mean]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]#[ReturnStatement(return), new, Variance, false, evaluate, values]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]+int+int#[ReturnStatement(return), new, Variance, false, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]+double+int+int#[ReturnStatement(return), new, Variance, false, evaluate, values, mean, begin, length]
org.apache.commons.math4.stat:StatUtils:populationVariance:double[]+double#[ReturnStatement(return), new, Variance, false, evaluate, values, mean]
org.apache.commons.math4.stat:StatUtils:max:double[]#[ReturnStatement(return), MAX, evaluate, values]
org.apache.commons.math4.stat:StatUtils:max:double[]+int+int#[ReturnStatement(return), MAX, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:min:double[]#[ReturnStatement(return), MIN, evaluate, values]
org.apache.commons.math4.stat:StatUtils:min:double[]+int+int#[ReturnStatement(return), MIN, evaluate, values, begin, length]
org.apache.commons.math4.stat:StatUtils:percentile:double[]+double#[ReturnStatement(return), PERCENTILE, evaluate, values, p]
org.apache.commons.math4.stat:StatUtils:percentile:double[]+int+int+double#[ReturnStatement(return), PERCENTILE, evaluate, values, begin, length, p]
org.apache.commons.math4.stat:StatUtils:sumDifference:double[]+double[]#[VariableDeclarationStatement(), int, n, sample1.length, IfStatement(if), n, sample2.length, ThrowStatement(throw), new, DimensionMismatchException, n, sample2.length, IfStatement(if), n, 0, ThrowStatement(throw), new, NoDataException, LocalizedFormats.INSUFFICIENT_DIMENSION, VariableDeclarationStatement(), double, result, 0, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), result, sample1, i, sample2, i, ReturnStatement(return), result]
org.apache.commons.math4.stat:StatUtils:meanDifference:double[]+double[]#[ReturnStatement(return), sumDifference, sample1, sample2, sample1.length]
org.apache.commons.math4.stat:StatUtils:varianceDifference:double[]+double[]+double#[VariableDeclarationStatement(), double, sum1, 0d, VariableDeclarationStatement(), double, sum2, 0d, VariableDeclarationStatement(), double, diff, 0d, VariableDeclarationStatement(), int, n, sample1.length, IfStatement(if), n, sample2.length, ThrowStatement(throw), new, DimensionMismatchException, n, sample2.length, IfStatement(if), n, 2, ThrowStatement(throw), new, NumberIsTooSmallException, n, 2, true, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), diff, sample1, i, sample2, i, ExpressionStatement(), sum1, diff, meanDifference, diff, meanDifference, ExpressionStatement(), sum2, diff, meanDifference, ReturnStatement(return), sum1, sum2, sum2, n, n, 1]
org.apache.commons.math4.stat:StatUtils:normalize:double[]#[VariableDeclarationStatement(), DescriptiveStatistics, stats, new, DescriptiveStatistics, ForStatement(for), int, i, 0, i, sample.length, i, ExpressionStatement(), stats, addValue, sample, i, VariableDeclarationStatement(), double, mean, stats, getMean, VariableDeclarationStatement(), double, standardDeviation, stats, getStandardDeviation, VariableDeclarationStatement(), double, standardizedSample, double, sample.length, ForStatement(for), int, i, 0, i, sample.length, i, ExpressionStatement(), standardizedSample, i, sample, i, mean, standardDeviation, ReturnStatement(return), standardizedSample]
org.apache.commons.math4.stat:StatUtils:mode:double[]#[IfStatement(if), sample, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, ReturnStatement(return), getMode, sample, 0, sample.length]
org.apache.commons.math4.stat:StatUtils:mode:double[]+int+int#[IfStatement(if), sample, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, IfStatement(if), begin, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.START_POSITION, Integer, valueOf, begin, IfStatement(if), length, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.LENGTH, Integer, valueOf, length, ReturnStatement(return), getMode, sample, begin, length]
org.apache.commons.math4.stat:StatUtils:getMode:double[]+int+int#[VariableDeclarationStatement(), Frequency, freq, new, Frequency, ForStatement(for), int, i, begin, i, begin, length, i, VariableDeclarationStatement(), final, double, value, values, i, IfStatement(if), Double, isNaN, value, ExpressionStatement(), freq, addValue, Double, valueOf, value, VariableDeclarationStatement(), List, Comparable, list, freq, getMode, VariableDeclarationStatement(), double, modes, double, list, size, VariableDeclarationStatement(), int, i, 0, EnhancedForStatement(for), Comparable, c, list, ExpressionStatement(), modes, i, Double, c, doubleValue, ReturnStatement(return), modes]
org.apache.commons.math4.transform:FastCosineTransformer:transform:double[]+TransformType#[IfStatement(if), type, TransformType.FORWARD, IfStatement(if), normalization, DctNormalization.ORTHOGONAL_DCT_I, VariableDeclarationStatement(), final, double, s, FastMath, sqrt, 2.0, f.length, 1, ReturnStatement(return), TransformUtils, scaleArray, fct, f, s, ReturnStatement(return), fct, f, VariableDeclarationStatement(), final, double, s2, 2.0, f.length, 1, VariableDeclarationStatement(), final, double, s1, IfStatement(if), normalization, DctNormalization.ORTHOGONAL_DCT_I, ExpressionStatement(), s1, FastMath, sqrt, s2, ExpressionStatement(), s1, s2, ReturnStatement(return), TransformUtils, scaleArray, fct, f, s1]
org.apache.commons.math4.transform:FastCosineTransformer:transform:UnivariateFunction+double+double+int+TransformType#[VariableDeclarationStatement(), final, double, data, FunctionUtils, sample, f, min, max, n, ReturnStatement(return), transform, data, type]
org.apache.commons.math4.transform:FastCosineTransformer:fct:double[]#[VariableDeclarationStatement(), final, double, transformed, double, f.length, VariableDeclarationStatement(), final, int, n, f.length, 1, IfStatement(if), ArithmeticUtils, isPowerOfTwo, n, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE, Integer, valueOf, f.length, IfStatement(if), n, 1, ExpressionStatement(), transformed, 0, 0.5, f, 0, f, 1, ExpressionStatement(), transformed, 1, 0.5, f, 0, f, 1, ReturnStatement(return), transformed, VariableDeclarationStatement(), final, double, x, double, n, ExpressionStatement(), x, 0, 0.5, f, 0, f, n, ExpressionStatement(), x, n, 1, f, n, 1, VariableDeclarationStatement(), double, t1, 0.5, f, 0, f, n, ForStatement(for), int, i, 1, i, n, 1, i, VariableDeclarationStatement(), final, double, a, 0.5, f, i, f, n, i, VariableDeclarationStatement(), final, double, b, FastMath, sin, i, FastMath.PI, n, f, i, f, n, i, VariableDeclarationStatement(), final, double, c, FastMath, cos, i, FastMath.PI, n, f, i, f, n, i, ExpressionStatement(), x, i, a, b, ExpressionStatement(), x, n, i, a, b, ExpressionStatement(), t1, c, VariableDeclarationStatement(), FastFourierTransformer, transformer, ExpressionStatement(), transformer, new, FastFourierTransformer, DftNormalization.STANDARD, VariableDeclarationStatement(), Complex, y, transformer, transform, x, TransformType.FORWARD, ExpressionStatement(), transformed, 0, y, 0, getReal, ExpressionStatement(), transformed, 1, t1, ForStatement(for), int, i, 1, i, n, 1, i, ExpressionStatement(), transformed, 2, i, y, i, getReal, ExpressionStatement(), transformed, 2, i, 1, transformed, 2, i, 1, y, i, getImaginary, ExpressionStatement(), transformed, n, y, n, 1, getReal, ReturnStatement(return), transformed]
org.apache.commons.math4.transform:FastFourierTransformer:transformInPlace:double[][]+DftNormalization+TransformType#[IfStatement(if), dataRI.length, 2, ThrowStatement(throw), new, DimensionMismatchException, dataRI.length, 2, VariableDeclarationStatement(), final, double, dataR, dataRI, 0, VariableDeclarationStatement(), final, double, dataI, dataRI, 1, IfStatement(if), dataR.length, dataI.length, ThrowStatement(throw), new, DimensionMismatchException, dataI.length, dataR.length, VariableDeclarationStatement(), final, int, n, dataR.length, IfStatement(if), ArithmeticUtils, isPowerOfTwo, n, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING, Integer, valueOf, n, IfStatement(if), n, 1, ReturnStatement(return), IfStatement(if), n, 2, VariableDeclarationStatement(), final, double, srcR0, dataR, 0, VariableDeclarationStatement(), final, double, srcI0, dataI, 0, VariableDeclarationStatement(), final, double, srcR1, dataR, 1, VariableDeclarationStatement(), final, double, srcI1, dataI, 1, ExpressionStatement(), dataR, 0, srcR0, srcR1, ExpressionStatement(), dataI, 0, srcI0, srcI1, ExpressionStatement(), dataR, 1, srcR0, srcR1, ExpressionStatement(), dataI, 1, srcI0, srcI1, ExpressionStatement(), normalizeTransformedData, dataRI, normalization, type, ReturnStatement(return), ExpressionStatement(), bitReversalShuffle2, dataR, dataI, IfStatement(if), type, TransformType.INVERSE, ForStatement(for), int, i0, 0, i0, n, i0, 4, VariableDeclarationStatement(), final, int, i1, i0, 1, VariableDeclarationStatement(), final, int, i2, i0, 2, VariableDeclarationStatement(), final, int, i3, i0, 3, VariableDeclarationStatement(), final, double, srcR0, dataR, i0, VariableDeclarationStatement(), final, double, srcI0, dataI, i0, VariableDeclarationStatement(), final, double, srcR1, dataR, i2, VariableDeclarationStatement(), final, double, srcI1, dataI, i2, VariableDeclarationStatement(), final, double, srcR2, dataR, i1, VariableDeclarationStatement(), final, double, srcI2, dataI, i1, VariableDeclarationStatement(), final, double, srcR3, dataR, i3, VariableDeclarationStatement(), final, double, srcI3, dataI, i3, ExpressionStatement(), dataR, i0, srcR0, srcR1, srcR2, srcR3, ExpressionStatement(), dataI, i0, srcI0, srcI1, srcI2, srcI3, ExpressionStatement(), dataR, i1, srcR0, srcR2, srcI3, srcI1, ExpressionStatement(), dataI, i1, srcI0, srcI2, srcR1, srcR3, ExpressionStatement(), dataR, i2, srcR0, srcR1, srcR2, srcR3, ExpressionStatement(), dataI, i2, srcI0, srcI1, srcI2, srcI3, ExpressionStatement(), dataR, i3, srcR0, srcR2, srcI1, srcI3, ExpressionStatement(), dataI, i3, srcI0, srcI2, srcR3, srcR1, ForStatement(for), int, i0, 0, i0, n, i0, 4, VariableDeclarationStatement(), final, int, i1, i0, 1, VariableDeclarationStatement(), final, int, i2, i0, 2, VariableDeclarationStatement(), final, int, i3, i0, 3, VariableDeclarationStatement(), final, double, srcR0, dataR, i0, VariableDeclarationStatement(), final, double, srcI0, dataI, i0, VariableDeclarationStatement(), final, double, srcR1, dataR, i2, VariableDeclarationStatement(), final, double, srcI1, dataI, i2, VariableDeclarationStatement(), final, double, srcR2, dataR, i1, VariableDeclarationStatement(), final, double, srcI2, dataI, i1, VariableDeclarationStatement(), final, double, srcR3, dataR, i3, VariableDeclarationStatement(), final, double, srcI3, dataI, i3, ExpressionStatement(), dataR, i0, srcR0, srcR1, srcR2, srcR3, ExpressionStatement(), dataI, i0, srcI0, srcI1, srcI2, srcI3, ExpressionStatement(), dataR, i1, srcR0, srcR2, srcI1, srcI3, ExpressionStatement(), dataI, i1, srcI0, srcI2, srcR3, srcR1, ExpressionStatement(), dataR, i2, srcR0, srcR1, srcR2, srcR3, ExpressionStatement(), dataI, i2, srcI0, srcI1, srcI2, srcI3, ExpressionStatement(), dataR, i3, srcR0, srcR2, srcI3, srcI1, ExpressionStatement(), dataI, i3, srcI0, srcI2, srcR1, srcR3, VariableDeclarationStatement(), int, lastN0, 4, VariableDeclarationStatement(), int, lastLogN0, 2, WhileStatement(while), lastN0, n, VariableDeclarationStatement(), int, n0, lastN0, 1, VariableDeclarationStatement(), int, logN0, lastLogN0, 1, VariableDeclarationStatement(), double, wSubN0R, W_SUB_N_R, logN0, VariableDeclarationStatement(), double, wSubN0I, W_SUB_N_I, logN0, IfStatement(if), type, TransformType.INVERSE, ExpressionStatement(), wSubN0I, wSubN0I, ForStatement(for), int, destEvenStartIndex, 0, destEvenStartIndex, n, destEvenStartIndex, n0, VariableDeclarationStatement(), int, destOddStartIndex, destEvenStartIndex, lastN0, VariableDeclarationStatement(), double, wSubN0ToRR, 1, VariableDeclarationStatement(), double, wSubN0ToRI, 0, ForStatement(for), int, r, 0, r, lastN0, r, VariableDeclarationStatement(), double, grR, dataR, destEvenStartIndex, r, VariableDeclarationStatement(), double, grI, dataI, destEvenStartIndex, r, VariableDeclarationStatement(), double, hrR, dataR, destOddStartIndex, r, VariableDeclarationStatement(), double, hrI, dataI, destOddStartIndex, r, ExpressionStatement(), dataR, destEvenStartIndex, r, grR, wSubN0ToRR, hrR, wSubN0ToRI, hrI, ExpressionStatement(), dataI, destEvenStartIndex, r, grI, wSubN0ToRR, hrI, wSubN0ToRI, hrR, ExpressionStatement(), dataR, destOddStartIndex, r, grR, wSubN0ToRR, hrR, wSubN0ToRI, hrI, ExpressionStatement(), dataI, destOddStartIndex, r, grI, wSubN0ToRR, hrI, wSubN0ToRI, hrR, VariableDeclarationStatement(), double, nextWsubN0ToRR, wSubN0ToRR, wSubN0R, wSubN0ToRI, wSubN0I, VariableDeclarationStatement(), double, nextWsubN0ToRI, wSubN0ToRR, wSubN0I, wSubN0ToRI, wSubN0R, ExpressionStatement(), wSubN0ToRR, nextWsubN0ToRR, ExpressionStatement(), wSubN0ToRI, nextWsubN0ToRI, ExpressionStatement(), lastN0, n0, ExpressionStatement(), lastLogN0, logN0, ExpressionStatement(), normalizeTransformedData, dataRI, normalization, type]
org.apache.commons.math4.transform:FastFourierTransformer:transform:double[]+TransformType#[VariableDeclarationStatement(), final, double, dataRI, double, MathArrays, copyOf, f, f.length, double, f.length, ExpressionStatement(), transformInPlace, dataRI, normalization, type, ReturnStatement(return), TransformUtils, createComplexArray, dataRI]
org.apache.commons.math4.transform:FastFourierTransformer:transform:UnivariateFunction+double+double+int+TransformType#[VariableDeclarationStatement(), final, double, data, FunctionUtils, sample, f, min, max, n, ReturnStatement(return), transform, data, type]
org.apache.commons.math4.transform:FastFourierTransformer:transform:Complex[]+TransformType#[VariableDeclarationStatement(), final, double, dataRI, TransformUtils, createRealImaginaryArray, f, ExpressionStatement(), transformInPlace, dataRI, normalization, type, ReturnStatement(return), TransformUtils, createComplexArray, dataRI]
org.apache.commons.math4.transform:FastFourierTransformer:mdfft:Object+TransformType#[VariableDeclarationStatement(), MultiDimensionalComplexMatrix, mdcm, MultiDimensionalComplexMatrix, new, MultiDimensionalComplexMatrix, mdca, clone, VariableDeclarationStatement(), int, dimensionSize, mdcm, getDimensionSizes, ForStatement(for), int, i, 0, i, dimensionSize.length, i, ExpressionStatement(), mdfft, mdcm, type, i, int, 0, ReturnStatement(return), mdcm, getArray]
org.apache.commons.math4.transform:FastFourierTransformer:mdfft:MultiDimensionalComplexMatrix+TransformType+int+int[]#[VariableDeclarationStatement(), int, dimensionSize, mdcm, getDimensionSizes, IfStatement(if), subVector.length, dimensionSize.length, VariableDeclarationStatement(), Complex, temp, Complex, dimensionSize, d, ForStatement(for), int, i, 0, i, dimensionSize, d, i, ExpressionStatement(), subVector, d, i, ExpressionStatement(), temp, i, mdcm, get, subVector, ExpressionStatement(), temp, transform, temp, type, ForStatement(for), int, i, 0, i, dimensionSize, d, i, ExpressionStatement(), subVector, d, i, ExpressionStatement(), mdcm, set, temp, i, subVector, VariableDeclarationStatement(), int, vector, int, subVector.length, 1, ExpressionStatement(), System, arraycopy, subVector, 0, vector, 0, subVector.length, IfStatement(if), subVector.length, d, ExpressionStatement(), vector, d, 0, ExpressionStatement(), mdfft, mdcm, type, d, vector, ForStatement(for), int, i, 0, i, dimensionSize, subVector.length, i, ExpressionStatement(), vector, subVector.length, i, ExpressionStatement(), mdfft, mdcm, type, d, vector]
org.apache.commons.math4.transform:FastHadamardTransformer:transform:double[]+TransformType#[IfStatement(if), type, TransformType.FORWARD, ReturnStatement(return), fht, f, ReturnStatement(return), TransformUtils, scaleArray, fht, f, 1.0, f.length]
org.apache.commons.math4.transform:FastHadamardTransformer:transform:UnivariateFunction+double+double+int+TransformType#[ReturnStatement(return), transform, FunctionUtils, sample, f, min, max, n, type]
org.apache.commons.math4.transform:FastHadamardTransformer:transform:int[]#[ReturnStatement(return), fht, f]
org.apache.commons.math4.transform:FastHadamardTransformer:fht:double[]#[VariableDeclarationStatement(), final, int, n, x.length, VariableDeclarationStatement(), final, int, halfN, n, 2, IfStatement(if), ArithmeticUtils, isPowerOfTwo, n, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO, Integer, valueOf, n, VariableDeclarationStatement(), double, yPrevious, double, n, VariableDeclarationStatement(), double, yCurrent, x, clone, ForStatement(for), int, j, 1, j, n, j, 1, VariableDeclarationStatement(), final, double, yTmp, yCurrent, ExpressionStatement(), yCurrent, yPrevious, ExpressionStatement(), yPrevious, yTmp, ForStatement(for), int, i, 0, i, halfN, i, VariableDeclarationStatement(), final, int, twoI, 2, i, ExpressionStatement(), yCurrent, i, yPrevious, twoI, yPrevious, twoI, 1, ForStatement(for), int, i, halfN, i, n, i, VariableDeclarationStatement(), final, int, twoI, 2, i, ExpressionStatement(), yCurrent, i, yPrevious, twoI, n, yPrevious, twoI, n, 1, ReturnStatement(return), yCurrent]
org.apache.commons.math4.transform:FastHadamardTransformer:fht:int[]#[VariableDeclarationStatement(), final, int, n, x.length, VariableDeclarationStatement(), final, int, halfN, n, 2, IfStatement(if), ArithmeticUtils, isPowerOfTwo, n, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO, Integer, valueOf, n, VariableDeclarationStatement(), int, yPrevious, int, n, VariableDeclarationStatement(), int, yCurrent, x, clone, ForStatement(for), int, j, 1, j, n, j, 1, VariableDeclarationStatement(), final, int, yTmp, yCurrent, ExpressionStatement(), yCurrent, yPrevious, ExpressionStatement(), yPrevious, yTmp, ForStatement(for), int, i, 0, i, halfN, i, VariableDeclarationStatement(), final, int, twoI, 2, i, ExpressionStatement(), yCurrent, i, yPrevious, twoI, yPrevious, twoI, 1, ForStatement(for), int, i, halfN, i, n, i, VariableDeclarationStatement(), final, int, twoI, 2, i, ExpressionStatement(), yCurrent, i, yPrevious, twoI, n, yPrevious, twoI, n, 1, ReturnStatement(return), yCurrent]
org.apache.commons.math4.transform:FastSineTransformer:transform:double[]+TransformType#[IfStatement(if), normalization, DstNormalization.ORTHOGONAL_DST_I, VariableDeclarationStatement(), final, double, s, FastMath, sqrt, 2.0, f.length, ReturnStatement(return), TransformUtils, scaleArray, fst, f, s, IfStatement(if), type, TransformType.FORWARD, ReturnStatement(return), fst, f, VariableDeclarationStatement(), final, double, s, 2.0, f.length, ReturnStatement(return), TransformUtils, scaleArray, fst, f, s]
org.apache.commons.math4.transform:FastSineTransformer:transform:UnivariateFunction+double+double+int+TransformType#[VariableDeclarationStatement(), final, double, data, FunctionUtils, sample, f, min, max, n, ExpressionStatement(), data, 0, 0.0, ReturnStatement(return), transform, data, type]
org.apache.commons.math4.transform:FastSineTransformer:fst:double[]#[VariableDeclarationStatement(), final, double, transformed, double, f.length, IfStatement(if), ArithmeticUtils, isPowerOfTwo, f.length, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING, Integer, valueOf, f.length, IfStatement(if), f, 0, 0.0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.FIRST_ELEMENT_NOT_ZERO, Double, valueOf, f, 0, VariableDeclarationStatement(), final, int, n, f.length, IfStatement(if), n, 1, ExpressionStatement(), transformed, 0, 0.0, ReturnStatement(return), transformed, VariableDeclarationStatement(), final, double, x, double, n, ExpressionStatement(), x, 0, 0.0, ExpressionStatement(), x, n, 1, 2.0, f, n, 1, ForStatement(for), int, i, 1, i, n, 1, i, VariableDeclarationStatement(), final, double, a, FastMath, sin, i, FastMath.PI, n, f, i, f, n, i, VariableDeclarationStatement(), final, double, b, 0.5, f, i, f, n, i, ExpressionStatement(), x, i, a, b, ExpressionStatement(), x, n, i, a, b, VariableDeclarationStatement(), FastFourierTransformer, transformer, ExpressionStatement(), transformer, new, FastFourierTransformer, DftNormalization.STANDARD, VariableDeclarationStatement(), Complex, y, transformer, transform, x, TransformType.FORWARD, ExpressionStatement(), transformed, 0, 0.0, ExpressionStatement(), transformed, 1, 0.5, y, 0, getReal, ForStatement(for), int, i, 1, i, n, 1, i, ExpressionStatement(), transformed, 2, i, y, i, getImaginary, ExpressionStatement(), transformed, 2, i, 1, y, i, getReal, transformed, 2, i, 1, ReturnStatement(return), transformed]
org.apache.commons.math4.transform:TransformUtils:scaleArray:double[]+double#[ForStatement(for), int, i, 0, i, f.length, i, ExpressionStatement(), f, i, d, ReturnStatement(return), f]
org.apache.commons.math4.transform:TransformUtils:scaleArray:Complex[]+double#[ForStatement(for), int, i, 0, i, f.length, i, ExpressionStatement(), f, i, new, Complex, d, f, i, getReal, d, f, i, getImaginary, ReturnStatement(return), f]
org.apache.commons.math4.transform:TransformUtils:createRealImaginaryArray:Complex[]#[VariableDeclarationStatement(), final, double, dataRI, double, 2, dataC.length, VariableDeclarationStatement(), final, double, dataR, dataRI, 0, VariableDeclarationStatement(), final, double, dataI, dataRI, 1, ForStatement(for), int, i, 0, i, dataC.length, i, VariableDeclarationStatement(), final, Complex, c, dataC, i, ExpressionStatement(), dataR, i, c, getReal, ExpressionStatement(), dataI, i, c, getImaginary, ReturnStatement(return), dataRI]
org.apache.commons.math4.transform:TransformUtils:createComplexArray:double[][]#[IfStatement(if), dataRI.length, 2, ThrowStatement(throw), new, DimensionMismatchException, dataRI.length, 2, VariableDeclarationStatement(), final, double, dataR, dataRI, 0, VariableDeclarationStatement(), final, double, dataI, dataRI, 1, IfStatement(if), dataR.length, dataI.length, ThrowStatement(throw), new, DimensionMismatchException, dataI.length, dataR.length, VariableDeclarationStatement(), final, int, n, dataR.length, VariableDeclarationStatement(), final, Complex, c, Complex, n, ForStatement(for), int, i, 0, i, n, i, ExpressionStatement(), c, i, new, Complex, dataR, i, dataI, i, ReturnStatement(return), c]
org.apache.commons.math4.transform:TransformUtils:exactLog2:int#[VariableDeclarationStatement(), int, index, Arrays, binarySearch, TransformUtils.POWERS_OF_TWO, n, IfStatement(if), index, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING, Integer, valueOf, n, ReturnStatement(return), index]
org.apache.commons.math4.util:ArithmeticUtils:addAndCheck:int+int#[VariableDeclarationStatement(), long, s, long, x, long, y, IfStatement(if), s, Integer.MIN_VALUE, s, Integer.MAX_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, x, y, ReturnStatement(return), int, s]
org.apache.commons.math4.util:ArithmeticUtils:addAndCheck:long+long#[ReturnStatement(return), addAndCheck, a, b, LocalizedFormats.OVERFLOW_IN_ADDITION]
org.apache.commons.math4.util:ArithmeticUtils:gcd:int+int#[VariableDeclarationStatement(), int, a, p, VariableDeclarationStatement(), int, b, q, IfStatement(if), a, 0, b, 0, IfStatement(if), a, Integer.MIN_VALUE, b, Integer.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q, ReturnStatement(return), FastMath, abs, a, b, VariableDeclarationStatement(), long, al, a, VariableDeclarationStatement(), long, bl, b, VariableDeclarationStatement(), boolean, useLong, false, IfStatement(if), a, 0, IfStatement(if), Integer.MIN_VALUE, a, ExpressionStatement(), useLong, true, ExpressionStatement(), a, a, ExpressionStatement(), al, al, IfStatement(if), b, 0, IfStatement(if), Integer.MIN_VALUE, b, ExpressionStatement(), useLong, true, ExpressionStatement(), b, b, ExpressionStatement(), bl, bl, IfStatement(if), useLong, IfStatement(if), al, bl, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q, VariableDeclarationStatement(), long, blbu, bl, ExpressionStatement(), bl, al, ExpressionStatement(), al, blbu, al, IfStatement(if), al, 0, IfStatement(if), bl, Integer.MAX_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q, ReturnStatement(return), int, bl, ExpressionStatement(), blbu, bl, ExpressionStatement(), b, int, al, ExpressionStatement(), a, int, blbu, al, ReturnStatement(return), gcdPositive, a, b]
org.apache.commons.math4.util:ArithmeticUtils:gcdPositive:int+int#[IfStatement(if), a, 0, ReturnStatement(return), b, IfStatement(if), b, 0, ReturnStatement(return), a, VariableDeclarationStatement(), final, int, aTwos, Integer, numberOfTrailingZeros, a, ExpressionStatement(), a, aTwos, VariableDeclarationStatement(), final, int, bTwos, Integer, numberOfTrailingZeros, b, ExpressionStatement(), b, bTwos, VariableDeclarationStatement(), final, int, shift, FastMath, min, aTwos, bTwos, WhileStatement(while), a, b, VariableDeclarationStatement(), final, int, delta, a, b, ExpressionStatement(), b, Math, min, a, b, ExpressionStatement(), a, Math, abs, delta, ExpressionStatement(), a, Integer, numberOfTrailingZeros, a, ReturnStatement(return), a, shift]
org.apache.commons.math4.util:ArithmeticUtils:gcd:long+long#[VariableDeclarationStatement(), long, u, p, VariableDeclarationStatement(), long, v, q, IfStatement(if), u, 0, v, 0, IfStatement(if), u, Long.MIN_VALUE, v, Long.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q, ReturnStatement(return), FastMath, abs, u, FastMath, abs, v, IfStatement(if), u, 0, ExpressionStatement(), u, u, IfStatement(if), v, 0, ExpressionStatement(), v, v, VariableDeclarationStatement(), int, k, 0, WhileStatement(while), u, 1, 0, v, 1, 0, k, 63, ExpressionStatement(), u, 2, ExpressionStatement(), v, 2, ExpressionStatement(), k, IfStatement(if), k, 63, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q, VariableDeclarationStatement(), long, t, u, 1, 1, v, u, 2, DoStatement(do), WhileStatement(while), t, 1, 0, ExpressionStatement(), t, 2, IfStatement(if), t, 0, ExpressionStatement(), u, t, ExpressionStatement(), v, t, ExpressionStatement(), t, v, u, 2, t, 0, ReturnStatement(return), u, 1L, k]
org.apache.commons.math4.util:ArithmeticUtils:lcm:int+int#[IfStatement(if), a, 0, b, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), int, lcm, FastMath, abs, ArithmeticUtils, mulAndCheck, a, gcd, a, b, b, IfStatement(if), lcm, Integer.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b, ReturnStatement(return), lcm]
org.apache.commons.math4.util:ArithmeticUtils:lcm:long+long#[IfStatement(if), a, 0, b, 0, ReturnStatement(return), 0, VariableDeclarationStatement(), long, lcm, FastMath, abs, ArithmeticUtils, mulAndCheck, a, gcd, a, b, b, IfStatement(if), lcm, Long.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b, ReturnStatement(return), lcm]
org.apache.commons.math4.util:ArithmeticUtils:mulAndCheck:int+int#[VariableDeclarationStatement(), long, m, long, x, long, y, IfStatement(if), m, Integer.MIN_VALUE, m, Integer.MAX_VALUE, ThrowStatement(throw), new, MathArithmeticException, ReturnStatement(return), int, m]
org.apache.commons.math4.util:ArithmeticUtils:mulAndCheck:long+long#[VariableDeclarationStatement(), long, ret, IfStatement(if), a, b, ExpressionStatement(), ret, mulAndCheck, b, a, IfStatement(if), a, 0, IfStatement(if), b, 0, IfStatement(if), a, Long.MAX_VALUE, b, ExpressionStatement(), ret, a, b, ThrowStatement(throw), new, MathArithmeticException, IfStatement(if), b, 0, IfStatement(if), Long.MIN_VALUE, b, a, ExpressionStatement(), ret, a, b, ThrowStatement(throw), new, MathArithmeticException, ExpressionStatement(), ret, 0, IfStatement(if), a, 0, IfStatement(if), a, Long.MAX_VALUE, b, ExpressionStatement(), ret, a, b, ThrowStatement(throw), new, MathArithmeticException, ExpressionStatement(), ret, 0, ReturnStatement(return), ret]
org.apache.commons.math4.util:ArithmeticUtils:subAndCheck:int+int#[VariableDeclarationStatement(), long, s, long, x, long, y, IfStatement(if), s, Integer.MIN_VALUE, s, Integer.MAX_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y, ReturnStatement(return), int, s]
org.apache.commons.math4.util:ArithmeticUtils:subAndCheck:long+long#[VariableDeclarationStatement(), long, ret, IfStatement(if), b, Long.MIN_VALUE, IfStatement(if), a, 0, ExpressionStatement(), ret, a, b, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, a, b, ExpressionStatement(), ret, addAndCheck, a, b, LocalizedFormats.OVERFLOW_IN_ADDITION, ReturnStatement(return), ret]
org.apache.commons.math4.util:ArithmeticUtils:pow:int+int#[IfStatement(if), e, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.EXPONENT, e, TryStatement(try), VariableDeclarationStatement(), int, exp, e, VariableDeclarationStatement(), int, result, 1, VariableDeclarationStatement(), int, k2p, k, WhileStatement(while), true, IfStatement(if), exp, 0x1, 0, ExpressionStatement(), result, mulAndCheck, result, k2p, ExpressionStatement(), exp, 1, IfStatement(if), exp, 0, BreakStatement(break), ExpressionStatement(), k2p, mulAndCheck, k2p, k2p, ReturnStatement(return), result, catch, MathArithmeticException, mae, ExpressionStatement(), mae, getContext, addMessage, LocalizedFormats.OVERFLOW, ExpressionStatement(), mae, getContext, addMessage, LocalizedFormats.BASE, k, ExpressionStatement(), mae, getContext, addMessage, LocalizedFormats.EXPONENT, e, ThrowStatement(throw), mae]
org.apache.commons.math4.util:ArithmeticUtils:pow:long+int#[IfStatement(if), e, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.EXPONENT, e, TryStatement(try), VariableDeclarationStatement(), int, exp, e, VariableDeclarationStatement(), long, result, 1, VariableDeclarationStatement(), long, k2p, k, WhileStatement(while), true, IfStatement(if), exp, 0x1, 0, ExpressionStatement(), result, mulAndCheck, result, k2p, ExpressionStatement(), exp, 1, IfStatement(if), exp, 0, BreakStatement(break), ExpressionStatement(), k2p, mulAndCheck, k2p, k2p, ReturnStatement(return), result, catch, MathArithmeticException, mae, ExpressionStatement(), mae, getContext, addMessage, LocalizedFormats.OVERFLOW, ExpressionStatement(), mae, getContext, addMessage, LocalizedFormats.BASE, k, ExpressionStatement(), mae, getContext, addMessage, LocalizedFormats.EXPONENT, e, ThrowStatement(throw), mae]
org.apache.commons.math4.util:ArithmeticUtils:pow:BigInteger+int#[IfStatement(if), e, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.EXPONENT, e, ReturnStatement(return), k, pow, e]
org.apache.commons.math4.util:ArithmeticUtils:pow:BigInteger+long#[IfStatement(if), e, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.EXPONENT, e, VariableDeclarationStatement(), BigInteger, result, BigInteger.ONE, VariableDeclarationStatement(), BigInteger, k2p, k, WhileStatement(while), e, 0, IfStatement(if), e, 0x1, 0, ExpressionStatement(), result, result, multiply, k2p, ExpressionStatement(), k2p, k2p, multiply, k2p, ExpressionStatement(), e, 1, ReturnStatement(return), result]
org.apache.commons.math4.util:ArithmeticUtils:pow:BigInteger+BigInteger#[IfStatement(if), e, compareTo, BigInteger.ZERO, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.EXPONENT, e, VariableDeclarationStatement(), BigInteger, result, BigInteger.ONE, VariableDeclarationStatement(), BigInteger, k2p, k, WhileStatement(while), BigInteger.ZERO, equals, e, IfStatement(if), e, testBit, 0, ExpressionStatement(), result, result, multiply, k2p, ExpressionStatement(), k2p, k2p, multiply, k2p, ExpressionStatement(), e, e, shiftRight, 1, ReturnStatement(return), result]
org.apache.commons.math4.util:ArithmeticUtils:addAndCheck:long+long+Localizable#[VariableDeclarationStatement(), final, long, result, a, b, IfStatement(if), a, b, 0, a, result, 0, ThrowStatement(throw), new, MathArithmeticException, pattern, a, b, ReturnStatement(return), result]
org.apache.commons.math4.util:ArithmeticUtils:isPowerOfTwo:long#[ReturnStatement(return), n, 0, n, n, 1, 0]
org.apache.commons.math4.util:ArithmeticUtils:remainderUnsigned:int+int#[IfStatement(if), divisor, 0, IfStatement(if), dividend, 0, ReturnStatement(return), dividend, divisor, VariableDeclarationStatement(), int, q, dividend, 1, divisor, 1, ExpressionStatement(), dividend, q, divisor, IfStatement(if), dividend, 0, dividend, divisor, ExpressionStatement(), dividend, divisor, ReturnStatement(return), dividend, ReturnStatement(return), dividend, 0, dividend, divisor, dividend, dividend, divisor]
org.apache.commons.math4.util:ArithmeticUtils:remainderUnsigned:long+long#[IfStatement(if), divisor, 0L, IfStatement(if), dividend, 0L, ReturnStatement(return), dividend, divisor, VariableDeclarationStatement(), long, q, dividend, 1, divisor, 1, ExpressionStatement(), dividend, q, divisor, IfStatement(if), dividend, 0L, dividend, divisor, ExpressionStatement(), dividend, divisor, ReturnStatement(return), dividend, ReturnStatement(return), dividend, 0L, dividend, divisor, dividend, dividend, divisor]
org.apache.commons.math4.util:ArithmeticUtils:divideUnsigned:int+int#[IfStatement(if), divisor, 0, IfStatement(if), dividend, 0, ReturnStatement(return), dividend, divisor, VariableDeclarationStatement(), int, q, dividend, 1, divisor, 1, ExpressionStatement(), dividend, q, divisor, IfStatement(if), dividend, 0L, dividend, divisor, ExpressionStatement(), q, ReturnStatement(return), q, ReturnStatement(return), dividend, 0, dividend, divisor, 0, 1]
org.apache.commons.math4.util:ArithmeticUtils:divideUnsigned:long+long#[IfStatement(if), divisor, 0L, IfStatement(if), dividend, 0L, ReturnStatement(return), dividend, divisor, VariableDeclarationStatement(), long, q, dividend, 1, divisor, 1, ExpressionStatement(), dividend, q, divisor, IfStatement(if), dividend, 0L, dividend, divisor, ExpressionStatement(), q, ReturnStatement(return), q, ReturnStatement(return), dividend, 0L, dividend, divisor, 0L, 1L]
org.apache.commons.math4.util:BigReal:getRoundingMode:null#[ReturnStatement(return), roundingMode]
org.apache.commons.math4.util:BigReal:setRoundingMode:RoundingMode#[ExpressionStatement(), this, roundingMode, roundingMode]
org.apache.commons.math4.util:BigReal:getScale:null#[ReturnStatement(return), scale]
org.apache.commons.math4.util:BigReal:setScale:int#[ExpressionStatement(), this, scale, scale]
org.apache.commons.math4.util:BigReal:add:BigReal#[ReturnStatement(return), new, BigReal, d, add, a.d]
org.apache.commons.math4.util:BigReal:subtract:BigReal#[ReturnStatement(return), new, BigReal, d, subtract, a.d]
org.apache.commons.math4.util:BigReal:negate:null#[ReturnStatement(return), new, BigReal, d, negate]
org.apache.commons.math4.util:BigReal:divide:BigReal#[TryStatement(try), ReturnStatement(return), new, BigReal, d, divide, a.d, scale, roundingMode, catch, ArithmeticException, e, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NOT_ALLOWED]
org.apache.commons.math4.util:BigReal:reciprocal:null#[TryStatement(try), ReturnStatement(return), new, BigReal, BigDecimal.ONE, divide, d, scale, roundingMode, catch, ArithmeticException, e, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_NOT_ALLOWED]
org.apache.commons.math4.util:BigReal:multiply:BigReal#[ReturnStatement(return), new, BigReal, d, multiply, a.d]
org.apache.commons.math4.util:BigReal:multiply:int#[ReturnStatement(return), new, BigReal, d, multiply, new, BigDecimal, n]
org.apache.commons.math4.util:BigReal:compareTo:BigReal#[ReturnStatement(return), d, compareTo, a.d]
org.apache.commons.math4.util:BigReal:doubleValue:null#[ReturnStatement(return), d, doubleValue]
org.apache.commons.math4.util:BigReal:bigDecimalValue:null#[ReturnStatement(return), d]
org.apache.commons.math4.util:BigReal:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, BigReal, ReturnStatement(return), d, equals, BigReal, other, d, ReturnStatement(return), false]
org.apache.commons.math4.util:BigReal:hashCode:null#[ReturnStatement(return), d, hashCode]
org.apache.commons.math4.util:BigReal:getField:null#[ReturnStatement(return), BigRealField, getInstance]
org.apache.commons.math4.util:BigRealField:getInstance:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.util:BigRealField:getOne:null#[ReturnStatement(return), BigReal.ONE]
org.apache.commons.math4.util:BigRealField:getZero:null#[ReturnStatement(return), BigReal.ZERO]
org.apache.commons.math4.util:BigRealField:getRuntimeClass:null#[ReturnStatement(return), BigReal]
org.apache.commons.math4.util:BigRealField:readResolve:null#[ReturnStatement(return), LazyHolder.INSTANCE]
org.apache.commons.math4.util:CentralPivotingStrategy:pivotIndex:double[]+int+int#[ExpressionStatement(), MathArrays, verifyValues, work, begin, end, begin, ReturnStatement(return), begin, end, begin, 2]
org.apache.commons.math4.util:Combinations:getN:null#[ReturnStatement(return), n]
org.apache.commons.math4.util:Combinations:getK:null#[ReturnStatement(return), k]
org.apache.commons.math4.util:Combinations:iterator:null#[IfStatement(if), k, 0, k, n, ReturnStatement(return), new, SingletonIterator, MathArrays, natural, k, SwitchStatement(switch), iterationOrder, SwitchCase(case), LEXICOGRAPHIC, ReturnStatement(return), new, LexicographicIterator, n, k, SwitchCase(default), ThrowStatement(throw), new, MathInternalError]
org.apache.commons.math4.util:Combinations:comparator:null#[ReturnStatement(return), new, LexicographicComparator, n, k]
org.apache.commons.math4.util:CombinatoricsUtils:binomialCoefficient:int+int#[ExpressionStatement(), CombinatoricsUtils, checkBinomial, n, k, IfStatement(if), n, k, k, 0, ReturnStatement(return), 1, IfStatement(if), k, 1, k, n, 1, ReturnStatement(return), n, IfStatement(if), k, n, 2, ReturnStatement(return), binomialCoefficient, n, n, k, VariableDeclarationStatement(), long, result, 1, IfStatement(if), n, 61, VariableDeclarationStatement(), int, i, n, k, 1, ForStatement(for), int, j, 1, j, k, j, ExpressionStatement(), result, result, i, j, ExpressionStatement(), i, IfStatement(if), n, 66, VariableDeclarationStatement(), int, i, n, k, 1, ForStatement(for), int, j, 1, j, k, j, VariableDeclarationStatement(), final, long, d, ArithmeticUtils, gcd, i, j, ExpressionStatement(), result, result, j, d, i, d, ExpressionStatement(), i, VariableDeclarationStatement(), int, i, n, k, 1, ForStatement(for), int, j, 1, j, k, j, VariableDeclarationStatement(), final, long, d, ArithmeticUtils, gcd, i, j, ExpressionStatement(), result, ArithmeticUtils, mulAndCheck, result, j, d, i, d, ExpressionStatement(), i, ReturnStatement(return), result]
org.apache.commons.math4.util:CombinatoricsUtils:binomialCoefficientDouble:int+int#[ExpressionStatement(), CombinatoricsUtils, checkBinomial, n, k, IfStatement(if), n, k, k, 0, ReturnStatement(return), 1d, IfStatement(if), k, 1, k, n, 1, ReturnStatement(return), n, IfStatement(if), k, n, 2, ReturnStatement(return), binomialCoefficientDouble, n, n, k, IfStatement(if), n, 67, ReturnStatement(return), binomialCoefficient, n, k, VariableDeclarationStatement(), double, result, 1d, ForStatement(for), int, i, 1, i, k, i, ExpressionStatement(), result, double, n, k, i, double, i, ReturnStatement(return), FastMath, floor, result, 0.5]
org.apache.commons.math4.util:CombinatoricsUtils:binomialCoefficientLog:int+int#[ExpressionStatement(), CombinatoricsUtils, checkBinomial, n, k, IfStatement(if), n, k, k, 0, ReturnStatement(return), 0, IfStatement(if), k, 1, k, n, 1, ReturnStatement(return), FastMath, log, n, IfStatement(if), n, 67, ReturnStatement(return), FastMath, log, binomialCoefficient, n, k, IfStatement(if), n, 1030, ReturnStatement(return), FastMath, log, binomialCoefficientDouble, n, k, IfStatement(if), k, n, 2, ReturnStatement(return), binomialCoefficientLog, n, n, k, VariableDeclarationStatement(), double, logSum, 0, ForStatement(for), int, i, n, k, 1, i, n, i, ExpressionStatement(), logSum, FastMath, log, i, ForStatement(for), int, i, 2, i, k, i, ExpressionStatement(), logSum, FastMath, log, i, ReturnStatement(return), logSum]
org.apache.commons.math4.util:CombinatoricsUtils:factorial:int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n, IfStatement(if), n, 20, ThrowStatement(throw), new, MathArithmeticException, ReturnStatement(return), FACTORIALS, n]
org.apache.commons.math4.util:CombinatoricsUtils:factorialDouble:int#[IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n, IfStatement(if), n, 21, ReturnStatement(return), FACTORIALS, n, ReturnStatement(return), FastMath, floor, FastMath, exp, CombinatoricsUtils, factorialLog, n, 0.5]
org.apache.commons.math4.util:CombinatoricsUtils:factorialLog:int#[ReturnStatement(return), FACTORIAL_LOG_NO_CACHE, value, n]
org.apache.commons.math4.util:CombinatoricsUtils:stirlingS2:int+int#[IfStatement(if), k, 0, ThrowStatement(throw), new, NotPositiveException, k, IfStatement(if), k, n, ThrowStatement(throw), new, NumberIsTooLargeException, k, n, true, VariableDeclarationStatement(), long, stirlingS2, STIRLING_S2, get, IfStatement(if), stirlingS2, null, VariableDeclarationStatement(), final, int, maxIndex, 26, ExpressionStatement(), stirlingS2, long, maxIndex, ExpressionStatement(), stirlingS2, 0, long, 1l, ForStatement(for), int, i, 1, i, stirlingS2.length, i, ExpressionStatement(), stirlingS2, i, long, i, 1, ExpressionStatement(), stirlingS2, i, 0, 0, ExpressionStatement(), stirlingS2, i, 1, 1, ExpressionStatement(), stirlingS2, i, i, 1, ForStatement(for), int, j, 2, j, i, j, ExpressionStatement(), stirlingS2, i, j, j, stirlingS2, i, 1, j, stirlingS2, i, 1, j, 1, ExpressionStatement(), STIRLING_S2, compareAndSet, null, stirlingS2, IfStatement(if), n, stirlingS2.length, ReturnStatement(return), stirlingS2, n, k, IfStatement(if), k, 0, ReturnStatement(return), 0, IfStatement(if), k, 1, k, n, ReturnStatement(return), 1, IfStatement(if), k, 2, ReturnStatement(return), 1l, n, 1, 1l, IfStatement(if), k, n, 1, ReturnStatement(return), binomialCoefficient, n, 2, VariableDeclarationStatement(), long, sum, 0, VariableDeclarationStatement(), long, sign, k, 0x1, 0, 1, 1, ForStatement(for), int, j, 1, j, k, j, ExpressionStatement(), sign, sign, ExpressionStatement(), sum, sign, binomialCoefficient, k, j, ArithmeticUtils, pow, j, n, IfStatement(if), sum, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, n, 0, stirlingS2.length, 1, ReturnStatement(return), sum, factorial, k]
org.apache.commons.math4.util:CombinatoricsUtils:combinationsIterator:int+int#[ReturnStatement(return), new, Combinations, n, k, iterator]
org.apache.commons.math4.util:CombinatoricsUtils:checkBinomial:int+int#[IfStatement(if), n, k, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, k, n, true, IfStatement(if), n, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n]
org.apache.commons.math4.util:CompositeFormat:getDefaultNumberFormat:null#[ReturnStatement(return), getDefaultNumberFormat, Locale, getDefault]
org.apache.commons.math4.util:CompositeFormat:getDefaultNumberFormat:Locale#[VariableDeclarationStatement(), final, NumberFormat, nf, NumberFormat, getInstance, locale, ExpressionStatement(), nf, setMaximumFractionDigits, 10, ReturnStatement(return), nf]
org.apache.commons.math4.util:CompositeFormat:parseAndIgnoreWhitespace:String+ParsePosition#[ExpressionStatement(), parseNextCharacter, source, pos, ExpressionStatement(), pos, setIndex, pos, getIndex, 1]
org.apache.commons.math4.util:CompositeFormat:parseNextCharacter:String+ParsePosition#[VariableDeclarationStatement(), int, index, pos, getIndex, VariableDeclarationStatement(), final, int, n, source, length, VariableDeclarationStatement(), char, ret, 0, IfStatement(if), index, n, VariableDeclarationStatement(), char, c, DoStatement(do), ExpressionStatement(), c, source, charAt, index, Character, isWhitespace, c, index, n, ExpressionStatement(), pos, setIndex, index, IfStatement(if), index, n, ExpressionStatement(), ret, c, ReturnStatement(return), ret]
org.apache.commons.math4.util:CompositeFormat:parseNumber:String+double+ParsePosition#[VariableDeclarationStatement(), Number, ret, null, VariableDeclarationStatement(), StringBuilder, sb, new, StringBuilder, ExpressionStatement(), sb, append, '(', ExpressionStatement(), sb, append, value, ExpressionStatement(), sb, append, ')', VariableDeclarationStatement(), final, int, n, sb, length, VariableDeclarationStatement(), final, int, startIndex, pos, getIndex, VariableDeclarationStatement(), final, int, endIndex, startIndex, n, IfStatement(if), endIndex, source, length, source, substring, startIndex, endIndex, compareTo, sb, toString, 0, ExpressionStatement(), ret, Double, valueOf, value, ExpressionStatement(), pos, setIndex, endIndex, ReturnStatement(return), ret]
org.apache.commons.math4.util:CompositeFormat:parseNumber:String+NumberFormat+ParsePosition#[VariableDeclarationStatement(), final, int, startIndex, pos, getIndex, VariableDeclarationStatement(), Number, number, format, parse, source, pos, VariableDeclarationStatement(), final, int, endIndex, pos, getIndex, IfStatement(if), startIndex, endIndex, VariableDeclarationStatement(), final, double, special, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, ForStatement(for), int, i, 0, i, special.length, i, ExpressionStatement(), number, parseNumber, source, special, i, pos, IfStatement(if), number, null, BreakStatement(break), ReturnStatement(return), number]
org.apache.commons.math4.util:CompositeFormat:parseFixedstring:String+String+ParsePosition#[VariableDeclarationStatement(), final, int, startIndex, pos, getIndex, VariableDeclarationStatement(), final, int, endIndex, startIndex, expected, length, IfStatement(if), startIndex, source, length, endIndex, source, length, source, substring, startIndex, endIndex, compareTo, expected, 0, ExpressionStatement(), pos, setIndex, startIndex, ExpressionStatement(), pos, setErrorIndex, startIndex, ReturnStatement(return), false, ExpressionStatement(), pos, setIndex, endIndex, ReturnStatement(return), true]
org.apache.commons.math4.util:CompositeFormat:formatDouble:double+NumberFormat+StringBuffer+FieldPosition#[IfStatement(if), Double, isNaN, value, Double, isInfinite, value, ExpressionStatement(), toAppendTo, append, '(', ExpressionStatement(), toAppendTo, append, value, ExpressionStatement(), toAppendTo, append, ')', ExpressionStatement(), format, format, value, toAppendTo, pos, ReturnStatement(return), toAppendTo]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double#[ReturnStatement(return), evaluate, x, DEFAULT_EPSILON, Integer.MAX_VALUE]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double+double#[ReturnStatement(return), evaluate, x, epsilon, Integer.MAX_VALUE]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double+int#[ReturnStatement(return), evaluate, x, DEFAULT_EPSILON, maxIterations]
org.apache.commons.math4.util:ContinuedFraction:evaluate:double+double+int#[VariableDeclarationStatement(), final, double, small, 1e-50, VariableDeclarationStatement(), double, hPrev, getA, 0, x, IfStatement(if), Precision, equals, hPrev, 0.0, small, ExpressionStatement(), hPrev, small, VariableDeclarationStatement(), int, n, 1, VariableDeclarationStatement(), double, dPrev, 0.0, VariableDeclarationStatement(), double, cPrev, hPrev, VariableDeclarationStatement(), double, hN, hPrev, WhileStatement(while), n, maxIterations, VariableDeclarationStatement(), final, double, a, getA, n, x, VariableDeclarationStatement(), final, double, b, getB, n, x, VariableDeclarationStatement(), double, dN, a, b, dPrev, IfStatement(if), Precision, equals, dN, 0.0, small, ExpressionStatement(), dN, small, VariableDeclarationStatement(), double, cN, a, b, cPrev, IfStatement(if), Precision, equals, cN, 0.0, small, ExpressionStatement(), cN, small, ExpressionStatement(), dN, 1, dN, VariableDeclarationStatement(), final, double, deltaN, cN, dN, ExpressionStatement(), hN, hPrev, deltaN, IfStatement(if), Double, isInfinite, hN, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x, IfStatement(if), Double, isNaN, hN, ThrowStatement(throw), new, ConvergenceException, LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x, IfStatement(if), FastMath, abs, deltaN, 1.0, epsilon, BreakStatement(break), ExpressionStatement(), dPrev, dN, ExpressionStatement(), cPrev, cN, ExpressionStatement(), hPrev, hN, ExpressionStatement(), n, IfStatement(if), n, maxIterations, ThrowStatement(throw), new, MaxCountExceededException, LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x, ReturnStatement(return), hN]
org.apache.commons.math4.util:Decimal64:getField:null#[ReturnStatement(return), Decimal64Field, getInstance]
org.apache.commons.math4.util:Decimal64:add:Decimal64#[ReturnStatement(return), new, Decimal64, this, value, a.value]
org.apache.commons.math4.util:Decimal64:subtract:Decimal64#[ReturnStatement(return), new, Decimal64, this, value, a.value]
org.apache.commons.math4.util:Decimal64:negate:null#[ReturnStatement(return), new, Decimal64, this, value]
org.apache.commons.math4.util:Decimal64:multiply:Decimal64#[ReturnStatement(return), new, Decimal64, this, value, a.value]
org.apache.commons.math4.util:Decimal64:multiply:int#[ReturnStatement(return), new, Decimal64, n, this, value]
org.apache.commons.math4.util:Decimal64:divide:Decimal64#[ReturnStatement(return), new, Decimal64, this, value, a.value]
org.apache.commons.math4.util:Decimal64:reciprocal:null#[ReturnStatement(return), new, Decimal64, 1.0, this, value]
org.apache.commons.math4.util:Decimal64:byteValue:null#[ReturnStatement(return), byte, value]
org.apache.commons.math4.util:Decimal64:shortValue:null#[ReturnStatement(return), short, value]
org.apache.commons.math4.util:Decimal64:intValue:null#[ReturnStatement(return), int, value]
org.apache.commons.math4.util:Decimal64:longValue:null#[ReturnStatement(return), long, value]
org.apache.commons.math4.util:Decimal64:floatValue:null#[ReturnStatement(return), float, value]
org.apache.commons.math4.util:Decimal64:doubleValue:null#[ReturnStatement(return), value]
org.apache.commons.math4.util:Decimal64:compareTo:Decimal64#[ReturnStatement(return), Double, compare, this, value, o.value]
org.apache.commons.math4.util:Decimal64:equals:Object#[IfStatement(if), instanceof, obj, Decimal64, VariableDeclarationStatement(), final, Decimal64, that, Decimal64, obj, ReturnStatement(return), Double, doubleToLongBits, this, value, Double, doubleToLongBits, that.value, ReturnStatement(return), false]
org.apache.commons.math4.util:Decimal64:hashCode:null#[VariableDeclarationStatement(), long, v, Double, doubleToLongBits, value, ReturnStatement(return), int, v, v, 32]
org.apache.commons.math4.util:Decimal64:toString:null#[ReturnStatement(return), Double, toString, value]
org.apache.commons.math4.util:Decimal64:isInfinite:null#[ReturnStatement(return), Double, isInfinite, value]
org.apache.commons.math4.util:Decimal64:isNaN:null#[ReturnStatement(return), Double, isNaN, value]
org.apache.commons.math4.util:Decimal64:getReal:null#[ReturnStatement(return), value]
org.apache.commons.math4.util:Decimal64:add:double#[ReturnStatement(return), new, Decimal64, value, a]
org.apache.commons.math4.util:Decimal64:subtract:double#[ReturnStatement(return), new, Decimal64, value, a]
org.apache.commons.math4.util:Decimal64:multiply:double#[ReturnStatement(return), new, Decimal64, value, a]
org.apache.commons.math4.util:Decimal64:divide:double#[ReturnStatement(return), new, Decimal64, value, a]
org.apache.commons.math4.util:Decimal64:remainder:double#[ReturnStatement(return), new, Decimal64, FastMath, IEEEremainder, value, a]
org.apache.commons.math4.util:Decimal64:remainder:Decimal64#[ReturnStatement(return), new, Decimal64, FastMath, IEEEremainder, value, a.value]
org.apache.commons.math4.util:Decimal64:abs:null#[ReturnStatement(return), new, Decimal64, FastMath, abs, value]
org.apache.commons.math4.util:Decimal64:ceil:null#[ReturnStatement(return), new, Decimal64, FastMath, ceil, value]
org.apache.commons.math4.util:Decimal64:floor:null#[ReturnStatement(return), new, Decimal64, FastMath, floor, value]
org.apache.commons.math4.util:Decimal64:rint:null#[ReturnStatement(return), new, Decimal64, FastMath, rint, value]
org.apache.commons.math4.util:Decimal64:round:null#[ReturnStatement(return), FastMath, round, value]
org.apache.commons.math4.util:Decimal64:signum:null#[ReturnStatement(return), new, Decimal64, FastMath, signum, value]
org.apache.commons.math4.util:Decimal64:copySign:Decimal64#[ReturnStatement(return), new, Decimal64, FastMath, copySign, value, sign.value]
org.apache.commons.math4.util:Decimal64:copySign:double#[ReturnStatement(return), new, Decimal64, FastMath, copySign, value, sign]
org.apache.commons.math4.util:Decimal64:scalb:int#[ReturnStatement(return), new, Decimal64, FastMath, scalb, value, n]
org.apache.commons.math4.util:Decimal64:hypot:Decimal64#[ReturnStatement(return), new, Decimal64, FastMath, hypot, value, y.value]
org.apache.commons.math4.util:Decimal64:sqrt:null#[ReturnStatement(return), new, Decimal64, FastMath, sqrt, value]
org.apache.commons.math4.util:Decimal64:cbrt:null#[ReturnStatement(return), new, Decimal64, FastMath, cbrt, value]
org.apache.commons.math4.util:Decimal64:rootN:int#[IfStatement(if), value, 0, ReturnStatement(return), new, Decimal64, FastMath, pow, value, 1.0, n, ReturnStatement(return), new, Decimal64, FastMath, pow, value, 1.0, n]
org.apache.commons.math4.util:Decimal64:pow:double#[ReturnStatement(return), new, Decimal64, FastMath, pow, value, p]
org.apache.commons.math4.util:Decimal64:pow:int#[ReturnStatement(return), new, Decimal64, FastMath, pow, value, n]
org.apache.commons.math4.util:Decimal64:pow:Decimal64#[ReturnStatement(return), new, Decimal64, FastMath, pow, value, e.value]
org.apache.commons.math4.util:Decimal64:exp:null#[ReturnStatement(return), new, Decimal64, FastMath, exp, value]
org.apache.commons.math4.util:Decimal64:expm1:null#[ReturnStatement(return), new, Decimal64, FastMath, expm1, value]
org.apache.commons.math4.util:Decimal64:log:null#[ReturnStatement(return), new, Decimal64, FastMath, log, value]
org.apache.commons.math4.util:Decimal64:log1p:null#[ReturnStatement(return), new, Decimal64, FastMath, log1p, value]
org.apache.commons.math4.util:Decimal64:log10:null#[ReturnStatement(return), new, Decimal64, FastMath, log10, value]
org.apache.commons.math4.util:Decimal64:cos:null#[ReturnStatement(return), new, Decimal64, FastMath, cos, value]
org.apache.commons.math4.util:Decimal64:sin:null#[ReturnStatement(return), new, Decimal64, FastMath, sin, value]
org.apache.commons.math4.util:Decimal64:tan:null#[ReturnStatement(return), new, Decimal64, FastMath, tan, value]
org.apache.commons.math4.util:Decimal64:acos:null#[ReturnStatement(return), new, Decimal64, FastMath, acos, value]
org.apache.commons.math4.util:Decimal64:asin:null#[ReturnStatement(return), new, Decimal64, FastMath, asin, value]
org.apache.commons.math4.util:Decimal64:atan:null#[ReturnStatement(return), new, Decimal64, FastMath, atan, value]
org.apache.commons.math4.util:Decimal64:atan2:Decimal64#[ReturnStatement(return), new, Decimal64, FastMath, atan2, value, x.value]
org.apache.commons.math4.util:Decimal64:cosh:null#[ReturnStatement(return), new, Decimal64, FastMath, cosh, value]
org.apache.commons.math4.util:Decimal64:sinh:null#[ReturnStatement(return), new, Decimal64, FastMath, sinh, value]
org.apache.commons.math4.util:Decimal64:tanh:null#[ReturnStatement(return), new, Decimal64, FastMath, tanh, value]
org.apache.commons.math4.util:Decimal64:acosh:null#[ReturnStatement(return), new, Decimal64, FastMath, acosh, value]
org.apache.commons.math4.util:Decimal64:asinh:null#[ReturnStatement(return), new, Decimal64, FastMath, asinh, value]
org.apache.commons.math4.util:Decimal64:atanh:null#[ReturnStatement(return), new, Decimal64, FastMath, atanh, value]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64[]+Decimal64[]#[IfStatement(if), a.length, b.length, ThrowStatement(throw), new, DimensionMismatchException, a.length, b.length, VariableDeclarationStatement(), final, double, aDouble, double, a.length, VariableDeclarationStatement(), final, double, bDouble, double, b.length, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), aDouble, i, a, i, value, ExpressionStatement(), bDouble, i, b, i, value, ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, aDouble, bDouble]
org.apache.commons.math4.util:Decimal64:linearCombination:double[]+Decimal64[]#[IfStatement(if), a.length, b.length, ThrowStatement(throw), new, DimensionMismatchException, a.length, b.length, VariableDeclarationStatement(), final, double, bDouble, double, b.length, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), bDouble, i, b, i, value, ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, a, bDouble]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64+Decimal64+Decimal64+Decimal64#[ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value]
org.apache.commons.math4.util:Decimal64:linearCombination:double+Decimal64+double+Decimal64#[ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, a1, b1.value, a2, b2.value]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64#[ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value]
org.apache.commons.math4.util:Decimal64:linearCombination:double+Decimal64+double+Decimal64+double+Decimal64#[ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value]
org.apache.commons.math4.util:Decimal64:linearCombination:Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64+Decimal64#[ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, a1.value, b1.value, a2.value, b2.value, a3.value, b3.value, a4.value, b4.value]
org.apache.commons.math4.util:Decimal64:linearCombination:double+Decimal64+double+Decimal64+double+Decimal64+double+Decimal64#[ReturnStatement(return), new, Decimal64, MathArrays, linearCombination, a1, b1.value, a2, b2.value, a3, b3.value, a4, b4.value]
org.apache.commons.math4.util:Decimal64Field:getInstance:null#[ReturnStatement(return), INSTANCE]
org.apache.commons.math4.util:Decimal64Field:getZero:null#[ReturnStatement(return), Decimal64.ZERO]
org.apache.commons.math4.util:Decimal64Field:getOne:null#[ReturnStatement(return), Decimal64.ONE]
org.apache.commons.math4.util:Decimal64Field:getRuntimeClass:null#[ReturnStatement(return), Decimal64]
org.apache.commons.math4.util:DefaultTransformer:transform:Object#[IfStatement(if), o, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.OBJECT_TRANSFORMATION, IfStatement(if), instanceof, o, Number, ReturnStatement(return), Number, o, doubleValue, TryStatement(try), ReturnStatement(return), Double, parseDouble, o, toString, catch, NumberFormatException, e, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE, o, toString]
org.apache.commons.math4.util:DefaultTransformer:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, ReturnStatement(return), instanceof, other, DefaultTransformer]
org.apache.commons.math4.util:DefaultTransformer:hashCode:null#[ReturnStatement(return), 401993047]
org.apache.commons.math4.util:FastMath:doubleHighPart:double#[IfStatement(if), d, Precision.SAFE_MIN, d, Precision.SAFE_MIN, ReturnStatement(return), d, VariableDeclarationStatement(), long, xl, Double, doubleToRawLongBits, d, ExpressionStatement(), xl, MASK_30BITS, ReturnStatement(return), Double, longBitsToDouble, xl]
org.apache.commons.math4.util:FastMath:sqrt:double#[ReturnStatement(return), Math, sqrt, a]
org.apache.commons.math4.util:FastMath:cosh:double#[IfStatement(if), Double, isNaN, x, ReturnStatement(return), x, IfStatement(if), x, 20, IfStatement(if), x, LOG_MAX_VALUE, VariableDeclarationStatement(), final, double, t, exp, 0.5, x, ReturnStatement(return), 0.5, t, t, ReturnStatement(return), 0.5, exp, x, IfStatement(if), x, 20, IfStatement(if), x, LOG_MAX_VALUE, VariableDeclarationStatement(), final, double, t, exp, 0.5, x, ReturnStatement(return), 0.5, t, t, ReturnStatement(return), 0.5, exp, x, VariableDeclarationStatement(), final, double, hiPrec, double, 2, IfStatement(if), x, 0.0, ExpressionStatement(), x, x, ExpressionStatement(), exp, x, 0.0, hiPrec, VariableDeclarationStatement(), double, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, yb, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, temp, ya, HEX_40000000, VariableDeclarationStatement(), double, yaa, ya, temp, temp, VariableDeclarationStatement(), double, yab, ya, yaa, VariableDeclarationStatement(), double, recip, 1.0, ya, ExpressionStatement(), temp, recip, HEX_40000000, VariableDeclarationStatement(), double, recipa, recip, temp, temp, VariableDeclarationStatement(), double, recipb, recip, recipa, ExpressionStatement(), recipb, 1.0, yaa, recipa, yaa, recipb, yab, recipa, yab, recipb, recip, ExpressionStatement(), recipb, yb, recip, recip, ExpressionStatement(), temp, ya, recipa, ExpressionStatement(), yb, temp, ya, recipa, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, recipb, ExpressionStatement(), yb, temp, ya, recipb, ExpressionStatement(), ya, temp, VariableDeclarationStatement(), double, result, ya, yb, ExpressionStatement(), result, 0.5, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:sinh:double#[VariableDeclarationStatement(), boolean, negate, false, IfStatement(if), Double, isNaN, x, ReturnStatement(return), x, IfStatement(if), x, 20, IfStatement(if), x, LOG_MAX_VALUE, VariableDeclarationStatement(), final, double, t, exp, 0.5, x, ReturnStatement(return), 0.5, t, t, ReturnStatement(return), 0.5, exp, x, IfStatement(if), x, 20, IfStatement(if), x, LOG_MAX_VALUE, VariableDeclarationStatement(), final, double, t, exp, 0.5, x, ReturnStatement(return), 0.5, t, t, ReturnStatement(return), 0.5, exp, x, IfStatement(if), x, 0, ReturnStatement(return), x, IfStatement(if), x, 0.0, ExpressionStatement(), x, x, ExpressionStatement(), negate, true, VariableDeclarationStatement(), double, result, IfStatement(if), x, 0.25, VariableDeclarationStatement(), double, hiPrec, double, 2, ExpressionStatement(), exp, x, 0.0, hiPrec, VariableDeclarationStatement(), double, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, yb, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, temp, ya, HEX_40000000, VariableDeclarationStatement(), double, yaa, ya, temp, temp, VariableDeclarationStatement(), double, yab, ya, yaa, VariableDeclarationStatement(), double, recip, 1.0, ya, ExpressionStatement(), temp, recip, HEX_40000000, VariableDeclarationStatement(), double, recipa, recip, temp, temp, VariableDeclarationStatement(), double, recipb, recip, recipa, ExpressionStatement(), recipb, 1.0, yaa, recipa, yaa, recipb, yab, recipa, yab, recipb, recip, ExpressionStatement(), recipb, yb, recip, recip, ExpressionStatement(), recipa, recipa, ExpressionStatement(), recipb, recipb, ExpressionStatement(), temp, ya, recipa, ExpressionStatement(), yb, temp, ya, recipa, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, recipb, ExpressionStatement(), yb, temp, ya, recipb, ExpressionStatement(), ya, temp, ExpressionStatement(), result, ya, yb, ExpressionStatement(), result, 0.5, VariableDeclarationStatement(), double, hiPrec, double, 2, ExpressionStatement(), expm1, x, hiPrec, VariableDeclarationStatement(), double, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, yb, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, denom, 1.0, ya, VariableDeclarationStatement(), double, denomr, 1.0, denom, VariableDeclarationStatement(), double, denomb, denom, 1.0, ya, yb, VariableDeclarationStatement(), double, ratio, ya, denomr, VariableDeclarationStatement(), double, temp, ratio, HEX_40000000, VariableDeclarationStatement(), double, ra, ratio, temp, temp, VariableDeclarationStatement(), double, rb, ratio, ra, ExpressionStatement(), temp, denom, HEX_40000000, VariableDeclarationStatement(), double, za, denom, temp, temp, VariableDeclarationStatement(), double, zb, denom, za, ExpressionStatement(), rb, ya, za, ra, za, rb, zb, ra, zb, rb, denomr, ExpressionStatement(), rb, yb, denomr, ExpressionStatement(), rb, ya, denomb, denomr, denomr, ExpressionStatement(), temp, ya, ra, ExpressionStatement(), yb, temp, ya, ra, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, rb, ExpressionStatement(), yb, temp, ya, rb, ExpressionStatement(), ya, temp, ExpressionStatement(), result, ya, yb, ExpressionStatement(), result, 0.5, IfStatement(if), negate, ExpressionStatement(), result, result, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:tanh:double#[VariableDeclarationStatement(), boolean, negate, false, IfStatement(if), Double, isNaN, x, ReturnStatement(return), x, IfStatement(if), x, 20.0, ReturnStatement(return), 1.0, IfStatement(if), x, 20, ReturnStatement(return), 1.0, IfStatement(if), x, 0, ReturnStatement(return), x, IfStatement(if), x, 0.0, ExpressionStatement(), x, x, ExpressionStatement(), negate, true, VariableDeclarationStatement(), double, result, IfStatement(if), x, 0.5, VariableDeclarationStatement(), double, hiPrec, double, 2, ExpressionStatement(), exp, x, 2.0, 0.0, hiPrec, VariableDeclarationStatement(), double, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, yb, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, na, 1.0, ya, VariableDeclarationStatement(), double, nb, na, 1.0, ya, VariableDeclarationStatement(), double, temp, na, yb, ExpressionStatement(), nb, temp, na, yb, ExpressionStatement(), na, temp, VariableDeclarationStatement(), double, da, 1.0, ya, VariableDeclarationStatement(), double, db, da, 1.0, ya, ExpressionStatement(), temp, da, yb, ExpressionStatement(), db, temp, da, yb, ExpressionStatement(), da, temp, ExpressionStatement(), temp, da, HEX_40000000, VariableDeclarationStatement(), double, daa, da, temp, temp, VariableDeclarationStatement(), double, dab, da, daa, VariableDeclarationStatement(), double, ratio, na, da, ExpressionStatement(), temp, ratio, HEX_40000000, VariableDeclarationStatement(), double, ratioa, ratio, temp, temp, VariableDeclarationStatement(), double, ratiob, ratio, ratioa, ExpressionStatement(), ratiob, na, daa, ratioa, daa, ratiob, dab, ratioa, dab, ratiob, da, ExpressionStatement(), ratiob, nb, da, ExpressionStatement(), ratiob, db, na, da, da, ExpressionStatement(), result, ratioa, ratiob, VariableDeclarationStatement(), double, hiPrec, double, 2, ExpressionStatement(), expm1, x, 2.0, hiPrec, VariableDeclarationStatement(), double, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, yb, ya, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), double, na, ya, VariableDeclarationStatement(), double, nb, yb, VariableDeclarationStatement(), double, da, 2.0, ya, VariableDeclarationStatement(), double, db, da, 2.0, ya, VariableDeclarationStatement(), double, temp, da, yb, ExpressionStatement(), db, temp, da, yb, ExpressionStatement(), da, temp, ExpressionStatement(), temp, da, HEX_40000000, VariableDeclarationStatement(), double, daa, da, temp, temp, VariableDeclarationStatement(), double, dab, da, daa, VariableDeclarationStatement(), double, ratio, na, da, ExpressionStatement(), temp, ratio, HEX_40000000, VariableDeclarationStatement(), double, ratioa, ratio, temp, temp, VariableDeclarationStatement(), double, ratiob, ratio, ratioa, ExpressionStatement(), ratiob, na, daa, ratioa, daa, ratiob, dab, ratioa, dab, ratiob, da, ExpressionStatement(), ratiob, nb, da, ExpressionStatement(), ratiob, db, na, da, da, ExpressionStatement(), result, ratioa, ratiob, IfStatement(if), negate, ExpressionStatement(), result, result, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:acosh:double#[ReturnStatement(return), FastMath, log, a, FastMath, sqrt, a, a, 1]
org.apache.commons.math4.util:FastMath:asinh:double#[VariableDeclarationStatement(), boolean, negative, false, IfStatement(if), a, 0, ExpressionStatement(), negative, true, ExpressionStatement(), a, a, VariableDeclarationStatement(), double, absAsinh, IfStatement(if), a, 0.167, ExpressionStatement(), absAsinh, FastMath, log, FastMath, sqrt, a, a, 1, a, VariableDeclarationStatement(), final, double, a2, a, a, IfStatement(if), a, 0.097, ExpressionStatement(), absAsinh, a, 1, a2, F_1_3, a2, F_1_5, a2, F_1_7, a2, F_1_9, a2, F_1_11, a2, F_1_13, a2, F_1_15, a2, F_1_17, F_15_16, F_13_14, F_11_12, F_9_10, F_7_8, F_5_6, F_3_4, F_1_2, IfStatement(if), a, 0.036, ExpressionStatement(), absAsinh, a, 1, a2, F_1_3, a2, F_1_5, a2, F_1_7, a2, F_1_9, a2, F_1_11, a2, F_1_13, F_11_12, F_9_10, F_7_8, F_5_6, F_3_4, F_1_2, IfStatement(if), a, 0.0036, ExpressionStatement(), absAsinh, a, 1, a2, F_1_3, a2, F_1_5, a2, F_1_7, a2, F_1_9, F_7_8, F_5_6, F_3_4, F_1_2, ExpressionStatement(), absAsinh, a, 1, a2, F_1_3, a2, F_1_5, F_3_4, F_1_2, ReturnStatement(return), negative, absAsinh, absAsinh]
org.apache.commons.math4.util:FastMath:atanh:double#[VariableDeclarationStatement(), boolean, negative, false, IfStatement(if), a, 0, ExpressionStatement(), negative, true, ExpressionStatement(), a, a, VariableDeclarationStatement(), double, absAtanh, IfStatement(if), a, 0.15, ExpressionStatement(), absAtanh, 0.5, FastMath, log, 1, a, 1, a, VariableDeclarationStatement(), final, double, a2, a, a, IfStatement(if), a, 0.087, ExpressionStatement(), absAtanh, a, 1, a2, F_1_3, a2, F_1_5, a2, F_1_7, a2, F_1_9, a2, F_1_11, a2, F_1_13, a2, F_1_15, a2, F_1_17, IfStatement(if), a, 0.031, ExpressionStatement(), absAtanh, a, 1, a2, F_1_3, a2, F_1_5, a2, F_1_7, a2, F_1_9, a2, F_1_11, a2, F_1_13, IfStatement(if), a, 0.003, ExpressionStatement(), absAtanh, a, 1, a2, F_1_3, a2, F_1_5, a2, F_1_7, a2, F_1_9, ExpressionStatement(), absAtanh, a, 1, a2, F_1_3, a2, F_1_5, ReturnStatement(return), negative, absAtanh, absAtanh]
org.apache.commons.math4.util:FastMath:signum:double#[ReturnStatement(return), a, 0.0, 1.0, a, 0.0, 1.0, a]
org.apache.commons.math4.util:FastMath:signum:float#[ReturnStatement(return), a, 0.0f, 1.0f, a, 0.0f, 1.0f, a]
org.apache.commons.math4.util:FastMath:nextUp:double#[ReturnStatement(return), nextAfter, a, Double.POSITIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextUp:float#[ReturnStatement(return), nextAfter, a, Float.POSITIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextDown:double#[ReturnStatement(return), nextAfter, a, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextDown:float#[ReturnStatement(return), nextAfter, a, Float.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:random:null#[ReturnStatement(return), Math, random]
org.apache.commons.math4.util:FastMath:exp:double#[ReturnStatement(return), exp, x, 0.0, null]
org.apache.commons.math4.util:FastMath:exp:double+double+double[]#[VariableDeclarationStatement(), double, intPartA, VariableDeclarationStatement(), double, intPartB, VariableDeclarationStatement(), int, intVal, int, x, IfStatement(if), x, 0.0, IfStatement(if), x, 746d, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, 0.0, ExpressionStatement(), hiPrec, 1, 0.0, ReturnStatement(return), 0.0, IfStatement(if), intVal, 709, VariableDeclarationStatement(), final, double, result, exp, x, 40.19140625, extra, hiPrec, 285040095144011776.0, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, 285040095144011776.0, ExpressionStatement(), hiPrec, 1, 285040095144011776.0, ReturnStatement(return), result, IfStatement(if), intVal, 709, VariableDeclarationStatement(), final, double, result, exp, x, 1.494140625, extra, hiPrec, 4.455505956692756620, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, 4.455505956692756620, ExpressionStatement(), hiPrec, 1, 4.455505956692756620, ReturnStatement(return), result, ExpressionStatement(), intVal, IfStatement(if), intVal, 709, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, Double.POSITIVE_INFINITY, ExpressionStatement(), hiPrec, 1, 0.0, ReturnStatement(return), Double.POSITIVE_INFINITY, ExpressionStatement(), intPartA, ExpIntTable.EXP_INT_TABLE_A, EXP_INT_TABLE_MAX_INDEX, intVal, ExpressionStatement(), intPartB, ExpIntTable.EXP_INT_TABLE_B, EXP_INT_TABLE_MAX_INDEX, intVal, VariableDeclarationStatement(), final, int, intFrac, int, x, intVal, 1024.0, VariableDeclarationStatement(), final, double, fracPartA, ExpFracTable.EXP_FRAC_TABLE_A, intFrac, VariableDeclarationStatement(), final, double, fracPartB, ExpFracTable.EXP_FRAC_TABLE_B, intFrac, VariableDeclarationStatement(), final, double, epsilon, x, intVal, intFrac, 1024.0, VariableDeclarationStatement(), double, z, 0.04168701738764507, ExpressionStatement(), z, z, epsilon, 0.1666666505023083, ExpressionStatement(), z, z, epsilon, 0.5000000000042687, ExpressionStatement(), z, z, epsilon, 1.0, ExpressionStatement(), z, z, epsilon, 3.940510424527919E-20, VariableDeclarationStatement(), double, tempA, intPartA, fracPartA, VariableDeclarationStatement(), double, tempB, intPartA, fracPartB, intPartB, fracPartA, intPartB, fracPartB, VariableDeclarationStatement(), final, double, tempC, tempB, tempA, IfStatement(if), tempC, Double.POSITIVE_INFINITY, ReturnStatement(return), Double.POSITIVE_INFINITY, VariableDeclarationStatement(), final, double, result, IfStatement(if), extra, 0.0, ExpressionStatement(), result, tempC, extra, z, tempC, extra, tempC, z, tempB, tempA, ExpressionStatement(), result, tempC, z, tempB, tempA, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, tempA, ExpressionStatement(), hiPrec, 1, tempC, extra, z, tempC, extra, tempC, z, tempB, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:expm1:double#[ReturnStatement(return), expm1, x, null]
org.apache.commons.math4.util:FastMath:expm1:double+double#[IfStatement(if), Double, isNaN, x, x, 0.0, ReturnStatement(return), x, IfStatement(if), x, 1.0, x, 1.0, VariableDeclarationStatement(), double, hiPrec, double, 2, ExpressionStatement(), exp, x, 0.0, hiPrec, IfStatement(if), x, 0.0, ReturnStatement(return), 1.0, hiPrec, 0, hiPrec, 1, VariableDeclarationStatement(), final, double, ra, 1.0, hiPrec, 0, VariableDeclarationStatement(), double, rb, ra, 1.0, hiPrec, 0, ExpressionStatement(), rb, hiPrec, 1, ReturnStatement(return), ra, rb, VariableDeclarationStatement(), double, baseA, VariableDeclarationStatement(), double, baseB, VariableDeclarationStatement(), double, epsilon, VariableDeclarationStatement(), boolean, negative, false, IfStatement(if), x, 0.0, ExpressionStatement(), x, x, ExpressionStatement(), negative, true, VariableDeclarationStatement(), int, intFrac, int, x, 1024.0, VariableDeclarationStatement(), double, tempA, ExpFracTable.EXP_FRAC_TABLE_A, intFrac, 1.0, VariableDeclarationStatement(), double, tempB, ExpFracTable.EXP_FRAC_TABLE_B, intFrac, VariableDeclarationStatement(), double, temp, tempA, tempB, ExpressionStatement(), tempB, temp, tempA, tempB, ExpressionStatement(), tempA, temp, ExpressionStatement(), temp, tempA, HEX_40000000, ExpressionStatement(), baseA, tempA, temp, temp, ExpressionStatement(), baseB, tempB, tempA, baseA, ExpressionStatement(), epsilon, x, intFrac, 1024.0, VariableDeclarationStatement(), double, zb, 0.008336750013465571, ExpressionStatement(), zb, zb, epsilon, 0.041666663879186654, ExpressionStatement(), zb, zb, epsilon, 0.16666666666745392, ExpressionStatement(), zb, zb, epsilon, 0.49999999999999994, ExpressionStatement(), zb, epsilon, ExpressionStatement(), zb, epsilon, VariableDeclarationStatement(), double, za, epsilon, VariableDeclarationStatement(), double, temp, za, zb, ExpressionStatement(), zb, temp, za, zb, ExpressionStatement(), za, temp, ExpressionStatement(), temp, za, HEX_40000000, ExpressionStatement(), temp, za, temp, temp, ExpressionStatement(), zb, za, temp, ExpressionStatement(), za, temp, VariableDeclarationStatement(), double, ya, za, baseA, ExpressionStatement(), temp, ya, za, baseB, VariableDeclarationStatement(), double, yb, temp, ya, za, baseB, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, zb, baseA, ExpressionStatement(), yb, temp, ya, zb, baseA, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, zb, baseB, ExpressionStatement(), yb, temp, ya, zb, baseB, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, baseA, ExpressionStatement(), yb, temp, baseA, ya, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, za, ExpressionStatement(), yb, temp, ya, za, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, baseB, ExpressionStatement(), yb, temp, ya, baseB, ExpressionStatement(), ya, temp, ExpressionStatement(), temp, ya, zb, ExpressionStatement(), yb, temp, ya, zb, ExpressionStatement(), ya, temp, IfStatement(if), negative, VariableDeclarationStatement(), double, denom, 1.0, ya, VariableDeclarationStatement(), double, denomr, 1.0, denom, VariableDeclarationStatement(), double, denomb, denom, 1.0, ya, yb, VariableDeclarationStatement(), double, ratio, ya, denomr, ExpressionStatement(), temp, ratio, HEX_40000000, VariableDeclarationStatement(), final, double, ra, ratio, temp, temp, VariableDeclarationStatement(), double, rb, ratio, ra, ExpressionStatement(), temp, denom, HEX_40000000, ExpressionStatement(), za, denom, temp, temp, ExpressionStatement(), zb, denom, za, ExpressionStatement(), rb, ya, za, ra, za, rb, zb, ra, zb, rb, denomr, ExpressionStatement(), rb, yb, denomr, ExpressionStatement(), rb, ya, denomb, denomr, denomr, ExpressionStatement(), ya, ra, ExpressionStatement(), yb, rb, IfStatement(if), hiPrecOut, null, ExpressionStatement(), hiPrecOut, 0, ya, ExpressionStatement(), hiPrecOut, 1, yb, ReturnStatement(return), ya, yb]
org.apache.commons.math4.util:FastMath:log:double#[ReturnStatement(return), log, x, null]
org.apache.commons.math4.util:FastMath:log:double+double[]#[IfStatement(if), x, 0, ReturnStatement(return), Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), long, bits, Double, doubleToRawLongBits, x, IfStatement(if), bits, 0x8000000000000000L, 0, Double, isNaN, x, x, 0.0, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, Double.NaN, ReturnStatement(return), Double.NaN, IfStatement(if), x, Double.POSITIVE_INFINITY, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, Double.POSITIVE_INFINITY, ReturnStatement(return), Double.POSITIVE_INFINITY, VariableDeclarationStatement(), int, exp, int, bits, 52, 1023, IfStatement(if), bits, 0x7ff0000000000000L, 0, IfStatement(if), x, 0, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, Double.NEGATIVE_INFINITY, ReturnStatement(return), Double.NEGATIVE_INFINITY, ExpressionStatement(), bits, 1, WhileStatement(while), bits, 0x0010000000000000L, 0, ExpressionStatement(), exp, ExpressionStatement(), bits, 1, IfStatement(if), exp, 1, exp, 0, x, 1.01, x, 0.99, hiPrec, null, VariableDeclarationStatement(), double, xa, x, 1.0, VariableDeclarationStatement(), double, xb, xa, x, 1.0, VariableDeclarationStatement(), double, tmp, xa, HEX_40000000, VariableDeclarationStatement(), double, aa, xa, tmp, tmp, VariableDeclarationStatement(), double, ab, xa, aa, ExpressionStatement(), xa, aa, ExpressionStatement(), xb, ab, VariableDeclarationStatement(), final, double, lnCoef_last, LN_QUICK_COEF, LN_QUICK_COEF.length, 1, VariableDeclarationStatement(), double, ya, lnCoef_last, 0, VariableDeclarationStatement(), double, yb, lnCoef_last, 1, ForStatement(for), int, i, LN_QUICK_COEF.length, 2, i, 0, i, ExpressionStatement(), aa, ya, xa, ExpressionStatement(), ab, ya, xb, yb, xa, yb, xb, ExpressionStatement(), tmp, aa, HEX_40000000, ExpressionStatement(), ya, aa, tmp, tmp, ExpressionStatement(), yb, aa, ya, ab, VariableDeclarationStatement(), final, double, lnCoef_i, LN_QUICK_COEF, i, ExpressionStatement(), aa, ya, lnCoef_i, 0, ExpressionStatement(), ab, yb, lnCoef_i, 1, ExpressionStatement(), tmp, aa, HEX_40000000, ExpressionStatement(), ya, aa, tmp, tmp, ExpressionStatement(), yb, aa, ya, ab, ExpressionStatement(), aa, ya, xa, ExpressionStatement(), ab, ya, xb, yb, xa, yb, xb, ExpressionStatement(), tmp, aa, HEX_40000000, ExpressionStatement(), ya, aa, tmp, tmp, ExpressionStatement(), yb, aa, ya, ab, ReturnStatement(return), ya, yb, VariableDeclarationStatement(), final, double, lnm, lnMant.LN_MANT, int, bits, 0x000ffc0000000000L, 42, VariableDeclarationStatement(), final, double, epsilon, bits, 0x3ffffffffffL, TWO_POWER_52, bits, 0x000ffc0000000000L, VariableDeclarationStatement(), double, lnza, 0.0, VariableDeclarationStatement(), double, lnzb, 0.0, IfStatement(if), hiPrec, null, VariableDeclarationStatement(), double, tmp, epsilon, HEX_40000000, VariableDeclarationStatement(), double, aa, epsilon, tmp, tmp, VariableDeclarationStatement(), double, ab, epsilon, aa, VariableDeclarationStatement(), double, xa, aa, VariableDeclarationStatement(), double, xb, ab, VariableDeclarationStatement(), final, double, numer, bits, 0x3ffffffffffL, VariableDeclarationStatement(), final, double, denom, TWO_POWER_52, bits, 0x000ffc0000000000L, ExpressionStatement(), aa, numer, xa, denom, xb, denom, ExpressionStatement(), xb, aa, denom, VariableDeclarationStatement(), final, double, lnCoef_last, LN_HI_PREC_COEF, LN_HI_PREC_COEF.length, 1, VariableDeclarationStatement(), double, ya, lnCoef_last, 0, VariableDeclarationStatement(), double, yb, lnCoef_last, 1, ForStatement(for), int, i, LN_HI_PREC_COEF.length, 2, i, 0, i, ExpressionStatement(), aa, ya, xa, ExpressionStatement(), ab, ya, xb, yb, xa, yb, xb, ExpressionStatement(), tmp, aa, HEX_40000000, ExpressionStatement(), ya, aa, tmp, tmp, ExpressionStatement(), yb, aa, ya, ab, VariableDeclarationStatement(), final, double, lnCoef_i, LN_HI_PREC_COEF, i, ExpressionStatement(), aa, ya, lnCoef_i, 0, ExpressionStatement(), ab, yb, lnCoef_i, 1, ExpressionStatement(), tmp, aa, HEX_40000000, ExpressionStatement(), ya, aa, tmp, tmp, ExpressionStatement(), yb, aa, ya, ab, ExpressionStatement(), aa, ya, xa, ExpressionStatement(), ab, ya, xb, yb, xa, yb, xb, ExpressionStatement(), lnza, aa, ab, ExpressionStatement(), lnzb, lnza, aa, ab, ExpressionStatement(), lnza, 0.16624882440418567, ExpressionStatement(), lnza, lnza, epsilon, 0.19999954120254515, ExpressionStatement(), lnza, lnza, epsilon, 0.2499999997677497, ExpressionStatement(), lnza, lnza, epsilon, 0.3333333333332802, ExpressionStatement(), lnza, lnza, epsilon, 0.5, ExpressionStatement(), lnza, lnza, epsilon, 1.0, ExpressionStatement(), lnza, epsilon, VariableDeclarationStatement(), double, a, LN_2_A, exp, VariableDeclarationStatement(), double, b, 0.0, VariableDeclarationStatement(), double, c, a, lnm, 0, VariableDeclarationStatement(), double, d, c, a, lnm, 0, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), c, a, lnza, ExpressionStatement(), d, c, a, lnza, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), c, a, LN_2_B, exp, ExpressionStatement(), d, c, a, LN_2_B, exp, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), c, a, lnm, 1, ExpressionStatement(), d, c, a, lnm, 1, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), c, a, lnzb, ExpressionStatement(), d, c, a, lnzb, ExpressionStatement(), a, c, ExpressionStatement(), b, d, IfStatement(if), hiPrec, null, ExpressionStatement(), hiPrec, 0, a, ExpressionStatement(), hiPrec, 1, b, ReturnStatement(return), a, b]
org.apache.commons.math4.util:FastMath:log1p:double#[IfStatement(if), x, 1, ReturnStatement(return), Double.NEGATIVE_INFINITY, IfStatement(if), x, Double.POSITIVE_INFINITY, ReturnStatement(return), Double.POSITIVE_INFINITY, IfStatement(if), x, 1e-6, x, 1e-6, VariableDeclarationStatement(), final, double, xpa, 1, x, VariableDeclarationStatement(), final, double, xpb, xpa, 1, x, VariableDeclarationStatement(), final, double, hiPrec, double, 2, VariableDeclarationStatement(), final, double, lores, log, xpa, hiPrec, IfStatement(if), Double, isInfinite, lores, ReturnStatement(return), lores, VariableDeclarationStatement(), final, double, fx1, xpb, xpa, VariableDeclarationStatement(), final, double, epsilon, 0.5, fx1, 1, ReturnStatement(return), epsilon, fx1, hiPrec, 1, hiPrec, 0, VariableDeclarationStatement(), final, double, y, x, F_1_3, F_1_2, x, 1, ReturnStatement(return), y, x]
org.apache.commons.math4.util:FastMath:log10:double#[VariableDeclarationStatement(), final, double, hiPrec, double, 2, VariableDeclarationStatement(), final, double, lores, log, x, hiPrec, IfStatement(if), Double, isInfinite, lores, ReturnStatement(return), lores, VariableDeclarationStatement(), final, double, tmp, hiPrec, 0, HEX_40000000, VariableDeclarationStatement(), final, double, lna, hiPrec, 0, tmp, tmp, VariableDeclarationStatement(), final, double, lnb, hiPrec, 0, lna, hiPrec, 1, VariableDeclarationStatement(), final, double, rln10a, 0.4342944622039795, VariableDeclarationStatement(), final, double, rln10b, 1.9699272335463627E-8, ReturnStatement(return), rln10b, lnb, rln10b, lna, rln10a, lnb, rln10a, lna]
org.apache.commons.math4.util:FastMath:log:double+double#[ReturnStatement(return), log, x, log, base]
org.apache.commons.math4.util:FastMath:pow:double+double#[IfStatement(if), y, 0, ReturnStatement(return), 1.0, VariableDeclarationStatement(), final, long, yBits, Double, doubleToRawLongBits, y, VariableDeclarationStatement(), final, int, yRawExp, int, yBits, MASK_DOUBLE_EXPONENT, 52, VariableDeclarationStatement(), final, long, yRawMantissa, yBits, MASK_DOUBLE_MANTISSA, VariableDeclarationStatement(), final, long, xBits, Double, doubleToRawLongBits, x, VariableDeclarationStatement(), final, int, xRawExp, int, xBits, MASK_DOUBLE_EXPONENT, 52, VariableDeclarationStatement(), final, long, xRawMantissa, xBits, MASK_DOUBLE_MANTISSA, IfStatement(if), yRawExp, 1085, IfStatement(if), yRawExp, 2047, yRawMantissa, 0, xRawExp, 2047, xRawMantissa, 0, ReturnStatement(return), Double.NaN, IfStatement(if), xRawExp, 1023, xRawMantissa, 0, IfStatement(if), yRawExp, 2047, ReturnStatement(return), Double.NaN, ReturnStatement(return), 1.0, IfStatement(if), y, 0, xRawExp, 1023, ReturnStatement(return), Double.POSITIVE_INFINITY, ReturnStatement(return), 0.0, IfStatement(if), yRawExp, 1023, VariableDeclarationStatement(), final, long, yFullMantissa, IMPLICIT_HIGH_BIT, yRawMantissa, IfStatement(if), yRawExp, 1075, VariableDeclarationStatement(), final, long, integralMask, 1L, 1075, yRawExp, IfStatement(if), yFullMantissa, integralMask, yFullMantissa, VariableDeclarationStatement(), final, long, l, yFullMantissa, 1075, yRawExp, ReturnStatement(return), FastMath, pow, x, y, 0, l, l, VariableDeclarationStatement(), final, long, l, yFullMantissa, yRawExp, 1075, ReturnStatement(return), FastMath, pow, x, y, 0, l, l, IfStatement(if), x, 0, ReturnStatement(return), y, 0, Double.POSITIVE_INFINITY, 0.0, IfStatement(if), xRawExp, 2047, IfStatement(if), xRawMantissa, 0, ReturnStatement(return), y, 0, 0.0, Double.POSITIVE_INFINITY, ReturnStatement(return), Double.NaN, IfStatement(if), x, 0, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), final, double, tmp, y, HEX_40000000, VariableDeclarationStatement(), final, double, ya, y, tmp, tmp, VariableDeclarationStatement(), final, double, yb, y, ya, VariableDeclarationStatement(), final, double, lns, double, 2, VariableDeclarationStatement(), final, double, lores, log, x, lns, IfStatement(if), Double, isInfinite, lores, ReturnStatement(return), lores, VariableDeclarationStatement(), double, lna, lns, 0, VariableDeclarationStatement(), double, lnb, lns, 1, VariableDeclarationStatement(), final, double, tmp1, lna, HEX_40000000, VariableDeclarationStatement(), final, double, tmp2, lna, tmp1, tmp1, ExpressionStatement(), lnb, lna, tmp2, ExpressionStatement(), lna, tmp2, VariableDeclarationStatement(), final, double, aa, lna, ya, VariableDeclarationStatement(), final, double, ab, lna, yb, lnb, ya, lnb, yb, ExpressionStatement(), lna, aa, ab, ExpressionStatement(), lnb, lna, aa, ab, VariableDeclarationStatement(), double, z, 1.0, 120.0, ExpressionStatement(), z, z, lnb, 1.0, 24.0, ExpressionStatement(), z, z, lnb, 1.0, 6.0, ExpressionStatement(), z, z, lnb, 0.5, ExpressionStatement(), z, z, lnb, 1.0, ExpressionStatement(), z, lnb, VariableDeclarationStatement(), final, double, result, exp, lna, z, null, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:pow:double+int#[ReturnStatement(return), pow, d, long, e]
org.apache.commons.math4.util:FastMath:pow:double+long#[IfStatement(if), e, 0, ReturnStatement(return), 1.0, IfStatement(if), e, 0, ReturnStatement(return), new, Split, d, pow, e, full, ReturnStatement(return), new, Split, d, reciprocal, pow, e, full]
org.apache.commons.math4.util:FastMath:polySine:double#[VariableDeclarationStatement(), double, x2, x, x, VariableDeclarationStatement(), double, p, 2.7553817452272217E-6, ExpressionStatement(), p, p, x2, 1.9841269659586505E-4, ExpressionStatement(), p, p, x2, 0.008333333333329196, ExpressionStatement(), p, p, x2, 0.16666666666666666, ExpressionStatement(), p, p, x2, x, ReturnStatement(return), p]
org.apache.commons.math4.util:FastMath:polyCosine:double#[VariableDeclarationStatement(), double, x2, x, x, VariableDeclarationStatement(), double, p, 2.479773539153719E-5, ExpressionStatement(), p, p, x2, 0.0013888888689039883, ExpressionStatement(), p, p, x2, 0.041666666666621166, ExpressionStatement(), p, p, x2, 0.49999999999999994, ExpressionStatement(), p, x2, ReturnStatement(return), p]
org.apache.commons.math4.util:FastMath:sinQ:double+double#[VariableDeclarationStatement(), int, idx, int, xa, 8.0, 0.5, VariableDeclarationStatement(), final, double, epsilon, xa, EIGHTHS, idx, VariableDeclarationStatement(), final, double, sintA, SINE_TABLE_A, idx, VariableDeclarationStatement(), final, double, sintB, SINE_TABLE_B, idx, VariableDeclarationStatement(), final, double, costA, COSINE_TABLE_A, idx, VariableDeclarationStatement(), final, double, costB, COSINE_TABLE_B, idx, VariableDeclarationStatement(), double, sinEpsA, epsilon, VariableDeclarationStatement(), double, sinEpsB, polySine, epsilon, VariableDeclarationStatement(), final, double, cosEpsA, 1.0, VariableDeclarationStatement(), final, double, cosEpsB, polyCosine, epsilon, VariableDeclarationStatement(), final, double, temp, sinEpsA, HEX_40000000, VariableDeclarationStatement(), double, temp2, sinEpsA, temp, temp, ExpressionStatement(), sinEpsB, sinEpsA, temp2, ExpressionStatement(), sinEpsA, temp2, VariableDeclarationStatement(), double, result, VariableDeclarationStatement(), double, a, 0, VariableDeclarationStatement(), double, b, 0, VariableDeclarationStatement(), double, t, sintA, VariableDeclarationStatement(), double, c, a, t, VariableDeclarationStatement(), double, d, c, a, t, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), t, costA, sinEpsA, ExpressionStatement(), c, a, t, ExpressionStatement(), d, c, a, t, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), b, b, sintA, cosEpsB, costA, sinEpsB, ExpressionStatement(), b, b, sintB, costB, sinEpsA, sintB, cosEpsB, costB, sinEpsB, IfStatement(if), xb, 0.0, ExpressionStatement(), t, costA, costB, cosEpsA, cosEpsB, sintA, sintB, sinEpsA, sinEpsB, xb, ExpressionStatement(), c, a, t, ExpressionStatement(), d, c, a, t, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), result, a, b, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:cosQ:double+double#[VariableDeclarationStatement(), final, double, pi2a, 1.5707963267948966, VariableDeclarationStatement(), final, double, pi2b, 6.123233995736766E-17, VariableDeclarationStatement(), final, double, a, pi2a, xa, VariableDeclarationStatement(), double, b, a, pi2a, xa, ExpressionStatement(), b, pi2b, xb, ReturnStatement(return), sinQ, a, b]
org.apache.commons.math4.util:FastMath:tanQ:double+double+boolean#[VariableDeclarationStatement(), int, idx, int, xa, 8.0, 0.5, VariableDeclarationStatement(), final, double, epsilon, xa, EIGHTHS, idx, VariableDeclarationStatement(), final, double, sintA, SINE_TABLE_A, idx, VariableDeclarationStatement(), final, double, sintB, SINE_TABLE_B, idx, VariableDeclarationStatement(), final, double, costA, COSINE_TABLE_A, idx, VariableDeclarationStatement(), final, double, costB, COSINE_TABLE_B, idx, VariableDeclarationStatement(), double, sinEpsA, epsilon, VariableDeclarationStatement(), double, sinEpsB, polySine, epsilon, VariableDeclarationStatement(), final, double, cosEpsA, 1.0, VariableDeclarationStatement(), final, double, cosEpsB, polyCosine, epsilon, VariableDeclarationStatement(), double, temp, sinEpsA, HEX_40000000, VariableDeclarationStatement(), double, temp2, sinEpsA, temp, temp, ExpressionStatement(), sinEpsB, sinEpsA, temp2, ExpressionStatement(), sinEpsA, temp2, VariableDeclarationStatement(), double, a, 0, VariableDeclarationStatement(), double, b, 0, VariableDeclarationStatement(), double, t, sintA, VariableDeclarationStatement(), double, c, a, t, VariableDeclarationStatement(), double, d, c, a, t, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), t, costA, sinEpsA, ExpressionStatement(), c, a, t, ExpressionStatement(), d, c, a, t, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), b, sintA, cosEpsB, costA, sinEpsB, ExpressionStatement(), b, sintB, costB, sinEpsA, sintB, cosEpsB, costB, sinEpsB, VariableDeclarationStatement(), double, sina, a, b, VariableDeclarationStatement(), double, sinb, sina, a, b, ExpressionStatement(), a, b, c, d, 0.0, ExpressionStatement(), t, costA, cosEpsA, ExpressionStatement(), c, a, t, ExpressionStatement(), d, c, a, t, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), t, sintA, sinEpsA, ExpressionStatement(), c, a, t, ExpressionStatement(), d, c, a, t, ExpressionStatement(), a, c, ExpressionStatement(), b, d, ExpressionStatement(), b, costB, cosEpsA, costA, cosEpsB, costB, cosEpsB, ExpressionStatement(), b, sintB, sinEpsA, sintA, sinEpsB, sintB, sinEpsB, VariableDeclarationStatement(), double, cosa, a, b, VariableDeclarationStatement(), double, cosb, cosa, a, b, IfStatement(if), cotanFlag, VariableDeclarationStatement(), double, tmp, ExpressionStatement(), tmp, cosa, ExpressionStatement(), cosa, sina, ExpressionStatement(), sina, tmp, ExpressionStatement(), tmp, cosb, ExpressionStatement(), cosb, sinb, ExpressionStatement(), sinb, tmp, VariableDeclarationStatement(), double, est, sina, cosa, ExpressionStatement(), temp, est, HEX_40000000, VariableDeclarationStatement(), double, esta, est, temp, temp, VariableDeclarationStatement(), double, estb, est, esta, ExpressionStatement(), temp, cosa, HEX_40000000, VariableDeclarationStatement(), double, cosaa, cosa, temp, temp, VariableDeclarationStatement(), double, cosab, cosa, cosaa, VariableDeclarationStatement(), double, err, sina, esta, cosaa, esta, cosab, estb, cosaa, estb, cosab, cosa, ExpressionStatement(), err, sinb, cosa, ExpressionStatement(), err, sina, cosb, cosa, cosa, IfStatement(if), xb, 0.0, VariableDeclarationStatement(), double, xbadj, xb, est, est, xb, IfStatement(if), cotanFlag, ExpressionStatement(), xbadj, xbadj, ExpressionStatement(), err, xbadj, ReturnStatement(return), est, err]
org.apache.commons.math4.util:FastMath:reducePayneHanek:double+double#[VariableDeclarationStatement(), long, inbits, Double, doubleToRawLongBits, x, VariableDeclarationStatement(), int, exponent, int, inbits, 52, 0x7ff, 1023, ExpressionStatement(), inbits, 0x000fffffffffffffL, ExpressionStatement(), inbits, 0x0010000000000000L, ExpressionStatement(), exponent, ExpressionStatement(), inbits, 11, VariableDeclarationStatement(), long, shpi0, VariableDeclarationStatement(), long, shpiA, VariableDeclarationStatement(), long, shpiB, VariableDeclarationStatement(), int, idx, exponent, 6, VariableDeclarationStatement(), int, shift, exponent, idx, 6, IfStatement(if), shift, 0, ExpressionStatement(), shpi0, idx, 0, 0, RECIP_2PI, idx, 1, shift, ExpressionStatement(), shpi0, RECIP_2PI, idx, 64, shift, ExpressionStatement(), shpiA, RECIP_2PI, idx, shift, RECIP_2PI, idx, 1, 64, shift, ExpressionStatement(), shpiB, RECIP_2PI, idx, 1, shift, RECIP_2PI, idx, 2, 64, shift, ExpressionStatement(), shpi0, idx, 0, 0, RECIP_2PI, idx, 1, ExpressionStatement(), shpiA, RECIP_2PI, idx, ExpressionStatement(), shpiB, RECIP_2PI, idx, 1, VariableDeclarationStatement(), long, a, inbits, 32, VariableDeclarationStatement(), long, b, inbits, 0xffffffffL, VariableDeclarationStatement(), long, c, shpiA, 32, VariableDeclarationStatement(), long, d, shpiA, 0xffffffffL, VariableDeclarationStatement(), long, ac, a, c, VariableDeclarationStatement(), long, bd, b, d, VariableDeclarationStatement(), long, bc, b, c, VariableDeclarationStatement(), long, ad, a, d, VariableDeclarationStatement(), long, prodB, bd, ad, 32, VariableDeclarationStatement(), long, prodA, ac, ad, 32, VariableDeclarationStatement(), boolean, bita, bd, 0x8000000000000000L, 0, VariableDeclarationStatement(), boolean, bitb, ad, 0x80000000L, 0, VariableDeclarationStatement(), boolean, bitsum, prodB, 0x8000000000000000L, 0, IfStatement(if), bita, bitb, bita, bitb, bitsum, ExpressionStatement(), prodA, ExpressionStatement(), bita, prodB, 0x8000000000000000L, 0, ExpressionStatement(), bitb, bc, 0x80000000L, 0, ExpressionStatement(), prodB, bc, 32, ExpressionStatement(), prodA, bc, 32, ExpressionStatement(), bitsum, prodB, 0x8000000000000000L, 0, IfStatement(if), bita, bitb, bita, bitb, bitsum, ExpressionStatement(), prodA, ExpressionStatement(), c, shpiB, 32, ExpressionStatement(), d, shpiB, 0xffffffffL, ExpressionStatement(), ac, a, c, ExpressionStatement(), bc, b, c, ExpressionStatement(), ad, a, d, ExpressionStatement(), ac, bc, ad, 32, ExpressionStatement(), bita, prodB, 0x8000000000000000L, 0, ExpressionStatement(), bitb, ac, 0x8000000000000000L, 0, ExpressionStatement(), prodB, ac, ExpressionStatement(), bitsum, prodB, 0x8000000000000000L, 0, IfStatement(if), bita, bitb, bita, bitb, bitsum, ExpressionStatement(), prodA, ExpressionStatement(), c, shpi0, 32, ExpressionStatement(), d, shpi0, 0xffffffffL, ExpressionStatement(), bd, b, d, ExpressionStatement(), bc, b, c, ExpressionStatement(), ad, a, d, ExpressionStatement(), prodA, bd, bc, ad, 32, VariableDeclarationStatement(), int, intPart, int, prodA, 62, ExpressionStatement(), prodA, 2, ExpressionStatement(), prodA, prodB, 62, ExpressionStatement(), prodB, 2, ExpressionStatement(), a, prodA, 32, ExpressionStatement(), b, prodA, 0xffffffffL, ExpressionStatement(), c, PI_O_4_BITS, 0, 32, ExpressionStatement(), d, PI_O_4_BITS, 0, 0xffffffffL, ExpressionStatement(), ac, a, c, ExpressionStatement(), bd, b, d, ExpressionStatement(), bc, b, c, ExpressionStatement(), ad, a, d, VariableDeclarationStatement(), long, prod2B, bd, ad, 32, VariableDeclarationStatement(), long, prod2A, ac, ad, 32, ExpressionStatement(), bita, bd, 0x8000000000000000L, 0, ExpressionStatement(), bitb, ad, 0x80000000L, 0, ExpressionStatement(), bitsum, prod2B, 0x8000000000000000L, 0, IfStatement(if), bita, bitb, bita, bitb, bitsum, ExpressionStatement(), prod2A, ExpressionStatement(), bita, prod2B, 0x8000000000000000L, 0, ExpressionStatement(), bitb, bc, 0x80000000L, 0, ExpressionStatement(), prod2B, bc, 32, ExpressionStatement(), prod2A, bc, 32, ExpressionStatement(), bitsum, prod2B, 0x8000000000000000L, 0, IfStatement(if), bita, bitb, bita, bitb, bitsum, ExpressionStatement(), prod2A, ExpressionStatement(), c, PI_O_4_BITS, 1, 32, ExpressionStatement(), d, PI_O_4_BITS, 1, 0xffffffffL, ExpressionStatement(), ac, a, c, ExpressionStatement(), bc, b, c, ExpressionStatement(), ad, a, d, ExpressionStatement(), ac, bc, ad, 32, ExpressionStatement(), bita, prod2B, 0x8000000000000000L, 0, ExpressionStatement(), bitb, ac, 0x8000000000000000L, 0, ExpressionStatement(), prod2B, ac, ExpressionStatement(), bitsum, prod2B, 0x8000000000000000L, 0, IfStatement(if), bita, bitb, bita, bitb, bitsum, ExpressionStatement(), prod2A, ExpressionStatement(), a, prodB, 32, ExpressionStatement(), b, prodB, 0xffffffffL, ExpressionStatement(), c, PI_O_4_BITS, 0, 32, ExpressionStatement(), d, PI_O_4_BITS, 0, 0xffffffffL, ExpressionStatement(), ac, a, c, ExpressionStatement(), bc, b, c, ExpressionStatement(), ad, a, d, ExpressionStatement(), ac, bc, ad, 32, ExpressionStatement(), bita, prod2B, 0x8000000000000000L, 0, ExpressionStatement(), bitb, ac, 0x8000000000000000L, 0, ExpressionStatement(), prod2B, ac, ExpressionStatement(), bitsum, prod2B, 0x8000000000000000L, 0, IfStatement(if), bita, bitb, bita, bitb, bitsum, ExpressionStatement(), prod2A, VariableDeclarationStatement(), double, tmpA, prod2A, 12, TWO_POWER_52, VariableDeclarationStatement(), double, tmpB, prod2A, 0xfffL, 40, prod2B, 24, TWO_POWER_52, TWO_POWER_52, VariableDeclarationStatement(), double, sumA, tmpA, tmpB, VariableDeclarationStatement(), double, sumB, sumA, tmpA, tmpB, ExpressionStatement(), result, 0, intPart, ExpressionStatement(), result, 1, sumA, 2.0, ExpressionStatement(), result, 2, sumB, 2.0]
org.apache.commons.math4.util:FastMath:sin:double#[VariableDeclarationStatement(), boolean, negative, false, VariableDeclarationStatement(), int, quadrant, 0, VariableDeclarationStatement(), double, xa, VariableDeclarationStatement(), double, xb, 0.0, ExpressionStatement(), xa, x, IfStatement(if), x, 0, ExpressionStatement(), negative, true, ExpressionStatement(), xa, xa, IfStatement(if), xa, 0.0, VariableDeclarationStatement(), long, bits, Double, doubleToRawLongBits, x, IfStatement(if), bits, 0, ReturnStatement(return), 0.0, ReturnStatement(return), 0.0, IfStatement(if), xa, xa, xa, Double.POSITIVE_INFINITY, ReturnStatement(return), Double.NaN, IfStatement(if), xa, 3294198.0, VariableDeclarationStatement(), double, reduceResults, double, 3, ExpressionStatement(), reducePayneHanek, xa, reduceResults, ExpressionStatement(), quadrant, int, reduceResults, 0, 3, ExpressionStatement(), xa, reduceResults, 1, ExpressionStatement(), xb, reduceResults, 2, IfStatement(if), xa, 1.5707963267948966, VariableDeclarationStatement(), final, CodyWaite, cw, new, CodyWaite, xa, ExpressionStatement(), quadrant, cw, getK, 3, ExpressionStatement(), xa, cw, getRemA, ExpressionStatement(), xb, cw, getRemB, IfStatement(if), negative, ExpressionStatement(), quadrant, 2, SwitchStatement(switch), quadrant, SwitchCase(case), 0, ReturnStatement(return), sinQ, xa, xb, SwitchCase(case), 1, ReturnStatement(return), cosQ, xa, xb, SwitchCase(case), 2, ReturnStatement(return), sinQ, xa, xb, SwitchCase(case), 3, ReturnStatement(return), cosQ, xa, xb, SwitchCase(default), ReturnStatement(return), Double.NaN]
org.apache.commons.math4.util:FastMath:cos:double#[VariableDeclarationStatement(), int, quadrant, 0, VariableDeclarationStatement(), double, xa, x, IfStatement(if), x, 0, ExpressionStatement(), xa, xa, IfStatement(if), xa, xa, xa, Double.POSITIVE_INFINITY, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), double, xb, 0, IfStatement(if), xa, 3294198.0, VariableDeclarationStatement(), double, reduceResults, double, 3, ExpressionStatement(), reducePayneHanek, xa, reduceResults, ExpressionStatement(), quadrant, int, reduceResults, 0, 3, ExpressionStatement(), xa, reduceResults, 1, ExpressionStatement(), xb, reduceResults, 2, IfStatement(if), xa, 1.5707963267948966, VariableDeclarationStatement(), final, CodyWaite, cw, new, CodyWaite, xa, ExpressionStatement(), quadrant, cw, getK, 3, ExpressionStatement(), xa, cw, getRemA, ExpressionStatement(), xb, cw, getRemB, SwitchStatement(switch), quadrant, SwitchCase(case), 0, ReturnStatement(return), cosQ, xa, xb, SwitchCase(case), 1, ReturnStatement(return), sinQ, xa, xb, SwitchCase(case), 2, ReturnStatement(return), cosQ, xa, xb, SwitchCase(case), 3, ReturnStatement(return), sinQ, xa, xb, SwitchCase(default), ReturnStatement(return), Double.NaN]
org.apache.commons.math4.util:FastMath:tan:double#[VariableDeclarationStatement(), boolean, negative, false, VariableDeclarationStatement(), int, quadrant, 0, VariableDeclarationStatement(), double, xa, x, IfStatement(if), x, 0, ExpressionStatement(), negative, true, ExpressionStatement(), xa, xa, IfStatement(if), xa, 0.0, VariableDeclarationStatement(), long, bits, Double, doubleToRawLongBits, x, IfStatement(if), bits, 0, ReturnStatement(return), 0.0, ReturnStatement(return), 0.0, IfStatement(if), xa, xa, xa, Double.POSITIVE_INFINITY, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), double, xb, 0, IfStatement(if), xa, 3294198.0, VariableDeclarationStatement(), double, reduceResults, double, 3, ExpressionStatement(), reducePayneHanek, xa, reduceResults, ExpressionStatement(), quadrant, int, reduceResults, 0, 3, ExpressionStatement(), xa, reduceResults, 1, ExpressionStatement(), xb, reduceResults, 2, IfStatement(if), xa, 1.5707963267948966, VariableDeclarationStatement(), final, CodyWaite, cw, new, CodyWaite, xa, ExpressionStatement(), quadrant, cw, getK, 3, ExpressionStatement(), xa, cw, getRemA, ExpressionStatement(), xb, cw, getRemB, IfStatement(if), xa, 1.5, VariableDeclarationStatement(), final, double, pi2a, 1.5707963267948966, VariableDeclarationStatement(), final, double, pi2b, 6.123233995736766E-17, VariableDeclarationStatement(), final, double, a, pi2a, xa, VariableDeclarationStatement(), double, b, a, pi2a, xa, ExpressionStatement(), b, pi2b, xb, ExpressionStatement(), xa, a, b, ExpressionStatement(), xb, xa, a, b, ExpressionStatement(), quadrant, 1, ExpressionStatement(), negative, true, VariableDeclarationStatement(), double, result, IfStatement(if), quadrant, 1, 0, ExpressionStatement(), result, tanQ, xa, xb, false, ExpressionStatement(), result, tanQ, xa, xb, true, IfStatement(if), negative, ExpressionStatement(), result, result, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:atan:double#[ReturnStatement(return), atan, x, 0.0, false]
org.apache.commons.math4.util:FastMath:atan:double+double+boolean#[IfStatement(if), xa, 0.0, ReturnStatement(return), leftPlane, copySign, Math.PI, xa, xa, VariableDeclarationStatement(), final, boolean, negate, IfStatement(if), xa, 0, ExpressionStatement(), xa, xa, ExpressionStatement(), xb, xb, ExpressionStatement(), negate, true, ExpressionStatement(), negate, false, IfStatement(if), xa, 1.633123935319537E16, ReturnStatement(return), negate, leftPlane, Math.PI, F_1_2, Math.PI, F_1_2, VariableDeclarationStatement(), final, int, idx, IfStatement(if), xa, 1, ExpressionStatement(), idx, int, 1.7168146928204136, xa, xa, 8.0, xa, 0.5, VariableDeclarationStatement(), final, double, oneOverXa, 1, xa, ExpressionStatement(), idx, int, 1.7168146928204136, oneOverXa, oneOverXa, 8.0, oneOverXa, 13.07, VariableDeclarationStatement(), final, double, ttA, TANGENT_TABLE_A, idx, VariableDeclarationStatement(), final, double, ttB, TANGENT_TABLE_B, idx, VariableDeclarationStatement(), double, epsA, xa, ttA, VariableDeclarationStatement(), double, epsB, epsA, xa, ttA, ExpressionStatement(), epsB, xb, ttB, VariableDeclarationStatement(), double, temp, epsA, epsB, ExpressionStatement(), epsB, temp, epsA, epsB, ExpressionStatement(), epsA, temp, ExpressionStatement(), temp, xa, HEX_40000000, VariableDeclarationStatement(), double, ya, xa, temp, temp, VariableDeclarationStatement(), double, yb, xb, xa, ya, ExpressionStatement(), xa, ya, ExpressionStatement(), xb, yb, IfStatement(if), idx, 0, VariableDeclarationStatement(), final, double, denom, 1d, 1d, xa, xb, ttA, ttB, ExpressionStatement(), ya, epsA, denom, ExpressionStatement(), yb, epsB, denom, VariableDeclarationStatement(), double, temp2, xa, ttA, VariableDeclarationStatement(), double, za, 1d, temp2, VariableDeclarationStatement(), double, zb, za, 1d, temp2, ExpressionStatement(), temp2, xb, ttA, xa, ttB, ExpressionStatement(), temp, za, temp2, ExpressionStatement(), zb, temp, za, temp2, ExpressionStatement(), za, temp, ExpressionStatement(), zb, xb, ttB, ExpressionStatement(), ya, epsA, za, ExpressionStatement(), temp, ya, HEX_40000000, VariableDeclarationStatement(), final, double, yaa, ya, temp, temp, VariableDeclarationStatement(), final, double, yab, ya, yaa, ExpressionStatement(), temp, za, HEX_40000000, VariableDeclarationStatement(), final, double, zaa, za, temp, temp, VariableDeclarationStatement(), final, double, zab, za, zaa, ExpressionStatement(), yb, epsA, yaa, zaa, yaa, zab, yab, zaa, yab, zab, za, ExpressionStatement(), yb, epsA, zb, za, za, ExpressionStatement(), yb, epsB, za, ExpressionStatement(), epsA, ya, ExpressionStatement(), epsB, yb, VariableDeclarationStatement(), final, double, epsA2, epsA, epsA, ExpressionStatement(), yb, 0.07490822288864472, ExpressionStatement(), yb, yb, epsA2, 0.09088450866185192, ExpressionStatement(), yb, yb, epsA2, 0.11111095942313305, ExpressionStatement(), yb, yb, epsA2, 0.1428571423679182, ExpressionStatement(), yb, yb, epsA2, 0.19999999999923582, ExpressionStatement(), yb, yb, epsA2, 0.33333333333333287, ExpressionStatement(), yb, yb, epsA2, epsA, ExpressionStatement(), ya, epsA, ExpressionStatement(), temp, ya, yb, ExpressionStatement(), yb, temp, ya, yb, ExpressionStatement(), ya, temp, ExpressionStatement(), yb, epsB, 1d, epsA, epsA, VariableDeclarationStatement(), final, double, eighths, EIGHTHS, idx, VariableDeclarationStatement(), double, za, eighths, ya, VariableDeclarationStatement(), double, zb, za, eighths, ya, ExpressionStatement(), temp, za, yb, ExpressionStatement(), zb, temp, za, yb, ExpressionStatement(), za, temp, VariableDeclarationStatement(), double, result, za, zb, IfStatement(if), leftPlane, VariableDeclarationStatement(), final, double, resultb, result, za, zb, VariableDeclarationStatement(), final, double, pia, 1.5707963267948966, 2, VariableDeclarationStatement(), final, double, pib, 6.123233995736766E-17, 2, ExpressionStatement(), za, pia, result, ExpressionStatement(), zb, za, pia, result, ExpressionStatement(), zb, pib, resultb, ExpressionStatement(), result, za, zb, IfStatement(if), negate, leftPlane, ExpressionStatement(), result, result, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:atan2:double+double#[IfStatement(if), Double, isNaN, x, Double, isNaN, y, ReturnStatement(return), Double.NaN, IfStatement(if), y, 0, VariableDeclarationStatement(), final, double, result, x, y, VariableDeclarationStatement(), final, double, invx, 1d, x, VariableDeclarationStatement(), final, double, invy, 1d, y, IfStatement(if), invx, 0, IfStatement(if), x, 0, ReturnStatement(return), y, ReturnStatement(return), copySign, Math.PI, y, IfStatement(if), x, 0, invx, 0, IfStatement(if), y, 0, invy, 0, ReturnStatement(return), Math.PI, ReturnStatement(return), Math.PI, ReturnStatement(return), result, IfStatement(if), y, Double.POSITIVE_INFINITY, IfStatement(if), x, Double.POSITIVE_INFINITY, ReturnStatement(return), Math.PI, F_1_4, IfStatement(if), x, Double.NEGATIVE_INFINITY, ReturnStatement(return), Math.PI, F_3_4, ReturnStatement(return), Math.PI, F_1_2, IfStatement(if), y, Double.NEGATIVE_INFINITY, IfStatement(if), x, Double.POSITIVE_INFINITY, ReturnStatement(return), Math.PI, F_1_4, IfStatement(if), x, Double.NEGATIVE_INFINITY, ReturnStatement(return), Math.PI, F_3_4, ReturnStatement(return), Math.PI, F_1_2, IfStatement(if), x, Double.POSITIVE_INFINITY, IfStatement(if), y, 0, 1, y, 0, ReturnStatement(return), 0d, IfStatement(if), y, 0, 1, y, 0, ReturnStatement(return), 0d, IfStatement(if), x, Double.NEGATIVE_INFINITY, IfStatement(if), y, 0.0, 1, y, 0.0, ReturnStatement(return), Math.PI, IfStatement(if), y, 0, 1, y, 0, ReturnStatement(return), Math.PI, IfStatement(if), x, 0, IfStatement(if), y, 0, 1, y, 0, ReturnStatement(return), Math.PI, F_1_2, IfStatement(if), y, 0, 1, y, 0, ReturnStatement(return), Math.PI, F_1_2, VariableDeclarationStatement(), final, double, r, y, x, IfStatement(if), Double, isInfinite, r, ReturnStatement(return), atan, r, 0, x, 0, VariableDeclarationStatement(), double, ra, doubleHighPart, r, VariableDeclarationStatement(), double, rb, r, ra, VariableDeclarationStatement(), final, double, xa, doubleHighPart, x, VariableDeclarationStatement(), final, double, xb, x, xa, ExpressionStatement(), rb, y, ra, xa, ra, xb, rb, xa, rb, xb, x, VariableDeclarationStatement(), final, double, temp, ra, rb, ExpressionStatement(), rb, temp, ra, rb, ExpressionStatement(), ra, temp, IfStatement(if), ra, 0, ExpressionStatement(), ra, copySign, 0d, y, VariableDeclarationStatement(), final, double, result, atan, ra, rb, x, 0, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:asin:double#[IfStatement(if), Double, isNaN, x, ReturnStatement(return), Double.NaN, IfStatement(if), x, 1.0, x, 1.0, ReturnStatement(return), Double.NaN, IfStatement(if), x, 1.0, ReturnStatement(return), Math.PI, 2.0, IfStatement(if), x, 1.0, ReturnStatement(return), Math.PI, 2.0, IfStatement(if), x, 0.0, ReturnStatement(return), x, VariableDeclarationStatement(), double, temp, x, HEX_40000000, VariableDeclarationStatement(), final, double, xa, x, temp, temp, VariableDeclarationStatement(), final, double, xb, x, xa, VariableDeclarationStatement(), double, ya, xa, xa, VariableDeclarationStatement(), double, yb, xa, xb, 2.0, xb, xb, ExpressionStatement(), ya, ya, ExpressionStatement(), yb, yb, VariableDeclarationStatement(), double, za, 1.0, ya, VariableDeclarationStatement(), double, zb, za, 1.0, ya, ExpressionStatement(), temp, za, yb, ExpressionStatement(), zb, temp, za, yb, ExpressionStatement(), za, temp, VariableDeclarationStatement(), double, y, ExpressionStatement(), y, sqrt, za, ExpressionStatement(), temp, y, HEX_40000000, ExpressionStatement(), ya, y, temp, temp, ExpressionStatement(), yb, y, ya, ExpressionStatement(), yb, za, ya, ya, 2, ya, yb, yb, yb, 2.0, y, VariableDeclarationStatement(), double, dx, zb, 2.0, y, VariableDeclarationStatement(), double, r, x, y, ExpressionStatement(), temp, r, HEX_40000000, VariableDeclarationStatement(), double, ra, r, temp, temp, VariableDeclarationStatement(), double, rb, r, ra, ExpressionStatement(), rb, x, ra, ya, ra, yb, rb, ya, rb, yb, y, ExpressionStatement(), rb, x, dx, y, y, ExpressionStatement(), temp, ra, rb, ExpressionStatement(), rb, temp, ra, rb, ExpressionStatement(), ra, temp, ReturnStatement(return), atan, ra, rb, false]
org.apache.commons.math4.util:FastMath:acos:double#[IfStatement(if), Double, isNaN, x, ReturnStatement(return), Double.NaN, IfStatement(if), x, 1.0, x, 1.0, ReturnStatement(return), Double.NaN, IfStatement(if), x, 1.0, ReturnStatement(return), Math.PI, IfStatement(if), x, 1.0, ReturnStatement(return), 0.0, IfStatement(if), x, 0, ReturnStatement(return), Math.PI, 2.0, VariableDeclarationStatement(), double, temp, x, HEX_40000000, VariableDeclarationStatement(), final, double, xa, x, temp, temp, VariableDeclarationStatement(), final, double, xb, x, xa, VariableDeclarationStatement(), double, ya, xa, xa, VariableDeclarationStatement(), double, yb, xa, xb, 2.0, xb, xb, ExpressionStatement(), ya, ya, ExpressionStatement(), yb, yb, VariableDeclarationStatement(), double, za, 1.0, ya, VariableDeclarationStatement(), double, zb, za, 1.0, ya, ExpressionStatement(), temp, za, yb, ExpressionStatement(), zb, temp, za, yb, ExpressionStatement(), za, temp, VariableDeclarationStatement(), double, y, sqrt, za, ExpressionStatement(), temp, y, HEX_40000000, ExpressionStatement(), ya, y, temp, temp, ExpressionStatement(), yb, y, ya, ExpressionStatement(), yb, za, ya, ya, 2, ya, yb, yb, yb, 2.0, y, ExpressionStatement(), yb, zb, 2.0, y, ExpressionStatement(), y, ya, yb, ExpressionStatement(), yb, y, ya, yb, VariableDeclarationStatement(), double, r, y, x, IfStatement(if), Double, isInfinite, r, ReturnStatement(return), Math.PI, 2, VariableDeclarationStatement(), double, ra, doubleHighPart, r, VariableDeclarationStatement(), double, rb, r, ra, ExpressionStatement(), rb, y, ra, xa, ra, xb, rb, xa, rb, xb, x, ExpressionStatement(), rb, yb, x, ExpressionStatement(), temp, ra, rb, ExpressionStatement(), rb, temp, ra, rb, ExpressionStatement(), ra, temp, ReturnStatement(return), atan, ra, rb, x, 0]
org.apache.commons.math4.util:FastMath:cbrt:double#[VariableDeclarationStatement(), long, inbits, Double, doubleToRawLongBits, x, VariableDeclarationStatement(), int, exponent, int, inbits, 52, 0x7ff, 1023, VariableDeclarationStatement(), boolean, subnormal, false, IfStatement(if), exponent, 1023, IfStatement(if), x, 0, ReturnStatement(return), x, ExpressionStatement(), subnormal, true, ExpressionStatement(), x, 1.8014398509481984E16, ExpressionStatement(), inbits, Double, doubleToRawLongBits, x, ExpressionStatement(), exponent, int, inbits, 52, 0x7ff, 1023, IfStatement(if), exponent, 1024, ReturnStatement(return), x, VariableDeclarationStatement(), int, exp3, exponent, 3, VariableDeclarationStatement(), double, p2, Double, longBitsToDouble, inbits, 0x8000000000000000L, long, exp3, 1023, 0x7ff, 52, VariableDeclarationStatement(), final, double, mant, Double, longBitsToDouble, inbits, 0x000fffffffffffffL, 0x3ff0000000000000L, VariableDeclarationStatement(), double, est, 0.010714690733195933, ExpressionStatement(), est, est, mant, 0.0875862700108075, ExpressionStatement(), est, est, mant, 0.3058015757857271, ExpressionStatement(), est, est, mant, 0.7249995199969751, ExpressionStatement(), est, est, mant, 0.5039018405998233, ExpressionStatement(), est, CBRTTWO, exponent, 3, 2, VariableDeclarationStatement(), final, double, xs, x, p2, p2, p2, ExpressionStatement(), est, xs, est, est, est, 3, est, est, ExpressionStatement(), est, xs, est, est, est, 3, est, est, VariableDeclarationStatement(), double, temp, est, HEX_40000000, VariableDeclarationStatement(), double, ya, est, temp, temp, VariableDeclarationStatement(), double, yb, est, ya, VariableDeclarationStatement(), double, za, ya, ya, VariableDeclarationStatement(), double, zb, ya, yb, 2.0, yb, yb, ExpressionStatement(), temp, za, HEX_40000000, VariableDeclarationStatement(), double, temp2, za, temp, temp, ExpressionStatement(), zb, za, temp2, ExpressionStatement(), za, temp2, ExpressionStatement(), zb, za, yb, ya, zb, zb, yb, ExpressionStatement(), za, ya, VariableDeclarationStatement(), double, na, xs, za, VariableDeclarationStatement(), double, nb, na, xs, za, ExpressionStatement(), nb, zb, ExpressionStatement(), est, na, nb, 3, est, est, ExpressionStatement(), est, p2, IfStatement(if), subnormal, ExpressionStatement(), est, 3.814697265625E-6, ReturnStatement(return), est]
org.apache.commons.math4.util:FastMath:toRadians:double#[IfStatement(if), Double, isInfinite, x, x, 0.0, ReturnStatement(return), x, VariableDeclarationStatement(), final, double, facta, 0.01745329052209854, VariableDeclarationStatement(), final, double, factb, 1.997844754509471E-9, VariableDeclarationStatement(), double, xa, doubleHighPart, x, VariableDeclarationStatement(), double, xb, x, xa, VariableDeclarationStatement(), double, result, xb, factb, xb, facta, xa, factb, xa, facta, IfStatement(if), result, 0, ExpressionStatement(), result, x, ReturnStatement(return), result]
org.apache.commons.math4.util:FastMath:toDegrees:double#[IfStatement(if), Double, isInfinite, x, x, 0.0, ReturnStatement(return), x, VariableDeclarationStatement(), final, double, facta, 57.2957763671875, VariableDeclarationStatement(), final, double, factb, 3.145894820876798E-6, VariableDeclarationStatement(), double, xa, doubleHighPart, x, VariableDeclarationStatement(), double, xb, x, xa, ReturnStatement(return), xb, factb, xb, facta, xa, factb, xa, facta]
org.apache.commons.math4.util:FastMath:abs:int#[VariableDeclarationStatement(), final, int, i, x, 31, ReturnStatement(return), x, i, 1, i]
org.apache.commons.math4.util:FastMath:abs:long#[VariableDeclarationStatement(), final, long, l, x, 63, ReturnStatement(return), x, l, 1, l]
org.apache.commons.math4.util:FastMath:abs:float#[ReturnStatement(return), Float, intBitsToFloat, MASK_NON_SIGN_INT, Float, floatToRawIntBits, x]
org.apache.commons.math4.util:FastMath:abs:double#[ReturnStatement(return), Double, longBitsToDouble, MASK_NON_SIGN_LONG, Double, doubleToRawLongBits, x]
org.apache.commons.math4.util:FastMath:ulp:double#[IfStatement(if), Double, isInfinite, x, ReturnStatement(return), Double.POSITIVE_INFINITY, ReturnStatement(return), abs, x, Double, longBitsToDouble, Double, doubleToRawLongBits, x, 1]
org.apache.commons.math4.util:FastMath:ulp:float#[IfStatement(if), Float, isInfinite, x, ReturnStatement(return), Float.POSITIVE_INFINITY, ReturnStatement(return), abs, x, Float, intBitsToFloat, Float, floatToIntBits, x, 1]
org.apache.commons.math4.util:FastMath:scalb:double+int#[IfStatement(if), n, 1023, n, 1024, ReturnStatement(return), d, Double, longBitsToDouble, long, n, 1023, 52, IfStatement(if), Double, isNaN, d, Double, isInfinite, d, d, 0, ReturnStatement(return), d, IfStatement(if), n, 2098, ReturnStatement(return), d, 0, 0.0, 0.0, IfStatement(if), n, 2097, ReturnStatement(return), d, 0, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, long, bits, Double, doubleToRawLongBits, d, VariableDeclarationStatement(), final, long, sign, bits, 0x8000000000000000L, VariableDeclarationStatement(), int, exponent, int, bits, 52, 0x7ff, VariableDeclarationStatement(), long, mantissa, bits, 0x000fffffffffffffL, VariableDeclarationStatement(), int, scaledExponent, exponent, n, IfStatement(if), n, 0, IfStatement(if), scaledExponent, 0, ReturnStatement(return), Double, longBitsToDouble, sign, long, scaledExponent, 52, mantissa, IfStatement(if), scaledExponent, 53, ExpressionStatement(), mantissa, 1L, 52, VariableDeclarationStatement(), final, long, mostSignificantLostBit, mantissa, 1L, scaledExponent, ExpressionStatement(), mantissa, 1, scaledExponent, IfStatement(if), mostSignificantLostBit, 0, ExpressionStatement(), mantissa, ReturnStatement(return), Double, longBitsToDouble, sign, mantissa, ReturnStatement(return), sign, 0L, 0.0, 0.0, IfStatement(if), exponent, 0, WhileStatement(while), mantissa, 52, 1, ExpressionStatement(), mantissa, 1, ExpressionStatement(), scaledExponent, ExpressionStatement(), scaledExponent, ExpressionStatement(), mantissa, 0x000fffffffffffffL, IfStatement(if), scaledExponent, 2047, ReturnStatement(return), Double, longBitsToDouble, sign, long, scaledExponent, 52, mantissa, ReturnStatement(return), sign, 0L, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, IfStatement(if), scaledExponent, 2047, ReturnStatement(return), Double, longBitsToDouble, sign, long, scaledExponent, 52, mantissa, ReturnStatement(return), sign, 0L, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:scalb:float+int#[IfStatement(if), n, 127, n, 128, ReturnStatement(return), f, Float, intBitsToFloat, n, 127, 23, IfStatement(if), Float, isNaN, f, Float, isInfinite, f, f, 0f, ReturnStatement(return), f, IfStatement(if), n, 277, ReturnStatement(return), f, 0, 0.0f, 0.0f, IfStatement(if), n, 276, ReturnStatement(return), f, 0, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, VariableDeclarationStatement(), final, int, bits, Float, floatToIntBits, f, VariableDeclarationStatement(), final, int, sign, bits, 0x80000000, VariableDeclarationStatement(), int, exponent, bits, 23, 0xff, VariableDeclarationStatement(), int, mantissa, bits, 0x007fffff, VariableDeclarationStatement(), int, scaledExponent, exponent, n, IfStatement(if), n, 0, IfStatement(if), scaledExponent, 0, ReturnStatement(return), Float, intBitsToFloat, sign, scaledExponent, 23, mantissa, IfStatement(if), scaledExponent, 24, ExpressionStatement(), mantissa, 1, 23, VariableDeclarationStatement(), final, int, mostSignificantLostBit, mantissa, 1, scaledExponent, ExpressionStatement(), mantissa, 1, scaledExponent, IfStatement(if), mostSignificantLostBit, 0, ExpressionStatement(), mantissa, ReturnStatement(return), Float, intBitsToFloat, sign, mantissa, ReturnStatement(return), sign, 0, 0.0f, 0.0f, IfStatement(if), exponent, 0, WhileStatement(while), mantissa, 23, 1, ExpressionStatement(), mantissa, 1, ExpressionStatement(), scaledExponent, ExpressionStatement(), scaledExponent, ExpressionStatement(), mantissa, 0x007fffff, IfStatement(if), scaledExponent, 255, ReturnStatement(return), Float, intBitsToFloat, sign, scaledExponent, 23, mantissa, ReturnStatement(return), sign, 0, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, IfStatement(if), scaledExponent, 255, ReturnStatement(return), Float, intBitsToFloat, sign, scaledExponent, 23, mantissa, ReturnStatement(return), sign, 0, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY]
org.apache.commons.math4.util:FastMath:nextAfter:double+double#[IfStatement(if), Double, isNaN, d, Double, isNaN, direction, ReturnStatement(return), Double.NaN, IfStatement(if), d, direction, ReturnStatement(return), direction, IfStatement(if), Double, isInfinite, d, ReturnStatement(return), d, 0, Double.MAX_VALUE, Double.MAX_VALUE, IfStatement(if), d, 0, ReturnStatement(return), direction, 0, Double.MIN_VALUE, Double.MIN_VALUE, VariableDeclarationStatement(), final, long, bits, Double, doubleToRawLongBits, d, VariableDeclarationStatement(), final, long, sign, bits, 0x8000000000000000L, IfStatement(if), direction, d, sign, 0L, ReturnStatement(return), Double, longBitsToDouble, sign, bits, 0x7fffffffffffffffL, 1, ReturnStatement(return), Double, longBitsToDouble, sign, bits, 0x7fffffffffffffffL, 1]
org.apache.commons.math4.util:FastMath:nextAfter:float+double#[IfStatement(if), Double, isNaN, f, Double, isNaN, direction, ReturnStatement(return), Float.NaN, IfStatement(if), f, direction, ReturnStatement(return), float, direction, IfStatement(if), Float, isInfinite, f, ReturnStatement(return), f, 0f, Float.MAX_VALUE, Float.MAX_VALUE, IfStatement(if), f, 0f, ReturnStatement(return), direction, 0, Float.MIN_VALUE, Float.MIN_VALUE, VariableDeclarationStatement(), final, int, bits, Float, floatToIntBits, f, VariableDeclarationStatement(), final, int, sign, bits, 0x80000000, IfStatement(if), direction, f, sign, 0, ReturnStatement(return), Float, intBitsToFloat, sign, bits, 0x7fffffff, 1, ReturnStatement(return), Float, intBitsToFloat, sign, bits, 0x7fffffff, 1]
org.apache.commons.math4.util:FastMath:floor:double#[VariableDeclarationStatement(), long, y, IfStatement(if), Double, isNaN, x, ReturnStatement(return), x, IfStatement(if), x, TWO_POWER_52, x, TWO_POWER_52, ReturnStatement(return), x, ExpressionStatement(), y, long, x, IfStatement(if), x, 0, y, x, ExpressionStatement(), y, IfStatement(if), y, 0, ReturnStatement(return), x, y, ReturnStatement(return), y]
org.apache.commons.math4.util:FastMath:ceil:double#[VariableDeclarationStatement(), double, y, IfStatement(if), Double, isNaN, x, ReturnStatement(return), x, ExpressionStatement(), y, floor, x, IfStatement(if), y, x, ReturnStatement(return), y, ExpressionStatement(), y, 1.0, IfStatement(if), y, 0, ReturnStatement(return), x, y, ReturnStatement(return), y]
org.apache.commons.math4.util:FastMath:rint:double#[VariableDeclarationStatement(), double, y, floor, x, VariableDeclarationStatement(), double, d, x, y, IfStatement(if), d, 0.5, IfStatement(if), y, 1.0, ReturnStatement(return), 0.0, ReturnStatement(return), y, 1.0, IfStatement(if), d, 0.5, ReturnStatement(return), y, VariableDeclarationStatement(), long, z, long, y, ReturnStatement(return), z, 1, 0, y, y, 1.0]
org.apache.commons.math4.util:FastMath:round:double#[ReturnStatement(return), long, floor, x, 0.5]
org.apache.commons.math4.util:FastMath:round:float#[ReturnStatement(return), int, floor, x, 0.5f]
org.apache.commons.math4.util:FastMath:min:int+int#[ReturnStatement(return), a, b, a, b]
org.apache.commons.math4.util:FastMath:min:long+long#[ReturnStatement(return), a, b, a, b]
org.apache.commons.math4.util:FastMath:min:float+float#[IfStatement(if), a, b, ReturnStatement(return), b, IfStatement(if), a, b, ReturnStatement(return), a, IfStatement(if), a, b, ReturnStatement(return), Float.NaN, VariableDeclarationStatement(), int, bits, Float, floatToRawIntBits, a, IfStatement(if), bits, 0x80000000, ReturnStatement(return), a, ReturnStatement(return), b]
org.apache.commons.math4.util:FastMath:min:double+double#[IfStatement(if), a, b, ReturnStatement(return), b, IfStatement(if), a, b, ReturnStatement(return), a, IfStatement(if), a, b, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), long, bits, Double, doubleToRawLongBits, a, IfStatement(if), bits, 0x8000000000000000L, ReturnStatement(return), a, ReturnStatement(return), b]
org.apache.commons.math4.util:FastMath:max:int+int#[ReturnStatement(return), a, b, b, a]
org.apache.commons.math4.util:FastMath:max:long+long#[ReturnStatement(return), a, b, b, a]
org.apache.commons.math4.util:FastMath:max:float+float#[IfStatement(if), a, b, ReturnStatement(return), a, IfStatement(if), a, b, ReturnStatement(return), b, IfStatement(if), a, b, ReturnStatement(return), Float.NaN, VariableDeclarationStatement(), int, bits, Float, floatToRawIntBits, a, IfStatement(if), bits, 0x80000000, ReturnStatement(return), b, ReturnStatement(return), a]
org.apache.commons.math4.util:FastMath:max:double+double#[IfStatement(if), a, b, ReturnStatement(return), a, IfStatement(if), a, b, ReturnStatement(return), b, IfStatement(if), a, b, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), long, bits, Double, doubleToRawLongBits, a, IfStatement(if), bits, 0x8000000000000000L, ReturnStatement(return), b, ReturnStatement(return), a]
org.apache.commons.math4.util:FastMath:hypot:double+double#[IfStatement(if), Double, isInfinite, x, Double, isInfinite, y, ReturnStatement(return), Double.POSITIVE_INFINITY, IfStatement(if), Double, isNaN, x, Double, isNaN, y, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), final, int, expX, getExponent, x, VariableDeclarationStatement(), final, int, expY, getExponent, y, IfStatement(if), expX, expY, 27, ReturnStatement(return), abs, x, IfStatement(if), expY, expX, 27, ReturnStatement(return), abs, y, VariableDeclarationStatement(), final, int, middleExp, expX, expY, 2, VariableDeclarationStatement(), final, double, scaledX, scalb, x, middleExp, VariableDeclarationStatement(), final, double, scaledY, scalb, y, middleExp, VariableDeclarationStatement(), final, double, scaledH, sqrt, scaledX, scaledX, scaledY, scaledY, ReturnStatement(return), scalb, scaledH, middleExp]
org.apache.commons.math4.util:FastMath:IEEEremainder:double+double#[IfStatement(if), getExponent, dividend, 1024, getExponent, divisor, 1024, divisor, 0.0, IfStatement(if), Double, isInfinite, divisor, Double, isInfinite, dividend, ReturnStatement(return), dividend, ReturnStatement(return), Double.NaN, VariableDeclarationStatement(), final, double, n, FastMath, rint, dividend, divisor, VariableDeclarationStatement(), final, double, remainder, Double, isInfinite, n, 0.0, dividend, divisor, n, ReturnStatement(return), remainder, 0, FastMath, copySign, remainder, dividend, remainder]
org.apache.commons.math4.util:FastMath:toIntExact:long#[IfStatement(if), n, Integer.MIN_VALUE, n, Integer.MAX_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW, ReturnStatement(return), int, n]
org.apache.commons.math4.util:FastMath:incrementExact:int#[IfStatement(if), n, Integer.MAX_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, n, 1, ReturnStatement(return), n, 1]
org.apache.commons.math4.util:FastMath:incrementExact:long#[IfStatement(if), n, Long.MAX_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, n, 1, ReturnStatement(return), n, 1]
org.apache.commons.math4.util:FastMath:decrementExact:int#[IfStatement(if), n, Integer.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, n, 1, ReturnStatement(return), n, 1]
org.apache.commons.math4.util:FastMath:decrementExact:long#[IfStatement(if), n, Long.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, n, 1, ReturnStatement(return), n, 1]
org.apache.commons.math4.util:FastMath:addExact:int+int#[VariableDeclarationStatement(), final, int, sum, a, b, IfStatement(if), a, b, 0, sum, b, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, a, b, ReturnStatement(return), sum]
org.apache.commons.math4.util:FastMath:addExact:long+long#[VariableDeclarationStatement(), final, long, sum, a, b, IfStatement(if), a, b, 0, sum, b, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_ADDITION, a, b, ReturnStatement(return), sum]
org.apache.commons.math4.util:FastMath:subtractExact:int+int#[VariableDeclarationStatement(), final, int, sub, a, b, IfStatement(if), a, b, 0, sub, b, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, a, b, ReturnStatement(return), sub]
org.apache.commons.math4.util:FastMath:subtractExact:long+long#[VariableDeclarationStatement(), final, long, sub, a, b, IfStatement(if), a, b, 0, sub, b, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_SUBTRACTION, a, b, ReturnStatement(return), sub]
org.apache.commons.math4.util:FastMath:multiplyExact:int+int#[IfStatement(if), b, 0, a, Integer.MAX_VALUE, b, a, Integer.MIN_VALUE, b, b, 1, a, Integer.MIN_VALUE, b, a, Integer.MAX_VALUE, b, b, 1, a, Integer.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_MULTIPLICATION, a, b, ReturnStatement(return), a, b]
org.apache.commons.math4.util:FastMath:multiplyExact:long+long#[IfStatement(if), b, 0l, a, Long.MAX_VALUE, b, a, Long.MIN_VALUE, b, b, 1l, a, Long.MIN_VALUE, b, a, Long.MAX_VALUE, b, b, 1l, a, Long.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW_IN_MULTIPLICATION, a, b, ReturnStatement(return), a, b]
org.apache.commons.math4.util:FastMath:floorDiv:int+int#[IfStatement(if), b, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, VariableDeclarationStatement(), final, int, m, a, b, IfStatement(if), a, b, 0, m, 0, ReturnStatement(return), a, b, ReturnStatement(return), a, b, 1]
org.apache.commons.math4.util:FastMath:floorDiv:long+long#[IfStatement(if), b, 0l, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, VariableDeclarationStatement(), final, long, m, a, b, IfStatement(if), a, b, 0l, m, 0l, ReturnStatement(return), a, b, ReturnStatement(return), a, b, 1l]
org.apache.commons.math4.util:FastMath:floorMod:int+int#[IfStatement(if), b, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, VariableDeclarationStatement(), final, int, m, a, b, IfStatement(if), a, b, 0, m, 0, ReturnStatement(return), m, ReturnStatement(return), b, m]
org.apache.commons.math4.util:FastMath:floorMod:long+long#[IfStatement(if), b, 0l, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ZERO_DENOMINATOR, VariableDeclarationStatement(), final, long, m, a, b, IfStatement(if), a, b, 0l, m, 0l, ReturnStatement(return), m, ReturnStatement(return), b, m]
org.apache.commons.math4.util:FastMath:copySign:double+double#[VariableDeclarationStatement(), final, long, m, Double, doubleToRawLongBits, magnitude, VariableDeclarationStatement(), final, long, s, Double, doubleToRawLongBits, sign, IfStatement(if), m, s, 0, ReturnStatement(return), magnitude, ReturnStatement(return), magnitude]
org.apache.commons.math4.util:FastMath:copySign:float+float#[VariableDeclarationStatement(), final, int, m, Float, floatToRawIntBits, magnitude, VariableDeclarationStatement(), final, int, s, Float, floatToRawIntBits, sign, IfStatement(if), m, s, 0, ReturnStatement(return), magnitude, ReturnStatement(return), magnitude]
org.apache.commons.math4.util:FastMath:getExponent:double#[ReturnStatement(return), int, Double, doubleToRawLongBits, d, 52, 0x7ff, 1023]
org.apache.commons.math4.util:FastMath:getExponent:float#[ReturnStatement(return), Float, floatToRawIntBits, f, 23, 0xff, 127]
org.apache.commons.math4.util:FastMathCalc:buildSinCosTables:double[]+double[]+double[]+double[]+int+double[]+double[]#[VariableDeclarationStatement(), final, double, result, double, 2, ForStatement(for), int, i, 0, i, 7, i, VariableDeclarationStatement(), double, x, i, 8.0, ExpressionStatement(), slowSin, x, result, ExpressionStatement(), SINE_TABLE_A, i, result, 0, ExpressionStatement(), SINE_TABLE_B, i, result, 1, ExpressionStatement(), slowCos, x, result, ExpressionStatement(), COSINE_TABLE_A, i, result, 0, ExpressionStatement(), COSINE_TABLE_B, i, result, 1, ForStatement(for), int, i, 7, i, SINE_TABLE_LEN, i, VariableDeclarationStatement(), double, xs, double, 2, VariableDeclarationStatement(), double, ys, double, 2, VariableDeclarationStatement(), double, as, double, 2, VariableDeclarationStatement(), double, bs, double, 2, VariableDeclarationStatement(), double, temps, double, 2, IfStatement(if), i, 1, 0, ExpressionStatement(), xs, 0, SINE_TABLE_A, i, 2, ExpressionStatement(), xs, 1, SINE_TABLE_B, i, 2, ExpressionStatement(), ys, 0, COSINE_TABLE_A, i, 2, ExpressionStatement(), ys, 1, COSINE_TABLE_B, i, 2, ExpressionStatement(), splitMult, xs, ys, result, ExpressionStatement(), SINE_TABLE_A, i, result, 0, 2.0, ExpressionStatement(), SINE_TABLE_B, i, result, 1, 2.0, ExpressionStatement(), splitMult, ys, ys, as, ExpressionStatement(), splitMult, xs, xs, temps, ExpressionStatement(), temps, 0, temps, 0, ExpressionStatement(), temps, 1, temps, 1, ExpressionStatement(), splitAdd, as, temps, result, ExpressionStatement(), COSINE_TABLE_A, i, result, 0, ExpressionStatement(), COSINE_TABLE_B, i, result, 1, ExpressionStatement(), xs, 0, SINE_TABLE_A, i, 2, ExpressionStatement(), xs, 1, SINE_TABLE_B, i, 2, ExpressionStatement(), ys, 0, COSINE_TABLE_A, i, 2, ExpressionStatement(), ys, 1, COSINE_TABLE_B, i, 2, ExpressionStatement(), as, 0, SINE_TABLE_A, i, 2, 1, ExpressionStatement(), as, 1, SINE_TABLE_B, i, 2, 1, ExpressionStatement(), bs, 0, COSINE_TABLE_A, i, 2, 1, ExpressionStatement(), bs, 1, COSINE_TABLE_B, i, 2, 1, ExpressionStatement(), splitMult, xs, bs, temps, ExpressionStatement(), splitMult, ys, as, result, ExpressionStatement(), splitAdd, result, temps, result, ExpressionStatement(), SINE_TABLE_A, i, result, 0, ExpressionStatement(), SINE_TABLE_B, i, result, 1, ExpressionStatement(), splitMult, ys, bs, result, ExpressionStatement(), splitMult, xs, as, temps, ExpressionStatement(), temps, 0, temps, 0, ExpressionStatement(), temps, 1, temps, 1, ExpressionStatement(), splitAdd, result, temps, result, ExpressionStatement(), COSINE_TABLE_A, i, result, 0, ExpressionStatement(), COSINE_TABLE_B, i, result, 1, ForStatement(for), int, i, 0, i, SINE_TABLE_LEN, i, VariableDeclarationStatement(), double, xs, double, 2, VariableDeclarationStatement(), double, ys, double, 2, VariableDeclarationStatement(), double, as, double, 2, ExpressionStatement(), as, 0, COSINE_TABLE_A, i, ExpressionStatement(), as, 1, COSINE_TABLE_B, i, ExpressionStatement(), splitReciprocal, as, ys, ExpressionStatement(), xs, 0, SINE_TABLE_A, i, ExpressionStatement(), xs, 1, SINE_TABLE_B, i, ExpressionStatement(), splitMult, xs, ys, as, ExpressionStatement(), TANGENT_TABLE_A, i, as, 0, ExpressionStatement(), TANGENT_TABLE_B, i, as, 1]
org.apache.commons.math4.util:FastMathCalc:slowCos:double+double#[VariableDeclarationStatement(), final, double, xs, double, 2, VariableDeclarationStatement(), final, double, ys, double, 2, VariableDeclarationStatement(), final, double, facts, double, 2, VariableDeclarationStatement(), final, double, as, double, 2, ExpressionStatement(), split, x, xs, ExpressionStatement(), ys, 0, ys, 1, 0.0, ForStatement(for), int, i, FACT.length, 1, i, 0, i, ExpressionStatement(), splitMult, xs, ys, as, ExpressionStatement(), ys, 0, as, 0, ExpressionStatement(), ys, 1, as, 1, IfStatement(if), i, 1, 0, ContinueStatement(continue), ExpressionStatement(), split, FACT, i, as, ExpressionStatement(), splitReciprocal, as, facts, IfStatement(if), i, 2, 0, ExpressionStatement(), facts, 0, facts, 0, ExpressionStatement(), facts, 1, facts, 1, ExpressionStatement(), splitAdd, ys, facts, as, ExpressionStatement(), ys, 0, as, 0, ExpressionStatement(), ys, 1, as, 1, IfStatement(if), result, null, ExpressionStatement(), result, 0, ys, 0, ExpressionStatement(), result, 1, ys, 1, ReturnStatement(return), ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:slowSin:double+double#[VariableDeclarationStatement(), final, double, xs, double, 2, VariableDeclarationStatement(), final, double, ys, double, 2, VariableDeclarationStatement(), final, double, facts, double, 2, VariableDeclarationStatement(), final, double, as, double, 2, ExpressionStatement(), split, x, xs, ExpressionStatement(), ys, 0, ys, 1, 0.0, ForStatement(for), int, i, FACT.length, 1, i, 0, i, ExpressionStatement(), splitMult, xs, ys, as, ExpressionStatement(), ys, 0, as, 0, ExpressionStatement(), ys, 1, as, 1, IfStatement(if), i, 1, 0, ContinueStatement(continue), ExpressionStatement(), split, FACT, i, as, ExpressionStatement(), splitReciprocal, as, facts, IfStatement(if), i, 2, 0, ExpressionStatement(), facts, 0, facts, 0, ExpressionStatement(), facts, 1, facts, 1, ExpressionStatement(), splitAdd, ys, facts, as, ExpressionStatement(), ys, 0, as, 0, ExpressionStatement(), ys, 1, as, 1, IfStatement(if), result, null, ExpressionStatement(), result, 0, ys, 0, ExpressionStatement(), result, 1, ys, 1, ReturnStatement(return), ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:slowexp:double+double#[VariableDeclarationStatement(), final, double, xs, double, 2, VariableDeclarationStatement(), final, double, ys, double, 2, VariableDeclarationStatement(), final, double, facts, double, 2, VariableDeclarationStatement(), final, double, as, double, 2, ExpressionStatement(), split, x, xs, ExpressionStatement(), ys, 0, ys, 1, 0.0, ForStatement(for), int, i, FACT.length, 1, i, 0, i, ExpressionStatement(), splitMult, xs, ys, as, ExpressionStatement(), ys, 0, as, 0, ExpressionStatement(), ys, 1, as, 1, ExpressionStatement(), split, FACT, i, as, ExpressionStatement(), splitReciprocal, as, facts, ExpressionStatement(), splitAdd, ys, facts, as, ExpressionStatement(), ys, 0, as, 0, ExpressionStatement(), ys, 1, as, 1, IfStatement(if), result, null, ExpressionStatement(), result, 0, ys, 0, ExpressionStatement(), result, 1, ys, 1, ReturnStatement(return), ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:split:double+double#[IfStatement(if), d, 8e298, d, 8e298, VariableDeclarationStatement(), final, double, a, d, HEX_40000000, ExpressionStatement(), split, 0, d, a, a, ExpressionStatement(), split, 1, d, split, 0, VariableDeclarationStatement(), final, double, a, d, 9.31322574615478515625E-10, ExpressionStatement(), split, 0, d, a, d, HEX_40000000, ExpressionStatement(), split, 1, d, split, 0]
org.apache.commons.math4.util:FastMathCalc:resplit:double#[VariableDeclarationStatement(), final, double, c, a, 0, a, 1, VariableDeclarationStatement(), final, double, d, c, a, 0, a, 1, IfStatement(if), c, 8e298, c, 8e298, VariableDeclarationStatement(), double, z, c, HEX_40000000, ExpressionStatement(), a, 0, c, z, z, ExpressionStatement(), a, 1, c, a, 0, d, VariableDeclarationStatement(), double, z, c, 9.31322574615478515625E-10, ExpressionStatement(), a, 0, c, z, c, HEX_40000000, ExpressionStatement(), a, 1, c, a, 0, d]
org.apache.commons.math4.util:FastMathCalc:splitMult:double+double+double#[ExpressionStatement(), ans, 0, a, 0, b, 0, ExpressionStatement(), ans, 1, a, 0, b, 1, a, 1, b, 0, a, 1, b, 1, ExpressionStatement(), resplit, ans]
org.apache.commons.math4.util:FastMathCalc:splitAdd:double+double+double#[ExpressionStatement(), ans, 0, a, 0, b, 0, ExpressionStatement(), ans, 1, a, 1, b, 1, ExpressionStatement(), resplit, ans]
org.apache.commons.math4.util:FastMathCalc:splitReciprocal:double+double#[VariableDeclarationStatement(), final, double, b, 1.0, 4194304.0, VariableDeclarationStatement(), final, double, a, 1.0, b, IfStatement(if), in, 0, 0.0, ExpressionStatement(), in, 0, in, 1, ExpressionStatement(), in, 1, 0.0, ExpressionStatement(), result, 0, a, in, 0, ExpressionStatement(), result, 1, b, in, 0, a, in, 1, in, 0, in, 0, in, 0, in, 1, IfStatement(if), result, 1, result, 1, ExpressionStatement(), result, 1, 0.0, ExpressionStatement(), resplit, result, ForStatement(for), int, i, 0, i, 2, i, VariableDeclarationStatement(), double, err, 1.0, result, 0, in, 0, result, 0, in, 1, result, 1, in, 0, result, 1, in, 1, ExpressionStatement(), err, result, 0, result, 1, ExpressionStatement(), result, 1, err]
org.apache.commons.math4.util:FastMathCalc:quadMult:double+double+double#[VariableDeclarationStatement(), final, double, xs, double, 2, VariableDeclarationStatement(), final, double, ys, double, 2, VariableDeclarationStatement(), final, double, zs, double, 2, ExpressionStatement(), split, a, 0, xs, ExpressionStatement(), split, b, 0, ys, ExpressionStatement(), splitMult, xs, ys, zs, ExpressionStatement(), result, 0, zs, 0, ExpressionStatement(), result, 1, zs, 1, ExpressionStatement(), split, b, 1, ys, ExpressionStatement(), splitMult, xs, ys, zs, VariableDeclarationStatement(), double, tmp, result, 0, zs, 0, ExpressionStatement(), result, 1, tmp, result, 0, zs, 0, ExpressionStatement(), result, 0, tmp, ExpressionStatement(), tmp, result, 0, zs, 1, ExpressionStatement(), result, 1, tmp, result, 0, zs, 1, ExpressionStatement(), result, 0, tmp, ExpressionStatement(), split, a, 1, xs, ExpressionStatement(), split, b, 0, ys, ExpressionStatement(), splitMult, xs, ys, zs, ExpressionStatement(), tmp, result, 0, zs, 0, ExpressionStatement(), result, 1, tmp, result, 0, zs, 0, ExpressionStatement(), result, 0, tmp, ExpressionStatement(), tmp, result, 0, zs, 1, ExpressionStatement(), result, 1, tmp, result, 0, zs, 1, ExpressionStatement(), result, 0, tmp, ExpressionStatement(), split, a, 1, xs, ExpressionStatement(), split, b, 1, ys, ExpressionStatement(), splitMult, xs, ys, zs, ExpressionStatement(), tmp, result, 0, zs, 0, ExpressionStatement(), result, 1, tmp, result, 0, zs, 0, ExpressionStatement(), result, 0, tmp, ExpressionStatement(), tmp, result, 0, zs, 1, ExpressionStatement(), result, 1, tmp, result, 0, zs, 1, ExpressionStatement(), result, 0, tmp]
org.apache.commons.math4.util:FastMathCalc:expint:int+double#[VariableDeclarationStatement(), final, double, xs, double, 2, VariableDeclarationStatement(), final, double, as, double, 2, VariableDeclarationStatement(), final, double, ys, double, 2, ExpressionStatement(), xs, 0, 2.718281828459045, ExpressionStatement(), xs, 1, 1.4456468917292502E-16, ExpressionStatement(), split, 1.0, ys, WhileStatement(while), p, 0, IfStatement(if), p, 1, 0, ExpressionStatement(), quadMult, ys, xs, as, ExpressionStatement(), ys, 0, as, 0, ExpressionStatement(), ys, 1, as, 1, ExpressionStatement(), quadMult, xs, xs, as, ExpressionStatement(), xs, 0, as, 0, ExpressionStatement(), xs, 1, as, 1, ExpressionStatement(), p, 1, IfStatement(if), result, null, ExpressionStatement(), result, 0, ys, 0, ExpressionStatement(), result, 1, ys, 1, ExpressionStatement(), resplit, result, ReturnStatement(return), ys, 0, ys, 1]
org.apache.commons.math4.util:FastMathCalc:slowLog:double#[VariableDeclarationStatement(), double, x, double, 2, VariableDeclarationStatement(), double, x2, double, 2, VariableDeclarationStatement(), double, y, double, 2, VariableDeclarationStatement(), double, a, double, 2, ExpressionStatement(), split, xi, x, ExpressionStatement(), x, 0, 1.0, ExpressionStatement(), resplit, x, ExpressionStatement(), splitReciprocal, x, a, ExpressionStatement(), x, 0, 2.0, ExpressionStatement(), resplit, x, ExpressionStatement(), splitMult, x, a, y, ExpressionStatement(), x, 0, y, 0, ExpressionStatement(), x, 1, y, 1, ExpressionStatement(), splitMult, x, x, x2, ExpressionStatement(), y, 0, LN_SPLIT_COEF, LN_SPLIT_COEF.length, 1, 0, ExpressionStatement(), y, 1, LN_SPLIT_COEF, LN_SPLIT_COEF.length, 1, 1, ForStatement(for), int, i, LN_SPLIT_COEF.length, 2, i, 0, i, ExpressionStatement(), splitMult, y, x2, a, ExpressionStatement(), y, 0, a, 0, ExpressionStatement(), y, 1, a, 1, ExpressionStatement(), splitAdd, y, LN_SPLIT_COEF, i, a, ExpressionStatement(), y, 0, a, 0, ExpressionStatement(), y, 1, a, 1, ExpressionStatement(), splitMult, y, x, a, ExpressionStatement(), y, 0, a, 0, ExpressionStatement(), y, 1, a, 1, ReturnStatement(return), y]
org.apache.commons.math4.util:FastMathCalc:printarray:PrintStream+String+int+double[][]#[ExpressionStatement(), out, println, name, ExpressionStatement(), checkLen, expectedLen, array2d.length, ExpressionStatement(), out, println, TABLE_START_DECL, " ", VariableDeclarationStatement(), int, i, 0, EnhancedForStatement(for), double, array, array2d, ExpressionStatement(), out, print, "        {", EnhancedForStatement(for), double, d, array, ExpressionStatement(), out, printf, "%-25.25s", format, d, ExpressionStatement(), out, println, "}, // ", i, ExpressionStatement(), out, println, TABLE_END_DECL]
org.apache.commons.math4.util:FastMathCalc:printarray:PrintStream+String+int+double[]#[ExpressionStatement(), out, println, name, "=", ExpressionStatement(), checkLen, expectedLen, array.length, ExpressionStatement(), out, println, TABLE_START_DECL, EnhancedForStatement(for), double, d, array, ExpressionStatement(), out, printf, "        %s%n", format, d, ExpressionStatement(), out, println, TABLE_END_DECL]
org.apache.commons.math4.util:FastMathCalc:format:double#[IfStatement(if), d, d, ReturnStatement(return), "Double.NaN,", ReturnStatement(return), d, 0, "+", "", Double, toString, d, "d,"]
org.apache.commons.math4.util:FastMathCalc:checkLen:int+int#[IfStatement(if), expectedLen, actual, ThrowStatement(throw), new, DimensionMismatchException, actual, expectedLen]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpIntA:null#[ReturnStatement(return), EXP_INT_A, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpIntB:null#[ReturnStatement(return), EXP_INT_B, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpFracA:null#[ReturnStatement(return), EXP_FRAC_A, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadExpFracB:null#[ReturnStatement(return), EXP_FRAC_B, clone]
org.apache.commons.math4.util:FastMathLiteralArrays:loadLnMant:null#[ReturnStatement(return), LN_MANT, clone]
org.apache.commons.math4.util:Incrementor:setMaximalCount:int#[ExpressionStatement(), maximalCount, max]
org.apache.commons.math4.util:Incrementor:getMaximalCount:null#[ReturnStatement(return), maximalCount]
org.apache.commons.math4.util:Incrementor:getCount:null#[ReturnStatement(return), count]
org.apache.commons.math4.util:Incrementor:canIncrement:null#[ReturnStatement(return), count, maximalCount]
org.apache.commons.math4.util:Incrementor:incrementCount:int#[ForStatement(for), int, i, 0, i, value, i, ExpressionStatement(), incrementCount]
org.apache.commons.math4.util:Incrementor:incrementCount:null#[IfStatement(if), count, maximalCount, ExpressionStatement(), maxCountCallback, trigger, maximalCount]
org.apache.commons.math4.util:Incrementor:resetCount:null#[ExpressionStatement(), count, 0]
org.apache.commons.math4.util:IntegerSequence:range:int+int#[ReturnStatement(return), range, start, end, 1]
org.apache.commons.math4.util:IntegerSequence:range:int+int+int#[ReturnStatement(return), new, Range, start, max, step]
org.apache.commons.math4.util:IterationEvent:getIterations:null#[ReturnStatement(return), iterations]
org.apache.commons.math4.util:IterationManager:addIterationListener:IterationListener#[ExpressionStatement(), listeners, add, listener]
org.apache.commons.math4.util:IterationManager:fireInitializationEvent:IterationEvent#[EnhancedForStatement(for), IterationListener, l, listeners, ExpressionStatement(), l, initializationPerformed, e]
org.apache.commons.math4.util:IterationManager:fireIterationPerformedEvent:IterationEvent#[EnhancedForStatement(for), IterationListener, l, listeners, ExpressionStatement(), l, iterationPerformed, e]
org.apache.commons.math4.util:IterationManager:fireIterationStartedEvent:IterationEvent#[EnhancedForStatement(for), IterationListener, l, listeners, ExpressionStatement(), l, iterationStarted, e]
org.apache.commons.math4.util:IterationManager:fireTerminationEvent:IterationEvent#[EnhancedForStatement(for), IterationListener, l, listeners, ExpressionStatement(), l, terminationPerformed, e]
org.apache.commons.math4.util:IterationManager:getIterations:null#[ReturnStatement(return), iterations, getCount]
org.apache.commons.math4.util:IterationManager:getMaxIterations:null#[ReturnStatement(return), iterations, getMaximalCount]
org.apache.commons.math4.util:IterationManager:incrementIterationCount:null#[ExpressionStatement(), iterations, incrementCount]
org.apache.commons.math4.util:IterationManager:removeIterationListener:IterationListener#[ExpressionStatement(), listeners, remove, listener]
org.apache.commons.math4.util:IterationManager:resetIterationCount:null#[ExpressionStatement(), iterations, resetCount]
org.apache.commons.math4.util:KthSelector:getPivotingStrategy:null#[ReturnStatement(return), pivotingStrategy]
org.apache.commons.math4.util:KthSelector:select:double[]+int[]+int#[VariableDeclarationStatement(), int, begin, 0, VariableDeclarationStatement(), int, end, work.length, VariableDeclarationStatement(), int, node, 0, VariableDeclarationStatement(), final, boolean, usePivotsHeap, pivotsHeap, null, WhileStatement(while), end, begin, MIN_SELECT_SIZE, VariableDeclarationStatement(), final, int, pivot, IfStatement(if), usePivotsHeap, node, pivotsHeap.length, pivotsHeap, node, 0, ExpressionStatement(), pivot, pivotsHeap, node, ExpressionStatement(), pivot, partition, work, begin, end, pivotingStrategy, pivotIndex, work, begin, end, IfStatement(if), usePivotsHeap, node, pivotsHeap.length, ExpressionStatement(), pivotsHeap, node, pivot, IfStatement(if), k, pivot, ReturnStatement(return), work, k, IfStatement(if), k, pivot, ExpressionStatement(), end, pivot, ExpressionStatement(), node, FastMath, min, 2, node, 1, usePivotsHeap, pivotsHeap.length, end, ExpressionStatement(), begin, pivot, 1, ExpressionStatement(), node, FastMath, min, 2, node, 2, usePivotsHeap, pivotsHeap.length, end, ExpressionStatement(), Arrays, sort, work, begin, end, ReturnStatement(return), work, k]
org.apache.commons.math4.util:KthSelector:partition:double[]+int+int+int#[VariableDeclarationStatement(), final, double, value, work, pivot, ExpressionStatement(), work, pivot, work, begin, VariableDeclarationStatement(), int, i, begin, 1, VariableDeclarationStatement(), int, j, end, 1, WhileStatement(while), i, j, WhileStatement(while), i, j, work, j, value, ExpressionStatement(), j, WhileStatement(while), i, j, work, i, value, ExpressionStatement(), i, IfStatement(if), i, j, VariableDeclarationStatement(), final, double, tmp, work, i, ExpressionStatement(), work, i, work, j, ExpressionStatement(), work, j, tmp, IfStatement(if), i, end, work, i, value, ExpressionStatement(), i, ExpressionStatement(), work, begin, work, i, ExpressionStatement(), work, i, value, ReturnStatement(return), i]
org.apache.commons.math4.util:MathArrays:scale:double+double[]#[VariableDeclarationStatement(), double, newArr, double, arr.length, ForStatement(for), int, i, 0, i, arr.length, i, ExpressionStatement(), newArr, i, arr, i, val, ReturnStatement(return), newArr]
org.apache.commons.math4.util:MathArrays:scaleInPlace:double+double[]#[ForStatement(for), int, i, 0, i, arr.length, i, ExpressionStatement(), arr, i, val]
org.apache.commons.math4.util:MathArrays:ebeAdd:double[]+double[]#[ExpressionStatement(), checkEqualLength, a, b, VariableDeclarationStatement(), final, double, result, a, clone, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), result, i, b, i, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:ebeSubtract:double[]+double[]#[ExpressionStatement(), checkEqualLength, a, b, VariableDeclarationStatement(), final, double, result, a, clone, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), result, i, b, i, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:ebeMultiply:double[]+double[]#[ExpressionStatement(), checkEqualLength, a, b, VariableDeclarationStatement(), final, double, result, a, clone, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), result, i, b, i, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:ebeDivide:double[]+double[]#[ExpressionStatement(), checkEqualLength, a, b, VariableDeclarationStatement(), final, double, result, a, clone, ForStatement(for), int, i, 0, i, a.length, i, ExpressionStatement(), result, i, b, i, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:distance1:double[]+double[]#[ExpressionStatement(), checkEqualLength, p1, p2, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, p1.length, i, ExpressionStatement(), sum, FastMath, abs, p1, i, p2, i, ReturnStatement(return), sum]
org.apache.commons.math4.util:MathArrays:distance1:int[]+int[]#[ExpressionStatement(), checkEqualLength, p1, p2, VariableDeclarationStatement(), int, sum, 0, ForStatement(for), int, i, 0, i, p1.length, i, ExpressionStatement(), sum, FastMath, abs, p1, i, p2, i, ReturnStatement(return), sum]
org.apache.commons.math4.util:MathArrays:distance:double[]+double[]#[ExpressionStatement(), checkEqualLength, p1, p2, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, p1.length, i, VariableDeclarationStatement(), final, double, dp, p1, i, p2, i, ExpressionStatement(), sum, dp, dp, ReturnStatement(return), FastMath, sqrt, sum]
org.apache.commons.math4.util:MathArrays:cosAngle:double[]+double[]#[ReturnStatement(return), linearCombination, v1, v2, safeNorm, v1, safeNorm, v2]
org.apache.commons.math4.util:MathArrays:distance:int[]+int[]#[ExpressionStatement(), checkEqualLength, p1, p2, VariableDeclarationStatement(), double, sum, 0, ForStatement(for), int, i, 0, i, p1.length, i, VariableDeclarationStatement(), final, double, dp, p1, i, p2, i, ExpressionStatement(), sum, dp, dp, ReturnStatement(return), FastMath, sqrt, sum]
org.apache.commons.math4.util:MathArrays:distanceInf:double[]+double[]#[ExpressionStatement(), checkEqualLength, p1, p2, VariableDeclarationStatement(), double, max, 0, ForStatement(for), int, i, 0, i, p1.length, i, ExpressionStatement(), max, FastMath, max, max, FastMath, abs, p1, i, p2, i, ReturnStatement(return), max]
org.apache.commons.math4.util:MathArrays:distanceInf:int[]+int[]#[ExpressionStatement(), checkEqualLength, p1, p2, VariableDeclarationStatement(), int, max, 0, ForStatement(for), int, i, 0, i, p1.length, i, ExpressionStatement(), max, FastMath, max, max, FastMath, abs, p1, i, p2, i, ReturnStatement(return), max]
org.apache.commons.math4.util:MathArrays:isMonotonic:T[]+OrderDirection+boolean#[VariableDeclarationStatement(), T, previous, val, 0, VariableDeclarationStatement(), final, int, max, val.length, ForStatement(for), int, i, 1, i, max, i, VariableDeclarationStatement(), final, int, comp, SwitchStatement(switch), dir, SwitchCase(case), INCREASING, ExpressionStatement(), comp, previous, compareTo, val, i, IfStatement(if), strict, IfStatement(if), comp, 0, ReturnStatement(return), false, IfStatement(if), comp, 0, ReturnStatement(return), false, BreakStatement(break), SwitchCase(case), DECREASING, ExpressionStatement(), comp, val, i, compareTo, previous, IfStatement(if), strict, IfStatement(if), comp, 0, ReturnStatement(return), false, IfStatement(if), comp, 0, ReturnStatement(return), false, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), previous, val, i, ReturnStatement(return), true]
org.apache.commons.math4.util:MathArrays:isMonotonic:double[]+OrderDirection+boolean#[ReturnStatement(return), checkOrder, val, dir, strict, false]
org.apache.commons.math4.util:MathArrays:checkEqualLength:double[]+double[]+boolean#[IfStatement(if), a.length, b.length, ReturnStatement(return), true, IfStatement(if), abort, ThrowStatement(throw), new, DimensionMismatchException, a.length, b.length, ReturnStatement(return), false]
org.apache.commons.math4.util:MathArrays:checkEqualLength:double[]+double[]#[ExpressionStatement(), checkEqualLength, a, b, true]
org.apache.commons.math4.util:MathArrays:checkEqualLength:int[]+int[]+boolean#[IfStatement(if), a.length, b.length, ReturnStatement(return), true, IfStatement(if), abort, ThrowStatement(throw), new, DimensionMismatchException, a.length, b.length, ReturnStatement(return), false]
org.apache.commons.math4.util:MathArrays:checkEqualLength:int[]+int[]#[ExpressionStatement(), checkEqualLength, a, b, true]
org.apache.commons.math4.util:MathArrays:checkOrder:double[]+OrderDirection+boolean+boolean#[VariableDeclarationStatement(), double, previous, val, 0, VariableDeclarationStatement(), final, int, max, val.length, VariableDeclarationStatement(), int, index, LabeledStatement(), ITEM, ForStatement(for), index, 1, index, max, index, SwitchStatement(switch), dir, SwitchCase(case), INCREASING, IfStatement(if), strict, IfStatement(if), val, index, previous, BreakStatement(break), ITEM, IfStatement(if), val, index, previous, BreakStatement(break), ITEM, BreakStatement(break), SwitchCase(case), DECREASING, IfStatement(if), strict, IfStatement(if), val, index, previous, BreakStatement(break), ITEM, IfStatement(if), val, index, previous, BreakStatement(break), ITEM, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError, ExpressionStatement(), previous, val, index, IfStatement(if), index, max, ReturnStatement(return), true, IfStatement(if), abort, ThrowStatement(throw), new, NonMonotonicSequenceException, val, index, previous, index, dir, strict, ReturnStatement(return), false]
org.apache.commons.math4.util:MathArrays:checkOrder:double[]+OrderDirection+boolean#[ExpressionStatement(), checkOrder, val, dir, strict, true]
org.apache.commons.math4.util:MathArrays:checkOrder:double[]#[ExpressionStatement(), checkOrder, val, OrderDirection.INCREASING, true]
org.apache.commons.math4.util:MathArrays:checkRectangular:long[][]#[ExpressionStatement(), MathUtils, checkNotNull, in, ForStatement(for), int, i, 1, i, in.length, i, IfStatement(if), in, i, length, in, 0, length, ThrowStatement(throw), new, DimensionMismatchException, LocalizedFormats.DIFFERENT_ROWS_LENGTHS, in, i, length, in, 0, length]
org.apache.commons.math4.util:MathArrays:checkPositive:double[]#[ForStatement(for), int, i, 0, i, in.length, i, IfStatement(if), in, i, 0, ThrowStatement(throw), new, NotStrictlyPositiveException, in, i]
org.apache.commons.math4.util:MathArrays:checkNotNaN:double[]#[ForStatement(for), int, i, 0, i, in.length, i, IfStatement(if), Double, isNaN, in, i, ThrowStatement(throw), new, NotANumberException]
org.apache.commons.math4.util:MathArrays:checkNonNegative:long[]#[ForStatement(for), int, i, 0, i, in.length, i, IfStatement(if), in, i, 0, ThrowStatement(throw), new, NotPositiveException, in, i]
org.apache.commons.math4.util:MathArrays:checkNonNegative:long[][]#[ForStatement(for), int, i, 0, i, in.length, i, ForStatement(for), int, j, 0, j, in, i, length, j, IfStatement(if), in, i, j, 0, ThrowStatement(throw), new, NotPositiveException, in, i, j]
org.apache.commons.math4.util:MathArrays:safeNorm:double[]#[VariableDeclarationStatement(), double, rdwarf, 3.834e-20, VariableDeclarationStatement(), double, rgiant, 1.304e+19, VariableDeclarationStatement(), double, s1, 0, VariableDeclarationStatement(), double, s2, 0, VariableDeclarationStatement(), double, s3, 0, VariableDeclarationStatement(), double, x1max, 0, VariableDeclarationStatement(), double, x3max, 0, VariableDeclarationStatement(), double, floatn, v.length, VariableDeclarationStatement(), double, agiant, rgiant, floatn, ForStatement(for), int, i, 0, i, v.length, i, VariableDeclarationStatement(), double, xabs, FastMath, abs, v, i, IfStatement(if), xabs, rdwarf, xabs, agiant, IfStatement(if), xabs, rdwarf, IfStatement(if), xabs, x1max, VariableDeclarationStatement(), double, r, x1max, xabs, ExpressionStatement(), s1, 1, s1, r, r, ExpressionStatement(), x1max, xabs, VariableDeclarationStatement(), double, r, xabs, x1max, ExpressionStatement(), s1, r, r, IfStatement(if), xabs, x3max, VariableDeclarationStatement(), double, r, x3max, xabs, ExpressionStatement(), s3, 1, s3, r, r, ExpressionStatement(), x3max, xabs, IfStatement(if), xabs, 0, VariableDeclarationStatement(), double, r, xabs, x3max, ExpressionStatement(), s3, r, r, ExpressionStatement(), s2, xabs, xabs, VariableDeclarationStatement(), double, norm, IfStatement(if), s1, 0, ExpressionStatement(), norm, x1max, Math, sqrt, s1, s2, x1max, x1max, IfStatement(if), s2, 0, ExpressionStatement(), norm, x3max, Math, sqrt, s3, IfStatement(if), s2, x3max, ExpressionStatement(), norm, Math, sqrt, s2, 1, x3max, s2, x3max, s3, ExpressionStatement(), norm, Math, sqrt, x3max, s2, x3max, x3max, s3, ReturnStatement(return), norm]
org.apache.commons.math4.util:MathArrays:sortInPlace:double[]+double[]...#[ExpressionStatement(), sortInPlace, x, OrderDirection.INCREASING, yList]
org.apache.commons.math4.util:MathArrays:sortInPlace:double[]+OrderDirection+double[]...#[IfStatement(if), x, null, ThrowStatement(throw), new, NullArgumentException, VariableDeclarationStatement(), final, int, yListLen, yList.length, VariableDeclarationStatement(), final, int, len, x.length, ForStatement(for), int, j, 0, j, yListLen, j, VariableDeclarationStatement(), final, double, y, yList, j, IfStatement(if), y, null, ThrowStatement(throw), new, NullArgumentException, IfStatement(if), y.length, len, ThrowStatement(throw), new, DimensionMismatchException, y.length, len, VariableDeclarationStatement(), final, List, PairDoubleInteger, list, new, ArrayList, PairDoubleInteger, len, ForStatement(for), int, i, 0, i, len, i, ExpressionStatement(), list, add, new, PairDoubleInteger, x, i, i, VariableDeclarationStatement(), final, Comparator, PairDoubleInteger, comp, dir, MathArrays.OrderDirection.INCREASING, new, Comparator, PairDoubleInteger, Override, public, int, compare, PairDoubleInteger, o1, PairDoubleInteger, o2, ReturnStatement(return), Double, compare, o1, getKey, o2, getKey, new, Comparator, PairDoubleInteger, Override, public, int, compare, PairDoubleInteger, o1, PairDoubleInteger, o2, ReturnStatement(return), Double, compare, o2, getKey, o1, getKey, ExpressionStatement(), Collections, sort, list, comp, VariableDeclarationStatement(), final, int, indices, int, len, ForStatement(for), int, i, 0, i, len, i, VariableDeclarationStatement(), final, PairDoubleInteger, e, list, get, i, ExpressionStatement(), x, i, e, getKey, ExpressionStatement(), indices, i, e, getValue, ForStatement(for), int, j, 0, j, yListLen, j, VariableDeclarationStatement(), final, double, yInPlace, yList, j, VariableDeclarationStatement(), final, double, yOrig, yInPlace, clone, ForStatement(for), int, i, 0, i, len, i, ExpressionStatement(), yInPlace, i, yOrig, indices, i]
org.apache.commons.math4.util:MathArrays:copyOf:int[]#[ReturnStatement(return), copyOf, source, source.length]
org.apache.commons.math4.util:MathArrays:copyOf:double[]#[ReturnStatement(return), copyOf, source, source.length]
org.apache.commons.math4.util:MathArrays:copyOf:int[]+int#[VariableDeclarationStatement(), final, int, output, int, len, ExpressionStatement(), System, arraycopy, source, 0, output, 0, FastMath, min, len, source.length, ReturnStatement(return), output]
org.apache.commons.math4.util:MathArrays:copyOf:double[]+int#[VariableDeclarationStatement(), final, double, output, double, len, ExpressionStatement(), System, arraycopy, source, 0, output, 0, FastMath, min, len, source.length, ReturnStatement(return), output]
org.apache.commons.math4.util:MathArrays:copyOfRange:double[]+int+int#[VariableDeclarationStatement(), final, int, len, to, from, VariableDeclarationStatement(), final, double, output, double, len, ExpressionStatement(), System, arraycopy, source, from, output, 0, FastMath, min, len, source.length, from, ReturnStatement(return), output]
org.apache.commons.math4.util:MathArrays:linearCombination:double[]+double[]#[ExpressionStatement(), checkEqualLength, a, b, VariableDeclarationStatement(), final, int, len, a.length, IfStatement(if), len, 1, ReturnStatement(return), a, 0, b, 0, VariableDeclarationStatement(), final, double, prodHigh, double, len, VariableDeclarationStatement(), double, prodLowSum, 0, ForStatement(for), int, i, 0, i, len, i, VariableDeclarationStatement(), final, double, ai, a, i, VariableDeclarationStatement(), final, double, aHigh, Double, longBitsToDouble, Double, doubleToRawLongBits, ai, 1L, 27, VariableDeclarationStatement(), final, double, aLow, ai, aHigh, VariableDeclarationStatement(), final, double, bi, b, i, VariableDeclarationStatement(), final, double, bHigh, Double, longBitsToDouble, Double, doubleToRawLongBits, bi, 1L, 27, VariableDeclarationStatement(), final, double, bLow, bi, bHigh, ExpressionStatement(), prodHigh, i, ai, bi, VariableDeclarationStatement(), final, double, prodLow, aLow, bLow, prodHigh, i, aHigh, bHigh, aLow, bHigh, aHigh, bLow, ExpressionStatement(), prodLowSum, prodLow, VariableDeclarationStatement(), final, double, prodHighCur, prodHigh, 0, VariableDeclarationStatement(), double, prodHighNext, prodHigh, 1, VariableDeclarationStatement(), double, sHighPrev, prodHighCur, prodHighNext, VariableDeclarationStatement(), double, sPrime, sHighPrev, prodHighNext, VariableDeclarationStatement(), double, sLowSum, prodHighNext, sHighPrev, sPrime, prodHighCur, sPrime, VariableDeclarationStatement(), final, int, lenMinusOne, len, 1, ForStatement(for), int, i, 1, i, lenMinusOne, i, ExpressionStatement(), prodHighNext, prodHigh, i, 1, VariableDeclarationStatement(), final, double, sHighCur, sHighPrev, prodHighNext, ExpressionStatement(), sPrime, sHighCur, prodHighNext, ExpressionStatement(), sLowSum, prodHighNext, sHighCur, sPrime, sHighPrev, sPrime, ExpressionStatement(), sHighPrev, sHighCur, VariableDeclarationStatement(), double, result, sHighPrev, prodLowSum, sLowSum, IfStatement(if), Double, isNaN, result, ExpressionStatement(), result, 0, ForStatement(for), int, i, 0, i, len, i, ExpressionStatement(), result, a, i, b, i, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:linearCombination:double+double+double+double#[VariableDeclarationStatement(), final, double, a1High, Double, longBitsToDouble, Double, doubleToRawLongBits, a1, 1L, 27, VariableDeclarationStatement(), final, double, a1Low, a1, a1High, VariableDeclarationStatement(), final, double, b1High, Double, longBitsToDouble, Double, doubleToRawLongBits, b1, 1L, 27, VariableDeclarationStatement(), final, double, b1Low, b1, b1High, VariableDeclarationStatement(), final, double, prod1High, a1, b1, VariableDeclarationStatement(), final, double, prod1Low, a1Low, b1Low, prod1High, a1High, b1High, a1Low, b1High, a1High, b1Low, VariableDeclarationStatement(), final, double, a2High, Double, longBitsToDouble, Double, doubleToRawLongBits, a2, 1L, 27, VariableDeclarationStatement(), final, double, a2Low, a2, a2High, VariableDeclarationStatement(), final, double, b2High, Double, longBitsToDouble, Double, doubleToRawLongBits, b2, 1L, 27, VariableDeclarationStatement(), final, double, b2Low, b2, b2High, VariableDeclarationStatement(), final, double, prod2High, a2, b2, VariableDeclarationStatement(), final, double, prod2Low, a2Low, b2Low, prod2High, a2High, b2High, a2Low, b2High, a2High, b2Low, VariableDeclarationStatement(), final, double, s12High, prod1High, prod2High, VariableDeclarationStatement(), final, double, s12Prime, s12High, prod2High, VariableDeclarationStatement(), final, double, s12Low, prod2High, s12High, s12Prime, prod1High, s12Prime, VariableDeclarationStatement(), double, result, s12High, prod1Low, prod2Low, s12Low, IfStatement(if), Double, isNaN, result, ExpressionStatement(), result, a1, b1, a2, b2, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:linearCombination:double+double+double+double+double+double#[VariableDeclarationStatement(), final, double, a1High, Double, longBitsToDouble, Double, doubleToRawLongBits, a1, 1L, 27, VariableDeclarationStatement(), final, double, a1Low, a1, a1High, VariableDeclarationStatement(), final, double, b1High, Double, longBitsToDouble, Double, doubleToRawLongBits, b1, 1L, 27, VariableDeclarationStatement(), final, double, b1Low, b1, b1High, VariableDeclarationStatement(), final, double, prod1High, a1, b1, VariableDeclarationStatement(), final, double, prod1Low, a1Low, b1Low, prod1High, a1High, b1High, a1Low, b1High, a1High, b1Low, VariableDeclarationStatement(), final, double, a2High, Double, longBitsToDouble, Double, doubleToRawLongBits, a2, 1L, 27, VariableDeclarationStatement(), final, double, a2Low, a2, a2High, VariableDeclarationStatement(), final, double, b2High, Double, longBitsToDouble, Double, doubleToRawLongBits, b2, 1L, 27, VariableDeclarationStatement(), final, double, b2Low, b2, b2High, VariableDeclarationStatement(), final, double, prod2High, a2, b2, VariableDeclarationStatement(), final, double, prod2Low, a2Low, b2Low, prod2High, a2High, b2High, a2Low, b2High, a2High, b2Low, VariableDeclarationStatement(), final, double, a3High, Double, longBitsToDouble, Double, doubleToRawLongBits, a3, 1L, 27, VariableDeclarationStatement(), final, double, a3Low, a3, a3High, VariableDeclarationStatement(), final, double, b3High, Double, longBitsToDouble, Double, doubleToRawLongBits, b3, 1L, 27, VariableDeclarationStatement(), final, double, b3Low, b3, b3High, VariableDeclarationStatement(), final, double, prod3High, a3, b3, VariableDeclarationStatement(), final, double, prod3Low, a3Low, b3Low, prod3High, a3High, b3High, a3Low, b3High, a3High, b3Low, VariableDeclarationStatement(), final, double, s12High, prod1High, prod2High, VariableDeclarationStatement(), final, double, s12Prime, s12High, prod2High, VariableDeclarationStatement(), final, double, s12Low, prod2High, s12High, s12Prime, prod1High, s12Prime, VariableDeclarationStatement(), final, double, s123High, s12High, prod3High, VariableDeclarationStatement(), final, double, s123Prime, s123High, prod3High, VariableDeclarationStatement(), final, double, s123Low, prod3High, s123High, s123Prime, s12High, s123Prime, VariableDeclarationStatement(), double, result, s123High, prod1Low, prod2Low, prod3Low, s12Low, s123Low, IfStatement(if), Double, isNaN, result, ExpressionStatement(), result, a1, b1, a2, b2, a3, b3, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:linearCombination:double+double+double+double+double+double+double+double#[VariableDeclarationStatement(), final, double, a1High, Double, longBitsToDouble, Double, doubleToRawLongBits, a1, 1L, 27, VariableDeclarationStatement(), final, double, a1Low, a1, a1High, VariableDeclarationStatement(), final, double, b1High, Double, longBitsToDouble, Double, doubleToRawLongBits, b1, 1L, 27, VariableDeclarationStatement(), final, double, b1Low, b1, b1High, VariableDeclarationStatement(), final, double, prod1High, a1, b1, VariableDeclarationStatement(), final, double, prod1Low, a1Low, b1Low, prod1High, a1High, b1High, a1Low, b1High, a1High, b1Low, VariableDeclarationStatement(), final, double, a2High, Double, longBitsToDouble, Double, doubleToRawLongBits, a2, 1L, 27, VariableDeclarationStatement(), final, double, a2Low, a2, a2High, VariableDeclarationStatement(), final, double, b2High, Double, longBitsToDouble, Double, doubleToRawLongBits, b2, 1L, 27, VariableDeclarationStatement(), final, double, b2Low, b2, b2High, VariableDeclarationStatement(), final, double, prod2High, a2, b2, VariableDeclarationStatement(), final, double, prod2Low, a2Low, b2Low, prod2High, a2High, b2High, a2Low, b2High, a2High, b2Low, VariableDeclarationStatement(), final, double, a3High, Double, longBitsToDouble, Double, doubleToRawLongBits, a3, 1L, 27, VariableDeclarationStatement(), final, double, a3Low, a3, a3High, VariableDeclarationStatement(), final, double, b3High, Double, longBitsToDouble, Double, doubleToRawLongBits, b3, 1L, 27, VariableDeclarationStatement(), final, double, b3Low, b3, b3High, VariableDeclarationStatement(), final, double, prod3High, a3, b3, VariableDeclarationStatement(), final, double, prod3Low, a3Low, b3Low, prod3High, a3High, b3High, a3Low, b3High, a3High, b3Low, VariableDeclarationStatement(), final, double, a4High, Double, longBitsToDouble, Double, doubleToRawLongBits, a4, 1L, 27, VariableDeclarationStatement(), final, double, a4Low, a4, a4High, VariableDeclarationStatement(), final, double, b4High, Double, longBitsToDouble, Double, doubleToRawLongBits, b4, 1L, 27, VariableDeclarationStatement(), final, double, b4Low, b4, b4High, VariableDeclarationStatement(), final, double, prod4High, a4, b4, VariableDeclarationStatement(), final, double, prod4Low, a4Low, b4Low, prod4High, a4High, b4High, a4Low, b4High, a4High, b4Low, VariableDeclarationStatement(), final, double, s12High, prod1High, prod2High, VariableDeclarationStatement(), final, double, s12Prime, s12High, prod2High, VariableDeclarationStatement(), final, double, s12Low, prod2High, s12High, s12Prime, prod1High, s12Prime, VariableDeclarationStatement(), final, double, s123High, s12High, prod3High, VariableDeclarationStatement(), final, double, s123Prime, s123High, prod3High, VariableDeclarationStatement(), final, double, s123Low, prod3High, s123High, s123Prime, s12High, s123Prime, VariableDeclarationStatement(), final, double, s1234High, s123High, prod4High, VariableDeclarationStatement(), final, double, s1234Prime, s1234High, prod4High, VariableDeclarationStatement(), final, double, s1234Low, prod4High, s1234High, s1234Prime, s123High, s1234Prime, VariableDeclarationStatement(), double, result, s1234High, prod1Low, prod2Low, prod3Low, prod4Low, s12Low, s123Low, s1234Low, IfStatement(if), Double, isNaN, result, ExpressionStatement(), result, a1, b1, a2, b2, a3, b3, a4, b4, ReturnStatement(return), result]
org.apache.commons.math4.util:MathArrays:equals:float[]+float[]#[IfStatement(if), x, null, y, null, ReturnStatement(return), x, null, y, null, IfStatement(if), x.length, y.length, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), Precision, equals, x, i, y, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.util:MathArrays:equalsIncludingNaN:float[]+float[]#[IfStatement(if), x, null, y, null, ReturnStatement(return), x, null, y, null, IfStatement(if), x.length, y.length, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), Precision, equalsIncludingNaN, x, i, y, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.util:MathArrays:equals:double[]+double[]#[IfStatement(if), x, null, y, null, ReturnStatement(return), x, null, y, null, IfStatement(if), x.length, y.length, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), Precision, equals, x, i, y, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.util:MathArrays:equalsIncludingNaN:double[]+double[]#[IfStatement(if), x, null, y, null, ReturnStatement(return), x, null, y, null, IfStatement(if), x.length, y.length, ReturnStatement(return), false, ForStatement(for), int, i, 0, i, x.length, i, IfStatement(if), Precision, equalsIncludingNaN, x, i, y, i, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.util:MathArrays:normalizeArray:double[]+double#[IfStatement(if), Double, isInfinite, normalizedSum, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NORMALIZE_INFINITE, IfStatement(if), Double, isNaN, normalizedSum, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NORMALIZE_NAN, VariableDeclarationStatement(), double, sum, 0d, VariableDeclarationStatement(), final, int, len, values.length, VariableDeclarationStatement(), double, out, double, len, ForStatement(for), int, i, 0, i, len, i, IfStatement(if), Double, isInfinite, values, i, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INFINITE_ARRAY_ELEMENT, values, i, i, IfStatement(if), Double, isNaN, values, i, ExpressionStatement(), sum, values, i, IfStatement(if), sum, 0, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.ARRAY_SUMS_TO_ZERO, ForStatement(for), int, i, 0, i, len, i, IfStatement(if), Double, isNaN, values, i, ExpressionStatement(), out, i, Double.NaN, ExpressionStatement(), out, i, values, i, normalizedSum, sum, ReturnStatement(return), out]
org.apache.commons.math4.util:MathArrays:buildArray:Field<T>+int#[VariableDeclarationStatement(), SuppressWarnings, "unchecked", T, array, T, Array, newInstance, field, getRuntimeClass, length, ExpressionStatement(), Arrays, fill, array, field, getZero, ReturnStatement(return), array]
org.apache.commons.math4.util:MathArrays:buildArray:Field<T>+int+int#[VariableDeclarationStatement(), final, T, array, IfStatement(if), columns, 0, VariableDeclarationStatement(), T, dummyRow, buildArray, field, 0, ExpressionStatement(), array, T, Array, newInstance, dummyRow, getClass, rows, ExpressionStatement(), array, T, Array, newInstance, field, getRuntimeClass, int, rows, columns, ForStatement(for), int, i, 0, i, rows, i, ExpressionStatement(), Arrays, fill, array, i, field, getZero, ReturnStatement(return), array]
org.apache.commons.math4.util:MathArrays:convolve:double[]+double[]#[ExpressionStatement(), MathUtils, checkNotNull, x, ExpressionStatement(), MathUtils, checkNotNull, h, VariableDeclarationStatement(), final, int, xLen, x.length, VariableDeclarationStatement(), final, int, hLen, h.length, IfStatement(if), xLen, 0, hLen, 0, ThrowStatement(throw), new, NoDataException, VariableDeclarationStatement(), final, int, totalLength, xLen, hLen, 1, VariableDeclarationStatement(), final, double, y, double, totalLength, ForStatement(for), int, n, 0, n, totalLength, n, VariableDeclarationStatement(), double, yn, 0, VariableDeclarationStatement(), int, k, FastMath, max, 0, n, 1, xLen, VariableDeclarationStatement(), int, j, n, k, WhileStatement(while), k, hLen, j, 0, ExpressionStatement(), yn, x, j, h, k, ExpressionStatement(), y, n, yn, ReturnStatement(return), y]
org.apache.commons.math4.util:MathArrays:shuffle:int[]+int+Position#[ExpressionStatement(), shuffle, list, start, pos, new, Well19937c]
org.apache.commons.math4.util:MathArrays:shuffle:int[]+int+Position+RandomGenerator#[SwitchStatement(switch), pos, SwitchCase(case), TAIL, ForStatement(for), int, i, list.length, 1, i, start, i, VariableDeclarationStatement(), final, int, target, IfStatement(if), i, start, ExpressionStatement(), target, start, ExpressionStatement(), target, new, UniformIntegerDistribution, rng, start, i, sample, VariableDeclarationStatement(), final, int, temp, list, target, ExpressionStatement(), list, target, list, i, ExpressionStatement(), list, i, temp, BreakStatement(break), SwitchCase(case), HEAD, ForStatement(for), int, i, 0, i, start, i, VariableDeclarationStatement(), final, int, target, IfStatement(if), i, start, ExpressionStatement(), target, start, ExpressionStatement(), target, new, UniformIntegerDistribution, rng, i, start, sample, VariableDeclarationStatement(), final, int, temp, list, target, ExpressionStatement(), list, target, list, i, ExpressionStatement(), list, i, temp, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathInternalError]
org.apache.commons.math4.util:MathArrays:shuffle:int[]+RandomGenerator#[ExpressionStatement(), shuffle, list, 0, Position.TAIL, rng]
org.apache.commons.math4.util:MathArrays:shuffle:int[]#[ExpressionStatement(), shuffle, list, new, Well19937c]
org.apache.commons.math4.util:MathArrays:natural:int#[ReturnStatement(return), sequence, n, 0, 1]
org.apache.commons.math4.util:MathArrays:sequence:int+int+int#[VariableDeclarationStatement(), final, int, a, int, size, ForStatement(for), int, i, 0, i, size, i, ExpressionStatement(), a, i, start, i, stride, ReturnStatement(return), a]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+int+int#[ReturnStatement(return), verifyValues, values, begin, length, false]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+int+int+boolean#[IfStatement(if), values, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, IfStatement(if), begin, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.START_POSITION, Integer, valueOf, begin, IfStatement(if), length, 0, ThrowStatement(throw), new, NotPositiveException, LocalizedFormats.LENGTH, Integer, valueOf, length, IfStatement(if), begin, length, values.length, ThrowStatement(throw), new, NumberIsTooLargeException, LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END, Integer, valueOf, begin, length, Integer, valueOf, values.length, true, IfStatement(if), length, 0, allowEmpty, ReturnStatement(return), false, ReturnStatement(return), true]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+double[]+int+int#[ReturnStatement(return), verifyValues, values, weights, begin, length, false]
org.apache.commons.math4.util:MathArrays:verifyValues:double[]+double[]+int+int+boolean#[IfStatement(if), weights, null, values, null, ThrowStatement(throw), new, NullArgumentException, LocalizedFormats.INPUT_ARRAY, ExpressionStatement(), checkEqualLength, weights, values, VariableDeclarationStatement(), boolean, containsPositiveWeight, false, ForStatement(for), int, i, begin, i, begin, length, i, VariableDeclarationStatement(), final, double, weight, weights, i, IfStatement(if), Double, isNaN, weight, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NAN_ELEMENT_AT_INDEX, Integer, valueOf, i, IfStatement(if), Double, isInfinite, weight, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INFINITE_ARRAY_ELEMENT, Double, valueOf, weight, Integer, valueOf, i, IfStatement(if), weight, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, Integer, valueOf, i, Double, valueOf, weight, IfStatement(if), containsPositiveWeight, weight, 0.0, ExpressionStatement(), containsPositiveWeight, true, IfStatement(if), containsPositiveWeight, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO, ReturnStatement(return), verifyValues, values, begin, length, allowEmpty]
org.apache.commons.math4.util:MathArrays:concatenate:double[]...#[VariableDeclarationStatement(), int, combinedLength, 0, EnhancedForStatement(for), double, a, x, ExpressionStatement(), combinedLength, a.length, VariableDeclarationStatement(), int, offset, 0, VariableDeclarationStatement(), int, curLength, 0, VariableDeclarationStatement(), final, double, combined, double, combinedLength, ForStatement(for), int, i, 0, i, x.length, i, ExpressionStatement(), curLength, x, i, length, ExpressionStatement(), System, arraycopy, x, i, 0, combined, offset, curLength, ExpressionStatement(), offset, curLength, ReturnStatement(return), combined]
org.apache.commons.math4.util:MathArrays:unique:double[]#[VariableDeclarationStatement(), TreeSet, Double, values, new, TreeSet, Double, ForStatement(for), int, i, 0, i, data.length, i, ExpressionStatement(), values, add, data, i, VariableDeclarationStatement(), final, int, count, values, size, VariableDeclarationStatement(), final, double, out, double, count, VariableDeclarationStatement(), Iterator, Double, iterator, values, descendingIterator, VariableDeclarationStatement(), int, i, 0, WhileStatement(while), iterator, hasNext, ExpressionStatement(), out, i, iterator, next, ReturnStatement(return), out]
org.apache.commons.math4.util:MathUtils:hash:double#[ReturnStatement(return), new, Double, value, hashCode]
org.apache.commons.math4.util:MathUtils:equals:double+double#[ReturnStatement(return), new, Double, x, equals, new, Double, y]
org.apache.commons.math4.util:MathUtils:hash:double[]#[ReturnStatement(return), Arrays, hashCode, value]
org.apache.commons.math4.util:MathUtils:normalizeAngle:double+double#[ReturnStatement(return), a, TWO_PI, FastMath, floor, a, FastMath.PI, center, TWO_PI]
org.apache.commons.math4.util:MathUtils:max:T+T#[ReturnStatement(return), e1, subtract, e2, getReal, 0, e1, e2]
org.apache.commons.math4.util:MathUtils:min:T+T#[ReturnStatement(return), e1, subtract, e2, getReal, 0, e2, e1]
org.apache.commons.math4.util:MathUtils:reduce:double+double+double#[VariableDeclarationStatement(), final, double, p, FastMath, abs, period, ReturnStatement(return), a, p, FastMath, floor, a, offset, p, offset]
org.apache.commons.math4.util:MathUtils:copySign:byte+byte#[IfStatement(if), magnitude, 0, sign, 0, magnitude, 0, sign, 0, ReturnStatement(return), magnitude, IfStatement(if), sign, 0, magnitude, Byte.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW, ReturnStatement(return), byte, magnitude]
org.apache.commons.math4.util:MathUtils:copySign:short+short#[IfStatement(if), magnitude, 0, sign, 0, magnitude, 0, sign, 0, ReturnStatement(return), magnitude, IfStatement(if), sign, 0, magnitude, Short.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW, ReturnStatement(return), short, magnitude]
org.apache.commons.math4.util:MathUtils:copySign:int+int#[IfStatement(if), magnitude, 0, sign, 0, magnitude, 0, sign, 0, ReturnStatement(return), magnitude, IfStatement(if), sign, 0, magnitude, Integer.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW, ReturnStatement(return), magnitude]
org.apache.commons.math4.util:MathUtils:copySign:long+long#[IfStatement(if), magnitude, 0, sign, 0, magnitude, 0, sign, 0, ReturnStatement(return), magnitude, IfStatement(if), sign, 0, magnitude, Long.MIN_VALUE, ThrowStatement(throw), new, MathArithmeticException, LocalizedFormats.OVERFLOW, ReturnStatement(return), magnitude]
org.apache.commons.math4.util:MathUtils:checkFinite:double#[IfStatement(if), Double, isInfinite, x, Double, isNaN, x, ThrowStatement(throw), new, NotFiniteNumberException, x]
org.apache.commons.math4.util:MathUtils:checkFinite:double[]#[ForStatement(for), int, i, 0, i, val.length, i, VariableDeclarationStatement(), final, double, x, val, i, IfStatement(if), Double, isInfinite, x, Double, isNaN, x, ThrowStatement(throw), new, NotFiniteNumberException, LocalizedFormats.ARRAY_ELEMENT, x, i]
org.apache.commons.math4.util:MathUtils:checkNotNull:Object+Localizable+Object...#[IfStatement(if), o, null, ThrowStatement(throw), new, NullArgumentException, pattern, args]
org.apache.commons.math4.util:MathUtils:checkNotNull:Object#[IfStatement(if), o, null, ThrowStatement(throw), new, NullArgumentException]
org.apache.commons.math4.util:MedianOf3PivotingStrategy:pivotIndex:double[]+int+int#[ExpressionStatement(), MathArrays, verifyValues, work, begin, end, begin, VariableDeclarationStatement(), final, int, inclusiveEnd, end, 1, VariableDeclarationStatement(), final, int, middle, begin, inclusiveEnd, begin, 2, VariableDeclarationStatement(), final, double, wBegin, work, begin, VariableDeclarationStatement(), final, double, wMiddle, work, middle, VariableDeclarationStatement(), final, double, wEnd, work, inclusiveEnd, IfStatement(if), wBegin, wMiddle, IfStatement(if), wMiddle, wEnd, ReturnStatement(return), middle, ReturnStatement(return), wBegin, wEnd, inclusiveEnd, begin, IfStatement(if), wBegin, wEnd, ReturnStatement(return), begin, ReturnStatement(return), wMiddle, wEnd, inclusiveEnd, middle]
org.apache.commons.math4.util:MultidimensionalCounter:iterator:null#[ReturnStatement(return), new, Iterator]
org.apache.commons.math4.util:MultidimensionalCounter:getDimension:null#[ReturnStatement(return), dimension]
org.apache.commons.math4.util:MultidimensionalCounter:getCounts:int#[IfStatement(if), index, 0, index, totalSize, ThrowStatement(throw), new, OutOfRangeException, index, 0, totalSize, VariableDeclarationStatement(), final, int, indices, int, dimension, VariableDeclarationStatement(), int, count, 0, ForStatement(for), int, i, 0, i, last, i, VariableDeclarationStatement(), int, idx, 0, VariableDeclarationStatement(), final, int, offset, uniCounterOffset, i, WhileStatement(while), count, index, ExpressionStatement(), count, offset, ExpressionStatement(), idx, ExpressionStatement(), idx, ExpressionStatement(), count, offset, ExpressionStatement(), indices, i, idx, ExpressionStatement(), indices, last, index, count, ReturnStatement(return), indices]
org.apache.commons.math4.util:MultidimensionalCounter:getCount:int...#[IfStatement(if), c.length, dimension, ThrowStatement(throw), new, DimensionMismatchException, c.length, dimension, VariableDeclarationStatement(), int, count, 0, ForStatement(for), int, i, 0, i, dimension, i, VariableDeclarationStatement(), final, int, index, c, i, IfStatement(if), index, 0, index, size, i, ThrowStatement(throw), new, OutOfRangeException, index, 0, size, i, 1, ExpressionStatement(), count, uniCounterOffset, i, c, i, ReturnStatement(return), count, c, last]
org.apache.commons.math4.util:MultidimensionalCounter:getSize:null#[ReturnStatement(return), totalSize]
org.apache.commons.math4.util:MultidimensionalCounter:getSizes:null#[ReturnStatement(return), MathArrays, copyOf, size]
org.apache.commons.math4.util:MultidimensionalCounter:toString:null#[VariableDeclarationStatement(), final, StringBuilder, sb, new, StringBuilder, ForStatement(for), int, i, 0, i, dimension, i, ExpressionStatement(), sb, append, "[", append, getCount, i, append, "]", ReturnStatement(return), sb, toString]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:computeCapacity:int#[IfStatement(if), expectedSize, 0, ReturnStatement(return), 1, VariableDeclarationStatement(), final, int, capacity, int, FastMath, ceil, expectedSize, LOAD_FACTOR, VariableDeclarationStatement(), final, int, powerOfTwo, Integer, highestOneBit, capacity, IfStatement(if), powerOfTwo, capacity, ReturnStatement(return), capacity, ReturnStatement(return), nextPowerOfTwo, capacity]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:nextPowerOfTwo:int#[ReturnStatement(return), Integer, highestOneBit, i, 1]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:get:int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), values, index, IfStatement(if), states, index, FREE, ReturnStatement(return), missingEntries, VariableDeclarationStatement(), int, j, index, ForStatement(for), int, perturb, perturb, hash, states, index, FREE, perturb, PERTURB_SHIFT, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), values, index, ReturnStatement(return), missingEntries]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:containsKey:int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), true, IfStatement(if), states, index, FREE, ReturnStatement(return), false, VariableDeclarationStatement(), int, j, index, ForStatement(for), int, perturb, perturb, hash, states, index, FREE, perturb, PERTURB_SHIFT, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:iterator:null#[ReturnStatement(return), new, Iterator]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:perturb:int#[ReturnStatement(return), hash, 0x7fffffff]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:findInsertionIndex:int#[ReturnStatement(return), findInsertionIndex, keys, states, key, mask]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:findInsertionIndex:int[]+byte[]+int+int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), states, index, FREE, ReturnStatement(return), index, IfStatement(if), states, index, FULL, keys, index, key, ReturnStatement(return), changeIndexSign, index, VariableDeclarationStatement(), int, perturb, perturb, hash, VariableDeclarationStatement(), int, j, index, IfStatement(if), states, index, FULL, WhileStatement(while), true, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, ExpressionStatement(), perturb, PERTURB_SHIFT, IfStatement(if), states, index, FULL, keys, index, key, BreakStatement(break), IfStatement(if), states, index, FREE, ReturnStatement(return), index, IfStatement(if), states, index, FULL, ReturnStatement(return), changeIndexSign, index, VariableDeclarationStatement(), final, int, firstRemoved, index, WhileStatement(while), true, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), states, index, FREE, ReturnStatement(return), firstRemoved, IfStatement(if), states, index, FULL, keys, index, key, ReturnStatement(return), changeIndexSign, index, ExpressionStatement(), perturb, PERTURB_SHIFT]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:probe:int+int#[ReturnStatement(return), j, 2, j, perturb, 1]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:changeIndexSign:int#[ReturnStatement(return), index, 1]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:size:null#[ReturnStatement(return), size]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:remove:int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), doRemove, index, IfStatement(if), states, index, FREE, ReturnStatement(return), missingEntries, VariableDeclarationStatement(), int, j, index, ForStatement(for), int, perturb, perturb, hash, states, index, FREE, perturb, PERTURB_SHIFT, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), doRemove, index, ReturnStatement(return), missingEntries]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:containsKey:int+int#[ReturnStatement(return), key, 0, states, index, FULL, keys, index, key]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:doRemove:int#[ExpressionStatement(), keys, index, 0, ExpressionStatement(), states, index, REMOVED, VariableDeclarationStatement(), final, double, previous, values, index, ExpressionStatement(), values, index, missingEntries, ExpressionStatement(), size, ExpressionStatement(), count, ReturnStatement(return), previous]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:put:int+double#[VariableDeclarationStatement(), int, index, findInsertionIndex, key, VariableDeclarationStatement(), double, previous, missingEntries, VariableDeclarationStatement(), boolean, newMapping, true, IfStatement(if), index, 0, ExpressionStatement(), index, changeIndexSign, index, ExpressionStatement(), previous, values, index, ExpressionStatement(), newMapping, false, ExpressionStatement(), keys, index, key, ExpressionStatement(), states, index, FULL, ExpressionStatement(), values, index, value, IfStatement(if), newMapping, ExpressionStatement(), size, IfStatement(if), shouldGrowTable, ExpressionStatement(), growTable, ExpressionStatement(), count, ReturnStatement(return), previous]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:growTable:null#[VariableDeclarationStatement(), final, int, oldLength, states.length, VariableDeclarationStatement(), final, int, oldKeys, keys, VariableDeclarationStatement(), final, double, oldValues, values, VariableDeclarationStatement(), final, byte, oldStates, states, VariableDeclarationStatement(), final, int, newLength, RESIZE_MULTIPLIER, oldLength, VariableDeclarationStatement(), final, int, newKeys, int, newLength, VariableDeclarationStatement(), final, double, newValues, double, newLength, VariableDeclarationStatement(), final, byte, newStates, byte, newLength, VariableDeclarationStatement(), final, int, newMask, newLength, 1, ForStatement(for), int, i, 0, i, oldLength, i, IfStatement(if), oldStates, i, FULL, VariableDeclarationStatement(), final, int, key, oldKeys, i, VariableDeclarationStatement(), final, int, index, findInsertionIndex, newKeys, newStates, key, newMask, ExpressionStatement(), newKeys, index, key, ExpressionStatement(), newValues, index, oldValues, i, ExpressionStatement(), newStates, index, FULL, ExpressionStatement(), mask, newMask, ExpressionStatement(), keys, newKeys, ExpressionStatement(), values, newValues, ExpressionStatement(), states, newStates]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:shouldGrowTable:null#[ReturnStatement(return), size, mask, 1, LOAD_FACTOR]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:hashOf:int#[VariableDeclarationStatement(), final, int, h, key, key, 20, key, 12, ReturnStatement(return), h, h, 7, h, 4]
org.apache.commons.math4.util:OpenIntToDoubleHashMap:readObject:ObjectInputStream#[ExpressionStatement(), stream, defaultReadObject, ExpressionStatement(), count, 0]
org.apache.commons.math4.util:OpenIntToFieldHashMap:computeCapacity:int#[IfStatement(if), expectedSize, 0, ReturnStatement(return), 1, VariableDeclarationStatement(), final, int, capacity, int, FastMath, ceil, expectedSize, LOAD_FACTOR, VariableDeclarationStatement(), final, int, powerOfTwo, Integer, highestOneBit, capacity, IfStatement(if), powerOfTwo, capacity, ReturnStatement(return), capacity, ReturnStatement(return), nextPowerOfTwo, capacity]
org.apache.commons.math4.util:OpenIntToFieldHashMap:nextPowerOfTwo:int#[ReturnStatement(return), Integer, highestOneBit, i, 1]
org.apache.commons.math4.util:OpenIntToFieldHashMap:get:int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), values, index, IfStatement(if), states, index, FREE, ReturnStatement(return), missingEntries, VariableDeclarationStatement(), int, j, index, ForStatement(for), int, perturb, perturb, hash, states, index, FREE, perturb, PERTURB_SHIFT, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), values, index, ReturnStatement(return), missingEntries]
org.apache.commons.math4.util:OpenIntToFieldHashMap:containsKey:int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), true, IfStatement(if), states, index, FREE, ReturnStatement(return), false, VariableDeclarationStatement(), int, j, index, ForStatement(for), int, perturb, perturb, hash, states, index, FREE, perturb, PERTURB_SHIFT, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.util:OpenIntToFieldHashMap:iterator:null#[ReturnStatement(return), new, Iterator]
org.apache.commons.math4.util:OpenIntToFieldHashMap:perturb:int#[ReturnStatement(return), hash, 0x7fffffff]
org.apache.commons.math4.util:OpenIntToFieldHashMap:findInsertionIndex:int#[ReturnStatement(return), findInsertionIndex, keys, states, key, mask]
org.apache.commons.math4.util:OpenIntToFieldHashMap:findInsertionIndex:int[]+byte[]+int+int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), states, index, FREE, ReturnStatement(return), index, IfStatement(if), states, index, FULL, keys, index, key, ReturnStatement(return), changeIndexSign, index, VariableDeclarationStatement(), int, perturb, perturb, hash, VariableDeclarationStatement(), int, j, index, IfStatement(if), states, index, FULL, WhileStatement(while), true, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, ExpressionStatement(), perturb, PERTURB_SHIFT, IfStatement(if), states, index, FULL, keys, index, key, BreakStatement(break), IfStatement(if), states, index, FREE, ReturnStatement(return), index, IfStatement(if), states, index, FULL, ReturnStatement(return), changeIndexSign, index, VariableDeclarationStatement(), final, int, firstRemoved, index, WhileStatement(while), true, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), states, index, FREE, ReturnStatement(return), firstRemoved, IfStatement(if), states, index, FULL, keys, index, key, ReturnStatement(return), changeIndexSign, index, ExpressionStatement(), perturb, PERTURB_SHIFT]
org.apache.commons.math4.util:OpenIntToFieldHashMap:probe:int+int#[ReturnStatement(return), j, 2, j, perturb, 1]
org.apache.commons.math4.util:OpenIntToFieldHashMap:changeIndexSign:int#[ReturnStatement(return), index, 1]
org.apache.commons.math4.util:OpenIntToFieldHashMap:size:null#[ReturnStatement(return), size]
org.apache.commons.math4.util:OpenIntToFieldHashMap:remove:int#[VariableDeclarationStatement(), final, int, hash, hashOf, key, VariableDeclarationStatement(), int, index, hash, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), doRemove, index, IfStatement(if), states, index, FREE, ReturnStatement(return), missingEntries, VariableDeclarationStatement(), int, j, index, ForStatement(for), int, perturb, perturb, hash, states, index, FREE, perturb, PERTURB_SHIFT, ExpressionStatement(), j, probe, perturb, j, ExpressionStatement(), index, j, mask, IfStatement(if), containsKey, key, index, ReturnStatement(return), doRemove, index, ReturnStatement(return), missingEntries]
org.apache.commons.math4.util:OpenIntToFieldHashMap:containsKey:int+int#[ReturnStatement(return), key, 0, states, index, FULL, keys, index, key]
org.apache.commons.math4.util:OpenIntToFieldHashMap:doRemove:int#[ExpressionStatement(), keys, index, 0, ExpressionStatement(), states, index, REMOVED, VariableDeclarationStatement(), final, T, previous, values, index, ExpressionStatement(), values, index, missingEntries, ExpressionStatement(), size, ExpressionStatement(), count, ReturnStatement(return), previous]
org.apache.commons.math4.util:OpenIntToFieldHashMap:put:int+T#[VariableDeclarationStatement(), int, index, findInsertionIndex, key, VariableDeclarationStatement(), T, previous, missingEntries, VariableDeclarationStatement(), boolean, newMapping, true, IfStatement(if), index, 0, ExpressionStatement(), index, changeIndexSign, index, ExpressionStatement(), previous, values, index, ExpressionStatement(), newMapping, false, ExpressionStatement(), keys, index, key, ExpressionStatement(), states, index, FULL, ExpressionStatement(), values, index, value, IfStatement(if), newMapping, ExpressionStatement(), size, IfStatement(if), shouldGrowTable, ExpressionStatement(), growTable, ExpressionStatement(), count, ReturnStatement(return), previous]
org.apache.commons.math4.util:OpenIntToFieldHashMap:growTable:null#[VariableDeclarationStatement(), final, int, oldLength, states.length, VariableDeclarationStatement(), final, int, oldKeys, keys, VariableDeclarationStatement(), final, T, oldValues, values, VariableDeclarationStatement(), final, byte, oldStates, states, VariableDeclarationStatement(), final, int, newLength, RESIZE_MULTIPLIER, oldLength, VariableDeclarationStatement(), final, int, newKeys, int, newLength, VariableDeclarationStatement(), final, T, newValues, buildArray, newLength, VariableDeclarationStatement(), final, byte, newStates, byte, newLength, VariableDeclarationStatement(), final, int, newMask, newLength, 1, ForStatement(for), int, i, 0, i, oldLength, i, IfStatement(if), oldStates, i, FULL, VariableDeclarationStatement(), final, int, key, oldKeys, i, VariableDeclarationStatement(), final, int, index, findInsertionIndex, newKeys, newStates, key, newMask, ExpressionStatement(), newKeys, index, key, ExpressionStatement(), newValues, index, oldValues, i, ExpressionStatement(), newStates, index, FULL, ExpressionStatement(), mask, newMask, ExpressionStatement(), keys, newKeys, ExpressionStatement(), values, newValues, ExpressionStatement(), states, newStates]
org.apache.commons.math4.util:OpenIntToFieldHashMap:shouldGrowTable:null#[ReturnStatement(return), size, mask, 1, LOAD_FACTOR]
org.apache.commons.math4.util:OpenIntToFieldHashMap:hashOf:int#[VariableDeclarationStatement(), final, int, h, key, key, 20, key, 12, ReturnStatement(return), h, h, 7, h, 4]
org.apache.commons.math4.util:OpenIntToFieldHashMap:readObject:ObjectInputStream#[ExpressionStatement(), stream, defaultReadObject, ExpressionStatement(), count, 0]
org.apache.commons.math4.util:OpenIntToFieldHashMap:buildArray:int#[ReturnStatement(return), T, Array, newInstance, field, getRuntimeClass, length]
org.apache.commons.math4.util:Pair:getKey:null#[ReturnStatement(return), key]
org.apache.commons.math4.util:Pair:getValue:null#[ReturnStatement(return), value]
org.apache.commons.math4.util:Pair:getFirst:null#[ReturnStatement(return), key]
org.apache.commons.math4.util:Pair:getSecond:null#[ReturnStatement(return), value]
org.apache.commons.math4.util:Pair:equals:Object#[IfStatement(if), this, o, ReturnStatement(return), true, IfStatement(if), instanceof, o, Pair, ReturnStatement(return), false, VariableDeclarationStatement(), Pair, oP, Pair, o, ReturnStatement(return), key, null, oP.key, null, key, equals, oP.key, value, null, oP.value, null, value, equals, oP.value]
org.apache.commons.math4.util:Pair:hashCode:null#[VariableDeclarationStatement(), int, result, key, null, 0, key, hashCode, VariableDeclarationStatement(), final, int, h, value, null, 0, value, hashCode, ExpressionStatement(), result, 37, result, h, h, 16, ReturnStatement(return), result]
org.apache.commons.math4.util:Pair:toString:null#[ReturnStatement(return), "[", getKey, ", ", getValue, "]"]
org.apache.commons.math4.util:Pair:create:K+V#[ReturnStatement(return), new, Pair, K, V, k, v]
org.apache.commons.math4.util:Precision:compareTo:double+double+double#[IfStatement(if), equals, x, y, eps, ReturnStatement(return), 0, IfStatement(if), x, y, ReturnStatement(return), 1, ReturnStatement(return), 1]
org.apache.commons.math4.util:Precision:compareTo:double+double+int#[IfStatement(if), equals, x, y, maxUlps, ReturnStatement(return), 0, IfStatement(if), x, y, ReturnStatement(return), 1, ReturnStatement(return), 1]
org.apache.commons.math4.util:Precision:equals:float+float#[ReturnStatement(return), equals, x, y, 1]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:float+float#[ReturnStatement(return), x, x, y, y, x, x, y, y, equals, x, y, 1]
org.apache.commons.math4.util:Precision:equals:float+float+float#[ReturnStatement(return), equals, x, y, 1, FastMath, abs, y, x, eps]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:float+float+float#[ReturnStatement(return), equalsIncludingNaN, x, y, FastMath, abs, y, x, eps]
org.apache.commons.math4.util:Precision:equals:float+float+int#[VariableDeclarationStatement(), final, int, xInt, Float, floatToRawIntBits, x, VariableDeclarationStatement(), final, int, yInt, Float, floatToRawIntBits, y, VariableDeclarationStatement(), final, boolean, isEqual, IfStatement(if), xInt, yInt, SGN_MASK_FLOAT, 0, ExpressionStatement(), isEqual, FastMath, abs, xInt, yInt, maxUlps, VariableDeclarationStatement(), final, int, deltaPlus, VariableDeclarationStatement(), final, int, deltaMinus, IfStatement(if), xInt, yInt, ExpressionStatement(), deltaPlus, yInt, POSITIVE_ZERO_FLOAT_BITS, ExpressionStatement(), deltaMinus, xInt, NEGATIVE_ZERO_FLOAT_BITS, ExpressionStatement(), deltaPlus, xInt, POSITIVE_ZERO_FLOAT_BITS, ExpressionStatement(), deltaMinus, yInt, NEGATIVE_ZERO_FLOAT_BITS, IfStatement(if), deltaPlus, maxUlps, ExpressionStatement(), isEqual, false, ExpressionStatement(), isEqual, deltaMinus, maxUlps, deltaPlus, ReturnStatement(return), isEqual, Float, isNaN, x, Float, isNaN, y]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:float+float+int#[ReturnStatement(return), x, x, y, y, x, x, y, y, equals, x, y, maxUlps]
org.apache.commons.math4.util:Precision:equals:double+double#[ReturnStatement(return), equals, x, y, 1]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:double+double#[ReturnStatement(return), x, x, y, y, x, x, y, y, equals, x, y, 1]
org.apache.commons.math4.util:Precision:equals:double+double+double#[ReturnStatement(return), equals, x, y, 1, FastMath, abs, y, x, eps]
org.apache.commons.math4.util:Precision:equalsWithRelativeTolerance:double+double+double#[IfStatement(if), equals, x, y, 1, ReturnStatement(return), true, VariableDeclarationStatement(), final, double, absoluteMax, FastMath, max, FastMath, abs, x, FastMath, abs, y, VariableDeclarationStatement(), final, double, relativeDifference, FastMath, abs, x, y, absoluteMax, ReturnStatement(return), relativeDifference, eps]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:double+double+double#[ReturnStatement(return), equalsIncludingNaN, x, y, FastMath, abs, y, x, eps]
org.apache.commons.math4.util:Precision:equals:double+double+int#[VariableDeclarationStatement(), final, long, xInt, Double, doubleToRawLongBits, x, VariableDeclarationStatement(), final, long, yInt, Double, doubleToRawLongBits, y, VariableDeclarationStatement(), final, boolean, isEqual, IfStatement(if), xInt, yInt, SGN_MASK, 0l, ExpressionStatement(), isEqual, FastMath, abs, xInt, yInt, maxUlps, VariableDeclarationStatement(), final, long, deltaPlus, VariableDeclarationStatement(), final, long, deltaMinus, IfStatement(if), xInt, yInt, ExpressionStatement(), deltaPlus, yInt, POSITIVE_ZERO_DOUBLE_BITS, ExpressionStatement(), deltaMinus, xInt, NEGATIVE_ZERO_DOUBLE_BITS, ExpressionStatement(), deltaPlus, xInt, POSITIVE_ZERO_DOUBLE_BITS, ExpressionStatement(), deltaMinus, yInt, NEGATIVE_ZERO_DOUBLE_BITS, IfStatement(if), deltaPlus, maxUlps, ExpressionStatement(), isEqual, false, ExpressionStatement(), isEqual, deltaMinus, maxUlps, deltaPlus, ReturnStatement(return), isEqual, Double, isNaN, x, Double, isNaN, y]
org.apache.commons.math4.util:Precision:equalsIncludingNaN:double+double+int#[ReturnStatement(return), x, x, y, y, x, x, y, y, equals, x, y, maxUlps]
org.apache.commons.math4.util:Precision:round:double+int#[ReturnStatement(return), round, x, scale, BigDecimal.ROUND_HALF_UP]
org.apache.commons.math4.util:Precision:round:double+int+int#[TryStatement(try), VariableDeclarationStatement(), final, double, rounded, new, BigDecimal, Double, toString, x, setScale, scale, roundingMethod, doubleValue, ReturnStatement(return), rounded, POSITIVE_ZERO, POSITIVE_ZERO, x, rounded, catch, NumberFormatException, ex, IfStatement(if), Double, isInfinite, x, ReturnStatement(return), x, ReturnStatement(return), Double.NaN]
org.apache.commons.math4.util:Precision:round:float+int#[ReturnStatement(return), round, x, scale, BigDecimal.ROUND_HALF_UP]
org.apache.commons.math4.util:Precision:round:float+int+int#[VariableDeclarationStatement(), final, float, sign, FastMath, copySign, 1f, x, VariableDeclarationStatement(), final, float, factor, float, FastMath, pow, 10.0f, scale, sign, ReturnStatement(return), float, roundUnscaled, x, factor, sign, roundingMethod, factor]
org.apache.commons.math4.util:Precision:roundUnscaled:double+double+int#[SwitchStatement(switch), roundingMethod, SwitchCase(case), BigDecimal.ROUND_CEILING, IfStatement(if), sign, 1, ExpressionStatement(), unscaled, FastMath, floor, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, ExpressionStatement(), unscaled, FastMath, ceil, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, BreakStatement(break), SwitchCase(case), BigDecimal.ROUND_DOWN, ExpressionStatement(), unscaled, FastMath, floor, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, BreakStatement(break), SwitchCase(case), BigDecimal.ROUND_FLOOR, IfStatement(if), sign, 1, ExpressionStatement(), unscaled, FastMath, ceil, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, ExpressionStatement(), unscaled, FastMath, floor, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, BreakStatement(break), SwitchCase(case), BigDecimal.ROUND_HALF_DOWN, ExpressionStatement(), unscaled, FastMath, nextAfter, unscaled, Double.NEGATIVE_INFINITY, VariableDeclarationStatement(), double, fraction, unscaled, FastMath, floor, unscaled, IfStatement(if), fraction, 0.5, ExpressionStatement(), unscaled, FastMath, ceil, unscaled, ExpressionStatement(), unscaled, FastMath, floor, unscaled, BreakStatement(break), SwitchCase(case), BigDecimal.ROUND_HALF_EVEN, VariableDeclarationStatement(), double, fraction, unscaled, FastMath, floor, unscaled, IfStatement(if), fraction, 0.5, ExpressionStatement(), unscaled, FastMath, ceil, unscaled, IfStatement(if), fraction, 0.5, ExpressionStatement(), unscaled, FastMath, floor, unscaled, IfStatement(if), FastMath, floor, unscaled, 2.0, FastMath, floor, FastMath, floor, unscaled, 2.0, ExpressionStatement(), unscaled, FastMath, floor, unscaled, ExpressionStatement(), unscaled, FastMath, ceil, unscaled, BreakStatement(break), SwitchCase(case), BigDecimal.ROUND_HALF_UP, ExpressionStatement(), unscaled, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, VariableDeclarationStatement(), double, fraction, unscaled, FastMath, floor, unscaled, IfStatement(if), fraction, 0.5, ExpressionStatement(), unscaled, FastMath, ceil, unscaled, ExpressionStatement(), unscaled, FastMath, floor, unscaled, BreakStatement(break), SwitchCase(case), BigDecimal.ROUND_UNNECESSARY, IfStatement(if), unscaled, FastMath, floor, unscaled, ThrowStatement(throw), new, MathArithmeticException, BreakStatement(break), SwitchCase(case), BigDecimal.ROUND_UP, IfStatement(if), unscaled, FastMath, floor, unscaled, ExpressionStatement(), unscaled, FastMath, ceil, FastMath, nextAfter, unscaled, Double.POSITIVE_INFINITY, BreakStatement(break), SwitchCase(default), ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, "ROUND_CEILING", BigDecimal.ROUND_CEILING, "ROUND_DOWN", BigDecimal.ROUND_DOWN, "ROUND_FLOOR", BigDecimal.ROUND_FLOOR, "ROUND_HALF_DOWN", BigDecimal.ROUND_HALF_DOWN, "ROUND_HALF_EVEN", BigDecimal.ROUND_HALF_EVEN, "ROUND_HALF_UP", BigDecimal.ROUND_HALF_UP, "ROUND_UNNECESSARY", BigDecimal.ROUND_UNNECESSARY, "ROUND_UP", BigDecimal.ROUND_UP, ReturnStatement(return), unscaled]
org.apache.commons.math4.util:Precision:representableDelta:double+double#[ReturnStatement(return), x, originalDelta, x]
org.apache.commons.math4.util:RandomPivotingStrategy:pivotIndex:double[]+int+int#[ExpressionStatement(), MathArrays, verifyValues, work, begin, end, begin, ReturnStatement(return), begin, random, nextInt, end, begin, 1]
org.apache.commons.math4.util:ResizableDoubleArray:addElement:double#[IfStatement(if), internalArray.length, startIndex, numElements, ExpressionStatement(), expand, ExpressionStatement(), internalArray, startIndex, numElements, value]
org.apache.commons.math4.util:ResizableDoubleArray:addElements:double[]#[VariableDeclarationStatement(), final, double, tempArray, double, numElements, values.length, 1, ExpressionStatement(), System, arraycopy, internalArray, startIndex, tempArray, 0, numElements, ExpressionStatement(), System, arraycopy, values, 0, tempArray, numElements, values.length, ExpressionStatement(), internalArray, tempArray, ExpressionStatement(), startIndex, 0, ExpressionStatement(), numElements, values.length]
org.apache.commons.math4.util:ResizableDoubleArray:addElementRolling:double#[VariableDeclarationStatement(), double, discarded, internalArray, startIndex, IfStatement(if), startIndex, numElements, 1, internalArray.length, ExpressionStatement(), expand, ExpressionStatement(), startIndex, 1, ExpressionStatement(), internalArray, startIndex, numElements, 1, value, IfStatement(if), shouldContract, ExpressionStatement(), contract, ReturnStatement(return), discarded]
org.apache.commons.math4.util:ResizableDoubleArray:substituteMostRecentElement:double#[IfStatement(if), numElements, 1, ThrowStatement(throw), new, MathIllegalStateException, LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, VariableDeclarationStatement(), final, int, substIndex, startIndex, numElements, 1, VariableDeclarationStatement(), final, double, discarded, internalArray, substIndex, ExpressionStatement(), internalArray, substIndex, value, ReturnStatement(return), discarded]
org.apache.commons.math4.util:ResizableDoubleArray:checkContractExpand:double+double#[IfStatement(if), contraction, expansion, VariableDeclarationStatement(), final, NumberIsTooSmallException, e, new, NumberIsTooSmallException, contraction, 1, true, ExpressionStatement(), e, getContext, addMessage, LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, contraction, expansion, ThrowStatement(throw), e, IfStatement(if), contraction, 1, VariableDeclarationStatement(), final, NumberIsTooSmallException, e, new, NumberIsTooSmallException, contraction, 1, false, ExpressionStatement(), e, getContext, addMessage, LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, contraction, ThrowStatement(throw), e, IfStatement(if), expansion, 1, VariableDeclarationStatement(), final, NumberIsTooSmallException, e, new, NumberIsTooSmallException, contraction, 1, false, ExpressionStatement(), e, getContext, addMessage, LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, expansion, ThrowStatement(throw), e]
org.apache.commons.math4.util:ResizableDoubleArray:clear:null#[ExpressionStatement(), numElements, 0, ExpressionStatement(), startIndex, 0]
org.apache.commons.math4.util:ResizableDoubleArray:contract:null#[VariableDeclarationStatement(), final, double, tempArray, double, numElements, 1, ExpressionStatement(), System, arraycopy, internalArray, startIndex, tempArray, 0, numElements, ExpressionStatement(), internalArray, tempArray, ExpressionStatement(), startIndex, 0]
org.apache.commons.math4.util:ResizableDoubleArray:discardFrontElements:int#[ExpressionStatement(), discardExtremeElements, i, true]
org.apache.commons.math4.util:ResizableDoubleArray:discardMostRecentElements:int#[ExpressionStatement(), discardExtremeElements, i, false]
org.apache.commons.math4.util:ResizableDoubleArray:discardExtremeElements:int+boolean#[IfStatement(if), i, numElements, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, i, numElements, IfStatement(if), i, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, i, ExpressionStatement(), numElements, i, IfStatement(if), front, ExpressionStatement(), startIndex, i, IfStatement(if), shouldContract, ExpressionStatement(), contract]
org.apache.commons.math4.util:ResizableDoubleArray:expand:null#[VariableDeclarationStatement(), int, newSize, 0, IfStatement(if), expansionMode, ExpansionMode.MULTIPLICATIVE, ExpressionStatement(), newSize, int, FastMath, ceil, internalArray.length, expansionFactor, ExpressionStatement(), newSize, int, internalArray.length, FastMath, round, expansionFactor, VariableDeclarationStatement(), final, double, tempArray, double, newSize, ExpressionStatement(), System, arraycopy, internalArray, 0, tempArray, 0, internalArray.length, ExpressionStatement(), internalArray, tempArray]
org.apache.commons.math4.util:ResizableDoubleArray:expandTo:int#[VariableDeclarationStatement(), final, double, tempArray, double, size, ExpressionStatement(), System, arraycopy, internalArray, 0, tempArray, 0, internalArray.length, ExpressionStatement(), internalArray, tempArray]
org.apache.commons.math4.util:ResizableDoubleArray:getContractionCriterion:null#[ReturnStatement(return), contractionCriterion]
org.apache.commons.math4.util:ResizableDoubleArray:getElement:int#[IfStatement(if), index, numElements, ThrowStatement(throw), new, ArrayIndexOutOfBoundsException, index, IfStatement(if), index, 0, ReturnStatement(return), internalArray, startIndex, index, ThrowStatement(throw), new, ArrayIndexOutOfBoundsException, index]
org.apache.commons.math4.util:ResizableDoubleArray:getElements:null#[VariableDeclarationStatement(), final, double, elementArray, double, numElements, ExpressionStatement(), System, arraycopy, internalArray, startIndex, elementArray, 0, numElements, ReturnStatement(return), elementArray]
org.apache.commons.math4.util:ResizableDoubleArray:getExpansionFactor:null#[ReturnStatement(return), expansionFactor]
org.apache.commons.math4.util:ResizableDoubleArray:getExpansionMode:null#[ReturnStatement(return), expansionMode]
org.apache.commons.math4.util:ResizableDoubleArray:getCapacity:null#[ReturnStatement(return), internalArray.length]
org.apache.commons.math4.util:ResizableDoubleArray:getNumElements:null#[ReturnStatement(return), numElements]
org.apache.commons.math4.util:ResizableDoubleArray:getArrayRef:null#[ReturnStatement(return), internalArray]
org.apache.commons.math4.util:ResizableDoubleArray:getStartIndex:null#[ReturnStatement(return), startIndex]
org.apache.commons.math4.util:ResizableDoubleArray:compute:MathArrays.Function#[ReturnStatement(return), f, evaluate, internalArray, startIndex, numElements]
org.apache.commons.math4.util:ResizableDoubleArray:setElement:int+double#[IfStatement(if), index, 0, ThrowStatement(throw), new, ArrayIndexOutOfBoundsException, index, IfStatement(if), index, 1, numElements, ExpressionStatement(), numElements, index, 1, IfStatement(if), startIndex, index, internalArray.length, ExpressionStatement(), expandTo, startIndex, index, 1, ExpressionStatement(), internalArray, startIndex, index, value]
org.apache.commons.math4.util:ResizableDoubleArray:setNumElements:int#[IfStatement(if), i, 0, ThrowStatement(throw), new, MathIllegalArgumentException, LocalizedFormats.INDEX_NOT_POSITIVE, i, VariableDeclarationStatement(), final, int, newSize, startIndex, i, IfStatement(if), newSize, internalArray.length, ExpressionStatement(), expandTo, newSize, ExpressionStatement(), numElements, i]
org.apache.commons.math4.util:ResizableDoubleArray:shouldContract:null#[IfStatement(if), expansionMode, ExpansionMode.MULTIPLICATIVE, ReturnStatement(return), internalArray.length, float, numElements, contractionCriterion, ReturnStatement(return), internalArray.length, numElements, contractionCriterion]
org.apache.commons.math4.util:ResizableDoubleArray:copy:null#[ReturnStatement(return), new, ResizableDoubleArray, this]
org.apache.commons.math4.util:ResizableDoubleArray:equals:Object#[IfStatement(if), object, this, ReturnStatement(return), true, IfStatement(if), instanceof, object, ResizableDoubleArray, false, ReturnStatement(return), false, VariableDeclarationStatement(), boolean, result, true, VariableDeclarationStatement(), final, ResizableDoubleArray, other, ResizableDoubleArray, object, ExpressionStatement(), result, result, other.contractionCriterion, contractionCriterion, ExpressionStatement(), result, result, other.expansionFactor, expansionFactor, ExpressionStatement(), result, result, other.expansionMode, expansionMode, ExpressionStatement(), result, result, other.numElements, numElements, ExpressionStatement(), result, result, other.startIndex, startIndex, IfStatement(if), result, ReturnStatement(return), false, ReturnStatement(return), Arrays, equals, internalArray, other.internalArray]
org.apache.commons.math4.util:ResizableDoubleArray:hashCode:null#[VariableDeclarationStatement(), final, int, hashData, int, 6, ExpressionStatement(), hashData, 0, Double, valueOf, expansionFactor, hashCode, ExpressionStatement(), hashData, 1, Double, valueOf, contractionCriterion, hashCode, ExpressionStatement(), hashData, 2, expansionMode, hashCode, ExpressionStatement(), hashData, 3, Arrays, hashCode, internalArray, ExpressionStatement(), hashData, 4, numElements, ExpressionStatement(), hashData, 5, startIndex, ReturnStatement(return), Arrays, hashCode, hashData]
org.apache.commons.math4.util:TransformerMap:containsClass:Class<?>#[ReturnStatement(return), map, containsKey, key]
org.apache.commons.math4.util:TransformerMap:containsTransformer:NumberTransformer#[ReturnStatement(return), map, containsValue, value]
org.apache.commons.math4.util:TransformerMap:getTransformer:Class<?>#[ReturnStatement(return), map, get, key]
org.apache.commons.math4.util:TransformerMap:putTransformer:Class<?>+NumberTransformer#[ReturnStatement(return), map, put, key, transformer]
org.apache.commons.math4.util:TransformerMap:removeTransformer:Class<?>#[ReturnStatement(return), map, remove, key]
org.apache.commons.math4.util:TransformerMap:clear:null#[ExpressionStatement(), map, clear]
org.apache.commons.math4.util:TransformerMap:classes:null#[ReturnStatement(return), map, keySet]
org.apache.commons.math4.util:TransformerMap:transformers:null#[ReturnStatement(return), map, values]
org.apache.commons.math4.util:TransformerMap:transform:Object#[VariableDeclarationStatement(), double, value, Double.NaN, IfStatement(if), instanceof, o, Number, instanceof, o, String, ExpressionStatement(), value, defaultTransformer, transform, o, VariableDeclarationStatement(), NumberTransformer, trans, getTransformer, o, getClass, IfStatement(if), trans, null, ExpressionStatement(), value, trans, transform, o, ReturnStatement(return), value]
org.apache.commons.math4.util:TransformerMap:equals:Object#[IfStatement(if), this, other, ReturnStatement(return), true, IfStatement(if), instanceof, other, TransformerMap, VariableDeclarationStatement(), TransformerMap, rhs, TransformerMap, other, IfStatement(if), defaultTransformer, equals, rhs.defaultTransformer, ReturnStatement(return), false, IfStatement(if), map, size, rhs.map, size, ReturnStatement(return), false, EnhancedForStatement(for), Map.Entry, Class, NumberTransformer, entry, map, entrySet, IfStatement(if), entry, getValue, equals, rhs.map, get, entry, getKey, ReturnStatement(return), false, ReturnStatement(return), true, ReturnStatement(return), false]
org.apache.commons.math4.util:TransformerMap:hashCode:null#[VariableDeclarationStatement(), int, hash, defaultTransformer, hashCode, EnhancedForStatement(for), NumberTransformer, t, map, values, ExpressionStatement(), hash, hash, 31, t, hashCode, ReturnStatement(return), hash]
